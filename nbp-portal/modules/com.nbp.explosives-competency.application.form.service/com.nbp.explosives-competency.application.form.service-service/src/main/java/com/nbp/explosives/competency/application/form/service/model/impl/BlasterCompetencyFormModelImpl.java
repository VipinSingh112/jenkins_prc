/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.explosives.competency.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.explosives.competency.application.form.service.model.BlasterCompetencyForm;
import com.nbp.explosives.competency.application.form.service.model.BlasterCompetencyFormModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BlasterCompetencyForm service. Represents a row in the &quot;nbp_blaster_competency&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BlasterCompetencyFormModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BlasterCompetencyFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BlasterCompetencyFormImpl
 * @generated
 */
@JSON(strict = true)
public class BlasterCompetencyFormModelImpl
	extends BaseModelImpl<BlasterCompetencyForm>
	implements BlasterCompetencyFormModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a blaster competency form model instance should use the <code>BlasterCompetencyForm</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_blaster_competency";

	public static final Object[][] TABLE_COLUMNS = {
		{"blasterCompetencyFormId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"firstName", Types.VARCHAR},
		{"surName", Types.VARCHAR}, {"middleName", Types.VARCHAR},
		{"gender", Types.VARCHAR}, {"officeNumber", Types.VARCHAR},
		{"cellNum", Types.VARCHAR}, {"trnNum", Types.VARCHAR},
		{"dateOfBirth", Types.TIMESTAMP}, {"address", Types.VARCHAR},
		{"educationalBack", Types.VARCHAR}, {"blastingCourse", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"nameOfCourse", Types.VARCHAR},
		{"courseOrganiser", Types.VARCHAR}, {"dateAppli", Types.TIMESTAMP},
		{"explosivesApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("blasterCompetencyFormId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("surName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("middleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officeNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cellNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trnNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("educationalBack", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("blastingCourse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfCourse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("courseOrganiser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateAppli", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("explosivesApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_blaster_competency (blasterCompetencyFormId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,surName VARCHAR(75) null,middleName VARCHAR(75) null,gender VARCHAR(75) null,officeNumber VARCHAR(75) null,cellNum VARCHAR(75) null,trnNum VARCHAR(75) null,dateOfBirth DATE null,address VARCHAR(500) null,educationalBack VARCHAR(75) null,blastingCourse VARCHAR(75) null,state_ VARCHAR(75) null,nameOfCourse VARCHAR(75) null,courseOrganiser VARCHAR(75) null,dateAppli DATE null,explosivesApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_blaster_competency";

	public static final String ORDER_BY_JPQL =
		" ORDER BY blasterCompetencyForm.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_blaster_competency.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPLOSIVESAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BlasterCompetencyFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _blasterCompetencyFormId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBlasterCompetencyFormId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _blasterCompetencyFormId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BlasterCompetencyForm.class;
	}

	@Override
	public String getModelClassName() {
		return BlasterCompetencyForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BlasterCompetencyForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BlasterCompetencyForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BlasterCompetencyForm, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BlasterCompetencyForm)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BlasterCompetencyForm, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BlasterCompetencyForm, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BlasterCompetencyForm)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BlasterCompetencyForm, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BlasterCompetencyForm, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<BlasterCompetencyForm, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<BlasterCompetencyForm, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<BlasterCompetencyForm, Object>>();

			attributeGetterFunctions.put(
				"blasterCompetencyFormId",
				BlasterCompetencyForm::getBlasterCompetencyFormId);
			attributeGetterFunctions.put(
				"groupId", BlasterCompetencyForm::getGroupId);
			attributeGetterFunctions.put(
				"companyId", BlasterCompetencyForm::getCompanyId);
			attributeGetterFunctions.put(
				"userId", BlasterCompetencyForm::getUserId);
			attributeGetterFunctions.put(
				"userName", BlasterCompetencyForm::getUserName);
			attributeGetterFunctions.put(
				"createDate", BlasterCompetencyForm::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", BlasterCompetencyForm::getModifiedDate);
			attributeGetterFunctions.put(
				"firstName", BlasterCompetencyForm::getFirstName);
			attributeGetterFunctions.put(
				"surName", BlasterCompetencyForm::getSurName);
			attributeGetterFunctions.put(
				"middleName", BlasterCompetencyForm::getMiddleName);
			attributeGetterFunctions.put(
				"gender", BlasterCompetencyForm::getGender);
			attributeGetterFunctions.put(
				"officeNumber", BlasterCompetencyForm::getOfficeNumber);
			attributeGetterFunctions.put(
				"cellNum", BlasterCompetencyForm::getCellNum);
			attributeGetterFunctions.put(
				"trnNum", BlasterCompetencyForm::getTrnNum);
			attributeGetterFunctions.put(
				"dateOfBirth", BlasterCompetencyForm::getDateOfBirth);
			attributeGetterFunctions.put(
				"address", BlasterCompetencyForm::getAddress);
			attributeGetterFunctions.put(
				"educationalBack", BlasterCompetencyForm::getEducationalBack);
			attributeGetterFunctions.put(
				"blastingCourse", BlasterCompetencyForm::getBlastingCourse);
			attributeGetterFunctions.put(
				"state", BlasterCompetencyForm::getState);
			attributeGetterFunctions.put(
				"nameOfCourse", BlasterCompetencyForm::getNameOfCourse);
			attributeGetterFunctions.put(
				"courseOrganiser", BlasterCompetencyForm::getCourseOrganiser);
			attributeGetterFunctions.put(
				"dateAppli", BlasterCompetencyForm::getDateAppli);
			attributeGetterFunctions.put(
				"explosivesApplicationId",
				BlasterCompetencyForm::getExplosivesApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<BlasterCompetencyForm, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<BlasterCompetencyForm, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<BlasterCompetencyForm, ?>>();

			attributeSetterBiConsumers.put(
				"blasterCompetencyFormId",
				(BiConsumer<BlasterCompetencyForm, Long>)
					BlasterCompetencyForm::setBlasterCompetencyFormId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<BlasterCompetencyForm, Long>)
					BlasterCompetencyForm::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<BlasterCompetencyForm, Long>)
					BlasterCompetencyForm::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<BlasterCompetencyForm, Long>)
					BlasterCompetencyForm::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<BlasterCompetencyForm, Date>)
					BlasterCompetencyForm::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<BlasterCompetencyForm, Date>)
					BlasterCompetencyForm::setModifiedDate);
			attributeSetterBiConsumers.put(
				"firstName",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setFirstName);
			attributeSetterBiConsumers.put(
				"surName",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setSurName);
			attributeSetterBiConsumers.put(
				"middleName",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setMiddleName);
			attributeSetterBiConsumers.put(
				"gender",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setGender);
			attributeSetterBiConsumers.put(
				"officeNumber",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setOfficeNumber);
			attributeSetterBiConsumers.put(
				"cellNum",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setCellNum);
			attributeSetterBiConsumers.put(
				"trnNum",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setTrnNum);
			attributeSetterBiConsumers.put(
				"dateOfBirth",
				(BiConsumer<BlasterCompetencyForm, Date>)
					BlasterCompetencyForm::setDateOfBirth);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setAddress);
			attributeSetterBiConsumers.put(
				"educationalBack",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setEducationalBack);
			attributeSetterBiConsumers.put(
				"blastingCourse",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setBlastingCourse);
			attributeSetterBiConsumers.put(
				"state",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setState);
			attributeSetterBiConsumers.put(
				"nameOfCourse",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setNameOfCourse);
			attributeSetterBiConsumers.put(
				"courseOrganiser",
				(BiConsumer<BlasterCompetencyForm, String>)
					BlasterCompetencyForm::setCourseOrganiser);
			attributeSetterBiConsumers.put(
				"dateAppli",
				(BiConsumer<BlasterCompetencyForm, Date>)
					BlasterCompetencyForm::setDateAppli);
			attributeSetterBiConsumers.put(
				"explosivesApplicationId",
				(BiConsumer<BlasterCompetencyForm, Long>)
					BlasterCompetencyForm::setExplosivesApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getBlasterCompetencyFormId() {
		return _blasterCompetencyFormId;
	}

	@Override
	public void setBlasterCompetencyFormId(long blasterCompetencyFormId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_blasterCompetencyFormId = blasterCompetencyFormId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getSurName() {
		if (_surName == null) {
			return "";
		}
		else {
			return _surName;
		}
	}

	@Override
	public void setSurName(String surName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surName = surName;
	}

	@JSON
	@Override
	public String getMiddleName() {
		if (_middleName == null) {
			return "";
		}
		else {
			return _middleName;
		}
	}

	@Override
	public void setMiddleName(String middleName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_middleName = middleName;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getOfficeNumber() {
		if (_officeNumber == null) {
			return "";
		}
		else {
			return _officeNumber;
		}
	}

	@Override
	public void setOfficeNumber(String officeNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officeNumber = officeNumber;
	}

	@JSON
	@Override
	public String getCellNum() {
		if (_cellNum == null) {
			return "";
		}
		else {
			return _cellNum;
		}
	}

	@Override
	public void setCellNum(String cellNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cellNum = cellNum;
	}

	@JSON
	@Override
	public String getTrnNum() {
		if (_trnNum == null) {
			return "";
		}
		else {
			return _trnNum;
		}
	}

	@Override
	public void setTrnNum(String trnNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trnNum = trnNum;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getEducationalBack() {
		if (_educationalBack == null) {
			return "";
		}
		else {
			return _educationalBack;
		}
	}

	@Override
	public void setEducationalBack(String educationalBack) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_educationalBack = educationalBack;
	}

	@JSON
	@Override
	public String getBlastingCourse() {
		if (_blastingCourse == null) {
			return "";
		}
		else {
			return _blastingCourse;
		}
	}

	@Override
	public void setBlastingCourse(String blastingCourse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_blastingCourse = blastingCourse;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getNameOfCourse() {
		if (_nameOfCourse == null) {
			return "";
		}
		else {
			return _nameOfCourse;
		}
	}

	@Override
	public void setNameOfCourse(String nameOfCourse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfCourse = nameOfCourse;
	}

	@JSON
	@Override
	public String getCourseOrganiser() {
		if (_courseOrganiser == null) {
			return "";
		}
		else {
			return _courseOrganiser;
		}
	}

	@Override
	public void setCourseOrganiser(String courseOrganiser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_courseOrganiser = courseOrganiser;
	}

	@JSON
	@Override
	public Date getDateAppli() {
		return _dateAppli;
	}

	@Override
	public void setDateAppli(Date dateAppli) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateAppli = dateAppli;
	}

	@JSON
	@Override
	public long getExplosivesApplicationId() {
		return _explosivesApplicationId;
	}

	@Override
	public void setExplosivesApplicationId(long explosivesApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_explosivesApplicationId = explosivesApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalExplosivesApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("explosivesApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BlasterCompetencyForm.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BlasterCompetencyForm toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BlasterCompetencyForm>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BlasterCompetencyFormImpl blasterCompetencyFormImpl =
			new BlasterCompetencyFormImpl();

		blasterCompetencyFormImpl.setBlasterCompetencyFormId(
			getBlasterCompetencyFormId());
		blasterCompetencyFormImpl.setGroupId(getGroupId());
		blasterCompetencyFormImpl.setCompanyId(getCompanyId());
		blasterCompetencyFormImpl.setUserId(getUserId());
		blasterCompetencyFormImpl.setUserName(getUserName());
		blasterCompetencyFormImpl.setCreateDate(getCreateDate());
		blasterCompetencyFormImpl.setModifiedDate(getModifiedDate());
		blasterCompetencyFormImpl.setFirstName(getFirstName());
		blasterCompetencyFormImpl.setSurName(getSurName());
		blasterCompetencyFormImpl.setMiddleName(getMiddleName());
		blasterCompetencyFormImpl.setGender(getGender());
		blasterCompetencyFormImpl.setOfficeNumber(getOfficeNumber());
		blasterCompetencyFormImpl.setCellNum(getCellNum());
		blasterCompetencyFormImpl.setTrnNum(getTrnNum());
		blasterCompetencyFormImpl.setDateOfBirth(getDateOfBirth());
		blasterCompetencyFormImpl.setAddress(getAddress());
		blasterCompetencyFormImpl.setEducationalBack(getEducationalBack());
		blasterCompetencyFormImpl.setBlastingCourse(getBlastingCourse());
		blasterCompetencyFormImpl.setState(getState());
		blasterCompetencyFormImpl.setNameOfCourse(getNameOfCourse());
		blasterCompetencyFormImpl.setCourseOrganiser(getCourseOrganiser());
		blasterCompetencyFormImpl.setDateAppli(getDateAppli());
		blasterCompetencyFormImpl.setExplosivesApplicationId(
			getExplosivesApplicationId());

		blasterCompetencyFormImpl.resetOriginalValues();

		return blasterCompetencyFormImpl;
	}

	@Override
	public BlasterCompetencyForm cloneWithOriginalValues() {
		BlasterCompetencyFormImpl blasterCompetencyFormImpl =
			new BlasterCompetencyFormImpl();

		blasterCompetencyFormImpl.setBlasterCompetencyFormId(
			this.<Long>getColumnOriginalValue("blasterCompetencyFormId"));
		blasterCompetencyFormImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		blasterCompetencyFormImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		blasterCompetencyFormImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		blasterCompetencyFormImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		blasterCompetencyFormImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		blasterCompetencyFormImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		blasterCompetencyFormImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		blasterCompetencyFormImpl.setSurName(
			this.<String>getColumnOriginalValue("surName"));
		blasterCompetencyFormImpl.setMiddleName(
			this.<String>getColumnOriginalValue("middleName"));
		blasterCompetencyFormImpl.setGender(
			this.<String>getColumnOriginalValue("gender"));
		blasterCompetencyFormImpl.setOfficeNumber(
			this.<String>getColumnOriginalValue("officeNumber"));
		blasterCompetencyFormImpl.setCellNum(
			this.<String>getColumnOriginalValue("cellNum"));
		blasterCompetencyFormImpl.setTrnNum(
			this.<String>getColumnOriginalValue("trnNum"));
		blasterCompetencyFormImpl.setDateOfBirth(
			this.<Date>getColumnOriginalValue("dateOfBirth"));
		blasterCompetencyFormImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		blasterCompetencyFormImpl.setEducationalBack(
			this.<String>getColumnOriginalValue("educationalBack"));
		blasterCompetencyFormImpl.setBlastingCourse(
			this.<String>getColumnOriginalValue("blastingCourse"));
		blasterCompetencyFormImpl.setState(
			this.<String>getColumnOriginalValue("state_"));
		blasterCompetencyFormImpl.setNameOfCourse(
			this.<String>getColumnOriginalValue("nameOfCourse"));
		blasterCompetencyFormImpl.setCourseOrganiser(
			this.<String>getColumnOriginalValue("courseOrganiser"));
		blasterCompetencyFormImpl.setDateAppli(
			this.<Date>getColumnOriginalValue("dateAppli"));
		blasterCompetencyFormImpl.setExplosivesApplicationId(
			this.<Long>getColumnOriginalValue("explosivesApplicationId"));

		return blasterCompetencyFormImpl;
	}

	@Override
	public int compareTo(BlasterCompetencyForm blasterCompetencyForm) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), blasterCompetencyForm.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BlasterCompetencyForm)) {
			return false;
		}

		BlasterCompetencyForm blasterCompetencyForm =
			(BlasterCompetencyForm)object;

		long primaryKey = blasterCompetencyForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BlasterCompetencyForm> toCacheModel() {
		BlasterCompetencyFormCacheModel blasterCompetencyFormCacheModel =
			new BlasterCompetencyFormCacheModel();

		blasterCompetencyFormCacheModel.blasterCompetencyFormId =
			getBlasterCompetencyFormId();

		blasterCompetencyFormCacheModel.groupId = getGroupId();

		blasterCompetencyFormCacheModel.companyId = getCompanyId();

		blasterCompetencyFormCacheModel.userId = getUserId();

		blasterCompetencyFormCacheModel.userName = getUserName();

		String userName = blasterCompetencyFormCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			blasterCompetencyFormCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			blasterCompetencyFormCacheModel.createDate = createDate.getTime();
		}
		else {
			blasterCompetencyFormCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			blasterCompetencyFormCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			blasterCompetencyFormCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		blasterCompetencyFormCacheModel.firstName = getFirstName();

		String firstName = blasterCompetencyFormCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			blasterCompetencyFormCacheModel.firstName = null;
		}

		blasterCompetencyFormCacheModel.surName = getSurName();

		String surName = blasterCompetencyFormCacheModel.surName;

		if ((surName != null) && (surName.length() == 0)) {
			blasterCompetencyFormCacheModel.surName = null;
		}

		blasterCompetencyFormCacheModel.middleName = getMiddleName();

		String middleName = blasterCompetencyFormCacheModel.middleName;

		if ((middleName != null) && (middleName.length() == 0)) {
			blasterCompetencyFormCacheModel.middleName = null;
		}

		blasterCompetencyFormCacheModel.gender = getGender();

		String gender = blasterCompetencyFormCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			blasterCompetencyFormCacheModel.gender = null;
		}

		blasterCompetencyFormCacheModel.officeNumber = getOfficeNumber();

		String officeNumber = blasterCompetencyFormCacheModel.officeNumber;

		if ((officeNumber != null) && (officeNumber.length() == 0)) {
			blasterCompetencyFormCacheModel.officeNumber = null;
		}

		blasterCompetencyFormCacheModel.cellNum = getCellNum();

		String cellNum = blasterCompetencyFormCacheModel.cellNum;

		if ((cellNum != null) && (cellNum.length() == 0)) {
			blasterCompetencyFormCacheModel.cellNum = null;
		}

		blasterCompetencyFormCacheModel.trnNum = getTrnNum();

		String trnNum = blasterCompetencyFormCacheModel.trnNum;

		if ((trnNum != null) && (trnNum.length() == 0)) {
			blasterCompetencyFormCacheModel.trnNum = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			blasterCompetencyFormCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			blasterCompetencyFormCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		blasterCompetencyFormCacheModel.address = getAddress();

		String address = blasterCompetencyFormCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			blasterCompetencyFormCacheModel.address = null;
		}

		blasterCompetencyFormCacheModel.educationalBack = getEducationalBack();

		String educationalBack =
			blasterCompetencyFormCacheModel.educationalBack;

		if ((educationalBack != null) && (educationalBack.length() == 0)) {
			blasterCompetencyFormCacheModel.educationalBack = null;
		}

		blasterCompetencyFormCacheModel.blastingCourse = getBlastingCourse();

		String blastingCourse = blasterCompetencyFormCacheModel.blastingCourse;

		if ((blastingCourse != null) && (blastingCourse.length() == 0)) {
			blasterCompetencyFormCacheModel.blastingCourse = null;
		}

		blasterCompetencyFormCacheModel.state = getState();

		String state = blasterCompetencyFormCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			blasterCompetencyFormCacheModel.state = null;
		}

		blasterCompetencyFormCacheModel.nameOfCourse = getNameOfCourse();

		String nameOfCourse = blasterCompetencyFormCacheModel.nameOfCourse;

		if ((nameOfCourse != null) && (nameOfCourse.length() == 0)) {
			blasterCompetencyFormCacheModel.nameOfCourse = null;
		}

		blasterCompetencyFormCacheModel.courseOrganiser = getCourseOrganiser();

		String courseOrganiser =
			blasterCompetencyFormCacheModel.courseOrganiser;

		if ((courseOrganiser != null) && (courseOrganiser.length() == 0)) {
			blasterCompetencyFormCacheModel.courseOrganiser = null;
		}

		Date dateAppli = getDateAppli();

		if (dateAppli != null) {
			blasterCompetencyFormCacheModel.dateAppli = dateAppli.getTime();
		}
		else {
			blasterCompetencyFormCacheModel.dateAppli = Long.MIN_VALUE;
		}

		blasterCompetencyFormCacheModel.explosivesApplicationId =
			getExplosivesApplicationId();

		return blasterCompetencyFormCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BlasterCompetencyForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BlasterCompetencyForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BlasterCompetencyForm, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(BlasterCompetencyForm)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BlasterCompetencyForm>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BlasterCompetencyForm.class, ModelWrapper.class);

	}

	private long _blasterCompetencyFormId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _surName;
	private String _middleName;
	private String _gender;
	private String _officeNumber;
	private String _cellNum;
	private String _trnNum;
	private Date _dateOfBirth;
	private String _address;
	private String _educationalBack;
	private String _blastingCourse;
	private String _state;
	private String _nameOfCourse;
	private String _courseOrganiser;
	private Date _dateAppli;
	private long _explosivesApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<BlasterCompetencyForm, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BlasterCompetencyForm)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"blasterCompetencyFormId", _blasterCompetencyFormId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("surName", _surName);
		_columnOriginalValues.put("middleName", _middleName);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("officeNumber", _officeNumber);
		_columnOriginalValues.put("cellNum", _cellNum);
		_columnOriginalValues.put("trnNum", _trnNum);
		_columnOriginalValues.put("dateOfBirth", _dateOfBirth);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("educationalBack", _educationalBack);
		_columnOriginalValues.put("blastingCourse", _blastingCourse);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("nameOfCourse", _nameOfCourse);
		_columnOriginalValues.put("courseOrganiser", _courseOrganiser);
		_columnOriginalValues.put("dateAppli", _dateAppli);
		_columnOriginalValues.put(
			"explosivesApplicationId", _explosivesApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("blasterCompetencyFormId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("firstName", 128L);

		columnBitmasks.put("surName", 256L);

		columnBitmasks.put("middleName", 512L);

		columnBitmasks.put("gender", 1024L);

		columnBitmasks.put("officeNumber", 2048L);

		columnBitmasks.put("cellNum", 4096L);

		columnBitmasks.put("trnNum", 8192L);

		columnBitmasks.put("dateOfBirth", 16384L);

		columnBitmasks.put("address", 32768L);

		columnBitmasks.put("educationalBack", 65536L);

		columnBitmasks.put("blastingCourse", 131072L);

		columnBitmasks.put("state_", 262144L);

		columnBitmasks.put("nameOfCourse", 524288L);

		columnBitmasks.put("courseOrganiser", 1048576L);

		columnBitmasks.put("dateAppli", 2097152L);

		columnBitmasks.put("explosivesApplicationId", 4194304L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BlasterCompetencyForm _escapedModel;

}