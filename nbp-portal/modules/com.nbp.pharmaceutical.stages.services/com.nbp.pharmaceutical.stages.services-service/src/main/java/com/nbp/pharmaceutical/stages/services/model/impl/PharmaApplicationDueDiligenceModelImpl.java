/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.pharmaceutical.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.pharmaceutical.stages.services.model.PharmaApplicationDueDiligence;
import com.nbp.pharmaceutical.stages.services.model.PharmaApplicationDueDiligenceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PharmaApplicationDueDiligence service. Represents a row in the &quot;nbp_pharma_app_duediligence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PharmaApplicationDueDiligenceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PharmaApplicationDueDiligenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PharmaApplicationDueDiligenceImpl
 * @generated
 */
@JSON(strict = true)
public class PharmaApplicationDueDiligenceModelImpl
	extends BaseModelImpl<PharmaApplicationDueDiligence>
	implements PharmaApplicationDueDiligenceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pharma application due diligence model instance should use the <code>PharmaApplicationDueDiligence</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_pharma_app_duediligence";

	public static final Object[][] TABLE_COLUMNS = {
		{"pharmaAppDDId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"transactionNumber", Types.VARCHAR},
		{"entityName", Types.VARCHAR}, {"dateOfApplication", Types.TIMESTAMP},
		{"agencyContactName", Types.VARCHAR},
		{"agencyEmailAddress", Types.VARCHAR}, {"licenseNumber", Types.VARCHAR},
		{"agencyName", Types.VARCHAR},
		{"submittedToAgencyDate", Types.TIMESTAMP},
		{"feedbackReceivedDate", Types.TIMESTAMP},
		{"deadlineDate", Types.TIMESTAMP},
		{"pharmaApplicationId", Types.BIGINT},
		{"updatedBySource", Types.VARCHAR},
		{"durationOfTimeSpent", Types.VARCHAR},
		{"agencyDecision", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"caseId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pharmaAppDDId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("transactionNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfApplication", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("agencyContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agencyEmailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agencyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("submittedToAgencyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("feedbackReceivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("deadlineDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pharmaApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("updatedBySource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("durationOfTimeSpent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agencyDecision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_pharma_app_duediligence (pharmaAppDDId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,transactionNumber VARCHAR(75) null,entityName VARCHAR(75) null,dateOfApplication DATE null,agencyContactName VARCHAR(75) null,agencyEmailAddress VARCHAR(75) null,licenseNumber VARCHAR(75) null,agencyName VARCHAR(75) null,submittedToAgencyDate DATE null,feedbackReceivedDate DATE null,deadlineDate DATE null,pharmaApplicationId LONG,updatedBySource VARCHAR(75) null,durationOfTimeSpent VARCHAR(75) null,agencyDecision VARCHAR(75) null,status VARCHAR(75) null,caseId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_pharma_app_duediligence";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pharmaApplicationDueDiligence.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_pharma_app_duediligence.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AGENCYNAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHARMAAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PharmaApplicationDueDiligenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pharmaAppDDId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPharmaAppDDId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pharmaAppDDId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PharmaApplicationDueDiligence.class;
	}

	@Override
	public String getModelClassName() {
		return PharmaApplicationDueDiligence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PharmaApplicationDueDiligence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PharmaApplicationDueDiligence, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaApplicationDueDiligence, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(PharmaApplicationDueDiligence)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PharmaApplicationDueDiligence, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PharmaApplicationDueDiligence, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PharmaApplicationDueDiligence)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PharmaApplicationDueDiligence, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PharmaApplicationDueDiligence, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<PharmaApplicationDueDiligence, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<PharmaApplicationDueDiligence, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<PharmaApplicationDueDiligence, Object>>();

			attributeGetterFunctions.put(
				"pharmaAppDDId",
				PharmaApplicationDueDiligence::getPharmaAppDDId);
			attributeGetterFunctions.put(
				"groupId", PharmaApplicationDueDiligence::getGroupId);
			attributeGetterFunctions.put(
				"companyId", PharmaApplicationDueDiligence::getCompanyId);
			attributeGetterFunctions.put(
				"userId", PharmaApplicationDueDiligence::getUserId);
			attributeGetterFunctions.put(
				"userName", PharmaApplicationDueDiligence::getUserName);
			attributeGetterFunctions.put(
				"createDate", PharmaApplicationDueDiligence::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", PharmaApplicationDueDiligence::getModifiedDate);
			attributeGetterFunctions.put(
				"transactionNumber",
				PharmaApplicationDueDiligence::getTransactionNumber);
			attributeGetterFunctions.put(
				"entityName", PharmaApplicationDueDiligence::getEntityName);
			attributeGetterFunctions.put(
				"dateOfApplication",
				PharmaApplicationDueDiligence::getDateOfApplication);
			attributeGetterFunctions.put(
				"agencyContactName",
				PharmaApplicationDueDiligence::getAgencyContactName);
			attributeGetterFunctions.put(
				"agencyEmailAddress",
				PharmaApplicationDueDiligence::getAgencyEmailAddress);
			attributeGetterFunctions.put(
				"licenseNumber",
				PharmaApplicationDueDiligence::getLicenseNumber);
			attributeGetterFunctions.put(
				"agencyName", PharmaApplicationDueDiligence::getAgencyName);
			attributeGetterFunctions.put(
				"submittedToAgencyDate",
				PharmaApplicationDueDiligence::getSubmittedToAgencyDate);
			attributeGetterFunctions.put(
				"feedbackReceivedDate",
				PharmaApplicationDueDiligence::getFeedbackReceivedDate);
			attributeGetterFunctions.put(
				"deadlineDate", PharmaApplicationDueDiligence::getDeadlineDate);
			attributeGetterFunctions.put(
				"pharmaApplicationId",
				PharmaApplicationDueDiligence::getPharmaApplicationId);
			attributeGetterFunctions.put(
				"updatedBySource",
				PharmaApplicationDueDiligence::getUpdatedBySource);
			attributeGetterFunctions.put(
				"durationOfTimeSpent",
				PharmaApplicationDueDiligence::getDurationOfTimeSpent);
			attributeGetterFunctions.put(
				"agencyDecision",
				PharmaApplicationDueDiligence::getAgencyDecision);
			attributeGetterFunctions.put(
				"status", PharmaApplicationDueDiligence::getStatus);
			attributeGetterFunctions.put(
				"caseId", PharmaApplicationDueDiligence::getCaseId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<PharmaApplicationDueDiligence, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PharmaApplicationDueDiligence, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<PharmaApplicationDueDiligence, ?>>();

			attributeSetterBiConsumers.put(
				"pharmaAppDDId",
				(BiConsumer<PharmaApplicationDueDiligence, Long>)
					PharmaApplicationDueDiligence::setPharmaAppDDId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<PharmaApplicationDueDiligence, Long>)
					PharmaApplicationDueDiligence::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<PharmaApplicationDueDiligence, Long>)
					PharmaApplicationDueDiligence::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<PharmaApplicationDueDiligence, Long>)
					PharmaApplicationDueDiligence::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<PharmaApplicationDueDiligence, Date>)
					PharmaApplicationDueDiligence::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<PharmaApplicationDueDiligence, Date>)
					PharmaApplicationDueDiligence::setModifiedDate);
			attributeSetterBiConsumers.put(
				"transactionNumber",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setTransactionNumber);
			attributeSetterBiConsumers.put(
				"entityName",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setEntityName);
			attributeSetterBiConsumers.put(
				"dateOfApplication",
				(BiConsumer<PharmaApplicationDueDiligence, Date>)
					PharmaApplicationDueDiligence::setDateOfApplication);
			attributeSetterBiConsumers.put(
				"agencyContactName",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setAgencyContactName);
			attributeSetterBiConsumers.put(
				"agencyEmailAddress",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setAgencyEmailAddress);
			attributeSetterBiConsumers.put(
				"licenseNumber",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setLicenseNumber);
			attributeSetterBiConsumers.put(
				"agencyName",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setAgencyName);
			attributeSetterBiConsumers.put(
				"submittedToAgencyDate",
				(BiConsumer<PharmaApplicationDueDiligence, Date>)
					PharmaApplicationDueDiligence::setSubmittedToAgencyDate);
			attributeSetterBiConsumers.put(
				"feedbackReceivedDate",
				(BiConsumer<PharmaApplicationDueDiligence, Date>)
					PharmaApplicationDueDiligence::setFeedbackReceivedDate);
			attributeSetterBiConsumers.put(
				"deadlineDate",
				(BiConsumer<PharmaApplicationDueDiligence, Date>)
					PharmaApplicationDueDiligence::setDeadlineDate);
			attributeSetterBiConsumers.put(
				"pharmaApplicationId",
				(BiConsumer<PharmaApplicationDueDiligence, Long>)
					PharmaApplicationDueDiligence::setPharmaApplicationId);
			attributeSetterBiConsumers.put(
				"updatedBySource",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setUpdatedBySource);
			attributeSetterBiConsumers.put(
				"durationOfTimeSpent",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setDurationOfTimeSpent);
			attributeSetterBiConsumers.put(
				"agencyDecision",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setAgencyDecision);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setStatus);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<PharmaApplicationDueDiligence, String>)
					PharmaApplicationDueDiligence::setCaseId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getPharmaAppDDId() {
		return _pharmaAppDDId;
	}

	@Override
	public void setPharmaAppDDId(long pharmaAppDDId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaAppDDId = pharmaAppDDId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTransactionNumber() {
		if (_transactionNumber == null) {
			return "";
		}
		else {
			return _transactionNumber;
		}
	}

	@Override
	public void setTransactionNumber(String transactionNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transactionNumber = transactionNumber;
	}

	@JSON
	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return "";
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityName = entityName;
	}

	@JSON
	@Override
	public Date getDateOfApplication() {
		return _dateOfApplication;
	}

	@Override
	public void setDateOfApplication(Date dateOfApplication) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfApplication = dateOfApplication;
	}

	@JSON
	@Override
	public String getAgencyContactName() {
		if (_agencyContactName == null) {
			return "";
		}
		else {
			return _agencyContactName;
		}
	}

	@Override
	public void setAgencyContactName(String agencyContactName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyContactName = agencyContactName;
	}

	@JSON
	@Override
	public String getAgencyEmailAddress() {
		if (_agencyEmailAddress == null) {
			return "";
		}
		else {
			return _agencyEmailAddress;
		}
	}

	@Override
	public void setAgencyEmailAddress(String agencyEmailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyEmailAddress = agencyEmailAddress;
	}

	@JSON
	@Override
	public String getLicenseNumber() {
		if (_licenseNumber == null) {
			return "";
		}
		else {
			return _licenseNumber;
		}
	}

	@Override
	public void setLicenseNumber(String licenseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseNumber = licenseNumber;
	}

	@JSON
	@Override
	public String getAgencyName() {
		if (_agencyName == null) {
			return "";
		}
		else {
			return _agencyName;
		}
	}

	@Override
	public void setAgencyName(String agencyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyName = agencyName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAgencyName() {
		return getColumnOriginalValue("agencyName");
	}

	@JSON
	@Override
	public Date getSubmittedToAgencyDate() {
		return _submittedToAgencyDate;
	}

	@Override
	public void setSubmittedToAgencyDate(Date submittedToAgencyDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_submittedToAgencyDate = submittedToAgencyDate;
	}

	@JSON
	@Override
	public Date getFeedbackReceivedDate() {
		return _feedbackReceivedDate;
	}

	@Override
	public void setFeedbackReceivedDate(Date feedbackReceivedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feedbackReceivedDate = feedbackReceivedDate;
	}

	@JSON
	@Override
	public Date getDeadlineDate() {
		return _deadlineDate;
	}

	@Override
	public void setDeadlineDate(Date deadlineDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deadlineDate = deadlineDate;
	}

	@JSON
	@Override
	public long getPharmaApplicationId() {
		return _pharmaApplicationId;
	}

	@Override
	public void setPharmaApplicationId(long pharmaApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaApplicationId = pharmaApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPharmaApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("pharmaApplicationId"));
	}

	@JSON
	@Override
	public String getUpdatedBySource() {
		if (_updatedBySource == null) {
			return "";
		}
		else {
			return _updatedBySource;
		}
	}

	@Override
	public void setUpdatedBySource(String updatedBySource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedBySource = updatedBySource;
	}

	@JSON
	@Override
	public String getDurationOfTimeSpent() {
		if (_durationOfTimeSpent == null) {
			return "";
		}
		else {
			return _durationOfTimeSpent;
		}
	}

	@Override
	public void setDurationOfTimeSpent(String durationOfTimeSpent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_durationOfTimeSpent = durationOfTimeSpent;
	}

	@JSON
	@Override
	public String getAgencyDecision() {
		if (_agencyDecision == null) {
			return "";
		}
		else {
			return _agencyDecision;
		}
	}

	@Override
	public void setAgencyDecision(String agencyDecision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyDecision = agencyDecision;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PharmaApplicationDueDiligence.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PharmaApplicationDueDiligence toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PharmaApplicationDueDiligence>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PharmaApplicationDueDiligenceImpl pharmaApplicationDueDiligenceImpl =
			new PharmaApplicationDueDiligenceImpl();

		pharmaApplicationDueDiligenceImpl.setPharmaAppDDId(getPharmaAppDDId());
		pharmaApplicationDueDiligenceImpl.setGroupId(getGroupId());
		pharmaApplicationDueDiligenceImpl.setCompanyId(getCompanyId());
		pharmaApplicationDueDiligenceImpl.setUserId(getUserId());
		pharmaApplicationDueDiligenceImpl.setUserName(getUserName());
		pharmaApplicationDueDiligenceImpl.setCreateDate(getCreateDate());
		pharmaApplicationDueDiligenceImpl.setModifiedDate(getModifiedDate());
		pharmaApplicationDueDiligenceImpl.setTransactionNumber(
			getTransactionNumber());
		pharmaApplicationDueDiligenceImpl.setEntityName(getEntityName());
		pharmaApplicationDueDiligenceImpl.setDateOfApplication(
			getDateOfApplication());
		pharmaApplicationDueDiligenceImpl.setAgencyContactName(
			getAgencyContactName());
		pharmaApplicationDueDiligenceImpl.setAgencyEmailAddress(
			getAgencyEmailAddress());
		pharmaApplicationDueDiligenceImpl.setLicenseNumber(getLicenseNumber());
		pharmaApplicationDueDiligenceImpl.setAgencyName(getAgencyName());
		pharmaApplicationDueDiligenceImpl.setSubmittedToAgencyDate(
			getSubmittedToAgencyDate());
		pharmaApplicationDueDiligenceImpl.setFeedbackReceivedDate(
			getFeedbackReceivedDate());
		pharmaApplicationDueDiligenceImpl.setDeadlineDate(getDeadlineDate());
		pharmaApplicationDueDiligenceImpl.setPharmaApplicationId(
			getPharmaApplicationId());
		pharmaApplicationDueDiligenceImpl.setUpdatedBySource(
			getUpdatedBySource());
		pharmaApplicationDueDiligenceImpl.setDurationOfTimeSpent(
			getDurationOfTimeSpent());
		pharmaApplicationDueDiligenceImpl.setAgencyDecision(
			getAgencyDecision());
		pharmaApplicationDueDiligenceImpl.setStatus(getStatus());
		pharmaApplicationDueDiligenceImpl.setCaseId(getCaseId());

		pharmaApplicationDueDiligenceImpl.resetOriginalValues();

		return pharmaApplicationDueDiligenceImpl;
	}

	@Override
	public PharmaApplicationDueDiligence cloneWithOriginalValues() {
		PharmaApplicationDueDiligenceImpl pharmaApplicationDueDiligenceImpl =
			new PharmaApplicationDueDiligenceImpl();

		pharmaApplicationDueDiligenceImpl.setPharmaAppDDId(
			this.<Long>getColumnOriginalValue("pharmaAppDDId"));
		pharmaApplicationDueDiligenceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		pharmaApplicationDueDiligenceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		pharmaApplicationDueDiligenceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		pharmaApplicationDueDiligenceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		pharmaApplicationDueDiligenceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		pharmaApplicationDueDiligenceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		pharmaApplicationDueDiligenceImpl.setTransactionNumber(
			this.<String>getColumnOriginalValue("transactionNumber"));
		pharmaApplicationDueDiligenceImpl.setEntityName(
			this.<String>getColumnOriginalValue("entityName"));
		pharmaApplicationDueDiligenceImpl.setDateOfApplication(
			this.<Date>getColumnOriginalValue("dateOfApplication"));
		pharmaApplicationDueDiligenceImpl.setAgencyContactName(
			this.<String>getColumnOriginalValue("agencyContactName"));
		pharmaApplicationDueDiligenceImpl.setAgencyEmailAddress(
			this.<String>getColumnOriginalValue("agencyEmailAddress"));
		pharmaApplicationDueDiligenceImpl.setLicenseNumber(
			this.<String>getColumnOriginalValue("licenseNumber"));
		pharmaApplicationDueDiligenceImpl.setAgencyName(
			this.<String>getColumnOriginalValue("agencyName"));
		pharmaApplicationDueDiligenceImpl.setSubmittedToAgencyDate(
			this.<Date>getColumnOriginalValue("submittedToAgencyDate"));
		pharmaApplicationDueDiligenceImpl.setFeedbackReceivedDate(
			this.<Date>getColumnOriginalValue("feedbackReceivedDate"));
		pharmaApplicationDueDiligenceImpl.setDeadlineDate(
			this.<Date>getColumnOriginalValue("deadlineDate"));
		pharmaApplicationDueDiligenceImpl.setPharmaApplicationId(
			this.<Long>getColumnOriginalValue("pharmaApplicationId"));
		pharmaApplicationDueDiligenceImpl.setUpdatedBySource(
			this.<String>getColumnOriginalValue("updatedBySource"));
		pharmaApplicationDueDiligenceImpl.setDurationOfTimeSpent(
			this.<String>getColumnOriginalValue("durationOfTimeSpent"));
		pharmaApplicationDueDiligenceImpl.setAgencyDecision(
			this.<String>getColumnOriginalValue("agencyDecision"));
		pharmaApplicationDueDiligenceImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		pharmaApplicationDueDiligenceImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));

		return pharmaApplicationDueDiligenceImpl;
	}

	@Override
	public int compareTo(
		PharmaApplicationDueDiligence pharmaApplicationDueDiligence) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), pharmaApplicationDueDiligence.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PharmaApplicationDueDiligence)) {
			return false;
		}

		PharmaApplicationDueDiligence pharmaApplicationDueDiligence =
			(PharmaApplicationDueDiligence)object;

		long primaryKey = pharmaApplicationDueDiligence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PharmaApplicationDueDiligence> toCacheModel() {
		PharmaApplicationDueDiligenceCacheModel
			pharmaApplicationDueDiligenceCacheModel =
				new PharmaApplicationDueDiligenceCacheModel();

		pharmaApplicationDueDiligenceCacheModel.pharmaAppDDId =
			getPharmaAppDDId();

		pharmaApplicationDueDiligenceCacheModel.groupId = getGroupId();

		pharmaApplicationDueDiligenceCacheModel.companyId = getCompanyId();

		pharmaApplicationDueDiligenceCacheModel.userId = getUserId();

		pharmaApplicationDueDiligenceCacheModel.userName = getUserName();

		String userName = pharmaApplicationDueDiligenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pharmaApplicationDueDiligenceCacheModel.createDate =
				createDate.getTime();
		}
		else {
			pharmaApplicationDueDiligenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pharmaApplicationDueDiligenceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			pharmaApplicationDueDiligenceCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		pharmaApplicationDueDiligenceCacheModel.transactionNumber =
			getTransactionNumber();

		String transactionNumber =
			pharmaApplicationDueDiligenceCacheModel.transactionNumber;

		if ((transactionNumber != null) && (transactionNumber.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.transactionNumber = null;
		}

		pharmaApplicationDueDiligenceCacheModel.entityName = getEntityName();

		String entityName = pharmaApplicationDueDiligenceCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.entityName = null;
		}

		Date dateOfApplication = getDateOfApplication();

		if (dateOfApplication != null) {
			pharmaApplicationDueDiligenceCacheModel.dateOfApplication =
				dateOfApplication.getTime();
		}
		else {
			pharmaApplicationDueDiligenceCacheModel.dateOfApplication =
				Long.MIN_VALUE;
		}

		pharmaApplicationDueDiligenceCacheModel.agencyContactName =
			getAgencyContactName();

		String agencyContactName =
			pharmaApplicationDueDiligenceCacheModel.agencyContactName;

		if ((agencyContactName != null) && (agencyContactName.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.agencyContactName = null;
		}

		pharmaApplicationDueDiligenceCacheModel.agencyEmailAddress =
			getAgencyEmailAddress();

		String agencyEmailAddress =
			pharmaApplicationDueDiligenceCacheModel.agencyEmailAddress;

		if ((agencyEmailAddress != null) &&
			(agencyEmailAddress.length() == 0)) {

			pharmaApplicationDueDiligenceCacheModel.agencyEmailAddress = null;
		}

		pharmaApplicationDueDiligenceCacheModel.licenseNumber =
			getLicenseNumber();

		String licenseNumber =
			pharmaApplicationDueDiligenceCacheModel.licenseNumber;

		if ((licenseNumber != null) && (licenseNumber.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.licenseNumber = null;
		}

		pharmaApplicationDueDiligenceCacheModel.agencyName = getAgencyName();

		String agencyName = pharmaApplicationDueDiligenceCacheModel.agencyName;

		if ((agencyName != null) && (agencyName.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.agencyName = null;
		}

		Date submittedToAgencyDate = getSubmittedToAgencyDate();

		if (submittedToAgencyDate != null) {
			pharmaApplicationDueDiligenceCacheModel.submittedToAgencyDate =
				submittedToAgencyDate.getTime();
		}
		else {
			pharmaApplicationDueDiligenceCacheModel.submittedToAgencyDate =
				Long.MIN_VALUE;
		}

		Date feedbackReceivedDate = getFeedbackReceivedDate();

		if (feedbackReceivedDate != null) {
			pharmaApplicationDueDiligenceCacheModel.feedbackReceivedDate =
				feedbackReceivedDate.getTime();
		}
		else {
			pharmaApplicationDueDiligenceCacheModel.feedbackReceivedDate =
				Long.MIN_VALUE;
		}

		Date deadlineDate = getDeadlineDate();

		if (deadlineDate != null) {
			pharmaApplicationDueDiligenceCacheModel.deadlineDate =
				deadlineDate.getTime();
		}
		else {
			pharmaApplicationDueDiligenceCacheModel.deadlineDate =
				Long.MIN_VALUE;
		}

		pharmaApplicationDueDiligenceCacheModel.pharmaApplicationId =
			getPharmaApplicationId();

		pharmaApplicationDueDiligenceCacheModel.updatedBySource =
			getUpdatedBySource();

		String updatedBySource =
			pharmaApplicationDueDiligenceCacheModel.updatedBySource;

		if ((updatedBySource != null) && (updatedBySource.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.updatedBySource = null;
		}

		pharmaApplicationDueDiligenceCacheModel.durationOfTimeSpent =
			getDurationOfTimeSpent();

		String durationOfTimeSpent =
			pharmaApplicationDueDiligenceCacheModel.durationOfTimeSpent;

		if ((durationOfTimeSpent != null) &&
			(durationOfTimeSpent.length() == 0)) {

			pharmaApplicationDueDiligenceCacheModel.durationOfTimeSpent = null;
		}

		pharmaApplicationDueDiligenceCacheModel.agencyDecision =
			getAgencyDecision();

		String agencyDecision =
			pharmaApplicationDueDiligenceCacheModel.agencyDecision;

		if ((agencyDecision != null) && (agencyDecision.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.agencyDecision = null;
		}

		pharmaApplicationDueDiligenceCacheModel.status = getStatus();

		String status = pharmaApplicationDueDiligenceCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.status = null;
		}

		pharmaApplicationDueDiligenceCacheModel.caseId = getCaseId();

		String caseId = pharmaApplicationDueDiligenceCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			pharmaApplicationDueDiligenceCacheModel.caseId = null;
		}

		return pharmaApplicationDueDiligenceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PharmaApplicationDueDiligence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PharmaApplicationDueDiligence, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaApplicationDueDiligence, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PharmaApplicationDueDiligence)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, PharmaApplicationDueDiligence>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						PharmaApplicationDueDiligence.class,
						ModelWrapper.class);

	}

	private long _pharmaAppDDId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _transactionNumber;
	private String _entityName;
	private Date _dateOfApplication;
	private String _agencyContactName;
	private String _agencyEmailAddress;
	private String _licenseNumber;
	private String _agencyName;
	private Date _submittedToAgencyDate;
	private Date _feedbackReceivedDate;
	private Date _deadlineDate;
	private long _pharmaApplicationId;
	private String _updatedBySource;
	private String _durationOfTimeSpent;
	private String _agencyDecision;
	private String _status;
	private String _caseId;

	public <T> T getColumnValue(String columnName) {
		Function<PharmaApplicationDueDiligence, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PharmaApplicationDueDiligence)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("pharmaAppDDId", _pharmaAppDDId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("transactionNumber", _transactionNumber);
		_columnOriginalValues.put("entityName", _entityName);
		_columnOriginalValues.put("dateOfApplication", _dateOfApplication);
		_columnOriginalValues.put("agencyContactName", _agencyContactName);
		_columnOriginalValues.put("agencyEmailAddress", _agencyEmailAddress);
		_columnOriginalValues.put("licenseNumber", _licenseNumber);
		_columnOriginalValues.put("agencyName", _agencyName);
		_columnOriginalValues.put(
			"submittedToAgencyDate", _submittedToAgencyDate);
		_columnOriginalValues.put(
			"feedbackReceivedDate", _feedbackReceivedDate);
		_columnOriginalValues.put("deadlineDate", _deadlineDate);
		_columnOriginalValues.put("pharmaApplicationId", _pharmaApplicationId);
		_columnOriginalValues.put("updatedBySource", _updatedBySource);
		_columnOriginalValues.put("durationOfTimeSpent", _durationOfTimeSpent);
		_columnOriginalValues.put("agencyDecision", _agencyDecision);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("caseId", _caseId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("pharmaAppDDId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("transactionNumber", 128L);

		columnBitmasks.put("entityName", 256L);

		columnBitmasks.put("dateOfApplication", 512L);

		columnBitmasks.put("agencyContactName", 1024L);

		columnBitmasks.put("agencyEmailAddress", 2048L);

		columnBitmasks.put("licenseNumber", 4096L);

		columnBitmasks.put("agencyName", 8192L);

		columnBitmasks.put("submittedToAgencyDate", 16384L);

		columnBitmasks.put("feedbackReceivedDate", 32768L);

		columnBitmasks.put("deadlineDate", 65536L);

		columnBitmasks.put("pharmaApplicationId", 131072L);

		columnBitmasks.put("updatedBySource", 262144L);

		columnBitmasks.put("durationOfTimeSpent", 524288L);

		columnBitmasks.put("agencyDecision", 1048576L);

		columnBitmasks.put("status", 2097152L);

		columnBitmasks.put("caseId", 4194304L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PharmaApplicationDueDiligence _escapedModel;

}