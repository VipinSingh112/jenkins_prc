/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.pharmaceutical.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.pharmaceutical.stages.services.model.PharmaApplicationFullLicense;
import com.nbp.pharmaceutical.stages.services.model.PharmaApplicationFullLicenseModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PharmaApplicationFullLicense service. Represents a row in the &quot;nbp_pharma_full_license&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PharmaApplicationFullLicenseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PharmaApplicationFullLicenseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PharmaApplicationFullLicenseImpl
 * @generated
 */
@JSON(strict = true)
public class PharmaApplicationFullLicenseModelImpl
	extends BaseModelImpl<PharmaApplicationFullLicense>
	implements PharmaApplicationFullLicenseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pharma application full license model instance should use the <code>PharmaApplicationFullLicense</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_pharma_full_license";

	public static final Object[][] TABLE_COLUMNS = {
		{"pharmaFullLicenseId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"licenseNumber", Types.VARCHAR},
		{"dateOfIssue", Types.TIMESTAMP}, {"feePaidAmount", Types.VARCHAR},
		{"receiptNumber", Types.VARCHAR}, {"dueDate", Types.TIMESTAMP},
		{"leadTime", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"licenseDocId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pharmaFullLicenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("licenseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfIssue", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("feePaidAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receiptNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("leadTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseDocId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_pharma_full_license (pharmaFullLicenseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,licenseNumber VARCHAR(75) null,dateOfIssue DATE null,feePaidAmount VARCHAR(75) null,receiptNumber VARCHAR(75) null,dueDate DATE null,leadTime VARCHAR(75) null,caseId VARCHAR(75) null,licenseDocId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_pharma_full_license";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pharmaApplicationFullLicense.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_pharma_full_license.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LICENSENUMBER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PharmaApplicationFullLicenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pharmaFullLicenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPharmaFullLicenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pharmaFullLicenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PharmaApplicationFullLicense.class;
	}

	@Override
	public String getModelClassName() {
		return PharmaApplicationFullLicense.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PharmaApplicationFullLicense, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PharmaApplicationFullLicense, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaApplicationFullLicense, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(PharmaApplicationFullLicense)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PharmaApplicationFullLicense, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PharmaApplicationFullLicense, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PharmaApplicationFullLicense)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PharmaApplicationFullLicense, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PharmaApplicationFullLicense, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<PharmaApplicationFullLicense, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<PharmaApplicationFullLicense, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<PharmaApplicationFullLicense, Object>>();

			attributeGetterFunctions.put(
				"pharmaFullLicenseId",
				PharmaApplicationFullLicense::getPharmaFullLicenseId);
			attributeGetterFunctions.put(
				"groupId", PharmaApplicationFullLicense::getGroupId);
			attributeGetterFunctions.put(
				"companyId", PharmaApplicationFullLicense::getCompanyId);
			attributeGetterFunctions.put(
				"userId", PharmaApplicationFullLicense::getUserId);
			attributeGetterFunctions.put(
				"userName", PharmaApplicationFullLicense::getUserName);
			attributeGetterFunctions.put(
				"createDate", PharmaApplicationFullLicense::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", PharmaApplicationFullLicense::getModifiedDate);
			attributeGetterFunctions.put(
				"licenseNumber",
				PharmaApplicationFullLicense::getLicenseNumber);
			attributeGetterFunctions.put(
				"dateOfIssue", PharmaApplicationFullLicense::getDateOfIssue);
			attributeGetterFunctions.put(
				"feePaidAmount",
				PharmaApplicationFullLicense::getFeePaidAmount);
			attributeGetterFunctions.put(
				"receiptNumber",
				PharmaApplicationFullLicense::getReceiptNumber);
			attributeGetterFunctions.put(
				"dueDate", PharmaApplicationFullLicense::getDueDate);
			attributeGetterFunctions.put(
				"leadTime", PharmaApplicationFullLicense::getLeadTime);
			attributeGetterFunctions.put(
				"caseId", PharmaApplicationFullLicense::getCaseId);
			attributeGetterFunctions.put(
				"licenseDocId", PharmaApplicationFullLicense::getLicenseDocId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<PharmaApplicationFullLicense, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PharmaApplicationFullLicense, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<PharmaApplicationFullLicense, ?>>();

			attributeSetterBiConsumers.put(
				"pharmaFullLicenseId",
				(BiConsumer<PharmaApplicationFullLicense, Long>)
					PharmaApplicationFullLicense::setPharmaFullLicenseId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<PharmaApplicationFullLicense, Long>)
					PharmaApplicationFullLicense::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<PharmaApplicationFullLicense, Long>)
					PharmaApplicationFullLicense::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<PharmaApplicationFullLicense, Long>)
					PharmaApplicationFullLicense::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<PharmaApplicationFullLicense, String>)
					PharmaApplicationFullLicense::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<PharmaApplicationFullLicense, Date>)
					PharmaApplicationFullLicense::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<PharmaApplicationFullLicense, Date>)
					PharmaApplicationFullLicense::setModifiedDate);
			attributeSetterBiConsumers.put(
				"licenseNumber",
				(BiConsumer<PharmaApplicationFullLicense, String>)
					PharmaApplicationFullLicense::setLicenseNumber);
			attributeSetterBiConsumers.put(
				"dateOfIssue",
				(BiConsumer<PharmaApplicationFullLicense, Date>)
					PharmaApplicationFullLicense::setDateOfIssue);
			attributeSetterBiConsumers.put(
				"feePaidAmount",
				(BiConsumer<PharmaApplicationFullLicense, String>)
					PharmaApplicationFullLicense::setFeePaidAmount);
			attributeSetterBiConsumers.put(
				"receiptNumber",
				(BiConsumer<PharmaApplicationFullLicense, String>)
					PharmaApplicationFullLicense::setReceiptNumber);
			attributeSetterBiConsumers.put(
				"dueDate",
				(BiConsumer<PharmaApplicationFullLicense, Date>)
					PharmaApplicationFullLicense::setDueDate);
			attributeSetterBiConsumers.put(
				"leadTime",
				(BiConsumer<PharmaApplicationFullLicense, String>)
					PharmaApplicationFullLicense::setLeadTime);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<PharmaApplicationFullLicense, String>)
					PharmaApplicationFullLicense::setCaseId);
			attributeSetterBiConsumers.put(
				"licenseDocId",
				(BiConsumer<PharmaApplicationFullLicense, String>)
					PharmaApplicationFullLicense::setLicenseDocId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getPharmaFullLicenseId() {
		return _pharmaFullLicenseId;
	}

	@Override
	public void setPharmaFullLicenseId(long pharmaFullLicenseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaFullLicenseId = pharmaFullLicenseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLicenseNumber() {
		if (_licenseNumber == null) {
			return "";
		}
		else {
			return _licenseNumber;
		}
	}

	@Override
	public void setLicenseNumber(String licenseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseNumber = licenseNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLicenseNumber() {
		return getColumnOriginalValue("licenseNumber");
	}

	@JSON
	@Override
	public Date getDateOfIssue() {
		return _dateOfIssue;
	}

	@Override
	public void setDateOfIssue(Date dateOfIssue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfIssue = dateOfIssue;
	}

	@JSON
	@Override
	public String getFeePaidAmount() {
		if (_feePaidAmount == null) {
			return "";
		}
		else {
			return _feePaidAmount;
		}
	}

	@Override
	public void setFeePaidAmount(String feePaidAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feePaidAmount = feePaidAmount;
	}

	@JSON
	@Override
	public String getReceiptNumber() {
		if (_receiptNumber == null) {
			return "";
		}
		else {
			return _receiptNumber;
		}
	}

	@Override
	public void setReceiptNumber(String receiptNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receiptNumber = receiptNumber;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dueDate = dueDate;
	}

	@JSON
	@Override
	public String getLeadTime() {
		if (_leadTime == null) {
			return "";
		}
		else {
			return _leadTime;
		}
	}

	@Override
	public void setLeadTime(String leadTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leadTime = leadTime;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getLicenseDocId() {
		if (_licenseDocId == null) {
			return "";
		}
		else {
			return _licenseDocId;
		}
	}

	@Override
	public void setLicenseDocId(String licenseDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseDocId = licenseDocId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PharmaApplicationFullLicense.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PharmaApplicationFullLicense toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PharmaApplicationFullLicense>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PharmaApplicationFullLicenseImpl pharmaApplicationFullLicenseImpl =
			new PharmaApplicationFullLicenseImpl();

		pharmaApplicationFullLicenseImpl.setPharmaFullLicenseId(
			getPharmaFullLicenseId());
		pharmaApplicationFullLicenseImpl.setGroupId(getGroupId());
		pharmaApplicationFullLicenseImpl.setCompanyId(getCompanyId());
		pharmaApplicationFullLicenseImpl.setUserId(getUserId());
		pharmaApplicationFullLicenseImpl.setUserName(getUserName());
		pharmaApplicationFullLicenseImpl.setCreateDate(getCreateDate());
		pharmaApplicationFullLicenseImpl.setModifiedDate(getModifiedDate());
		pharmaApplicationFullLicenseImpl.setLicenseNumber(getLicenseNumber());
		pharmaApplicationFullLicenseImpl.setDateOfIssue(getDateOfIssue());
		pharmaApplicationFullLicenseImpl.setFeePaidAmount(getFeePaidAmount());
		pharmaApplicationFullLicenseImpl.setReceiptNumber(getReceiptNumber());
		pharmaApplicationFullLicenseImpl.setDueDate(getDueDate());
		pharmaApplicationFullLicenseImpl.setLeadTime(getLeadTime());
		pharmaApplicationFullLicenseImpl.setCaseId(getCaseId());
		pharmaApplicationFullLicenseImpl.setLicenseDocId(getLicenseDocId());

		pharmaApplicationFullLicenseImpl.resetOriginalValues();

		return pharmaApplicationFullLicenseImpl;
	}

	@Override
	public PharmaApplicationFullLicense cloneWithOriginalValues() {
		PharmaApplicationFullLicenseImpl pharmaApplicationFullLicenseImpl =
			new PharmaApplicationFullLicenseImpl();

		pharmaApplicationFullLicenseImpl.setPharmaFullLicenseId(
			this.<Long>getColumnOriginalValue("pharmaFullLicenseId"));
		pharmaApplicationFullLicenseImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		pharmaApplicationFullLicenseImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		pharmaApplicationFullLicenseImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		pharmaApplicationFullLicenseImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		pharmaApplicationFullLicenseImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		pharmaApplicationFullLicenseImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		pharmaApplicationFullLicenseImpl.setLicenseNumber(
			this.<String>getColumnOriginalValue("licenseNumber"));
		pharmaApplicationFullLicenseImpl.setDateOfIssue(
			this.<Date>getColumnOriginalValue("dateOfIssue"));
		pharmaApplicationFullLicenseImpl.setFeePaidAmount(
			this.<String>getColumnOriginalValue("feePaidAmount"));
		pharmaApplicationFullLicenseImpl.setReceiptNumber(
			this.<String>getColumnOriginalValue("receiptNumber"));
		pharmaApplicationFullLicenseImpl.setDueDate(
			this.<Date>getColumnOriginalValue("dueDate"));
		pharmaApplicationFullLicenseImpl.setLeadTime(
			this.<String>getColumnOriginalValue("leadTime"));
		pharmaApplicationFullLicenseImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		pharmaApplicationFullLicenseImpl.setLicenseDocId(
			this.<String>getColumnOriginalValue("licenseDocId"));

		return pharmaApplicationFullLicenseImpl;
	}

	@Override
	public int compareTo(
		PharmaApplicationFullLicense pharmaApplicationFullLicense) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), pharmaApplicationFullLicense.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PharmaApplicationFullLicense)) {
			return false;
		}

		PharmaApplicationFullLicense pharmaApplicationFullLicense =
			(PharmaApplicationFullLicense)object;

		long primaryKey = pharmaApplicationFullLicense.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PharmaApplicationFullLicense> toCacheModel() {
		PharmaApplicationFullLicenseCacheModel
			pharmaApplicationFullLicenseCacheModel =
				new PharmaApplicationFullLicenseCacheModel();

		pharmaApplicationFullLicenseCacheModel.pharmaFullLicenseId =
			getPharmaFullLicenseId();

		pharmaApplicationFullLicenseCacheModel.groupId = getGroupId();

		pharmaApplicationFullLicenseCacheModel.companyId = getCompanyId();

		pharmaApplicationFullLicenseCacheModel.userId = getUserId();

		pharmaApplicationFullLicenseCacheModel.userName = getUserName();

		String userName = pharmaApplicationFullLicenseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			pharmaApplicationFullLicenseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pharmaApplicationFullLicenseCacheModel.createDate =
				createDate.getTime();
		}
		else {
			pharmaApplicationFullLicenseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pharmaApplicationFullLicenseCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			pharmaApplicationFullLicenseCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		pharmaApplicationFullLicenseCacheModel.licenseNumber =
			getLicenseNumber();

		String licenseNumber =
			pharmaApplicationFullLicenseCacheModel.licenseNumber;

		if ((licenseNumber != null) && (licenseNumber.length() == 0)) {
			pharmaApplicationFullLicenseCacheModel.licenseNumber = null;
		}

		Date dateOfIssue = getDateOfIssue();

		if (dateOfIssue != null) {
			pharmaApplicationFullLicenseCacheModel.dateOfIssue =
				dateOfIssue.getTime();
		}
		else {
			pharmaApplicationFullLicenseCacheModel.dateOfIssue = Long.MIN_VALUE;
		}

		pharmaApplicationFullLicenseCacheModel.feePaidAmount =
			getFeePaidAmount();

		String feePaidAmount =
			pharmaApplicationFullLicenseCacheModel.feePaidAmount;

		if ((feePaidAmount != null) && (feePaidAmount.length() == 0)) {
			pharmaApplicationFullLicenseCacheModel.feePaidAmount = null;
		}

		pharmaApplicationFullLicenseCacheModel.receiptNumber =
			getReceiptNumber();

		String receiptNumber =
			pharmaApplicationFullLicenseCacheModel.receiptNumber;

		if ((receiptNumber != null) && (receiptNumber.length() == 0)) {
			pharmaApplicationFullLicenseCacheModel.receiptNumber = null;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			pharmaApplicationFullLicenseCacheModel.dueDate = dueDate.getTime();
		}
		else {
			pharmaApplicationFullLicenseCacheModel.dueDate = Long.MIN_VALUE;
		}

		pharmaApplicationFullLicenseCacheModel.leadTime = getLeadTime();

		String leadTime = pharmaApplicationFullLicenseCacheModel.leadTime;

		if ((leadTime != null) && (leadTime.length() == 0)) {
			pharmaApplicationFullLicenseCacheModel.leadTime = null;
		}

		pharmaApplicationFullLicenseCacheModel.caseId = getCaseId();

		String caseId = pharmaApplicationFullLicenseCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			pharmaApplicationFullLicenseCacheModel.caseId = null;
		}

		pharmaApplicationFullLicenseCacheModel.licenseDocId = getLicenseDocId();

		String licenseDocId =
			pharmaApplicationFullLicenseCacheModel.licenseDocId;

		if ((licenseDocId != null) && (licenseDocId.length() == 0)) {
			pharmaApplicationFullLicenseCacheModel.licenseDocId = null;
		}

		return pharmaApplicationFullLicenseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PharmaApplicationFullLicense, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PharmaApplicationFullLicense, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaApplicationFullLicense, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PharmaApplicationFullLicense)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, PharmaApplicationFullLicense>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						PharmaApplicationFullLicense.class, ModelWrapper.class);

	}

	private long _pharmaFullLicenseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _licenseNumber;
	private Date _dateOfIssue;
	private String _feePaidAmount;
	private String _receiptNumber;
	private Date _dueDate;
	private String _leadTime;
	private String _caseId;
	private String _licenseDocId;

	public <T> T getColumnValue(String columnName) {
		Function<PharmaApplicationFullLicense, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PharmaApplicationFullLicense)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("pharmaFullLicenseId", _pharmaFullLicenseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("licenseNumber", _licenseNumber);
		_columnOriginalValues.put("dateOfIssue", _dateOfIssue);
		_columnOriginalValues.put("feePaidAmount", _feePaidAmount);
		_columnOriginalValues.put("receiptNumber", _receiptNumber);
		_columnOriginalValues.put("dueDate", _dueDate);
		_columnOriginalValues.put("leadTime", _leadTime);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("licenseDocId", _licenseDocId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("pharmaFullLicenseId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("licenseNumber", 128L);

		columnBitmasks.put("dateOfIssue", 256L);

		columnBitmasks.put("feePaidAmount", 512L);

		columnBitmasks.put("receiptNumber", 1024L);

		columnBitmasks.put("dueDate", 2048L);

		columnBitmasks.put("leadTime", 4096L);

		columnBitmasks.put("caseId", 8192L);

		columnBitmasks.put("licenseDocId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PharmaApplicationFullLicense _escapedModel;

}