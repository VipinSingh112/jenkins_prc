/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.healthcare.stage.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.healthcare.stage.service.model.HealthCarePermit;
import com.nbp.healthcare.stage.service.model.HealthCarePermitModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HealthCarePermit service. Represents a row in the &quot;nbp_healthcare_permit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HealthCarePermitModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HealthCarePermitImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HealthCarePermitImpl
 * @generated
 */
@JSON(strict = true)
public class HealthCarePermitModelImpl
	extends BaseModelImpl<HealthCarePermit> implements HealthCarePermitModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a health care permit model instance should use the <code>HealthCarePermit</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_healthcare_permit";

	public static final Object[][] TABLE_COLUMNS = {
		{"healthPermitId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"permitTransaction", Types.VARCHAR},
		{"nameofApplicant", Types.VARCHAR}, {"category", Types.VARCHAR},
		{"pirPermt", Types.VARCHAR}, {"bonafideHC", Types.VARCHAR},
		{"tariffCode", Types.VARCHAR}, {"dateofIssue", Types.TIMESTAMP},
		{"pirPermitFileEntryId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("healthPermitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitTransaction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameofApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pirPermt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonafideHC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tariffCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateofIssue", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pirPermitFileEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_healthcare_permit (healthPermitId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,permitTransaction VARCHAR(75) null,nameofApplicant VARCHAR(75) null,category VARCHAR(75) null,pirPermt VARCHAR(75) null,bonafideHC VARCHAR(75) null,tariffCode VARCHAR(75) null,dateofIssue DATE null,pirPermitFileEntryId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_healthcare_permit";

	public static final String ORDER_BY_JPQL =
		" ORDER BY healthCarePermit.healthPermitId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_healthcare_permit.healthPermitId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HEALTHPERMITID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HealthCarePermitModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _healthPermitId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHealthPermitId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _healthPermitId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HealthCarePermit.class;
	}

	@Override
	public String getModelClassName() {
		return HealthCarePermit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HealthCarePermit, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HealthCarePermit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HealthCarePermit, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((HealthCarePermit)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HealthCarePermit, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HealthCarePermit, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HealthCarePermit)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HealthCarePermit, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HealthCarePermit, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<HealthCarePermit, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<HealthCarePermit, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<HealthCarePermit, Object>>();

			attributeGetterFunctions.put(
				"healthPermitId", HealthCarePermit::getHealthPermitId);
			attributeGetterFunctions.put(
				"groupId", HealthCarePermit::getGroupId);
			attributeGetterFunctions.put(
				"companyId", HealthCarePermit::getCompanyId);
			attributeGetterFunctions.put("userId", HealthCarePermit::getUserId);
			attributeGetterFunctions.put(
				"userName", HealthCarePermit::getUserName);
			attributeGetterFunctions.put(
				"createDate", HealthCarePermit::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", HealthCarePermit::getModifiedDate);
			attributeGetterFunctions.put("caseId", HealthCarePermit::getCaseId);
			attributeGetterFunctions.put(
				"permitTransaction", HealthCarePermit::getPermitTransaction);
			attributeGetterFunctions.put(
				"nameofApplicant", HealthCarePermit::getNameofApplicant);
			attributeGetterFunctions.put(
				"category", HealthCarePermit::getCategory);
			attributeGetterFunctions.put(
				"pirPermt", HealthCarePermit::getPirPermt);
			attributeGetterFunctions.put(
				"bonafideHC", HealthCarePermit::getBonafideHC);
			attributeGetterFunctions.put(
				"tariffCode", HealthCarePermit::getTariffCode);
			attributeGetterFunctions.put(
				"dateofIssue", HealthCarePermit::getDateofIssue);
			attributeGetterFunctions.put(
				"pirPermitFileEntryId",
				HealthCarePermit::getPirPermitFileEntryId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<HealthCarePermit, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<HealthCarePermit, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<HealthCarePermit, ?>>();

			attributeSetterBiConsumers.put(
				"healthPermitId",
				(BiConsumer<HealthCarePermit, Long>)
					HealthCarePermit::setHealthPermitId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<HealthCarePermit, Long>)
					HealthCarePermit::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<HealthCarePermit, Long>)
					HealthCarePermit::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<HealthCarePermit, Long>)
					HealthCarePermit::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<HealthCarePermit, String>)
					HealthCarePermit::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<HealthCarePermit, Date>)
					HealthCarePermit::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<HealthCarePermit, Date>)
					HealthCarePermit::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<HealthCarePermit, String>)
					HealthCarePermit::setCaseId);
			attributeSetterBiConsumers.put(
				"permitTransaction",
				(BiConsumer<HealthCarePermit, String>)
					HealthCarePermit::setPermitTransaction);
			attributeSetterBiConsumers.put(
				"nameofApplicant",
				(BiConsumer<HealthCarePermit, String>)
					HealthCarePermit::setNameofApplicant);
			attributeSetterBiConsumers.put(
				"category",
				(BiConsumer<HealthCarePermit, String>)
					HealthCarePermit::setCategory);
			attributeSetterBiConsumers.put(
				"pirPermt",
				(BiConsumer<HealthCarePermit, String>)
					HealthCarePermit::setPirPermt);
			attributeSetterBiConsumers.put(
				"bonafideHC",
				(BiConsumer<HealthCarePermit, String>)
					HealthCarePermit::setBonafideHC);
			attributeSetterBiConsumers.put(
				"tariffCode",
				(BiConsumer<HealthCarePermit, String>)
					HealthCarePermit::setTariffCode);
			attributeSetterBiConsumers.put(
				"dateofIssue",
				(BiConsumer<HealthCarePermit, Date>)
					HealthCarePermit::setDateofIssue);
			attributeSetterBiConsumers.put(
				"pirPermitFileEntryId",
				(BiConsumer<HealthCarePermit, Long>)
					HealthCarePermit::setPirPermitFileEntryId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getHealthPermitId() {
		return _healthPermitId;
	}

	@Override
	public void setHealthPermitId(long healthPermitId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthPermitId = healthPermitId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getPermitTransaction() {
		if (_permitTransaction == null) {
			return "";
		}
		else {
			return _permitTransaction;
		}
	}

	@Override
	public void setPermitTransaction(String permitTransaction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitTransaction = permitTransaction;
	}

	@JSON
	@Override
	public String getNameofApplicant() {
		if (_nameofApplicant == null) {
			return "";
		}
		else {
			return _nameofApplicant;
		}
	}

	@Override
	public void setNameofApplicant(String nameofApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameofApplicant = nameofApplicant;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	@JSON
	@Override
	public String getPirPermt() {
		if (_pirPermt == null) {
			return "";
		}
		else {
			return _pirPermt;
		}
	}

	@Override
	public void setPirPermt(String pirPermt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pirPermt = pirPermt;
	}

	@JSON
	@Override
	public String getBonafideHC() {
		if (_bonafideHC == null) {
			return "";
		}
		else {
			return _bonafideHC;
		}
	}

	@Override
	public void setBonafideHC(String bonafideHC) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonafideHC = bonafideHC;
	}

	@JSON
	@Override
	public String getTariffCode() {
		if (_tariffCode == null) {
			return "";
		}
		else {
			return _tariffCode;
		}
	}

	@Override
	public void setTariffCode(String tariffCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tariffCode = tariffCode;
	}

	@JSON
	@Override
	public Date getDateofIssue() {
		return _dateofIssue;
	}

	@Override
	public void setDateofIssue(Date dateofIssue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateofIssue = dateofIssue;
	}

	@JSON
	@Override
	public long getPirPermitFileEntryId() {
		return _pirPermitFileEntryId;
	}

	@Override
	public void setPirPermitFileEntryId(long pirPermitFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pirPermitFileEntryId = pirPermitFileEntryId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), HealthCarePermit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HealthCarePermit toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HealthCarePermit>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HealthCarePermitImpl healthCarePermitImpl = new HealthCarePermitImpl();

		healthCarePermitImpl.setHealthPermitId(getHealthPermitId());
		healthCarePermitImpl.setGroupId(getGroupId());
		healthCarePermitImpl.setCompanyId(getCompanyId());
		healthCarePermitImpl.setUserId(getUserId());
		healthCarePermitImpl.setUserName(getUserName());
		healthCarePermitImpl.setCreateDate(getCreateDate());
		healthCarePermitImpl.setModifiedDate(getModifiedDate());
		healthCarePermitImpl.setCaseId(getCaseId());
		healthCarePermitImpl.setPermitTransaction(getPermitTransaction());
		healthCarePermitImpl.setNameofApplicant(getNameofApplicant());
		healthCarePermitImpl.setCategory(getCategory());
		healthCarePermitImpl.setPirPermt(getPirPermt());
		healthCarePermitImpl.setBonafideHC(getBonafideHC());
		healthCarePermitImpl.setTariffCode(getTariffCode());
		healthCarePermitImpl.setDateofIssue(getDateofIssue());
		healthCarePermitImpl.setPirPermitFileEntryId(getPirPermitFileEntryId());

		healthCarePermitImpl.resetOriginalValues();

		return healthCarePermitImpl;
	}

	@Override
	public HealthCarePermit cloneWithOriginalValues() {
		HealthCarePermitImpl healthCarePermitImpl = new HealthCarePermitImpl();

		healthCarePermitImpl.setHealthPermitId(
			this.<Long>getColumnOriginalValue("healthPermitId"));
		healthCarePermitImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		healthCarePermitImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		healthCarePermitImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		healthCarePermitImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		healthCarePermitImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		healthCarePermitImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		healthCarePermitImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		healthCarePermitImpl.setPermitTransaction(
			this.<String>getColumnOriginalValue("permitTransaction"));
		healthCarePermitImpl.setNameofApplicant(
			this.<String>getColumnOriginalValue("nameofApplicant"));
		healthCarePermitImpl.setCategory(
			this.<String>getColumnOriginalValue("category"));
		healthCarePermitImpl.setPirPermt(
			this.<String>getColumnOriginalValue("pirPermt"));
		healthCarePermitImpl.setBonafideHC(
			this.<String>getColumnOriginalValue("bonafideHC"));
		healthCarePermitImpl.setTariffCode(
			this.<String>getColumnOriginalValue("tariffCode"));
		healthCarePermitImpl.setDateofIssue(
			this.<Date>getColumnOriginalValue("dateofIssue"));
		healthCarePermitImpl.setPirPermitFileEntryId(
			this.<Long>getColumnOriginalValue("pirPermitFileEntryId"));

		return healthCarePermitImpl;
	}

	@Override
	public int compareTo(HealthCarePermit healthCarePermit) {
		long primaryKey = healthCarePermit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof HealthCarePermit)) {
			return false;
		}

		HealthCarePermit healthCarePermit = (HealthCarePermit)object;

		long primaryKey = healthCarePermit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<HealthCarePermit> toCacheModel() {
		HealthCarePermitCacheModel healthCarePermitCacheModel =
			new HealthCarePermitCacheModel();

		healthCarePermitCacheModel.healthPermitId = getHealthPermitId();

		healthCarePermitCacheModel.groupId = getGroupId();

		healthCarePermitCacheModel.companyId = getCompanyId();

		healthCarePermitCacheModel.userId = getUserId();

		healthCarePermitCacheModel.userName = getUserName();

		String userName = healthCarePermitCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			healthCarePermitCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			healthCarePermitCacheModel.createDate = createDate.getTime();
		}
		else {
			healthCarePermitCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			healthCarePermitCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			healthCarePermitCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		healthCarePermitCacheModel.caseId = getCaseId();

		String caseId = healthCarePermitCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			healthCarePermitCacheModel.caseId = null;
		}

		healthCarePermitCacheModel.permitTransaction = getPermitTransaction();

		String permitTransaction = healthCarePermitCacheModel.permitTransaction;

		if ((permitTransaction != null) && (permitTransaction.length() == 0)) {
			healthCarePermitCacheModel.permitTransaction = null;
		}

		healthCarePermitCacheModel.nameofApplicant = getNameofApplicant();

		String nameofApplicant = healthCarePermitCacheModel.nameofApplicant;

		if ((nameofApplicant != null) && (nameofApplicant.length() == 0)) {
			healthCarePermitCacheModel.nameofApplicant = null;
		}

		healthCarePermitCacheModel.category = getCategory();

		String category = healthCarePermitCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			healthCarePermitCacheModel.category = null;
		}

		healthCarePermitCacheModel.pirPermt = getPirPermt();

		String pirPermt = healthCarePermitCacheModel.pirPermt;

		if ((pirPermt != null) && (pirPermt.length() == 0)) {
			healthCarePermitCacheModel.pirPermt = null;
		}

		healthCarePermitCacheModel.bonafideHC = getBonafideHC();

		String bonafideHC = healthCarePermitCacheModel.bonafideHC;

		if ((bonafideHC != null) && (bonafideHC.length() == 0)) {
			healthCarePermitCacheModel.bonafideHC = null;
		}

		healthCarePermitCacheModel.tariffCode = getTariffCode();

		String tariffCode = healthCarePermitCacheModel.tariffCode;

		if ((tariffCode != null) && (tariffCode.length() == 0)) {
			healthCarePermitCacheModel.tariffCode = null;
		}

		Date dateofIssue = getDateofIssue();

		if (dateofIssue != null) {
			healthCarePermitCacheModel.dateofIssue = dateofIssue.getTime();
		}
		else {
			healthCarePermitCacheModel.dateofIssue = Long.MIN_VALUE;
		}

		healthCarePermitCacheModel.pirPermitFileEntryId =
			getPirPermitFileEntryId();

		return healthCarePermitCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HealthCarePermit, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HealthCarePermit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HealthCarePermit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(HealthCarePermit)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, HealthCarePermit>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					HealthCarePermit.class, ModelWrapper.class);

	}

	private long _healthPermitId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _permitTransaction;
	private String _nameofApplicant;
	private String _category;
	private String _pirPermt;
	private String _bonafideHC;
	private String _tariffCode;
	private Date _dateofIssue;
	private long _pirPermitFileEntryId;

	public <T> T getColumnValue(String columnName) {
		Function<HealthCarePermit, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((HealthCarePermit)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("healthPermitId", _healthPermitId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("permitTransaction", _permitTransaction);
		_columnOriginalValues.put("nameofApplicant", _nameofApplicant);
		_columnOriginalValues.put("category", _category);
		_columnOriginalValues.put("pirPermt", _pirPermt);
		_columnOriginalValues.put("bonafideHC", _bonafideHC);
		_columnOriginalValues.put("tariffCode", _tariffCode);
		_columnOriginalValues.put("dateofIssue", _dateofIssue);
		_columnOriginalValues.put(
			"pirPermitFileEntryId", _pirPermitFileEntryId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("healthPermitId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("permitTransaction", 256L);

		columnBitmasks.put("nameofApplicant", 512L);

		columnBitmasks.put("category", 1024L);

		columnBitmasks.put("pirPermt", 2048L);

		columnBitmasks.put("bonafideHC", 4096L);

		columnBitmasks.put("tariffCode", 8192L);

		columnBitmasks.put("dateofIssue", 16384L);

		columnBitmasks.put("pirPermitFileEntryId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private HealthCarePermit _escapedModel;

}