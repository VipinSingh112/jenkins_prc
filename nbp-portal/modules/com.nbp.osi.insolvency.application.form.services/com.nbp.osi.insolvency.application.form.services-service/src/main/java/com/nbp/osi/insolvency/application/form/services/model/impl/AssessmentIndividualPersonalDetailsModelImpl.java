/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.AssessmentIndividualPersonalDetails;
import com.nbp.osi.insolvency.application.form.services.model.AssessmentIndividualPersonalDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AssessmentIndividualPersonalDetails service. Represents a row in the &quot;nbp_osi_assessment_detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AssessmentIndividualPersonalDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssessmentIndividualPersonalDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssessmentIndividualPersonalDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class AssessmentIndividualPersonalDetailsModelImpl
	extends BaseModelImpl<AssessmentIndividualPersonalDetails>
	implements AssessmentIndividualPersonalDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a assessment individual personal details model instance should use the <code>AssessmentIndividualPersonalDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_assessment_detail";

	public static final Object[][] TABLE_COLUMNS = {
		{"assessmentDetailsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"initialDateContact", Types.TIMESTAMP},
		{"personalName", Types.VARCHAR}, {"personalAddress", Types.VARCHAR},
		{"personalEmail", Types.VARCHAR}, {"personalTelNum", Types.VARCHAR},
		{"personalTrn", Types.VARCHAR}, {"personalNis", Types.VARCHAR},
		{"personalDob", Types.TIMESTAMP}, {"personalAge", Types.VARCHAR},
		{"personalMaritalStatus", Types.VARCHAR},
		{"personalDependents", Types.VARCHAR},
		{"personalOccupation", Types.VARCHAR}, {"emergencyName", Types.VARCHAR},
		{"emergencyEmail", Types.VARCHAR}, {"emergencyTelNum", Types.VARCHAR},
		{"emergencyAddress", Types.VARCHAR},
		{"emergencyEmployer", Types.VARCHAR},
		{"employerAddress", Types.VARCHAR}, {"employerEmail", Types.VARCHAR},
		{"employerTelNum", Types.VARCHAR}, {"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("assessmentDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("initialDateContact", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("personalName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalTelNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalTrn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalNis", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalDob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("personalAge", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalMaritalStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalDependents", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalOccupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyTelNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyEmployer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employerTelNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_assessment_detail (assessmentDetailsId LONG not null primary key,groupId LONG,initialDateContact DATE null,personalName VARCHAR(75) null,personalAddress VARCHAR(500) null,personalEmail VARCHAR(75) null,personalTelNum VARCHAR(75) null,personalTrn VARCHAR(75) null,personalNis VARCHAR(75) null,personalDob DATE null,personalAge VARCHAR(75) null,personalMaritalStatus VARCHAR(75) null,personalDependents VARCHAR(75) null,personalOccupation VARCHAR(75) null,emergencyName VARCHAR(75) null,emergencyEmail VARCHAR(75) null,emergencyTelNum VARCHAR(75) null,emergencyAddress VARCHAR(500) null,emergencyEmployer VARCHAR(75) null,employerAddress VARCHAR(500) null,employerEmail VARCHAR(75) null,employerTelNum VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_assessment_detail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY assessmentIndividualPersonalDetails.assessmentDetailsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_assessment_detail.assessmentDetailsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ASSESSMENTDETAILSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AssessmentIndividualPersonalDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _assessmentDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAssessmentDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _assessmentDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssessmentIndividualPersonalDetails.class;
	}

	@Override
	public String getModelClassName() {
		return AssessmentIndividualPersonalDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AssessmentIndividualPersonalDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<AssessmentIndividualPersonalDetails, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AssessmentIndividualPersonalDetails, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(AssessmentIndividualPersonalDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AssessmentIndividualPersonalDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AssessmentIndividualPersonalDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AssessmentIndividualPersonalDetails)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<AssessmentIndividualPersonalDetails, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AssessmentIndividualPersonalDetails, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AssessmentIndividualPersonalDetails, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AssessmentIndividualPersonalDetails, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function
							 <AssessmentIndividualPersonalDetails, Object>>();

			attributeGetterFunctions.put(
				"assessmentDetailsId",
				AssessmentIndividualPersonalDetails::getAssessmentDetailsId);
			attributeGetterFunctions.put(
				"groupId", AssessmentIndividualPersonalDetails::getGroupId);
			attributeGetterFunctions.put(
				"initialDateContact",
				AssessmentIndividualPersonalDetails::getInitialDateContact);
			attributeGetterFunctions.put(
				"personalName",
				AssessmentIndividualPersonalDetails::getPersonalName);
			attributeGetterFunctions.put(
				"personalAddress",
				AssessmentIndividualPersonalDetails::getPersonalAddress);
			attributeGetterFunctions.put(
				"personalEmail",
				AssessmentIndividualPersonalDetails::getPersonalEmail);
			attributeGetterFunctions.put(
				"personalTelNum",
				AssessmentIndividualPersonalDetails::getPersonalTelNum);
			attributeGetterFunctions.put(
				"personalTrn",
				AssessmentIndividualPersonalDetails::getPersonalTrn);
			attributeGetterFunctions.put(
				"personalNis",
				AssessmentIndividualPersonalDetails::getPersonalNis);
			attributeGetterFunctions.put(
				"personalDob",
				AssessmentIndividualPersonalDetails::getPersonalDob);
			attributeGetterFunctions.put(
				"personalAge",
				AssessmentIndividualPersonalDetails::getPersonalAge);
			attributeGetterFunctions.put(
				"personalMaritalStatus",
				AssessmentIndividualPersonalDetails::getPersonalMaritalStatus);
			attributeGetterFunctions.put(
				"personalDependents",
				AssessmentIndividualPersonalDetails::getPersonalDependents);
			attributeGetterFunctions.put(
				"personalOccupation",
				AssessmentIndividualPersonalDetails::getPersonalOccupation);
			attributeGetterFunctions.put(
				"emergencyName",
				AssessmentIndividualPersonalDetails::getEmergencyName);
			attributeGetterFunctions.put(
				"emergencyEmail",
				AssessmentIndividualPersonalDetails::getEmergencyEmail);
			attributeGetterFunctions.put(
				"emergencyTelNum",
				AssessmentIndividualPersonalDetails::getEmergencyTelNum);
			attributeGetterFunctions.put(
				"emergencyAddress",
				AssessmentIndividualPersonalDetails::getEmergencyAddress);
			attributeGetterFunctions.put(
				"emergencyEmployer",
				AssessmentIndividualPersonalDetails::getEmergencyEmployer);
			attributeGetterFunctions.put(
				"employerAddress",
				AssessmentIndividualPersonalDetails::getEmployerAddress);
			attributeGetterFunctions.put(
				"employerEmail",
				AssessmentIndividualPersonalDetails::getEmployerEmail);
			attributeGetterFunctions.put(
				"employerTelNum",
				AssessmentIndividualPersonalDetails::getEmployerTelNum);
			attributeGetterFunctions.put(
				"osiInsolvencyId",
				AssessmentIndividualPersonalDetails::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AssessmentIndividualPersonalDetails, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AssessmentIndividualPersonalDetails, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<AssessmentIndividualPersonalDetails, ?>>();

			attributeSetterBiConsumers.put(
				"assessmentDetailsId",
				(BiConsumer<AssessmentIndividualPersonalDetails, Long>)
					AssessmentIndividualPersonalDetails::
						setAssessmentDetailsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AssessmentIndividualPersonalDetails, Long>)
					AssessmentIndividualPersonalDetails::setGroupId);
			attributeSetterBiConsumers.put(
				"initialDateContact",
				(BiConsumer<AssessmentIndividualPersonalDetails, Date>)
					AssessmentIndividualPersonalDetails::setInitialDateContact);
			attributeSetterBiConsumers.put(
				"personalName",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalName);
			attributeSetterBiConsumers.put(
				"personalAddress",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalAddress);
			attributeSetterBiConsumers.put(
				"personalEmail",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalEmail);
			attributeSetterBiConsumers.put(
				"personalTelNum",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalTelNum);
			attributeSetterBiConsumers.put(
				"personalTrn",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalTrn);
			attributeSetterBiConsumers.put(
				"personalNis",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalNis);
			attributeSetterBiConsumers.put(
				"personalDob",
				(BiConsumer<AssessmentIndividualPersonalDetails, Date>)
					AssessmentIndividualPersonalDetails::setPersonalDob);
			attributeSetterBiConsumers.put(
				"personalAge",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalAge);
			attributeSetterBiConsumers.put(
				"personalMaritalStatus",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::
						setPersonalMaritalStatus);
			attributeSetterBiConsumers.put(
				"personalDependents",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalDependents);
			attributeSetterBiConsumers.put(
				"personalOccupation",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setPersonalOccupation);
			attributeSetterBiConsumers.put(
				"emergencyName",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setEmergencyName);
			attributeSetterBiConsumers.put(
				"emergencyEmail",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setEmergencyEmail);
			attributeSetterBiConsumers.put(
				"emergencyTelNum",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setEmergencyTelNum);
			attributeSetterBiConsumers.put(
				"emergencyAddress",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setEmergencyAddress);
			attributeSetterBiConsumers.put(
				"emergencyEmployer",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setEmergencyEmployer);
			attributeSetterBiConsumers.put(
				"employerAddress",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setEmployerAddress);
			attributeSetterBiConsumers.put(
				"employerEmail",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setEmployerEmail);
			attributeSetterBiConsumers.put(
				"employerTelNum",
				(BiConsumer<AssessmentIndividualPersonalDetails, String>)
					AssessmentIndividualPersonalDetails::setEmployerTelNum);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<AssessmentIndividualPersonalDetails, Long>)
					AssessmentIndividualPersonalDetails::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAssessmentDetailsId() {
		return _assessmentDetailsId;
	}

	@Override
	public void setAssessmentDetailsId(long assessmentDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assessmentDetailsId = assessmentDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getInitialDateContact() {
		return _initialDateContact;
	}

	@Override
	public void setInitialDateContact(Date initialDateContact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_initialDateContact = initialDateContact;
	}

	@JSON
	@Override
	public String getPersonalName() {
		if (_personalName == null) {
			return "";
		}
		else {
			return _personalName;
		}
	}

	@Override
	public void setPersonalName(String personalName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalName = personalName;
	}

	@JSON
	@Override
	public String getPersonalAddress() {
		if (_personalAddress == null) {
			return "";
		}
		else {
			return _personalAddress;
		}
	}

	@Override
	public void setPersonalAddress(String personalAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalAddress = personalAddress;
	}

	@JSON
	@Override
	public String getPersonalEmail() {
		if (_personalEmail == null) {
			return "";
		}
		else {
			return _personalEmail;
		}
	}

	@Override
	public void setPersonalEmail(String personalEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalEmail = personalEmail;
	}

	@JSON
	@Override
	public String getPersonalTelNum() {
		if (_personalTelNum == null) {
			return "";
		}
		else {
			return _personalTelNum;
		}
	}

	@Override
	public void setPersonalTelNum(String personalTelNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalTelNum = personalTelNum;
	}

	@JSON
	@Override
	public String getPersonalTrn() {
		if (_personalTrn == null) {
			return "";
		}
		else {
			return _personalTrn;
		}
	}

	@Override
	public void setPersonalTrn(String personalTrn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalTrn = personalTrn;
	}

	@JSON
	@Override
	public String getPersonalNis() {
		if (_personalNis == null) {
			return "";
		}
		else {
			return _personalNis;
		}
	}

	@Override
	public void setPersonalNis(String personalNis) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalNis = personalNis;
	}

	@JSON
	@Override
	public Date getPersonalDob() {
		return _personalDob;
	}

	@Override
	public void setPersonalDob(Date personalDob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalDob = personalDob;
	}

	@JSON
	@Override
	public String getPersonalAge() {
		if (_personalAge == null) {
			return "";
		}
		else {
			return _personalAge;
		}
	}

	@Override
	public void setPersonalAge(String personalAge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalAge = personalAge;
	}

	@JSON
	@Override
	public String getPersonalMaritalStatus() {
		if (_personalMaritalStatus == null) {
			return "";
		}
		else {
			return _personalMaritalStatus;
		}
	}

	@Override
	public void setPersonalMaritalStatus(String personalMaritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalMaritalStatus = personalMaritalStatus;
	}

	@JSON
	@Override
	public String getPersonalDependents() {
		if (_personalDependents == null) {
			return "";
		}
		else {
			return _personalDependents;
		}
	}

	@Override
	public void setPersonalDependents(String personalDependents) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalDependents = personalDependents;
	}

	@JSON
	@Override
	public String getPersonalOccupation() {
		if (_personalOccupation == null) {
			return "";
		}
		else {
			return _personalOccupation;
		}
	}

	@Override
	public void setPersonalOccupation(String personalOccupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalOccupation = personalOccupation;
	}

	@JSON
	@Override
	public String getEmergencyName() {
		if (_emergencyName == null) {
			return "";
		}
		else {
			return _emergencyName;
		}
	}

	@Override
	public void setEmergencyName(String emergencyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyName = emergencyName;
	}

	@JSON
	@Override
	public String getEmergencyEmail() {
		if (_emergencyEmail == null) {
			return "";
		}
		else {
			return _emergencyEmail;
		}
	}

	@Override
	public void setEmergencyEmail(String emergencyEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyEmail = emergencyEmail;
	}

	@JSON
	@Override
	public String getEmergencyTelNum() {
		if (_emergencyTelNum == null) {
			return "";
		}
		else {
			return _emergencyTelNum;
		}
	}

	@Override
	public void setEmergencyTelNum(String emergencyTelNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyTelNum = emergencyTelNum;
	}

	@JSON
	@Override
	public String getEmergencyAddress() {
		if (_emergencyAddress == null) {
			return "";
		}
		else {
			return _emergencyAddress;
		}
	}

	@Override
	public void setEmergencyAddress(String emergencyAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyAddress = emergencyAddress;
	}

	@JSON
	@Override
	public String getEmergencyEmployer() {
		if (_emergencyEmployer == null) {
			return "";
		}
		else {
			return _emergencyEmployer;
		}
	}

	@Override
	public void setEmergencyEmployer(String emergencyEmployer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyEmployer = emergencyEmployer;
	}

	@JSON
	@Override
	public String getEmployerAddress() {
		if (_employerAddress == null) {
			return "";
		}
		else {
			return _employerAddress;
		}
	}

	@Override
	public void setEmployerAddress(String employerAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employerAddress = employerAddress;
	}

	@JSON
	@Override
	public String getEmployerEmail() {
		if (_employerEmail == null) {
			return "";
		}
		else {
			return _employerEmail;
		}
	}

	@Override
	public void setEmployerEmail(String employerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employerEmail = employerEmail;
	}

	@JSON
	@Override
	public String getEmployerTelNum() {
		if (_employerTelNum == null) {
			return "";
		}
		else {
			return _employerTelNum;
		}
	}

	@Override
	public void setEmployerTelNum(String employerTelNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employerTelNum = employerTelNum;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, AssessmentIndividualPersonalDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssessmentIndividualPersonalDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AssessmentIndividualPersonalDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssessmentIndividualPersonalDetailsImpl
			assessmentIndividualPersonalDetailsImpl =
				new AssessmentIndividualPersonalDetailsImpl();

		assessmentIndividualPersonalDetailsImpl.setAssessmentDetailsId(
			getAssessmentDetailsId());
		assessmentIndividualPersonalDetailsImpl.setGroupId(getGroupId());
		assessmentIndividualPersonalDetailsImpl.setInitialDateContact(
			getInitialDateContact());
		assessmentIndividualPersonalDetailsImpl.setPersonalName(
			getPersonalName());
		assessmentIndividualPersonalDetailsImpl.setPersonalAddress(
			getPersonalAddress());
		assessmentIndividualPersonalDetailsImpl.setPersonalEmail(
			getPersonalEmail());
		assessmentIndividualPersonalDetailsImpl.setPersonalTelNum(
			getPersonalTelNum());
		assessmentIndividualPersonalDetailsImpl.setPersonalTrn(
			getPersonalTrn());
		assessmentIndividualPersonalDetailsImpl.setPersonalNis(
			getPersonalNis());
		assessmentIndividualPersonalDetailsImpl.setPersonalDob(
			getPersonalDob());
		assessmentIndividualPersonalDetailsImpl.setPersonalAge(
			getPersonalAge());
		assessmentIndividualPersonalDetailsImpl.setPersonalMaritalStatus(
			getPersonalMaritalStatus());
		assessmentIndividualPersonalDetailsImpl.setPersonalDependents(
			getPersonalDependents());
		assessmentIndividualPersonalDetailsImpl.setPersonalOccupation(
			getPersonalOccupation());
		assessmentIndividualPersonalDetailsImpl.setEmergencyName(
			getEmergencyName());
		assessmentIndividualPersonalDetailsImpl.setEmergencyEmail(
			getEmergencyEmail());
		assessmentIndividualPersonalDetailsImpl.setEmergencyTelNum(
			getEmergencyTelNum());
		assessmentIndividualPersonalDetailsImpl.setEmergencyAddress(
			getEmergencyAddress());
		assessmentIndividualPersonalDetailsImpl.setEmergencyEmployer(
			getEmergencyEmployer());
		assessmentIndividualPersonalDetailsImpl.setEmployerAddress(
			getEmployerAddress());
		assessmentIndividualPersonalDetailsImpl.setEmployerEmail(
			getEmployerEmail());
		assessmentIndividualPersonalDetailsImpl.setEmployerTelNum(
			getEmployerTelNum());
		assessmentIndividualPersonalDetailsImpl.setOsiInsolvencyId(
			getOsiInsolvencyId());

		assessmentIndividualPersonalDetailsImpl.resetOriginalValues();

		return assessmentIndividualPersonalDetailsImpl;
	}

	@Override
	public AssessmentIndividualPersonalDetails cloneWithOriginalValues() {
		AssessmentIndividualPersonalDetailsImpl
			assessmentIndividualPersonalDetailsImpl =
				new AssessmentIndividualPersonalDetailsImpl();

		assessmentIndividualPersonalDetailsImpl.setAssessmentDetailsId(
			this.<Long>getColumnOriginalValue("assessmentDetailsId"));
		assessmentIndividualPersonalDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		assessmentIndividualPersonalDetailsImpl.setInitialDateContact(
			this.<Date>getColumnOriginalValue("initialDateContact"));
		assessmentIndividualPersonalDetailsImpl.setPersonalName(
			this.<String>getColumnOriginalValue("personalName"));
		assessmentIndividualPersonalDetailsImpl.setPersonalAddress(
			this.<String>getColumnOriginalValue("personalAddress"));
		assessmentIndividualPersonalDetailsImpl.setPersonalEmail(
			this.<String>getColumnOriginalValue("personalEmail"));
		assessmentIndividualPersonalDetailsImpl.setPersonalTelNum(
			this.<String>getColumnOriginalValue("personalTelNum"));
		assessmentIndividualPersonalDetailsImpl.setPersonalTrn(
			this.<String>getColumnOriginalValue("personalTrn"));
		assessmentIndividualPersonalDetailsImpl.setPersonalNis(
			this.<String>getColumnOriginalValue("personalNis"));
		assessmentIndividualPersonalDetailsImpl.setPersonalDob(
			this.<Date>getColumnOriginalValue("personalDob"));
		assessmentIndividualPersonalDetailsImpl.setPersonalAge(
			this.<String>getColumnOriginalValue("personalAge"));
		assessmentIndividualPersonalDetailsImpl.setPersonalMaritalStatus(
			this.<String>getColumnOriginalValue("personalMaritalStatus"));
		assessmentIndividualPersonalDetailsImpl.setPersonalDependents(
			this.<String>getColumnOriginalValue("personalDependents"));
		assessmentIndividualPersonalDetailsImpl.setPersonalOccupation(
			this.<String>getColumnOriginalValue("personalOccupation"));
		assessmentIndividualPersonalDetailsImpl.setEmergencyName(
			this.<String>getColumnOriginalValue("emergencyName"));
		assessmentIndividualPersonalDetailsImpl.setEmergencyEmail(
			this.<String>getColumnOriginalValue("emergencyEmail"));
		assessmentIndividualPersonalDetailsImpl.setEmergencyTelNum(
			this.<String>getColumnOriginalValue("emergencyTelNum"));
		assessmentIndividualPersonalDetailsImpl.setEmergencyAddress(
			this.<String>getColumnOriginalValue("emergencyAddress"));
		assessmentIndividualPersonalDetailsImpl.setEmergencyEmployer(
			this.<String>getColumnOriginalValue("emergencyEmployer"));
		assessmentIndividualPersonalDetailsImpl.setEmployerAddress(
			this.<String>getColumnOriginalValue("employerAddress"));
		assessmentIndividualPersonalDetailsImpl.setEmployerEmail(
			this.<String>getColumnOriginalValue("employerEmail"));
		assessmentIndividualPersonalDetailsImpl.setEmployerTelNum(
			this.<String>getColumnOriginalValue("employerTelNum"));
		assessmentIndividualPersonalDetailsImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return assessmentIndividualPersonalDetailsImpl;
	}

	@Override
	public int compareTo(
		AssessmentIndividualPersonalDetails
			assessmentIndividualPersonalDetails) {

		long primaryKey = assessmentIndividualPersonalDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AssessmentIndividualPersonalDetails)) {
			return false;
		}

		AssessmentIndividualPersonalDetails
			assessmentIndividualPersonalDetails =
				(AssessmentIndividualPersonalDetails)object;

		long primaryKey = assessmentIndividualPersonalDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AssessmentIndividualPersonalDetails> toCacheModel() {
		AssessmentIndividualPersonalDetailsCacheModel
			assessmentIndividualPersonalDetailsCacheModel =
				new AssessmentIndividualPersonalDetailsCacheModel();

		assessmentIndividualPersonalDetailsCacheModel.assessmentDetailsId =
			getAssessmentDetailsId();

		assessmentIndividualPersonalDetailsCacheModel.groupId = getGroupId();

		Date initialDateContact = getInitialDateContact();

		if (initialDateContact != null) {
			assessmentIndividualPersonalDetailsCacheModel.initialDateContact =
				initialDateContact.getTime();
		}
		else {
			assessmentIndividualPersonalDetailsCacheModel.initialDateContact =
				Long.MIN_VALUE;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalName =
			getPersonalName();

		String personalName =
			assessmentIndividualPersonalDetailsCacheModel.personalName;

		if ((personalName != null) && (personalName.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.personalName = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalAddress =
			getPersonalAddress();

		String personalAddress =
			assessmentIndividualPersonalDetailsCacheModel.personalAddress;

		if ((personalAddress != null) && (personalAddress.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.personalAddress =
				null;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalEmail =
			getPersonalEmail();

		String personalEmail =
			assessmentIndividualPersonalDetailsCacheModel.personalEmail;

		if ((personalEmail != null) && (personalEmail.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.personalEmail = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalTelNum =
			getPersonalTelNum();

		String personalTelNum =
			assessmentIndividualPersonalDetailsCacheModel.personalTelNum;

		if ((personalTelNum != null) && (personalTelNum.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.personalTelNum = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalTrn =
			getPersonalTrn();

		String personalTrn =
			assessmentIndividualPersonalDetailsCacheModel.personalTrn;

		if ((personalTrn != null) && (personalTrn.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.personalTrn = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalNis =
			getPersonalNis();

		String personalNis =
			assessmentIndividualPersonalDetailsCacheModel.personalNis;

		if ((personalNis != null) && (personalNis.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.personalNis = null;
		}

		Date personalDob = getPersonalDob();

		if (personalDob != null) {
			assessmentIndividualPersonalDetailsCacheModel.personalDob =
				personalDob.getTime();
		}
		else {
			assessmentIndividualPersonalDetailsCacheModel.personalDob =
				Long.MIN_VALUE;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalAge =
			getPersonalAge();

		String personalAge =
			assessmentIndividualPersonalDetailsCacheModel.personalAge;

		if ((personalAge != null) && (personalAge.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.personalAge = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalMaritalStatus =
			getPersonalMaritalStatus();

		String personalMaritalStatus =
			assessmentIndividualPersonalDetailsCacheModel.personalMaritalStatus;

		if ((personalMaritalStatus != null) &&
			(personalMaritalStatus.length() == 0)) {

			assessmentIndividualPersonalDetailsCacheModel.
				personalMaritalStatus = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalDependents =
			getPersonalDependents();

		String personalDependents =
			assessmentIndividualPersonalDetailsCacheModel.personalDependents;

		if ((personalDependents != null) &&
			(personalDependents.length() == 0)) {

			assessmentIndividualPersonalDetailsCacheModel.personalDependents =
				null;
		}

		assessmentIndividualPersonalDetailsCacheModel.personalOccupation =
			getPersonalOccupation();

		String personalOccupation =
			assessmentIndividualPersonalDetailsCacheModel.personalOccupation;

		if ((personalOccupation != null) &&
			(personalOccupation.length() == 0)) {

			assessmentIndividualPersonalDetailsCacheModel.personalOccupation =
				null;
		}

		assessmentIndividualPersonalDetailsCacheModel.emergencyName =
			getEmergencyName();

		String emergencyName =
			assessmentIndividualPersonalDetailsCacheModel.emergencyName;

		if ((emergencyName != null) && (emergencyName.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.emergencyName = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.emergencyEmail =
			getEmergencyEmail();

		String emergencyEmail =
			assessmentIndividualPersonalDetailsCacheModel.emergencyEmail;

		if ((emergencyEmail != null) && (emergencyEmail.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.emergencyEmail = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.emergencyTelNum =
			getEmergencyTelNum();

		String emergencyTelNum =
			assessmentIndividualPersonalDetailsCacheModel.emergencyTelNum;

		if ((emergencyTelNum != null) && (emergencyTelNum.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.emergencyTelNum =
				null;
		}

		assessmentIndividualPersonalDetailsCacheModel.emergencyAddress =
			getEmergencyAddress();

		String emergencyAddress =
			assessmentIndividualPersonalDetailsCacheModel.emergencyAddress;

		if ((emergencyAddress != null) && (emergencyAddress.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.emergencyAddress =
				null;
		}

		assessmentIndividualPersonalDetailsCacheModel.emergencyEmployer =
			getEmergencyEmployer();

		String emergencyEmployer =
			assessmentIndividualPersonalDetailsCacheModel.emergencyEmployer;

		if ((emergencyEmployer != null) && (emergencyEmployer.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.emergencyEmployer =
				null;
		}

		assessmentIndividualPersonalDetailsCacheModel.employerAddress =
			getEmployerAddress();

		String employerAddress =
			assessmentIndividualPersonalDetailsCacheModel.employerAddress;

		if ((employerAddress != null) && (employerAddress.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.employerAddress =
				null;
		}

		assessmentIndividualPersonalDetailsCacheModel.employerEmail =
			getEmployerEmail();

		String employerEmail =
			assessmentIndividualPersonalDetailsCacheModel.employerEmail;

		if ((employerEmail != null) && (employerEmail.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.employerEmail = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.employerTelNum =
			getEmployerTelNum();

		String employerTelNum =
			assessmentIndividualPersonalDetailsCacheModel.employerTelNum;

		if ((employerTelNum != null) && (employerTelNum.length() == 0)) {
			assessmentIndividualPersonalDetailsCacheModel.employerTelNum = null;
		}

		assessmentIndividualPersonalDetailsCacheModel.osiInsolvencyId =
			getOsiInsolvencyId();

		return assessmentIndividualPersonalDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AssessmentIndividualPersonalDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<AssessmentIndividualPersonalDetails, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AssessmentIndividualPersonalDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AssessmentIndividualPersonalDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AssessmentIndividualPersonalDetails>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AssessmentIndividualPersonalDetails.class,
						ModelWrapper.class);

	}

	private long _assessmentDetailsId;
	private long _groupId;
	private Date _initialDateContact;
	private String _personalName;
	private String _personalAddress;
	private String _personalEmail;
	private String _personalTelNum;
	private String _personalTrn;
	private String _personalNis;
	private Date _personalDob;
	private String _personalAge;
	private String _personalMaritalStatus;
	private String _personalDependents;
	private String _personalOccupation;
	private String _emergencyName;
	private String _emergencyEmail;
	private String _emergencyTelNum;
	private String _emergencyAddress;
	private String _emergencyEmployer;
	private String _employerAddress;
	private String _employerEmail;
	private String _employerTelNum;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<AssessmentIndividualPersonalDetails, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AssessmentIndividualPersonalDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("assessmentDetailsId", _assessmentDetailsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("initialDateContact", _initialDateContact);
		_columnOriginalValues.put("personalName", _personalName);
		_columnOriginalValues.put("personalAddress", _personalAddress);
		_columnOriginalValues.put("personalEmail", _personalEmail);
		_columnOriginalValues.put("personalTelNum", _personalTelNum);
		_columnOriginalValues.put("personalTrn", _personalTrn);
		_columnOriginalValues.put("personalNis", _personalNis);
		_columnOriginalValues.put("personalDob", _personalDob);
		_columnOriginalValues.put("personalAge", _personalAge);
		_columnOriginalValues.put(
			"personalMaritalStatus", _personalMaritalStatus);
		_columnOriginalValues.put("personalDependents", _personalDependents);
		_columnOriginalValues.put("personalOccupation", _personalOccupation);
		_columnOriginalValues.put("emergencyName", _emergencyName);
		_columnOriginalValues.put("emergencyEmail", _emergencyEmail);
		_columnOriginalValues.put("emergencyTelNum", _emergencyTelNum);
		_columnOriginalValues.put("emergencyAddress", _emergencyAddress);
		_columnOriginalValues.put("emergencyEmployer", _emergencyEmployer);
		_columnOriginalValues.put("employerAddress", _employerAddress);
		_columnOriginalValues.put("employerEmail", _employerEmail);
		_columnOriginalValues.put("employerTelNum", _employerTelNum);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("assessmentDetailsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("initialDateContact", 4L);

		columnBitmasks.put("personalName", 8L);

		columnBitmasks.put("personalAddress", 16L);

		columnBitmasks.put("personalEmail", 32L);

		columnBitmasks.put("personalTelNum", 64L);

		columnBitmasks.put("personalTrn", 128L);

		columnBitmasks.put("personalNis", 256L);

		columnBitmasks.put("personalDob", 512L);

		columnBitmasks.put("personalAge", 1024L);

		columnBitmasks.put("personalMaritalStatus", 2048L);

		columnBitmasks.put("personalDependents", 4096L);

		columnBitmasks.put("personalOccupation", 8192L);

		columnBitmasks.put("emergencyName", 16384L);

		columnBitmasks.put("emergencyEmail", 32768L);

		columnBitmasks.put("emergencyTelNum", 65536L);

		columnBitmasks.put("emergencyAddress", 131072L);

		columnBitmasks.put("emergencyEmployer", 262144L);

		columnBitmasks.put("employerAddress", 524288L);

		columnBitmasks.put("employerEmail", 1048576L);

		columnBitmasks.put("employerTelNum", 2097152L);

		columnBitmasks.put("osiInsolvencyId", 4194304L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AssessmentIndividualPersonalDetails _escapedModel;

}