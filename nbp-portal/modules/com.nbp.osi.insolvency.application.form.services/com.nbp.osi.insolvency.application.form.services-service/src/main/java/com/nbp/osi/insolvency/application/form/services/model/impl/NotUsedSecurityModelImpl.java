/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.NotUsedSecurity;
import com.nbp.osi.insolvency.application.form.services.model.NotUsedSecurityModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NotUsedSecurity service. Represents a row in the &quot;nbp_not_used_security&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NotUsedSecurityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotUsedSecurityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NotUsedSecurityImpl
 * @generated
 */
@JSON(strict = true)
public class NotUsedSecurityModelImpl
	extends BaseModelImpl<NotUsedSecurity> implements NotUsedSecurityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a not used security model instance should use the <code>NotUsedSecurity</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_not_used_security";

	public static final Object[][] TABLE_COLUMNS = {
		{"notUsedSecurityId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"realProperty", Types.VARCHAR},
		{"notUsedLocation", Types.VARCHAR},
		{"notUsedDescription", Types.VARCHAR},
		{"notUsedCounter", Types.VARCHAR}, {"notUsedValue", Types.VARCHAR},
		{"notNetValue", Types.VARCHAR}, {"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("notUsedSecurityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("realProperty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notUsedLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notUsedDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notUsedCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notUsedValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notNetValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_not_used_security (notUsedSecurityId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,realProperty VARCHAR(75) null,notUsedLocation VARCHAR(500) null,notUsedDescription VARCHAR(500) null,notUsedCounter VARCHAR(75) null,notUsedValue VARCHAR(75) null,notNetValue VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_not_used_security";

	public static final String ORDER_BY_JPQL =
		" ORDER BY notUsedSecurity.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_not_used_security.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NotUsedSecurityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notUsedSecurityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotUsedSecurityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notUsedSecurityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NotUsedSecurity.class;
	}

	@Override
	public String getModelClassName() {
		return NotUsedSecurity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NotUsedSecurity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NotUsedSecurity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NotUsedSecurity, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NotUsedSecurity)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NotUsedSecurity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NotUsedSecurity, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NotUsedSecurity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NotUsedSecurity, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NotUsedSecurity, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<NotUsedSecurity, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<NotUsedSecurity, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<NotUsedSecurity, Object>>();

			attributeGetterFunctions.put(
				"notUsedSecurityId", NotUsedSecurity::getNotUsedSecurityId);
			attributeGetterFunctions.put(
				"groupId", NotUsedSecurity::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NotUsedSecurity::getCompanyId);
			attributeGetterFunctions.put("userId", NotUsedSecurity::getUserId);
			attributeGetterFunctions.put(
				"userName", NotUsedSecurity::getUserName);
			attributeGetterFunctions.put(
				"createDate", NotUsedSecurity::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NotUsedSecurity::getModifiedDate);
			attributeGetterFunctions.put(
				"realProperty", NotUsedSecurity::getRealProperty);
			attributeGetterFunctions.put(
				"notUsedLocation", NotUsedSecurity::getNotUsedLocation);
			attributeGetterFunctions.put(
				"notUsedDescription", NotUsedSecurity::getNotUsedDescription);
			attributeGetterFunctions.put(
				"notUsedCounter", NotUsedSecurity::getNotUsedCounter);
			attributeGetterFunctions.put(
				"notUsedValue", NotUsedSecurity::getNotUsedValue);
			attributeGetterFunctions.put(
				"notNetValue", NotUsedSecurity::getNotNetValue);
			attributeGetterFunctions.put(
				"osiInsolvencyId", NotUsedSecurity::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<NotUsedSecurity, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NotUsedSecurity, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<NotUsedSecurity, ?>>();

			attributeSetterBiConsumers.put(
				"notUsedSecurityId",
				(BiConsumer<NotUsedSecurity, Long>)
					NotUsedSecurity::setNotUsedSecurityId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NotUsedSecurity, Long>)NotUsedSecurity::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NotUsedSecurity, Long>)
					NotUsedSecurity::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NotUsedSecurity, Long>)NotUsedSecurity::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NotUsedSecurity, String>)
					NotUsedSecurity::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NotUsedSecurity, Date>)
					NotUsedSecurity::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NotUsedSecurity, Date>)
					NotUsedSecurity::setModifiedDate);
			attributeSetterBiConsumers.put(
				"realProperty",
				(BiConsumer<NotUsedSecurity, String>)
					NotUsedSecurity::setRealProperty);
			attributeSetterBiConsumers.put(
				"notUsedLocation",
				(BiConsumer<NotUsedSecurity, String>)
					NotUsedSecurity::setNotUsedLocation);
			attributeSetterBiConsumers.put(
				"notUsedDescription",
				(BiConsumer<NotUsedSecurity, String>)
					NotUsedSecurity::setNotUsedDescription);
			attributeSetterBiConsumers.put(
				"notUsedCounter",
				(BiConsumer<NotUsedSecurity, String>)
					NotUsedSecurity::setNotUsedCounter);
			attributeSetterBiConsumers.put(
				"notUsedValue",
				(BiConsumer<NotUsedSecurity, String>)
					NotUsedSecurity::setNotUsedValue);
			attributeSetterBiConsumers.put(
				"notNetValue",
				(BiConsumer<NotUsedSecurity, String>)
					NotUsedSecurity::setNotNetValue);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<NotUsedSecurity, Long>)
					NotUsedSecurity::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getNotUsedSecurityId() {
		return _notUsedSecurityId;
	}

	@Override
	public void setNotUsedSecurityId(long notUsedSecurityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notUsedSecurityId = notUsedSecurityId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRealProperty() {
		if (_realProperty == null) {
			return "";
		}
		else {
			return _realProperty;
		}
	}

	@Override
	public void setRealProperty(String realProperty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_realProperty = realProperty;
	}

	@JSON
	@Override
	public String getNotUsedLocation() {
		if (_notUsedLocation == null) {
			return "";
		}
		else {
			return _notUsedLocation;
		}
	}

	@Override
	public void setNotUsedLocation(String notUsedLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notUsedLocation = notUsedLocation;
	}

	@JSON
	@Override
	public String getNotUsedDescription() {
		if (_notUsedDescription == null) {
			return "";
		}
		else {
			return _notUsedDescription;
		}
	}

	@Override
	public void setNotUsedDescription(String notUsedDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notUsedDescription = notUsedDescription;
	}

	@JSON
	@Override
	public String getNotUsedCounter() {
		if (_notUsedCounter == null) {
			return "";
		}
		else {
			return _notUsedCounter;
		}
	}

	@Override
	public void setNotUsedCounter(String notUsedCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notUsedCounter = notUsedCounter;
	}

	@JSON
	@Override
	public String getNotUsedValue() {
		if (_notUsedValue == null) {
			return "";
		}
		else {
			return _notUsedValue;
		}
	}

	@Override
	public void setNotUsedValue(String notUsedValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notUsedValue = notUsedValue;
	}

	@JSON
	@Override
	public String getNotNetValue() {
		if (_notNetValue == null) {
			return "";
		}
		else {
			return _notNetValue;
		}
	}

	@Override
	public void setNotNetValue(String notNetValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notNetValue = notNetValue;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NotUsedSecurity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NotUsedSecurity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NotUsedSecurity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotUsedSecurityImpl notUsedSecurityImpl = new NotUsedSecurityImpl();

		notUsedSecurityImpl.setNotUsedSecurityId(getNotUsedSecurityId());
		notUsedSecurityImpl.setGroupId(getGroupId());
		notUsedSecurityImpl.setCompanyId(getCompanyId());
		notUsedSecurityImpl.setUserId(getUserId());
		notUsedSecurityImpl.setUserName(getUserName());
		notUsedSecurityImpl.setCreateDate(getCreateDate());
		notUsedSecurityImpl.setModifiedDate(getModifiedDate());
		notUsedSecurityImpl.setRealProperty(getRealProperty());
		notUsedSecurityImpl.setNotUsedLocation(getNotUsedLocation());
		notUsedSecurityImpl.setNotUsedDescription(getNotUsedDescription());
		notUsedSecurityImpl.setNotUsedCounter(getNotUsedCounter());
		notUsedSecurityImpl.setNotUsedValue(getNotUsedValue());
		notUsedSecurityImpl.setNotNetValue(getNotNetValue());
		notUsedSecurityImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		notUsedSecurityImpl.resetOriginalValues();

		return notUsedSecurityImpl;
	}

	@Override
	public NotUsedSecurity cloneWithOriginalValues() {
		NotUsedSecurityImpl notUsedSecurityImpl = new NotUsedSecurityImpl();

		notUsedSecurityImpl.setNotUsedSecurityId(
			this.<Long>getColumnOriginalValue("notUsedSecurityId"));
		notUsedSecurityImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		notUsedSecurityImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		notUsedSecurityImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		notUsedSecurityImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		notUsedSecurityImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		notUsedSecurityImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		notUsedSecurityImpl.setRealProperty(
			this.<String>getColumnOriginalValue("realProperty"));
		notUsedSecurityImpl.setNotUsedLocation(
			this.<String>getColumnOriginalValue("notUsedLocation"));
		notUsedSecurityImpl.setNotUsedDescription(
			this.<String>getColumnOriginalValue("notUsedDescription"));
		notUsedSecurityImpl.setNotUsedCounter(
			this.<String>getColumnOriginalValue("notUsedCounter"));
		notUsedSecurityImpl.setNotUsedValue(
			this.<String>getColumnOriginalValue("notUsedValue"));
		notUsedSecurityImpl.setNotNetValue(
			this.<String>getColumnOriginalValue("notNetValue"));
		notUsedSecurityImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return notUsedSecurityImpl;
	}

	@Override
	public int compareTo(NotUsedSecurity notUsedSecurity) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), notUsedSecurity.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NotUsedSecurity)) {
			return false;
		}

		NotUsedSecurity notUsedSecurity = (NotUsedSecurity)object;

		long primaryKey = notUsedSecurity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NotUsedSecurity> toCacheModel() {
		NotUsedSecurityCacheModel notUsedSecurityCacheModel =
			new NotUsedSecurityCacheModel();

		notUsedSecurityCacheModel.notUsedSecurityId = getNotUsedSecurityId();

		notUsedSecurityCacheModel.groupId = getGroupId();

		notUsedSecurityCacheModel.companyId = getCompanyId();

		notUsedSecurityCacheModel.userId = getUserId();

		notUsedSecurityCacheModel.userName = getUserName();

		String userName = notUsedSecurityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			notUsedSecurityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			notUsedSecurityCacheModel.createDate = createDate.getTime();
		}
		else {
			notUsedSecurityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notUsedSecurityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notUsedSecurityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notUsedSecurityCacheModel.realProperty = getRealProperty();

		String realProperty = notUsedSecurityCacheModel.realProperty;

		if ((realProperty != null) && (realProperty.length() == 0)) {
			notUsedSecurityCacheModel.realProperty = null;
		}

		notUsedSecurityCacheModel.notUsedLocation = getNotUsedLocation();

		String notUsedLocation = notUsedSecurityCacheModel.notUsedLocation;

		if ((notUsedLocation != null) && (notUsedLocation.length() == 0)) {
			notUsedSecurityCacheModel.notUsedLocation = null;
		}

		notUsedSecurityCacheModel.notUsedDescription = getNotUsedDescription();

		String notUsedDescription =
			notUsedSecurityCacheModel.notUsedDescription;

		if ((notUsedDescription != null) &&
			(notUsedDescription.length() == 0)) {

			notUsedSecurityCacheModel.notUsedDescription = null;
		}

		notUsedSecurityCacheModel.notUsedCounter = getNotUsedCounter();

		String notUsedCounter = notUsedSecurityCacheModel.notUsedCounter;

		if ((notUsedCounter != null) && (notUsedCounter.length() == 0)) {
			notUsedSecurityCacheModel.notUsedCounter = null;
		}

		notUsedSecurityCacheModel.notUsedValue = getNotUsedValue();

		String notUsedValue = notUsedSecurityCacheModel.notUsedValue;

		if ((notUsedValue != null) && (notUsedValue.length() == 0)) {
			notUsedSecurityCacheModel.notUsedValue = null;
		}

		notUsedSecurityCacheModel.notNetValue = getNotNetValue();

		String notNetValue = notUsedSecurityCacheModel.notNetValue;

		if ((notNetValue != null) && (notNetValue.length() == 0)) {
			notUsedSecurityCacheModel.notNetValue = null;
		}

		notUsedSecurityCacheModel.osiInsolvencyId = getOsiInsolvencyId();

		return notUsedSecurityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NotUsedSecurity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NotUsedSecurity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NotUsedSecurity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((NotUsedSecurity)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NotUsedSecurity>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					NotUsedSecurity.class, ModelWrapper.class);

	}

	private long _notUsedSecurityId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _realProperty;
	private String _notUsedLocation;
	private String _notUsedDescription;
	private String _notUsedCounter;
	private String _notUsedValue;
	private String _notNetValue;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<NotUsedSecurity, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NotUsedSecurity)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("notUsedSecurityId", _notUsedSecurityId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("realProperty", _realProperty);
		_columnOriginalValues.put("notUsedLocation", _notUsedLocation);
		_columnOriginalValues.put("notUsedDescription", _notUsedDescription);
		_columnOriginalValues.put("notUsedCounter", _notUsedCounter);
		_columnOriginalValues.put("notUsedValue", _notUsedValue);
		_columnOriginalValues.put("notNetValue", _notNetValue);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("notUsedSecurityId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("realProperty", 128L);

		columnBitmasks.put("notUsedLocation", 256L);

		columnBitmasks.put("notUsedDescription", 512L);

		columnBitmasks.put("notUsedCounter", 1024L);

		columnBitmasks.put("notUsedValue", 2048L);

		columnBitmasks.put("notNetValue", 4096L);

		columnBitmasks.put("osiInsolvencyId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NotUsedSecurity _escapedModel;

}