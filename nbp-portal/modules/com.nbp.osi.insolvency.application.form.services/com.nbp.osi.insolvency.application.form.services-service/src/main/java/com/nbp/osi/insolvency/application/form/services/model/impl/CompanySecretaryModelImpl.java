/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.CompanySecretary;
import com.nbp.osi.insolvency.application.form.services.model.CompanySecretaryModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CompanySecretary service. Represents a row in the &quot;nbp_osi_company_secretary&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CompanySecretaryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompanySecretaryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CompanySecretaryImpl
 * @generated
 */
@JSON(strict = true)
public class CompanySecretaryModelImpl
	extends BaseModelImpl<CompanySecretary> implements CompanySecretaryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a company secretary model instance should use the <code>CompanySecretary</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_company_secretary";

	public static final Object[][] TABLE_COLUMNS = {
		{"companySecretaryId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"secretaryName", Types.VARCHAR},
		{"secretaryDate", Types.TIMESTAMP},
		{"secretaryOccupation", Types.VARCHAR},
		{"secretaryContactNum", Types.VARCHAR},
		{"secretaryAddress", Types.VARCHAR},
		{"secretaryCounter", Types.VARCHAR}, {"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("companySecretaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("secretaryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secretaryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("secretaryOccupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secretaryContactNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secretaryAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secretaryCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_company_secretary (companySecretaryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,secretaryName VARCHAR(75) null,secretaryDate DATE null,secretaryOccupation VARCHAR(75) null,secretaryContactNum VARCHAR(75) null,secretaryAddress VARCHAR(500) null,secretaryCounter VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_company_secretary";

	public static final String ORDER_BY_JPQL =
		" ORDER BY companySecretary.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_company_secretary.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CompanySecretaryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _companySecretaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompanySecretaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _companySecretaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CompanySecretary.class;
	}

	@Override
	public String getModelClassName() {
		return CompanySecretary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CompanySecretary, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CompanySecretary, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanySecretary, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CompanySecretary)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CompanySecretary, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CompanySecretary, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CompanySecretary)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CompanySecretary, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CompanySecretary, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CompanySecretary, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CompanySecretary, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CompanySecretary, Object>>();

			attributeGetterFunctions.put(
				"companySecretaryId", CompanySecretary::getCompanySecretaryId);
			attributeGetterFunctions.put(
				"groupId", CompanySecretary::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CompanySecretary::getCompanyId);
			attributeGetterFunctions.put("userId", CompanySecretary::getUserId);
			attributeGetterFunctions.put(
				"userName", CompanySecretary::getUserName);
			attributeGetterFunctions.put(
				"createDate", CompanySecretary::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CompanySecretary::getModifiedDate);
			attributeGetterFunctions.put(
				"secretaryName", CompanySecretary::getSecretaryName);
			attributeGetterFunctions.put(
				"secretaryDate", CompanySecretary::getSecretaryDate);
			attributeGetterFunctions.put(
				"secretaryOccupation",
				CompanySecretary::getSecretaryOccupation);
			attributeGetterFunctions.put(
				"secretaryContactNum",
				CompanySecretary::getSecretaryContactNum);
			attributeGetterFunctions.put(
				"secretaryAddress", CompanySecretary::getSecretaryAddress);
			attributeGetterFunctions.put(
				"secretaryCounter", CompanySecretary::getSecretaryCounter);
			attributeGetterFunctions.put(
				"osiInsolvencyId", CompanySecretary::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CompanySecretary, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CompanySecretary, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CompanySecretary, ?>>();

			attributeSetterBiConsumers.put(
				"companySecretaryId",
				(BiConsumer<CompanySecretary, Long>)
					CompanySecretary::setCompanySecretaryId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CompanySecretary, Long>)
					CompanySecretary::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CompanySecretary, Long>)
					CompanySecretary::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CompanySecretary, Long>)
					CompanySecretary::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CompanySecretary, String>)
					CompanySecretary::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CompanySecretary, Date>)
					CompanySecretary::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CompanySecretary, Date>)
					CompanySecretary::setModifiedDate);
			attributeSetterBiConsumers.put(
				"secretaryName",
				(BiConsumer<CompanySecretary, String>)
					CompanySecretary::setSecretaryName);
			attributeSetterBiConsumers.put(
				"secretaryDate",
				(BiConsumer<CompanySecretary, Date>)
					CompanySecretary::setSecretaryDate);
			attributeSetterBiConsumers.put(
				"secretaryOccupation",
				(BiConsumer<CompanySecretary, String>)
					CompanySecretary::setSecretaryOccupation);
			attributeSetterBiConsumers.put(
				"secretaryContactNum",
				(BiConsumer<CompanySecretary, String>)
					CompanySecretary::setSecretaryContactNum);
			attributeSetterBiConsumers.put(
				"secretaryAddress",
				(BiConsumer<CompanySecretary, String>)
					CompanySecretary::setSecretaryAddress);
			attributeSetterBiConsumers.put(
				"secretaryCounter",
				(BiConsumer<CompanySecretary, String>)
					CompanySecretary::setSecretaryCounter);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<CompanySecretary, Long>)
					CompanySecretary::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCompanySecretaryId() {
		return _companySecretaryId;
	}

	@Override
	public void setCompanySecretaryId(long companySecretaryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companySecretaryId = companySecretaryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSecretaryName() {
		if (_secretaryName == null) {
			return "";
		}
		else {
			return _secretaryName;
		}
	}

	@Override
	public void setSecretaryName(String secretaryName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secretaryName = secretaryName;
	}

	@JSON
	@Override
	public Date getSecretaryDate() {
		return _secretaryDate;
	}

	@Override
	public void setSecretaryDate(Date secretaryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secretaryDate = secretaryDate;
	}

	@JSON
	@Override
	public String getSecretaryOccupation() {
		if (_secretaryOccupation == null) {
			return "";
		}
		else {
			return _secretaryOccupation;
		}
	}

	@Override
	public void setSecretaryOccupation(String secretaryOccupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secretaryOccupation = secretaryOccupation;
	}

	@JSON
	@Override
	public String getSecretaryContactNum() {
		if (_secretaryContactNum == null) {
			return "";
		}
		else {
			return _secretaryContactNum;
		}
	}

	@Override
	public void setSecretaryContactNum(String secretaryContactNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secretaryContactNum = secretaryContactNum;
	}

	@JSON
	@Override
	public String getSecretaryAddress() {
		if (_secretaryAddress == null) {
			return "";
		}
		else {
			return _secretaryAddress;
		}
	}

	@Override
	public void setSecretaryAddress(String secretaryAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secretaryAddress = secretaryAddress;
	}

	@JSON
	@Override
	public String getSecretaryCounter() {
		if (_secretaryCounter == null) {
			return "";
		}
		else {
			return _secretaryCounter;
		}
	}

	@Override
	public void setSecretaryCounter(String secretaryCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secretaryCounter = secretaryCounter;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CompanySecretary.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CompanySecretary toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CompanySecretary>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompanySecretaryImpl companySecretaryImpl = new CompanySecretaryImpl();

		companySecretaryImpl.setCompanySecretaryId(getCompanySecretaryId());
		companySecretaryImpl.setGroupId(getGroupId());
		companySecretaryImpl.setCompanyId(getCompanyId());
		companySecretaryImpl.setUserId(getUserId());
		companySecretaryImpl.setUserName(getUserName());
		companySecretaryImpl.setCreateDate(getCreateDate());
		companySecretaryImpl.setModifiedDate(getModifiedDate());
		companySecretaryImpl.setSecretaryName(getSecretaryName());
		companySecretaryImpl.setSecretaryDate(getSecretaryDate());
		companySecretaryImpl.setSecretaryOccupation(getSecretaryOccupation());
		companySecretaryImpl.setSecretaryContactNum(getSecretaryContactNum());
		companySecretaryImpl.setSecretaryAddress(getSecretaryAddress());
		companySecretaryImpl.setSecretaryCounter(getSecretaryCounter());
		companySecretaryImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		companySecretaryImpl.resetOriginalValues();

		return companySecretaryImpl;
	}

	@Override
	public CompanySecretary cloneWithOriginalValues() {
		CompanySecretaryImpl companySecretaryImpl = new CompanySecretaryImpl();

		companySecretaryImpl.setCompanySecretaryId(
			this.<Long>getColumnOriginalValue("companySecretaryId"));
		companySecretaryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		companySecretaryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		companySecretaryImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		companySecretaryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		companySecretaryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		companySecretaryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		companySecretaryImpl.setSecretaryName(
			this.<String>getColumnOriginalValue("secretaryName"));
		companySecretaryImpl.setSecretaryDate(
			this.<Date>getColumnOriginalValue("secretaryDate"));
		companySecretaryImpl.setSecretaryOccupation(
			this.<String>getColumnOriginalValue("secretaryOccupation"));
		companySecretaryImpl.setSecretaryContactNum(
			this.<String>getColumnOriginalValue("secretaryContactNum"));
		companySecretaryImpl.setSecretaryAddress(
			this.<String>getColumnOriginalValue("secretaryAddress"));
		companySecretaryImpl.setSecretaryCounter(
			this.<String>getColumnOriginalValue("secretaryCounter"));
		companySecretaryImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return companySecretaryImpl;
	}

	@Override
	public int compareTo(CompanySecretary companySecretary) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), companySecretary.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CompanySecretary)) {
			return false;
		}

		CompanySecretary companySecretary = (CompanySecretary)object;

		long primaryKey = companySecretary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CompanySecretary> toCacheModel() {
		CompanySecretaryCacheModel companySecretaryCacheModel =
			new CompanySecretaryCacheModel();

		companySecretaryCacheModel.companySecretaryId = getCompanySecretaryId();

		companySecretaryCacheModel.groupId = getGroupId();

		companySecretaryCacheModel.companyId = getCompanyId();

		companySecretaryCacheModel.userId = getUserId();

		companySecretaryCacheModel.userName = getUserName();

		String userName = companySecretaryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			companySecretaryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			companySecretaryCacheModel.createDate = createDate.getTime();
		}
		else {
			companySecretaryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			companySecretaryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			companySecretaryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		companySecretaryCacheModel.secretaryName = getSecretaryName();

		String secretaryName = companySecretaryCacheModel.secretaryName;

		if ((secretaryName != null) && (secretaryName.length() == 0)) {
			companySecretaryCacheModel.secretaryName = null;
		}

		Date secretaryDate = getSecretaryDate();

		if (secretaryDate != null) {
			companySecretaryCacheModel.secretaryDate = secretaryDate.getTime();
		}
		else {
			companySecretaryCacheModel.secretaryDate = Long.MIN_VALUE;
		}

		companySecretaryCacheModel.secretaryOccupation =
			getSecretaryOccupation();

		String secretaryOccupation =
			companySecretaryCacheModel.secretaryOccupation;

		if ((secretaryOccupation != null) &&
			(secretaryOccupation.length() == 0)) {

			companySecretaryCacheModel.secretaryOccupation = null;
		}

		companySecretaryCacheModel.secretaryContactNum =
			getSecretaryContactNum();

		String secretaryContactNum =
			companySecretaryCacheModel.secretaryContactNum;

		if ((secretaryContactNum != null) &&
			(secretaryContactNum.length() == 0)) {

			companySecretaryCacheModel.secretaryContactNum = null;
		}

		companySecretaryCacheModel.secretaryAddress = getSecretaryAddress();

		String secretaryAddress = companySecretaryCacheModel.secretaryAddress;

		if ((secretaryAddress != null) && (secretaryAddress.length() == 0)) {
			companySecretaryCacheModel.secretaryAddress = null;
		}

		companySecretaryCacheModel.secretaryCounter = getSecretaryCounter();

		String secretaryCounter = companySecretaryCacheModel.secretaryCounter;

		if ((secretaryCounter != null) && (secretaryCounter.length() == 0)) {
			companySecretaryCacheModel.secretaryCounter = null;
		}

		companySecretaryCacheModel.osiInsolvencyId = getOsiInsolvencyId();

		return companySecretaryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CompanySecretary, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CompanySecretary, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanySecretary, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CompanySecretary)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CompanySecretary>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CompanySecretary.class, ModelWrapper.class);

	}

	private long _companySecretaryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _secretaryName;
	private Date _secretaryDate;
	private String _secretaryOccupation;
	private String _secretaryContactNum;
	private String _secretaryAddress;
	private String _secretaryCounter;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<CompanySecretary, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CompanySecretary)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("companySecretaryId", _companySecretaryId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("secretaryName", _secretaryName);
		_columnOriginalValues.put("secretaryDate", _secretaryDate);
		_columnOriginalValues.put("secretaryOccupation", _secretaryOccupation);
		_columnOriginalValues.put("secretaryContactNum", _secretaryContactNum);
		_columnOriginalValues.put("secretaryAddress", _secretaryAddress);
		_columnOriginalValues.put("secretaryCounter", _secretaryCounter);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("companySecretaryId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("secretaryName", 128L);

		columnBitmasks.put("secretaryDate", 256L);

		columnBitmasks.put("secretaryOccupation", 512L);

		columnBitmasks.put("secretaryContactNum", 1024L);

		columnBitmasks.put("secretaryAddress", 2048L);

		columnBitmasks.put("secretaryCounter", 4096L);

		columnBitmasks.put("osiInsolvencyId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CompanySecretary _escapedModel;

}