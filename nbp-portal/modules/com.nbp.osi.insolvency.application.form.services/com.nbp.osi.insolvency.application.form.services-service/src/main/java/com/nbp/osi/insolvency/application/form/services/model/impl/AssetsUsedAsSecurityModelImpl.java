/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.AssetsUsedAsSecurity;
import com.nbp.osi.insolvency.application.form.services.model.AssetsUsedAsSecurityModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AssetsUsedAsSecurity service. Represents a row in the &quot;nbp_osi_used_as_security&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AssetsUsedAsSecurityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetsUsedAsSecurityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssetsUsedAsSecurityImpl
 * @generated
 */
@JSON(strict = true)
public class AssetsUsedAsSecurityModelImpl
	extends BaseModelImpl<AssetsUsedAsSecurity>
	implements AssetsUsedAsSecurityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a assets used as security model instance should use the <code>AssetsUsedAsSecurity</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_used_as_security";

	public static final Object[][] TABLE_COLUMNS = {
		{"assetsUsedAsSecurityId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"assetSecurity", Types.VARCHAR},
		{"assetSecurityHolder", Types.VARCHAR}, {"assetDetails", Types.VARCHAR},
		{"assetValue", Types.VARCHAR}, {"assetLiability", Types.VARCHAR},
		{"assetNetValue", Types.VARCHAR}, {"assetCounter", Types.VARCHAR},
		{"comTotalAssetUsedSecurity", Types.VARCHAR},
		{"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("assetsUsedAsSecurityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("assetSecurity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetSecurityHolder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetLiability", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetNetValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assetCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comTotalAssetUsedSecurity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_used_as_security (assetsUsedAsSecurityId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,assetSecurity VARCHAR(75) null,assetSecurityHolder VARCHAR(75) null,assetDetails VARCHAR(75) null,assetValue VARCHAR(75) null,assetLiability VARCHAR(75) null,assetNetValue VARCHAR(75) null,assetCounter VARCHAR(75) null,comTotalAssetUsedSecurity VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_used_as_security";

	public static final String ORDER_BY_JPQL =
		" ORDER BY assetsUsedAsSecurity.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_used_as_security.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AssetsUsedAsSecurityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _assetsUsedAsSecurityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAssetsUsedAsSecurityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _assetsUsedAsSecurityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssetsUsedAsSecurity.class;
	}

	@Override
	public String getModelClassName() {
		return AssetsUsedAsSecurity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AssetsUsedAsSecurity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AssetsUsedAsSecurity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AssetsUsedAsSecurity, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AssetsUsedAsSecurity)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AssetsUsedAsSecurity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AssetsUsedAsSecurity, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AssetsUsedAsSecurity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AssetsUsedAsSecurity, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AssetsUsedAsSecurity, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AssetsUsedAsSecurity, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AssetsUsedAsSecurity, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AssetsUsedAsSecurity, Object>>();

			attributeGetterFunctions.put(
				"assetsUsedAsSecurityId",
				AssetsUsedAsSecurity::getAssetsUsedAsSecurityId);
			attributeGetterFunctions.put(
				"groupId", AssetsUsedAsSecurity::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AssetsUsedAsSecurity::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AssetsUsedAsSecurity::getUserId);
			attributeGetterFunctions.put(
				"userName", AssetsUsedAsSecurity::getUserName);
			attributeGetterFunctions.put(
				"createDate", AssetsUsedAsSecurity::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AssetsUsedAsSecurity::getModifiedDate);
			attributeGetterFunctions.put(
				"assetSecurity", AssetsUsedAsSecurity::getAssetSecurity);
			attributeGetterFunctions.put(
				"assetSecurityHolder",
				AssetsUsedAsSecurity::getAssetSecurityHolder);
			attributeGetterFunctions.put(
				"assetDetails", AssetsUsedAsSecurity::getAssetDetails);
			attributeGetterFunctions.put(
				"assetValue", AssetsUsedAsSecurity::getAssetValue);
			attributeGetterFunctions.put(
				"assetLiability", AssetsUsedAsSecurity::getAssetLiability);
			attributeGetterFunctions.put(
				"assetNetValue", AssetsUsedAsSecurity::getAssetNetValue);
			attributeGetterFunctions.put(
				"assetCounter", AssetsUsedAsSecurity::getAssetCounter);
			attributeGetterFunctions.put(
				"comTotalAssetUsedSecurity",
				AssetsUsedAsSecurity::getComTotalAssetUsedSecurity);
			attributeGetterFunctions.put(
				"osiInsolvencyId", AssetsUsedAsSecurity::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AssetsUsedAsSecurity, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AssetsUsedAsSecurity, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AssetsUsedAsSecurity, ?>>();

			attributeSetterBiConsumers.put(
				"assetsUsedAsSecurityId",
				(BiConsumer<AssetsUsedAsSecurity, Long>)
					AssetsUsedAsSecurity::setAssetsUsedAsSecurityId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AssetsUsedAsSecurity, Long>)
					AssetsUsedAsSecurity::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AssetsUsedAsSecurity, Long>)
					AssetsUsedAsSecurity::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AssetsUsedAsSecurity, Long>)
					AssetsUsedAsSecurity::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AssetsUsedAsSecurity, Date>)
					AssetsUsedAsSecurity::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AssetsUsedAsSecurity, Date>)
					AssetsUsedAsSecurity::setModifiedDate);
			attributeSetterBiConsumers.put(
				"assetSecurity",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setAssetSecurity);
			attributeSetterBiConsumers.put(
				"assetSecurityHolder",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setAssetSecurityHolder);
			attributeSetterBiConsumers.put(
				"assetDetails",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setAssetDetails);
			attributeSetterBiConsumers.put(
				"assetValue",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setAssetValue);
			attributeSetterBiConsumers.put(
				"assetLiability",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setAssetLiability);
			attributeSetterBiConsumers.put(
				"assetNetValue",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setAssetNetValue);
			attributeSetterBiConsumers.put(
				"assetCounter",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setAssetCounter);
			attributeSetterBiConsumers.put(
				"comTotalAssetUsedSecurity",
				(BiConsumer<AssetsUsedAsSecurity, String>)
					AssetsUsedAsSecurity::setComTotalAssetUsedSecurity);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<AssetsUsedAsSecurity, Long>)
					AssetsUsedAsSecurity::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAssetsUsedAsSecurityId() {
		return _assetsUsedAsSecurityId;
	}

	@Override
	public void setAssetsUsedAsSecurityId(long assetsUsedAsSecurityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetsUsedAsSecurityId = assetsUsedAsSecurityId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAssetSecurity() {
		if (_assetSecurity == null) {
			return "";
		}
		else {
			return _assetSecurity;
		}
	}

	@Override
	public void setAssetSecurity(String assetSecurity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetSecurity = assetSecurity;
	}

	@JSON
	@Override
	public String getAssetSecurityHolder() {
		if (_assetSecurityHolder == null) {
			return "";
		}
		else {
			return _assetSecurityHolder;
		}
	}

	@Override
	public void setAssetSecurityHolder(String assetSecurityHolder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetSecurityHolder = assetSecurityHolder;
	}

	@JSON
	@Override
	public String getAssetDetails() {
		if (_assetDetails == null) {
			return "";
		}
		else {
			return _assetDetails;
		}
	}

	@Override
	public void setAssetDetails(String assetDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetDetails = assetDetails;
	}

	@JSON
	@Override
	public String getAssetValue() {
		if (_assetValue == null) {
			return "";
		}
		else {
			return _assetValue;
		}
	}

	@Override
	public void setAssetValue(String assetValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetValue = assetValue;
	}

	@JSON
	@Override
	public String getAssetLiability() {
		if (_assetLiability == null) {
			return "";
		}
		else {
			return _assetLiability;
		}
	}

	@Override
	public void setAssetLiability(String assetLiability) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetLiability = assetLiability;
	}

	@JSON
	@Override
	public String getAssetNetValue() {
		if (_assetNetValue == null) {
			return "";
		}
		else {
			return _assetNetValue;
		}
	}

	@Override
	public void setAssetNetValue(String assetNetValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetNetValue = assetNetValue;
	}

	@JSON
	@Override
	public String getAssetCounter() {
		if (_assetCounter == null) {
			return "";
		}
		else {
			return _assetCounter;
		}
	}

	@Override
	public void setAssetCounter(String assetCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetCounter = assetCounter;
	}

	@JSON
	@Override
	public String getComTotalAssetUsedSecurity() {
		if (_comTotalAssetUsedSecurity == null) {
			return "";
		}
		else {
			return _comTotalAssetUsedSecurity;
		}
	}

	@Override
	public void setComTotalAssetUsedSecurity(String comTotalAssetUsedSecurity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comTotalAssetUsedSecurity = comTotalAssetUsedSecurity;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AssetsUsedAsSecurity.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssetsUsedAsSecurity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AssetsUsedAsSecurity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetsUsedAsSecurityImpl assetsUsedAsSecurityImpl =
			new AssetsUsedAsSecurityImpl();

		assetsUsedAsSecurityImpl.setAssetsUsedAsSecurityId(
			getAssetsUsedAsSecurityId());
		assetsUsedAsSecurityImpl.setGroupId(getGroupId());
		assetsUsedAsSecurityImpl.setCompanyId(getCompanyId());
		assetsUsedAsSecurityImpl.setUserId(getUserId());
		assetsUsedAsSecurityImpl.setUserName(getUserName());
		assetsUsedAsSecurityImpl.setCreateDate(getCreateDate());
		assetsUsedAsSecurityImpl.setModifiedDate(getModifiedDate());
		assetsUsedAsSecurityImpl.setAssetSecurity(getAssetSecurity());
		assetsUsedAsSecurityImpl.setAssetSecurityHolder(
			getAssetSecurityHolder());
		assetsUsedAsSecurityImpl.setAssetDetails(getAssetDetails());
		assetsUsedAsSecurityImpl.setAssetValue(getAssetValue());
		assetsUsedAsSecurityImpl.setAssetLiability(getAssetLiability());
		assetsUsedAsSecurityImpl.setAssetNetValue(getAssetNetValue());
		assetsUsedAsSecurityImpl.setAssetCounter(getAssetCounter());
		assetsUsedAsSecurityImpl.setComTotalAssetUsedSecurity(
			getComTotalAssetUsedSecurity());
		assetsUsedAsSecurityImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		assetsUsedAsSecurityImpl.resetOriginalValues();

		return assetsUsedAsSecurityImpl;
	}

	@Override
	public AssetsUsedAsSecurity cloneWithOriginalValues() {
		AssetsUsedAsSecurityImpl assetsUsedAsSecurityImpl =
			new AssetsUsedAsSecurityImpl();

		assetsUsedAsSecurityImpl.setAssetsUsedAsSecurityId(
			this.<Long>getColumnOriginalValue("assetsUsedAsSecurityId"));
		assetsUsedAsSecurityImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		assetsUsedAsSecurityImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		assetsUsedAsSecurityImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		assetsUsedAsSecurityImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		assetsUsedAsSecurityImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		assetsUsedAsSecurityImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		assetsUsedAsSecurityImpl.setAssetSecurity(
			this.<String>getColumnOriginalValue("assetSecurity"));
		assetsUsedAsSecurityImpl.setAssetSecurityHolder(
			this.<String>getColumnOriginalValue("assetSecurityHolder"));
		assetsUsedAsSecurityImpl.setAssetDetails(
			this.<String>getColumnOriginalValue("assetDetails"));
		assetsUsedAsSecurityImpl.setAssetValue(
			this.<String>getColumnOriginalValue("assetValue"));
		assetsUsedAsSecurityImpl.setAssetLiability(
			this.<String>getColumnOriginalValue("assetLiability"));
		assetsUsedAsSecurityImpl.setAssetNetValue(
			this.<String>getColumnOriginalValue("assetNetValue"));
		assetsUsedAsSecurityImpl.setAssetCounter(
			this.<String>getColumnOriginalValue("assetCounter"));
		assetsUsedAsSecurityImpl.setComTotalAssetUsedSecurity(
			this.<String>getColumnOriginalValue("comTotalAssetUsedSecurity"));
		assetsUsedAsSecurityImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return assetsUsedAsSecurityImpl;
	}

	@Override
	public int compareTo(AssetsUsedAsSecurity assetsUsedAsSecurity) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), assetsUsedAsSecurity.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AssetsUsedAsSecurity)) {
			return false;
		}

		AssetsUsedAsSecurity assetsUsedAsSecurity =
			(AssetsUsedAsSecurity)object;

		long primaryKey = assetsUsedAsSecurity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AssetsUsedAsSecurity> toCacheModel() {
		AssetsUsedAsSecurityCacheModel assetsUsedAsSecurityCacheModel =
			new AssetsUsedAsSecurityCacheModel();

		assetsUsedAsSecurityCacheModel.assetsUsedAsSecurityId =
			getAssetsUsedAsSecurityId();

		assetsUsedAsSecurityCacheModel.groupId = getGroupId();

		assetsUsedAsSecurityCacheModel.companyId = getCompanyId();

		assetsUsedAsSecurityCacheModel.userId = getUserId();

		assetsUsedAsSecurityCacheModel.userName = getUserName();

		String userName = assetsUsedAsSecurityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			assetsUsedAsSecurityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			assetsUsedAsSecurityCacheModel.createDate = createDate.getTime();
		}
		else {
			assetsUsedAsSecurityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			assetsUsedAsSecurityCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			assetsUsedAsSecurityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		assetsUsedAsSecurityCacheModel.assetSecurity = getAssetSecurity();

		String assetSecurity = assetsUsedAsSecurityCacheModel.assetSecurity;

		if ((assetSecurity != null) && (assetSecurity.length() == 0)) {
			assetsUsedAsSecurityCacheModel.assetSecurity = null;
		}

		assetsUsedAsSecurityCacheModel.assetSecurityHolder =
			getAssetSecurityHolder();

		String assetSecurityHolder =
			assetsUsedAsSecurityCacheModel.assetSecurityHolder;

		if ((assetSecurityHolder != null) &&
			(assetSecurityHolder.length() == 0)) {

			assetsUsedAsSecurityCacheModel.assetSecurityHolder = null;
		}

		assetsUsedAsSecurityCacheModel.assetDetails = getAssetDetails();

		String assetDetails = assetsUsedAsSecurityCacheModel.assetDetails;

		if ((assetDetails != null) && (assetDetails.length() == 0)) {
			assetsUsedAsSecurityCacheModel.assetDetails = null;
		}

		assetsUsedAsSecurityCacheModel.assetValue = getAssetValue();

		String assetValue = assetsUsedAsSecurityCacheModel.assetValue;

		if ((assetValue != null) && (assetValue.length() == 0)) {
			assetsUsedAsSecurityCacheModel.assetValue = null;
		}

		assetsUsedAsSecurityCacheModel.assetLiability = getAssetLiability();

		String assetLiability = assetsUsedAsSecurityCacheModel.assetLiability;

		if ((assetLiability != null) && (assetLiability.length() == 0)) {
			assetsUsedAsSecurityCacheModel.assetLiability = null;
		}

		assetsUsedAsSecurityCacheModel.assetNetValue = getAssetNetValue();

		String assetNetValue = assetsUsedAsSecurityCacheModel.assetNetValue;

		if ((assetNetValue != null) && (assetNetValue.length() == 0)) {
			assetsUsedAsSecurityCacheModel.assetNetValue = null;
		}

		assetsUsedAsSecurityCacheModel.assetCounter = getAssetCounter();

		String assetCounter = assetsUsedAsSecurityCacheModel.assetCounter;

		if ((assetCounter != null) && (assetCounter.length() == 0)) {
			assetsUsedAsSecurityCacheModel.assetCounter = null;
		}

		assetsUsedAsSecurityCacheModel.comTotalAssetUsedSecurity =
			getComTotalAssetUsedSecurity();

		String comTotalAssetUsedSecurity =
			assetsUsedAsSecurityCacheModel.comTotalAssetUsedSecurity;

		if ((comTotalAssetUsedSecurity != null) &&
			(comTotalAssetUsedSecurity.length() == 0)) {

			assetsUsedAsSecurityCacheModel.comTotalAssetUsedSecurity = null;
		}

		assetsUsedAsSecurityCacheModel.osiInsolvencyId = getOsiInsolvencyId();

		return assetsUsedAsSecurityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AssetsUsedAsSecurity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AssetsUsedAsSecurity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AssetsUsedAsSecurity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AssetsUsedAsSecurity)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AssetsUsedAsSecurity>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AssetsUsedAsSecurity.class, ModelWrapper.class);

	}

	private long _assetsUsedAsSecurityId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _assetSecurity;
	private String _assetSecurityHolder;
	private String _assetDetails;
	private String _assetValue;
	private String _assetLiability;
	private String _assetNetValue;
	private String _assetCounter;
	private String _comTotalAssetUsedSecurity;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<AssetsUsedAsSecurity, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AssetsUsedAsSecurity)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"assetsUsedAsSecurityId", _assetsUsedAsSecurityId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("assetSecurity", _assetSecurity);
		_columnOriginalValues.put("assetSecurityHolder", _assetSecurityHolder);
		_columnOriginalValues.put("assetDetails", _assetDetails);
		_columnOriginalValues.put("assetValue", _assetValue);
		_columnOriginalValues.put("assetLiability", _assetLiability);
		_columnOriginalValues.put("assetNetValue", _assetNetValue);
		_columnOriginalValues.put("assetCounter", _assetCounter);
		_columnOriginalValues.put(
			"comTotalAssetUsedSecurity", _comTotalAssetUsedSecurity);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("assetsUsedAsSecurityId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("assetSecurity", 128L);

		columnBitmasks.put("assetSecurityHolder", 256L);

		columnBitmasks.put("assetDetails", 512L);

		columnBitmasks.put("assetValue", 1024L);

		columnBitmasks.put("assetLiability", 2048L);

		columnBitmasks.put("assetNetValue", 4096L);

		columnBitmasks.put("assetCounter", 8192L);

		columnBitmasks.put("comTotalAssetUsedSecurity", 16384L);

		columnBitmasks.put("osiInsolvencyId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AssetsUsedAsSecurity _escapedModel;

}