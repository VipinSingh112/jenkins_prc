/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.CompanyFinancialPosition;
import com.nbp.osi.insolvency.application.form.services.model.CompanyFinancialPositionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CompanyFinancialPosition service. Represents a row in the &quot;nbp_osi_comp_financial_pos&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CompanyFinancialPositionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompanyFinancialPositionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CompanyFinancialPositionImpl
 * @generated
 */
@JSON(strict = true)
public class CompanyFinancialPositionModelImpl
	extends BaseModelImpl<CompanyFinancialPosition>
	implements CompanyFinancialPositionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a company financial position model instance should use the <code>CompanyFinancialPosition</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_comp_financial_pos";

	public static final Object[][] TABLE_COLUMNS = {
		{"companyFinancialPositionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"companySecured", Types.VARCHAR},
		{"companyUnsecured", Types.VARCHAR}, {"companyAmount", Types.VARCHAR},
		{"companyDeficit", Types.VARCHAR}, {"companyNetValue", Types.VARCHAR},
		{"companyAssetValue", Types.VARCHAR},
		{"companyDisposableAsset", Types.VARCHAR},
		{"companySurplus", Types.VARCHAR}, {"companySummary", Types.VARCHAR},
		{"companyProposal", Types.VARCHAR},
		{"companyTrusteeResponse", Types.VARCHAR},
		{"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("companyFinancialPositionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("companySecured", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyUnsecured", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyDeficit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyNetValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyAssetValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyDisposableAsset", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companySurplus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companySummary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyProposal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyTrusteeResponse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_comp_financial_pos (companyFinancialPositionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companySecured VARCHAR(75) null,companyUnsecured VARCHAR(75) null,companyAmount VARCHAR(75) null,companyDeficit VARCHAR(75) null,companyNetValue VARCHAR(75) null,companyAssetValue VARCHAR(75) null,companyDisposableAsset VARCHAR(75) null,companySurplus VARCHAR(75) null,companySummary VARCHAR(75) null,companyProposal VARCHAR(75) null,companyTrusteeResponse VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_comp_financial_pos";

	public static final String ORDER_BY_JPQL =
		" ORDER BY companyFinancialPosition.companyFinancialPositionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_comp_financial_pos.companyFinancialPositionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYFINANCIALPOSITIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CompanyFinancialPositionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _companyFinancialPositionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompanyFinancialPositionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _companyFinancialPositionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CompanyFinancialPosition.class;
	}

	@Override
	public String getModelClassName() {
		return CompanyFinancialPosition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CompanyFinancialPosition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CompanyFinancialPosition, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanyFinancialPosition, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CompanyFinancialPosition)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CompanyFinancialPosition, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CompanyFinancialPosition, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CompanyFinancialPosition)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CompanyFinancialPosition, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CompanyFinancialPosition, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CompanyFinancialPosition, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CompanyFinancialPosition, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CompanyFinancialPosition, Object>>();

			attributeGetterFunctions.put(
				"companyFinancialPositionId",
				CompanyFinancialPosition::getCompanyFinancialPositionId);
			attributeGetterFunctions.put(
				"groupId", CompanyFinancialPosition::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CompanyFinancialPosition::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CompanyFinancialPosition::getUserId);
			attributeGetterFunctions.put(
				"userName", CompanyFinancialPosition::getUserName);
			attributeGetterFunctions.put(
				"createDate", CompanyFinancialPosition::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CompanyFinancialPosition::getModifiedDate);
			attributeGetterFunctions.put(
				"companySecured", CompanyFinancialPosition::getCompanySecured);
			attributeGetterFunctions.put(
				"companyUnsecured",
				CompanyFinancialPosition::getCompanyUnsecured);
			attributeGetterFunctions.put(
				"companyAmount", CompanyFinancialPosition::getCompanyAmount);
			attributeGetterFunctions.put(
				"companyDeficit", CompanyFinancialPosition::getCompanyDeficit);
			attributeGetterFunctions.put(
				"companyNetValue",
				CompanyFinancialPosition::getCompanyNetValue);
			attributeGetterFunctions.put(
				"companyAssetValue",
				CompanyFinancialPosition::getCompanyAssetValue);
			attributeGetterFunctions.put(
				"companyDisposableAsset",
				CompanyFinancialPosition::getCompanyDisposableAsset);
			attributeGetterFunctions.put(
				"companySurplus", CompanyFinancialPosition::getCompanySurplus);
			attributeGetterFunctions.put(
				"companySummary", CompanyFinancialPosition::getCompanySummary);
			attributeGetterFunctions.put(
				"companyProposal",
				CompanyFinancialPosition::getCompanyProposal);
			attributeGetterFunctions.put(
				"companyTrusteeResponse",
				CompanyFinancialPosition::getCompanyTrusteeResponse);
			attributeGetterFunctions.put(
				"osiInsolvencyId",
				CompanyFinancialPosition::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CompanyFinancialPosition, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CompanyFinancialPosition, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CompanyFinancialPosition, ?>>();

			attributeSetterBiConsumers.put(
				"companyFinancialPositionId",
				(BiConsumer<CompanyFinancialPosition, Long>)
					CompanyFinancialPosition::setCompanyFinancialPositionId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CompanyFinancialPosition, Long>)
					CompanyFinancialPosition::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CompanyFinancialPosition, Long>)
					CompanyFinancialPosition::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CompanyFinancialPosition, Long>)
					CompanyFinancialPosition::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CompanyFinancialPosition, Date>)
					CompanyFinancialPosition::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CompanyFinancialPosition, Date>)
					CompanyFinancialPosition::setModifiedDate);
			attributeSetterBiConsumers.put(
				"companySecured",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanySecured);
			attributeSetterBiConsumers.put(
				"companyUnsecured",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanyUnsecured);
			attributeSetterBiConsumers.put(
				"companyAmount",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanyAmount);
			attributeSetterBiConsumers.put(
				"companyDeficit",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanyDeficit);
			attributeSetterBiConsumers.put(
				"companyNetValue",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanyNetValue);
			attributeSetterBiConsumers.put(
				"companyAssetValue",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanyAssetValue);
			attributeSetterBiConsumers.put(
				"companyDisposableAsset",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanyDisposableAsset);
			attributeSetterBiConsumers.put(
				"companySurplus",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanySurplus);
			attributeSetterBiConsumers.put(
				"companySummary",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanySummary);
			attributeSetterBiConsumers.put(
				"companyProposal",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanyProposal);
			attributeSetterBiConsumers.put(
				"companyTrusteeResponse",
				(BiConsumer<CompanyFinancialPosition, String>)
					CompanyFinancialPosition::setCompanyTrusteeResponse);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<CompanyFinancialPosition, Long>)
					CompanyFinancialPosition::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCompanyFinancialPositionId() {
		return _companyFinancialPositionId;
	}

	@Override
	public void setCompanyFinancialPositionId(long companyFinancialPositionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyFinancialPositionId = companyFinancialPositionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCompanySecured() {
		if (_companySecured == null) {
			return "";
		}
		else {
			return _companySecured;
		}
	}

	@Override
	public void setCompanySecured(String companySecured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companySecured = companySecured;
	}

	@JSON
	@Override
	public String getCompanyUnsecured() {
		if (_companyUnsecured == null) {
			return "";
		}
		else {
			return _companyUnsecured;
		}
	}

	@Override
	public void setCompanyUnsecured(String companyUnsecured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyUnsecured = companyUnsecured;
	}

	@JSON
	@Override
	public String getCompanyAmount() {
		if (_companyAmount == null) {
			return "";
		}
		else {
			return _companyAmount;
		}
	}

	@Override
	public void setCompanyAmount(String companyAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyAmount = companyAmount;
	}

	@JSON
	@Override
	public String getCompanyDeficit() {
		if (_companyDeficit == null) {
			return "";
		}
		else {
			return _companyDeficit;
		}
	}

	@Override
	public void setCompanyDeficit(String companyDeficit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyDeficit = companyDeficit;
	}

	@JSON
	@Override
	public String getCompanyNetValue() {
		if (_companyNetValue == null) {
			return "";
		}
		else {
			return _companyNetValue;
		}
	}

	@Override
	public void setCompanyNetValue(String companyNetValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyNetValue = companyNetValue;
	}

	@JSON
	@Override
	public String getCompanyAssetValue() {
		if (_companyAssetValue == null) {
			return "";
		}
		else {
			return _companyAssetValue;
		}
	}

	@Override
	public void setCompanyAssetValue(String companyAssetValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyAssetValue = companyAssetValue;
	}

	@JSON
	@Override
	public String getCompanyDisposableAsset() {
		if (_companyDisposableAsset == null) {
			return "";
		}
		else {
			return _companyDisposableAsset;
		}
	}

	@Override
	public void setCompanyDisposableAsset(String companyDisposableAsset) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyDisposableAsset = companyDisposableAsset;
	}

	@JSON
	@Override
	public String getCompanySurplus() {
		if (_companySurplus == null) {
			return "";
		}
		else {
			return _companySurplus;
		}
	}

	@Override
	public void setCompanySurplus(String companySurplus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companySurplus = companySurplus;
	}

	@JSON
	@Override
	public String getCompanySummary() {
		if (_companySummary == null) {
			return "";
		}
		else {
			return _companySummary;
		}
	}

	@Override
	public void setCompanySummary(String companySummary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companySummary = companySummary;
	}

	@JSON
	@Override
	public String getCompanyProposal() {
		if (_companyProposal == null) {
			return "";
		}
		else {
			return _companyProposal;
		}
	}

	@Override
	public void setCompanyProposal(String companyProposal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyProposal = companyProposal;
	}

	@JSON
	@Override
	public String getCompanyTrusteeResponse() {
		if (_companyTrusteeResponse == null) {
			return "";
		}
		else {
			return _companyTrusteeResponse;
		}
	}

	@Override
	public void setCompanyTrusteeResponse(String companyTrusteeResponse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyTrusteeResponse = companyTrusteeResponse;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CompanyFinancialPosition.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CompanyFinancialPosition toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CompanyFinancialPosition>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompanyFinancialPositionImpl companyFinancialPositionImpl =
			new CompanyFinancialPositionImpl();

		companyFinancialPositionImpl.setCompanyFinancialPositionId(
			getCompanyFinancialPositionId());
		companyFinancialPositionImpl.setGroupId(getGroupId());
		companyFinancialPositionImpl.setCompanyId(getCompanyId());
		companyFinancialPositionImpl.setUserId(getUserId());
		companyFinancialPositionImpl.setUserName(getUserName());
		companyFinancialPositionImpl.setCreateDate(getCreateDate());
		companyFinancialPositionImpl.setModifiedDate(getModifiedDate());
		companyFinancialPositionImpl.setCompanySecured(getCompanySecured());
		companyFinancialPositionImpl.setCompanyUnsecured(getCompanyUnsecured());
		companyFinancialPositionImpl.setCompanyAmount(getCompanyAmount());
		companyFinancialPositionImpl.setCompanyDeficit(getCompanyDeficit());
		companyFinancialPositionImpl.setCompanyNetValue(getCompanyNetValue());
		companyFinancialPositionImpl.setCompanyAssetValue(
			getCompanyAssetValue());
		companyFinancialPositionImpl.setCompanyDisposableAsset(
			getCompanyDisposableAsset());
		companyFinancialPositionImpl.setCompanySurplus(getCompanySurplus());
		companyFinancialPositionImpl.setCompanySummary(getCompanySummary());
		companyFinancialPositionImpl.setCompanyProposal(getCompanyProposal());
		companyFinancialPositionImpl.setCompanyTrusteeResponse(
			getCompanyTrusteeResponse());
		companyFinancialPositionImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		companyFinancialPositionImpl.resetOriginalValues();

		return companyFinancialPositionImpl;
	}

	@Override
	public CompanyFinancialPosition cloneWithOriginalValues() {
		CompanyFinancialPositionImpl companyFinancialPositionImpl =
			new CompanyFinancialPositionImpl();

		companyFinancialPositionImpl.setCompanyFinancialPositionId(
			this.<Long>getColumnOriginalValue("companyFinancialPositionId"));
		companyFinancialPositionImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		companyFinancialPositionImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		companyFinancialPositionImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		companyFinancialPositionImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		companyFinancialPositionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		companyFinancialPositionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		companyFinancialPositionImpl.setCompanySecured(
			this.<String>getColumnOriginalValue("companySecured"));
		companyFinancialPositionImpl.setCompanyUnsecured(
			this.<String>getColumnOriginalValue("companyUnsecured"));
		companyFinancialPositionImpl.setCompanyAmount(
			this.<String>getColumnOriginalValue("companyAmount"));
		companyFinancialPositionImpl.setCompanyDeficit(
			this.<String>getColumnOriginalValue("companyDeficit"));
		companyFinancialPositionImpl.setCompanyNetValue(
			this.<String>getColumnOriginalValue("companyNetValue"));
		companyFinancialPositionImpl.setCompanyAssetValue(
			this.<String>getColumnOriginalValue("companyAssetValue"));
		companyFinancialPositionImpl.setCompanyDisposableAsset(
			this.<String>getColumnOriginalValue("companyDisposableAsset"));
		companyFinancialPositionImpl.setCompanySurplus(
			this.<String>getColumnOriginalValue("companySurplus"));
		companyFinancialPositionImpl.setCompanySummary(
			this.<String>getColumnOriginalValue("companySummary"));
		companyFinancialPositionImpl.setCompanyProposal(
			this.<String>getColumnOriginalValue("companyProposal"));
		companyFinancialPositionImpl.setCompanyTrusteeResponse(
			this.<String>getColumnOriginalValue("companyTrusteeResponse"));
		companyFinancialPositionImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return companyFinancialPositionImpl;
	}

	@Override
	public int compareTo(CompanyFinancialPosition companyFinancialPosition) {
		long primaryKey = companyFinancialPosition.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CompanyFinancialPosition)) {
			return false;
		}

		CompanyFinancialPosition companyFinancialPosition =
			(CompanyFinancialPosition)object;

		long primaryKey = companyFinancialPosition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CompanyFinancialPosition> toCacheModel() {
		CompanyFinancialPositionCacheModel companyFinancialPositionCacheModel =
			new CompanyFinancialPositionCacheModel();

		companyFinancialPositionCacheModel.companyFinancialPositionId =
			getCompanyFinancialPositionId();

		companyFinancialPositionCacheModel.groupId = getGroupId();

		companyFinancialPositionCacheModel.companyId = getCompanyId();

		companyFinancialPositionCacheModel.userId = getUserId();

		companyFinancialPositionCacheModel.userName = getUserName();

		String userName = companyFinancialPositionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			companyFinancialPositionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			companyFinancialPositionCacheModel.createDate =
				createDate.getTime();
		}
		else {
			companyFinancialPositionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			companyFinancialPositionCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			companyFinancialPositionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		companyFinancialPositionCacheModel.companySecured = getCompanySecured();

		String companySecured =
			companyFinancialPositionCacheModel.companySecured;

		if ((companySecured != null) && (companySecured.length() == 0)) {
			companyFinancialPositionCacheModel.companySecured = null;
		}

		companyFinancialPositionCacheModel.companyUnsecured =
			getCompanyUnsecured();

		String companyUnsecured =
			companyFinancialPositionCacheModel.companyUnsecured;

		if ((companyUnsecured != null) && (companyUnsecured.length() == 0)) {
			companyFinancialPositionCacheModel.companyUnsecured = null;
		}

		companyFinancialPositionCacheModel.companyAmount = getCompanyAmount();

		String companyAmount = companyFinancialPositionCacheModel.companyAmount;

		if ((companyAmount != null) && (companyAmount.length() == 0)) {
			companyFinancialPositionCacheModel.companyAmount = null;
		}

		companyFinancialPositionCacheModel.companyDeficit = getCompanyDeficit();

		String companyDeficit =
			companyFinancialPositionCacheModel.companyDeficit;

		if ((companyDeficit != null) && (companyDeficit.length() == 0)) {
			companyFinancialPositionCacheModel.companyDeficit = null;
		}

		companyFinancialPositionCacheModel.companyNetValue =
			getCompanyNetValue();

		String companyNetValue =
			companyFinancialPositionCacheModel.companyNetValue;

		if ((companyNetValue != null) && (companyNetValue.length() == 0)) {
			companyFinancialPositionCacheModel.companyNetValue = null;
		}

		companyFinancialPositionCacheModel.companyAssetValue =
			getCompanyAssetValue();

		String companyAssetValue =
			companyFinancialPositionCacheModel.companyAssetValue;

		if ((companyAssetValue != null) && (companyAssetValue.length() == 0)) {
			companyFinancialPositionCacheModel.companyAssetValue = null;
		}

		companyFinancialPositionCacheModel.companyDisposableAsset =
			getCompanyDisposableAsset();

		String companyDisposableAsset =
			companyFinancialPositionCacheModel.companyDisposableAsset;

		if ((companyDisposableAsset != null) &&
			(companyDisposableAsset.length() == 0)) {

			companyFinancialPositionCacheModel.companyDisposableAsset = null;
		}

		companyFinancialPositionCacheModel.companySurplus = getCompanySurplus();

		String companySurplus =
			companyFinancialPositionCacheModel.companySurplus;

		if ((companySurplus != null) && (companySurplus.length() == 0)) {
			companyFinancialPositionCacheModel.companySurplus = null;
		}

		companyFinancialPositionCacheModel.companySummary = getCompanySummary();

		String companySummary =
			companyFinancialPositionCacheModel.companySummary;

		if ((companySummary != null) && (companySummary.length() == 0)) {
			companyFinancialPositionCacheModel.companySummary = null;
		}

		companyFinancialPositionCacheModel.companyProposal =
			getCompanyProposal();

		String companyProposal =
			companyFinancialPositionCacheModel.companyProposal;

		if ((companyProposal != null) && (companyProposal.length() == 0)) {
			companyFinancialPositionCacheModel.companyProposal = null;
		}

		companyFinancialPositionCacheModel.companyTrusteeResponse =
			getCompanyTrusteeResponse();

		String companyTrusteeResponse =
			companyFinancialPositionCacheModel.companyTrusteeResponse;

		if ((companyTrusteeResponse != null) &&
			(companyTrusteeResponse.length() == 0)) {

			companyFinancialPositionCacheModel.companyTrusteeResponse = null;
		}

		companyFinancialPositionCacheModel.osiInsolvencyId =
			getOsiInsolvencyId();

		return companyFinancialPositionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CompanyFinancialPosition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CompanyFinancialPosition, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanyFinancialPosition, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CompanyFinancialPosition)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CompanyFinancialPosition>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CompanyFinancialPosition.class, ModelWrapper.class);

	}

	private long _companyFinancialPositionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _companySecured;
	private String _companyUnsecured;
	private String _companyAmount;
	private String _companyDeficit;
	private String _companyNetValue;
	private String _companyAssetValue;
	private String _companyDisposableAsset;
	private String _companySurplus;
	private String _companySummary;
	private String _companyProposal;
	private String _companyTrusteeResponse;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<CompanyFinancialPosition, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CompanyFinancialPosition)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"companyFinancialPositionId", _companyFinancialPositionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("companySecured", _companySecured);
		_columnOriginalValues.put("companyUnsecured", _companyUnsecured);
		_columnOriginalValues.put("companyAmount", _companyAmount);
		_columnOriginalValues.put("companyDeficit", _companyDeficit);
		_columnOriginalValues.put("companyNetValue", _companyNetValue);
		_columnOriginalValues.put("companyAssetValue", _companyAssetValue);
		_columnOriginalValues.put(
			"companyDisposableAsset", _companyDisposableAsset);
		_columnOriginalValues.put("companySurplus", _companySurplus);
		_columnOriginalValues.put("companySummary", _companySummary);
		_columnOriginalValues.put("companyProposal", _companyProposal);
		_columnOriginalValues.put(
			"companyTrusteeResponse", _companyTrusteeResponse);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("companyFinancialPositionId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("companySecured", 128L);

		columnBitmasks.put("companyUnsecured", 256L);

		columnBitmasks.put("companyAmount", 512L);

		columnBitmasks.put("companyDeficit", 1024L);

		columnBitmasks.put("companyNetValue", 2048L);

		columnBitmasks.put("companyAssetValue", 4096L);

		columnBitmasks.put("companyDisposableAsset", 8192L);

		columnBitmasks.put("companySurplus", 16384L);

		columnBitmasks.put("companySummary", 32768L);

		columnBitmasks.put("companyProposal", 65536L);

		columnBitmasks.put("companyTrusteeResponse", 131072L);

		columnBitmasks.put("osiInsolvencyId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CompanyFinancialPosition _escapedModel;

}