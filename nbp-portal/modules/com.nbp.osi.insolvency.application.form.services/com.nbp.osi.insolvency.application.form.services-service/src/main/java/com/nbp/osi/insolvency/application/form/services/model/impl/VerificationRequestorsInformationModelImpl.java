/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.VerificationRequestorsInformation;
import com.nbp.osi.insolvency.application.form.services.model.VerificationRequestorsInformationModel;
import com.nbp.osi.insolvency.application.form.services.service.persistence.VerificationRequestorsInformationPK;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the VerificationRequestorsInformation service. Represents a row in the &quot;nbp_osi_ver_request_detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>VerificationRequestorsInformationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VerificationRequestorsInformationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VerificationRequestorsInformationImpl
 * @generated
 */
@JSON(strict = true)
public class VerificationRequestorsInformationModelImpl
	extends BaseModelImpl<VerificationRequestorsInformation>
	implements VerificationRequestorsInformationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a verification requestors information model instance should use the <code>VerificationRequestorsInformation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_ver_request_detail";

	public static final Object[][] TABLE_COLUMNS = {
		{"requestorInformationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"verRequestorName", Types.VARCHAR},
		{"verRequestorOccupation", Types.VARCHAR},
		{"verRequestorAddress", Types.VARCHAR},
		{"verDateOfRequest", Types.TIMESTAMP},
		{"verRequestorTelNum", Types.VARCHAR},
		{"verRequestorEmail", Types.VARCHAR}, {"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("requestorInformationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verRequestorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verRequestorOccupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verRequestorAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verDateOfRequest", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verRequestorTelNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verRequestorEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_ver_request_detail (requestorInformationId LONG not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,verRequestorName VARCHAR(75) null,verRequestorOccupation VARCHAR(75) null,verRequestorAddress VARCHAR(75) null,verDateOfRequest DATE null,verRequestorTelNum VARCHAR(75) null,verRequestorEmail VARCHAR(75) null,osiInsolvencyId LONG not null,primary key (requestorInformationId, osiInsolvencyId))";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_ver_request_detail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY verificationRequestorsInformation.id.requestorInformationId ASC, verificationRequestorsInformation.id.osiInsolvencyId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_ver_request_detail.requestorInformationId ASC, nbp_osi_ver_request_detail.osiInsolvencyId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REQUESTORINFORMATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public VerificationRequestorsInformationModelImpl() {
	}

	@Override
	public VerificationRequestorsInformationPK getPrimaryKey() {
		return new VerificationRequestorsInformationPK(
			_requestorInformationId, _osiInsolvencyId);
	}

	@Override
	public void setPrimaryKey(VerificationRequestorsInformationPK primaryKey) {
		setRequestorInformationId(primaryKey.requestorInformationId);
		setOsiInsolvencyId(primaryKey.osiInsolvencyId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new VerificationRequestorsInformationPK(
			_requestorInformationId, _osiInsolvencyId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((VerificationRequestorsInformationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return VerificationRequestorsInformation.class;
	}

	@Override
	public String getModelClassName() {
		return VerificationRequestorsInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<VerificationRequestorsInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<VerificationRequestorsInformation, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VerificationRequestorsInformation, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(VerificationRequestorsInformation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<VerificationRequestorsInformation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<VerificationRequestorsInformation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(VerificationRequestorsInformation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<VerificationRequestorsInformation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<VerificationRequestorsInformation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function
		<InvocationHandler, VerificationRequestorsInformation>
			_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			VerificationRequestorsInformation.class.getClassLoader(),
			VerificationRequestorsInformation.class, ModelWrapper.class);

		try {
			Constructor<VerificationRequestorsInformation> constructor =
				(Constructor<VerificationRequestorsInformation>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<VerificationRequestorsInformation, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<VerificationRequestorsInformation, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<VerificationRequestorsInformation, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String,
					 Function<VerificationRequestorsInformation, Object>>();
		Map<String, BiConsumer<VerificationRequestorsInformation, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String,
					 BiConsumer<VerificationRequestorsInformation, ?>>();

		attributeGetterFunctions.put(
			"requestorInformationId",
			VerificationRequestorsInformation::getRequestorInformationId);
		attributeSetterBiConsumers.put(
			"requestorInformationId",
			(BiConsumer<VerificationRequestorsInformation, Long>)
				VerificationRequestorsInformation::setRequestorInformationId);
		attributeGetterFunctions.put(
			"groupId", VerificationRequestorsInformation::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<VerificationRequestorsInformation, Long>)
				VerificationRequestorsInformation::setGroupId);
		attributeGetterFunctions.put(
			"companyId", VerificationRequestorsInformation::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<VerificationRequestorsInformation, Long>)
				VerificationRequestorsInformation::setCompanyId);
		attributeGetterFunctions.put(
			"userId", VerificationRequestorsInformation::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<VerificationRequestorsInformation, Long>)
				VerificationRequestorsInformation::setUserId);
		attributeGetterFunctions.put(
			"userName", VerificationRequestorsInformation::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<VerificationRequestorsInformation, String>)
				VerificationRequestorsInformation::setUserName);
		attributeGetterFunctions.put(
			"createDate", VerificationRequestorsInformation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<VerificationRequestorsInformation, Date>)
				VerificationRequestorsInformation::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", VerificationRequestorsInformation::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<VerificationRequestorsInformation, Date>)
				VerificationRequestorsInformation::setModifiedDate);
		attributeGetterFunctions.put(
			"verRequestorName",
			VerificationRequestorsInformation::getVerRequestorName);
		attributeSetterBiConsumers.put(
			"verRequestorName",
			(BiConsumer<VerificationRequestorsInformation, String>)
				VerificationRequestorsInformation::setVerRequestorName);
		attributeGetterFunctions.put(
			"verRequestorOccupation",
			VerificationRequestorsInformation::getVerRequestorOccupation);
		attributeSetterBiConsumers.put(
			"verRequestorOccupation",
			(BiConsumer<VerificationRequestorsInformation, String>)
				VerificationRequestorsInformation::setVerRequestorOccupation);
		attributeGetterFunctions.put(
			"verRequestorAddress",
			VerificationRequestorsInformation::getVerRequestorAddress);
		attributeSetterBiConsumers.put(
			"verRequestorAddress",
			(BiConsumer<VerificationRequestorsInformation, String>)
				VerificationRequestorsInformation::setVerRequestorAddress);
		attributeGetterFunctions.put(
			"verDateOfRequest",
			VerificationRequestorsInformation::getVerDateOfRequest);
		attributeSetterBiConsumers.put(
			"verDateOfRequest",
			(BiConsumer<VerificationRequestorsInformation, Date>)
				VerificationRequestorsInformation::setVerDateOfRequest);
		attributeGetterFunctions.put(
			"verRequestorTelNum",
			VerificationRequestorsInformation::getVerRequestorTelNum);
		attributeSetterBiConsumers.put(
			"verRequestorTelNum",
			(BiConsumer<VerificationRequestorsInformation, String>)
				VerificationRequestorsInformation::setVerRequestorTelNum);
		attributeGetterFunctions.put(
			"verRequestorEmail",
			VerificationRequestorsInformation::getVerRequestorEmail);
		attributeSetterBiConsumers.put(
			"verRequestorEmail",
			(BiConsumer<VerificationRequestorsInformation, String>)
				VerificationRequestorsInformation::setVerRequestorEmail);
		attributeGetterFunctions.put(
			"osiInsolvencyId",
			VerificationRequestorsInformation::getOsiInsolvencyId);
		attributeSetterBiConsumers.put(
			"osiInsolvencyId",
			(BiConsumer<VerificationRequestorsInformation, Long>)
				VerificationRequestorsInformation::setOsiInsolvencyId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getRequestorInformationId() {
		return _requestorInformationId;
	}

	@Override
	public void setRequestorInformationId(long requestorInformationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestorInformationId = requestorInformationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getVerRequestorName() {
		if (_verRequestorName == null) {
			return "";
		}
		else {
			return _verRequestorName;
		}
	}

	@Override
	public void setVerRequestorName(String verRequestorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorName = verRequestorName;
	}

	@JSON
	@Override
	public String getVerRequestorOccupation() {
		if (_verRequestorOccupation == null) {
			return "";
		}
		else {
			return _verRequestorOccupation;
		}
	}

	@Override
	public void setVerRequestorOccupation(String verRequestorOccupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorOccupation = verRequestorOccupation;
	}

	@JSON
	@Override
	public String getVerRequestorAddress() {
		if (_verRequestorAddress == null) {
			return "";
		}
		else {
			return _verRequestorAddress;
		}
	}

	@Override
	public void setVerRequestorAddress(String verRequestorAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorAddress = verRequestorAddress;
	}

	@JSON
	@Override
	public Date getVerDateOfRequest() {
		return _verDateOfRequest;
	}

	@Override
	public void setVerDateOfRequest(Date verDateOfRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verDateOfRequest = verDateOfRequest;
	}

	@JSON
	@Override
	public String getVerRequestorTelNum() {
		if (_verRequestorTelNum == null) {
			return "";
		}
		else {
			return _verRequestorTelNum;
		}
	}

	@Override
	public void setVerRequestorTelNum(String verRequestorTelNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorTelNum = verRequestorTelNum;
	}

	@JSON
	@Override
	public String getVerRequestorEmail() {
		if (_verRequestorEmail == null) {
			return "";
		}
		else {
			return _verRequestorEmail;
		}
	}

	@Override
	public void setVerRequestorEmail(String verRequestorEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorEmail = verRequestorEmail;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public VerificationRequestorsInformation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, VerificationRequestorsInformation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VerificationRequestorsInformationImpl
			verificationRequestorsInformationImpl =
				new VerificationRequestorsInformationImpl();

		verificationRequestorsInformationImpl.setRequestorInformationId(
			getRequestorInformationId());
		verificationRequestorsInformationImpl.setGroupId(getGroupId());
		verificationRequestorsInformationImpl.setCompanyId(getCompanyId());
		verificationRequestorsInformationImpl.setUserId(getUserId());
		verificationRequestorsInformationImpl.setUserName(getUserName());
		verificationRequestorsInformationImpl.setCreateDate(getCreateDate());
		verificationRequestorsInformationImpl.setModifiedDate(
			getModifiedDate());
		verificationRequestorsInformationImpl.setVerRequestorName(
			getVerRequestorName());
		verificationRequestorsInformationImpl.setVerRequestorOccupation(
			getVerRequestorOccupation());
		verificationRequestorsInformationImpl.setVerRequestorAddress(
			getVerRequestorAddress());
		verificationRequestorsInformationImpl.setVerDateOfRequest(
			getVerDateOfRequest());
		verificationRequestorsInformationImpl.setVerRequestorTelNum(
			getVerRequestorTelNum());
		verificationRequestorsInformationImpl.setVerRequestorEmail(
			getVerRequestorEmail());
		verificationRequestorsInformationImpl.setOsiInsolvencyId(
			getOsiInsolvencyId());

		verificationRequestorsInformationImpl.resetOriginalValues();

		return verificationRequestorsInformationImpl;
	}

	@Override
	public VerificationRequestorsInformation cloneWithOriginalValues() {
		VerificationRequestorsInformationImpl
			verificationRequestorsInformationImpl =
				new VerificationRequestorsInformationImpl();

		verificationRequestorsInformationImpl.setRequestorInformationId(
			this.<Long>getColumnOriginalValue("requestorInformationId"));
		verificationRequestorsInformationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		verificationRequestorsInformationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		verificationRequestorsInformationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		verificationRequestorsInformationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		verificationRequestorsInformationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		verificationRequestorsInformationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		verificationRequestorsInformationImpl.setVerRequestorName(
			this.<String>getColumnOriginalValue("verRequestorName"));
		verificationRequestorsInformationImpl.setVerRequestorOccupation(
			this.<String>getColumnOriginalValue("verRequestorOccupation"));
		verificationRequestorsInformationImpl.setVerRequestorAddress(
			this.<String>getColumnOriginalValue("verRequestorAddress"));
		verificationRequestorsInformationImpl.setVerDateOfRequest(
			this.<Date>getColumnOriginalValue("verDateOfRequest"));
		verificationRequestorsInformationImpl.setVerRequestorTelNum(
			this.<String>getColumnOriginalValue("verRequestorTelNum"));
		verificationRequestorsInformationImpl.setVerRequestorEmail(
			this.<String>getColumnOriginalValue("verRequestorEmail"));
		verificationRequestorsInformationImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return verificationRequestorsInformationImpl;
	}

	@Override
	public int compareTo(
		VerificationRequestorsInformation verificationRequestorsInformation) {

		VerificationRequestorsInformationPK primaryKey =
			verificationRequestorsInformation.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof VerificationRequestorsInformation)) {
			return false;
		}

		VerificationRequestorsInformation verificationRequestorsInformation =
			(VerificationRequestorsInformation)object;

		VerificationRequestorsInformationPK primaryKey =
			verificationRequestorsInformation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<VerificationRequestorsInformation> toCacheModel() {
		VerificationRequestorsInformationCacheModel
			verificationRequestorsInformationCacheModel =
				new VerificationRequestorsInformationCacheModel();

		verificationRequestorsInformationCacheModel.
			verificationRequestorsInformationPK = getPrimaryKey();

		verificationRequestorsInformationCacheModel.requestorInformationId =
			getRequestorInformationId();

		verificationRequestorsInformationCacheModel.groupId = getGroupId();

		verificationRequestorsInformationCacheModel.companyId = getCompanyId();

		verificationRequestorsInformationCacheModel.userId = getUserId();

		verificationRequestorsInformationCacheModel.userName = getUserName();

		String userName = verificationRequestorsInformationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			verificationRequestorsInformationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			verificationRequestorsInformationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			verificationRequestorsInformationCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			verificationRequestorsInformationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			verificationRequestorsInformationCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		verificationRequestorsInformationCacheModel.verRequestorName =
			getVerRequestorName();

		String verRequestorName =
			verificationRequestorsInformationCacheModel.verRequestorName;

		if ((verRequestorName != null) && (verRequestorName.length() == 0)) {
			verificationRequestorsInformationCacheModel.verRequestorName = null;
		}

		verificationRequestorsInformationCacheModel.verRequestorOccupation =
			getVerRequestorOccupation();

		String verRequestorOccupation =
			verificationRequestorsInformationCacheModel.verRequestorOccupation;

		if ((verRequestorOccupation != null) &&
			(verRequestorOccupation.length() == 0)) {

			verificationRequestorsInformationCacheModel.verRequestorOccupation =
				null;
		}

		verificationRequestorsInformationCacheModel.verRequestorAddress =
			getVerRequestorAddress();

		String verRequestorAddress =
			verificationRequestorsInformationCacheModel.verRequestorAddress;

		if ((verRequestorAddress != null) &&
			(verRequestorAddress.length() == 0)) {

			verificationRequestorsInformationCacheModel.verRequestorAddress =
				null;
		}

		Date verDateOfRequest = getVerDateOfRequest();

		if (verDateOfRequest != null) {
			verificationRequestorsInformationCacheModel.verDateOfRequest =
				verDateOfRequest.getTime();
		}
		else {
			verificationRequestorsInformationCacheModel.verDateOfRequest =
				Long.MIN_VALUE;
		}

		verificationRequestorsInformationCacheModel.verRequestorTelNum =
			getVerRequestorTelNum();

		String verRequestorTelNum =
			verificationRequestorsInformationCacheModel.verRequestorTelNum;

		if ((verRequestorTelNum != null) &&
			(verRequestorTelNum.length() == 0)) {

			verificationRequestorsInformationCacheModel.verRequestorTelNum =
				null;
		}

		verificationRequestorsInformationCacheModel.verRequestorEmail =
			getVerRequestorEmail();

		String verRequestorEmail =
			verificationRequestorsInformationCacheModel.verRequestorEmail;

		if ((verRequestorEmail != null) && (verRequestorEmail.length() == 0)) {
			verificationRequestorsInformationCacheModel.verRequestorEmail =
				null;
		}

		verificationRequestorsInformationCacheModel.osiInsolvencyId =
			getOsiInsolvencyId();

		return verificationRequestorsInformationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<VerificationRequestorsInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<VerificationRequestorsInformation, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VerificationRequestorsInformation, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(VerificationRequestorsInformation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	
	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, VerificationRequestorsInformation>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _requestorInformationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _verRequestorName;
	private String _verRequestorOccupation;
	private String _verRequestorAddress;
	private Date _verDateOfRequest;
	private String _verRequestorTelNum;
	private String _verRequestorEmail;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<VerificationRequestorsInformation, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((VerificationRequestorsInformation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"requestorInformationId", _requestorInformationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("verRequestorName", _verRequestorName);
		_columnOriginalValues.put(
			"verRequestorOccupation", _verRequestorOccupation);
		_columnOriginalValues.put("verRequestorAddress", _verRequestorAddress);
		_columnOriginalValues.put("verDateOfRequest", _verDateOfRequest);
		_columnOriginalValues.put("verRequestorTelNum", _verRequestorTelNum);
		_columnOriginalValues.put("verRequestorEmail", _verRequestorEmail);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("requestorInformationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("verRequestorName", 128L);

		columnBitmasks.put("verRequestorOccupation", 256L);

		columnBitmasks.put("verRequestorAddress", 512L);

		columnBitmasks.put("verDateOfRequest", 1024L);

		columnBitmasks.put("verRequestorTelNum", 2048L);

		columnBitmasks.put("verRequestorEmail", 4096L);

		columnBitmasks.put("osiInsolvencyId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private VerificationRequestorsInformation _escapedModel;

}