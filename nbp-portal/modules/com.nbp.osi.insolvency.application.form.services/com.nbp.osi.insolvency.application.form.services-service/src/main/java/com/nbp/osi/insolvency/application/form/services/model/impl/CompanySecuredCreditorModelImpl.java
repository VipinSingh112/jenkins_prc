/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.CompanySecuredCreditor;
import com.nbp.osi.insolvency.application.form.services.model.CompanySecuredCreditorModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CompanySecuredCreditor service. Represents a row in the &quot;nbp_osi_secured_creditor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CompanySecuredCreditorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompanySecuredCreditorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CompanySecuredCreditorImpl
 * @generated
 */
@JSON(strict = true)
public class CompanySecuredCreditorModelImpl
	extends BaseModelImpl<CompanySecuredCreditor>
	implements CompanySecuredCreditorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a company secured creditor model instance should use the <code>CompanySecuredCreditor</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_secured_creditor";

	public static final Object[][] TABLE_COLUMNS = {
		{"companySecuredCreditorId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"securedCreditor", Types.VARCHAR},
		{"securedSecurity", Types.VARCHAR}, {"securedPurpose", Types.VARCHAR},
		{"securedLiabilty", Types.VARCHAR}, {"comSecurityValue", Types.VARCHAR},
		{"comSecurityCounter", Types.VARCHAR}, {"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("companySecuredCreditorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("securedCreditor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securedSecurity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securedPurpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securedLiabilty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comSecurityValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comSecurityCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_secured_creditor (companySecuredCreditorId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,securedCreditor VARCHAR(75) null,securedSecurity VARCHAR(75) null,securedPurpose VARCHAR(75) null,securedLiabilty VARCHAR(75) null,comSecurityValue VARCHAR(75) null,comSecurityCounter VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_secured_creditor";

	public static final String ORDER_BY_JPQL =
		" ORDER BY companySecuredCreditor.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_secured_creditor.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CompanySecuredCreditorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _companySecuredCreditorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompanySecuredCreditorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _companySecuredCreditorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CompanySecuredCreditor.class;
	}

	@Override
	public String getModelClassName() {
		return CompanySecuredCreditor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CompanySecuredCreditor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CompanySecuredCreditor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanySecuredCreditor, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CompanySecuredCreditor)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CompanySecuredCreditor, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CompanySecuredCreditor, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CompanySecuredCreditor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CompanySecuredCreditor, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CompanySecuredCreditor, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CompanySecuredCreditor, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CompanySecuredCreditor, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CompanySecuredCreditor, Object>>();

			attributeGetterFunctions.put(
				"companySecuredCreditorId",
				CompanySecuredCreditor::getCompanySecuredCreditorId);
			attributeGetterFunctions.put(
				"groupId", CompanySecuredCreditor::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CompanySecuredCreditor::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CompanySecuredCreditor::getUserId);
			attributeGetterFunctions.put(
				"userName", CompanySecuredCreditor::getUserName);
			attributeGetterFunctions.put(
				"createDate", CompanySecuredCreditor::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CompanySecuredCreditor::getModifiedDate);
			attributeGetterFunctions.put(
				"securedCreditor", CompanySecuredCreditor::getSecuredCreditor);
			attributeGetterFunctions.put(
				"securedSecurity", CompanySecuredCreditor::getSecuredSecurity);
			attributeGetterFunctions.put(
				"securedPurpose", CompanySecuredCreditor::getSecuredPurpose);
			attributeGetterFunctions.put(
				"securedLiabilty", CompanySecuredCreditor::getSecuredLiabilty);
			attributeGetterFunctions.put(
				"comSecurityValue",
				CompanySecuredCreditor::getComSecurityValue);
			attributeGetterFunctions.put(
				"comSecurityCounter",
				CompanySecuredCreditor::getComSecurityCounter);
			attributeGetterFunctions.put(
				"osiInsolvencyId", CompanySecuredCreditor::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CompanySecuredCreditor, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CompanySecuredCreditor, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CompanySecuredCreditor, ?>>();

			attributeSetterBiConsumers.put(
				"companySecuredCreditorId",
				(BiConsumer<CompanySecuredCreditor, Long>)
					CompanySecuredCreditor::setCompanySecuredCreditorId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CompanySecuredCreditor, Long>)
					CompanySecuredCreditor::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CompanySecuredCreditor, Long>)
					CompanySecuredCreditor::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CompanySecuredCreditor, Long>)
					CompanySecuredCreditor::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CompanySecuredCreditor, String>)
					CompanySecuredCreditor::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CompanySecuredCreditor, Date>)
					CompanySecuredCreditor::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CompanySecuredCreditor, Date>)
					CompanySecuredCreditor::setModifiedDate);
			attributeSetterBiConsumers.put(
				"securedCreditor",
				(BiConsumer<CompanySecuredCreditor, String>)
					CompanySecuredCreditor::setSecuredCreditor);
			attributeSetterBiConsumers.put(
				"securedSecurity",
				(BiConsumer<CompanySecuredCreditor, String>)
					CompanySecuredCreditor::setSecuredSecurity);
			attributeSetterBiConsumers.put(
				"securedPurpose",
				(BiConsumer<CompanySecuredCreditor, String>)
					CompanySecuredCreditor::setSecuredPurpose);
			attributeSetterBiConsumers.put(
				"securedLiabilty",
				(BiConsumer<CompanySecuredCreditor, String>)
					CompanySecuredCreditor::setSecuredLiabilty);
			attributeSetterBiConsumers.put(
				"comSecurityValue",
				(BiConsumer<CompanySecuredCreditor, String>)
					CompanySecuredCreditor::setComSecurityValue);
			attributeSetterBiConsumers.put(
				"comSecurityCounter",
				(BiConsumer<CompanySecuredCreditor, String>)
					CompanySecuredCreditor::setComSecurityCounter);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<CompanySecuredCreditor, Long>)
					CompanySecuredCreditor::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCompanySecuredCreditorId() {
		return _companySecuredCreditorId;
	}

	@Override
	public void setCompanySecuredCreditorId(long companySecuredCreditorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companySecuredCreditorId = companySecuredCreditorId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSecuredCreditor() {
		if (_securedCreditor == null) {
			return "";
		}
		else {
			return _securedCreditor;
		}
	}

	@Override
	public void setSecuredCreditor(String securedCreditor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securedCreditor = securedCreditor;
	}

	@JSON
	@Override
	public String getSecuredSecurity() {
		if (_securedSecurity == null) {
			return "";
		}
		else {
			return _securedSecurity;
		}
	}

	@Override
	public void setSecuredSecurity(String securedSecurity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securedSecurity = securedSecurity;
	}

	@JSON
	@Override
	public String getSecuredPurpose() {
		if (_securedPurpose == null) {
			return "";
		}
		else {
			return _securedPurpose;
		}
	}

	@Override
	public void setSecuredPurpose(String securedPurpose) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securedPurpose = securedPurpose;
	}

	@JSON
	@Override
	public String getSecuredLiabilty() {
		if (_securedLiabilty == null) {
			return "";
		}
		else {
			return _securedLiabilty;
		}
	}

	@Override
	public void setSecuredLiabilty(String securedLiabilty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securedLiabilty = securedLiabilty;
	}

	@JSON
	@Override
	public String getComSecurityValue() {
		if (_comSecurityValue == null) {
			return "";
		}
		else {
			return _comSecurityValue;
		}
	}

	@Override
	public void setComSecurityValue(String comSecurityValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comSecurityValue = comSecurityValue;
	}

	@JSON
	@Override
	public String getComSecurityCounter() {
		if (_comSecurityCounter == null) {
			return "";
		}
		else {
			return _comSecurityCounter;
		}
	}

	@Override
	public void setComSecurityCounter(String comSecurityCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comSecurityCounter = comSecurityCounter;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CompanySecuredCreditor.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CompanySecuredCreditor toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CompanySecuredCreditor>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompanySecuredCreditorImpl companySecuredCreditorImpl =
			new CompanySecuredCreditorImpl();

		companySecuredCreditorImpl.setCompanySecuredCreditorId(
			getCompanySecuredCreditorId());
		companySecuredCreditorImpl.setGroupId(getGroupId());
		companySecuredCreditorImpl.setCompanyId(getCompanyId());
		companySecuredCreditorImpl.setUserId(getUserId());
		companySecuredCreditorImpl.setUserName(getUserName());
		companySecuredCreditorImpl.setCreateDate(getCreateDate());
		companySecuredCreditorImpl.setModifiedDate(getModifiedDate());
		companySecuredCreditorImpl.setSecuredCreditor(getSecuredCreditor());
		companySecuredCreditorImpl.setSecuredSecurity(getSecuredSecurity());
		companySecuredCreditorImpl.setSecuredPurpose(getSecuredPurpose());
		companySecuredCreditorImpl.setSecuredLiabilty(getSecuredLiabilty());
		companySecuredCreditorImpl.setComSecurityValue(getComSecurityValue());
		companySecuredCreditorImpl.setComSecurityCounter(
			getComSecurityCounter());
		companySecuredCreditorImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		companySecuredCreditorImpl.resetOriginalValues();

		return companySecuredCreditorImpl;
	}

	@Override
	public CompanySecuredCreditor cloneWithOriginalValues() {
		CompanySecuredCreditorImpl companySecuredCreditorImpl =
			new CompanySecuredCreditorImpl();

		companySecuredCreditorImpl.setCompanySecuredCreditorId(
			this.<Long>getColumnOriginalValue("companySecuredCreditorId"));
		companySecuredCreditorImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		companySecuredCreditorImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		companySecuredCreditorImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		companySecuredCreditorImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		companySecuredCreditorImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		companySecuredCreditorImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		companySecuredCreditorImpl.setSecuredCreditor(
			this.<String>getColumnOriginalValue("securedCreditor"));
		companySecuredCreditorImpl.setSecuredSecurity(
			this.<String>getColumnOriginalValue("securedSecurity"));
		companySecuredCreditorImpl.setSecuredPurpose(
			this.<String>getColumnOriginalValue("securedPurpose"));
		companySecuredCreditorImpl.setSecuredLiabilty(
			this.<String>getColumnOriginalValue("securedLiabilty"));
		companySecuredCreditorImpl.setComSecurityValue(
			this.<String>getColumnOriginalValue("comSecurityValue"));
		companySecuredCreditorImpl.setComSecurityCounter(
			this.<String>getColumnOriginalValue("comSecurityCounter"));
		companySecuredCreditorImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return companySecuredCreditorImpl;
	}

	@Override
	public int compareTo(CompanySecuredCreditor companySecuredCreditor) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), companySecuredCreditor.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CompanySecuredCreditor)) {
			return false;
		}

		CompanySecuredCreditor companySecuredCreditor =
			(CompanySecuredCreditor)object;

		long primaryKey = companySecuredCreditor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CompanySecuredCreditor> toCacheModel() {
		CompanySecuredCreditorCacheModel companySecuredCreditorCacheModel =
			new CompanySecuredCreditorCacheModel();

		companySecuredCreditorCacheModel.companySecuredCreditorId =
			getCompanySecuredCreditorId();

		companySecuredCreditorCacheModel.groupId = getGroupId();

		companySecuredCreditorCacheModel.companyId = getCompanyId();

		companySecuredCreditorCacheModel.userId = getUserId();

		companySecuredCreditorCacheModel.userName = getUserName();

		String userName = companySecuredCreditorCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			companySecuredCreditorCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			companySecuredCreditorCacheModel.createDate = createDate.getTime();
		}
		else {
			companySecuredCreditorCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			companySecuredCreditorCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			companySecuredCreditorCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		companySecuredCreditorCacheModel.securedCreditor = getSecuredCreditor();

		String securedCreditor =
			companySecuredCreditorCacheModel.securedCreditor;

		if ((securedCreditor != null) && (securedCreditor.length() == 0)) {
			companySecuredCreditorCacheModel.securedCreditor = null;
		}

		companySecuredCreditorCacheModel.securedSecurity = getSecuredSecurity();

		String securedSecurity =
			companySecuredCreditorCacheModel.securedSecurity;

		if ((securedSecurity != null) && (securedSecurity.length() == 0)) {
			companySecuredCreditorCacheModel.securedSecurity = null;
		}

		companySecuredCreditorCacheModel.securedPurpose = getSecuredPurpose();

		String securedPurpose = companySecuredCreditorCacheModel.securedPurpose;

		if ((securedPurpose != null) && (securedPurpose.length() == 0)) {
			companySecuredCreditorCacheModel.securedPurpose = null;
		}

		companySecuredCreditorCacheModel.securedLiabilty = getSecuredLiabilty();

		String securedLiabilty =
			companySecuredCreditorCacheModel.securedLiabilty;

		if ((securedLiabilty != null) && (securedLiabilty.length() == 0)) {
			companySecuredCreditorCacheModel.securedLiabilty = null;
		}

		companySecuredCreditorCacheModel.comSecurityValue =
			getComSecurityValue();

		String comSecurityValue =
			companySecuredCreditorCacheModel.comSecurityValue;

		if ((comSecurityValue != null) && (comSecurityValue.length() == 0)) {
			companySecuredCreditorCacheModel.comSecurityValue = null;
		}

		companySecuredCreditorCacheModel.comSecurityCounter =
			getComSecurityCounter();

		String comSecurityCounter =
			companySecuredCreditorCacheModel.comSecurityCounter;

		if ((comSecurityCounter != null) &&
			(comSecurityCounter.length() == 0)) {

			companySecuredCreditorCacheModel.comSecurityCounter = null;
		}

		companySecuredCreditorCacheModel.osiInsolvencyId = getOsiInsolvencyId();

		return companySecuredCreditorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CompanySecuredCreditor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CompanySecuredCreditor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanySecuredCreditor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CompanySecuredCreditor)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CompanySecuredCreditor>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CompanySecuredCreditor.class, ModelWrapper.class);

	}

	private long _companySecuredCreditorId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _securedCreditor;
	private String _securedSecurity;
	private String _securedPurpose;
	private String _securedLiabilty;
	private String _comSecurityValue;
	private String _comSecurityCounter;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<CompanySecuredCreditor, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CompanySecuredCreditor)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"companySecuredCreditorId", _companySecuredCreditorId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("securedCreditor", _securedCreditor);
		_columnOriginalValues.put("securedSecurity", _securedSecurity);
		_columnOriginalValues.put("securedPurpose", _securedPurpose);
		_columnOriginalValues.put("securedLiabilty", _securedLiabilty);
		_columnOriginalValues.put("comSecurityValue", _comSecurityValue);
		_columnOriginalValues.put("comSecurityCounter", _comSecurityCounter);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("companySecuredCreditorId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("securedCreditor", 128L);

		columnBitmasks.put("securedSecurity", 256L);

		columnBitmasks.put("securedPurpose", 512L);

		columnBitmasks.put("securedLiabilty", 1024L);

		columnBitmasks.put("comSecurityValue", 2048L);

		columnBitmasks.put("comSecurityCounter", 4096L);

		columnBitmasks.put("osiInsolvencyId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CompanySecuredCreditor _escapedModel;

}