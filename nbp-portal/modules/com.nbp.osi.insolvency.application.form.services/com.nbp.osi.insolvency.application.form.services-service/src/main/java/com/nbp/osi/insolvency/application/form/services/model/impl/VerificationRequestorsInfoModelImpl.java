/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.VerificationRequestorsInfo;
import com.nbp.osi.insolvency.application.form.services.model.VerificationRequestorsInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the VerificationRequestorsInfo service. Represents a row in the &quot;nbp_osi_ver_request_detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>VerificationRequestorsInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VerificationRequestorsInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VerificationRequestorsInfoImpl
 * @generated
 */
@JSON(strict = true)
public class VerificationRequestorsInfoModelImpl
	extends BaseModelImpl<VerificationRequestorsInfo>
	implements VerificationRequestorsInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a verification requestors info model instance should use the <code>VerificationRequestorsInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_ver_request_detail";

	public static final Object[][] TABLE_COLUMNS = {
		{"requestorInformationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"verRequestorName", Types.VARCHAR},
		{"verRequestorLastName", Types.VARCHAR},
		{"verRequestorOccupation", Types.VARCHAR},
		{"verRequestorAddress", Types.VARCHAR},
		{"verDateOfRequest", Types.TIMESTAMP},
		{"verRequestorTelNum", Types.VARCHAR},
		{"verRequestorEmail", Types.VARCHAR}, {"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("requestorInformationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verRequestorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verRequestorLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verRequestorOccupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verRequestorAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verDateOfRequest", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verRequestorTelNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verRequestorEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_ver_request_detail (requestorInformationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,verRequestorName VARCHAR(75) null,verRequestorLastName VARCHAR(75) null,verRequestorOccupation VARCHAR(75) null,verRequestorAddress VARCHAR(500) null,verDateOfRequest DATE null,verRequestorTelNum VARCHAR(75) null,verRequestorEmail VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_ver_request_detail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY verificationRequestorsInfo.requestorInformationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_ver_request_detail.requestorInformationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REQUESTORINFORMATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public VerificationRequestorsInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requestorInformationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequestorInformationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requestorInformationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VerificationRequestorsInfo.class;
	}

	@Override
	public String getModelClassName() {
		return VerificationRequestorsInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<VerificationRequestorsInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<VerificationRequestorsInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VerificationRequestorsInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(VerificationRequestorsInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<VerificationRequestorsInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<VerificationRequestorsInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(VerificationRequestorsInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<VerificationRequestorsInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<VerificationRequestorsInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<VerificationRequestorsInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<VerificationRequestorsInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<VerificationRequestorsInfo, Object>>();

			attributeGetterFunctions.put(
				"requestorInformationId",
				VerificationRequestorsInfo::getRequestorInformationId);
			attributeGetterFunctions.put(
				"groupId", VerificationRequestorsInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", VerificationRequestorsInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", VerificationRequestorsInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", VerificationRequestorsInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", VerificationRequestorsInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", VerificationRequestorsInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"verRequestorName",
				VerificationRequestorsInfo::getVerRequestorName);
			attributeGetterFunctions.put(
				"verRequestorLastName",
				VerificationRequestorsInfo::getVerRequestorLastName);
			attributeGetterFunctions.put(
				"verRequestorOccupation",
				VerificationRequestorsInfo::getVerRequestorOccupation);
			attributeGetterFunctions.put(
				"verRequestorAddress",
				VerificationRequestorsInfo::getVerRequestorAddress);
			attributeGetterFunctions.put(
				"verDateOfRequest",
				VerificationRequestorsInfo::getVerDateOfRequest);
			attributeGetterFunctions.put(
				"verRequestorTelNum",
				VerificationRequestorsInfo::getVerRequestorTelNum);
			attributeGetterFunctions.put(
				"verRequestorEmail",
				VerificationRequestorsInfo::getVerRequestorEmail);
			attributeGetterFunctions.put(
				"osiInsolvencyId",
				VerificationRequestorsInfo::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<VerificationRequestorsInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<VerificationRequestorsInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<VerificationRequestorsInfo, ?>>();

			attributeSetterBiConsumers.put(
				"requestorInformationId",
				(BiConsumer<VerificationRequestorsInfo, Long>)
					VerificationRequestorsInfo::setRequestorInformationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<VerificationRequestorsInfo, Long>)
					VerificationRequestorsInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<VerificationRequestorsInfo, Long>)
					VerificationRequestorsInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<VerificationRequestorsInfo, Long>)
					VerificationRequestorsInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<VerificationRequestorsInfo, String>)
					VerificationRequestorsInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<VerificationRequestorsInfo, Date>)
					VerificationRequestorsInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<VerificationRequestorsInfo, Date>)
					VerificationRequestorsInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"verRequestorName",
				(BiConsumer<VerificationRequestorsInfo, String>)
					VerificationRequestorsInfo::setVerRequestorName);
			attributeSetterBiConsumers.put(
				"verRequestorLastName",
				(BiConsumer<VerificationRequestorsInfo, String>)
					VerificationRequestorsInfo::setVerRequestorLastName);
			attributeSetterBiConsumers.put(
				"verRequestorOccupation",
				(BiConsumer<VerificationRequestorsInfo, String>)
					VerificationRequestorsInfo::setVerRequestorOccupation);
			attributeSetterBiConsumers.put(
				"verRequestorAddress",
				(BiConsumer<VerificationRequestorsInfo, String>)
					VerificationRequestorsInfo::setVerRequestorAddress);
			attributeSetterBiConsumers.put(
				"verDateOfRequest",
				(BiConsumer<VerificationRequestorsInfo, Date>)
					VerificationRequestorsInfo::setVerDateOfRequest);
			attributeSetterBiConsumers.put(
				"verRequestorTelNum",
				(BiConsumer<VerificationRequestorsInfo, String>)
					VerificationRequestorsInfo::setVerRequestorTelNum);
			attributeSetterBiConsumers.put(
				"verRequestorEmail",
				(BiConsumer<VerificationRequestorsInfo, String>)
					VerificationRequestorsInfo::setVerRequestorEmail);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<VerificationRequestorsInfo, Long>)
					VerificationRequestorsInfo::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getRequestorInformationId() {
		return _requestorInformationId;
	}

	@Override
	public void setRequestorInformationId(long requestorInformationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestorInformationId = requestorInformationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getVerRequestorName() {
		if (_verRequestorName == null) {
			return "";
		}
		else {
			return _verRequestorName;
		}
	}

	@Override
	public void setVerRequestorName(String verRequestorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorName = verRequestorName;
	}

	@JSON
	@Override
	public String getVerRequestorLastName() {
		if (_verRequestorLastName == null) {
			return "";
		}
		else {
			return _verRequestorLastName;
		}
	}

	@Override
	public void setVerRequestorLastName(String verRequestorLastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorLastName = verRequestorLastName;
	}

	@JSON
	@Override
	public String getVerRequestorOccupation() {
		if (_verRequestorOccupation == null) {
			return "";
		}
		else {
			return _verRequestorOccupation;
		}
	}

	@Override
	public void setVerRequestorOccupation(String verRequestorOccupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorOccupation = verRequestorOccupation;
	}

	@JSON
	@Override
	public String getVerRequestorAddress() {
		if (_verRequestorAddress == null) {
			return "";
		}
		else {
			return _verRequestorAddress;
		}
	}

	@Override
	public void setVerRequestorAddress(String verRequestorAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorAddress = verRequestorAddress;
	}

	@JSON
	@Override
	public Date getVerDateOfRequest() {
		return _verDateOfRequest;
	}

	@Override
	public void setVerDateOfRequest(Date verDateOfRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verDateOfRequest = verDateOfRequest;
	}

	@JSON
	@Override
	public String getVerRequestorTelNum() {
		if (_verRequestorTelNum == null) {
			return "";
		}
		else {
			return _verRequestorTelNum;
		}
	}

	@Override
	public void setVerRequestorTelNum(String verRequestorTelNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorTelNum = verRequestorTelNum;
	}

	@JSON
	@Override
	public String getVerRequestorEmail() {
		if (_verRequestorEmail == null) {
			return "";
		}
		else {
			return _verRequestorEmail;
		}
	}

	@Override
	public void setVerRequestorEmail(String verRequestorEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verRequestorEmail = verRequestorEmail;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), VerificationRequestorsInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VerificationRequestorsInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, VerificationRequestorsInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VerificationRequestorsInfoImpl verificationRequestorsInfoImpl =
			new VerificationRequestorsInfoImpl();

		verificationRequestorsInfoImpl.setRequestorInformationId(
			getRequestorInformationId());
		verificationRequestorsInfoImpl.setGroupId(getGroupId());
		verificationRequestorsInfoImpl.setCompanyId(getCompanyId());
		verificationRequestorsInfoImpl.setUserId(getUserId());
		verificationRequestorsInfoImpl.setUserName(getUserName());
		verificationRequestorsInfoImpl.setCreateDate(getCreateDate());
		verificationRequestorsInfoImpl.setModifiedDate(getModifiedDate());
		verificationRequestorsInfoImpl.setVerRequestorName(
			getVerRequestorName());
		verificationRequestorsInfoImpl.setVerRequestorLastName(
			getVerRequestorLastName());
		verificationRequestorsInfoImpl.setVerRequestorOccupation(
			getVerRequestorOccupation());
		verificationRequestorsInfoImpl.setVerRequestorAddress(
			getVerRequestorAddress());
		verificationRequestorsInfoImpl.setVerDateOfRequest(
			getVerDateOfRequest());
		verificationRequestorsInfoImpl.setVerRequestorTelNum(
			getVerRequestorTelNum());
		verificationRequestorsInfoImpl.setVerRequestorEmail(
			getVerRequestorEmail());
		verificationRequestorsInfoImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		verificationRequestorsInfoImpl.resetOriginalValues();

		return verificationRequestorsInfoImpl;
	}

	@Override
	public VerificationRequestorsInfo cloneWithOriginalValues() {
		VerificationRequestorsInfoImpl verificationRequestorsInfoImpl =
			new VerificationRequestorsInfoImpl();

		verificationRequestorsInfoImpl.setRequestorInformationId(
			this.<Long>getColumnOriginalValue("requestorInformationId"));
		verificationRequestorsInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		verificationRequestorsInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		verificationRequestorsInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		verificationRequestorsInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		verificationRequestorsInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		verificationRequestorsInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		verificationRequestorsInfoImpl.setVerRequestorName(
			this.<String>getColumnOriginalValue("verRequestorName"));
		verificationRequestorsInfoImpl.setVerRequestorLastName(
			this.<String>getColumnOriginalValue("verRequestorLastName"));
		verificationRequestorsInfoImpl.setVerRequestorOccupation(
			this.<String>getColumnOriginalValue("verRequestorOccupation"));
		verificationRequestorsInfoImpl.setVerRequestorAddress(
			this.<String>getColumnOriginalValue("verRequestorAddress"));
		verificationRequestorsInfoImpl.setVerDateOfRequest(
			this.<Date>getColumnOriginalValue("verDateOfRequest"));
		verificationRequestorsInfoImpl.setVerRequestorTelNum(
			this.<String>getColumnOriginalValue("verRequestorTelNum"));
		verificationRequestorsInfoImpl.setVerRequestorEmail(
			this.<String>getColumnOriginalValue("verRequestorEmail"));
		verificationRequestorsInfoImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return verificationRequestorsInfoImpl;
	}

	@Override
	public int compareTo(
		VerificationRequestorsInfo verificationRequestorsInfo) {

		long primaryKey = verificationRequestorsInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof VerificationRequestorsInfo)) {
			return false;
		}

		VerificationRequestorsInfo verificationRequestorsInfo =
			(VerificationRequestorsInfo)object;

		long primaryKey = verificationRequestorsInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<VerificationRequestorsInfo> toCacheModel() {
		VerificationRequestorsInfoCacheModel
			verificationRequestorsInfoCacheModel =
				new VerificationRequestorsInfoCacheModel();

		verificationRequestorsInfoCacheModel.requestorInformationId =
			getRequestorInformationId();

		verificationRequestorsInfoCacheModel.groupId = getGroupId();

		verificationRequestorsInfoCacheModel.companyId = getCompanyId();

		verificationRequestorsInfoCacheModel.userId = getUserId();

		verificationRequestorsInfoCacheModel.userName = getUserName();

		String userName = verificationRequestorsInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			verificationRequestorsInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			verificationRequestorsInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			verificationRequestorsInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			verificationRequestorsInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			verificationRequestorsInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		verificationRequestorsInfoCacheModel.verRequestorName =
			getVerRequestorName();

		String verRequestorName =
			verificationRequestorsInfoCacheModel.verRequestorName;

		if ((verRequestorName != null) && (verRequestorName.length() == 0)) {
			verificationRequestorsInfoCacheModel.verRequestorName = null;
		}

		verificationRequestorsInfoCacheModel.verRequestorLastName =
			getVerRequestorLastName();

		String verRequestorLastName =
			verificationRequestorsInfoCacheModel.verRequestorLastName;

		if ((verRequestorLastName != null) &&
			(verRequestorLastName.length() == 0)) {

			verificationRequestorsInfoCacheModel.verRequestorLastName = null;
		}

		verificationRequestorsInfoCacheModel.verRequestorOccupation =
			getVerRequestorOccupation();

		String verRequestorOccupation =
			verificationRequestorsInfoCacheModel.verRequestorOccupation;

		if ((verRequestorOccupation != null) &&
			(verRequestorOccupation.length() == 0)) {

			verificationRequestorsInfoCacheModel.verRequestorOccupation = null;
		}

		verificationRequestorsInfoCacheModel.verRequestorAddress =
			getVerRequestorAddress();

		String verRequestorAddress =
			verificationRequestorsInfoCacheModel.verRequestorAddress;

		if ((verRequestorAddress != null) &&
			(verRequestorAddress.length() == 0)) {

			verificationRequestorsInfoCacheModel.verRequestorAddress = null;
		}

		Date verDateOfRequest = getVerDateOfRequest();

		if (verDateOfRequest != null) {
			verificationRequestorsInfoCacheModel.verDateOfRequest =
				verDateOfRequest.getTime();
		}
		else {
			verificationRequestorsInfoCacheModel.verDateOfRequest =
				Long.MIN_VALUE;
		}

		verificationRequestorsInfoCacheModel.verRequestorTelNum =
			getVerRequestorTelNum();

		String verRequestorTelNum =
			verificationRequestorsInfoCacheModel.verRequestorTelNum;

		if ((verRequestorTelNum != null) &&
			(verRequestorTelNum.length() == 0)) {

			verificationRequestorsInfoCacheModel.verRequestorTelNum = null;
		}

		verificationRequestorsInfoCacheModel.verRequestorEmail =
			getVerRequestorEmail();

		String verRequestorEmail =
			verificationRequestorsInfoCacheModel.verRequestorEmail;

		if ((verRequestorEmail != null) && (verRequestorEmail.length() == 0)) {
			verificationRequestorsInfoCacheModel.verRequestorEmail = null;
		}

		verificationRequestorsInfoCacheModel.osiInsolvencyId =
			getOsiInsolvencyId();

		return verificationRequestorsInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<VerificationRequestorsInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<VerificationRequestorsInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VerificationRequestorsInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(VerificationRequestorsInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, VerificationRequestorsInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						VerificationRequestorsInfo.class, ModelWrapper.class);

	}

	private long _requestorInformationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _verRequestorName;
	private String _verRequestorLastName;
	private String _verRequestorOccupation;
	private String _verRequestorAddress;
	private Date _verDateOfRequest;
	private String _verRequestorTelNum;
	private String _verRequestorEmail;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<VerificationRequestorsInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((VerificationRequestorsInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"requestorInformationId", _requestorInformationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("verRequestorName", _verRequestorName);
		_columnOriginalValues.put(
			"verRequestorLastName", _verRequestorLastName);
		_columnOriginalValues.put(
			"verRequestorOccupation", _verRequestorOccupation);
		_columnOriginalValues.put("verRequestorAddress", _verRequestorAddress);
		_columnOriginalValues.put("verDateOfRequest", _verDateOfRequest);
		_columnOriginalValues.put("verRequestorTelNum", _verRequestorTelNum);
		_columnOriginalValues.put("verRequestorEmail", _verRequestorEmail);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("requestorInformationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("verRequestorName", 128L);

		columnBitmasks.put("verRequestorLastName", 256L);

		columnBitmasks.put("verRequestorOccupation", 512L);

		columnBitmasks.put("verRequestorAddress", 1024L);

		columnBitmasks.put("verDateOfRequest", 2048L);

		columnBitmasks.put("verRequestorTelNum", 4096L);

		columnBitmasks.put("verRequestorEmail", 8192L);

		columnBitmasks.put("osiInsolvencyId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private VerificationRequestorsInfo _escapedModel;

}