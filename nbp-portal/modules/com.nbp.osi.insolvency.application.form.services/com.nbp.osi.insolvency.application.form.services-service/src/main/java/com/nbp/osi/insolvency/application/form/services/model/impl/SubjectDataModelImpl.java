/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.SubjectData;
import com.nbp.osi.insolvency.application.form.services.model.SubjectDataModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SubjectData service. Represents a row in the &quot;nbp_osi_subject_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SubjectDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubjectDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubjectDataImpl
 * @generated
 */
@JSON(strict = true)
public class SubjectDataModelImpl
	extends BaseModelImpl<SubjectData> implements SubjectDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a subject data model instance should use the <code>SubjectData</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_subject_data";

	public static final Object[][] TABLE_COLUMNS = {
		{"subjectDataId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"verSubjectNameTitle", Types.VARCHAR},
		{"verSubjectFirstName", Types.VARCHAR},
		{"verSubjectMiddleName", Types.VARCHAR},
		{"verSubjectSurname", Types.VARCHAR},
		{"verSubjectDob", Types.TIMESTAMP},
		{"verPresentAddress", Types.VARCHAR},
		{"verPlaceOfBirth", Types.VARCHAR}, {"verSubjectTrn", Types.VARCHAR},
		{"verSubjectTelNum", Types.VARCHAR}, {"verSubjectEmail", Types.VARCHAR},
		{"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("subjectDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verSubjectNameTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verSubjectFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verSubjectMiddleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verSubjectSurname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verSubjectDob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verPresentAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verPlaceOfBirth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verSubjectTrn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verSubjectTelNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verSubjectEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_subject_data (subjectDataId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,verSubjectNameTitle VARCHAR(75) null,verSubjectFirstName VARCHAR(75) null,verSubjectMiddleName VARCHAR(75) null,verSubjectSurname VARCHAR(75) null,verSubjectDob DATE null,verPresentAddress VARCHAR(500) null,verPlaceOfBirth VARCHAR(500) null,verSubjectTrn VARCHAR(75) null,verSubjectTelNum VARCHAR(75) null,verSubjectEmail VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_subject_data";

	public static final String ORDER_BY_JPQL =
		" ORDER BY subjectData.subjectDataId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_subject_data.subjectDataId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SUBJECTDATAID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SubjectDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _subjectDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubjectDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _subjectDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SubjectData.class;
	}

	@Override
	public String getModelClassName() {
		return SubjectData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SubjectData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SubjectData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SubjectData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SubjectData)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SubjectData, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SubjectData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SubjectData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SubjectData, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SubjectData, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<SubjectData, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<SubjectData, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<SubjectData, Object>>();

			attributeGetterFunctions.put(
				"subjectDataId", SubjectData::getSubjectDataId);
			attributeGetterFunctions.put("groupId", SubjectData::getGroupId);
			attributeGetterFunctions.put(
				"companyId", SubjectData::getCompanyId);
			attributeGetterFunctions.put("userId", SubjectData::getUserId);
			attributeGetterFunctions.put("userName", SubjectData::getUserName);
			attributeGetterFunctions.put(
				"createDate", SubjectData::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", SubjectData::getModifiedDate);
			attributeGetterFunctions.put(
				"verSubjectNameTitle", SubjectData::getVerSubjectNameTitle);
			attributeGetterFunctions.put(
				"verSubjectFirstName", SubjectData::getVerSubjectFirstName);
			attributeGetterFunctions.put(
				"verSubjectMiddleName", SubjectData::getVerSubjectMiddleName);
			attributeGetterFunctions.put(
				"verSubjectSurname", SubjectData::getVerSubjectSurname);
			attributeGetterFunctions.put(
				"verSubjectDob", SubjectData::getVerSubjectDob);
			attributeGetterFunctions.put(
				"verPresentAddress", SubjectData::getVerPresentAddress);
			attributeGetterFunctions.put(
				"verPlaceOfBirth", SubjectData::getVerPlaceOfBirth);
			attributeGetterFunctions.put(
				"verSubjectTrn", SubjectData::getVerSubjectTrn);
			attributeGetterFunctions.put(
				"verSubjectTelNum", SubjectData::getVerSubjectTelNum);
			attributeGetterFunctions.put(
				"verSubjectEmail", SubjectData::getVerSubjectEmail);
			attributeGetterFunctions.put(
				"osiInsolvencyId", SubjectData::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<SubjectData, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SubjectData, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<SubjectData, ?>>();

			attributeSetterBiConsumers.put(
				"subjectDataId",
				(BiConsumer<SubjectData, Long>)SubjectData::setSubjectDataId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SubjectData, Long>)SubjectData::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SubjectData, Long>)SubjectData::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SubjectData, Long>)SubjectData::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SubjectData, String>)SubjectData::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SubjectData, Date>)SubjectData::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SubjectData, Date>)SubjectData::setModifiedDate);
			attributeSetterBiConsumers.put(
				"verSubjectNameTitle",
				(BiConsumer<SubjectData, String>)
					SubjectData::setVerSubjectNameTitle);
			attributeSetterBiConsumers.put(
				"verSubjectFirstName",
				(BiConsumer<SubjectData, String>)
					SubjectData::setVerSubjectFirstName);
			attributeSetterBiConsumers.put(
				"verSubjectMiddleName",
				(BiConsumer<SubjectData, String>)
					SubjectData::setVerSubjectMiddleName);
			attributeSetterBiConsumers.put(
				"verSubjectSurname",
				(BiConsumer<SubjectData, String>)
					SubjectData::setVerSubjectSurname);
			attributeSetterBiConsumers.put(
				"verSubjectDob",
				(BiConsumer<SubjectData, Date>)SubjectData::setVerSubjectDob);
			attributeSetterBiConsumers.put(
				"verPresentAddress",
				(BiConsumer<SubjectData, String>)
					SubjectData::setVerPresentAddress);
			attributeSetterBiConsumers.put(
				"verPlaceOfBirth",
				(BiConsumer<SubjectData, String>)
					SubjectData::setVerPlaceOfBirth);
			attributeSetterBiConsumers.put(
				"verSubjectTrn",
				(BiConsumer<SubjectData, String>)SubjectData::setVerSubjectTrn);
			attributeSetterBiConsumers.put(
				"verSubjectTelNum",
				(BiConsumer<SubjectData, String>)
					SubjectData::setVerSubjectTelNum);
			attributeSetterBiConsumers.put(
				"verSubjectEmail",
				(BiConsumer<SubjectData, String>)
					SubjectData::setVerSubjectEmail);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<SubjectData, Long>)SubjectData::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSubjectDataId() {
		return _subjectDataId;
	}

	@Override
	public void setSubjectDataId(long subjectDataId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subjectDataId = subjectDataId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getVerSubjectNameTitle() {
		if (_verSubjectNameTitle == null) {
			return "";
		}
		else {
			return _verSubjectNameTitle;
		}
	}

	@Override
	public void setVerSubjectNameTitle(String verSubjectNameTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verSubjectNameTitle = verSubjectNameTitle;
	}

	@JSON
	@Override
	public String getVerSubjectFirstName() {
		if (_verSubjectFirstName == null) {
			return "";
		}
		else {
			return _verSubjectFirstName;
		}
	}

	@Override
	public void setVerSubjectFirstName(String verSubjectFirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verSubjectFirstName = verSubjectFirstName;
	}

	@JSON
	@Override
	public String getVerSubjectMiddleName() {
		if (_verSubjectMiddleName == null) {
			return "";
		}
		else {
			return _verSubjectMiddleName;
		}
	}

	@Override
	public void setVerSubjectMiddleName(String verSubjectMiddleName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verSubjectMiddleName = verSubjectMiddleName;
	}

	@JSON
	@Override
	public String getVerSubjectSurname() {
		if (_verSubjectSurname == null) {
			return "";
		}
		else {
			return _verSubjectSurname;
		}
	}

	@Override
	public void setVerSubjectSurname(String verSubjectSurname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verSubjectSurname = verSubjectSurname;
	}

	@JSON
	@Override
	public Date getVerSubjectDob() {
		return _verSubjectDob;
	}

	@Override
	public void setVerSubjectDob(Date verSubjectDob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verSubjectDob = verSubjectDob;
	}

	@JSON
	@Override
	public String getVerPresentAddress() {
		if (_verPresentAddress == null) {
			return "";
		}
		else {
			return _verPresentAddress;
		}
	}

	@Override
	public void setVerPresentAddress(String verPresentAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verPresentAddress = verPresentAddress;
	}

	@JSON
	@Override
	public String getVerPlaceOfBirth() {
		if (_verPlaceOfBirth == null) {
			return "";
		}
		else {
			return _verPlaceOfBirth;
		}
	}

	@Override
	public void setVerPlaceOfBirth(String verPlaceOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verPlaceOfBirth = verPlaceOfBirth;
	}

	@JSON
	@Override
	public String getVerSubjectTrn() {
		if (_verSubjectTrn == null) {
			return "";
		}
		else {
			return _verSubjectTrn;
		}
	}

	@Override
	public void setVerSubjectTrn(String verSubjectTrn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verSubjectTrn = verSubjectTrn;
	}

	@JSON
	@Override
	public String getVerSubjectTelNum() {
		if (_verSubjectTelNum == null) {
			return "";
		}
		else {
			return _verSubjectTelNum;
		}
	}

	@Override
	public void setVerSubjectTelNum(String verSubjectTelNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verSubjectTelNum = verSubjectTelNum;
	}

	@JSON
	@Override
	public String getVerSubjectEmail() {
		if (_verSubjectEmail == null) {
			return "";
		}
		else {
			return _verSubjectEmail;
		}
	}

	@Override
	public void setVerSubjectEmail(String verSubjectEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verSubjectEmail = verSubjectEmail;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SubjectData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SubjectData toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SubjectData>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubjectDataImpl subjectDataImpl = new SubjectDataImpl();

		subjectDataImpl.setSubjectDataId(getSubjectDataId());
		subjectDataImpl.setGroupId(getGroupId());
		subjectDataImpl.setCompanyId(getCompanyId());
		subjectDataImpl.setUserId(getUserId());
		subjectDataImpl.setUserName(getUserName());
		subjectDataImpl.setCreateDate(getCreateDate());
		subjectDataImpl.setModifiedDate(getModifiedDate());
		subjectDataImpl.setVerSubjectNameTitle(getVerSubjectNameTitle());
		subjectDataImpl.setVerSubjectFirstName(getVerSubjectFirstName());
		subjectDataImpl.setVerSubjectMiddleName(getVerSubjectMiddleName());
		subjectDataImpl.setVerSubjectSurname(getVerSubjectSurname());
		subjectDataImpl.setVerSubjectDob(getVerSubjectDob());
		subjectDataImpl.setVerPresentAddress(getVerPresentAddress());
		subjectDataImpl.setVerPlaceOfBirth(getVerPlaceOfBirth());
		subjectDataImpl.setVerSubjectTrn(getVerSubjectTrn());
		subjectDataImpl.setVerSubjectTelNum(getVerSubjectTelNum());
		subjectDataImpl.setVerSubjectEmail(getVerSubjectEmail());
		subjectDataImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		subjectDataImpl.resetOriginalValues();

		return subjectDataImpl;
	}

	@Override
	public SubjectData cloneWithOriginalValues() {
		SubjectDataImpl subjectDataImpl = new SubjectDataImpl();

		subjectDataImpl.setSubjectDataId(
			this.<Long>getColumnOriginalValue("subjectDataId"));
		subjectDataImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		subjectDataImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		subjectDataImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		subjectDataImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		subjectDataImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		subjectDataImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		subjectDataImpl.setVerSubjectNameTitle(
			this.<String>getColumnOriginalValue("verSubjectNameTitle"));
		subjectDataImpl.setVerSubjectFirstName(
			this.<String>getColumnOriginalValue("verSubjectFirstName"));
		subjectDataImpl.setVerSubjectMiddleName(
			this.<String>getColumnOriginalValue("verSubjectMiddleName"));
		subjectDataImpl.setVerSubjectSurname(
			this.<String>getColumnOriginalValue("verSubjectSurname"));
		subjectDataImpl.setVerSubjectDob(
			this.<Date>getColumnOriginalValue("verSubjectDob"));
		subjectDataImpl.setVerPresentAddress(
			this.<String>getColumnOriginalValue("verPresentAddress"));
		subjectDataImpl.setVerPlaceOfBirth(
			this.<String>getColumnOriginalValue("verPlaceOfBirth"));
		subjectDataImpl.setVerSubjectTrn(
			this.<String>getColumnOriginalValue("verSubjectTrn"));
		subjectDataImpl.setVerSubjectTelNum(
			this.<String>getColumnOriginalValue("verSubjectTelNum"));
		subjectDataImpl.setVerSubjectEmail(
			this.<String>getColumnOriginalValue("verSubjectEmail"));
		subjectDataImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return subjectDataImpl;
	}

	@Override
	public int compareTo(SubjectData subjectData) {
		long primaryKey = subjectData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SubjectData)) {
			return false;
		}

		SubjectData subjectData = (SubjectData)object;

		long primaryKey = subjectData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SubjectData> toCacheModel() {
		SubjectDataCacheModel subjectDataCacheModel =
			new SubjectDataCacheModel();

		subjectDataCacheModel.subjectDataId = getSubjectDataId();

		subjectDataCacheModel.groupId = getGroupId();

		subjectDataCacheModel.companyId = getCompanyId();

		subjectDataCacheModel.userId = getUserId();

		subjectDataCacheModel.userName = getUserName();

		String userName = subjectDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			subjectDataCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			subjectDataCacheModel.createDate = createDate.getTime();
		}
		else {
			subjectDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			subjectDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			subjectDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		subjectDataCacheModel.verSubjectNameTitle = getVerSubjectNameTitle();

		String verSubjectNameTitle = subjectDataCacheModel.verSubjectNameTitle;

		if ((verSubjectNameTitle != null) &&
			(verSubjectNameTitle.length() == 0)) {

			subjectDataCacheModel.verSubjectNameTitle = null;
		}

		subjectDataCacheModel.verSubjectFirstName = getVerSubjectFirstName();

		String verSubjectFirstName = subjectDataCacheModel.verSubjectFirstName;

		if ((verSubjectFirstName != null) &&
			(verSubjectFirstName.length() == 0)) {

			subjectDataCacheModel.verSubjectFirstName = null;
		}

		subjectDataCacheModel.verSubjectMiddleName = getVerSubjectMiddleName();

		String verSubjectMiddleName =
			subjectDataCacheModel.verSubjectMiddleName;

		if ((verSubjectMiddleName != null) &&
			(verSubjectMiddleName.length() == 0)) {

			subjectDataCacheModel.verSubjectMiddleName = null;
		}

		subjectDataCacheModel.verSubjectSurname = getVerSubjectSurname();

		String verSubjectSurname = subjectDataCacheModel.verSubjectSurname;

		if ((verSubjectSurname != null) && (verSubjectSurname.length() == 0)) {
			subjectDataCacheModel.verSubjectSurname = null;
		}

		Date verSubjectDob = getVerSubjectDob();

		if (verSubjectDob != null) {
			subjectDataCacheModel.verSubjectDob = verSubjectDob.getTime();
		}
		else {
			subjectDataCacheModel.verSubjectDob = Long.MIN_VALUE;
		}

		subjectDataCacheModel.verPresentAddress = getVerPresentAddress();

		String verPresentAddress = subjectDataCacheModel.verPresentAddress;

		if ((verPresentAddress != null) && (verPresentAddress.length() == 0)) {
			subjectDataCacheModel.verPresentAddress = null;
		}

		subjectDataCacheModel.verPlaceOfBirth = getVerPlaceOfBirth();

		String verPlaceOfBirth = subjectDataCacheModel.verPlaceOfBirth;

		if ((verPlaceOfBirth != null) && (verPlaceOfBirth.length() == 0)) {
			subjectDataCacheModel.verPlaceOfBirth = null;
		}

		subjectDataCacheModel.verSubjectTrn = getVerSubjectTrn();

		String verSubjectTrn = subjectDataCacheModel.verSubjectTrn;

		if ((verSubjectTrn != null) && (verSubjectTrn.length() == 0)) {
			subjectDataCacheModel.verSubjectTrn = null;
		}

		subjectDataCacheModel.verSubjectTelNum = getVerSubjectTelNum();

		String verSubjectTelNum = subjectDataCacheModel.verSubjectTelNum;

		if ((verSubjectTelNum != null) && (verSubjectTelNum.length() == 0)) {
			subjectDataCacheModel.verSubjectTelNum = null;
		}

		subjectDataCacheModel.verSubjectEmail = getVerSubjectEmail();

		String verSubjectEmail = subjectDataCacheModel.verSubjectEmail;

		if ((verSubjectEmail != null) && (verSubjectEmail.length() == 0)) {
			subjectDataCacheModel.verSubjectEmail = null;
		}

		subjectDataCacheModel.osiInsolvencyId = getOsiInsolvencyId();

		return subjectDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SubjectData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SubjectData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SubjectData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((SubjectData)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SubjectData>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					SubjectData.class, ModelWrapper.class);

	}

	private long _subjectDataId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _verSubjectNameTitle;
	private String _verSubjectFirstName;
	private String _verSubjectMiddleName;
	private String _verSubjectSurname;
	private Date _verSubjectDob;
	private String _verPresentAddress;
	private String _verPlaceOfBirth;
	private String _verSubjectTrn;
	private String _verSubjectTelNum;
	private String _verSubjectEmail;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<SubjectData, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SubjectData)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("subjectDataId", _subjectDataId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("verSubjectNameTitle", _verSubjectNameTitle);
		_columnOriginalValues.put("verSubjectFirstName", _verSubjectFirstName);
		_columnOriginalValues.put(
			"verSubjectMiddleName", _verSubjectMiddleName);
		_columnOriginalValues.put("verSubjectSurname", _verSubjectSurname);
		_columnOriginalValues.put("verSubjectDob", _verSubjectDob);
		_columnOriginalValues.put("verPresentAddress", _verPresentAddress);
		_columnOriginalValues.put("verPlaceOfBirth", _verPlaceOfBirth);
		_columnOriginalValues.put("verSubjectTrn", _verSubjectTrn);
		_columnOriginalValues.put("verSubjectTelNum", _verSubjectTelNum);
		_columnOriginalValues.put("verSubjectEmail", _verSubjectEmail);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("subjectDataId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("verSubjectNameTitle", 128L);

		columnBitmasks.put("verSubjectFirstName", 256L);

		columnBitmasks.put("verSubjectMiddleName", 512L);

		columnBitmasks.put("verSubjectSurname", 1024L);

		columnBitmasks.put("verSubjectDob", 2048L);

		columnBitmasks.put("verPresentAddress", 4096L);

		columnBitmasks.put("verPlaceOfBirth", 8192L);

		columnBitmasks.put("verSubjectTrn", 16384L);

		columnBitmasks.put("verSubjectTelNum", 32768L);

		columnBitmasks.put("verSubjectEmail", 65536L);

		columnBitmasks.put("osiInsolvencyId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SubjectData _escapedModel;

}