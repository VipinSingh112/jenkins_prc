/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.FinancialPosition;
import com.nbp.osi.insolvency.application.form.services.model.FinancialPositionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FinancialPosition service. Represents a row in the &quot;nbp_osi_financial_position&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FinancialPositionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FinancialPositionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FinancialPositionImpl
 * @generated
 */
@JSON(strict = true)
public class FinancialPositionModelImpl
	extends BaseModelImpl<FinancialPosition> implements FinancialPositionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a financial position model instance should use the <code>FinancialPosition</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_financial_position";

	public static final Object[][] TABLE_COLUMNS = {
		{"financialPositionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"securedLiabilities", Types.VARCHAR},
		{"unsecuredLiabilities", Types.VARCHAR},
		{"amountLiabilities", Types.VARCHAR},
		{"deficitLiabilities", Types.VARCHAR},
		{"assestsUsedAsSecurity", Types.VARCHAR},
		{"assestsNotUsedAsSecurity", Types.VARCHAR},
		{"assestsDisposable", Types.VARCHAR}, {"assestsSurplus", Types.VARCHAR},
		{"assestsSummary", Types.VARCHAR}, {"assestsProposal", Types.VARCHAR},
		{"assestsTrusteeResponse", Types.VARCHAR},
		{"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("financialPositionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("securedLiabilities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unsecuredLiabilities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amountLiabilities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deficitLiabilities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assestsUsedAsSecurity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assestsNotUsedAsSecurity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assestsDisposable", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assestsSurplus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assestsSummary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assestsProposal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assestsTrusteeResponse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_financial_position (financialPositionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,securedLiabilities VARCHAR(75) null,unsecuredLiabilities VARCHAR(75) null,amountLiabilities VARCHAR(75) null,deficitLiabilities VARCHAR(75) null,assestsUsedAsSecurity VARCHAR(75) null,assestsNotUsedAsSecurity VARCHAR(75) null,assestsDisposable VARCHAR(75) null,assestsSurplus VARCHAR(75) null,assestsSummary VARCHAR(75) null,assestsProposal VARCHAR(75) null,assestsTrusteeResponse VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_financial_position";

	public static final String ORDER_BY_JPQL =
		" ORDER BY financialPosition.financialPositionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_financial_position.financialPositionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FINANCIALPOSITIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FinancialPositionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _financialPositionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFinancialPositionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _financialPositionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FinancialPosition.class;
	}

	@Override
	public String getModelClassName() {
		return FinancialPosition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FinancialPosition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FinancialPosition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FinancialPosition, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FinancialPosition)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FinancialPosition, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FinancialPosition, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FinancialPosition)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FinancialPosition, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FinancialPosition, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FinancialPosition, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FinancialPosition, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FinancialPosition, Object>>();

			attributeGetterFunctions.put(
				"financialPositionId",
				FinancialPosition::getFinancialPositionId);
			attributeGetterFunctions.put(
				"groupId", FinancialPosition::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FinancialPosition::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FinancialPosition::getUserId);
			attributeGetterFunctions.put(
				"userName", FinancialPosition::getUserName);
			attributeGetterFunctions.put(
				"createDate", FinancialPosition::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FinancialPosition::getModifiedDate);
			attributeGetterFunctions.put(
				"securedLiabilities", FinancialPosition::getSecuredLiabilities);
			attributeGetterFunctions.put(
				"unsecuredLiabilities",
				FinancialPosition::getUnsecuredLiabilities);
			attributeGetterFunctions.put(
				"amountLiabilities", FinancialPosition::getAmountLiabilities);
			attributeGetterFunctions.put(
				"deficitLiabilities", FinancialPosition::getDeficitLiabilities);
			attributeGetterFunctions.put(
				"assestsUsedAsSecurity",
				FinancialPosition::getAssestsUsedAsSecurity);
			attributeGetterFunctions.put(
				"assestsNotUsedAsSecurity",
				FinancialPosition::getAssestsNotUsedAsSecurity);
			attributeGetterFunctions.put(
				"assestsDisposable", FinancialPosition::getAssestsDisposable);
			attributeGetterFunctions.put(
				"assestsSurplus", FinancialPosition::getAssestsSurplus);
			attributeGetterFunctions.put(
				"assestsSummary", FinancialPosition::getAssestsSummary);
			attributeGetterFunctions.put(
				"assestsProposal", FinancialPosition::getAssestsProposal);
			attributeGetterFunctions.put(
				"assestsTrusteeResponse",
				FinancialPosition::getAssestsTrusteeResponse);
			attributeGetterFunctions.put(
				"osiInsolvencyId", FinancialPosition::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<FinancialPosition, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FinancialPosition, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FinancialPosition, ?>>();

			attributeSetterBiConsumers.put(
				"financialPositionId",
				(BiConsumer<FinancialPosition, Long>)
					FinancialPosition::setFinancialPositionId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FinancialPosition, Long>)
					FinancialPosition::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FinancialPosition, Long>)
					FinancialPosition::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FinancialPosition, Long>)
					FinancialPosition::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FinancialPosition, Date>)
					FinancialPosition::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FinancialPosition, Date>)
					FinancialPosition::setModifiedDate);
			attributeSetterBiConsumers.put(
				"securedLiabilities",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setSecuredLiabilities);
			attributeSetterBiConsumers.put(
				"unsecuredLiabilities",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setUnsecuredLiabilities);
			attributeSetterBiConsumers.put(
				"amountLiabilities",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setAmountLiabilities);
			attributeSetterBiConsumers.put(
				"deficitLiabilities",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setDeficitLiabilities);
			attributeSetterBiConsumers.put(
				"assestsUsedAsSecurity",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setAssestsUsedAsSecurity);
			attributeSetterBiConsumers.put(
				"assestsNotUsedAsSecurity",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setAssestsNotUsedAsSecurity);
			attributeSetterBiConsumers.put(
				"assestsDisposable",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setAssestsDisposable);
			attributeSetterBiConsumers.put(
				"assestsSurplus",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setAssestsSurplus);
			attributeSetterBiConsumers.put(
				"assestsSummary",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setAssestsSummary);
			attributeSetterBiConsumers.put(
				"assestsProposal",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setAssestsProposal);
			attributeSetterBiConsumers.put(
				"assestsTrusteeResponse",
				(BiConsumer<FinancialPosition, String>)
					FinancialPosition::setAssestsTrusteeResponse);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<FinancialPosition, Long>)
					FinancialPosition::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFinancialPositionId() {
		return _financialPositionId;
	}

	@Override
	public void setFinancialPositionId(long financialPositionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_financialPositionId = financialPositionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSecuredLiabilities() {
		if (_securedLiabilities == null) {
			return "";
		}
		else {
			return _securedLiabilities;
		}
	}

	@Override
	public void setSecuredLiabilities(String securedLiabilities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securedLiabilities = securedLiabilities;
	}

	@JSON
	@Override
	public String getUnsecuredLiabilities() {
		if (_unsecuredLiabilities == null) {
			return "";
		}
		else {
			return _unsecuredLiabilities;
		}
	}

	@Override
	public void setUnsecuredLiabilities(String unsecuredLiabilities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unsecuredLiabilities = unsecuredLiabilities;
	}

	@JSON
	@Override
	public String getAmountLiabilities() {
		if (_amountLiabilities == null) {
			return "";
		}
		else {
			return _amountLiabilities;
		}
	}

	@Override
	public void setAmountLiabilities(String amountLiabilities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amountLiabilities = amountLiabilities;
	}

	@JSON
	@Override
	public String getDeficitLiabilities() {
		if (_deficitLiabilities == null) {
			return "";
		}
		else {
			return _deficitLiabilities;
		}
	}

	@Override
	public void setDeficitLiabilities(String deficitLiabilities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deficitLiabilities = deficitLiabilities;
	}

	@JSON
	@Override
	public String getAssestsUsedAsSecurity() {
		if (_assestsUsedAsSecurity == null) {
			return "";
		}
		else {
			return _assestsUsedAsSecurity;
		}
	}

	@Override
	public void setAssestsUsedAsSecurity(String assestsUsedAsSecurity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assestsUsedAsSecurity = assestsUsedAsSecurity;
	}

	@JSON
	@Override
	public String getAssestsNotUsedAsSecurity() {
		if (_assestsNotUsedAsSecurity == null) {
			return "";
		}
		else {
			return _assestsNotUsedAsSecurity;
		}
	}

	@Override
	public void setAssestsNotUsedAsSecurity(String assestsNotUsedAsSecurity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assestsNotUsedAsSecurity = assestsNotUsedAsSecurity;
	}

	@JSON
	@Override
	public String getAssestsDisposable() {
		if (_assestsDisposable == null) {
			return "";
		}
		else {
			return _assestsDisposable;
		}
	}

	@Override
	public void setAssestsDisposable(String assestsDisposable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assestsDisposable = assestsDisposable;
	}

	@JSON
	@Override
	public String getAssestsSurplus() {
		if (_assestsSurplus == null) {
			return "";
		}
		else {
			return _assestsSurplus;
		}
	}

	@Override
	public void setAssestsSurplus(String assestsSurplus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assestsSurplus = assestsSurplus;
	}

	@JSON
	@Override
	public String getAssestsSummary() {
		if (_assestsSummary == null) {
			return "";
		}
		else {
			return _assestsSummary;
		}
	}

	@Override
	public void setAssestsSummary(String assestsSummary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assestsSummary = assestsSummary;
	}

	@JSON
	@Override
	public String getAssestsProposal() {
		if (_assestsProposal == null) {
			return "";
		}
		else {
			return _assestsProposal;
		}
	}

	@Override
	public void setAssestsProposal(String assestsProposal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assestsProposal = assestsProposal;
	}

	@JSON
	@Override
	public String getAssestsTrusteeResponse() {
		if (_assestsTrusteeResponse == null) {
			return "";
		}
		else {
			return _assestsTrusteeResponse;
		}
	}

	@Override
	public void setAssestsTrusteeResponse(String assestsTrusteeResponse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assestsTrusteeResponse = assestsTrusteeResponse;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FinancialPosition.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FinancialPosition toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FinancialPosition>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FinancialPositionImpl financialPositionImpl =
			new FinancialPositionImpl();

		financialPositionImpl.setFinancialPositionId(getFinancialPositionId());
		financialPositionImpl.setGroupId(getGroupId());
		financialPositionImpl.setCompanyId(getCompanyId());
		financialPositionImpl.setUserId(getUserId());
		financialPositionImpl.setUserName(getUserName());
		financialPositionImpl.setCreateDate(getCreateDate());
		financialPositionImpl.setModifiedDate(getModifiedDate());
		financialPositionImpl.setSecuredLiabilities(getSecuredLiabilities());
		financialPositionImpl.setUnsecuredLiabilities(
			getUnsecuredLiabilities());
		financialPositionImpl.setAmountLiabilities(getAmountLiabilities());
		financialPositionImpl.setDeficitLiabilities(getDeficitLiabilities());
		financialPositionImpl.setAssestsUsedAsSecurity(
			getAssestsUsedAsSecurity());
		financialPositionImpl.setAssestsNotUsedAsSecurity(
			getAssestsNotUsedAsSecurity());
		financialPositionImpl.setAssestsDisposable(getAssestsDisposable());
		financialPositionImpl.setAssestsSurplus(getAssestsSurplus());
		financialPositionImpl.setAssestsSummary(getAssestsSummary());
		financialPositionImpl.setAssestsProposal(getAssestsProposal());
		financialPositionImpl.setAssestsTrusteeResponse(
			getAssestsTrusteeResponse());
		financialPositionImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		financialPositionImpl.resetOriginalValues();

		return financialPositionImpl;
	}

	@Override
	public FinancialPosition cloneWithOriginalValues() {
		FinancialPositionImpl financialPositionImpl =
			new FinancialPositionImpl();

		financialPositionImpl.setFinancialPositionId(
			this.<Long>getColumnOriginalValue("financialPositionId"));
		financialPositionImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		financialPositionImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		financialPositionImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		financialPositionImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		financialPositionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		financialPositionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		financialPositionImpl.setSecuredLiabilities(
			this.<String>getColumnOriginalValue("securedLiabilities"));
		financialPositionImpl.setUnsecuredLiabilities(
			this.<String>getColumnOriginalValue("unsecuredLiabilities"));
		financialPositionImpl.setAmountLiabilities(
			this.<String>getColumnOriginalValue("amountLiabilities"));
		financialPositionImpl.setDeficitLiabilities(
			this.<String>getColumnOriginalValue("deficitLiabilities"));
		financialPositionImpl.setAssestsUsedAsSecurity(
			this.<String>getColumnOriginalValue("assestsUsedAsSecurity"));
		financialPositionImpl.setAssestsNotUsedAsSecurity(
			this.<String>getColumnOriginalValue("assestsNotUsedAsSecurity"));
		financialPositionImpl.setAssestsDisposable(
			this.<String>getColumnOriginalValue("assestsDisposable"));
		financialPositionImpl.setAssestsSurplus(
			this.<String>getColumnOriginalValue("assestsSurplus"));
		financialPositionImpl.setAssestsSummary(
			this.<String>getColumnOriginalValue("assestsSummary"));
		financialPositionImpl.setAssestsProposal(
			this.<String>getColumnOriginalValue("assestsProposal"));
		financialPositionImpl.setAssestsTrusteeResponse(
			this.<String>getColumnOriginalValue("assestsTrusteeResponse"));
		financialPositionImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return financialPositionImpl;
	}

	@Override
	public int compareTo(FinancialPosition financialPosition) {
		long primaryKey = financialPosition.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FinancialPosition)) {
			return false;
		}

		FinancialPosition financialPosition = (FinancialPosition)object;

		long primaryKey = financialPosition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FinancialPosition> toCacheModel() {
		FinancialPositionCacheModel financialPositionCacheModel =
			new FinancialPositionCacheModel();

		financialPositionCacheModel.financialPositionId =
			getFinancialPositionId();

		financialPositionCacheModel.groupId = getGroupId();

		financialPositionCacheModel.companyId = getCompanyId();

		financialPositionCacheModel.userId = getUserId();

		financialPositionCacheModel.userName = getUserName();

		String userName = financialPositionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			financialPositionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			financialPositionCacheModel.createDate = createDate.getTime();
		}
		else {
			financialPositionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			financialPositionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			financialPositionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		financialPositionCacheModel.securedLiabilities =
			getSecuredLiabilities();

		String securedLiabilities =
			financialPositionCacheModel.securedLiabilities;

		if ((securedLiabilities != null) &&
			(securedLiabilities.length() == 0)) {

			financialPositionCacheModel.securedLiabilities = null;
		}

		financialPositionCacheModel.unsecuredLiabilities =
			getUnsecuredLiabilities();

		String unsecuredLiabilities =
			financialPositionCacheModel.unsecuredLiabilities;

		if ((unsecuredLiabilities != null) &&
			(unsecuredLiabilities.length() == 0)) {

			financialPositionCacheModel.unsecuredLiabilities = null;
		}

		financialPositionCacheModel.amountLiabilities = getAmountLiabilities();

		String amountLiabilities =
			financialPositionCacheModel.amountLiabilities;

		if ((amountLiabilities != null) && (amountLiabilities.length() == 0)) {
			financialPositionCacheModel.amountLiabilities = null;
		}

		financialPositionCacheModel.deficitLiabilities =
			getDeficitLiabilities();

		String deficitLiabilities =
			financialPositionCacheModel.deficitLiabilities;

		if ((deficitLiabilities != null) &&
			(deficitLiabilities.length() == 0)) {

			financialPositionCacheModel.deficitLiabilities = null;
		}

		financialPositionCacheModel.assestsUsedAsSecurity =
			getAssestsUsedAsSecurity();

		String assestsUsedAsSecurity =
			financialPositionCacheModel.assestsUsedAsSecurity;

		if ((assestsUsedAsSecurity != null) &&
			(assestsUsedAsSecurity.length() == 0)) {

			financialPositionCacheModel.assestsUsedAsSecurity = null;
		}

		financialPositionCacheModel.assestsNotUsedAsSecurity =
			getAssestsNotUsedAsSecurity();

		String assestsNotUsedAsSecurity =
			financialPositionCacheModel.assestsNotUsedAsSecurity;

		if ((assestsNotUsedAsSecurity != null) &&
			(assestsNotUsedAsSecurity.length() == 0)) {

			financialPositionCacheModel.assestsNotUsedAsSecurity = null;
		}

		financialPositionCacheModel.assestsDisposable = getAssestsDisposable();

		String assestsDisposable =
			financialPositionCacheModel.assestsDisposable;

		if ((assestsDisposable != null) && (assestsDisposable.length() == 0)) {
			financialPositionCacheModel.assestsDisposable = null;
		}

		financialPositionCacheModel.assestsSurplus = getAssestsSurplus();

		String assestsSurplus = financialPositionCacheModel.assestsSurplus;

		if ((assestsSurplus != null) && (assestsSurplus.length() == 0)) {
			financialPositionCacheModel.assestsSurplus = null;
		}

		financialPositionCacheModel.assestsSummary = getAssestsSummary();

		String assestsSummary = financialPositionCacheModel.assestsSummary;

		if ((assestsSummary != null) && (assestsSummary.length() == 0)) {
			financialPositionCacheModel.assestsSummary = null;
		}

		financialPositionCacheModel.assestsProposal = getAssestsProposal();

		String assestsProposal = financialPositionCacheModel.assestsProposal;

		if ((assestsProposal != null) && (assestsProposal.length() == 0)) {
			financialPositionCacheModel.assestsProposal = null;
		}

		financialPositionCacheModel.assestsTrusteeResponse =
			getAssestsTrusteeResponse();

		String assestsTrusteeResponse =
			financialPositionCacheModel.assestsTrusteeResponse;

		if ((assestsTrusteeResponse != null) &&
			(assestsTrusteeResponse.length() == 0)) {

			financialPositionCacheModel.assestsTrusteeResponse = null;
		}

		financialPositionCacheModel.osiInsolvencyId = getOsiInsolvencyId();

		return financialPositionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FinancialPosition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FinancialPosition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FinancialPosition, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FinancialPosition)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FinancialPosition>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FinancialPosition.class, ModelWrapper.class);

	}

	private long _financialPositionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _securedLiabilities;
	private String _unsecuredLiabilities;
	private String _amountLiabilities;
	private String _deficitLiabilities;
	private String _assestsUsedAsSecurity;
	private String _assestsNotUsedAsSecurity;
	private String _assestsDisposable;
	private String _assestsSurplus;
	private String _assestsSummary;
	private String _assestsProposal;
	private String _assestsTrusteeResponse;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<FinancialPosition, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FinancialPosition)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("financialPositionId", _financialPositionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("securedLiabilities", _securedLiabilities);
		_columnOriginalValues.put(
			"unsecuredLiabilities", _unsecuredLiabilities);
		_columnOriginalValues.put("amountLiabilities", _amountLiabilities);
		_columnOriginalValues.put("deficitLiabilities", _deficitLiabilities);
		_columnOriginalValues.put(
			"assestsUsedAsSecurity", _assestsUsedAsSecurity);
		_columnOriginalValues.put(
			"assestsNotUsedAsSecurity", _assestsNotUsedAsSecurity);
		_columnOriginalValues.put("assestsDisposable", _assestsDisposable);
		_columnOriginalValues.put("assestsSurplus", _assestsSurplus);
		_columnOriginalValues.put("assestsSummary", _assestsSummary);
		_columnOriginalValues.put("assestsProposal", _assestsProposal);
		_columnOriginalValues.put(
			"assestsTrusteeResponse", _assestsTrusteeResponse);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("financialPositionId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("securedLiabilities", 128L);

		columnBitmasks.put("unsecuredLiabilities", 256L);

		columnBitmasks.put("amountLiabilities", 512L);

		columnBitmasks.put("deficitLiabilities", 1024L);

		columnBitmasks.put("assestsUsedAsSecurity", 2048L);

		columnBitmasks.put("assestsNotUsedAsSecurity", 4096L);

		columnBitmasks.put("assestsDisposable", 8192L);

		columnBitmasks.put("assestsSurplus", 16384L);

		columnBitmasks.put("assestsSummary", 32768L);

		columnBitmasks.put("assestsProposal", 65536L);

		columnBitmasks.put("assestsTrusteeResponse", 131072L);

		columnBitmasks.put("osiInsolvencyId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FinancialPosition _escapedModel;

}