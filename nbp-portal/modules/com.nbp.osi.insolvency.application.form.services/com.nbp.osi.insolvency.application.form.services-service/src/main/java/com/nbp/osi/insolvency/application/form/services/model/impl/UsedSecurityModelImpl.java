/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.insolvency.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.insolvency.application.form.services.model.UsedSecurity;
import com.nbp.osi.insolvency.application.form.services.model.UsedSecurityModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UsedSecurity service. Represents a row in the &quot;nbp_osi_used_security&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UsedSecurityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UsedSecurityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UsedSecurityImpl
 * @generated
 */
@JSON(strict = true)
public class UsedSecurityModelImpl
	extends BaseModelImpl<UsedSecurity> implements UsedSecurityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a used security model instance should use the <code>UsedSecurity</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_used_security";

	public static final Object[][] TABLE_COLUMNS = {
		{"usedSecurityId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"assetType", Types.VARCHAR},
		{"securityHolder", Types.VARCHAR}, {"securityDetail", Types.VARCHAR},
		{"securityValue", Types.VARCHAR}, {"securityLiability", Types.VARCHAR},
		{"securityNetValue", Types.VARCHAR}, {"securityCounter", Types.VARCHAR},
		{"osiInsolvencyId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("usedSecurityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("assetType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityHolder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityDetail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityLiability", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityNetValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiInsolvencyId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_used_security (usedSecurityId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,assetType VARCHAR(75) null,securityHolder VARCHAR(75) null,securityDetail VARCHAR(75) null,securityValue VARCHAR(75) null,securityLiability VARCHAR(75) null,securityNetValue VARCHAR(75) null,securityCounter VARCHAR(75) null,osiInsolvencyId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_used_security";

	public static final String ORDER_BY_JPQL =
		" ORDER BY usedSecurity.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_used_security.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIINSOLVENCYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public UsedSecurityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _usedSecurityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUsedSecurityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _usedSecurityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UsedSecurity.class;
	}

	@Override
	public String getModelClassName() {
		return UsedSecurity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UsedSecurity, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UsedSecurity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UsedSecurity, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UsedSecurity)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UsedSecurity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UsedSecurity, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UsedSecurity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UsedSecurity, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UsedSecurity, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<UsedSecurity, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<UsedSecurity, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<UsedSecurity, Object>>();

			attributeGetterFunctions.put(
				"usedSecurityId", UsedSecurity::getUsedSecurityId);
			attributeGetterFunctions.put("groupId", UsedSecurity::getGroupId);
			attributeGetterFunctions.put(
				"companyId", UsedSecurity::getCompanyId);
			attributeGetterFunctions.put("userId", UsedSecurity::getUserId);
			attributeGetterFunctions.put("userName", UsedSecurity::getUserName);
			attributeGetterFunctions.put(
				"createDate", UsedSecurity::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", UsedSecurity::getModifiedDate);
			attributeGetterFunctions.put(
				"assetType", UsedSecurity::getAssetType);
			attributeGetterFunctions.put(
				"securityHolder", UsedSecurity::getSecurityHolder);
			attributeGetterFunctions.put(
				"securityDetail", UsedSecurity::getSecurityDetail);
			attributeGetterFunctions.put(
				"securityValue", UsedSecurity::getSecurityValue);
			attributeGetterFunctions.put(
				"securityLiability", UsedSecurity::getSecurityLiability);
			attributeGetterFunctions.put(
				"securityNetValue", UsedSecurity::getSecurityNetValue);
			attributeGetterFunctions.put(
				"securityCounter", UsedSecurity::getSecurityCounter);
			attributeGetterFunctions.put(
				"osiInsolvencyId", UsedSecurity::getOsiInsolvencyId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<UsedSecurity, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<UsedSecurity, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<UsedSecurity, ?>>();

			attributeSetterBiConsumers.put(
				"usedSecurityId",
				(BiConsumer<UsedSecurity, Long>)
					UsedSecurity::setUsedSecurityId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<UsedSecurity, Long>)UsedSecurity::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<UsedSecurity, Long>)UsedSecurity::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<UsedSecurity, Long>)UsedSecurity::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<UsedSecurity, String>)UsedSecurity::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<UsedSecurity, Date>)UsedSecurity::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<UsedSecurity, Date>)UsedSecurity::setModifiedDate);
			attributeSetterBiConsumers.put(
				"assetType",
				(BiConsumer<UsedSecurity, String>)UsedSecurity::setAssetType);
			attributeSetterBiConsumers.put(
				"securityHolder",
				(BiConsumer<UsedSecurity, String>)
					UsedSecurity::setSecurityHolder);
			attributeSetterBiConsumers.put(
				"securityDetail",
				(BiConsumer<UsedSecurity, String>)
					UsedSecurity::setSecurityDetail);
			attributeSetterBiConsumers.put(
				"securityValue",
				(BiConsumer<UsedSecurity, String>)
					UsedSecurity::setSecurityValue);
			attributeSetterBiConsumers.put(
				"securityLiability",
				(BiConsumer<UsedSecurity, String>)
					UsedSecurity::setSecurityLiability);
			attributeSetterBiConsumers.put(
				"securityNetValue",
				(BiConsumer<UsedSecurity, String>)
					UsedSecurity::setSecurityNetValue);
			attributeSetterBiConsumers.put(
				"securityCounter",
				(BiConsumer<UsedSecurity, String>)
					UsedSecurity::setSecurityCounter);
			attributeSetterBiConsumers.put(
				"osiInsolvencyId",
				(BiConsumer<UsedSecurity, Long>)
					UsedSecurity::setOsiInsolvencyId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getUsedSecurityId() {
		return _usedSecurityId;
	}

	@Override
	public void setUsedSecurityId(long usedSecurityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usedSecurityId = usedSecurityId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAssetType() {
		if (_assetType == null) {
			return "";
		}
		else {
			return _assetType;
		}
	}

	@Override
	public void setAssetType(String assetType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetType = assetType;
	}

	@JSON
	@Override
	public String getSecurityHolder() {
		if (_securityHolder == null) {
			return "";
		}
		else {
			return _securityHolder;
		}
	}

	@Override
	public void setSecurityHolder(String securityHolder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityHolder = securityHolder;
	}

	@JSON
	@Override
	public String getSecurityDetail() {
		if (_securityDetail == null) {
			return "";
		}
		else {
			return _securityDetail;
		}
	}

	@Override
	public void setSecurityDetail(String securityDetail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityDetail = securityDetail;
	}

	@JSON
	@Override
	public String getSecurityValue() {
		if (_securityValue == null) {
			return "";
		}
		else {
			return _securityValue;
		}
	}

	@Override
	public void setSecurityValue(String securityValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityValue = securityValue;
	}

	@JSON
	@Override
	public String getSecurityLiability() {
		if (_securityLiability == null) {
			return "";
		}
		else {
			return _securityLiability;
		}
	}

	@Override
	public void setSecurityLiability(String securityLiability) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityLiability = securityLiability;
	}

	@JSON
	@Override
	public String getSecurityNetValue() {
		if (_securityNetValue == null) {
			return "";
		}
		else {
			return _securityNetValue;
		}
	}

	@Override
	public void setSecurityNetValue(String securityNetValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityNetValue = securityNetValue;
	}

	@JSON
	@Override
	public String getSecurityCounter() {
		if (_securityCounter == null) {
			return "";
		}
		else {
			return _securityCounter;
		}
	}

	@Override
	public void setSecurityCounter(String securityCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityCounter = securityCounter;
	}

	@JSON
	@Override
	public long getOsiInsolvencyId() {
		return _osiInsolvencyId;
	}

	@Override
	public void setOsiInsolvencyId(long osiInsolvencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiInsolvencyId = osiInsolvencyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiInsolvencyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), UsedSecurity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UsedSecurity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UsedSecurity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UsedSecurityImpl usedSecurityImpl = new UsedSecurityImpl();

		usedSecurityImpl.setUsedSecurityId(getUsedSecurityId());
		usedSecurityImpl.setGroupId(getGroupId());
		usedSecurityImpl.setCompanyId(getCompanyId());
		usedSecurityImpl.setUserId(getUserId());
		usedSecurityImpl.setUserName(getUserName());
		usedSecurityImpl.setCreateDate(getCreateDate());
		usedSecurityImpl.setModifiedDate(getModifiedDate());
		usedSecurityImpl.setAssetType(getAssetType());
		usedSecurityImpl.setSecurityHolder(getSecurityHolder());
		usedSecurityImpl.setSecurityDetail(getSecurityDetail());
		usedSecurityImpl.setSecurityValue(getSecurityValue());
		usedSecurityImpl.setSecurityLiability(getSecurityLiability());
		usedSecurityImpl.setSecurityNetValue(getSecurityNetValue());
		usedSecurityImpl.setSecurityCounter(getSecurityCounter());
		usedSecurityImpl.setOsiInsolvencyId(getOsiInsolvencyId());

		usedSecurityImpl.resetOriginalValues();

		return usedSecurityImpl;
	}

	@Override
	public UsedSecurity cloneWithOriginalValues() {
		UsedSecurityImpl usedSecurityImpl = new UsedSecurityImpl();

		usedSecurityImpl.setUsedSecurityId(
			this.<Long>getColumnOriginalValue("usedSecurityId"));
		usedSecurityImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		usedSecurityImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		usedSecurityImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		usedSecurityImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		usedSecurityImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		usedSecurityImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		usedSecurityImpl.setAssetType(
			this.<String>getColumnOriginalValue("assetType"));
		usedSecurityImpl.setSecurityHolder(
			this.<String>getColumnOriginalValue("securityHolder"));
		usedSecurityImpl.setSecurityDetail(
			this.<String>getColumnOriginalValue("securityDetail"));
		usedSecurityImpl.setSecurityValue(
			this.<String>getColumnOriginalValue("securityValue"));
		usedSecurityImpl.setSecurityLiability(
			this.<String>getColumnOriginalValue("securityLiability"));
		usedSecurityImpl.setSecurityNetValue(
			this.<String>getColumnOriginalValue("securityNetValue"));
		usedSecurityImpl.setSecurityCounter(
			this.<String>getColumnOriginalValue("securityCounter"));
		usedSecurityImpl.setOsiInsolvencyId(
			this.<Long>getColumnOriginalValue("osiInsolvencyId"));

		return usedSecurityImpl;
	}

	@Override
	public int compareTo(UsedSecurity usedSecurity) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), usedSecurity.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UsedSecurity)) {
			return false;
		}

		UsedSecurity usedSecurity = (UsedSecurity)object;

		long primaryKey = usedSecurity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UsedSecurity> toCacheModel() {
		UsedSecurityCacheModel usedSecurityCacheModel =
			new UsedSecurityCacheModel();

		usedSecurityCacheModel.usedSecurityId = getUsedSecurityId();

		usedSecurityCacheModel.groupId = getGroupId();

		usedSecurityCacheModel.companyId = getCompanyId();

		usedSecurityCacheModel.userId = getUserId();

		usedSecurityCacheModel.userName = getUserName();

		String userName = usedSecurityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			usedSecurityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			usedSecurityCacheModel.createDate = createDate.getTime();
		}
		else {
			usedSecurityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			usedSecurityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			usedSecurityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		usedSecurityCacheModel.assetType = getAssetType();

		String assetType = usedSecurityCacheModel.assetType;

		if ((assetType != null) && (assetType.length() == 0)) {
			usedSecurityCacheModel.assetType = null;
		}

		usedSecurityCacheModel.securityHolder = getSecurityHolder();

		String securityHolder = usedSecurityCacheModel.securityHolder;

		if ((securityHolder != null) && (securityHolder.length() == 0)) {
			usedSecurityCacheModel.securityHolder = null;
		}

		usedSecurityCacheModel.securityDetail = getSecurityDetail();

		String securityDetail = usedSecurityCacheModel.securityDetail;

		if ((securityDetail != null) && (securityDetail.length() == 0)) {
			usedSecurityCacheModel.securityDetail = null;
		}

		usedSecurityCacheModel.securityValue = getSecurityValue();

		String securityValue = usedSecurityCacheModel.securityValue;

		if ((securityValue != null) && (securityValue.length() == 0)) {
			usedSecurityCacheModel.securityValue = null;
		}

		usedSecurityCacheModel.securityLiability = getSecurityLiability();

		String securityLiability = usedSecurityCacheModel.securityLiability;

		if ((securityLiability != null) && (securityLiability.length() == 0)) {
			usedSecurityCacheModel.securityLiability = null;
		}

		usedSecurityCacheModel.securityNetValue = getSecurityNetValue();

		String securityNetValue = usedSecurityCacheModel.securityNetValue;

		if ((securityNetValue != null) && (securityNetValue.length() == 0)) {
			usedSecurityCacheModel.securityNetValue = null;
		}

		usedSecurityCacheModel.securityCounter = getSecurityCounter();

		String securityCounter = usedSecurityCacheModel.securityCounter;

		if ((securityCounter != null) && (securityCounter.length() == 0)) {
			usedSecurityCacheModel.securityCounter = null;
		}

		usedSecurityCacheModel.osiInsolvencyId = getOsiInsolvencyId();

		return usedSecurityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UsedSecurity, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UsedSecurity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UsedSecurity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((UsedSecurity)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UsedSecurity>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					UsedSecurity.class, ModelWrapper.class);

	}

	private long _usedSecurityId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _assetType;
	private String _securityHolder;
	private String _securityDetail;
	private String _securityValue;
	private String _securityLiability;
	private String _securityNetValue;
	private String _securityCounter;
	private long _osiInsolvencyId;

	public <T> T getColumnValue(String columnName) {
		Function<UsedSecurity, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UsedSecurity)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("usedSecurityId", _usedSecurityId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("assetType", _assetType);
		_columnOriginalValues.put("securityHolder", _securityHolder);
		_columnOriginalValues.put("securityDetail", _securityDetail);
		_columnOriginalValues.put("securityValue", _securityValue);
		_columnOriginalValues.put("securityLiability", _securityLiability);
		_columnOriginalValues.put("securityNetValue", _securityNetValue);
		_columnOriginalValues.put("securityCounter", _securityCounter);
		_columnOriginalValues.put("osiInsolvencyId", _osiInsolvencyId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("usedSecurityId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("assetType", 128L);

		columnBitmasks.put("securityHolder", 256L);

		columnBitmasks.put("securityDetail", 512L);

		columnBitmasks.put("securityValue", 1024L);

		columnBitmasks.put("securityLiability", 2048L);

		columnBitmasks.put("securityNetValue", 4096L);

		columnBitmasks.put("securityCounter", 8192L);

		columnBitmasks.put("osiInsolvencyId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UsedSecurity _escapedModel;

}