/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.factories.registration.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.factories.registration.application.form.services.model.FactoriesProcessedFoodAct;
import com.nbp.factories.registration.application.form.services.model.FactoriesProcessedFoodActModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FactoriesProcessedFoodAct service. Represents a row in the &quot;nbp_factories_pro_food_act&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FactoriesProcessedFoodActModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FactoriesProcessedFoodActImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FactoriesProcessedFoodActImpl
 * @generated
 */
@JSON(strict = true)
public class FactoriesProcessedFoodActModelImpl
	extends BaseModelImpl<FactoriesProcessedFoodAct>
	implements FactoriesProcessedFoodActModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a factories processed food act model instance should use the <code>FactoriesProcessedFoodAct</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_factories_pro_food_act";

	public static final Object[][] TABLE_COLUMNS = {
		{"factoriesProcessedFoodActId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"processedActEstablishmentName", Types.VARCHAR},
		{"processedActParishAddress", Types.VARCHAR},
		{"processedActAddress", Types.VARCHAR},
		{"processedActOperatorName", Types.VARCHAR},
		{"processedActOperatorAddress", Types.VARCHAR},
		{"processedActParish", Types.VARCHAR},
		{"processedActDescription", Types.VARCHAR},
		{"establishmentOperated", Types.VARCHAR},
		{"processedActLastDate", Types.TIMESTAMP},
		{"processedActManufactured", Types.VARCHAR},
		{"processedActDate", Types.TIMESTAMP},
		{"factoriesApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("factoriesProcessedFoodActId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("processedActEstablishmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedActParishAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedActAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedActOperatorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedActOperatorAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedActParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedActDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("establishmentOperated", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedActLastDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("processedActManufactured", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedActDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("factoriesApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_factories_pro_food_act (factoriesProcessedFoodActId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,processedActEstablishmentName VARCHAR(75) null,processedActParishAddress VARCHAR(500) null,processedActAddress VARCHAR(500) null,processedActOperatorName VARCHAR(75) null,processedActOperatorAddress VARCHAR(500) null,processedActParish VARCHAR(75) null,processedActDescription VARCHAR(75) null,establishmentOperated VARCHAR(75) null,processedActLastDate DATE null,processedActManufactured VARCHAR(500) null,processedActDate DATE null,factoriesApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_factories_pro_food_act";

	public static final String ORDER_BY_JPQL =
		" ORDER BY factoriesProcessedFoodAct.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_factories_pro_food_act.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FACTORIESAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FactoriesProcessedFoodActModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _factoriesProcessedFoodActId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFactoriesProcessedFoodActId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _factoriesProcessedFoodActId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FactoriesProcessedFoodAct.class;
	}

	@Override
	public String getModelClassName() {
		return FactoriesProcessedFoodAct.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FactoriesProcessedFoodAct, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FactoriesProcessedFoodAct, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FactoriesProcessedFoodAct, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FactoriesProcessedFoodAct)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FactoriesProcessedFoodAct, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FactoriesProcessedFoodAct, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FactoriesProcessedFoodAct)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FactoriesProcessedFoodAct, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FactoriesProcessedFoodAct, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<FactoriesProcessedFoodAct, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<FactoriesProcessedFoodAct, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FactoriesProcessedFoodAct, Object>>();

			attributeGetterFunctions.put(
				"factoriesProcessedFoodActId",
				FactoriesProcessedFoodAct::getFactoriesProcessedFoodActId);
			attributeGetterFunctions.put(
				"groupId", FactoriesProcessedFoodAct::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FactoriesProcessedFoodAct::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FactoriesProcessedFoodAct::getUserId);
			attributeGetterFunctions.put(
				"userName", FactoriesProcessedFoodAct::getUserName);
			attributeGetterFunctions.put(
				"createDate", FactoriesProcessedFoodAct::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FactoriesProcessedFoodAct::getModifiedDate);
			attributeGetterFunctions.put(
				"processedActEstablishmentName",
				FactoriesProcessedFoodAct::getProcessedActEstablishmentName);
			attributeGetterFunctions.put(
				"processedActParishAddress",
				FactoriesProcessedFoodAct::getProcessedActParishAddress);
			attributeGetterFunctions.put(
				"processedActAddress",
				FactoriesProcessedFoodAct::getProcessedActAddress);
			attributeGetterFunctions.put(
				"processedActOperatorName",
				FactoriesProcessedFoodAct::getProcessedActOperatorName);
			attributeGetterFunctions.put(
				"processedActOperatorAddress",
				FactoriesProcessedFoodAct::getProcessedActOperatorAddress);
			attributeGetterFunctions.put(
				"processedActParish",
				FactoriesProcessedFoodAct::getProcessedActParish);
			attributeGetterFunctions.put(
				"processedActDescription",
				FactoriesProcessedFoodAct::getProcessedActDescription);
			attributeGetterFunctions.put(
				"establishmentOperated",
				FactoriesProcessedFoodAct::getEstablishmentOperated);
			attributeGetterFunctions.put(
				"processedActLastDate",
				FactoriesProcessedFoodAct::getProcessedActLastDate);
			attributeGetterFunctions.put(
				"processedActManufactured",
				FactoriesProcessedFoodAct::getProcessedActManufactured);
			attributeGetterFunctions.put(
				"processedActDate",
				FactoriesProcessedFoodAct::getProcessedActDate);
			attributeGetterFunctions.put(
				"factoriesApplicationId",
				FactoriesProcessedFoodAct::getFactoriesApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FactoriesProcessedFoodAct, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FactoriesProcessedFoodAct, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FactoriesProcessedFoodAct, ?>>();

			attributeSetterBiConsumers.put(
				"factoriesProcessedFoodActId",
				(BiConsumer<FactoriesProcessedFoodAct, Long>)
					FactoriesProcessedFoodAct::setFactoriesProcessedFoodActId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FactoriesProcessedFoodAct, Long>)
					FactoriesProcessedFoodAct::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FactoriesProcessedFoodAct, Long>)
					FactoriesProcessedFoodAct::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FactoriesProcessedFoodAct, Long>)
					FactoriesProcessedFoodAct::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FactoriesProcessedFoodAct, Date>)
					FactoriesProcessedFoodAct::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FactoriesProcessedFoodAct, Date>)
					FactoriesProcessedFoodAct::setModifiedDate);
			attributeSetterBiConsumers.put(
				"processedActEstablishmentName",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::
						setProcessedActEstablishmentName);
			attributeSetterBiConsumers.put(
				"processedActParishAddress",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setProcessedActParishAddress);
			attributeSetterBiConsumers.put(
				"processedActAddress",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setProcessedActAddress);
			attributeSetterBiConsumers.put(
				"processedActOperatorName",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setProcessedActOperatorName);
			attributeSetterBiConsumers.put(
				"processedActOperatorAddress",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setProcessedActOperatorAddress);
			attributeSetterBiConsumers.put(
				"processedActParish",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setProcessedActParish);
			attributeSetterBiConsumers.put(
				"processedActDescription",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setProcessedActDescription);
			attributeSetterBiConsumers.put(
				"establishmentOperated",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setEstablishmentOperated);
			attributeSetterBiConsumers.put(
				"processedActLastDate",
				(BiConsumer<FactoriesProcessedFoodAct, Date>)
					FactoriesProcessedFoodAct::setProcessedActLastDate);
			attributeSetterBiConsumers.put(
				"processedActManufactured",
				(BiConsumer<FactoriesProcessedFoodAct, String>)
					FactoriesProcessedFoodAct::setProcessedActManufactured);
			attributeSetterBiConsumers.put(
				"processedActDate",
				(BiConsumer<FactoriesProcessedFoodAct, Date>)
					FactoriesProcessedFoodAct::setProcessedActDate);
			attributeSetterBiConsumers.put(
				"factoriesApplicationId",
				(BiConsumer<FactoriesProcessedFoodAct, Long>)
					FactoriesProcessedFoodAct::setFactoriesApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFactoriesProcessedFoodActId() {
		return _factoriesProcessedFoodActId;
	}

	@Override
	public void setFactoriesProcessedFoodActId(
		long factoriesProcessedFoodActId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_factoriesProcessedFoodActId = factoriesProcessedFoodActId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getProcessedActEstablishmentName() {
		if (_processedActEstablishmentName == null) {
			return "";
		}
		else {
			return _processedActEstablishmentName;
		}
	}

	@Override
	public void setProcessedActEstablishmentName(
		String processedActEstablishmentName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActEstablishmentName = processedActEstablishmentName;
	}

	@JSON
	@Override
	public String getProcessedActParishAddress() {
		if (_processedActParishAddress == null) {
			return "";
		}
		else {
			return _processedActParishAddress;
		}
	}

	@Override
	public void setProcessedActParishAddress(String processedActParishAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActParishAddress = processedActParishAddress;
	}

	@JSON
	@Override
	public String getProcessedActAddress() {
		if (_processedActAddress == null) {
			return "";
		}
		else {
			return _processedActAddress;
		}
	}

	@Override
	public void setProcessedActAddress(String processedActAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActAddress = processedActAddress;
	}

	@JSON
	@Override
	public String getProcessedActOperatorName() {
		if (_processedActOperatorName == null) {
			return "";
		}
		else {
			return _processedActOperatorName;
		}
	}

	@Override
	public void setProcessedActOperatorName(String processedActOperatorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActOperatorName = processedActOperatorName;
	}

	@JSON
	@Override
	public String getProcessedActOperatorAddress() {
		if (_processedActOperatorAddress == null) {
			return "";
		}
		else {
			return _processedActOperatorAddress;
		}
	}

	@Override
	public void setProcessedActOperatorAddress(
		String processedActOperatorAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActOperatorAddress = processedActOperatorAddress;
	}

	@JSON
	@Override
	public String getProcessedActParish() {
		if (_processedActParish == null) {
			return "";
		}
		else {
			return _processedActParish;
		}
	}

	@Override
	public void setProcessedActParish(String processedActParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActParish = processedActParish;
	}

	@JSON
	@Override
	public String getProcessedActDescription() {
		if (_processedActDescription == null) {
			return "";
		}
		else {
			return _processedActDescription;
		}
	}

	@Override
	public void setProcessedActDescription(String processedActDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActDescription = processedActDescription;
	}

	@JSON
	@Override
	public String getEstablishmentOperated() {
		if (_establishmentOperated == null) {
			return "";
		}
		else {
			return _establishmentOperated;
		}
	}

	@Override
	public void setEstablishmentOperated(String establishmentOperated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_establishmentOperated = establishmentOperated;
	}

	@JSON
	@Override
	public Date getProcessedActLastDate() {
		return _processedActLastDate;
	}

	@Override
	public void setProcessedActLastDate(Date processedActLastDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActLastDate = processedActLastDate;
	}

	@JSON
	@Override
	public String getProcessedActManufactured() {
		if (_processedActManufactured == null) {
			return "";
		}
		else {
			return _processedActManufactured;
		}
	}

	@Override
	public void setProcessedActManufactured(String processedActManufactured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActManufactured = processedActManufactured;
	}

	@JSON
	@Override
	public Date getProcessedActDate() {
		return _processedActDate;
	}

	@Override
	public void setProcessedActDate(Date processedActDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedActDate = processedActDate;
	}

	@JSON
	@Override
	public long getFactoriesApplicationId() {
		return _factoriesApplicationId;
	}

	@Override
	public void setFactoriesApplicationId(long factoriesApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_factoriesApplicationId = factoriesApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFactoriesApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("factoriesApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FactoriesProcessedFoodAct.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FactoriesProcessedFoodAct toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FactoriesProcessedFoodAct>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FactoriesProcessedFoodActImpl factoriesProcessedFoodActImpl =
			new FactoriesProcessedFoodActImpl();

		factoriesProcessedFoodActImpl.setFactoriesProcessedFoodActId(
			getFactoriesProcessedFoodActId());
		factoriesProcessedFoodActImpl.setGroupId(getGroupId());
		factoriesProcessedFoodActImpl.setCompanyId(getCompanyId());
		factoriesProcessedFoodActImpl.setUserId(getUserId());
		factoriesProcessedFoodActImpl.setUserName(getUserName());
		factoriesProcessedFoodActImpl.setCreateDate(getCreateDate());
		factoriesProcessedFoodActImpl.setModifiedDate(getModifiedDate());
		factoriesProcessedFoodActImpl.setProcessedActEstablishmentName(
			getProcessedActEstablishmentName());
		factoriesProcessedFoodActImpl.setProcessedActParishAddress(
			getProcessedActParishAddress());
		factoriesProcessedFoodActImpl.setProcessedActAddress(
			getProcessedActAddress());
		factoriesProcessedFoodActImpl.setProcessedActOperatorName(
			getProcessedActOperatorName());
		factoriesProcessedFoodActImpl.setProcessedActOperatorAddress(
			getProcessedActOperatorAddress());
		factoriesProcessedFoodActImpl.setProcessedActParish(
			getProcessedActParish());
		factoriesProcessedFoodActImpl.setProcessedActDescription(
			getProcessedActDescription());
		factoriesProcessedFoodActImpl.setEstablishmentOperated(
			getEstablishmentOperated());
		factoriesProcessedFoodActImpl.setProcessedActLastDate(
			getProcessedActLastDate());
		factoriesProcessedFoodActImpl.setProcessedActManufactured(
			getProcessedActManufactured());
		factoriesProcessedFoodActImpl.setProcessedActDate(
			getProcessedActDate());
		factoriesProcessedFoodActImpl.setFactoriesApplicationId(
			getFactoriesApplicationId());

		factoriesProcessedFoodActImpl.resetOriginalValues();

		return factoriesProcessedFoodActImpl;
	}

	@Override
	public FactoriesProcessedFoodAct cloneWithOriginalValues() {
		FactoriesProcessedFoodActImpl factoriesProcessedFoodActImpl =
			new FactoriesProcessedFoodActImpl();

		factoriesProcessedFoodActImpl.setFactoriesProcessedFoodActId(
			this.<Long>getColumnOriginalValue("factoriesProcessedFoodActId"));
		factoriesProcessedFoodActImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		factoriesProcessedFoodActImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		factoriesProcessedFoodActImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		factoriesProcessedFoodActImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		factoriesProcessedFoodActImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		factoriesProcessedFoodActImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		factoriesProcessedFoodActImpl.setProcessedActEstablishmentName(
			this.<String>getColumnOriginalValue(
				"processedActEstablishmentName"));
		factoriesProcessedFoodActImpl.setProcessedActParishAddress(
			this.<String>getColumnOriginalValue("processedActParishAddress"));
		factoriesProcessedFoodActImpl.setProcessedActAddress(
			this.<String>getColumnOriginalValue("processedActAddress"));
		factoriesProcessedFoodActImpl.setProcessedActOperatorName(
			this.<String>getColumnOriginalValue("processedActOperatorName"));
		factoriesProcessedFoodActImpl.setProcessedActOperatorAddress(
			this.<String>getColumnOriginalValue("processedActOperatorAddress"));
		factoriesProcessedFoodActImpl.setProcessedActParish(
			this.<String>getColumnOriginalValue("processedActParish"));
		factoriesProcessedFoodActImpl.setProcessedActDescription(
			this.<String>getColumnOriginalValue("processedActDescription"));
		factoriesProcessedFoodActImpl.setEstablishmentOperated(
			this.<String>getColumnOriginalValue("establishmentOperated"));
		factoriesProcessedFoodActImpl.setProcessedActLastDate(
			this.<Date>getColumnOriginalValue("processedActLastDate"));
		factoriesProcessedFoodActImpl.setProcessedActManufactured(
			this.<String>getColumnOriginalValue("processedActManufactured"));
		factoriesProcessedFoodActImpl.setProcessedActDate(
			this.<Date>getColumnOriginalValue("processedActDate"));
		factoriesProcessedFoodActImpl.setFactoriesApplicationId(
			this.<Long>getColumnOriginalValue("factoriesApplicationId"));

		return factoriesProcessedFoodActImpl;
	}

	@Override
	public int compareTo(FactoriesProcessedFoodAct factoriesProcessedFoodAct) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), factoriesProcessedFoodAct.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FactoriesProcessedFoodAct)) {
			return false;
		}

		FactoriesProcessedFoodAct factoriesProcessedFoodAct =
			(FactoriesProcessedFoodAct)object;

		long primaryKey = factoriesProcessedFoodAct.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FactoriesProcessedFoodAct> toCacheModel() {
		FactoriesProcessedFoodActCacheModel
			factoriesProcessedFoodActCacheModel =
				new FactoriesProcessedFoodActCacheModel();

		factoriesProcessedFoodActCacheModel.factoriesProcessedFoodActId =
			getFactoriesProcessedFoodActId();

		factoriesProcessedFoodActCacheModel.groupId = getGroupId();

		factoriesProcessedFoodActCacheModel.companyId = getCompanyId();

		factoriesProcessedFoodActCacheModel.userId = getUserId();

		factoriesProcessedFoodActCacheModel.userName = getUserName();

		String userName = factoriesProcessedFoodActCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			factoriesProcessedFoodActCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			factoriesProcessedFoodActCacheModel.createDate =
				createDate.getTime();
		}
		else {
			factoriesProcessedFoodActCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			factoriesProcessedFoodActCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			factoriesProcessedFoodActCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		factoriesProcessedFoodActCacheModel.processedActEstablishmentName =
			getProcessedActEstablishmentName();

		String processedActEstablishmentName =
			factoriesProcessedFoodActCacheModel.processedActEstablishmentName;

		if ((processedActEstablishmentName != null) &&
			(processedActEstablishmentName.length() == 0)) {

			factoriesProcessedFoodActCacheModel.processedActEstablishmentName =
				null;
		}

		factoriesProcessedFoodActCacheModel.processedActParishAddress =
			getProcessedActParishAddress();

		String processedActParishAddress =
			factoriesProcessedFoodActCacheModel.processedActParishAddress;

		if ((processedActParishAddress != null) &&
			(processedActParishAddress.length() == 0)) {

			factoriesProcessedFoodActCacheModel.processedActParishAddress =
				null;
		}

		factoriesProcessedFoodActCacheModel.processedActAddress =
			getProcessedActAddress();

		String processedActAddress =
			factoriesProcessedFoodActCacheModel.processedActAddress;

		if ((processedActAddress != null) &&
			(processedActAddress.length() == 0)) {

			factoriesProcessedFoodActCacheModel.processedActAddress = null;
		}

		factoriesProcessedFoodActCacheModel.processedActOperatorName =
			getProcessedActOperatorName();

		String processedActOperatorName =
			factoriesProcessedFoodActCacheModel.processedActOperatorName;

		if ((processedActOperatorName != null) &&
			(processedActOperatorName.length() == 0)) {

			factoriesProcessedFoodActCacheModel.processedActOperatorName = null;
		}

		factoriesProcessedFoodActCacheModel.processedActOperatorAddress =
			getProcessedActOperatorAddress();

		String processedActOperatorAddress =
			factoriesProcessedFoodActCacheModel.processedActOperatorAddress;

		if ((processedActOperatorAddress != null) &&
			(processedActOperatorAddress.length() == 0)) {

			factoriesProcessedFoodActCacheModel.processedActOperatorAddress =
				null;
		}

		factoriesProcessedFoodActCacheModel.processedActParish =
			getProcessedActParish();

		String processedActParish =
			factoriesProcessedFoodActCacheModel.processedActParish;

		if ((processedActParish != null) &&
			(processedActParish.length() == 0)) {

			factoriesProcessedFoodActCacheModel.processedActParish = null;
		}

		factoriesProcessedFoodActCacheModel.processedActDescription =
			getProcessedActDescription();

		String processedActDescription =
			factoriesProcessedFoodActCacheModel.processedActDescription;

		if ((processedActDescription != null) &&
			(processedActDescription.length() == 0)) {

			factoriesProcessedFoodActCacheModel.processedActDescription = null;
		}

		factoriesProcessedFoodActCacheModel.establishmentOperated =
			getEstablishmentOperated();

		String establishmentOperated =
			factoriesProcessedFoodActCacheModel.establishmentOperated;

		if ((establishmentOperated != null) &&
			(establishmentOperated.length() == 0)) {

			factoriesProcessedFoodActCacheModel.establishmentOperated = null;
		}

		Date processedActLastDate = getProcessedActLastDate();

		if (processedActLastDate != null) {
			factoriesProcessedFoodActCacheModel.processedActLastDate =
				processedActLastDate.getTime();
		}
		else {
			factoriesProcessedFoodActCacheModel.processedActLastDate =
				Long.MIN_VALUE;
		}

		factoriesProcessedFoodActCacheModel.processedActManufactured =
			getProcessedActManufactured();

		String processedActManufactured =
			factoriesProcessedFoodActCacheModel.processedActManufactured;

		if ((processedActManufactured != null) &&
			(processedActManufactured.length() == 0)) {

			factoriesProcessedFoodActCacheModel.processedActManufactured = null;
		}

		Date processedActDate = getProcessedActDate();

		if (processedActDate != null) {
			factoriesProcessedFoodActCacheModel.processedActDate =
				processedActDate.getTime();
		}
		else {
			factoriesProcessedFoodActCacheModel.processedActDate =
				Long.MIN_VALUE;
		}

		factoriesProcessedFoodActCacheModel.factoriesApplicationId =
			getFactoriesApplicationId();

		return factoriesProcessedFoodActCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FactoriesProcessedFoodAct, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FactoriesProcessedFoodAct, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FactoriesProcessedFoodAct, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FactoriesProcessedFoodAct)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FactoriesProcessedFoodAct>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						FactoriesProcessedFoodAct.class, ModelWrapper.class);

	}

	private long _factoriesProcessedFoodActId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _processedActEstablishmentName;
	private String _processedActParishAddress;
	private String _processedActAddress;
	private String _processedActOperatorName;
	private String _processedActOperatorAddress;
	private String _processedActParish;
	private String _processedActDescription;
	private String _establishmentOperated;
	private Date _processedActLastDate;
	private String _processedActManufactured;
	private Date _processedActDate;
	private long _factoriesApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FactoriesProcessedFoodAct, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FactoriesProcessedFoodAct)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"factoriesProcessedFoodActId", _factoriesProcessedFoodActId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"processedActEstablishmentName", _processedActEstablishmentName);
		_columnOriginalValues.put(
			"processedActParishAddress", _processedActParishAddress);
		_columnOriginalValues.put("processedActAddress", _processedActAddress);
		_columnOriginalValues.put(
			"processedActOperatorName", _processedActOperatorName);
		_columnOriginalValues.put(
			"processedActOperatorAddress", _processedActOperatorAddress);
		_columnOriginalValues.put("processedActParish", _processedActParish);
		_columnOriginalValues.put(
			"processedActDescription", _processedActDescription);
		_columnOriginalValues.put(
			"establishmentOperated", _establishmentOperated);
		_columnOriginalValues.put(
			"processedActLastDate", _processedActLastDate);
		_columnOriginalValues.put(
			"processedActManufactured", _processedActManufactured);
		_columnOriginalValues.put("processedActDate", _processedActDate);
		_columnOriginalValues.put(
			"factoriesApplicationId", _factoriesApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("factoriesProcessedFoodActId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("processedActEstablishmentName", 128L);

		columnBitmasks.put("processedActParishAddress", 256L);

		columnBitmasks.put("processedActAddress", 512L);

		columnBitmasks.put("processedActOperatorName", 1024L);

		columnBitmasks.put("processedActOperatorAddress", 2048L);

		columnBitmasks.put("processedActParish", 4096L);

		columnBitmasks.put("processedActDescription", 8192L);

		columnBitmasks.put("establishmentOperated", 16384L);

		columnBitmasks.put("processedActLastDate", 32768L);

		columnBitmasks.put("processedActManufactured", 65536L);

		columnBitmasks.put("processedActDate", 131072L);

		columnBitmasks.put("factoriesApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FactoriesProcessedFoodAct _escapedModel;

}