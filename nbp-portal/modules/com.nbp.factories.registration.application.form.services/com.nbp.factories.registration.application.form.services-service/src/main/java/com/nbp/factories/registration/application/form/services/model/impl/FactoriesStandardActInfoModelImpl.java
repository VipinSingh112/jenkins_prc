/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.factories.registration.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.factories.registration.application.form.services.model.FactoriesStandardActInfo;
import com.nbp.factories.registration.application.form.services.model.FactoriesStandardActInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FactoriesStandardActInfo service. Represents a row in the &quot;nbp_factories_stand_act_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FactoriesStandardActInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FactoriesStandardActInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FactoriesStandardActInfoImpl
 * @generated
 */
@JSON(strict = true)
public class FactoriesStandardActInfoModelImpl
	extends BaseModelImpl<FactoriesStandardActInfo>
	implements FactoriesStandardActInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a factories standard act info model instance should use the <code>FactoriesStandardActInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_factories_stand_act_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"factoriesStandardActId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"standardsActEstablishmentName", Types.VARCHAR},
		{"standardsActAddParish", Types.VARCHAR},
		{"standardsActAddress", Types.VARCHAR},
		{"standardsActTel", Types.VARCHAR},
		{"standardsActWhatsAppNum", Types.VARCHAR},
		{"standardsActEmail", Types.VARCHAR},
		{"standardsActFaxNum", Types.VARCHAR},
		{"standardsActOperatorName", Types.VARCHAR},
		{"standardsActOperatorAddress", Types.VARCHAR},
		{"standardsActParish", Types.VARCHAR},
		{"standardsActOperatorTel", Types.VARCHAR},
		{"standardActProductManufactured", Types.VARCHAR},
		{"standardActBrandManufactured", Types.VARCHAR},
		{"standardsActProductSize", Types.VARCHAR},
		{"standardsActLastDate", Types.TIMESTAMP},
		{"standardsActPurpose", Types.VARCHAR},
		{"standardsActDate", Types.TIMESTAMP},
		{"establishmentBefore", Types.VARCHAR},
		{"factoriesApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("factoriesStandardActId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("standardsActEstablishmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActAddParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActTel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActWhatsAppNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActFaxNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActOperatorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActOperatorAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActOperatorTel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardActProductManufactured", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardActBrandManufactured", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActProductSize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActLastDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("standardsActPurpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardsActDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("establishmentBefore", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("factoriesApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_factories_stand_act_info (factoriesStandardActId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,standardsActEstablishmentName VARCHAR(75) null,standardsActAddParish VARCHAR(75) null,standardsActAddress VARCHAR(500) null,standardsActTel VARCHAR(75) null,standardsActWhatsAppNum VARCHAR(75) null,standardsActEmail VARCHAR(75) null,standardsActFaxNum VARCHAR(75) null,standardsActOperatorName VARCHAR(75) null,standardsActOperatorAddress VARCHAR(500) null,standardsActParish VARCHAR(75) null,standardsActOperatorTel VARCHAR(75) null,standardActProductManufactured VARCHAR(75) null,standardActBrandManufactured VARCHAR(75) null,standardsActProductSize VARCHAR(75) null,standardsActLastDate DATE null,standardsActPurpose VARCHAR(500) null,standardsActDate DATE null,establishmentBefore VARCHAR(75) null,factoriesApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_factories_stand_act_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY factoriesStandardActInfo.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_factories_stand_act_info.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FACTORIESAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FactoriesStandardActInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _factoriesStandardActId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFactoriesStandardActId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _factoriesStandardActId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FactoriesStandardActInfo.class;
	}

	@Override
	public String getModelClassName() {
		return FactoriesStandardActInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FactoriesStandardActInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FactoriesStandardActInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FactoriesStandardActInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FactoriesStandardActInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FactoriesStandardActInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FactoriesStandardActInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FactoriesStandardActInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FactoriesStandardActInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FactoriesStandardActInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<FactoriesStandardActInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<FactoriesStandardActInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FactoriesStandardActInfo, Object>>();

			attributeGetterFunctions.put(
				"factoriesStandardActId",
				FactoriesStandardActInfo::getFactoriesStandardActId);
			attributeGetterFunctions.put(
				"groupId", FactoriesStandardActInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FactoriesStandardActInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FactoriesStandardActInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", FactoriesStandardActInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", FactoriesStandardActInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FactoriesStandardActInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"standardsActEstablishmentName",
				FactoriesStandardActInfo::getStandardsActEstablishmentName);
			attributeGetterFunctions.put(
				"standardsActAddParish",
				FactoriesStandardActInfo::getStandardsActAddParish);
			attributeGetterFunctions.put(
				"standardsActAddress",
				FactoriesStandardActInfo::getStandardsActAddress);
			attributeGetterFunctions.put(
				"standardsActTel",
				FactoriesStandardActInfo::getStandardsActTel);
			attributeGetterFunctions.put(
				"standardsActWhatsAppNum",
				FactoriesStandardActInfo::getStandardsActWhatsAppNum);
			attributeGetterFunctions.put(
				"standardsActEmail",
				FactoriesStandardActInfo::getStandardsActEmail);
			attributeGetterFunctions.put(
				"standardsActFaxNum",
				FactoriesStandardActInfo::getStandardsActFaxNum);
			attributeGetterFunctions.put(
				"standardsActOperatorName",
				FactoriesStandardActInfo::getStandardsActOperatorName);
			attributeGetterFunctions.put(
				"standardsActOperatorAddress",
				FactoriesStandardActInfo::getStandardsActOperatorAddress);
			attributeGetterFunctions.put(
				"standardsActParish",
				FactoriesStandardActInfo::getStandardsActParish);
			attributeGetterFunctions.put(
				"standardsActOperatorTel",
				FactoriesStandardActInfo::getStandardsActOperatorTel);
			attributeGetterFunctions.put(
				"standardActProductManufactured",
				FactoriesStandardActInfo::getStandardActProductManufactured);
			attributeGetterFunctions.put(
				"standardActBrandManufactured",
				FactoriesStandardActInfo::getStandardActBrandManufactured);
			attributeGetterFunctions.put(
				"standardsActProductSize",
				FactoriesStandardActInfo::getStandardsActProductSize);
			attributeGetterFunctions.put(
				"standardsActLastDate",
				FactoriesStandardActInfo::getStandardsActLastDate);
			attributeGetterFunctions.put(
				"standardsActPurpose",
				FactoriesStandardActInfo::getStandardsActPurpose);
			attributeGetterFunctions.put(
				"standardsActDate",
				FactoriesStandardActInfo::getStandardsActDate);
			attributeGetterFunctions.put(
				"establishmentBefore",
				FactoriesStandardActInfo::getEstablishmentBefore);
			attributeGetterFunctions.put(
				"factoriesApplicationId",
				FactoriesStandardActInfo::getFactoriesApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FactoriesStandardActInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FactoriesStandardActInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FactoriesStandardActInfo, ?>>();

			attributeSetterBiConsumers.put(
				"factoriesStandardActId",
				(BiConsumer<FactoriesStandardActInfo, Long>)
					FactoriesStandardActInfo::setFactoriesStandardActId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FactoriesStandardActInfo, Long>)
					FactoriesStandardActInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FactoriesStandardActInfo, Long>)
					FactoriesStandardActInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FactoriesStandardActInfo, Long>)
					FactoriesStandardActInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FactoriesStandardActInfo, Date>)
					FactoriesStandardActInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FactoriesStandardActInfo, Date>)
					FactoriesStandardActInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"standardsActEstablishmentName",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActEstablishmentName);
			attributeSetterBiConsumers.put(
				"standardsActAddParish",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActAddParish);
			attributeSetterBiConsumers.put(
				"standardsActAddress",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActAddress);
			attributeSetterBiConsumers.put(
				"standardsActTel",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActTel);
			attributeSetterBiConsumers.put(
				"standardsActWhatsAppNum",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActWhatsAppNum);
			attributeSetterBiConsumers.put(
				"standardsActEmail",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActEmail);
			attributeSetterBiConsumers.put(
				"standardsActFaxNum",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActFaxNum);
			attributeSetterBiConsumers.put(
				"standardsActOperatorName",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActOperatorName);
			attributeSetterBiConsumers.put(
				"standardsActOperatorAddress",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActOperatorAddress);
			attributeSetterBiConsumers.put(
				"standardsActParish",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActParish);
			attributeSetterBiConsumers.put(
				"standardsActOperatorTel",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActOperatorTel);
			attributeSetterBiConsumers.put(
				"standardActProductManufactured",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::
						setStandardActProductManufactured);
			attributeSetterBiConsumers.put(
				"standardActBrandManufactured",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardActBrandManufactured);
			attributeSetterBiConsumers.put(
				"standardsActProductSize",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActProductSize);
			attributeSetterBiConsumers.put(
				"standardsActLastDate",
				(BiConsumer<FactoriesStandardActInfo, Date>)
					FactoriesStandardActInfo::setStandardsActLastDate);
			attributeSetterBiConsumers.put(
				"standardsActPurpose",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setStandardsActPurpose);
			attributeSetterBiConsumers.put(
				"standardsActDate",
				(BiConsumer<FactoriesStandardActInfo, Date>)
					FactoriesStandardActInfo::setStandardsActDate);
			attributeSetterBiConsumers.put(
				"establishmentBefore",
				(BiConsumer<FactoriesStandardActInfo, String>)
					FactoriesStandardActInfo::setEstablishmentBefore);
			attributeSetterBiConsumers.put(
				"factoriesApplicationId",
				(BiConsumer<FactoriesStandardActInfo, Long>)
					FactoriesStandardActInfo::setFactoriesApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFactoriesStandardActId() {
		return _factoriesStandardActId;
	}

	@Override
	public void setFactoriesStandardActId(long factoriesStandardActId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_factoriesStandardActId = factoriesStandardActId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getStandardsActEstablishmentName() {
		if (_standardsActEstablishmentName == null) {
			return "";
		}
		else {
			return _standardsActEstablishmentName;
		}
	}

	@Override
	public void setStandardsActEstablishmentName(
		String standardsActEstablishmentName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActEstablishmentName = standardsActEstablishmentName;
	}

	@JSON
	@Override
	public String getStandardsActAddParish() {
		if (_standardsActAddParish == null) {
			return "";
		}
		else {
			return _standardsActAddParish;
		}
	}

	@Override
	public void setStandardsActAddParish(String standardsActAddParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActAddParish = standardsActAddParish;
	}

	@JSON
	@Override
	public String getStandardsActAddress() {
		if (_standardsActAddress == null) {
			return "";
		}
		else {
			return _standardsActAddress;
		}
	}

	@Override
	public void setStandardsActAddress(String standardsActAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActAddress = standardsActAddress;
	}

	@JSON
	@Override
	public String getStandardsActTel() {
		if (_standardsActTel == null) {
			return "";
		}
		else {
			return _standardsActTel;
		}
	}

	@Override
	public void setStandardsActTel(String standardsActTel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActTel = standardsActTel;
	}

	@JSON
	@Override
	public String getStandardsActWhatsAppNum() {
		if (_standardsActWhatsAppNum == null) {
			return "";
		}
		else {
			return _standardsActWhatsAppNum;
		}
	}

	@Override
	public void setStandardsActWhatsAppNum(String standardsActWhatsAppNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActWhatsAppNum = standardsActWhatsAppNum;
	}

	@JSON
	@Override
	public String getStandardsActEmail() {
		if (_standardsActEmail == null) {
			return "";
		}
		else {
			return _standardsActEmail;
		}
	}

	@Override
	public void setStandardsActEmail(String standardsActEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActEmail = standardsActEmail;
	}

	@JSON
	@Override
	public String getStandardsActFaxNum() {
		if (_standardsActFaxNum == null) {
			return "";
		}
		else {
			return _standardsActFaxNum;
		}
	}

	@Override
	public void setStandardsActFaxNum(String standardsActFaxNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActFaxNum = standardsActFaxNum;
	}

	@JSON
	@Override
	public String getStandardsActOperatorName() {
		if (_standardsActOperatorName == null) {
			return "";
		}
		else {
			return _standardsActOperatorName;
		}
	}

	@Override
	public void setStandardsActOperatorName(String standardsActOperatorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActOperatorName = standardsActOperatorName;
	}

	@JSON
	@Override
	public String getStandardsActOperatorAddress() {
		if (_standardsActOperatorAddress == null) {
			return "";
		}
		else {
			return _standardsActOperatorAddress;
		}
	}

	@Override
	public void setStandardsActOperatorAddress(
		String standardsActOperatorAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActOperatorAddress = standardsActOperatorAddress;
	}

	@JSON
	@Override
	public String getStandardsActParish() {
		if (_standardsActParish == null) {
			return "";
		}
		else {
			return _standardsActParish;
		}
	}

	@Override
	public void setStandardsActParish(String standardsActParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActParish = standardsActParish;
	}

	@JSON
	@Override
	public String getStandardsActOperatorTel() {
		if (_standardsActOperatorTel == null) {
			return "";
		}
		else {
			return _standardsActOperatorTel;
		}
	}

	@Override
	public void setStandardsActOperatorTel(String standardsActOperatorTel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActOperatorTel = standardsActOperatorTel;
	}

	@JSON
	@Override
	public String getStandardActProductManufactured() {
		if (_standardActProductManufactured == null) {
			return "";
		}
		else {
			return _standardActProductManufactured;
		}
	}

	@Override
	public void setStandardActProductManufactured(
		String standardActProductManufactured) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardActProductManufactured = standardActProductManufactured;
	}

	@JSON
	@Override
	public String getStandardActBrandManufactured() {
		if (_standardActBrandManufactured == null) {
			return "";
		}
		else {
			return _standardActBrandManufactured;
		}
	}

	@Override
	public void setStandardActBrandManufactured(
		String standardActBrandManufactured) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardActBrandManufactured = standardActBrandManufactured;
	}

	@JSON
	@Override
	public String getStandardsActProductSize() {
		if (_standardsActProductSize == null) {
			return "";
		}
		else {
			return _standardsActProductSize;
		}
	}

	@Override
	public void setStandardsActProductSize(String standardsActProductSize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActProductSize = standardsActProductSize;
	}

	@JSON
	@Override
	public Date getStandardsActLastDate() {
		return _standardsActLastDate;
	}

	@Override
	public void setStandardsActLastDate(Date standardsActLastDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActLastDate = standardsActLastDate;
	}

	@JSON
	@Override
	public String getStandardsActPurpose() {
		if (_standardsActPurpose == null) {
			return "";
		}
		else {
			return _standardsActPurpose;
		}
	}

	@Override
	public void setStandardsActPurpose(String standardsActPurpose) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActPurpose = standardsActPurpose;
	}

	@JSON
	@Override
	public Date getStandardsActDate() {
		return _standardsActDate;
	}

	@Override
	public void setStandardsActDate(Date standardsActDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_standardsActDate = standardsActDate;
	}

	@JSON
	@Override
	public String getEstablishmentBefore() {
		if (_establishmentBefore == null) {
			return "";
		}
		else {
			return _establishmentBefore;
		}
	}

	@Override
	public void setEstablishmentBefore(String establishmentBefore) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_establishmentBefore = establishmentBefore;
	}

	@JSON
	@Override
	public long getFactoriesApplicationId() {
		return _factoriesApplicationId;
	}

	@Override
	public void setFactoriesApplicationId(long factoriesApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_factoriesApplicationId = factoriesApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFactoriesApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("factoriesApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FactoriesStandardActInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FactoriesStandardActInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FactoriesStandardActInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FactoriesStandardActInfoImpl factoriesStandardActInfoImpl =
			new FactoriesStandardActInfoImpl();

		factoriesStandardActInfoImpl.setFactoriesStandardActId(
			getFactoriesStandardActId());
		factoriesStandardActInfoImpl.setGroupId(getGroupId());
		factoriesStandardActInfoImpl.setCompanyId(getCompanyId());
		factoriesStandardActInfoImpl.setUserId(getUserId());
		factoriesStandardActInfoImpl.setUserName(getUserName());
		factoriesStandardActInfoImpl.setCreateDate(getCreateDate());
		factoriesStandardActInfoImpl.setModifiedDate(getModifiedDate());
		factoriesStandardActInfoImpl.setStandardsActEstablishmentName(
			getStandardsActEstablishmentName());
		factoriesStandardActInfoImpl.setStandardsActAddParish(
			getStandardsActAddParish());
		factoriesStandardActInfoImpl.setStandardsActAddress(
			getStandardsActAddress());
		factoriesStandardActInfoImpl.setStandardsActTel(getStandardsActTel());
		factoriesStandardActInfoImpl.setStandardsActWhatsAppNum(
			getStandardsActWhatsAppNum());
		factoriesStandardActInfoImpl.setStandardsActEmail(
			getStandardsActEmail());
		factoriesStandardActInfoImpl.setStandardsActFaxNum(
			getStandardsActFaxNum());
		factoriesStandardActInfoImpl.setStandardsActOperatorName(
			getStandardsActOperatorName());
		factoriesStandardActInfoImpl.setStandardsActOperatorAddress(
			getStandardsActOperatorAddress());
		factoriesStandardActInfoImpl.setStandardsActParish(
			getStandardsActParish());
		factoriesStandardActInfoImpl.setStandardsActOperatorTel(
			getStandardsActOperatorTel());
		factoriesStandardActInfoImpl.setStandardActProductManufactured(
			getStandardActProductManufactured());
		factoriesStandardActInfoImpl.setStandardActBrandManufactured(
			getStandardActBrandManufactured());
		factoriesStandardActInfoImpl.setStandardsActProductSize(
			getStandardsActProductSize());
		factoriesStandardActInfoImpl.setStandardsActLastDate(
			getStandardsActLastDate());
		factoriesStandardActInfoImpl.setStandardsActPurpose(
			getStandardsActPurpose());
		factoriesStandardActInfoImpl.setStandardsActDate(getStandardsActDate());
		factoriesStandardActInfoImpl.setEstablishmentBefore(
			getEstablishmentBefore());
		factoriesStandardActInfoImpl.setFactoriesApplicationId(
			getFactoriesApplicationId());

		factoriesStandardActInfoImpl.resetOriginalValues();

		return factoriesStandardActInfoImpl;
	}

	@Override
	public FactoriesStandardActInfo cloneWithOriginalValues() {
		FactoriesStandardActInfoImpl factoriesStandardActInfoImpl =
			new FactoriesStandardActInfoImpl();

		factoriesStandardActInfoImpl.setFactoriesStandardActId(
			this.<Long>getColumnOriginalValue("factoriesStandardActId"));
		factoriesStandardActInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		factoriesStandardActInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		factoriesStandardActInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		factoriesStandardActInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		factoriesStandardActInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		factoriesStandardActInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		factoriesStandardActInfoImpl.setStandardsActEstablishmentName(
			this.<String>getColumnOriginalValue(
				"standardsActEstablishmentName"));
		factoriesStandardActInfoImpl.setStandardsActAddParish(
			this.<String>getColumnOriginalValue("standardsActAddParish"));
		factoriesStandardActInfoImpl.setStandardsActAddress(
			this.<String>getColumnOriginalValue("standardsActAddress"));
		factoriesStandardActInfoImpl.setStandardsActTel(
			this.<String>getColumnOriginalValue("standardsActTel"));
		factoriesStandardActInfoImpl.setStandardsActWhatsAppNum(
			this.<String>getColumnOriginalValue("standardsActWhatsAppNum"));
		factoriesStandardActInfoImpl.setStandardsActEmail(
			this.<String>getColumnOriginalValue("standardsActEmail"));
		factoriesStandardActInfoImpl.setStandardsActFaxNum(
			this.<String>getColumnOriginalValue("standardsActFaxNum"));
		factoriesStandardActInfoImpl.setStandardsActOperatorName(
			this.<String>getColumnOriginalValue("standardsActOperatorName"));
		factoriesStandardActInfoImpl.setStandardsActOperatorAddress(
			this.<String>getColumnOriginalValue("standardsActOperatorAddress"));
		factoriesStandardActInfoImpl.setStandardsActParish(
			this.<String>getColumnOriginalValue("standardsActParish"));
		factoriesStandardActInfoImpl.setStandardsActOperatorTel(
			this.<String>getColumnOriginalValue("standardsActOperatorTel"));
		factoriesStandardActInfoImpl.setStandardActProductManufactured(
			this.<String>getColumnOriginalValue(
				"standardActProductManufactured"));
		factoriesStandardActInfoImpl.setStandardActBrandManufactured(
			this.<String>getColumnOriginalValue(
				"standardActBrandManufactured"));
		factoriesStandardActInfoImpl.setStandardsActProductSize(
			this.<String>getColumnOriginalValue("standardsActProductSize"));
		factoriesStandardActInfoImpl.setStandardsActLastDate(
			this.<Date>getColumnOriginalValue("standardsActLastDate"));
		factoriesStandardActInfoImpl.setStandardsActPurpose(
			this.<String>getColumnOriginalValue("standardsActPurpose"));
		factoriesStandardActInfoImpl.setStandardsActDate(
			this.<Date>getColumnOriginalValue("standardsActDate"));
		factoriesStandardActInfoImpl.setEstablishmentBefore(
			this.<String>getColumnOriginalValue("establishmentBefore"));
		factoriesStandardActInfoImpl.setFactoriesApplicationId(
			this.<Long>getColumnOriginalValue("factoriesApplicationId"));

		return factoriesStandardActInfoImpl;
	}

	@Override
	public int compareTo(FactoriesStandardActInfo factoriesStandardActInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), factoriesStandardActInfo.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FactoriesStandardActInfo)) {
			return false;
		}

		FactoriesStandardActInfo factoriesStandardActInfo =
			(FactoriesStandardActInfo)object;

		long primaryKey = factoriesStandardActInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FactoriesStandardActInfo> toCacheModel() {
		FactoriesStandardActInfoCacheModel factoriesStandardActInfoCacheModel =
			new FactoriesStandardActInfoCacheModel();

		factoriesStandardActInfoCacheModel.factoriesStandardActId =
			getFactoriesStandardActId();

		factoriesStandardActInfoCacheModel.groupId = getGroupId();

		factoriesStandardActInfoCacheModel.companyId = getCompanyId();

		factoriesStandardActInfoCacheModel.userId = getUserId();

		factoriesStandardActInfoCacheModel.userName = getUserName();

		String userName = factoriesStandardActInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			factoriesStandardActInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			factoriesStandardActInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			factoriesStandardActInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			factoriesStandardActInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			factoriesStandardActInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		factoriesStandardActInfoCacheModel.standardsActEstablishmentName =
			getStandardsActEstablishmentName();

		String standardsActEstablishmentName =
			factoriesStandardActInfoCacheModel.standardsActEstablishmentName;

		if ((standardsActEstablishmentName != null) &&
			(standardsActEstablishmentName.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActEstablishmentName =
				null;
		}

		factoriesStandardActInfoCacheModel.standardsActAddParish =
			getStandardsActAddParish();

		String standardsActAddParish =
			factoriesStandardActInfoCacheModel.standardsActAddParish;

		if ((standardsActAddParish != null) &&
			(standardsActAddParish.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActAddParish = null;
		}

		factoriesStandardActInfoCacheModel.standardsActAddress =
			getStandardsActAddress();

		String standardsActAddress =
			factoriesStandardActInfoCacheModel.standardsActAddress;

		if ((standardsActAddress != null) &&
			(standardsActAddress.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActAddress = null;
		}

		factoriesStandardActInfoCacheModel.standardsActTel =
			getStandardsActTel();

		String standardsActTel =
			factoriesStandardActInfoCacheModel.standardsActTel;

		if ((standardsActTel != null) && (standardsActTel.length() == 0)) {
			factoriesStandardActInfoCacheModel.standardsActTel = null;
		}

		factoriesStandardActInfoCacheModel.standardsActWhatsAppNum =
			getStandardsActWhatsAppNum();

		String standardsActWhatsAppNum =
			factoriesStandardActInfoCacheModel.standardsActWhatsAppNum;

		if ((standardsActWhatsAppNum != null) &&
			(standardsActWhatsAppNum.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActWhatsAppNum = null;
		}

		factoriesStandardActInfoCacheModel.standardsActEmail =
			getStandardsActEmail();

		String standardsActEmail =
			factoriesStandardActInfoCacheModel.standardsActEmail;

		if ((standardsActEmail != null) && (standardsActEmail.length() == 0)) {
			factoriesStandardActInfoCacheModel.standardsActEmail = null;
		}

		factoriesStandardActInfoCacheModel.standardsActFaxNum =
			getStandardsActFaxNum();

		String standardsActFaxNum =
			factoriesStandardActInfoCacheModel.standardsActFaxNum;

		if ((standardsActFaxNum != null) &&
			(standardsActFaxNum.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActFaxNum = null;
		}

		factoriesStandardActInfoCacheModel.standardsActOperatorName =
			getStandardsActOperatorName();

		String standardsActOperatorName =
			factoriesStandardActInfoCacheModel.standardsActOperatorName;

		if ((standardsActOperatorName != null) &&
			(standardsActOperatorName.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActOperatorName = null;
		}

		factoriesStandardActInfoCacheModel.standardsActOperatorAddress =
			getStandardsActOperatorAddress();

		String standardsActOperatorAddress =
			factoriesStandardActInfoCacheModel.standardsActOperatorAddress;

		if ((standardsActOperatorAddress != null) &&
			(standardsActOperatorAddress.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActOperatorAddress =
				null;
		}

		factoriesStandardActInfoCacheModel.standardsActParish =
			getStandardsActParish();

		String standardsActParish =
			factoriesStandardActInfoCacheModel.standardsActParish;

		if ((standardsActParish != null) &&
			(standardsActParish.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActParish = null;
		}

		factoriesStandardActInfoCacheModel.standardsActOperatorTel =
			getStandardsActOperatorTel();

		String standardsActOperatorTel =
			factoriesStandardActInfoCacheModel.standardsActOperatorTel;

		if ((standardsActOperatorTel != null) &&
			(standardsActOperatorTel.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActOperatorTel = null;
		}

		factoriesStandardActInfoCacheModel.standardActProductManufactured =
			getStandardActProductManufactured();

		String standardActProductManufactured =
			factoriesStandardActInfoCacheModel.standardActProductManufactured;

		if ((standardActProductManufactured != null) &&
			(standardActProductManufactured.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardActProductManufactured =
				null;
		}

		factoriesStandardActInfoCacheModel.standardActBrandManufactured =
			getStandardActBrandManufactured();

		String standardActBrandManufactured =
			factoriesStandardActInfoCacheModel.standardActBrandManufactured;

		if ((standardActBrandManufactured != null) &&
			(standardActBrandManufactured.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardActBrandManufactured =
				null;
		}

		factoriesStandardActInfoCacheModel.standardsActProductSize =
			getStandardsActProductSize();

		String standardsActProductSize =
			factoriesStandardActInfoCacheModel.standardsActProductSize;

		if ((standardsActProductSize != null) &&
			(standardsActProductSize.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActProductSize = null;
		}

		Date standardsActLastDate = getStandardsActLastDate();

		if (standardsActLastDate != null) {
			factoriesStandardActInfoCacheModel.standardsActLastDate =
				standardsActLastDate.getTime();
		}
		else {
			factoriesStandardActInfoCacheModel.standardsActLastDate =
				Long.MIN_VALUE;
		}

		factoriesStandardActInfoCacheModel.standardsActPurpose =
			getStandardsActPurpose();

		String standardsActPurpose =
			factoriesStandardActInfoCacheModel.standardsActPurpose;

		if ((standardsActPurpose != null) &&
			(standardsActPurpose.length() == 0)) {

			factoriesStandardActInfoCacheModel.standardsActPurpose = null;
		}

		Date standardsActDate = getStandardsActDate();

		if (standardsActDate != null) {
			factoriesStandardActInfoCacheModel.standardsActDate =
				standardsActDate.getTime();
		}
		else {
			factoriesStandardActInfoCacheModel.standardsActDate =
				Long.MIN_VALUE;
		}

		factoriesStandardActInfoCacheModel.establishmentBefore =
			getEstablishmentBefore();

		String establishmentBefore =
			factoriesStandardActInfoCacheModel.establishmentBefore;

		if ((establishmentBefore != null) &&
			(establishmentBefore.length() == 0)) {

			factoriesStandardActInfoCacheModel.establishmentBefore = null;
		}

		factoriesStandardActInfoCacheModel.factoriesApplicationId =
			getFactoriesApplicationId();

		return factoriesStandardActInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FactoriesStandardActInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FactoriesStandardActInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FactoriesStandardActInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FactoriesStandardActInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FactoriesStandardActInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						FactoriesStandardActInfo.class, ModelWrapper.class);

	}

	private long _factoriesStandardActId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _standardsActEstablishmentName;
	private String _standardsActAddParish;
	private String _standardsActAddress;
	private String _standardsActTel;
	private String _standardsActWhatsAppNum;
	private String _standardsActEmail;
	private String _standardsActFaxNum;
	private String _standardsActOperatorName;
	private String _standardsActOperatorAddress;
	private String _standardsActParish;
	private String _standardsActOperatorTel;
	private String _standardActProductManufactured;
	private String _standardActBrandManufactured;
	private String _standardsActProductSize;
	private Date _standardsActLastDate;
	private String _standardsActPurpose;
	private Date _standardsActDate;
	private String _establishmentBefore;
	private long _factoriesApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FactoriesStandardActInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FactoriesStandardActInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"factoriesStandardActId", _factoriesStandardActId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"standardsActEstablishmentName", _standardsActEstablishmentName);
		_columnOriginalValues.put(
			"standardsActAddParish", _standardsActAddParish);
		_columnOriginalValues.put("standardsActAddress", _standardsActAddress);
		_columnOriginalValues.put("standardsActTel", _standardsActTel);
		_columnOriginalValues.put(
			"standardsActWhatsAppNum", _standardsActWhatsAppNum);
		_columnOriginalValues.put("standardsActEmail", _standardsActEmail);
		_columnOriginalValues.put("standardsActFaxNum", _standardsActFaxNum);
		_columnOriginalValues.put(
			"standardsActOperatorName", _standardsActOperatorName);
		_columnOriginalValues.put(
			"standardsActOperatorAddress", _standardsActOperatorAddress);
		_columnOriginalValues.put("standardsActParish", _standardsActParish);
		_columnOriginalValues.put(
			"standardsActOperatorTel", _standardsActOperatorTel);
		_columnOriginalValues.put(
			"standardActProductManufactured", _standardActProductManufactured);
		_columnOriginalValues.put(
			"standardActBrandManufactured", _standardActBrandManufactured);
		_columnOriginalValues.put(
			"standardsActProductSize", _standardsActProductSize);
		_columnOriginalValues.put(
			"standardsActLastDate", _standardsActLastDate);
		_columnOriginalValues.put("standardsActPurpose", _standardsActPurpose);
		_columnOriginalValues.put("standardsActDate", _standardsActDate);
		_columnOriginalValues.put("establishmentBefore", _establishmentBefore);
		_columnOriginalValues.put(
			"factoriesApplicationId", _factoriesApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("factoriesStandardActId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("standardsActEstablishmentName", 128L);

		columnBitmasks.put("standardsActAddParish", 256L);

		columnBitmasks.put("standardsActAddress", 512L);

		columnBitmasks.put("standardsActTel", 1024L);

		columnBitmasks.put("standardsActWhatsAppNum", 2048L);

		columnBitmasks.put("standardsActEmail", 4096L);

		columnBitmasks.put("standardsActFaxNum", 8192L);

		columnBitmasks.put("standardsActOperatorName", 16384L);

		columnBitmasks.put("standardsActOperatorAddress", 32768L);

		columnBitmasks.put("standardsActParish", 65536L);

		columnBitmasks.put("standardsActOperatorTel", 131072L);

		columnBitmasks.put("standardActProductManufactured", 262144L);

		columnBitmasks.put("standardActBrandManufactured", 524288L);

		columnBitmasks.put("standardsActProductSize", 1048576L);

		columnBitmasks.put("standardsActLastDate", 2097152L);

		columnBitmasks.put("standardsActPurpose", 4194304L);

		columnBitmasks.put("standardsActDate", 8388608L);

		columnBitmasks.put("establishmentBefore", 16777216L);

		columnBitmasks.put("factoriesApplicationId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FactoriesStandardActInfo _escapedModel;

}