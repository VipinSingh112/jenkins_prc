/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.acquire.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.acquire.application.form.service.model.AcquireApplication;
import com.nbp.acquire.application.form.service.model.AcquireApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcquireApplication service. Represents a row in the &quot;nbp_acquire_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcquireApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcquireApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcquireApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class AcquireApplicationModelImpl
	extends BaseModelImpl<AcquireApplication>
	implements AcquireApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acquire application model instance should use the <code>AcquireApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_acquire_application";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"acquireApplicationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"entityId", Types.VARCHAR}, {"status", Types.INTEGER},
		{"applicationNumber", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"icmDocumentPath", Types.VARCHAR},
		{"divestmentOptions", Types.VARCHAR}, {"tenureType", Types.VARCHAR},
		{"currentUse", Types.VARCHAR}, {"pdfFileEntryId", Types.BIGINT},
		{"appCurrentStageName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("acquireApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("divestmentOptions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tenureType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_acquire_application (uuid_ VARCHAR(75) null,acquireApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityId VARCHAR(75) null,status INTEGER,applicationNumber VARCHAR(75) null,caseId VARCHAR(500) null,icmDocumentPath VARCHAR(500) null,divestmentOptions VARCHAR(75) null,tenureType VARCHAR(75) null,currentUse VARCHAR(75) null,pdfFileEntryId LONG,appCurrentStageName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_acquire_application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acquireApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_acquire_application.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACQUIREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcquireApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _acquireApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAcquireApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _acquireApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcquireApplication.class;
	}

	@Override
	public String getModelClassName() {
		return AcquireApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcquireApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcquireApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AcquireApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcquireApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcquireApplication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcquireApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcquireApplication, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcquireApplication, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AcquireApplication, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AcquireApplication, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AcquireApplication, Object>>();

			attributeGetterFunctions.put("uuid", AcquireApplication::getUuid);
			attributeGetterFunctions.put(
				"acquireApplicationId",
				AcquireApplication::getAcquireApplicationId);
			attributeGetterFunctions.put(
				"groupId", AcquireApplication::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AcquireApplication::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AcquireApplication::getUserId);
			attributeGetterFunctions.put(
				"userName", AcquireApplication::getUserName);
			attributeGetterFunctions.put(
				"createDate", AcquireApplication::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AcquireApplication::getModifiedDate);
			attributeGetterFunctions.put(
				"entityId", AcquireApplication::getEntityId);
			attributeGetterFunctions.put(
				"status", AcquireApplication::getStatus);
			attributeGetterFunctions.put(
				"applicationNumber", AcquireApplication::getApplicationNumber);
			attributeGetterFunctions.put(
				"caseId", AcquireApplication::getCaseId);
			attributeGetterFunctions.put(
				"icmDocumentPath", AcquireApplication::getIcmDocumentPath);
			attributeGetterFunctions.put(
				"divestmentOptions", AcquireApplication::getDivestmentOptions);
			attributeGetterFunctions.put(
				"tenureType", AcquireApplication::getTenureType);
			attributeGetterFunctions.put(
				"currentUse", AcquireApplication::getCurrentUse);
			attributeGetterFunctions.put(
				"pdfFileEntryId", AcquireApplication::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"appCurrentStageName",
				AcquireApplication::getAppCurrentStageName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AcquireApplication, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcquireApplication, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AcquireApplication, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setUuid);
			attributeSetterBiConsumers.put(
				"acquireApplicationId",
				(BiConsumer<AcquireApplication, Long>)
					AcquireApplication::setAcquireApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AcquireApplication, Long>)
					AcquireApplication::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AcquireApplication, Long>)
					AcquireApplication::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AcquireApplication, Long>)
					AcquireApplication::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AcquireApplication, Date>)
					AcquireApplication::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AcquireApplication, Date>)
					AcquireApplication::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setEntityId);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<AcquireApplication, Integer>)
					AcquireApplication::setStatus);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setCaseId);
			attributeSetterBiConsumers.put(
				"icmDocumentPath",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setIcmDocumentPath);
			attributeSetterBiConsumers.put(
				"divestmentOptions",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setDivestmentOptions);
			attributeSetterBiConsumers.put(
				"tenureType",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setTenureType);
			attributeSetterBiConsumers.put(
				"currentUse",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setCurrentUse);
			attributeSetterBiConsumers.put(
				"pdfFileEntryId",
				(BiConsumer<AcquireApplication, Long>)
					AcquireApplication::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<AcquireApplication, String>)
					AcquireApplication::setAppCurrentStageName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAcquireApplicationId() {
		return _acquireApplicationId;
	}

	@Override
	public void setAcquireApplicationId(long acquireApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireApplicationId = acquireApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAcquireApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getIcmDocumentPath() {
		if (_icmDocumentPath == null) {
			return "";
		}
		else {
			return _icmDocumentPath;
		}
	}

	@Override
	public void setIcmDocumentPath(String icmDocumentPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentPath = icmDocumentPath;
	}

	@JSON
	@Override
	public String getDivestmentOptions() {
		if (_divestmentOptions == null) {
			return "";
		}
		else {
			return _divestmentOptions;
		}
	}

	@Override
	public void setDivestmentOptions(String divestmentOptions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_divestmentOptions = divestmentOptions;
	}

	@JSON
	@Override
	public String getTenureType() {
		if (_tenureType == null) {
			return "";
		}
		else {
			return _tenureType;
		}
	}

	@Override
	public void setTenureType(String tenureType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tenureType = tenureType;
	}

	@JSON
	@Override
	public String getCurrentUse() {
		if (_currentUse == null) {
			return "";
		}
		else {
			return _currentUse;
		}
	}

	@Override
	public void setCurrentUse(String currentUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentUse = currentUse;
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _pdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long pdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pdfFileEntryId = pdfFileEntryId;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AcquireApplication.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AcquireApplication.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcquireApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcquireApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcquireApplicationImpl acquireApplicationImpl =
			new AcquireApplicationImpl();

		acquireApplicationImpl.setUuid(getUuid());
		acquireApplicationImpl.setAcquireApplicationId(
			getAcquireApplicationId());
		acquireApplicationImpl.setGroupId(getGroupId());
		acquireApplicationImpl.setCompanyId(getCompanyId());
		acquireApplicationImpl.setUserId(getUserId());
		acquireApplicationImpl.setUserName(getUserName());
		acquireApplicationImpl.setCreateDate(getCreateDate());
		acquireApplicationImpl.setModifiedDate(getModifiedDate());
		acquireApplicationImpl.setEntityId(getEntityId());
		acquireApplicationImpl.setStatus(getStatus());
		acquireApplicationImpl.setApplicationNumber(getApplicationNumber());
		acquireApplicationImpl.setCaseId(getCaseId());
		acquireApplicationImpl.setIcmDocumentPath(getIcmDocumentPath());
		acquireApplicationImpl.setDivestmentOptions(getDivestmentOptions());
		acquireApplicationImpl.setTenureType(getTenureType());
		acquireApplicationImpl.setCurrentUse(getCurrentUse());
		acquireApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		acquireApplicationImpl.setAppCurrentStageName(getAppCurrentStageName());

		acquireApplicationImpl.resetOriginalValues();

		return acquireApplicationImpl;
	}

	@Override
	public AcquireApplication cloneWithOriginalValues() {
		AcquireApplicationImpl acquireApplicationImpl =
			new AcquireApplicationImpl();

		acquireApplicationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		acquireApplicationImpl.setAcquireApplicationId(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));
		acquireApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		acquireApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		acquireApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		acquireApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		acquireApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		acquireApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		acquireApplicationImpl.setEntityId(
			this.<String>getColumnOriginalValue("entityId"));
		acquireApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		acquireApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		acquireApplicationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		acquireApplicationImpl.setIcmDocumentPath(
			this.<String>getColumnOriginalValue("icmDocumentPath"));
		acquireApplicationImpl.setDivestmentOptions(
			this.<String>getColumnOriginalValue("divestmentOptions"));
		acquireApplicationImpl.setTenureType(
			this.<String>getColumnOriginalValue("tenureType"));
		acquireApplicationImpl.setCurrentUse(
			this.<String>getColumnOriginalValue("currentUse"));
		acquireApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("pdfFileEntryId"));
		acquireApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));

		return acquireApplicationImpl;
	}

	@Override
	public int compareTo(AcquireApplication acquireApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), acquireApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcquireApplication)) {
			return false;
		}

		AcquireApplication acquireApplication = (AcquireApplication)object;

		long primaryKey = acquireApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcquireApplication> toCacheModel() {
		AcquireApplicationCacheModel acquireApplicationCacheModel =
			new AcquireApplicationCacheModel();

		acquireApplicationCacheModel.uuid = getUuid();

		String uuid = acquireApplicationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			acquireApplicationCacheModel.uuid = null;
		}

		acquireApplicationCacheModel.acquireApplicationId =
			getAcquireApplicationId();

		acquireApplicationCacheModel.groupId = getGroupId();

		acquireApplicationCacheModel.companyId = getCompanyId();

		acquireApplicationCacheModel.userId = getUserId();

		acquireApplicationCacheModel.userName = getUserName();

		String userName = acquireApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			acquireApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			acquireApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			acquireApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			acquireApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			acquireApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		acquireApplicationCacheModel.entityId = getEntityId();

		String entityId = acquireApplicationCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			acquireApplicationCacheModel.entityId = null;
		}

		acquireApplicationCacheModel.status = getStatus();

		acquireApplicationCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber =
			acquireApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			acquireApplicationCacheModel.applicationNumber = null;
		}

		acquireApplicationCacheModel.caseId = getCaseId();

		String caseId = acquireApplicationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			acquireApplicationCacheModel.caseId = null;
		}

		acquireApplicationCacheModel.icmDocumentPath = getIcmDocumentPath();

		String icmDocumentPath = acquireApplicationCacheModel.icmDocumentPath;

		if ((icmDocumentPath != null) && (icmDocumentPath.length() == 0)) {
			acquireApplicationCacheModel.icmDocumentPath = null;
		}

		acquireApplicationCacheModel.divestmentOptions = getDivestmentOptions();

		String divestmentOptions =
			acquireApplicationCacheModel.divestmentOptions;

		if ((divestmentOptions != null) && (divestmentOptions.length() == 0)) {
			acquireApplicationCacheModel.divestmentOptions = null;
		}

		acquireApplicationCacheModel.tenureType = getTenureType();

		String tenureType = acquireApplicationCacheModel.tenureType;

		if ((tenureType != null) && (tenureType.length() == 0)) {
			acquireApplicationCacheModel.tenureType = null;
		}

		acquireApplicationCacheModel.currentUse = getCurrentUse();

		String currentUse = acquireApplicationCacheModel.currentUse;

		if ((currentUse != null) && (currentUse.length() == 0)) {
			acquireApplicationCacheModel.currentUse = null;
		}

		acquireApplicationCacheModel.pdfFileEntryId = getPdfFileEntryId();

		acquireApplicationCacheModel.appCurrentStageName =
			getAppCurrentStageName();

		String appCurrentStageName =
			acquireApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			acquireApplicationCacheModel.appCurrentStageName = null;
		}

		return acquireApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcquireApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcquireApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AcquireApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AcquireApplication>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AcquireApplication.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _acquireApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityId;
	private int _status;
	private String _applicationNumber;
	private String _caseId;
	private String _icmDocumentPath;
	private String _divestmentOptions;
	private String _tenureType;
	private String _currentUse;
	private long _pdfFileEntryId;
	private String _appCurrentStageName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AcquireApplication, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcquireApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"acquireApplicationId", _acquireApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("icmDocumentPath", _icmDocumentPath);
		_columnOriginalValues.put("divestmentOptions", _divestmentOptions);
		_columnOriginalValues.put("tenureType", _tenureType);
		_columnOriginalValues.put("currentUse", _currentUse);
		_columnOriginalValues.put("pdfFileEntryId", _pdfFileEntryId);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("acquireApplicationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("entityId", 256L);

		columnBitmasks.put("status", 512L);

		columnBitmasks.put("applicationNumber", 1024L);

		columnBitmasks.put("caseId", 2048L);

		columnBitmasks.put("icmDocumentPath", 4096L);

		columnBitmasks.put("divestmentOptions", 8192L);

		columnBitmasks.put("tenureType", 16384L);

		columnBitmasks.put("currentUse", 32768L);

		columnBitmasks.put("pdfFileEntryId", 65536L);

		columnBitmasks.put("appCurrentStageName", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcquireApplication _escapedModel;

}