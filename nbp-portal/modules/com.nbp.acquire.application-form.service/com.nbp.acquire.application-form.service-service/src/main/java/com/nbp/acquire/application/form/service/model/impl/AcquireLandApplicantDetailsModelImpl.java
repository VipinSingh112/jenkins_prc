/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.acquire.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.acquire.application.form.service.model.AcquireLandApplicantDetails;
import com.nbp.acquire.application.form.service.model.AcquireLandApplicantDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcquireLandApplicantDetails service. Represents a row in the &quot;nbp_acquire_land_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcquireLandApplicantDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcquireLandApplicantDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcquireLandApplicantDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class AcquireLandApplicantDetailsModelImpl
	extends BaseModelImpl<AcquireLandApplicantDetails>
	implements AcquireLandApplicantDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acquire land applicant details model instance should use the <code>AcquireLandApplicantDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_acquire_land_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"acquireLandApplicantDetailsId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"landApplicantName", Types.VARCHAR},
		{"landApplicantGender", Types.VARCHAR},
		{"landApplicantDob", Types.TIMESTAMP},
		{"landApplicantTrnNum", Types.VARCHAR},
		{"landApplicantHomeAddr", Types.VARCHAR},
		{"landApplicantMailingAddr", Types.VARCHAR},
		{"landApplicantPhoneNum", Types.VARCHAR},
		{"landApplicantEmail", Types.VARCHAR},
		{"acquireApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("acquireLandApplicantDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("landApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landApplicantGender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landApplicantDob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("landApplicantTrnNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landApplicantHomeAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landApplicantMailingAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landApplicantPhoneNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landApplicantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("acquireApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_acquire_land_details (acquireLandApplicantDetailsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,landApplicantName VARCHAR(75) null,landApplicantGender VARCHAR(75) null,landApplicantDob DATE null,landApplicantTrnNum VARCHAR(75) null,landApplicantHomeAddr VARCHAR(500) null,landApplicantMailingAddr VARCHAR(500) null,landApplicantPhoneNum VARCHAR(75) null,landApplicantEmail VARCHAR(75) null,acquireApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_acquire_land_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acquireLandApplicantDetails.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_acquire_land_details.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACQUIREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcquireLandApplicantDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _acquireLandApplicantDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAcquireLandApplicantDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _acquireLandApplicantDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcquireLandApplicantDetails.class;
	}

	@Override
	public String getModelClassName() {
		return AcquireLandApplicantDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcquireLandApplicantDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcquireLandApplicantDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireLandApplicantDetails, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(AcquireLandApplicantDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcquireLandApplicantDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcquireLandApplicantDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcquireLandApplicantDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcquireLandApplicantDetails, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcquireLandApplicantDetails, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AcquireLandApplicantDetails, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AcquireLandApplicantDetails, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<AcquireLandApplicantDetails, Object>>();

			attributeGetterFunctions.put(
				"acquireLandApplicantDetailsId",
				AcquireLandApplicantDetails::getAcquireLandApplicantDetailsId);
			attributeGetterFunctions.put(
				"groupId", AcquireLandApplicantDetails::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AcquireLandApplicantDetails::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AcquireLandApplicantDetails::getUserId);
			attributeGetterFunctions.put(
				"userName", AcquireLandApplicantDetails::getUserName);
			attributeGetterFunctions.put(
				"createDate", AcquireLandApplicantDetails::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AcquireLandApplicantDetails::getModifiedDate);
			attributeGetterFunctions.put(
				"landApplicantName",
				AcquireLandApplicantDetails::getLandApplicantName);
			attributeGetterFunctions.put(
				"landApplicantGender",
				AcquireLandApplicantDetails::getLandApplicantGender);
			attributeGetterFunctions.put(
				"landApplicantDob",
				AcquireLandApplicantDetails::getLandApplicantDob);
			attributeGetterFunctions.put(
				"landApplicantTrnNum",
				AcquireLandApplicantDetails::getLandApplicantTrnNum);
			attributeGetterFunctions.put(
				"landApplicantHomeAddr",
				AcquireLandApplicantDetails::getLandApplicantHomeAddr);
			attributeGetterFunctions.put(
				"landApplicantMailingAddr",
				AcquireLandApplicantDetails::getLandApplicantMailingAddr);
			attributeGetterFunctions.put(
				"landApplicantPhoneNum",
				AcquireLandApplicantDetails::getLandApplicantPhoneNum);
			attributeGetterFunctions.put(
				"landApplicantEmail",
				AcquireLandApplicantDetails::getLandApplicantEmail);
			attributeGetterFunctions.put(
				"acquireApplicationId",
				AcquireLandApplicantDetails::getAcquireApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AcquireLandApplicantDetails, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcquireLandApplicantDetails, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AcquireLandApplicantDetails, ?>>();

			attributeSetterBiConsumers.put(
				"acquireLandApplicantDetailsId",
				(BiConsumer<AcquireLandApplicantDetails, Long>)
					AcquireLandApplicantDetails::
						setAcquireLandApplicantDetailsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AcquireLandApplicantDetails, Long>)
					AcquireLandApplicantDetails::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AcquireLandApplicantDetails, Long>)
					AcquireLandApplicantDetails::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AcquireLandApplicantDetails, Long>)
					AcquireLandApplicantDetails::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AcquireLandApplicantDetails, String>)
					AcquireLandApplicantDetails::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AcquireLandApplicantDetails, Date>)
					AcquireLandApplicantDetails::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AcquireLandApplicantDetails, Date>)
					AcquireLandApplicantDetails::setModifiedDate);
			attributeSetterBiConsumers.put(
				"landApplicantName",
				(BiConsumer<AcquireLandApplicantDetails, String>)
					AcquireLandApplicantDetails::setLandApplicantName);
			attributeSetterBiConsumers.put(
				"landApplicantGender",
				(BiConsumer<AcquireLandApplicantDetails, String>)
					AcquireLandApplicantDetails::setLandApplicantGender);
			attributeSetterBiConsumers.put(
				"landApplicantDob",
				(BiConsumer<AcquireLandApplicantDetails, Date>)
					AcquireLandApplicantDetails::setLandApplicantDob);
			attributeSetterBiConsumers.put(
				"landApplicantTrnNum",
				(BiConsumer<AcquireLandApplicantDetails, String>)
					AcquireLandApplicantDetails::setLandApplicantTrnNum);
			attributeSetterBiConsumers.put(
				"landApplicantHomeAddr",
				(BiConsumer<AcquireLandApplicantDetails, String>)
					AcquireLandApplicantDetails::setLandApplicantHomeAddr);
			attributeSetterBiConsumers.put(
				"landApplicantMailingAddr",
				(BiConsumer<AcquireLandApplicantDetails, String>)
					AcquireLandApplicantDetails::setLandApplicantMailingAddr);
			attributeSetterBiConsumers.put(
				"landApplicantPhoneNum",
				(BiConsumer<AcquireLandApplicantDetails, String>)
					AcquireLandApplicantDetails::setLandApplicantPhoneNum);
			attributeSetterBiConsumers.put(
				"landApplicantEmail",
				(BiConsumer<AcquireLandApplicantDetails, String>)
					AcquireLandApplicantDetails::setLandApplicantEmail);
			attributeSetterBiConsumers.put(
				"acquireApplicationId",
				(BiConsumer<AcquireLandApplicantDetails, Long>)
					AcquireLandApplicantDetails::setAcquireApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAcquireLandApplicantDetailsId() {
		return _acquireLandApplicantDetailsId;
	}

	@Override
	public void setAcquireLandApplicantDetailsId(
		long acquireLandApplicantDetailsId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireLandApplicantDetailsId = acquireLandApplicantDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLandApplicantName() {
		if (_landApplicantName == null) {
			return "";
		}
		else {
			return _landApplicantName;
		}
	}

	@Override
	public void setLandApplicantName(String landApplicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landApplicantName = landApplicantName;
	}

	@JSON
	@Override
	public String getLandApplicantGender() {
		if (_landApplicantGender == null) {
			return "";
		}
		else {
			return _landApplicantGender;
		}
	}

	@Override
	public void setLandApplicantGender(String landApplicantGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landApplicantGender = landApplicantGender;
	}

	@JSON
	@Override
	public Date getLandApplicantDob() {
		return _landApplicantDob;
	}

	@Override
	public void setLandApplicantDob(Date landApplicantDob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landApplicantDob = landApplicantDob;
	}

	@JSON
	@Override
	public String getLandApplicantTrnNum() {
		if (_landApplicantTrnNum == null) {
			return "";
		}
		else {
			return _landApplicantTrnNum;
		}
	}

	@Override
	public void setLandApplicantTrnNum(String landApplicantTrnNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landApplicantTrnNum = landApplicantTrnNum;
	}

	@JSON
	@Override
	public String getLandApplicantHomeAddr() {
		if (_landApplicantHomeAddr == null) {
			return "";
		}
		else {
			return _landApplicantHomeAddr;
		}
	}

	@Override
	public void setLandApplicantHomeAddr(String landApplicantHomeAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landApplicantHomeAddr = landApplicantHomeAddr;
	}

	@JSON
	@Override
	public String getLandApplicantMailingAddr() {
		if (_landApplicantMailingAddr == null) {
			return "";
		}
		else {
			return _landApplicantMailingAddr;
		}
	}

	@Override
	public void setLandApplicantMailingAddr(String landApplicantMailingAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landApplicantMailingAddr = landApplicantMailingAddr;
	}

	@JSON
	@Override
	public String getLandApplicantPhoneNum() {
		if (_landApplicantPhoneNum == null) {
			return "";
		}
		else {
			return _landApplicantPhoneNum;
		}
	}

	@Override
	public void setLandApplicantPhoneNum(String landApplicantPhoneNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landApplicantPhoneNum = landApplicantPhoneNum;
	}

	@JSON
	@Override
	public String getLandApplicantEmail() {
		if (_landApplicantEmail == null) {
			return "";
		}
		else {
			return _landApplicantEmail;
		}
	}

	@Override
	public void setLandApplicantEmail(String landApplicantEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landApplicantEmail = landApplicantEmail;
	}

	@JSON
	@Override
	public long getAcquireApplicationId() {
		return _acquireApplicationId;
	}

	@Override
	public void setAcquireApplicationId(long acquireApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireApplicationId = acquireApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAcquireApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AcquireLandApplicantDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcquireLandApplicantDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcquireLandApplicantDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcquireLandApplicantDetailsImpl acquireLandApplicantDetailsImpl =
			new AcquireLandApplicantDetailsImpl();

		acquireLandApplicantDetailsImpl.setAcquireLandApplicantDetailsId(
			getAcquireLandApplicantDetailsId());
		acquireLandApplicantDetailsImpl.setGroupId(getGroupId());
		acquireLandApplicantDetailsImpl.setCompanyId(getCompanyId());
		acquireLandApplicantDetailsImpl.setUserId(getUserId());
		acquireLandApplicantDetailsImpl.setUserName(getUserName());
		acquireLandApplicantDetailsImpl.setCreateDate(getCreateDate());
		acquireLandApplicantDetailsImpl.setModifiedDate(getModifiedDate());
		acquireLandApplicantDetailsImpl.setLandApplicantName(
			getLandApplicantName());
		acquireLandApplicantDetailsImpl.setLandApplicantGender(
			getLandApplicantGender());
		acquireLandApplicantDetailsImpl.setLandApplicantDob(
			getLandApplicantDob());
		acquireLandApplicantDetailsImpl.setLandApplicantTrnNum(
			getLandApplicantTrnNum());
		acquireLandApplicantDetailsImpl.setLandApplicantHomeAddr(
			getLandApplicantHomeAddr());
		acquireLandApplicantDetailsImpl.setLandApplicantMailingAddr(
			getLandApplicantMailingAddr());
		acquireLandApplicantDetailsImpl.setLandApplicantPhoneNum(
			getLandApplicantPhoneNum());
		acquireLandApplicantDetailsImpl.setLandApplicantEmail(
			getLandApplicantEmail());
		acquireLandApplicantDetailsImpl.setAcquireApplicationId(
			getAcquireApplicationId());

		acquireLandApplicantDetailsImpl.resetOriginalValues();

		return acquireLandApplicantDetailsImpl;
	}

	@Override
	public AcquireLandApplicantDetails cloneWithOriginalValues() {
		AcquireLandApplicantDetailsImpl acquireLandApplicantDetailsImpl =
			new AcquireLandApplicantDetailsImpl();

		acquireLandApplicantDetailsImpl.setAcquireLandApplicantDetailsId(
			this.<Long>getColumnOriginalValue("acquireLandApplicantDetailsId"));
		acquireLandApplicantDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		acquireLandApplicantDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		acquireLandApplicantDetailsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		acquireLandApplicantDetailsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		acquireLandApplicantDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		acquireLandApplicantDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		acquireLandApplicantDetailsImpl.setLandApplicantName(
			this.<String>getColumnOriginalValue("landApplicantName"));
		acquireLandApplicantDetailsImpl.setLandApplicantGender(
			this.<String>getColumnOriginalValue("landApplicantGender"));
		acquireLandApplicantDetailsImpl.setLandApplicantDob(
			this.<Date>getColumnOriginalValue("landApplicantDob"));
		acquireLandApplicantDetailsImpl.setLandApplicantTrnNum(
			this.<String>getColumnOriginalValue("landApplicantTrnNum"));
		acquireLandApplicantDetailsImpl.setLandApplicantHomeAddr(
			this.<String>getColumnOriginalValue("landApplicantHomeAddr"));
		acquireLandApplicantDetailsImpl.setLandApplicantMailingAddr(
			this.<String>getColumnOriginalValue("landApplicantMailingAddr"));
		acquireLandApplicantDetailsImpl.setLandApplicantPhoneNum(
			this.<String>getColumnOriginalValue("landApplicantPhoneNum"));
		acquireLandApplicantDetailsImpl.setLandApplicantEmail(
			this.<String>getColumnOriginalValue("landApplicantEmail"));
		acquireLandApplicantDetailsImpl.setAcquireApplicationId(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));

		return acquireLandApplicantDetailsImpl;
	}

	@Override
	public int compareTo(
		AcquireLandApplicantDetails acquireLandApplicantDetails) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), acquireLandApplicantDetails.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcquireLandApplicantDetails)) {
			return false;
		}

		AcquireLandApplicantDetails acquireLandApplicantDetails =
			(AcquireLandApplicantDetails)object;

		long primaryKey = acquireLandApplicantDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcquireLandApplicantDetails> toCacheModel() {
		AcquireLandApplicantDetailsCacheModel
			acquireLandApplicantDetailsCacheModel =
				new AcquireLandApplicantDetailsCacheModel();

		acquireLandApplicantDetailsCacheModel.acquireLandApplicantDetailsId =
			getAcquireLandApplicantDetailsId();

		acquireLandApplicantDetailsCacheModel.groupId = getGroupId();

		acquireLandApplicantDetailsCacheModel.companyId = getCompanyId();

		acquireLandApplicantDetailsCacheModel.userId = getUserId();

		acquireLandApplicantDetailsCacheModel.userName = getUserName();

		String userName = acquireLandApplicantDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			acquireLandApplicantDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			acquireLandApplicantDetailsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			acquireLandApplicantDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			acquireLandApplicantDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			acquireLandApplicantDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		acquireLandApplicantDetailsCacheModel.landApplicantName =
			getLandApplicantName();

		String landApplicantName =
			acquireLandApplicantDetailsCacheModel.landApplicantName;

		if ((landApplicantName != null) && (landApplicantName.length() == 0)) {
			acquireLandApplicantDetailsCacheModel.landApplicantName = null;
		}

		acquireLandApplicantDetailsCacheModel.landApplicantGender =
			getLandApplicantGender();

		String landApplicantGender =
			acquireLandApplicantDetailsCacheModel.landApplicantGender;

		if ((landApplicantGender != null) &&
			(landApplicantGender.length() == 0)) {

			acquireLandApplicantDetailsCacheModel.landApplicantGender = null;
		}

		Date landApplicantDob = getLandApplicantDob();

		if (landApplicantDob != null) {
			acquireLandApplicantDetailsCacheModel.landApplicantDob =
				landApplicantDob.getTime();
		}
		else {
			acquireLandApplicantDetailsCacheModel.landApplicantDob =
				Long.MIN_VALUE;
		}

		acquireLandApplicantDetailsCacheModel.landApplicantTrnNum =
			getLandApplicantTrnNum();

		String landApplicantTrnNum =
			acquireLandApplicantDetailsCacheModel.landApplicantTrnNum;

		if ((landApplicantTrnNum != null) &&
			(landApplicantTrnNum.length() == 0)) {

			acquireLandApplicantDetailsCacheModel.landApplicantTrnNum = null;
		}

		acquireLandApplicantDetailsCacheModel.landApplicantHomeAddr =
			getLandApplicantHomeAddr();

		String landApplicantHomeAddr =
			acquireLandApplicantDetailsCacheModel.landApplicantHomeAddr;

		if ((landApplicantHomeAddr != null) &&
			(landApplicantHomeAddr.length() == 0)) {

			acquireLandApplicantDetailsCacheModel.landApplicantHomeAddr = null;
		}

		acquireLandApplicantDetailsCacheModel.landApplicantMailingAddr =
			getLandApplicantMailingAddr();

		String landApplicantMailingAddr =
			acquireLandApplicantDetailsCacheModel.landApplicantMailingAddr;

		if ((landApplicantMailingAddr != null) &&
			(landApplicantMailingAddr.length() == 0)) {

			acquireLandApplicantDetailsCacheModel.landApplicantMailingAddr =
				null;
		}

		acquireLandApplicantDetailsCacheModel.landApplicantPhoneNum =
			getLandApplicantPhoneNum();

		String landApplicantPhoneNum =
			acquireLandApplicantDetailsCacheModel.landApplicantPhoneNum;

		if ((landApplicantPhoneNum != null) &&
			(landApplicantPhoneNum.length() == 0)) {

			acquireLandApplicantDetailsCacheModel.landApplicantPhoneNum = null;
		}

		acquireLandApplicantDetailsCacheModel.landApplicantEmail =
			getLandApplicantEmail();

		String landApplicantEmail =
			acquireLandApplicantDetailsCacheModel.landApplicantEmail;

		if ((landApplicantEmail != null) &&
			(landApplicantEmail.length() == 0)) {

			acquireLandApplicantDetailsCacheModel.landApplicantEmail = null;
		}

		acquireLandApplicantDetailsCacheModel.acquireApplicationId =
			getAcquireApplicationId();

		return acquireLandApplicantDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcquireLandApplicantDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcquireLandApplicantDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireLandApplicantDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AcquireLandApplicantDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AcquireLandApplicantDetails>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AcquireLandApplicantDetails.class, ModelWrapper.class);

	}

	private long _acquireLandApplicantDetailsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _landApplicantName;
	private String _landApplicantGender;
	private Date _landApplicantDob;
	private String _landApplicantTrnNum;
	private String _landApplicantHomeAddr;
	private String _landApplicantMailingAddr;
	private String _landApplicantPhoneNum;
	private String _landApplicantEmail;
	private long _acquireApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AcquireLandApplicantDetails, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcquireLandApplicantDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"acquireLandApplicantDetailsId", _acquireLandApplicantDetailsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("landApplicantName", _landApplicantName);
		_columnOriginalValues.put("landApplicantGender", _landApplicantGender);
		_columnOriginalValues.put("landApplicantDob", _landApplicantDob);
		_columnOriginalValues.put("landApplicantTrnNum", _landApplicantTrnNum);
		_columnOriginalValues.put(
			"landApplicantHomeAddr", _landApplicantHomeAddr);
		_columnOriginalValues.put(
			"landApplicantMailingAddr", _landApplicantMailingAddr);
		_columnOriginalValues.put(
			"landApplicantPhoneNum", _landApplicantPhoneNum);
		_columnOriginalValues.put("landApplicantEmail", _landApplicantEmail);
		_columnOriginalValues.put(
			"acquireApplicationId", _acquireApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("acquireLandApplicantDetailsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("landApplicantName", 128L);

		columnBitmasks.put("landApplicantGender", 256L);

		columnBitmasks.put("landApplicantDob", 512L);

		columnBitmasks.put("landApplicantTrnNum", 1024L);

		columnBitmasks.put("landApplicantHomeAddr", 2048L);

		columnBitmasks.put("landApplicantMailingAddr", 4096L);

		columnBitmasks.put("landApplicantPhoneNum", 8192L);

		columnBitmasks.put("landApplicantEmail", 16384L);

		columnBitmasks.put("acquireApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcquireLandApplicantDetails _escapedModel;

}