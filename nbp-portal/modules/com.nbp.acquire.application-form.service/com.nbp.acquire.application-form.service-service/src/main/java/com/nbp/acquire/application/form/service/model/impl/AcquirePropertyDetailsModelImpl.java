/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.acquire.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.acquire.application.form.service.model.AcquirePropertyDetails;
import com.nbp.acquire.application.form.service.model.AcquirePropertyDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcquirePropertyDetails service. Represents a row in the &quot;nbp_acquire_prop_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcquirePropertyDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcquirePropertyDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcquirePropertyDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class AcquirePropertyDetailsModelImpl
	extends BaseModelImpl<AcquirePropertyDetails>
	implements AcquirePropertyDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acquire property details model instance should use the <code>AcquirePropertyDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_acquire_prop_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"acquirePropertyDetailsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"propertyTenureType", Types.VARCHAR},
		{"propertyIdentified", Types.VARCHAR}, {"propertyAddr", Types.VARCHAR},
		{"propertyDesiredLoc", Types.VARCHAR},
		{"propertyVolume", Types.VARCHAR}, {"propertyFolio", Types.VARCHAR},
		{"propertyValuationNum", Types.VARCHAR},
		{"propertySketchAttached", Types.VARCHAR},
		{"propertyCurrentUse", Types.VARCHAR},
		{"propertyCurrentUseOther", Types.VARCHAR},
		{"propertyExistingBuilding", Types.VARCHAR},
		{"propertyExistingBuildingOther", Types.VARCHAR},
		{"propertyExistingInfrastructure", Types.VARCHAR},
		{"propertyProposedUse", Types.VARCHAR},
		{"propertyProposedUseOther", Types.VARCHAR},
		{"propertyProposedInfrastructure", Types.VARCHAR},
		{"propertyLandAreaHectare", Types.VARCHAR},
		{"propertyLandAreaAcres", Types.VARCHAR},
		{"propertyLandAreaRoods", Types.VARCHAR},
		{"propertyLandAreaPerches", Types.VARCHAR},
		{"propertyAdjoiningNorth", Types.VARCHAR},
		{"propertyAdjoiningSouth", Types.VARCHAR},
		{"propertyAdjoiningEast", Types.VARCHAR},
		{"propertyAdjoiningWest", Types.VARCHAR},
		{"propertyDate", Types.TIMESTAMP},
		{"propertyAdditionalInfo", Types.VARCHAR},
		{"acquireApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("acquirePropertyDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("propertyTenureType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyIdentified", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyDesiredLoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyVolume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyFolio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyValuationNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertySketchAttached", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyCurrentUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyCurrentUseOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyExistingBuilding", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyExistingBuildingOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyExistingInfrastructure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyProposedUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyProposedUseOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyProposedInfrastructure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyLandAreaHectare", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyLandAreaAcres", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyLandAreaRoods", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyLandAreaPerches", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyAdjoiningNorth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyAdjoiningSouth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyAdjoiningEast", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyAdjoiningWest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("propertyAdditionalInfo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("acquireApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_acquire_prop_details (acquirePropertyDetailsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,propertyTenureType VARCHAR(75) null,propertyIdentified VARCHAR(75) null,propertyAddr VARCHAR(500) null,propertyDesiredLoc VARCHAR(75) null,propertyVolume VARCHAR(75) null,propertyFolio VARCHAR(75) null,propertyValuationNum VARCHAR(75) null,propertySketchAttached VARCHAR(75) null,propertyCurrentUse VARCHAR(75) null,propertyCurrentUseOther VARCHAR(75) null,propertyExistingBuilding VARCHAR(75) null,propertyExistingBuildingOther VARCHAR(75) null,propertyExistingInfrastructure VARCHAR(75) null,propertyProposedUse VARCHAR(75) null,propertyProposedUseOther VARCHAR(75) null,propertyProposedInfrastructure VARCHAR(75) null,propertyLandAreaHectare VARCHAR(75) null,propertyLandAreaAcres VARCHAR(75) null,propertyLandAreaRoods VARCHAR(75) null,propertyLandAreaPerches VARCHAR(75) null,propertyAdjoiningNorth VARCHAR(75) null,propertyAdjoiningSouth VARCHAR(75) null,propertyAdjoiningEast VARCHAR(75) null,propertyAdjoiningWest VARCHAR(75) null,propertyDate DATE null,propertyAdditionalInfo VARCHAR(500) null,acquireApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_acquire_prop_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acquirePropertyDetails.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_acquire_prop_details.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACQUIREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcquirePropertyDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _acquirePropertyDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAcquirePropertyDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _acquirePropertyDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcquirePropertyDetails.class;
	}

	@Override
	public String getModelClassName() {
		return AcquirePropertyDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcquirePropertyDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcquirePropertyDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquirePropertyDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AcquirePropertyDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcquirePropertyDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcquirePropertyDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcquirePropertyDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcquirePropertyDetails, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcquirePropertyDetails, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AcquirePropertyDetails, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AcquirePropertyDetails, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AcquirePropertyDetails, Object>>();

			attributeGetterFunctions.put(
				"acquirePropertyDetailsId",
				AcquirePropertyDetails::getAcquirePropertyDetailsId);
			attributeGetterFunctions.put(
				"groupId", AcquirePropertyDetails::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AcquirePropertyDetails::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AcquirePropertyDetails::getUserId);
			attributeGetterFunctions.put(
				"userName", AcquirePropertyDetails::getUserName);
			attributeGetterFunctions.put(
				"createDate", AcquirePropertyDetails::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AcquirePropertyDetails::getModifiedDate);
			attributeGetterFunctions.put(
				"propertyTenureType",
				AcquirePropertyDetails::getPropertyTenureType);
			attributeGetterFunctions.put(
				"propertyIdentified",
				AcquirePropertyDetails::getPropertyIdentified);
			attributeGetterFunctions.put(
				"propertyAddr", AcquirePropertyDetails::getPropertyAddr);
			attributeGetterFunctions.put(
				"propertyDesiredLoc",
				AcquirePropertyDetails::getPropertyDesiredLoc);
			attributeGetterFunctions.put(
				"propertyVolume", AcquirePropertyDetails::getPropertyVolume);
			attributeGetterFunctions.put(
				"propertyFolio", AcquirePropertyDetails::getPropertyFolio);
			attributeGetterFunctions.put(
				"propertyValuationNum",
				AcquirePropertyDetails::getPropertyValuationNum);
			attributeGetterFunctions.put(
				"propertySketchAttached",
				AcquirePropertyDetails::getPropertySketchAttached);
			attributeGetterFunctions.put(
				"propertyCurrentUse",
				AcquirePropertyDetails::getPropertyCurrentUse);
			attributeGetterFunctions.put(
				"propertyCurrentUseOther",
				AcquirePropertyDetails::getPropertyCurrentUseOther);
			attributeGetterFunctions.put(
				"propertyExistingBuilding",
				AcquirePropertyDetails::getPropertyExistingBuilding);
			attributeGetterFunctions.put(
				"propertyExistingBuildingOther",
				AcquirePropertyDetails::getPropertyExistingBuildingOther);
			attributeGetterFunctions.put(
				"propertyExistingInfrastructure",
				AcquirePropertyDetails::getPropertyExistingInfrastructure);
			attributeGetterFunctions.put(
				"propertyProposedUse",
				AcquirePropertyDetails::getPropertyProposedUse);
			attributeGetterFunctions.put(
				"propertyProposedUseOther",
				AcquirePropertyDetails::getPropertyProposedUseOther);
			attributeGetterFunctions.put(
				"propertyProposedInfrastructure",
				AcquirePropertyDetails::getPropertyProposedInfrastructure);
			attributeGetterFunctions.put(
				"propertyLandAreaHectare",
				AcquirePropertyDetails::getPropertyLandAreaHectare);
			attributeGetterFunctions.put(
				"propertyLandAreaAcres",
				AcquirePropertyDetails::getPropertyLandAreaAcres);
			attributeGetterFunctions.put(
				"propertyLandAreaRoods",
				AcquirePropertyDetails::getPropertyLandAreaRoods);
			attributeGetterFunctions.put(
				"propertyLandAreaPerches",
				AcquirePropertyDetails::getPropertyLandAreaPerches);
			attributeGetterFunctions.put(
				"propertyAdjoiningNorth",
				AcquirePropertyDetails::getPropertyAdjoiningNorth);
			attributeGetterFunctions.put(
				"propertyAdjoiningSouth",
				AcquirePropertyDetails::getPropertyAdjoiningSouth);
			attributeGetterFunctions.put(
				"propertyAdjoiningEast",
				AcquirePropertyDetails::getPropertyAdjoiningEast);
			attributeGetterFunctions.put(
				"propertyAdjoiningWest",
				AcquirePropertyDetails::getPropertyAdjoiningWest);
			attributeGetterFunctions.put(
				"propertyDate", AcquirePropertyDetails::getPropertyDate);
			attributeGetterFunctions.put(
				"propertyAdditionalInfo",
				AcquirePropertyDetails::getPropertyAdditionalInfo);
			attributeGetterFunctions.put(
				"acquireApplicationId",
				AcquirePropertyDetails::getAcquireApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AcquirePropertyDetails, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcquirePropertyDetails, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AcquirePropertyDetails, ?>>();

			attributeSetterBiConsumers.put(
				"acquirePropertyDetailsId",
				(BiConsumer<AcquirePropertyDetails, Long>)
					AcquirePropertyDetails::setAcquirePropertyDetailsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AcquirePropertyDetails, Long>)
					AcquirePropertyDetails::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AcquirePropertyDetails, Long>)
					AcquirePropertyDetails::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AcquirePropertyDetails, Long>)
					AcquirePropertyDetails::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AcquirePropertyDetails, Date>)
					AcquirePropertyDetails::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AcquirePropertyDetails, Date>)
					AcquirePropertyDetails::setModifiedDate);
			attributeSetterBiConsumers.put(
				"propertyTenureType",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyTenureType);
			attributeSetterBiConsumers.put(
				"propertyIdentified",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyIdentified);
			attributeSetterBiConsumers.put(
				"propertyAddr",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyAddr);
			attributeSetterBiConsumers.put(
				"propertyDesiredLoc",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyDesiredLoc);
			attributeSetterBiConsumers.put(
				"propertyVolume",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyVolume);
			attributeSetterBiConsumers.put(
				"propertyFolio",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyFolio);
			attributeSetterBiConsumers.put(
				"propertyValuationNum",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyValuationNum);
			attributeSetterBiConsumers.put(
				"propertySketchAttached",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertySketchAttached);
			attributeSetterBiConsumers.put(
				"propertyCurrentUse",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyCurrentUse);
			attributeSetterBiConsumers.put(
				"propertyCurrentUseOther",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyCurrentUseOther);
			attributeSetterBiConsumers.put(
				"propertyExistingBuilding",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyExistingBuilding);
			attributeSetterBiConsumers.put(
				"propertyExistingBuildingOther",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyExistingBuildingOther);
			attributeSetterBiConsumers.put(
				"propertyExistingInfrastructure",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyExistingInfrastructure);
			attributeSetterBiConsumers.put(
				"propertyProposedUse",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyProposedUse);
			attributeSetterBiConsumers.put(
				"propertyProposedUseOther",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyProposedUseOther);
			attributeSetterBiConsumers.put(
				"propertyProposedInfrastructure",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyProposedInfrastructure);
			attributeSetterBiConsumers.put(
				"propertyLandAreaHectare",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyLandAreaHectare);
			attributeSetterBiConsumers.put(
				"propertyLandAreaAcres",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyLandAreaAcres);
			attributeSetterBiConsumers.put(
				"propertyLandAreaRoods",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyLandAreaRoods);
			attributeSetterBiConsumers.put(
				"propertyLandAreaPerches",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyLandAreaPerches);
			attributeSetterBiConsumers.put(
				"propertyAdjoiningNorth",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyAdjoiningNorth);
			attributeSetterBiConsumers.put(
				"propertyAdjoiningSouth",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyAdjoiningSouth);
			attributeSetterBiConsumers.put(
				"propertyAdjoiningEast",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyAdjoiningEast);
			attributeSetterBiConsumers.put(
				"propertyAdjoiningWest",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyAdjoiningWest);
			attributeSetterBiConsumers.put(
				"propertyDate",
				(BiConsumer<AcquirePropertyDetails, Date>)
					AcquirePropertyDetails::setPropertyDate);
			attributeSetterBiConsumers.put(
				"propertyAdditionalInfo",
				(BiConsumer<AcquirePropertyDetails, String>)
					AcquirePropertyDetails::setPropertyAdditionalInfo);
			attributeSetterBiConsumers.put(
				"acquireApplicationId",
				(BiConsumer<AcquirePropertyDetails, Long>)
					AcquirePropertyDetails::setAcquireApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAcquirePropertyDetailsId() {
		return _acquirePropertyDetailsId;
	}

	@Override
	public void setAcquirePropertyDetailsId(long acquirePropertyDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquirePropertyDetailsId = acquirePropertyDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPropertyTenureType() {
		if (_propertyTenureType == null) {
			return "";
		}
		else {
			return _propertyTenureType;
		}
	}

	@Override
	public void setPropertyTenureType(String propertyTenureType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyTenureType = propertyTenureType;
	}

	@JSON
	@Override
	public String getPropertyIdentified() {
		if (_propertyIdentified == null) {
			return "";
		}
		else {
			return _propertyIdentified;
		}
	}

	@Override
	public void setPropertyIdentified(String propertyIdentified) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyIdentified = propertyIdentified;
	}

	@JSON
	@Override
	public String getPropertyAddr() {
		if (_propertyAddr == null) {
			return "";
		}
		else {
			return _propertyAddr;
		}
	}

	@Override
	public void setPropertyAddr(String propertyAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyAddr = propertyAddr;
	}

	@JSON
	@Override
	public String getPropertyDesiredLoc() {
		if (_propertyDesiredLoc == null) {
			return "";
		}
		else {
			return _propertyDesiredLoc;
		}
	}

	@Override
	public void setPropertyDesiredLoc(String propertyDesiredLoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyDesiredLoc = propertyDesiredLoc;
	}

	@JSON
	@Override
	public String getPropertyVolume() {
		if (_propertyVolume == null) {
			return "";
		}
		else {
			return _propertyVolume;
		}
	}

	@Override
	public void setPropertyVolume(String propertyVolume) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyVolume = propertyVolume;
	}

	@JSON
	@Override
	public String getPropertyFolio() {
		if (_propertyFolio == null) {
			return "";
		}
		else {
			return _propertyFolio;
		}
	}

	@Override
	public void setPropertyFolio(String propertyFolio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyFolio = propertyFolio;
	}

	@JSON
	@Override
	public String getPropertyValuationNum() {
		if (_propertyValuationNum == null) {
			return "";
		}
		else {
			return _propertyValuationNum;
		}
	}

	@Override
	public void setPropertyValuationNum(String propertyValuationNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyValuationNum = propertyValuationNum;
	}

	@JSON
	@Override
	public String getPropertySketchAttached() {
		if (_propertySketchAttached == null) {
			return "";
		}
		else {
			return _propertySketchAttached;
		}
	}

	@Override
	public void setPropertySketchAttached(String propertySketchAttached) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertySketchAttached = propertySketchAttached;
	}

	@JSON
	@Override
	public String getPropertyCurrentUse() {
		if (_propertyCurrentUse == null) {
			return "";
		}
		else {
			return _propertyCurrentUse;
		}
	}

	@Override
	public void setPropertyCurrentUse(String propertyCurrentUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyCurrentUse = propertyCurrentUse;
	}

	@JSON
	@Override
	public String getPropertyCurrentUseOther() {
		if (_propertyCurrentUseOther == null) {
			return "";
		}
		else {
			return _propertyCurrentUseOther;
		}
	}

	@Override
	public void setPropertyCurrentUseOther(String propertyCurrentUseOther) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyCurrentUseOther = propertyCurrentUseOther;
	}

	@JSON
	@Override
	public String getPropertyExistingBuilding() {
		if (_propertyExistingBuilding == null) {
			return "";
		}
		else {
			return _propertyExistingBuilding;
		}
	}

	@Override
	public void setPropertyExistingBuilding(String propertyExistingBuilding) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyExistingBuilding = propertyExistingBuilding;
	}

	@JSON
	@Override
	public String getPropertyExistingBuildingOther() {
		if (_propertyExistingBuildingOther == null) {
			return "";
		}
		else {
			return _propertyExistingBuildingOther;
		}
	}

	@Override
	public void setPropertyExistingBuildingOther(
		String propertyExistingBuildingOther) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyExistingBuildingOther = propertyExistingBuildingOther;
	}

	@JSON
	@Override
	public String getPropertyExistingInfrastructure() {
		if (_propertyExistingInfrastructure == null) {
			return "";
		}
		else {
			return _propertyExistingInfrastructure;
		}
	}

	@Override
	public void setPropertyExistingInfrastructure(
		String propertyExistingInfrastructure) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyExistingInfrastructure = propertyExistingInfrastructure;
	}

	@JSON
	@Override
	public String getPropertyProposedUse() {
		if (_propertyProposedUse == null) {
			return "";
		}
		else {
			return _propertyProposedUse;
		}
	}

	@Override
	public void setPropertyProposedUse(String propertyProposedUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyProposedUse = propertyProposedUse;
	}

	@JSON
	@Override
	public String getPropertyProposedUseOther() {
		if (_propertyProposedUseOther == null) {
			return "";
		}
		else {
			return _propertyProposedUseOther;
		}
	}

	@Override
	public void setPropertyProposedUseOther(String propertyProposedUseOther) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyProposedUseOther = propertyProposedUseOther;
	}

	@JSON
	@Override
	public String getPropertyProposedInfrastructure() {
		if (_propertyProposedInfrastructure == null) {
			return "";
		}
		else {
			return _propertyProposedInfrastructure;
		}
	}

	@Override
	public void setPropertyProposedInfrastructure(
		String propertyProposedInfrastructure) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyProposedInfrastructure = propertyProposedInfrastructure;
	}

	@JSON
	@Override
	public String getPropertyLandAreaHectare() {
		if (_propertyLandAreaHectare == null) {
			return "";
		}
		else {
			return _propertyLandAreaHectare;
		}
	}

	@Override
	public void setPropertyLandAreaHectare(String propertyLandAreaHectare) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyLandAreaHectare = propertyLandAreaHectare;
	}

	@JSON
	@Override
	public String getPropertyLandAreaAcres() {
		if (_propertyLandAreaAcres == null) {
			return "";
		}
		else {
			return _propertyLandAreaAcres;
		}
	}

	@Override
	public void setPropertyLandAreaAcres(String propertyLandAreaAcres) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyLandAreaAcres = propertyLandAreaAcres;
	}

	@JSON
	@Override
	public String getPropertyLandAreaRoods() {
		if (_propertyLandAreaRoods == null) {
			return "";
		}
		else {
			return _propertyLandAreaRoods;
		}
	}

	@Override
	public void setPropertyLandAreaRoods(String propertyLandAreaRoods) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyLandAreaRoods = propertyLandAreaRoods;
	}

	@JSON
	@Override
	public String getPropertyLandAreaPerches() {
		if (_propertyLandAreaPerches == null) {
			return "";
		}
		else {
			return _propertyLandAreaPerches;
		}
	}

	@Override
	public void setPropertyLandAreaPerches(String propertyLandAreaPerches) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyLandAreaPerches = propertyLandAreaPerches;
	}

	@JSON
	@Override
	public String getPropertyAdjoiningNorth() {
		if (_propertyAdjoiningNorth == null) {
			return "";
		}
		else {
			return _propertyAdjoiningNorth;
		}
	}

	@Override
	public void setPropertyAdjoiningNorth(String propertyAdjoiningNorth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyAdjoiningNorth = propertyAdjoiningNorth;
	}

	@JSON
	@Override
	public String getPropertyAdjoiningSouth() {
		if (_propertyAdjoiningSouth == null) {
			return "";
		}
		else {
			return _propertyAdjoiningSouth;
		}
	}

	@Override
	public void setPropertyAdjoiningSouth(String propertyAdjoiningSouth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyAdjoiningSouth = propertyAdjoiningSouth;
	}

	@JSON
	@Override
	public String getPropertyAdjoiningEast() {
		if (_propertyAdjoiningEast == null) {
			return "";
		}
		else {
			return _propertyAdjoiningEast;
		}
	}

	@Override
	public void setPropertyAdjoiningEast(String propertyAdjoiningEast) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyAdjoiningEast = propertyAdjoiningEast;
	}

	@JSON
	@Override
	public String getPropertyAdjoiningWest() {
		if (_propertyAdjoiningWest == null) {
			return "";
		}
		else {
			return _propertyAdjoiningWest;
		}
	}

	@Override
	public void setPropertyAdjoiningWest(String propertyAdjoiningWest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyAdjoiningWest = propertyAdjoiningWest;
	}

	@JSON
	@Override
	public Date getPropertyDate() {
		return _propertyDate;
	}

	@Override
	public void setPropertyDate(Date propertyDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyDate = propertyDate;
	}

	@JSON
	@Override
	public String getPropertyAdditionalInfo() {
		if (_propertyAdditionalInfo == null) {
			return "";
		}
		else {
			return _propertyAdditionalInfo;
		}
	}

	@Override
	public void setPropertyAdditionalInfo(String propertyAdditionalInfo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyAdditionalInfo = propertyAdditionalInfo;
	}

	@JSON
	@Override
	public long getAcquireApplicationId() {
		return _acquireApplicationId;
	}

	@Override
	public void setAcquireApplicationId(long acquireApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireApplicationId = acquireApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAcquireApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AcquirePropertyDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcquirePropertyDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcquirePropertyDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcquirePropertyDetailsImpl acquirePropertyDetailsImpl =
			new AcquirePropertyDetailsImpl();

		acquirePropertyDetailsImpl.setAcquirePropertyDetailsId(
			getAcquirePropertyDetailsId());
		acquirePropertyDetailsImpl.setGroupId(getGroupId());
		acquirePropertyDetailsImpl.setCompanyId(getCompanyId());
		acquirePropertyDetailsImpl.setUserId(getUserId());
		acquirePropertyDetailsImpl.setUserName(getUserName());
		acquirePropertyDetailsImpl.setCreateDate(getCreateDate());
		acquirePropertyDetailsImpl.setModifiedDate(getModifiedDate());
		acquirePropertyDetailsImpl.setPropertyTenureType(
			getPropertyTenureType());
		acquirePropertyDetailsImpl.setPropertyIdentified(
			getPropertyIdentified());
		acquirePropertyDetailsImpl.setPropertyAddr(getPropertyAddr());
		acquirePropertyDetailsImpl.setPropertyDesiredLoc(
			getPropertyDesiredLoc());
		acquirePropertyDetailsImpl.setPropertyVolume(getPropertyVolume());
		acquirePropertyDetailsImpl.setPropertyFolio(getPropertyFolio());
		acquirePropertyDetailsImpl.setPropertyValuationNum(
			getPropertyValuationNum());
		acquirePropertyDetailsImpl.setPropertySketchAttached(
			getPropertySketchAttached());
		acquirePropertyDetailsImpl.setPropertyCurrentUse(
			getPropertyCurrentUse());
		acquirePropertyDetailsImpl.setPropertyCurrentUseOther(
			getPropertyCurrentUseOther());
		acquirePropertyDetailsImpl.setPropertyExistingBuilding(
			getPropertyExistingBuilding());
		acquirePropertyDetailsImpl.setPropertyExistingBuildingOther(
			getPropertyExistingBuildingOther());
		acquirePropertyDetailsImpl.setPropertyExistingInfrastructure(
			getPropertyExistingInfrastructure());
		acquirePropertyDetailsImpl.setPropertyProposedUse(
			getPropertyProposedUse());
		acquirePropertyDetailsImpl.setPropertyProposedUseOther(
			getPropertyProposedUseOther());
		acquirePropertyDetailsImpl.setPropertyProposedInfrastructure(
			getPropertyProposedInfrastructure());
		acquirePropertyDetailsImpl.setPropertyLandAreaHectare(
			getPropertyLandAreaHectare());
		acquirePropertyDetailsImpl.setPropertyLandAreaAcres(
			getPropertyLandAreaAcres());
		acquirePropertyDetailsImpl.setPropertyLandAreaRoods(
			getPropertyLandAreaRoods());
		acquirePropertyDetailsImpl.setPropertyLandAreaPerches(
			getPropertyLandAreaPerches());
		acquirePropertyDetailsImpl.setPropertyAdjoiningNorth(
			getPropertyAdjoiningNorth());
		acquirePropertyDetailsImpl.setPropertyAdjoiningSouth(
			getPropertyAdjoiningSouth());
		acquirePropertyDetailsImpl.setPropertyAdjoiningEast(
			getPropertyAdjoiningEast());
		acquirePropertyDetailsImpl.setPropertyAdjoiningWest(
			getPropertyAdjoiningWest());
		acquirePropertyDetailsImpl.setPropertyDate(getPropertyDate());
		acquirePropertyDetailsImpl.setPropertyAdditionalInfo(
			getPropertyAdditionalInfo());
		acquirePropertyDetailsImpl.setAcquireApplicationId(
			getAcquireApplicationId());

		acquirePropertyDetailsImpl.resetOriginalValues();

		return acquirePropertyDetailsImpl;
	}

	@Override
	public AcquirePropertyDetails cloneWithOriginalValues() {
		AcquirePropertyDetailsImpl acquirePropertyDetailsImpl =
			new AcquirePropertyDetailsImpl();

		acquirePropertyDetailsImpl.setAcquirePropertyDetailsId(
			this.<Long>getColumnOriginalValue("acquirePropertyDetailsId"));
		acquirePropertyDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		acquirePropertyDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		acquirePropertyDetailsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		acquirePropertyDetailsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		acquirePropertyDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		acquirePropertyDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		acquirePropertyDetailsImpl.setPropertyTenureType(
			this.<String>getColumnOriginalValue("propertyTenureType"));
		acquirePropertyDetailsImpl.setPropertyIdentified(
			this.<String>getColumnOriginalValue("propertyIdentified"));
		acquirePropertyDetailsImpl.setPropertyAddr(
			this.<String>getColumnOriginalValue("propertyAddr"));
		acquirePropertyDetailsImpl.setPropertyDesiredLoc(
			this.<String>getColumnOriginalValue("propertyDesiredLoc"));
		acquirePropertyDetailsImpl.setPropertyVolume(
			this.<String>getColumnOriginalValue("propertyVolume"));
		acquirePropertyDetailsImpl.setPropertyFolio(
			this.<String>getColumnOriginalValue("propertyFolio"));
		acquirePropertyDetailsImpl.setPropertyValuationNum(
			this.<String>getColumnOriginalValue("propertyValuationNum"));
		acquirePropertyDetailsImpl.setPropertySketchAttached(
			this.<String>getColumnOriginalValue("propertySketchAttached"));
		acquirePropertyDetailsImpl.setPropertyCurrentUse(
			this.<String>getColumnOriginalValue("propertyCurrentUse"));
		acquirePropertyDetailsImpl.setPropertyCurrentUseOther(
			this.<String>getColumnOriginalValue("propertyCurrentUseOther"));
		acquirePropertyDetailsImpl.setPropertyExistingBuilding(
			this.<String>getColumnOriginalValue("propertyExistingBuilding"));
		acquirePropertyDetailsImpl.setPropertyExistingBuildingOther(
			this.<String>getColumnOriginalValue(
				"propertyExistingBuildingOther"));
		acquirePropertyDetailsImpl.setPropertyExistingInfrastructure(
			this.<String>getColumnOriginalValue(
				"propertyExistingInfrastructure"));
		acquirePropertyDetailsImpl.setPropertyProposedUse(
			this.<String>getColumnOriginalValue("propertyProposedUse"));
		acquirePropertyDetailsImpl.setPropertyProposedUseOther(
			this.<String>getColumnOriginalValue("propertyProposedUseOther"));
		acquirePropertyDetailsImpl.setPropertyProposedInfrastructure(
			this.<String>getColumnOriginalValue(
				"propertyProposedInfrastructure"));
		acquirePropertyDetailsImpl.setPropertyLandAreaHectare(
			this.<String>getColumnOriginalValue("propertyLandAreaHectare"));
		acquirePropertyDetailsImpl.setPropertyLandAreaAcres(
			this.<String>getColumnOriginalValue("propertyLandAreaAcres"));
		acquirePropertyDetailsImpl.setPropertyLandAreaRoods(
			this.<String>getColumnOriginalValue("propertyLandAreaRoods"));
		acquirePropertyDetailsImpl.setPropertyLandAreaPerches(
			this.<String>getColumnOriginalValue("propertyLandAreaPerches"));
		acquirePropertyDetailsImpl.setPropertyAdjoiningNorth(
			this.<String>getColumnOriginalValue("propertyAdjoiningNorth"));
		acquirePropertyDetailsImpl.setPropertyAdjoiningSouth(
			this.<String>getColumnOriginalValue("propertyAdjoiningSouth"));
		acquirePropertyDetailsImpl.setPropertyAdjoiningEast(
			this.<String>getColumnOriginalValue("propertyAdjoiningEast"));
		acquirePropertyDetailsImpl.setPropertyAdjoiningWest(
			this.<String>getColumnOriginalValue("propertyAdjoiningWest"));
		acquirePropertyDetailsImpl.setPropertyDate(
			this.<Date>getColumnOriginalValue("propertyDate"));
		acquirePropertyDetailsImpl.setPropertyAdditionalInfo(
			this.<String>getColumnOriginalValue("propertyAdditionalInfo"));
		acquirePropertyDetailsImpl.setAcquireApplicationId(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));

		return acquirePropertyDetailsImpl;
	}

	@Override
	public int compareTo(AcquirePropertyDetails acquirePropertyDetails) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), acquirePropertyDetails.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcquirePropertyDetails)) {
			return false;
		}

		AcquirePropertyDetails acquirePropertyDetails =
			(AcquirePropertyDetails)object;

		long primaryKey = acquirePropertyDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcquirePropertyDetails> toCacheModel() {
		AcquirePropertyDetailsCacheModel acquirePropertyDetailsCacheModel =
			new AcquirePropertyDetailsCacheModel();

		acquirePropertyDetailsCacheModel.acquirePropertyDetailsId =
			getAcquirePropertyDetailsId();

		acquirePropertyDetailsCacheModel.groupId = getGroupId();

		acquirePropertyDetailsCacheModel.companyId = getCompanyId();

		acquirePropertyDetailsCacheModel.userId = getUserId();

		acquirePropertyDetailsCacheModel.userName = getUserName();

		String userName = acquirePropertyDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			acquirePropertyDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			acquirePropertyDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			acquirePropertyDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			acquirePropertyDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			acquirePropertyDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		acquirePropertyDetailsCacheModel.propertyTenureType =
			getPropertyTenureType();

		String propertyTenureType =
			acquirePropertyDetailsCacheModel.propertyTenureType;

		if ((propertyTenureType != null) &&
			(propertyTenureType.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyTenureType = null;
		}

		acquirePropertyDetailsCacheModel.propertyIdentified =
			getPropertyIdentified();

		String propertyIdentified =
			acquirePropertyDetailsCacheModel.propertyIdentified;

		if ((propertyIdentified != null) &&
			(propertyIdentified.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyIdentified = null;
		}

		acquirePropertyDetailsCacheModel.propertyAddr = getPropertyAddr();

		String propertyAddr = acquirePropertyDetailsCacheModel.propertyAddr;

		if ((propertyAddr != null) && (propertyAddr.length() == 0)) {
			acquirePropertyDetailsCacheModel.propertyAddr = null;
		}

		acquirePropertyDetailsCacheModel.propertyDesiredLoc =
			getPropertyDesiredLoc();

		String propertyDesiredLoc =
			acquirePropertyDetailsCacheModel.propertyDesiredLoc;

		if ((propertyDesiredLoc != null) &&
			(propertyDesiredLoc.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyDesiredLoc = null;
		}

		acquirePropertyDetailsCacheModel.propertyVolume = getPropertyVolume();

		String propertyVolume = acquirePropertyDetailsCacheModel.propertyVolume;

		if ((propertyVolume != null) && (propertyVolume.length() == 0)) {
			acquirePropertyDetailsCacheModel.propertyVolume = null;
		}

		acquirePropertyDetailsCacheModel.propertyFolio = getPropertyFolio();

		String propertyFolio = acquirePropertyDetailsCacheModel.propertyFolio;

		if ((propertyFolio != null) && (propertyFolio.length() == 0)) {
			acquirePropertyDetailsCacheModel.propertyFolio = null;
		}

		acquirePropertyDetailsCacheModel.propertyValuationNum =
			getPropertyValuationNum();

		String propertyValuationNum =
			acquirePropertyDetailsCacheModel.propertyValuationNum;

		if ((propertyValuationNum != null) &&
			(propertyValuationNum.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyValuationNum = null;
		}

		acquirePropertyDetailsCacheModel.propertySketchAttached =
			getPropertySketchAttached();

		String propertySketchAttached =
			acquirePropertyDetailsCacheModel.propertySketchAttached;

		if ((propertySketchAttached != null) &&
			(propertySketchAttached.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertySketchAttached = null;
		}

		acquirePropertyDetailsCacheModel.propertyCurrentUse =
			getPropertyCurrentUse();

		String propertyCurrentUse =
			acquirePropertyDetailsCacheModel.propertyCurrentUse;

		if ((propertyCurrentUse != null) &&
			(propertyCurrentUse.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyCurrentUse = null;
		}

		acquirePropertyDetailsCacheModel.propertyCurrentUseOther =
			getPropertyCurrentUseOther();

		String propertyCurrentUseOther =
			acquirePropertyDetailsCacheModel.propertyCurrentUseOther;

		if ((propertyCurrentUseOther != null) &&
			(propertyCurrentUseOther.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyCurrentUseOther = null;
		}

		acquirePropertyDetailsCacheModel.propertyExistingBuilding =
			getPropertyExistingBuilding();

		String propertyExistingBuilding =
			acquirePropertyDetailsCacheModel.propertyExistingBuilding;

		if ((propertyExistingBuilding != null) &&
			(propertyExistingBuilding.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyExistingBuilding = null;
		}

		acquirePropertyDetailsCacheModel.propertyExistingBuildingOther =
			getPropertyExistingBuildingOther();

		String propertyExistingBuildingOther =
			acquirePropertyDetailsCacheModel.propertyExistingBuildingOther;

		if ((propertyExistingBuildingOther != null) &&
			(propertyExistingBuildingOther.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyExistingBuildingOther =
				null;
		}

		acquirePropertyDetailsCacheModel.propertyExistingInfrastructure =
			getPropertyExistingInfrastructure();

		String propertyExistingInfrastructure =
			acquirePropertyDetailsCacheModel.propertyExistingInfrastructure;

		if ((propertyExistingInfrastructure != null) &&
			(propertyExistingInfrastructure.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyExistingInfrastructure =
				null;
		}

		acquirePropertyDetailsCacheModel.propertyProposedUse =
			getPropertyProposedUse();

		String propertyProposedUse =
			acquirePropertyDetailsCacheModel.propertyProposedUse;

		if ((propertyProposedUse != null) &&
			(propertyProposedUse.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyProposedUse = null;
		}

		acquirePropertyDetailsCacheModel.propertyProposedUseOther =
			getPropertyProposedUseOther();

		String propertyProposedUseOther =
			acquirePropertyDetailsCacheModel.propertyProposedUseOther;

		if ((propertyProposedUseOther != null) &&
			(propertyProposedUseOther.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyProposedUseOther = null;
		}

		acquirePropertyDetailsCacheModel.propertyProposedInfrastructure =
			getPropertyProposedInfrastructure();

		String propertyProposedInfrastructure =
			acquirePropertyDetailsCacheModel.propertyProposedInfrastructure;

		if ((propertyProposedInfrastructure != null) &&
			(propertyProposedInfrastructure.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyProposedInfrastructure =
				null;
		}

		acquirePropertyDetailsCacheModel.propertyLandAreaHectare =
			getPropertyLandAreaHectare();

		String propertyLandAreaHectare =
			acquirePropertyDetailsCacheModel.propertyLandAreaHectare;

		if ((propertyLandAreaHectare != null) &&
			(propertyLandAreaHectare.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyLandAreaHectare = null;
		}

		acquirePropertyDetailsCacheModel.propertyLandAreaAcres =
			getPropertyLandAreaAcres();

		String propertyLandAreaAcres =
			acquirePropertyDetailsCacheModel.propertyLandAreaAcres;

		if ((propertyLandAreaAcres != null) &&
			(propertyLandAreaAcres.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyLandAreaAcres = null;
		}

		acquirePropertyDetailsCacheModel.propertyLandAreaRoods =
			getPropertyLandAreaRoods();

		String propertyLandAreaRoods =
			acquirePropertyDetailsCacheModel.propertyLandAreaRoods;

		if ((propertyLandAreaRoods != null) &&
			(propertyLandAreaRoods.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyLandAreaRoods = null;
		}

		acquirePropertyDetailsCacheModel.propertyLandAreaPerches =
			getPropertyLandAreaPerches();

		String propertyLandAreaPerches =
			acquirePropertyDetailsCacheModel.propertyLandAreaPerches;

		if ((propertyLandAreaPerches != null) &&
			(propertyLandAreaPerches.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyLandAreaPerches = null;
		}

		acquirePropertyDetailsCacheModel.propertyAdjoiningNorth =
			getPropertyAdjoiningNorth();

		String propertyAdjoiningNorth =
			acquirePropertyDetailsCacheModel.propertyAdjoiningNorth;

		if ((propertyAdjoiningNorth != null) &&
			(propertyAdjoiningNorth.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyAdjoiningNorth = null;
		}

		acquirePropertyDetailsCacheModel.propertyAdjoiningSouth =
			getPropertyAdjoiningSouth();

		String propertyAdjoiningSouth =
			acquirePropertyDetailsCacheModel.propertyAdjoiningSouth;

		if ((propertyAdjoiningSouth != null) &&
			(propertyAdjoiningSouth.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyAdjoiningSouth = null;
		}

		acquirePropertyDetailsCacheModel.propertyAdjoiningEast =
			getPropertyAdjoiningEast();

		String propertyAdjoiningEast =
			acquirePropertyDetailsCacheModel.propertyAdjoiningEast;

		if ((propertyAdjoiningEast != null) &&
			(propertyAdjoiningEast.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyAdjoiningEast = null;
		}

		acquirePropertyDetailsCacheModel.propertyAdjoiningWest =
			getPropertyAdjoiningWest();

		String propertyAdjoiningWest =
			acquirePropertyDetailsCacheModel.propertyAdjoiningWest;

		if ((propertyAdjoiningWest != null) &&
			(propertyAdjoiningWest.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyAdjoiningWest = null;
		}

		Date propertyDate = getPropertyDate();

		if (propertyDate != null) {
			acquirePropertyDetailsCacheModel.propertyDate =
				propertyDate.getTime();
		}
		else {
			acquirePropertyDetailsCacheModel.propertyDate = Long.MIN_VALUE;
		}

		acquirePropertyDetailsCacheModel.propertyAdditionalInfo =
			getPropertyAdditionalInfo();

		String propertyAdditionalInfo =
			acquirePropertyDetailsCacheModel.propertyAdditionalInfo;

		if ((propertyAdditionalInfo != null) &&
			(propertyAdditionalInfo.length() == 0)) {

			acquirePropertyDetailsCacheModel.propertyAdditionalInfo = null;
		}

		acquirePropertyDetailsCacheModel.acquireApplicationId =
			getAcquireApplicationId();

		return acquirePropertyDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcquirePropertyDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcquirePropertyDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquirePropertyDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AcquirePropertyDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AcquirePropertyDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AcquirePropertyDetails.class, ModelWrapper.class);

	}

	private long _acquirePropertyDetailsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _propertyTenureType;
	private String _propertyIdentified;
	private String _propertyAddr;
	private String _propertyDesiredLoc;
	private String _propertyVolume;
	private String _propertyFolio;
	private String _propertyValuationNum;
	private String _propertySketchAttached;
	private String _propertyCurrentUse;
	private String _propertyCurrentUseOther;
	private String _propertyExistingBuilding;
	private String _propertyExistingBuildingOther;
	private String _propertyExistingInfrastructure;
	private String _propertyProposedUse;
	private String _propertyProposedUseOther;
	private String _propertyProposedInfrastructure;
	private String _propertyLandAreaHectare;
	private String _propertyLandAreaAcres;
	private String _propertyLandAreaRoods;
	private String _propertyLandAreaPerches;
	private String _propertyAdjoiningNorth;
	private String _propertyAdjoiningSouth;
	private String _propertyAdjoiningEast;
	private String _propertyAdjoiningWest;
	private Date _propertyDate;
	private String _propertyAdditionalInfo;
	private long _acquireApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AcquirePropertyDetails, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcquirePropertyDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"acquirePropertyDetailsId", _acquirePropertyDetailsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("propertyTenureType", _propertyTenureType);
		_columnOriginalValues.put("propertyIdentified", _propertyIdentified);
		_columnOriginalValues.put("propertyAddr", _propertyAddr);
		_columnOriginalValues.put("propertyDesiredLoc", _propertyDesiredLoc);
		_columnOriginalValues.put("propertyVolume", _propertyVolume);
		_columnOriginalValues.put("propertyFolio", _propertyFolio);
		_columnOriginalValues.put(
			"propertyValuationNum", _propertyValuationNum);
		_columnOriginalValues.put(
			"propertySketchAttached", _propertySketchAttached);
		_columnOriginalValues.put("propertyCurrentUse", _propertyCurrentUse);
		_columnOriginalValues.put(
			"propertyCurrentUseOther", _propertyCurrentUseOther);
		_columnOriginalValues.put(
			"propertyExistingBuilding", _propertyExistingBuilding);
		_columnOriginalValues.put(
			"propertyExistingBuildingOther", _propertyExistingBuildingOther);
		_columnOriginalValues.put(
			"propertyExistingInfrastructure", _propertyExistingInfrastructure);
		_columnOriginalValues.put("propertyProposedUse", _propertyProposedUse);
		_columnOriginalValues.put(
			"propertyProposedUseOther", _propertyProposedUseOther);
		_columnOriginalValues.put(
			"propertyProposedInfrastructure", _propertyProposedInfrastructure);
		_columnOriginalValues.put(
			"propertyLandAreaHectare", _propertyLandAreaHectare);
		_columnOriginalValues.put(
			"propertyLandAreaAcres", _propertyLandAreaAcres);
		_columnOriginalValues.put(
			"propertyLandAreaRoods", _propertyLandAreaRoods);
		_columnOriginalValues.put(
			"propertyLandAreaPerches", _propertyLandAreaPerches);
		_columnOriginalValues.put(
			"propertyAdjoiningNorth", _propertyAdjoiningNorth);
		_columnOriginalValues.put(
			"propertyAdjoiningSouth", _propertyAdjoiningSouth);
		_columnOriginalValues.put(
			"propertyAdjoiningEast", _propertyAdjoiningEast);
		_columnOriginalValues.put(
			"propertyAdjoiningWest", _propertyAdjoiningWest);
		_columnOriginalValues.put("propertyDate", _propertyDate);
		_columnOriginalValues.put(
			"propertyAdditionalInfo", _propertyAdditionalInfo);
		_columnOriginalValues.put(
			"acquireApplicationId", _acquireApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("acquirePropertyDetailsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("propertyTenureType", 128L);

		columnBitmasks.put("propertyIdentified", 256L);

		columnBitmasks.put("propertyAddr", 512L);

		columnBitmasks.put("propertyDesiredLoc", 1024L);

		columnBitmasks.put("propertyVolume", 2048L);

		columnBitmasks.put("propertyFolio", 4096L);

		columnBitmasks.put("propertyValuationNum", 8192L);

		columnBitmasks.put("propertySketchAttached", 16384L);

		columnBitmasks.put("propertyCurrentUse", 32768L);

		columnBitmasks.put("propertyCurrentUseOther", 65536L);

		columnBitmasks.put("propertyExistingBuilding", 131072L);

		columnBitmasks.put("propertyExistingBuildingOther", 262144L);

		columnBitmasks.put("propertyExistingInfrastructure", 524288L);

		columnBitmasks.put("propertyProposedUse", 1048576L);

		columnBitmasks.put("propertyProposedUseOther", 2097152L);

		columnBitmasks.put("propertyProposedInfrastructure", 4194304L);

		columnBitmasks.put("propertyLandAreaHectare", 8388608L);

		columnBitmasks.put("propertyLandAreaAcres", 16777216L);

		columnBitmasks.put("propertyLandAreaRoods", 33554432L);

		columnBitmasks.put("propertyLandAreaPerches", 67108864L);

		columnBitmasks.put("propertyAdjoiningNorth", 134217728L);

		columnBitmasks.put("propertyAdjoiningSouth", 268435456L);

		columnBitmasks.put("propertyAdjoiningEast", 536870912L);

		columnBitmasks.put("propertyAdjoiningWest", 1073741824L);

		columnBitmasks.put("propertyDate", 2147483648L);

		columnBitmasks.put("propertyAdditionalInfo", 4294967296L);

		columnBitmasks.put("acquireApplicationId", 8589934592L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcquirePropertyDetails _escapedModel;

}