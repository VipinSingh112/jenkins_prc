/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.acquire.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.acquire.application.form.service.model.AcquireLandPropertyDetails;
import com.nbp.acquire.application.form.service.model.AcquireLandPropertyDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcquireLandPropertyDetails service. Represents a row in the &quot;nbp_acquire_land_prop_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcquireLandPropertyDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcquireLandPropertyDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcquireLandPropertyDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class AcquireLandPropertyDetailsModelImpl
	extends BaseModelImpl<AcquireLandPropertyDetails>
	implements AcquireLandPropertyDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acquire land property details model instance should use the <code>AcquireLandPropertyDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_acquire_land_prop_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"acquireLandPropertyDetailsId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"landPropIdentified", Types.VARCHAR}, {"landPropAddr", Types.VARCHAR},
		{"landPropOccupation", Types.VARCHAR},
		{"landPropOccupationPeriod", Types.VARCHAR},
		{"landPropTenureType", Types.VARCHAR},
		{"landPropDesiredLoc", Types.VARCHAR},
		{"landPropProposedUse", Types.VARCHAR},
		{"landPropProposedUseOther", Types.VARCHAR},
		{"landPropPropTenureType", Types.VARCHAR},
		{"landPropApplied", Types.VARCHAR},
		{"landPropApplicationDate", Types.TIMESTAMP},
		{"landPropExistingBuilding", Types.VARCHAR},
		{"landPropExistingBuildingOther", Types.VARCHAR},
		{"landPropOwn", Types.VARCHAR}, {"landPropGovAcquired", Types.VARCHAR},
		{"landPropStateDetails", Types.VARCHAR},
		{"landPropPaymentMethod", Types.VARCHAR},
		{"landPropPaymentMethodOther", Types.VARCHAR},
		{"landPropComments", Types.VARCHAR},
		{"acquireApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("acquireLandPropertyDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("landPropIdentified", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropOccupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropOccupationPeriod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropTenureType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropDesiredLoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropProposedUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropProposedUseOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropPropTenureType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropApplied", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropApplicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("landPropExistingBuilding", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropExistingBuildingOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropOwn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropGovAcquired", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropStateDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropPaymentMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropPaymentMethodOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landPropComments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("acquireApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_acquire_land_prop_details (acquireLandPropertyDetailsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,landPropIdentified VARCHAR(75) null,landPropAddr VARCHAR(500) null,landPropOccupation VARCHAR(75) null,landPropOccupationPeriod VARCHAR(75) null,landPropTenureType VARCHAR(75) null,landPropDesiredLoc VARCHAR(75) null,landPropProposedUse VARCHAR(75) null,landPropProposedUseOther VARCHAR(75) null,landPropPropTenureType VARCHAR(75) null,landPropApplied VARCHAR(75) null,landPropApplicationDate DATE null,landPropExistingBuilding VARCHAR(75) null,landPropExistingBuildingOther VARCHAR(75) null,landPropOwn VARCHAR(75) null,landPropGovAcquired VARCHAR(75) null,landPropStateDetails VARCHAR(75) null,landPropPaymentMethod VARCHAR(75) null,landPropPaymentMethodOther VARCHAR(75) null,landPropComments VARCHAR(500) null,acquireApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_acquire_land_prop_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acquireLandPropertyDetails.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_acquire_land_prop_details.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACQUIREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcquireLandPropertyDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _acquireLandPropertyDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAcquireLandPropertyDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _acquireLandPropertyDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcquireLandPropertyDetails.class;
	}

	@Override
	public String getModelClassName() {
		return AcquireLandPropertyDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcquireLandPropertyDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcquireLandPropertyDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireLandPropertyDetails, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(AcquireLandPropertyDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcquireLandPropertyDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcquireLandPropertyDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcquireLandPropertyDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcquireLandPropertyDetails, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcquireLandPropertyDetails, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AcquireLandPropertyDetails, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AcquireLandPropertyDetails, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<AcquireLandPropertyDetails, Object>>();

			attributeGetterFunctions.put(
				"acquireLandPropertyDetailsId",
				AcquireLandPropertyDetails::getAcquireLandPropertyDetailsId);
			attributeGetterFunctions.put(
				"groupId", AcquireLandPropertyDetails::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AcquireLandPropertyDetails::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AcquireLandPropertyDetails::getUserId);
			attributeGetterFunctions.put(
				"userName", AcquireLandPropertyDetails::getUserName);
			attributeGetterFunctions.put(
				"createDate", AcquireLandPropertyDetails::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AcquireLandPropertyDetails::getModifiedDate);
			attributeGetterFunctions.put(
				"landPropIdentified",
				AcquireLandPropertyDetails::getLandPropIdentified);
			attributeGetterFunctions.put(
				"landPropAddr", AcquireLandPropertyDetails::getLandPropAddr);
			attributeGetterFunctions.put(
				"landPropOccupation",
				AcquireLandPropertyDetails::getLandPropOccupation);
			attributeGetterFunctions.put(
				"landPropOccupationPeriod",
				AcquireLandPropertyDetails::getLandPropOccupationPeriod);
			attributeGetterFunctions.put(
				"landPropTenureType",
				AcquireLandPropertyDetails::getLandPropTenureType);
			attributeGetterFunctions.put(
				"landPropDesiredLoc",
				AcquireLandPropertyDetails::getLandPropDesiredLoc);
			attributeGetterFunctions.put(
				"landPropProposedUse",
				AcquireLandPropertyDetails::getLandPropProposedUse);
			attributeGetterFunctions.put(
				"landPropProposedUseOther",
				AcquireLandPropertyDetails::getLandPropProposedUseOther);
			attributeGetterFunctions.put(
				"landPropPropTenureType",
				AcquireLandPropertyDetails::getLandPropPropTenureType);
			attributeGetterFunctions.put(
				"landPropApplied",
				AcquireLandPropertyDetails::getLandPropApplied);
			attributeGetterFunctions.put(
				"landPropApplicationDate",
				AcquireLandPropertyDetails::getLandPropApplicationDate);
			attributeGetterFunctions.put(
				"landPropExistingBuilding",
				AcquireLandPropertyDetails::getLandPropExistingBuilding);
			attributeGetterFunctions.put(
				"landPropExistingBuildingOther",
				AcquireLandPropertyDetails::getLandPropExistingBuildingOther);
			attributeGetterFunctions.put(
				"landPropOwn", AcquireLandPropertyDetails::getLandPropOwn);
			attributeGetterFunctions.put(
				"landPropGovAcquired",
				AcquireLandPropertyDetails::getLandPropGovAcquired);
			attributeGetterFunctions.put(
				"landPropStateDetails",
				AcquireLandPropertyDetails::getLandPropStateDetails);
			attributeGetterFunctions.put(
				"landPropPaymentMethod",
				AcquireLandPropertyDetails::getLandPropPaymentMethod);
			attributeGetterFunctions.put(
				"landPropPaymentMethodOther",
				AcquireLandPropertyDetails::getLandPropPaymentMethodOther);
			attributeGetterFunctions.put(
				"landPropComments",
				AcquireLandPropertyDetails::getLandPropComments);
			attributeGetterFunctions.put(
				"acquireApplicationId",
				AcquireLandPropertyDetails::getAcquireApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AcquireLandPropertyDetails, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcquireLandPropertyDetails, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AcquireLandPropertyDetails, ?>>();

			attributeSetterBiConsumers.put(
				"acquireLandPropertyDetailsId",
				(BiConsumer<AcquireLandPropertyDetails, Long>)
					AcquireLandPropertyDetails::
						setAcquireLandPropertyDetailsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AcquireLandPropertyDetails, Long>)
					AcquireLandPropertyDetails::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AcquireLandPropertyDetails, Long>)
					AcquireLandPropertyDetails::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AcquireLandPropertyDetails, Long>)
					AcquireLandPropertyDetails::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AcquireLandPropertyDetails, Date>)
					AcquireLandPropertyDetails::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AcquireLandPropertyDetails, Date>)
					AcquireLandPropertyDetails::setModifiedDate);
			attributeSetterBiConsumers.put(
				"landPropIdentified",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropIdentified);
			attributeSetterBiConsumers.put(
				"landPropAddr",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropAddr);
			attributeSetterBiConsumers.put(
				"landPropOccupation",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropOccupation);
			attributeSetterBiConsumers.put(
				"landPropOccupationPeriod",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropOccupationPeriod);
			attributeSetterBiConsumers.put(
				"landPropTenureType",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropTenureType);
			attributeSetterBiConsumers.put(
				"landPropDesiredLoc",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropDesiredLoc);
			attributeSetterBiConsumers.put(
				"landPropProposedUse",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropProposedUse);
			attributeSetterBiConsumers.put(
				"landPropProposedUseOther",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropProposedUseOther);
			attributeSetterBiConsumers.put(
				"landPropPropTenureType",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropPropTenureType);
			attributeSetterBiConsumers.put(
				"landPropApplied",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropApplied);
			attributeSetterBiConsumers.put(
				"landPropApplicationDate",
				(BiConsumer<AcquireLandPropertyDetails, Date>)
					AcquireLandPropertyDetails::setLandPropApplicationDate);
			attributeSetterBiConsumers.put(
				"landPropExistingBuilding",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropExistingBuilding);
			attributeSetterBiConsumers.put(
				"landPropExistingBuildingOther",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::
						setLandPropExistingBuildingOther);
			attributeSetterBiConsumers.put(
				"landPropOwn",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropOwn);
			attributeSetterBiConsumers.put(
				"landPropGovAcquired",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropGovAcquired);
			attributeSetterBiConsumers.put(
				"landPropStateDetails",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropStateDetails);
			attributeSetterBiConsumers.put(
				"landPropPaymentMethod",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropPaymentMethod);
			attributeSetterBiConsumers.put(
				"landPropPaymentMethodOther",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropPaymentMethodOther);
			attributeSetterBiConsumers.put(
				"landPropComments",
				(BiConsumer<AcquireLandPropertyDetails, String>)
					AcquireLandPropertyDetails::setLandPropComments);
			attributeSetterBiConsumers.put(
				"acquireApplicationId",
				(BiConsumer<AcquireLandPropertyDetails, Long>)
					AcquireLandPropertyDetails::setAcquireApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAcquireLandPropertyDetailsId() {
		return _acquireLandPropertyDetailsId;
	}

	@Override
	public void setAcquireLandPropertyDetailsId(
		long acquireLandPropertyDetailsId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireLandPropertyDetailsId = acquireLandPropertyDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLandPropIdentified() {
		if (_landPropIdentified == null) {
			return "";
		}
		else {
			return _landPropIdentified;
		}
	}

	@Override
	public void setLandPropIdentified(String landPropIdentified) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropIdentified = landPropIdentified;
	}

	@JSON
	@Override
	public String getLandPropAddr() {
		if (_landPropAddr == null) {
			return "";
		}
		else {
			return _landPropAddr;
		}
	}

	@Override
	public void setLandPropAddr(String landPropAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropAddr = landPropAddr;
	}

	@JSON
	@Override
	public String getLandPropOccupation() {
		if (_landPropOccupation == null) {
			return "";
		}
		else {
			return _landPropOccupation;
		}
	}

	@Override
	public void setLandPropOccupation(String landPropOccupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropOccupation = landPropOccupation;
	}

	@JSON
	@Override
	public String getLandPropOccupationPeriod() {
		if (_landPropOccupationPeriod == null) {
			return "";
		}
		else {
			return _landPropOccupationPeriod;
		}
	}

	@Override
	public void setLandPropOccupationPeriod(String landPropOccupationPeriod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropOccupationPeriod = landPropOccupationPeriod;
	}

	@JSON
	@Override
	public String getLandPropTenureType() {
		if (_landPropTenureType == null) {
			return "";
		}
		else {
			return _landPropTenureType;
		}
	}

	@Override
	public void setLandPropTenureType(String landPropTenureType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropTenureType = landPropTenureType;
	}

	@JSON
	@Override
	public String getLandPropDesiredLoc() {
		if (_landPropDesiredLoc == null) {
			return "";
		}
		else {
			return _landPropDesiredLoc;
		}
	}

	@Override
	public void setLandPropDesiredLoc(String landPropDesiredLoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropDesiredLoc = landPropDesiredLoc;
	}

	@JSON
	@Override
	public String getLandPropProposedUse() {
		if (_landPropProposedUse == null) {
			return "";
		}
		else {
			return _landPropProposedUse;
		}
	}

	@Override
	public void setLandPropProposedUse(String landPropProposedUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropProposedUse = landPropProposedUse;
	}

	@JSON
	@Override
	public String getLandPropProposedUseOther() {
		if (_landPropProposedUseOther == null) {
			return "";
		}
		else {
			return _landPropProposedUseOther;
		}
	}

	@Override
	public void setLandPropProposedUseOther(String landPropProposedUseOther) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropProposedUseOther = landPropProposedUseOther;
	}

	@JSON
	@Override
	public String getLandPropPropTenureType() {
		if (_landPropPropTenureType == null) {
			return "";
		}
		else {
			return _landPropPropTenureType;
		}
	}

	@Override
	public void setLandPropPropTenureType(String landPropPropTenureType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropPropTenureType = landPropPropTenureType;
	}

	@JSON
	@Override
	public String getLandPropApplied() {
		if (_landPropApplied == null) {
			return "";
		}
		else {
			return _landPropApplied;
		}
	}

	@Override
	public void setLandPropApplied(String landPropApplied) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropApplied = landPropApplied;
	}

	@JSON
	@Override
	public Date getLandPropApplicationDate() {
		return _landPropApplicationDate;
	}

	@Override
	public void setLandPropApplicationDate(Date landPropApplicationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropApplicationDate = landPropApplicationDate;
	}

	@JSON
	@Override
	public String getLandPropExistingBuilding() {
		if (_landPropExistingBuilding == null) {
			return "";
		}
		else {
			return _landPropExistingBuilding;
		}
	}

	@Override
	public void setLandPropExistingBuilding(String landPropExistingBuilding) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropExistingBuilding = landPropExistingBuilding;
	}

	@JSON
	@Override
	public String getLandPropExistingBuildingOther() {
		if (_landPropExistingBuildingOther == null) {
			return "";
		}
		else {
			return _landPropExistingBuildingOther;
		}
	}

	@Override
	public void setLandPropExistingBuildingOther(
		String landPropExistingBuildingOther) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropExistingBuildingOther = landPropExistingBuildingOther;
	}

	@JSON
	@Override
	public String getLandPropOwn() {
		if (_landPropOwn == null) {
			return "";
		}
		else {
			return _landPropOwn;
		}
	}

	@Override
	public void setLandPropOwn(String landPropOwn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropOwn = landPropOwn;
	}

	@JSON
	@Override
	public String getLandPropGovAcquired() {
		if (_landPropGovAcquired == null) {
			return "";
		}
		else {
			return _landPropGovAcquired;
		}
	}

	@Override
	public void setLandPropGovAcquired(String landPropGovAcquired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropGovAcquired = landPropGovAcquired;
	}

	@JSON
	@Override
	public String getLandPropStateDetails() {
		if (_landPropStateDetails == null) {
			return "";
		}
		else {
			return _landPropStateDetails;
		}
	}

	@Override
	public void setLandPropStateDetails(String landPropStateDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropStateDetails = landPropStateDetails;
	}

	@JSON
	@Override
	public String getLandPropPaymentMethod() {
		if (_landPropPaymentMethod == null) {
			return "";
		}
		else {
			return _landPropPaymentMethod;
		}
	}

	@Override
	public void setLandPropPaymentMethod(String landPropPaymentMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropPaymentMethod = landPropPaymentMethod;
	}

	@JSON
	@Override
	public String getLandPropPaymentMethodOther() {
		if (_landPropPaymentMethodOther == null) {
			return "";
		}
		else {
			return _landPropPaymentMethodOther;
		}
	}

	@Override
	public void setLandPropPaymentMethodOther(
		String landPropPaymentMethodOther) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropPaymentMethodOther = landPropPaymentMethodOther;
	}

	@JSON
	@Override
	public String getLandPropComments() {
		if (_landPropComments == null) {
			return "";
		}
		else {
			return _landPropComments;
		}
	}

	@Override
	public void setLandPropComments(String landPropComments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landPropComments = landPropComments;
	}

	@JSON
	@Override
	public long getAcquireApplicationId() {
		return _acquireApplicationId;
	}

	@Override
	public void setAcquireApplicationId(long acquireApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireApplicationId = acquireApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAcquireApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AcquireLandPropertyDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcquireLandPropertyDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcquireLandPropertyDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcquireLandPropertyDetailsImpl acquireLandPropertyDetailsImpl =
			new AcquireLandPropertyDetailsImpl();

		acquireLandPropertyDetailsImpl.setAcquireLandPropertyDetailsId(
			getAcquireLandPropertyDetailsId());
		acquireLandPropertyDetailsImpl.setGroupId(getGroupId());
		acquireLandPropertyDetailsImpl.setCompanyId(getCompanyId());
		acquireLandPropertyDetailsImpl.setUserId(getUserId());
		acquireLandPropertyDetailsImpl.setUserName(getUserName());
		acquireLandPropertyDetailsImpl.setCreateDate(getCreateDate());
		acquireLandPropertyDetailsImpl.setModifiedDate(getModifiedDate());
		acquireLandPropertyDetailsImpl.setLandPropIdentified(
			getLandPropIdentified());
		acquireLandPropertyDetailsImpl.setLandPropAddr(getLandPropAddr());
		acquireLandPropertyDetailsImpl.setLandPropOccupation(
			getLandPropOccupation());
		acquireLandPropertyDetailsImpl.setLandPropOccupationPeriod(
			getLandPropOccupationPeriod());
		acquireLandPropertyDetailsImpl.setLandPropTenureType(
			getLandPropTenureType());
		acquireLandPropertyDetailsImpl.setLandPropDesiredLoc(
			getLandPropDesiredLoc());
		acquireLandPropertyDetailsImpl.setLandPropProposedUse(
			getLandPropProposedUse());
		acquireLandPropertyDetailsImpl.setLandPropProposedUseOther(
			getLandPropProposedUseOther());
		acquireLandPropertyDetailsImpl.setLandPropPropTenureType(
			getLandPropPropTenureType());
		acquireLandPropertyDetailsImpl.setLandPropApplied(getLandPropApplied());
		acquireLandPropertyDetailsImpl.setLandPropApplicationDate(
			getLandPropApplicationDate());
		acquireLandPropertyDetailsImpl.setLandPropExistingBuilding(
			getLandPropExistingBuilding());
		acquireLandPropertyDetailsImpl.setLandPropExistingBuildingOther(
			getLandPropExistingBuildingOther());
		acquireLandPropertyDetailsImpl.setLandPropOwn(getLandPropOwn());
		acquireLandPropertyDetailsImpl.setLandPropGovAcquired(
			getLandPropGovAcquired());
		acquireLandPropertyDetailsImpl.setLandPropStateDetails(
			getLandPropStateDetails());
		acquireLandPropertyDetailsImpl.setLandPropPaymentMethod(
			getLandPropPaymentMethod());
		acquireLandPropertyDetailsImpl.setLandPropPaymentMethodOther(
			getLandPropPaymentMethodOther());
		acquireLandPropertyDetailsImpl.setLandPropComments(
			getLandPropComments());
		acquireLandPropertyDetailsImpl.setAcquireApplicationId(
			getAcquireApplicationId());

		acquireLandPropertyDetailsImpl.resetOriginalValues();

		return acquireLandPropertyDetailsImpl;
	}

	@Override
	public AcquireLandPropertyDetails cloneWithOriginalValues() {
		AcquireLandPropertyDetailsImpl acquireLandPropertyDetailsImpl =
			new AcquireLandPropertyDetailsImpl();

		acquireLandPropertyDetailsImpl.setAcquireLandPropertyDetailsId(
			this.<Long>getColumnOriginalValue("acquireLandPropertyDetailsId"));
		acquireLandPropertyDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		acquireLandPropertyDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		acquireLandPropertyDetailsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		acquireLandPropertyDetailsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		acquireLandPropertyDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		acquireLandPropertyDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		acquireLandPropertyDetailsImpl.setLandPropIdentified(
			this.<String>getColumnOriginalValue("landPropIdentified"));
		acquireLandPropertyDetailsImpl.setLandPropAddr(
			this.<String>getColumnOriginalValue("landPropAddr"));
		acquireLandPropertyDetailsImpl.setLandPropOccupation(
			this.<String>getColumnOriginalValue("landPropOccupation"));
		acquireLandPropertyDetailsImpl.setLandPropOccupationPeriod(
			this.<String>getColumnOriginalValue("landPropOccupationPeriod"));
		acquireLandPropertyDetailsImpl.setLandPropTenureType(
			this.<String>getColumnOriginalValue("landPropTenureType"));
		acquireLandPropertyDetailsImpl.setLandPropDesiredLoc(
			this.<String>getColumnOriginalValue("landPropDesiredLoc"));
		acquireLandPropertyDetailsImpl.setLandPropProposedUse(
			this.<String>getColumnOriginalValue("landPropProposedUse"));
		acquireLandPropertyDetailsImpl.setLandPropProposedUseOther(
			this.<String>getColumnOriginalValue("landPropProposedUseOther"));
		acquireLandPropertyDetailsImpl.setLandPropPropTenureType(
			this.<String>getColumnOriginalValue("landPropPropTenureType"));
		acquireLandPropertyDetailsImpl.setLandPropApplied(
			this.<String>getColumnOriginalValue("landPropApplied"));
		acquireLandPropertyDetailsImpl.setLandPropApplicationDate(
			this.<Date>getColumnOriginalValue("landPropApplicationDate"));
		acquireLandPropertyDetailsImpl.setLandPropExistingBuilding(
			this.<String>getColumnOriginalValue("landPropExistingBuilding"));
		acquireLandPropertyDetailsImpl.setLandPropExistingBuildingOther(
			this.<String>getColumnOriginalValue(
				"landPropExistingBuildingOther"));
		acquireLandPropertyDetailsImpl.setLandPropOwn(
			this.<String>getColumnOriginalValue("landPropOwn"));
		acquireLandPropertyDetailsImpl.setLandPropGovAcquired(
			this.<String>getColumnOriginalValue("landPropGovAcquired"));
		acquireLandPropertyDetailsImpl.setLandPropStateDetails(
			this.<String>getColumnOriginalValue("landPropStateDetails"));
		acquireLandPropertyDetailsImpl.setLandPropPaymentMethod(
			this.<String>getColumnOriginalValue("landPropPaymentMethod"));
		acquireLandPropertyDetailsImpl.setLandPropPaymentMethodOther(
			this.<String>getColumnOriginalValue("landPropPaymentMethodOther"));
		acquireLandPropertyDetailsImpl.setLandPropComments(
			this.<String>getColumnOriginalValue("landPropComments"));
		acquireLandPropertyDetailsImpl.setAcquireApplicationId(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));

		return acquireLandPropertyDetailsImpl;
	}

	@Override
	public int compareTo(
		AcquireLandPropertyDetails acquireLandPropertyDetails) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), acquireLandPropertyDetails.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcquireLandPropertyDetails)) {
			return false;
		}

		AcquireLandPropertyDetails acquireLandPropertyDetails =
			(AcquireLandPropertyDetails)object;

		long primaryKey = acquireLandPropertyDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcquireLandPropertyDetails> toCacheModel() {
		AcquireLandPropertyDetailsCacheModel
			acquireLandPropertyDetailsCacheModel =
				new AcquireLandPropertyDetailsCacheModel();

		acquireLandPropertyDetailsCacheModel.acquireLandPropertyDetailsId =
			getAcquireLandPropertyDetailsId();

		acquireLandPropertyDetailsCacheModel.groupId = getGroupId();

		acquireLandPropertyDetailsCacheModel.companyId = getCompanyId();

		acquireLandPropertyDetailsCacheModel.userId = getUserId();

		acquireLandPropertyDetailsCacheModel.userName = getUserName();

		String userName = acquireLandPropertyDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			acquireLandPropertyDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			acquireLandPropertyDetailsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			acquireLandPropertyDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			acquireLandPropertyDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			acquireLandPropertyDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		acquireLandPropertyDetailsCacheModel.landPropIdentified =
			getLandPropIdentified();

		String landPropIdentified =
			acquireLandPropertyDetailsCacheModel.landPropIdentified;

		if ((landPropIdentified != null) &&
			(landPropIdentified.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropIdentified = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropAddr = getLandPropAddr();

		String landPropAddr = acquireLandPropertyDetailsCacheModel.landPropAddr;

		if ((landPropAddr != null) && (landPropAddr.length() == 0)) {
			acquireLandPropertyDetailsCacheModel.landPropAddr = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropOccupation =
			getLandPropOccupation();

		String landPropOccupation =
			acquireLandPropertyDetailsCacheModel.landPropOccupation;

		if ((landPropOccupation != null) &&
			(landPropOccupation.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropOccupation = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropOccupationPeriod =
			getLandPropOccupationPeriod();

		String landPropOccupationPeriod =
			acquireLandPropertyDetailsCacheModel.landPropOccupationPeriod;

		if ((landPropOccupationPeriod != null) &&
			(landPropOccupationPeriod.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropOccupationPeriod =
				null;
		}

		acquireLandPropertyDetailsCacheModel.landPropTenureType =
			getLandPropTenureType();

		String landPropTenureType =
			acquireLandPropertyDetailsCacheModel.landPropTenureType;

		if ((landPropTenureType != null) &&
			(landPropTenureType.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropTenureType = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropDesiredLoc =
			getLandPropDesiredLoc();

		String landPropDesiredLoc =
			acquireLandPropertyDetailsCacheModel.landPropDesiredLoc;

		if ((landPropDesiredLoc != null) &&
			(landPropDesiredLoc.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropDesiredLoc = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropProposedUse =
			getLandPropProposedUse();

		String landPropProposedUse =
			acquireLandPropertyDetailsCacheModel.landPropProposedUse;

		if ((landPropProposedUse != null) &&
			(landPropProposedUse.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropProposedUse = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropProposedUseOther =
			getLandPropProposedUseOther();

		String landPropProposedUseOther =
			acquireLandPropertyDetailsCacheModel.landPropProposedUseOther;

		if ((landPropProposedUseOther != null) &&
			(landPropProposedUseOther.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropProposedUseOther =
				null;
		}

		acquireLandPropertyDetailsCacheModel.landPropPropTenureType =
			getLandPropPropTenureType();

		String landPropPropTenureType =
			acquireLandPropertyDetailsCacheModel.landPropPropTenureType;

		if ((landPropPropTenureType != null) &&
			(landPropPropTenureType.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropPropTenureType = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropApplied =
			getLandPropApplied();

		String landPropApplied =
			acquireLandPropertyDetailsCacheModel.landPropApplied;

		if ((landPropApplied != null) && (landPropApplied.length() == 0)) {
			acquireLandPropertyDetailsCacheModel.landPropApplied = null;
		}

		Date landPropApplicationDate = getLandPropApplicationDate();

		if (landPropApplicationDate != null) {
			acquireLandPropertyDetailsCacheModel.landPropApplicationDate =
				landPropApplicationDate.getTime();
		}
		else {
			acquireLandPropertyDetailsCacheModel.landPropApplicationDate =
				Long.MIN_VALUE;
		}

		acquireLandPropertyDetailsCacheModel.landPropExistingBuilding =
			getLandPropExistingBuilding();

		String landPropExistingBuilding =
			acquireLandPropertyDetailsCacheModel.landPropExistingBuilding;

		if ((landPropExistingBuilding != null) &&
			(landPropExistingBuilding.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropExistingBuilding =
				null;
		}

		acquireLandPropertyDetailsCacheModel.landPropExistingBuildingOther =
			getLandPropExistingBuildingOther();

		String landPropExistingBuildingOther =
			acquireLandPropertyDetailsCacheModel.landPropExistingBuildingOther;

		if ((landPropExistingBuildingOther != null) &&
			(landPropExistingBuildingOther.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropExistingBuildingOther =
				null;
		}

		acquireLandPropertyDetailsCacheModel.landPropOwn = getLandPropOwn();

		String landPropOwn = acquireLandPropertyDetailsCacheModel.landPropOwn;

		if ((landPropOwn != null) && (landPropOwn.length() == 0)) {
			acquireLandPropertyDetailsCacheModel.landPropOwn = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropGovAcquired =
			getLandPropGovAcquired();

		String landPropGovAcquired =
			acquireLandPropertyDetailsCacheModel.landPropGovAcquired;

		if ((landPropGovAcquired != null) &&
			(landPropGovAcquired.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropGovAcquired = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropStateDetails =
			getLandPropStateDetails();

		String landPropStateDetails =
			acquireLandPropertyDetailsCacheModel.landPropStateDetails;

		if ((landPropStateDetails != null) &&
			(landPropStateDetails.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropStateDetails = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropPaymentMethod =
			getLandPropPaymentMethod();

		String landPropPaymentMethod =
			acquireLandPropertyDetailsCacheModel.landPropPaymentMethod;

		if ((landPropPaymentMethod != null) &&
			(landPropPaymentMethod.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropPaymentMethod = null;
		}

		acquireLandPropertyDetailsCacheModel.landPropPaymentMethodOther =
			getLandPropPaymentMethodOther();

		String landPropPaymentMethodOther =
			acquireLandPropertyDetailsCacheModel.landPropPaymentMethodOther;

		if ((landPropPaymentMethodOther != null) &&
			(landPropPaymentMethodOther.length() == 0)) {

			acquireLandPropertyDetailsCacheModel.landPropPaymentMethodOther =
				null;
		}

		acquireLandPropertyDetailsCacheModel.landPropComments =
			getLandPropComments();

		String landPropComments =
			acquireLandPropertyDetailsCacheModel.landPropComments;

		if ((landPropComments != null) && (landPropComments.length() == 0)) {
			acquireLandPropertyDetailsCacheModel.landPropComments = null;
		}

		acquireLandPropertyDetailsCacheModel.acquireApplicationId =
			getAcquireApplicationId();

		return acquireLandPropertyDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcquireLandPropertyDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcquireLandPropertyDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireLandPropertyDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AcquireLandPropertyDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AcquireLandPropertyDetails>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AcquireLandPropertyDetails.class, ModelWrapper.class);

	}

	private long _acquireLandPropertyDetailsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _landPropIdentified;
	private String _landPropAddr;
	private String _landPropOccupation;
	private String _landPropOccupationPeriod;
	private String _landPropTenureType;
	private String _landPropDesiredLoc;
	private String _landPropProposedUse;
	private String _landPropProposedUseOther;
	private String _landPropPropTenureType;
	private String _landPropApplied;
	private Date _landPropApplicationDate;
	private String _landPropExistingBuilding;
	private String _landPropExistingBuildingOther;
	private String _landPropOwn;
	private String _landPropGovAcquired;
	private String _landPropStateDetails;
	private String _landPropPaymentMethod;
	private String _landPropPaymentMethodOther;
	private String _landPropComments;
	private long _acquireApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AcquireLandPropertyDetails, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcquireLandPropertyDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"acquireLandPropertyDetailsId", _acquireLandPropertyDetailsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("landPropIdentified", _landPropIdentified);
		_columnOriginalValues.put("landPropAddr", _landPropAddr);
		_columnOriginalValues.put("landPropOccupation", _landPropOccupation);
		_columnOriginalValues.put(
			"landPropOccupationPeriod", _landPropOccupationPeriod);
		_columnOriginalValues.put("landPropTenureType", _landPropTenureType);
		_columnOriginalValues.put("landPropDesiredLoc", _landPropDesiredLoc);
		_columnOriginalValues.put("landPropProposedUse", _landPropProposedUse);
		_columnOriginalValues.put(
			"landPropProposedUseOther", _landPropProposedUseOther);
		_columnOriginalValues.put(
			"landPropPropTenureType", _landPropPropTenureType);
		_columnOriginalValues.put("landPropApplied", _landPropApplied);
		_columnOriginalValues.put(
			"landPropApplicationDate", _landPropApplicationDate);
		_columnOriginalValues.put(
			"landPropExistingBuilding", _landPropExistingBuilding);
		_columnOriginalValues.put(
			"landPropExistingBuildingOther", _landPropExistingBuildingOther);
		_columnOriginalValues.put("landPropOwn", _landPropOwn);
		_columnOriginalValues.put("landPropGovAcquired", _landPropGovAcquired);
		_columnOriginalValues.put(
			"landPropStateDetails", _landPropStateDetails);
		_columnOriginalValues.put(
			"landPropPaymentMethod", _landPropPaymentMethod);
		_columnOriginalValues.put(
			"landPropPaymentMethodOther", _landPropPaymentMethodOther);
		_columnOriginalValues.put("landPropComments", _landPropComments);
		_columnOriginalValues.put(
			"acquireApplicationId", _acquireApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("acquireLandPropertyDetailsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("landPropIdentified", 128L);

		columnBitmasks.put("landPropAddr", 256L);

		columnBitmasks.put("landPropOccupation", 512L);

		columnBitmasks.put("landPropOccupationPeriod", 1024L);

		columnBitmasks.put("landPropTenureType", 2048L);

		columnBitmasks.put("landPropDesiredLoc", 4096L);

		columnBitmasks.put("landPropProposedUse", 8192L);

		columnBitmasks.put("landPropProposedUseOther", 16384L);

		columnBitmasks.put("landPropPropTenureType", 32768L);

		columnBitmasks.put("landPropApplied", 65536L);

		columnBitmasks.put("landPropApplicationDate", 131072L);

		columnBitmasks.put("landPropExistingBuilding", 262144L);

		columnBitmasks.put("landPropExistingBuildingOther", 524288L);

		columnBitmasks.put("landPropOwn", 1048576L);

		columnBitmasks.put("landPropGovAcquired", 2097152L);

		columnBitmasks.put("landPropStateDetails", 4194304L);

		columnBitmasks.put("landPropPaymentMethod", 8388608L);

		columnBitmasks.put("landPropPaymentMethodOther", 16777216L);

		columnBitmasks.put("landPropComments", 33554432L);

		columnBitmasks.put("acquireApplicationId", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcquireLandPropertyDetails _escapedModel;

}