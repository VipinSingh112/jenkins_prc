/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.acquire.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.acquire.application.form.service.model.AcquireLandEmployment;
import com.nbp.acquire.application.form.service.model.AcquireLandEmploymentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcquireLandEmployment service. Represents a row in the &quot;nbp_acquire_land_employment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcquireLandEmploymentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcquireLandEmploymentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcquireLandEmploymentImpl
 * @generated
 */
@JSON(strict = true)
public class AcquireLandEmploymentModelImpl
	extends BaseModelImpl<AcquireLandEmployment>
	implements AcquireLandEmploymentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acquire land employment model instance should use the <code>AcquireLandEmployment</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_acquire_land_employment";

	public static final Object[][] TABLE_COLUMNS = {
		{"acquireLandEmploymentId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"landEmploymentStatus", Types.VARCHAR},
		{"landEmpJamaicaGovEmplyee", Types.VARCHAR},
		{"landEmpCompanyName", Types.VARCHAR},
		{"landEmploymentJobTitle", Types.VARCHAR},
		{"landEmpCompanyAddr", Types.VARCHAR},
		{"landEmpTeleNum", Types.VARCHAR},
		{"landEmpGrossSalaryType", Types.VARCHAR},
		{"landEmpGrossSalary", Types.VARCHAR},
		{"landEmpOtherIncomeSource", Types.VARCHAR},
		{"landEmpOtherSalaryType", Types.VARCHAR},
		{"landEmpOtherIncomeAmount", Types.VARCHAR},
		{"landEmpFinancialSupportPerson", Types.VARCHAR},
		{"acquireApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("acquireLandEmploymentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("landEmploymentStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpJamaicaGovEmplyee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpCompanyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmploymentJobTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpCompanyAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpTeleNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpGrossSalaryType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpGrossSalary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpOtherIncomeSource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpOtherSalaryType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpOtherIncomeAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landEmpFinancialSupportPerson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("acquireApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_acquire_land_employment (acquireLandEmploymentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,landEmploymentStatus VARCHAR(75) null,landEmpJamaicaGovEmplyee VARCHAR(75) null,landEmpCompanyName VARCHAR(75) null,landEmploymentJobTitle VARCHAR(75) null,landEmpCompanyAddr VARCHAR(500) null,landEmpTeleNum VARCHAR(75) null,landEmpGrossSalaryType VARCHAR(75) null,landEmpGrossSalary VARCHAR(75) null,landEmpOtherIncomeSource VARCHAR(75) null,landEmpOtherSalaryType VARCHAR(75) null,landEmpOtherIncomeAmount VARCHAR(75) null,landEmpFinancialSupportPerson VARCHAR(75) null,acquireApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_acquire_land_employment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acquireLandEmployment.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_acquire_land_employment.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACQUIREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcquireLandEmploymentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _acquireLandEmploymentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAcquireLandEmploymentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _acquireLandEmploymentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcquireLandEmployment.class;
	}

	@Override
	public String getModelClassName() {
		return AcquireLandEmployment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcquireLandEmployment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcquireLandEmployment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireLandEmployment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AcquireLandEmployment)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcquireLandEmployment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcquireLandEmployment, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcquireLandEmployment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcquireLandEmployment, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcquireLandEmployment, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AcquireLandEmployment, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AcquireLandEmployment, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AcquireLandEmployment, Object>>();

			attributeGetterFunctions.put(
				"acquireLandEmploymentId",
				AcquireLandEmployment::getAcquireLandEmploymentId);
			attributeGetterFunctions.put(
				"groupId", AcquireLandEmployment::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AcquireLandEmployment::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AcquireLandEmployment::getUserId);
			attributeGetterFunctions.put(
				"userName", AcquireLandEmployment::getUserName);
			attributeGetterFunctions.put(
				"createDate", AcquireLandEmployment::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AcquireLandEmployment::getModifiedDate);
			attributeGetterFunctions.put(
				"landEmploymentStatus",
				AcquireLandEmployment::getLandEmploymentStatus);
			attributeGetterFunctions.put(
				"landEmpJamaicaGovEmplyee",
				AcquireLandEmployment::getLandEmpJamaicaGovEmplyee);
			attributeGetterFunctions.put(
				"landEmpCompanyName",
				AcquireLandEmployment::getLandEmpCompanyName);
			attributeGetterFunctions.put(
				"landEmploymentJobTitle",
				AcquireLandEmployment::getLandEmploymentJobTitle);
			attributeGetterFunctions.put(
				"landEmpCompanyAddr",
				AcquireLandEmployment::getLandEmpCompanyAddr);
			attributeGetterFunctions.put(
				"landEmpTeleNum", AcquireLandEmployment::getLandEmpTeleNum);
			attributeGetterFunctions.put(
				"landEmpGrossSalaryType",
				AcquireLandEmployment::getLandEmpGrossSalaryType);
			attributeGetterFunctions.put(
				"landEmpGrossSalary",
				AcquireLandEmployment::getLandEmpGrossSalary);
			attributeGetterFunctions.put(
				"landEmpOtherIncomeSource",
				AcquireLandEmployment::getLandEmpOtherIncomeSource);
			attributeGetterFunctions.put(
				"landEmpOtherSalaryType",
				AcquireLandEmployment::getLandEmpOtherSalaryType);
			attributeGetterFunctions.put(
				"landEmpOtherIncomeAmount",
				AcquireLandEmployment::getLandEmpOtherIncomeAmount);
			attributeGetterFunctions.put(
				"landEmpFinancialSupportPerson",
				AcquireLandEmployment::getLandEmpFinancialSupportPerson);
			attributeGetterFunctions.put(
				"acquireApplicationId",
				AcquireLandEmployment::getAcquireApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AcquireLandEmployment, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcquireLandEmployment, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AcquireLandEmployment, ?>>();

			attributeSetterBiConsumers.put(
				"acquireLandEmploymentId",
				(BiConsumer<AcquireLandEmployment, Long>)
					AcquireLandEmployment::setAcquireLandEmploymentId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AcquireLandEmployment, Long>)
					AcquireLandEmployment::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AcquireLandEmployment, Long>)
					AcquireLandEmployment::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AcquireLandEmployment, Long>)
					AcquireLandEmployment::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AcquireLandEmployment, Date>)
					AcquireLandEmployment::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AcquireLandEmployment, Date>)
					AcquireLandEmployment::setModifiedDate);
			attributeSetterBiConsumers.put(
				"landEmploymentStatus",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmploymentStatus);
			attributeSetterBiConsumers.put(
				"landEmpJamaicaGovEmplyee",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpJamaicaGovEmplyee);
			attributeSetterBiConsumers.put(
				"landEmpCompanyName",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpCompanyName);
			attributeSetterBiConsumers.put(
				"landEmploymentJobTitle",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmploymentJobTitle);
			attributeSetterBiConsumers.put(
				"landEmpCompanyAddr",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpCompanyAddr);
			attributeSetterBiConsumers.put(
				"landEmpTeleNum",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpTeleNum);
			attributeSetterBiConsumers.put(
				"landEmpGrossSalaryType",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpGrossSalaryType);
			attributeSetterBiConsumers.put(
				"landEmpGrossSalary",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpGrossSalary);
			attributeSetterBiConsumers.put(
				"landEmpOtherIncomeSource",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpOtherIncomeSource);
			attributeSetterBiConsumers.put(
				"landEmpOtherSalaryType",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpOtherSalaryType);
			attributeSetterBiConsumers.put(
				"landEmpOtherIncomeAmount",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpOtherIncomeAmount);
			attributeSetterBiConsumers.put(
				"landEmpFinancialSupportPerson",
				(BiConsumer<AcquireLandEmployment, String>)
					AcquireLandEmployment::setLandEmpFinancialSupportPerson);
			attributeSetterBiConsumers.put(
				"acquireApplicationId",
				(BiConsumer<AcquireLandEmployment, Long>)
					AcquireLandEmployment::setAcquireApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAcquireLandEmploymentId() {
		return _acquireLandEmploymentId;
	}

	@Override
	public void setAcquireLandEmploymentId(long acquireLandEmploymentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireLandEmploymentId = acquireLandEmploymentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLandEmploymentStatus() {
		if (_landEmploymentStatus == null) {
			return "";
		}
		else {
			return _landEmploymentStatus;
		}
	}

	@Override
	public void setLandEmploymentStatus(String landEmploymentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmploymentStatus = landEmploymentStatus;
	}

	@JSON
	@Override
	public String getLandEmpJamaicaGovEmplyee() {
		if (_landEmpJamaicaGovEmplyee == null) {
			return "";
		}
		else {
			return _landEmpJamaicaGovEmplyee;
		}
	}

	@Override
	public void setLandEmpJamaicaGovEmplyee(String landEmpJamaicaGovEmplyee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpJamaicaGovEmplyee = landEmpJamaicaGovEmplyee;
	}

	@JSON
	@Override
	public String getLandEmpCompanyName() {
		if (_landEmpCompanyName == null) {
			return "";
		}
		else {
			return _landEmpCompanyName;
		}
	}

	@Override
	public void setLandEmpCompanyName(String landEmpCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpCompanyName = landEmpCompanyName;
	}

	@JSON
	@Override
	public String getLandEmploymentJobTitle() {
		if (_landEmploymentJobTitle == null) {
			return "";
		}
		else {
			return _landEmploymentJobTitle;
		}
	}

	@Override
	public void setLandEmploymentJobTitle(String landEmploymentJobTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmploymentJobTitle = landEmploymentJobTitle;
	}

	@JSON
	@Override
	public String getLandEmpCompanyAddr() {
		if (_landEmpCompanyAddr == null) {
			return "";
		}
		else {
			return _landEmpCompanyAddr;
		}
	}

	@Override
	public void setLandEmpCompanyAddr(String landEmpCompanyAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpCompanyAddr = landEmpCompanyAddr;
	}

	@JSON
	@Override
	public String getLandEmpTeleNum() {
		if (_landEmpTeleNum == null) {
			return "";
		}
		else {
			return _landEmpTeleNum;
		}
	}

	@Override
	public void setLandEmpTeleNum(String landEmpTeleNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpTeleNum = landEmpTeleNum;
	}

	@JSON
	@Override
	public String getLandEmpGrossSalaryType() {
		if (_landEmpGrossSalaryType == null) {
			return "";
		}
		else {
			return _landEmpGrossSalaryType;
		}
	}

	@Override
	public void setLandEmpGrossSalaryType(String landEmpGrossSalaryType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpGrossSalaryType = landEmpGrossSalaryType;
	}

	@JSON
	@Override
	public String getLandEmpGrossSalary() {
		if (_landEmpGrossSalary == null) {
			return "";
		}
		else {
			return _landEmpGrossSalary;
		}
	}

	@Override
	public void setLandEmpGrossSalary(String landEmpGrossSalary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpGrossSalary = landEmpGrossSalary;
	}

	@JSON
	@Override
	public String getLandEmpOtherIncomeSource() {
		if (_landEmpOtherIncomeSource == null) {
			return "";
		}
		else {
			return _landEmpOtherIncomeSource;
		}
	}

	@Override
	public void setLandEmpOtherIncomeSource(String landEmpOtherIncomeSource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpOtherIncomeSource = landEmpOtherIncomeSource;
	}

	@JSON
	@Override
	public String getLandEmpOtherSalaryType() {
		if (_landEmpOtherSalaryType == null) {
			return "";
		}
		else {
			return _landEmpOtherSalaryType;
		}
	}

	@Override
	public void setLandEmpOtherSalaryType(String landEmpOtherSalaryType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpOtherSalaryType = landEmpOtherSalaryType;
	}

	@JSON
	@Override
	public String getLandEmpOtherIncomeAmount() {
		if (_landEmpOtherIncomeAmount == null) {
			return "";
		}
		else {
			return _landEmpOtherIncomeAmount;
		}
	}

	@Override
	public void setLandEmpOtherIncomeAmount(String landEmpOtherIncomeAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpOtherIncomeAmount = landEmpOtherIncomeAmount;
	}

	@JSON
	@Override
	public String getLandEmpFinancialSupportPerson() {
		if (_landEmpFinancialSupportPerson == null) {
			return "";
		}
		else {
			return _landEmpFinancialSupportPerson;
		}
	}

	@Override
	public void setLandEmpFinancialSupportPerson(
		String landEmpFinancialSupportPerson) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landEmpFinancialSupportPerson = landEmpFinancialSupportPerson;
	}

	@JSON
	@Override
	public long getAcquireApplicationId() {
		return _acquireApplicationId;
	}

	@Override
	public void setAcquireApplicationId(long acquireApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireApplicationId = acquireApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAcquireApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AcquireLandEmployment.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcquireLandEmployment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcquireLandEmployment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcquireLandEmploymentImpl acquireLandEmploymentImpl =
			new AcquireLandEmploymentImpl();

		acquireLandEmploymentImpl.setAcquireLandEmploymentId(
			getAcquireLandEmploymentId());
		acquireLandEmploymentImpl.setGroupId(getGroupId());
		acquireLandEmploymentImpl.setCompanyId(getCompanyId());
		acquireLandEmploymentImpl.setUserId(getUserId());
		acquireLandEmploymentImpl.setUserName(getUserName());
		acquireLandEmploymentImpl.setCreateDate(getCreateDate());
		acquireLandEmploymentImpl.setModifiedDate(getModifiedDate());
		acquireLandEmploymentImpl.setLandEmploymentStatus(
			getLandEmploymentStatus());
		acquireLandEmploymentImpl.setLandEmpJamaicaGovEmplyee(
			getLandEmpJamaicaGovEmplyee());
		acquireLandEmploymentImpl.setLandEmpCompanyName(
			getLandEmpCompanyName());
		acquireLandEmploymentImpl.setLandEmploymentJobTitle(
			getLandEmploymentJobTitle());
		acquireLandEmploymentImpl.setLandEmpCompanyAddr(
			getLandEmpCompanyAddr());
		acquireLandEmploymentImpl.setLandEmpTeleNum(getLandEmpTeleNum());
		acquireLandEmploymentImpl.setLandEmpGrossSalaryType(
			getLandEmpGrossSalaryType());
		acquireLandEmploymentImpl.setLandEmpGrossSalary(
			getLandEmpGrossSalary());
		acquireLandEmploymentImpl.setLandEmpOtherIncomeSource(
			getLandEmpOtherIncomeSource());
		acquireLandEmploymentImpl.setLandEmpOtherSalaryType(
			getLandEmpOtherSalaryType());
		acquireLandEmploymentImpl.setLandEmpOtherIncomeAmount(
			getLandEmpOtherIncomeAmount());
		acquireLandEmploymentImpl.setLandEmpFinancialSupportPerson(
			getLandEmpFinancialSupportPerson());
		acquireLandEmploymentImpl.setAcquireApplicationId(
			getAcquireApplicationId());

		acquireLandEmploymentImpl.resetOriginalValues();

		return acquireLandEmploymentImpl;
	}

	@Override
	public AcquireLandEmployment cloneWithOriginalValues() {
		AcquireLandEmploymentImpl acquireLandEmploymentImpl =
			new AcquireLandEmploymentImpl();

		acquireLandEmploymentImpl.setAcquireLandEmploymentId(
			this.<Long>getColumnOriginalValue("acquireLandEmploymentId"));
		acquireLandEmploymentImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		acquireLandEmploymentImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		acquireLandEmploymentImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		acquireLandEmploymentImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		acquireLandEmploymentImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		acquireLandEmploymentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		acquireLandEmploymentImpl.setLandEmploymentStatus(
			this.<String>getColumnOriginalValue("landEmploymentStatus"));
		acquireLandEmploymentImpl.setLandEmpJamaicaGovEmplyee(
			this.<String>getColumnOriginalValue("landEmpJamaicaGovEmplyee"));
		acquireLandEmploymentImpl.setLandEmpCompanyName(
			this.<String>getColumnOriginalValue("landEmpCompanyName"));
		acquireLandEmploymentImpl.setLandEmploymentJobTitle(
			this.<String>getColumnOriginalValue("landEmploymentJobTitle"));
		acquireLandEmploymentImpl.setLandEmpCompanyAddr(
			this.<String>getColumnOriginalValue("landEmpCompanyAddr"));
		acquireLandEmploymentImpl.setLandEmpTeleNum(
			this.<String>getColumnOriginalValue("landEmpTeleNum"));
		acquireLandEmploymentImpl.setLandEmpGrossSalaryType(
			this.<String>getColumnOriginalValue("landEmpGrossSalaryType"));
		acquireLandEmploymentImpl.setLandEmpGrossSalary(
			this.<String>getColumnOriginalValue("landEmpGrossSalary"));
		acquireLandEmploymentImpl.setLandEmpOtherIncomeSource(
			this.<String>getColumnOriginalValue("landEmpOtherIncomeSource"));
		acquireLandEmploymentImpl.setLandEmpOtherSalaryType(
			this.<String>getColumnOriginalValue("landEmpOtherSalaryType"));
		acquireLandEmploymentImpl.setLandEmpOtherIncomeAmount(
			this.<String>getColumnOriginalValue("landEmpOtherIncomeAmount"));
		acquireLandEmploymentImpl.setLandEmpFinancialSupportPerson(
			this.<String>getColumnOriginalValue(
				"landEmpFinancialSupportPerson"));
		acquireLandEmploymentImpl.setAcquireApplicationId(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));

		return acquireLandEmploymentImpl;
	}

	@Override
	public int compareTo(AcquireLandEmployment acquireLandEmployment) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), acquireLandEmployment.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcquireLandEmployment)) {
			return false;
		}

		AcquireLandEmployment acquireLandEmployment =
			(AcquireLandEmployment)object;

		long primaryKey = acquireLandEmployment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcquireLandEmployment> toCacheModel() {
		AcquireLandEmploymentCacheModel acquireLandEmploymentCacheModel =
			new AcquireLandEmploymentCacheModel();

		acquireLandEmploymentCacheModel.acquireLandEmploymentId =
			getAcquireLandEmploymentId();

		acquireLandEmploymentCacheModel.groupId = getGroupId();

		acquireLandEmploymentCacheModel.companyId = getCompanyId();

		acquireLandEmploymentCacheModel.userId = getUserId();

		acquireLandEmploymentCacheModel.userName = getUserName();

		String userName = acquireLandEmploymentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			acquireLandEmploymentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			acquireLandEmploymentCacheModel.createDate = createDate.getTime();
		}
		else {
			acquireLandEmploymentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			acquireLandEmploymentCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			acquireLandEmploymentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		acquireLandEmploymentCacheModel.landEmploymentStatus =
			getLandEmploymentStatus();

		String landEmploymentStatus =
			acquireLandEmploymentCacheModel.landEmploymentStatus;

		if ((landEmploymentStatus != null) &&
			(landEmploymentStatus.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmploymentStatus = null;
		}

		acquireLandEmploymentCacheModel.landEmpJamaicaGovEmplyee =
			getLandEmpJamaicaGovEmplyee();

		String landEmpJamaicaGovEmplyee =
			acquireLandEmploymentCacheModel.landEmpJamaicaGovEmplyee;

		if ((landEmpJamaicaGovEmplyee != null) &&
			(landEmpJamaicaGovEmplyee.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpJamaicaGovEmplyee = null;
		}

		acquireLandEmploymentCacheModel.landEmpCompanyName =
			getLandEmpCompanyName();

		String landEmpCompanyName =
			acquireLandEmploymentCacheModel.landEmpCompanyName;

		if ((landEmpCompanyName != null) &&
			(landEmpCompanyName.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpCompanyName = null;
		}

		acquireLandEmploymentCacheModel.landEmploymentJobTitle =
			getLandEmploymentJobTitle();

		String landEmploymentJobTitle =
			acquireLandEmploymentCacheModel.landEmploymentJobTitle;

		if ((landEmploymentJobTitle != null) &&
			(landEmploymentJobTitle.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmploymentJobTitle = null;
		}

		acquireLandEmploymentCacheModel.landEmpCompanyAddr =
			getLandEmpCompanyAddr();

		String landEmpCompanyAddr =
			acquireLandEmploymentCacheModel.landEmpCompanyAddr;

		if ((landEmpCompanyAddr != null) &&
			(landEmpCompanyAddr.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpCompanyAddr = null;
		}

		acquireLandEmploymentCacheModel.landEmpTeleNum = getLandEmpTeleNum();

		String landEmpTeleNum = acquireLandEmploymentCacheModel.landEmpTeleNum;

		if ((landEmpTeleNum != null) && (landEmpTeleNum.length() == 0)) {
			acquireLandEmploymentCacheModel.landEmpTeleNum = null;
		}

		acquireLandEmploymentCacheModel.landEmpGrossSalaryType =
			getLandEmpGrossSalaryType();

		String landEmpGrossSalaryType =
			acquireLandEmploymentCacheModel.landEmpGrossSalaryType;

		if ((landEmpGrossSalaryType != null) &&
			(landEmpGrossSalaryType.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpGrossSalaryType = null;
		}

		acquireLandEmploymentCacheModel.landEmpGrossSalary =
			getLandEmpGrossSalary();

		String landEmpGrossSalary =
			acquireLandEmploymentCacheModel.landEmpGrossSalary;

		if ((landEmpGrossSalary != null) &&
			(landEmpGrossSalary.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpGrossSalary = null;
		}

		acquireLandEmploymentCacheModel.landEmpOtherIncomeSource =
			getLandEmpOtherIncomeSource();

		String landEmpOtherIncomeSource =
			acquireLandEmploymentCacheModel.landEmpOtherIncomeSource;

		if ((landEmpOtherIncomeSource != null) &&
			(landEmpOtherIncomeSource.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpOtherIncomeSource = null;
		}

		acquireLandEmploymentCacheModel.landEmpOtherSalaryType =
			getLandEmpOtherSalaryType();

		String landEmpOtherSalaryType =
			acquireLandEmploymentCacheModel.landEmpOtherSalaryType;

		if ((landEmpOtherSalaryType != null) &&
			(landEmpOtherSalaryType.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpOtherSalaryType = null;
		}

		acquireLandEmploymentCacheModel.landEmpOtherIncomeAmount =
			getLandEmpOtherIncomeAmount();

		String landEmpOtherIncomeAmount =
			acquireLandEmploymentCacheModel.landEmpOtherIncomeAmount;

		if ((landEmpOtherIncomeAmount != null) &&
			(landEmpOtherIncomeAmount.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpOtherIncomeAmount = null;
		}

		acquireLandEmploymentCacheModel.landEmpFinancialSupportPerson =
			getLandEmpFinancialSupportPerson();

		String landEmpFinancialSupportPerson =
			acquireLandEmploymentCacheModel.landEmpFinancialSupportPerson;

		if ((landEmpFinancialSupportPerson != null) &&
			(landEmpFinancialSupportPerson.length() == 0)) {

			acquireLandEmploymentCacheModel.landEmpFinancialSupportPerson =
				null;
		}

		acquireLandEmploymentCacheModel.acquireApplicationId =
			getAcquireApplicationId();

		return acquireLandEmploymentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcquireLandEmployment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcquireLandEmployment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireLandEmployment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AcquireLandEmployment)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AcquireLandEmployment>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AcquireLandEmployment.class, ModelWrapper.class);

	}

	private long _acquireLandEmploymentId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _landEmploymentStatus;
	private String _landEmpJamaicaGovEmplyee;
	private String _landEmpCompanyName;
	private String _landEmploymentJobTitle;
	private String _landEmpCompanyAddr;
	private String _landEmpTeleNum;
	private String _landEmpGrossSalaryType;
	private String _landEmpGrossSalary;
	private String _landEmpOtherIncomeSource;
	private String _landEmpOtherSalaryType;
	private String _landEmpOtherIncomeAmount;
	private String _landEmpFinancialSupportPerson;
	private long _acquireApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AcquireLandEmployment, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcquireLandEmployment)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"acquireLandEmploymentId", _acquireLandEmploymentId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"landEmploymentStatus", _landEmploymentStatus);
		_columnOriginalValues.put(
			"landEmpJamaicaGovEmplyee", _landEmpJamaicaGovEmplyee);
		_columnOriginalValues.put("landEmpCompanyName", _landEmpCompanyName);
		_columnOriginalValues.put(
			"landEmploymentJobTitle", _landEmploymentJobTitle);
		_columnOriginalValues.put("landEmpCompanyAddr", _landEmpCompanyAddr);
		_columnOriginalValues.put("landEmpTeleNum", _landEmpTeleNum);
		_columnOriginalValues.put(
			"landEmpGrossSalaryType", _landEmpGrossSalaryType);
		_columnOriginalValues.put("landEmpGrossSalary", _landEmpGrossSalary);
		_columnOriginalValues.put(
			"landEmpOtherIncomeSource", _landEmpOtherIncomeSource);
		_columnOriginalValues.put(
			"landEmpOtherSalaryType", _landEmpOtherSalaryType);
		_columnOriginalValues.put(
			"landEmpOtherIncomeAmount", _landEmpOtherIncomeAmount);
		_columnOriginalValues.put(
			"landEmpFinancialSupportPerson", _landEmpFinancialSupportPerson);
		_columnOriginalValues.put(
			"acquireApplicationId", _acquireApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("acquireLandEmploymentId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("landEmploymentStatus", 128L);

		columnBitmasks.put("landEmpJamaicaGovEmplyee", 256L);

		columnBitmasks.put("landEmpCompanyName", 512L);

		columnBitmasks.put("landEmploymentJobTitle", 1024L);

		columnBitmasks.put("landEmpCompanyAddr", 2048L);

		columnBitmasks.put("landEmpTeleNum", 4096L);

		columnBitmasks.put("landEmpGrossSalaryType", 8192L);

		columnBitmasks.put("landEmpGrossSalary", 16384L);

		columnBitmasks.put("landEmpOtherIncomeSource", 32768L);

		columnBitmasks.put("landEmpOtherSalaryType", 65536L);

		columnBitmasks.put("landEmpOtherIncomeAmount", 131072L);

		columnBitmasks.put("landEmpFinancialSupportPerson", 262144L);

		columnBitmasks.put("acquireApplicationId", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcquireLandEmployment _escapedModel;

}