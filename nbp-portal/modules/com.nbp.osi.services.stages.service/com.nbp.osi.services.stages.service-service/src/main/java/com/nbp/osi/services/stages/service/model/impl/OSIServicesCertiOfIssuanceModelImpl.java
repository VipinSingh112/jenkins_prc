/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.services.stages.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.services.stages.service.model.OSIServicesCertiOfIssuance;
import com.nbp.osi.services.stages.service.model.OSIServicesCertiOfIssuanceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OSIServicesCertiOfIssuance service. Represents a row in the &quot;nbp_osi_services_certi_of_issu&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OSIServicesCertiOfIssuanceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OSIServicesCertiOfIssuanceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OSIServicesCertiOfIssuanceImpl
 * @generated
 */
@JSON(strict = true)
public class OSIServicesCertiOfIssuanceModelImpl
	extends BaseModelImpl<OSIServicesCertiOfIssuance>
	implements OSIServicesCertiOfIssuanceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a osi services certi of issuance model instance should use the <code>OSIServicesCertiOfIssuance</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_services_certi_of_issu";

	public static final Object[][] TABLE_COLUMNS = {
		{"oSIServicesCertiOfIssuanceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nameOfInsolventPerson", Types.VARCHAR},
		{"dateCertificateIssued", Types.TIMESTAMP},
		{"dateOfExpiration", Types.TIMESTAMP},
		{"certificateNum", Types.VARCHAR},
		{"nameOfLicensedTrustee", Types.VARCHAR},
		{"docFileEntry", Types.BIGINT}, {"caseId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("oSIServicesCertiOfIssuanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nameOfInsolventPerson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateCertificateIssued", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfExpiration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificateNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfLicensedTrustee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docFileEntry", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_services_certi_of_issu (oSIServicesCertiOfIssuanceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nameOfInsolventPerson VARCHAR(75) null,dateCertificateIssued DATE null,dateOfExpiration DATE null,certificateNum VARCHAR(75) null,nameOfLicensedTrustee VARCHAR(75) null,docFileEntry LONG,caseId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_services_certi_of_issu";

	public static final String ORDER_BY_JPQL =
		" ORDER BY osiServicesCertiOfIssuance.oSIServicesCertiOfIssuanceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_services_certi_of_issu.oSIServicesCertiOfIssuanceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSISERVICESCERTIOFISSUANCEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OSIServicesCertiOfIssuanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _oSIServicesCertiOfIssuanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOSIServicesCertiOfIssuanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _oSIServicesCertiOfIssuanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OSIServicesCertiOfIssuance.class;
	}

	@Override
	public String getModelClassName() {
		return OSIServicesCertiOfIssuance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OSIServicesCertiOfIssuance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OSIServicesCertiOfIssuance, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OSIServicesCertiOfIssuance, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(OSIServicesCertiOfIssuance)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OSIServicesCertiOfIssuance, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OSIServicesCertiOfIssuance, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OSIServicesCertiOfIssuance)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OSIServicesCertiOfIssuance, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OSIServicesCertiOfIssuance, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<OSIServicesCertiOfIssuance, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<OSIServicesCertiOfIssuance, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<OSIServicesCertiOfIssuance, Object>>();

			attributeGetterFunctions.put(
				"oSIServicesCertiOfIssuanceId",
				OSIServicesCertiOfIssuance::getOSIServicesCertiOfIssuanceId);
			attributeGetterFunctions.put(
				"groupId", OSIServicesCertiOfIssuance::getGroupId);
			attributeGetterFunctions.put(
				"companyId", OSIServicesCertiOfIssuance::getCompanyId);
			attributeGetterFunctions.put(
				"userId", OSIServicesCertiOfIssuance::getUserId);
			attributeGetterFunctions.put(
				"userName", OSIServicesCertiOfIssuance::getUserName);
			attributeGetterFunctions.put(
				"createDate", OSIServicesCertiOfIssuance::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", OSIServicesCertiOfIssuance::getModifiedDate);
			attributeGetterFunctions.put(
				"nameOfInsolventPerson",
				OSIServicesCertiOfIssuance::getNameOfInsolventPerson);
			attributeGetterFunctions.put(
				"dateCertificateIssued",
				OSIServicesCertiOfIssuance::getDateCertificateIssued);
			attributeGetterFunctions.put(
				"dateOfExpiration",
				OSIServicesCertiOfIssuance::getDateOfExpiration);
			attributeGetterFunctions.put(
				"certificateNum",
				OSIServicesCertiOfIssuance::getCertificateNum);
			attributeGetterFunctions.put(
				"nameOfLicensedTrustee",
				OSIServicesCertiOfIssuance::getNameOfLicensedTrustee);
			attributeGetterFunctions.put(
				"docFileEntry", OSIServicesCertiOfIssuance::getDocFileEntry);
			attributeGetterFunctions.put(
				"caseId", OSIServicesCertiOfIssuance::getCaseId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<OSIServicesCertiOfIssuance, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<OSIServicesCertiOfIssuance, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<OSIServicesCertiOfIssuance, ?>>();

			attributeSetterBiConsumers.put(
				"oSIServicesCertiOfIssuanceId",
				(BiConsumer<OSIServicesCertiOfIssuance, Long>)
					OSIServicesCertiOfIssuance::
						setOSIServicesCertiOfIssuanceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<OSIServicesCertiOfIssuance, Long>)
					OSIServicesCertiOfIssuance::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<OSIServicesCertiOfIssuance, Long>)
					OSIServicesCertiOfIssuance::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<OSIServicesCertiOfIssuance, Long>)
					OSIServicesCertiOfIssuance::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<OSIServicesCertiOfIssuance, String>)
					OSIServicesCertiOfIssuance::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<OSIServicesCertiOfIssuance, Date>)
					OSIServicesCertiOfIssuance::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<OSIServicesCertiOfIssuance, Date>)
					OSIServicesCertiOfIssuance::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nameOfInsolventPerson",
				(BiConsumer<OSIServicesCertiOfIssuance, String>)
					OSIServicesCertiOfIssuance::setNameOfInsolventPerson);
			attributeSetterBiConsumers.put(
				"dateCertificateIssued",
				(BiConsumer<OSIServicesCertiOfIssuance, Date>)
					OSIServicesCertiOfIssuance::setDateCertificateIssued);
			attributeSetterBiConsumers.put(
				"dateOfExpiration",
				(BiConsumer<OSIServicesCertiOfIssuance, Date>)
					OSIServicesCertiOfIssuance::setDateOfExpiration);
			attributeSetterBiConsumers.put(
				"certificateNum",
				(BiConsumer<OSIServicesCertiOfIssuance, String>)
					OSIServicesCertiOfIssuance::setCertificateNum);
			attributeSetterBiConsumers.put(
				"nameOfLicensedTrustee",
				(BiConsumer<OSIServicesCertiOfIssuance, String>)
					OSIServicesCertiOfIssuance::setNameOfLicensedTrustee);
			attributeSetterBiConsumers.put(
				"docFileEntry",
				(BiConsumer<OSIServicesCertiOfIssuance, Long>)
					OSIServicesCertiOfIssuance::setDocFileEntry);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<OSIServicesCertiOfIssuance, String>)
					OSIServicesCertiOfIssuance::setCaseId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getOSIServicesCertiOfIssuanceId() {
		return _oSIServicesCertiOfIssuanceId;
	}

	@Override
	public void setOSIServicesCertiOfIssuanceId(
		long oSIServicesCertiOfIssuanceId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_oSIServicesCertiOfIssuanceId = oSIServicesCertiOfIssuanceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNameOfInsolventPerson() {
		if (_nameOfInsolventPerson == null) {
			return "";
		}
		else {
			return _nameOfInsolventPerson;
		}
	}

	@Override
	public void setNameOfInsolventPerson(String nameOfInsolventPerson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfInsolventPerson = nameOfInsolventPerson;
	}

	@JSON
	@Override
	public Date getDateCertificateIssued() {
		return _dateCertificateIssued;
	}

	@Override
	public void setDateCertificateIssued(Date dateCertificateIssued) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateCertificateIssued = dateCertificateIssued;
	}

	@JSON
	@Override
	public Date getDateOfExpiration() {
		return _dateOfExpiration;
	}

	@Override
	public void setDateOfExpiration(Date dateOfExpiration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfExpiration = dateOfExpiration;
	}

	@JSON
	@Override
	public String getCertificateNum() {
		if (_certificateNum == null) {
			return "";
		}
		else {
			return _certificateNum;
		}
	}

	@Override
	public void setCertificateNum(String certificateNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificateNum = certificateNum;
	}

	@JSON
	@Override
	public String getNameOfLicensedTrustee() {
		if (_nameOfLicensedTrustee == null) {
			return "";
		}
		else {
			return _nameOfLicensedTrustee;
		}
	}

	@Override
	public void setNameOfLicensedTrustee(String nameOfLicensedTrustee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfLicensedTrustee = nameOfLicensedTrustee;
	}

	@JSON
	@Override
	public long getDocFileEntry() {
		return _docFileEntry;
	}

	@Override
	public void setDocFileEntry(long docFileEntry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docFileEntry = docFileEntry;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OSIServicesCertiOfIssuance.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OSIServicesCertiOfIssuance toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OSIServicesCertiOfIssuance>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OSIServicesCertiOfIssuanceImpl osiServicesCertiOfIssuanceImpl =
			new OSIServicesCertiOfIssuanceImpl();

		osiServicesCertiOfIssuanceImpl.setOSIServicesCertiOfIssuanceId(
			getOSIServicesCertiOfIssuanceId());
		osiServicesCertiOfIssuanceImpl.setGroupId(getGroupId());
		osiServicesCertiOfIssuanceImpl.setCompanyId(getCompanyId());
		osiServicesCertiOfIssuanceImpl.setUserId(getUserId());
		osiServicesCertiOfIssuanceImpl.setUserName(getUserName());
		osiServicesCertiOfIssuanceImpl.setCreateDate(getCreateDate());
		osiServicesCertiOfIssuanceImpl.setModifiedDate(getModifiedDate());
		osiServicesCertiOfIssuanceImpl.setNameOfInsolventPerson(
			getNameOfInsolventPerson());
		osiServicesCertiOfIssuanceImpl.setDateCertificateIssued(
			getDateCertificateIssued());
		osiServicesCertiOfIssuanceImpl.setDateOfExpiration(
			getDateOfExpiration());
		osiServicesCertiOfIssuanceImpl.setCertificateNum(getCertificateNum());
		osiServicesCertiOfIssuanceImpl.setNameOfLicensedTrustee(
			getNameOfLicensedTrustee());
		osiServicesCertiOfIssuanceImpl.setDocFileEntry(getDocFileEntry());
		osiServicesCertiOfIssuanceImpl.setCaseId(getCaseId());

		osiServicesCertiOfIssuanceImpl.resetOriginalValues();

		return osiServicesCertiOfIssuanceImpl;
	}

	@Override
	public OSIServicesCertiOfIssuance cloneWithOriginalValues() {
		OSIServicesCertiOfIssuanceImpl osiServicesCertiOfIssuanceImpl =
			new OSIServicesCertiOfIssuanceImpl();

		osiServicesCertiOfIssuanceImpl.setOSIServicesCertiOfIssuanceId(
			this.<Long>getColumnOriginalValue("oSIServicesCertiOfIssuanceId"));
		osiServicesCertiOfIssuanceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		osiServicesCertiOfIssuanceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		osiServicesCertiOfIssuanceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		osiServicesCertiOfIssuanceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		osiServicesCertiOfIssuanceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		osiServicesCertiOfIssuanceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		osiServicesCertiOfIssuanceImpl.setNameOfInsolventPerson(
			this.<String>getColumnOriginalValue("nameOfInsolventPerson"));
		osiServicesCertiOfIssuanceImpl.setDateCertificateIssued(
			this.<Date>getColumnOriginalValue("dateCertificateIssued"));
		osiServicesCertiOfIssuanceImpl.setDateOfExpiration(
			this.<Date>getColumnOriginalValue("dateOfExpiration"));
		osiServicesCertiOfIssuanceImpl.setCertificateNum(
			this.<String>getColumnOriginalValue("certificateNum"));
		osiServicesCertiOfIssuanceImpl.setNameOfLicensedTrustee(
			this.<String>getColumnOriginalValue("nameOfLicensedTrustee"));
		osiServicesCertiOfIssuanceImpl.setDocFileEntry(
			this.<Long>getColumnOriginalValue("docFileEntry"));
		osiServicesCertiOfIssuanceImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));

		return osiServicesCertiOfIssuanceImpl;
	}

	@Override
	public int compareTo(
		OSIServicesCertiOfIssuance osiServicesCertiOfIssuance) {

		long primaryKey = osiServicesCertiOfIssuance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OSIServicesCertiOfIssuance)) {
			return false;
		}

		OSIServicesCertiOfIssuance osiServicesCertiOfIssuance =
			(OSIServicesCertiOfIssuance)object;

		long primaryKey = osiServicesCertiOfIssuance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OSIServicesCertiOfIssuance> toCacheModel() {
		OSIServicesCertiOfIssuanceCacheModel
			osiServicesCertiOfIssuanceCacheModel =
				new OSIServicesCertiOfIssuanceCacheModel();

		osiServicesCertiOfIssuanceCacheModel.oSIServicesCertiOfIssuanceId =
			getOSIServicesCertiOfIssuanceId();

		osiServicesCertiOfIssuanceCacheModel.groupId = getGroupId();

		osiServicesCertiOfIssuanceCacheModel.companyId = getCompanyId();

		osiServicesCertiOfIssuanceCacheModel.userId = getUserId();

		osiServicesCertiOfIssuanceCacheModel.userName = getUserName();

		String userName = osiServicesCertiOfIssuanceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			osiServicesCertiOfIssuanceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			osiServicesCertiOfIssuanceCacheModel.createDate =
				createDate.getTime();
		}
		else {
			osiServicesCertiOfIssuanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			osiServicesCertiOfIssuanceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			osiServicesCertiOfIssuanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		osiServicesCertiOfIssuanceCacheModel.nameOfInsolventPerson =
			getNameOfInsolventPerson();

		String nameOfInsolventPerson =
			osiServicesCertiOfIssuanceCacheModel.nameOfInsolventPerson;

		if ((nameOfInsolventPerson != null) &&
			(nameOfInsolventPerson.length() == 0)) {

			osiServicesCertiOfIssuanceCacheModel.nameOfInsolventPerson = null;
		}

		Date dateCertificateIssued = getDateCertificateIssued();

		if (dateCertificateIssued != null) {
			osiServicesCertiOfIssuanceCacheModel.dateCertificateIssued =
				dateCertificateIssued.getTime();
		}
		else {
			osiServicesCertiOfIssuanceCacheModel.dateCertificateIssued =
				Long.MIN_VALUE;
		}

		Date dateOfExpiration = getDateOfExpiration();

		if (dateOfExpiration != null) {
			osiServicesCertiOfIssuanceCacheModel.dateOfExpiration =
				dateOfExpiration.getTime();
		}
		else {
			osiServicesCertiOfIssuanceCacheModel.dateOfExpiration =
				Long.MIN_VALUE;
		}

		osiServicesCertiOfIssuanceCacheModel.certificateNum =
			getCertificateNum();

		String certificateNum =
			osiServicesCertiOfIssuanceCacheModel.certificateNum;

		if ((certificateNum != null) && (certificateNum.length() == 0)) {
			osiServicesCertiOfIssuanceCacheModel.certificateNum = null;
		}

		osiServicesCertiOfIssuanceCacheModel.nameOfLicensedTrustee =
			getNameOfLicensedTrustee();

		String nameOfLicensedTrustee =
			osiServicesCertiOfIssuanceCacheModel.nameOfLicensedTrustee;

		if ((nameOfLicensedTrustee != null) &&
			(nameOfLicensedTrustee.length() == 0)) {

			osiServicesCertiOfIssuanceCacheModel.nameOfLicensedTrustee = null;
		}

		osiServicesCertiOfIssuanceCacheModel.docFileEntry = getDocFileEntry();

		osiServicesCertiOfIssuanceCacheModel.caseId = getCaseId();

		String caseId = osiServicesCertiOfIssuanceCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			osiServicesCertiOfIssuanceCacheModel.caseId = null;
		}

		return osiServicesCertiOfIssuanceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OSIServicesCertiOfIssuance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OSIServicesCertiOfIssuance, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OSIServicesCertiOfIssuance, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(OSIServicesCertiOfIssuance)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, OSIServicesCertiOfIssuance>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						OSIServicesCertiOfIssuance.class, ModelWrapper.class);

	}

	private long _oSIServicesCertiOfIssuanceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nameOfInsolventPerson;
	private Date _dateCertificateIssued;
	private Date _dateOfExpiration;
	private String _certificateNum;
	private String _nameOfLicensedTrustee;
	private long _docFileEntry;
	private String _caseId;

	public <T> T getColumnValue(String columnName) {
		Function<OSIServicesCertiOfIssuance, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OSIServicesCertiOfIssuance)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"oSIServicesCertiOfIssuanceId", _oSIServicesCertiOfIssuanceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"nameOfInsolventPerson", _nameOfInsolventPerson);
		_columnOriginalValues.put(
			"dateCertificateIssued", _dateCertificateIssued);
		_columnOriginalValues.put("dateOfExpiration", _dateOfExpiration);
		_columnOriginalValues.put("certificateNum", _certificateNum);
		_columnOriginalValues.put(
			"nameOfLicensedTrustee", _nameOfLicensedTrustee);
		_columnOriginalValues.put("docFileEntry", _docFileEntry);
		_columnOriginalValues.put("caseId", _caseId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("oSIServicesCertiOfIssuanceId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("nameOfInsolventPerson", 128L);

		columnBitmasks.put("dateCertificateIssued", 256L);

		columnBitmasks.put("dateOfExpiration", 512L);

		columnBitmasks.put("certificateNum", 1024L);

		columnBitmasks.put("nameOfLicensedTrustee", 2048L);

		columnBitmasks.put("docFileEntry", 4096L);

		columnBitmasks.put("caseId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OSIServicesCertiOfIssuance _escapedModel;

}