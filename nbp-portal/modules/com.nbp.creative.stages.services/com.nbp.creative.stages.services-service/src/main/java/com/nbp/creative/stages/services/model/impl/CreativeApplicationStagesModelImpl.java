/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.creative.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.creative.stages.services.model.CreativeApplicationStages;
import com.nbp.creative.stages.services.model.CreativeApplicationStagesModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CreativeApplicationStages service. Represents a row in the &quot;nbp_creative_app_stages&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CreativeApplicationStagesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CreativeApplicationStagesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CreativeApplicationStagesImpl
 * @generated
 */
@JSON(strict = true)
public class CreativeApplicationStagesModelImpl
	extends BaseModelImpl<CreativeApplicationStages>
	implements CreativeApplicationStagesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a creative application stages model instance should use the <code>CreativeApplicationStages</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_creative_app_stages";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"creativeApplicationStagesId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"stageName", Types.VARCHAR}, {"duration", Types.VARCHAR},
		{"stageStatus", Types.VARCHAR}, {"stageStartDate", Types.TIMESTAMP},
		{"stageEndDate", Types.TIMESTAMP},
		{"creativeApplicationId", Types.BIGINT}, {"caseId", Types.VARCHAR},
		{"updatedBySource", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creativeApplicationStagesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stageStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stageStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stageEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("creativeApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedBySource", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_creative_app_stages (uuid_ VARCHAR(75) null,creativeApplicationStagesId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,stageName VARCHAR(75) null,duration VARCHAR(75) null,stageStatus VARCHAR(75) null,stageStartDate DATE null,stageEndDate DATE null,creativeApplicationId LONG,caseId VARCHAR(75) null,updatedBySource VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_creative_app_stages";

	public static final String ORDER_BY_JPQL =
		" ORDER BY creativeApplicationStages.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_creative_app_stages.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATIVEAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STAGENAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STAGESTATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CreativeApplicationStagesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _creativeApplicationStagesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCreativeApplicationStagesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _creativeApplicationStagesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CreativeApplicationStages.class;
	}

	@Override
	public String getModelClassName() {
		return CreativeApplicationStages.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CreativeApplicationStages, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CreativeApplicationStages, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeApplicationStages, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CreativeApplicationStages)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CreativeApplicationStages, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CreativeApplicationStages, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CreativeApplicationStages)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CreativeApplicationStages, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CreativeApplicationStages, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CreativeApplicationStages, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CreativeApplicationStages, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CreativeApplicationStages, Object>>();

			attributeGetterFunctions.put(
				"uuid", CreativeApplicationStages::getUuid);
			attributeGetterFunctions.put(
				"creativeApplicationStagesId",
				CreativeApplicationStages::getCreativeApplicationStagesId);
			attributeGetterFunctions.put(
				"groupId", CreativeApplicationStages::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CreativeApplicationStages::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CreativeApplicationStages::getUserId);
			attributeGetterFunctions.put(
				"userName", CreativeApplicationStages::getUserName);
			attributeGetterFunctions.put(
				"createDate", CreativeApplicationStages::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CreativeApplicationStages::getModifiedDate);
			attributeGetterFunctions.put(
				"stageName", CreativeApplicationStages::getStageName);
			attributeGetterFunctions.put(
				"duration", CreativeApplicationStages::getDuration);
			attributeGetterFunctions.put(
				"stageStatus", CreativeApplicationStages::getStageStatus);
			attributeGetterFunctions.put(
				"stageStartDate", CreativeApplicationStages::getStageStartDate);
			attributeGetterFunctions.put(
				"stageEndDate", CreativeApplicationStages::getStageEndDate);
			attributeGetterFunctions.put(
				"creativeApplicationId",
				CreativeApplicationStages::getCreativeApplicationId);
			attributeGetterFunctions.put(
				"caseId", CreativeApplicationStages::getCaseId);
			attributeGetterFunctions.put(
				"updatedBySource",
				CreativeApplicationStages::getUpdatedBySource);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CreativeApplicationStages, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CreativeApplicationStages, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CreativeApplicationStages, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CreativeApplicationStages, String>)
					CreativeApplicationStages::setUuid);
			attributeSetterBiConsumers.put(
				"creativeApplicationStagesId",
				(BiConsumer<CreativeApplicationStages, Long>)
					CreativeApplicationStages::setCreativeApplicationStagesId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CreativeApplicationStages, Long>)
					CreativeApplicationStages::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CreativeApplicationStages, Long>)
					CreativeApplicationStages::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CreativeApplicationStages, Long>)
					CreativeApplicationStages::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CreativeApplicationStages, String>)
					CreativeApplicationStages::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CreativeApplicationStages, Date>)
					CreativeApplicationStages::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CreativeApplicationStages, Date>)
					CreativeApplicationStages::setModifiedDate);
			attributeSetterBiConsumers.put(
				"stageName",
				(BiConsumer<CreativeApplicationStages, String>)
					CreativeApplicationStages::setStageName);
			attributeSetterBiConsumers.put(
				"duration",
				(BiConsumer<CreativeApplicationStages, String>)
					CreativeApplicationStages::setDuration);
			attributeSetterBiConsumers.put(
				"stageStatus",
				(BiConsumer<CreativeApplicationStages, String>)
					CreativeApplicationStages::setStageStatus);
			attributeSetterBiConsumers.put(
				"stageStartDate",
				(BiConsumer<CreativeApplicationStages, Date>)
					CreativeApplicationStages::setStageStartDate);
			attributeSetterBiConsumers.put(
				"stageEndDate",
				(BiConsumer<CreativeApplicationStages, Date>)
					CreativeApplicationStages::setStageEndDate);
			attributeSetterBiConsumers.put(
				"creativeApplicationId",
				(BiConsumer<CreativeApplicationStages, Long>)
					CreativeApplicationStages::setCreativeApplicationId);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<CreativeApplicationStages, String>)
					CreativeApplicationStages::setCaseId);
			attributeSetterBiConsumers.put(
				"updatedBySource",
				(BiConsumer<CreativeApplicationStages, String>)
					CreativeApplicationStages::setUpdatedBySource);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCreativeApplicationStagesId() {
		return _creativeApplicationStagesId;
	}

	@Override
	public void setCreativeApplicationStagesId(
		long creativeApplicationStagesId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeApplicationStagesId = creativeApplicationStagesId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getStageName() {
		if (_stageName == null) {
			return "";
		}
		else {
			return _stageName;
		}
	}

	@Override
	public void setStageName(String stageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageName = stageName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStageName() {
		return getColumnOriginalValue("stageName");
	}

	@JSON
	@Override
	public String getDuration() {
		if (_duration == null) {
			return "";
		}
		else {
			return _duration;
		}
	}

	@Override
	public void setDuration(String duration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duration = duration;
	}

	@JSON
	@Override
	public String getStageStatus() {
		if (_stageStatus == null) {
			return "";
		}
		else {
			return _stageStatus;
		}
	}

	@Override
	public void setStageStatus(String stageStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageStatus = stageStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStageStatus() {
		return getColumnOriginalValue("stageStatus");
	}

	@JSON
	@Override
	public Date getStageStartDate() {
		return _stageStartDate;
	}

	@Override
	public void setStageStartDate(Date stageStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageStartDate = stageStartDate;
	}

	@JSON
	@Override
	public Date getStageEndDate() {
		return _stageEndDate;
	}

	@Override
	public void setStageEndDate(Date stageEndDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageEndDate = stageEndDate;
	}

	@JSON
	@Override
	public long getCreativeApplicationId() {
		return _creativeApplicationId;
	}

	@Override
	public void setCreativeApplicationId(long creativeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeApplicationId = creativeApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreativeApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("creativeApplicationId"));
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getUpdatedBySource() {
		if (_updatedBySource == null) {
			return "";
		}
		else {
			return _updatedBySource;
		}
	}

	@Override
	public void setUpdatedBySource(String updatedBySource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedBySource = updatedBySource;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				CreativeApplicationStages.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CreativeApplicationStages.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CreativeApplicationStages toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CreativeApplicationStages>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CreativeApplicationStagesImpl creativeApplicationStagesImpl =
			new CreativeApplicationStagesImpl();

		creativeApplicationStagesImpl.setUuid(getUuid());
		creativeApplicationStagesImpl.setCreativeApplicationStagesId(
			getCreativeApplicationStagesId());
		creativeApplicationStagesImpl.setGroupId(getGroupId());
		creativeApplicationStagesImpl.setCompanyId(getCompanyId());
		creativeApplicationStagesImpl.setUserId(getUserId());
		creativeApplicationStagesImpl.setUserName(getUserName());
		creativeApplicationStagesImpl.setCreateDate(getCreateDate());
		creativeApplicationStagesImpl.setModifiedDate(getModifiedDate());
		creativeApplicationStagesImpl.setStageName(getStageName());
		creativeApplicationStagesImpl.setDuration(getDuration());
		creativeApplicationStagesImpl.setStageStatus(getStageStatus());
		creativeApplicationStagesImpl.setStageStartDate(getStageStartDate());
		creativeApplicationStagesImpl.setStageEndDate(getStageEndDate());
		creativeApplicationStagesImpl.setCreativeApplicationId(
			getCreativeApplicationId());
		creativeApplicationStagesImpl.setCaseId(getCaseId());
		creativeApplicationStagesImpl.setUpdatedBySource(getUpdatedBySource());

		creativeApplicationStagesImpl.resetOriginalValues();

		return creativeApplicationStagesImpl;
	}

	@Override
	public CreativeApplicationStages cloneWithOriginalValues() {
		CreativeApplicationStagesImpl creativeApplicationStagesImpl =
			new CreativeApplicationStagesImpl();

		creativeApplicationStagesImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		creativeApplicationStagesImpl.setCreativeApplicationStagesId(
			this.<Long>getColumnOriginalValue("creativeApplicationStagesId"));
		creativeApplicationStagesImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		creativeApplicationStagesImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		creativeApplicationStagesImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		creativeApplicationStagesImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		creativeApplicationStagesImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		creativeApplicationStagesImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		creativeApplicationStagesImpl.setStageName(
			this.<String>getColumnOriginalValue("stageName"));
		creativeApplicationStagesImpl.setDuration(
			this.<String>getColumnOriginalValue("duration"));
		creativeApplicationStagesImpl.setStageStatus(
			this.<String>getColumnOriginalValue("stageStatus"));
		creativeApplicationStagesImpl.setStageStartDate(
			this.<Date>getColumnOriginalValue("stageStartDate"));
		creativeApplicationStagesImpl.setStageEndDate(
			this.<Date>getColumnOriginalValue("stageEndDate"));
		creativeApplicationStagesImpl.setCreativeApplicationId(
			this.<Long>getColumnOriginalValue("creativeApplicationId"));
		creativeApplicationStagesImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		creativeApplicationStagesImpl.setUpdatedBySource(
			this.<String>getColumnOriginalValue("updatedBySource"));

		return creativeApplicationStagesImpl;
	}

	@Override
	public int compareTo(CreativeApplicationStages creativeApplicationStages) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), creativeApplicationStages.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CreativeApplicationStages)) {
			return false;
		}

		CreativeApplicationStages creativeApplicationStages =
			(CreativeApplicationStages)object;

		long primaryKey = creativeApplicationStages.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CreativeApplicationStages> toCacheModel() {
		CreativeApplicationStagesCacheModel
			creativeApplicationStagesCacheModel =
				new CreativeApplicationStagesCacheModel();

		creativeApplicationStagesCacheModel.uuid = getUuid();

		String uuid = creativeApplicationStagesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			creativeApplicationStagesCacheModel.uuid = null;
		}

		creativeApplicationStagesCacheModel.creativeApplicationStagesId =
			getCreativeApplicationStagesId();

		creativeApplicationStagesCacheModel.groupId = getGroupId();

		creativeApplicationStagesCacheModel.companyId = getCompanyId();

		creativeApplicationStagesCacheModel.userId = getUserId();

		creativeApplicationStagesCacheModel.userName = getUserName();

		String userName = creativeApplicationStagesCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			creativeApplicationStagesCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			creativeApplicationStagesCacheModel.createDate =
				createDate.getTime();
		}
		else {
			creativeApplicationStagesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			creativeApplicationStagesCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			creativeApplicationStagesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		creativeApplicationStagesCacheModel.stageName = getStageName();

		String stageName = creativeApplicationStagesCacheModel.stageName;

		if ((stageName != null) && (stageName.length() == 0)) {
			creativeApplicationStagesCacheModel.stageName = null;
		}

		creativeApplicationStagesCacheModel.duration = getDuration();

		String duration = creativeApplicationStagesCacheModel.duration;

		if ((duration != null) && (duration.length() == 0)) {
			creativeApplicationStagesCacheModel.duration = null;
		}

		creativeApplicationStagesCacheModel.stageStatus = getStageStatus();

		String stageStatus = creativeApplicationStagesCacheModel.stageStatus;

		if ((stageStatus != null) && (stageStatus.length() == 0)) {
			creativeApplicationStagesCacheModel.stageStatus = null;
		}

		Date stageStartDate = getStageStartDate();

		if (stageStartDate != null) {
			creativeApplicationStagesCacheModel.stageStartDate =
				stageStartDate.getTime();
		}
		else {
			creativeApplicationStagesCacheModel.stageStartDate = Long.MIN_VALUE;
		}

		Date stageEndDate = getStageEndDate();

		if (stageEndDate != null) {
			creativeApplicationStagesCacheModel.stageEndDate =
				stageEndDate.getTime();
		}
		else {
			creativeApplicationStagesCacheModel.stageEndDate = Long.MIN_VALUE;
		}

		creativeApplicationStagesCacheModel.creativeApplicationId =
			getCreativeApplicationId();

		creativeApplicationStagesCacheModel.caseId = getCaseId();

		String caseId = creativeApplicationStagesCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			creativeApplicationStagesCacheModel.caseId = null;
		}

		creativeApplicationStagesCacheModel.updatedBySource =
			getUpdatedBySource();

		String updatedBySource =
			creativeApplicationStagesCacheModel.updatedBySource;

		if ((updatedBySource != null) && (updatedBySource.length() == 0)) {
			creativeApplicationStagesCacheModel.updatedBySource = null;
		}

		return creativeApplicationStagesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CreativeApplicationStages, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CreativeApplicationStages, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeApplicationStages, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CreativeApplicationStages)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CreativeApplicationStages>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CreativeApplicationStages.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _creativeApplicationStagesId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _stageName;
	private String _duration;
	private String _stageStatus;
	private Date _stageStartDate;
	private Date _stageEndDate;
	private long _creativeApplicationId;
	private String _caseId;
	private String _updatedBySource;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CreativeApplicationStages, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CreativeApplicationStages)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"creativeApplicationStagesId", _creativeApplicationStagesId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("stageName", _stageName);
		_columnOriginalValues.put("duration", _duration);
		_columnOriginalValues.put("stageStatus", _stageStatus);
		_columnOriginalValues.put("stageStartDate", _stageStartDate);
		_columnOriginalValues.put("stageEndDate", _stageEndDate);
		_columnOriginalValues.put(
			"creativeApplicationId", _creativeApplicationId);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("updatedBySource", _updatedBySource);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("creativeApplicationStagesId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("stageName", 256L);

		columnBitmasks.put("duration", 512L);

		columnBitmasks.put("stageStatus", 1024L);

		columnBitmasks.put("stageStartDate", 2048L);

		columnBitmasks.put("stageEndDate", 4096L);

		columnBitmasks.put("creativeApplicationId", 8192L);

		columnBitmasks.put("caseId", 16384L);

		columnBitmasks.put("updatedBySource", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CreativeApplicationStages _escapedModel;

}