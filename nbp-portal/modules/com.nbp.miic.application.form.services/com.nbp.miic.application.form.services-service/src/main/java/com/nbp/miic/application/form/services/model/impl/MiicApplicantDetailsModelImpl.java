/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.miic.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.miic.application.form.services.model.MiicApplicantDetails;
import com.nbp.miic.application.form.services.model.MiicApplicantDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MiicApplicantDetails service. Represents a row in the &quot;nbp_miic_applicant_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MiicApplicantDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MiicApplicantDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MiicApplicantDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class MiicApplicantDetailsModelImpl
	extends BaseModelImpl<MiicApplicantDetails>
	implements MiicApplicantDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a miic applicant details model instance should use the <code>MiicApplicantDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_miic_applicant_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"miicApplicantDetailsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"natureOfApplicant", Types.VARCHAR},
		{"applicantName ", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"telephone", Types.VARCHAR},
		{"dateOfApplication", Types.TIMESTAMP}, {"trnNumber", Types.VARCHAR},
		{"miicApplicationId", Types.BIGINT}, {"nameOfProducer", Types.VARCHAR},
		{"companyName", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("miicApplicantDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("natureOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfApplication", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("trnNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("miicApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nameOfProducer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_miic_applicant_details (miicApplicantDetailsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,natureOfApplicant VARCHAR(75) null,applicantName  VARCHAR(75) null,address VARCHAR(500) null,email VARCHAR(75) null,telephone VARCHAR(75) null,dateOfApplication DATE null,trnNumber VARCHAR(75) null,miicApplicationId LONG,nameOfProducer VARCHAR(75) null,companyName VARCHAR(75) null,firstName VARCHAR(75) null,lastName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_miic_applicant_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY miicApplicantDetails.miicApplicantDetailsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_miic_applicant_details.miicApplicantDetailsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MIICAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MIICAPPLICANTDETAILSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MiicApplicantDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _miicApplicantDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMiicApplicantDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _miicApplicantDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MiicApplicantDetails.class;
	}

	@Override
	public String getModelClassName() {
		return MiicApplicantDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MiicApplicantDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MiicApplicantDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiicApplicantDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MiicApplicantDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MiicApplicantDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MiicApplicantDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MiicApplicantDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MiicApplicantDetails, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MiicApplicantDetails, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<MiicApplicantDetails, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<MiicApplicantDetails, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<MiicApplicantDetails, Object>>();

			attributeGetterFunctions.put(
				"miicApplicantDetailsId",
				MiicApplicantDetails::getMiicApplicantDetailsId);
			attributeGetterFunctions.put(
				"groupId", MiicApplicantDetails::getGroupId);
			attributeGetterFunctions.put(
				"companyId", MiicApplicantDetails::getCompanyId);
			attributeGetterFunctions.put(
				"userId", MiicApplicantDetails::getUserId);
			attributeGetterFunctions.put(
				"userName", MiicApplicantDetails::getUserName);
			attributeGetterFunctions.put(
				"createDate", MiicApplicantDetails::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", MiicApplicantDetails::getModifiedDate);
			attributeGetterFunctions.put(
				"natureOfApplicant",
				MiicApplicantDetails::getNatureOfApplicant);
			attributeGetterFunctions.put(
				"applicantName ", MiicApplicantDetails::getApplicantName);
			attributeGetterFunctions.put(
				"address", MiicApplicantDetails::getAddress);
			attributeGetterFunctions.put(
				"email", MiicApplicantDetails::getEmail);
			attributeGetterFunctions.put(
				"telephone", MiicApplicantDetails::getTelephone);
			attributeGetterFunctions.put(
				"dateOfApplication",
				MiicApplicantDetails::getDateOfApplication);
			attributeGetterFunctions.put(
				"trnNumber", MiicApplicantDetails::getTrnNumber);
			attributeGetterFunctions.put(
				"miicApplicationId",
				MiicApplicantDetails::getMiicApplicationId);
			attributeGetterFunctions.put(
				"nameOfProducer", MiicApplicantDetails::getNameOfProducer);
			attributeGetterFunctions.put(
				"companyName", MiicApplicantDetails::getCompanyName);
			attributeGetterFunctions.put(
				"firstName", MiicApplicantDetails::getFirstName);
			attributeGetterFunctions.put(
				"lastName", MiicApplicantDetails::getLastName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<MiicApplicantDetails, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<MiicApplicantDetails, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<MiicApplicantDetails, ?>>();

			attributeSetterBiConsumers.put(
				"miicApplicantDetailsId",
				(BiConsumer<MiicApplicantDetails, Long>)
					MiicApplicantDetails::setMiicApplicantDetailsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<MiicApplicantDetails, Long>)
					MiicApplicantDetails::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<MiicApplicantDetails, Long>)
					MiicApplicantDetails::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<MiicApplicantDetails, Long>)
					MiicApplicantDetails::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<MiicApplicantDetails, Date>)
					MiicApplicantDetails::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<MiicApplicantDetails, Date>)
					MiicApplicantDetails::setModifiedDate);
			attributeSetterBiConsumers.put(
				"natureOfApplicant",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setNatureOfApplicant);
			attributeSetterBiConsumers.put(
				"applicantName ",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setApplicantName);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setAddress);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setEmail);
			attributeSetterBiConsumers.put(
				"telephone",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setTelephone);
			attributeSetterBiConsumers.put(
				"dateOfApplication",
				(BiConsumer<MiicApplicantDetails, Date>)
					MiicApplicantDetails::setDateOfApplication);
			attributeSetterBiConsumers.put(
				"trnNumber",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setTrnNumber);
			attributeSetterBiConsumers.put(
				"miicApplicationId",
				(BiConsumer<MiicApplicantDetails, Long>)
					MiicApplicantDetails::setMiicApplicationId);
			attributeSetterBiConsumers.put(
				"nameOfProducer",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setNameOfProducer);
			attributeSetterBiConsumers.put(
				"companyName",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setCompanyName);
			attributeSetterBiConsumers.put(
				"firstName",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setFirstName);
			attributeSetterBiConsumers.put(
				"lastName",
				(BiConsumer<MiicApplicantDetails, String>)
					MiicApplicantDetails::setLastName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMiicApplicantDetailsId() {
		return _miicApplicantDetailsId;
	}

	@Override
	public void setMiicApplicantDetailsId(long miicApplicantDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miicApplicantDetailsId = miicApplicantDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNatureOfApplicant() {
		if (_natureOfApplicant == null) {
			return "";
		}
		else {
			return _natureOfApplicant;
		}
	}

	@Override
	public void setNatureOfApplicant(String natureOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_natureOfApplicant = natureOfApplicant;
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getTelephone() {
		if (_telephone == null) {
			return "";
		}
		else {
			return _telephone;
		}
	}

	@Override
	public void setTelephone(String telephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone = telephone;
	}

	@JSON
	@Override
	public Date getDateOfApplication() {
		return _dateOfApplication;
	}

	@Override
	public void setDateOfApplication(Date dateOfApplication) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfApplication = dateOfApplication;
	}

	@JSON
	@Override
	public String getTrnNumber() {
		if (_trnNumber == null) {
			return "";
		}
		else {
			return _trnNumber;
		}
	}

	@Override
	public void setTrnNumber(String trnNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trnNumber = trnNumber;
	}

	@JSON
	@Override
	public long getMiicApplicationId() {
		return _miicApplicationId;
	}

	@Override
	public void setMiicApplicationId(long miicApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miicApplicationId = miicApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMiicApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("miicApplicationId"));
	}

	@JSON
	@Override
	public String getNameOfProducer() {
		if (_nameOfProducer == null) {
			return "";
		}
		else {
			return _nameOfProducer;
		}
	}

	@Override
	public void setNameOfProducer(String nameOfProducer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfProducer = nameOfProducer;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MiicApplicantDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MiicApplicantDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MiicApplicantDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MiicApplicantDetailsImpl miicApplicantDetailsImpl =
			new MiicApplicantDetailsImpl();

		miicApplicantDetailsImpl.setMiicApplicantDetailsId(
			getMiicApplicantDetailsId());
		miicApplicantDetailsImpl.setGroupId(getGroupId());
		miicApplicantDetailsImpl.setCompanyId(getCompanyId());
		miicApplicantDetailsImpl.setUserId(getUserId());
		miicApplicantDetailsImpl.setUserName(getUserName());
		miicApplicantDetailsImpl.setCreateDate(getCreateDate());
		miicApplicantDetailsImpl.setModifiedDate(getModifiedDate());
		miicApplicantDetailsImpl.setNatureOfApplicant(getNatureOfApplicant());
		miicApplicantDetailsImpl.setApplicantName(getApplicantName());
		miicApplicantDetailsImpl.setAddress(getAddress());
		miicApplicantDetailsImpl.setEmail(getEmail());
		miicApplicantDetailsImpl.setTelephone(getTelephone());
		miicApplicantDetailsImpl.setDateOfApplication(getDateOfApplication());
		miicApplicantDetailsImpl.setTrnNumber(getTrnNumber());
		miicApplicantDetailsImpl.setMiicApplicationId(getMiicApplicationId());
		miicApplicantDetailsImpl.setNameOfProducer(getNameOfProducer());
		miicApplicantDetailsImpl.setCompanyName(getCompanyName());
		miicApplicantDetailsImpl.setFirstName(getFirstName());
		miicApplicantDetailsImpl.setLastName(getLastName());

		miicApplicantDetailsImpl.resetOriginalValues();

		return miicApplicantDetailsImpl;
	}

	@Override
	public MiicApplicantDetails cloneWithOriginalValues() {
		MiicApplicantDetailsImpl miicApplicantDetailsImpl =
			new MiicApplicantDetailsImpl();

		miicApplicantDetailsImpl.setMiicApplicantDetailsId(
			this.<Long>getColumnOriginalValue("miicApplicantDetailsId"));
		miicApplicantDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		miicApplicantDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		miicApplicantDetailsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		miicApplicantDetailsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		miicApplicantDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		miicApplicantDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		miicApplicantDetailsImpl.setNatureOfApplicant(
			this.<String>getColumnOriginalValue("natureOfApplicant"));
		miicApplicantDetailsImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName "));
		miicApplicantDetailsImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		miicApplicantDetailsImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		miicApplicantDetailsImpl.setTelephone(
			this.<String>getColumnOriginalValue("telephone"));
		miicApplicantDetailsImpl.setDateOfApplication(
			this.<Date>getColumnOriginalValue("dateOfApplication"));
		miicApplicantDetailsImpl.setTrnNumber(
			this.<String>getColumnOriginalValue("trnNumber"));
		miicApplicantDetailsImpl.setMiicApplicationId(
			this.<Long>getColumnOriginalValue("miicApplicationId"));
		miicApplicantDetailsImpl.setNameOfProducer(
			this.<String>getColumnOriginalValue("nameOfProducer"));
		miicApplicantDetailsImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		miicApplicantDetailsImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		miicApplicantDetailsImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));

		return miicApplicantDetailsImpl;
	}

	@Override
	public int compareTo(MiicApplicantDetails miicApplicantDetails) {
		long primaryKey = miicApplicantDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MiicApplicantDetails)) {
			return false;
		}

		MiicApplicantDetails miicApplicantDetails =
			(MiicApplicantDetails)object;

		long primaryKey = miicApplicantDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MiicApplicantDetails> toCacheModel() {
		MiicApplicantDetailsCacheModel miicApplicantDetailsCacheModel =
			new MiicApplicantDetailsCacheModel();

		miicApplicantDetailsCacheModel.miicApplicantDetailsId =
			getMiicApplicantDetailsId();

		miicApplicantDetailsCacheModel.groupId = getGroupId();

		miicApplicantDetailsCacheModel.companyId = getCompanyId();

		miicApplicantDetailsCacheModel.userId = getUserId();

		miicApplicantDetailsCacheModel.userName = getUserName();

		String userName = miicApplicantDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			miicApplicantDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			miicApplicantDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			miicApplicantDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			miicApplicantDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			miicApplicantDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		miicApplicantDetailsCacheModel.natureOfApplicant =
			getNatureOfApplicant();

		String natureOfApplicant =
			miicApplicantDetailsCacheModel.natureOfApplicant;

		if ((natureOfApplicant != null) && (natureOfApplicant.length() == 0)) {
			miicApplicantDetailsCacheModel.natureOfApplicant = null;
		}

		miicApplicantDetailsCacheModel.applicantName = getApplicantName();

		String applicantName = miicApplicantDetailsCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			miicApplicantDetailsCacheModel.applicantName = null;
		}

		miicApplicantDetailsCacheModel.address = getAddress();

		String address = miicApplicantDetailsCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			miicApplicantDetailsCacheModel.address = null;
		}

		miicApplicantDetailsCacheModel.email = getEmail();

		String email = miicApplicantDetailsCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			miicApplicantDetailsCacheModel.email = null;
		}

		miicApplicantDetailsCacheModel.telephone = getTelephone();

		String telephone = miicApplicantDetailsCacheModel.telephone;

		if ((telephone != null) && (telephone.length() == 0)) {
			miicApplicantDetailsCacheModel.telephone = null;
		}

		Date dateOfApplication = getDateOfApplication();

		if (dateOfApplication != null) {
			miicApplicantDetailsCacheModel.dateOfApplication =
				dateOfApplication.getTime();
		}
		else {
			miicApplicantDetailsCacheModel.dateOfApplication = Long.MIN_VALUE;
		}

		miicApplicantDetailsCacheModel.trnNumber = getTrnNumber();

		String trnNumber = miicApplicantDetailsCacheModel.trnNumber;

		if ((trnNumber != null) && (trnNumber.length() == 0)) {
			miicApplicantDetailsCacheModel.trnNumber = null;
		}

		miicApplicantDetailsCacheModel.miicApplicationId =
			getMiicApplicationId();

		miicApplicantDetailsCacheModel.nameOfProducer = getNameOfProducer();

		String nameOfProducer = miicApplicantDetailsCacheModel.nameOfProducer;

		if ((nameOfProducer != null) && (nameOfProducer.length() == 0)) {
			miicApplicantDetailsCacheModel.nameOfProducer = null;
		}

		miicApplicantDetailsCacheModel.companyName = getCompanyName();

		String companyName = miicApplicantDetailsCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			miicApplicantDetailsCacheModel.companyName = null;
		}

		miicApplicantDetailsCacheModel.firstName = getFirstName();

		String firstName = miicApplicantDetailsCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			miicApplicantDetailsCacheModel.firstName = null;
		}

		miicApplicantDetailsCacheModel.lastName = getLastName();

		String lastName = miicApplicantDetailsCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			miicApplicantDetailsCacheModel.lastName = null;
		}

		return miicApplicantDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MiicApplicantDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MiicApplicantDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiicApplicantDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(MiicApplicantDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MiicApplicantDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MiicApplicantDetails.class, ModelWrapper.class);

	}

	private long _miicApplicantDetailsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _natureOfApplicant;
	private String _applicantName;
	private String _address;
	private String _email;
	private String _telephone;
	private Date _dateOfApplication;
	private String _trnNumber;
	private long _miicApplicationId;
	private String _nameOfProducer;
	private String _companyName;
	private String _firstName;
	private String _lastName;

	public <T> T getColumnValue(String columnName) {
		Function<MiicApplicantDetails, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MiicApplicantDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"miicApplicantDetailsId", _miicApplicantDetailsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("natureOfApplicant", _natureOfApplicant);
		_columnOriginalValues.put("applicantName ", _applicantName);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("telephone", _telephone);
		_columnOriginalValues.put("dateOfApplication", _dateOfApplication);
		_columnOriginalValues.put("trnNumber", _trnNumber);
		_columnOriginalValues.put("miicApplicationId", _miicApplicationId);
		_columnOriginalValues.put("nameOfProducer", _nameOfProducer);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("miicApplicantDetailsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("natureOfApplicant", 128L);

		columnBitmasks.put("applicantName ", 256L);

		columnBitmasks.put("address", 512L);

		columnBitmasks.put("email", 1024L);

		columnBitmasks.put("telephone", 2048L);

		columnBitmasks.put("dateOfApplication", 4096L);

		columnBitmasks.put("trnNumber", 8192L);

		columnBitmasks.put("miicApplicationId", 16384L);

		columnBitmasks.put("nameOfProducer", 32768L);

		columnBitmasks.put("companyName", 65536L);

		columnBitmasks.put("firstName", 131072L);

		columnBitmasks.put("lastName", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MiicApplicantDetails _escapedModel;

}