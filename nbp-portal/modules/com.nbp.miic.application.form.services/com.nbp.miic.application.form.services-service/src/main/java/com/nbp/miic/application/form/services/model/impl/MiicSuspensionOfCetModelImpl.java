/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.miic.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.miic.application.form.services.model.MiicSuspensionOfCet;
import com.nbp.miic.application.form.services.model.MiicSuspensionOfCetModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MiicSuspensionOfCet service. Represents a row in the &quot;nbp_miic_Suspension&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MiicSuspensionOfCetModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MiicSuspensionOfCetImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MiicSuspensionOfCetImpl
 * @generated
 */
@JSON(strict = true)
public class MiicSuspensionOfCetModelImpl
	extends BaseModelImpl<MiicSuspensionOfCet>
	implements MiicSuspensionOfCetModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a miic suspension of cet model instance should use the <code>MiicSuspensionOfCet</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_miic_Suspension";

	public static final Object[][] TABLE_COLUMNS = {
		{"miicSuspensionOfCetId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"indicationOfUrgency", Types.VARCHAR},
		{"requestForSuspension", Types.VARCHAR},
		{"evidenceOfInability", Types.VARCHAR},
		{"evidenceOfConsultation", Types.VARCHAR},
		{"evidenceOfConsultationForeign", Types.VARCHAR},
		{"nameOfAuthorizedPersonnel", Types.VARCHAR},
		{"miicApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("miicSuspensionOfCetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("indicationOfUrgency", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestForSuspension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("evidenceOfInability", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("evidenceOfConsultation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("evidenceOfConsultationForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfAuthorizedPersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("miicApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_miic_Suspension (miicSuspensionOfCetId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,indicationOfUrgency VARCHAR(75) null,requestForSuspension VARCHAR(75) null,evidenceOfInability VARCHAR(75) null,evidenceOfConsultation VARCHAR(75) null,evidenceOfConsultationForeign VARCHAR(75) null,nameOfAuthorizedPersonnel VARCHAR(75) null,miicApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_miic_Suspension";

	public static final String ORDER_BY_JPQL =
		" ORDER BY miicSuspensionOfCet.miicSuspensionOfCetId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_miic_Suspension.miicSuspensionOfCetId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MIICAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MIICSUSPENSIONOFCETID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MiicSuspensionOfCetModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _miicSuspensionOfCetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMiicSuspensionOfCetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _miicSuspensionOfCetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MiicSuspensionOfCet.class;
	}

	@Override
	public String getModelClassName() {
		return MiicSuspensionOfCet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MiicSuspensionOfCet, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MiicSuspensionOfCet, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiicSuspensionOfCet, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MiicSuspensionOfCet)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MiicSuspensionOfCet, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MiicSuspensionOfCet, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MiicSuspensionOfCet)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MiicSuspensionOfCet, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MiicSuspensionOfCet, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<MiicSuspensionOfCet, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<MiicSuspensionOfCet, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<MiicSuspensionOfCet, Object>>();

			attributeGetterFunctions.put(
				"miicSuspensionOfCetId",
				MiicSuspensionOfCet::getMiicSuspensionOfCetId);
			attributeGetterFunctions.put(
				"groupId", MiicSuspensionOfCet::getGroupId);
			attributeGetterFunctions.put(
				"companyId", MiicSuspensionOfCet::getCompanyId);
			attributeGetterFunctions.put(
				"userId", MiicSuspensionOfCet::getUserId);
			attributeGetterFunctions.put(
				"userName", MiicSuspensionOfCet::getUserName);
			attributeGetterFunctions.put(
				"createDate", MiicSuspensionOfCet::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", MiicSuspensionOfCet::getModifiedDate);
			attributeGetterFunctions.put(
				"indicationOfUrgency",
				MiicSuspensionOfCet::getIndicationOfUrgency);
			attributeGetterFunctions.put(
				"requestForSuspension",
				MiicSuspensionOfCet::getRequestForSuspension);
			attributeGetterFunctions.put(
				"evidenceOfInability",
				MiicSuspensionOfCet::getEvidenceOfInability);
			attributeGetterFunctions.put(
				"evidenceOfConsultation",
				MiicSuspensionOfCet::getEvidenceOfConsultation);
			attributeGetterFunctions.put(
				"evidenceOfConsultationForeign",
				MiicSuspensionOfCet::getEvidenceOfConsultationForeign);
			attributeGetterFunctions.put(
				"nameOfAuthorizedPersonnel",
				MiicSuspensionOfCet::getNameOfAuthorizedPersonnel);
			attributeGetterFunctions.put(
				"miicApplicationId", MiicSuspensionOfCet::getMiicApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<MiicSuspensionOfCet, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<MiicSuspensionOfCet, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<MiicSuspensionOfCet, ?>>();

			attributeSetterBiConsumers.put(
				"miicSuspensionOfCetId",
				(BiConsumer<MiicSuspensionOfCet, Long>)
					MiicSuspensionOfCet::setMiicSuspensionOfCetId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<MiicSuspensionOfCet, Long>)
					MiicSuspensionOfCet::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<MiicSuspensionOfCet, Long>)
					MiicSuspensionOfCet::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<MiicSuspensionOfCet, Long>)
					MiicSuspensionOfCet::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<MiicSuspensionOfCet, String>)
					MiicSuspensionOfCet::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<MiicSuspensionOfCet, Date>)
					MiicSuspensionOfCet::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<MiicSuspensionOfCet, Date>)
					MiicSuspensionOfCet::setModifiedDate);
			attributeSetterBiConsumers.put(
				"indicationOfUrgency",
				(BiConsumer<MiicSuspensionOfCet, String>)
					MiicSuspensionOfCet::setIndicationOfUrgency);
			attributeSetterBiConsumers.put(
				"requestForSuspension",
				(BiConsumer<MiicSuspensionOfCet, String>)
					MiicSuspensionOfCet::setRequestForSuspension);
			attributeSetterBiConsumers.put(
				"evidenceOfInability",
				(BiConsumer<MiicSuspensionOfCet, String>)
					MiicSuspensionOfCet::setEvidenceOfInability);
			attributeSetterBiConsumers.put(
				"evidenceOfConsultation",
				(BiConsumer<MiicSuspensionOfCet, String>)
					MiicSuspensionOfCet::setEvidenceOfConsultation);
			attributeSetterBiConsumers.put(
				"evidenceOfConsultationForeign",
				(BiConsumer<MiicSuspensionOfCet, String>)
					MiicSuspensionOfCet::setEvidenceOfConsultationForeign);
			attributeSetterBiConsumers.put(
				"nameOfAuthorizedPersonnel",
				(BiConsumer<MiicSuspensionOfCet, String>)
					MiicSuspensionOfCet::setNameOfAuthorizedPersonnel);
			attributeSetterBiConsumers.put(
				"miicApplicationId",
				(BiConsumer<MiicSuspensionOfCet, Long>)
					MiicSuspensionOfCet::setMiicApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMiicSuspensionOfCetId() {
		return _miicSuspensionOfCetId;
	}

	@Override
	public void setMiicSuspensionOfCetId(long miicSuspensionOfCetId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miicSuspensionOfCetId = miicSuspensionOfCetId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getIndicationOfUrgency() {
		if (_indicationOfUrgency == null) {
			return "";
		}
		else {
			return _indicationOfUrgency;
		}
	}

	@Override
	public void setIndicationOfUrgency(String indicationOfUrgency) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indicationOfUrgency = indicationOfUrgency;
	}

	@JSON
	@Override
	public String getRequestForSuspension() {
		if (_requestForSuspension == null) {
			return "";
		}
		else {
			return _requestForSuspension;
		}
	}

	@Override
	public void setRequestForSuspension(String requestForSuspension) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestForSuspension = requestForSuspension;
	}

	@JSON
	@Override
	public String getEvidenceOfInability() {
		if (_evidenceOfInability == null) {
			return "";
		}
		else {
			return _evidenceOfInability;
		}
	}

	@Override
	public void setEvidenceOfInability(String evidenceOfInability) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_evidenceOfInability = evidenceOfInability;
	}

	@JSON
	@Override
	public String getEvidenceOfConsultation() {
		if (_evidenceOfConsultation == null) {
			return "";
		}
		else {
			return _evidenceOfConsultation;
		}
	}

	@Override
	public void setEvidenceOfConsultation(String evidenceOfConsultation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_evidenceOfConsultation = evidenceOfConsultation;
	}

	@JSON
	@Override
	public String getEvidenceOfConsultationForeign() {
		if (_evidenceOfConsultationForeign == null) {
			return "";
		}
		else {
			return _evidenceOfConsultationForeign;
		}
	}

	@Override
	public void setEvidenceOfConsultationForeign(
		String evidenceOfConsultationForeign) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_evidenceOfConsultationForeign = evidenceOfConsultationForeign;
	}

	@JSON
	@Override
	public String getNameOfAuthorizedPersonnel() {
		if (_nameOfAuthorizedPersonnel == null) {
			return "";
		}
		else {
			return _nameOfAuthorizedPersonnel;
		}
	}

	@Override
	public void setNameOfAuthorizedPersonnel(String nameOfAuthorizedPersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfAuthorizedPersonnel = nameOfAuthorizedPersonnel;
	}

	@JSON
	@Override
	public long getMiicApplicationId() {
		return _miicApplicationId;
	}

	@Override
	public void setMiicApplicationId(long miicApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miicApplicationId = miicApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMiicApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("miicApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MiicSuspensionOfCet.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MiicSuspensionOfCet toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MiicSuspensionOfCet>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MiicSuspensionOfCetImpl miicSuspensionOfCetImpl =
			new MiicSuspensionOfCetImpl();

		miicSuspensionOfCetImpl.setMiicSuspensionOfCetId(
			getMiicSuspensionOfCetId());
		miicSuspensionOfCetImpl.setGroupId(getGroupId());
		miicSuspensionOfCetImpl.setCompanyId(getCompanyId());
		miicSuspensionOfCetImpl.setUserId(getUserId());
		miicSuspensionOfCetImpl.setUserName(getUserName());
		miicSuspensionOfCetImpl.setCreateDate(getCreateDate());
		miicSuspensionOfCetImpl.setModifiedDate(getModifiedDate());
		miicSuspensionOfCetImpl.setIndicationOfUrgency(
			getIndicationOfUrgency());
		miicSuspensionOfCetImpl.setRequestForSuspension(
			getRequestForSuspension());
		miicSuspensionOfCetImpl.setEvidenceOfInability(
			getEvidenceOfInability());
		miicSuspensionOfCetImpl.setEvidenceOfConsultation(
			getEvidenceOfConsultation());
		miicSuspensionOfCetImpl.setEvidenceOfConsultationForeign(
			getEvidenceOfConsultationForeign());
		miicSuspensionOfCetImpl.setNameOfAuthorizedPersonnel(
			getNameOfAuthorizedPersonnel());
		miicSuspensionOfCetImpl.setMiicApplicationId(getMiicApplicationId());

		miicSuspensionOfCetImpl.resetOriginalValues();

		return miicSuspensionOfCetImpl;
	}

	@Override
	public MiicSuspensionOfCet cloneWithOriginalValues() {
		MiicSuspensionOfCetImpl miicSuspensionOfCetImpl =
			new MiicSuspensionOfCetImpl();

		miicSuspensionOfCetImpl.setMiicSuspensionOfCetId(
			this.<Long>getColumnOriginalValue("miicSuspensionOfCetId"));
		miicSuspensionOfCetImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		miicSuspensionOfCetImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		miicSuspensionOfCetImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		miicSuspensionOfCetImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		miicSuspensionOfCetImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		miicSuspensionOfCetImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		miicSuspensionOfCetImpl.setIndicationOfUrgency(
			this.<String>getColumnOriginalValue("indicationOfUrgency"));
		miicSuspensionOfCetImpl.setRequestForSuspension(
			this.<String>getColumnOriginalValue("requestForSuspension"));
		miicSuspensionOfCetImpl.setEvidenceOfInability(
			this.<String>getColumnOriginalValue("evidenceOfInability"));
		miicSuspensionOfCetImpl.setEvidenceOfConsultation(
			this.<String>getColumnOriginalValue("evidenceOfConsultation"));
		miicSuspensionOfCetImpl.setEvidenceOfConsultationForeign(
			this.<String>getColumnOriginalValue(
				"evidenceOfConsultationForeign"));
		miicSuspensionOfCetImpl.setNameOfAuthorizedPersonnel(
			this.<String>getColumnOriginalValue("nameOfAuthorizedPersonnel"));
		miicSuspensionOfCetImpl.setMiicApplicationId(
			this.<Long>getColumnOriginalValue("miicApplicationId"));

		return miicSuspensionOfCetImpl;
	}

	@Override
	public int compareTo(MiicSuspensionOfCet miicSuspensionOfCet) {
		long primaryKey = miicSuspensionOfCet.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MiicSuspensionOfCet)) {
			return false;
		}

		MiicSuspensionOfCet miicSuspensionOfCet = (MiicSuspensionOfCet)object;

		long primaryKey = miicSuspensionOfCet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MiicSuspensionOfCet> toCacheModel() {
		MiicSuspensionOfCetCacheModel miicSuspensionOfCetCacheModel =
			new MiicSuspensionOfCetCacheModel();

		miicSuspensionOfCetCacheModel.miicSuspensionOfCetId =
			getMiicSuspensionOfCetId();

		miicSuspensionOfCetCacheModel.groupId = getGroupId();

		miicSuspensionOfCetCacheModel.companyId = getCompanyId();

		miicSuspensionOfCetCacheModel.userId = getUserId();

		miicSuspensionOfCetCacheModel.userName = getUserName();

		String userName = miicSuspensionOfCetCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			miicSuspensionOfCetCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			miicSuspensionOfCetCacheModel.createDate = createDate.getTime();
		}
		else {
			miicSuspensionOfCetCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			miicSuspensionOfCetCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			miicSuspensionOfCetCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		miicSuspensionOfCetCacheModel.indicationOfUrgency =
			getIndicationOfUrgency();

		String indicationOfUrgency =
			miicSuspensionOfCetCacheModel.indicationOfUrgency;

		if ((indicationOfUrgency != null) &&
			(indicationOfUrgency.length() == 0)) {

			miicSuspensionOfCetCacheModel.indicationOfUrgency = null;
		}

		miicSuspensionOfCetCacheModel.requestForSuspension =
			getRequestForSuspension();

		String requestForSuspension =
			miicSuspensionOfCetCacheModel.requestForSuspension;

		if ((requestForSuspension != null) &&
			(requestForSuspension.length() == 0)) {

			miicSuspensionOfCetCacheModel.requestForSuspension = null;
		}

		miicSuspensionOfCetCacheModel.evidenceOfInability =
			getEvidenceOfInability();

		String evidenceOfInability =
			miicSuspensionOfCetCacheModel.evidenceOfInability;

		if ((evidenceOfInability != null) &&
			(evidenceOfInability.length() == 0)) {

			miicSuspensionOfCetCacheModel.evidenceOfInability = null;
		}

		miicSuspensionOfCetCacheModel.evidenceOfConsultation =
			getEvidenceOfConsultation();

		String evidenceOfConsultation =
			miicSuspensionOfCetCacheModel.evidenceOfConsultation;

		if ((evidenceOfConsultation != null) &&
			(evidenceOfConsultation.length() == 0)) {

			miicSuspensionOfCetCacheModel.evidenceOfConsultation = null;
		}

		miicSuspensionOfCetCacheModel.evidenceOfConsultationForeign =
			getEvidenceOfConsultationForeign();

		String evidenceOfConsultationForeign =
			miicSuspensionOfCetCacheModel.evidenceOfConsultationForeign;

		if ((evidenceOfConsultationForeign != null) &&
			(evidenceOfConsultationForeign.length() == 0)) {

			miicSuspensionOfCetCacheModel.evidenceOfConsultationForeign = null;
		}

		miicSuspensionOfCetCacheModel.nameOfAuthorizedPersonnel =
			getNameOfAuthorizedPersonnel();

		String nameOfAuthorizedPersonnel =
			miicSuspensionOfCetCacheModel.nameOfAuthorizedPersonnel;

		if ((nameOfAuthorizedPersonnel != null) &&
			(nameOfAuthorizedPersonnel.length() == 0)) {

			miicSuspensionOfCetCacheModel.nameOfAuthorizedPersonnel = null;
		}

		miicSuspensionOfCetCacheModel.miicApplicationId =
			getMiicApplicationId();

		return miicSuspensionOfCetCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MiicSuspensionOfCet, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MiicSuspensionOfCet, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiicSuspensionOfCet, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(MiicSuspensionOfCet)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MiicSuspensionOfCet>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MiicSuspensionOfCet.class, ModelWrapper.class);

	}

	private long _miicSuspensionOfCetId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _indicationOfUrgency;
	private String _requestForSuspension;
	private String _evidenceOfInability;
	private String _evidenceOfConsultation;
	private String _evidenceOfConsultationForeign;
	private String _nameOfAuthorizedPersonnel;
	private long _miicApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<MiicSuspensionOfCet, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MiicSuspensionOfCet)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"miicSuspensionOfCetId", _miicSuspensionOfCetId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("indicationOfUrgency", _indicationOfUrgency);
		_columnOriginalValues.put(
			"requestForSuspension", _requestForSuspension);
		_columnOriginalValues.put("evidenceOfInability", _evidenceOfInability);
		_columnOriginalValues.put(
			"evidenceOfConsultation", _evidenceOfConsultation);
		_columnOriginalValues.put(
			"evidenceOfConsultationForeign", _evidenceOfConsultationForeign);
		_columnOriginalValues.put(
			"nameOfAuthorizedPersonnel", _nameOfAuthorizedPersonnel);
		_columnOriginalValues.put("miicApplicationId", _miicApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("miicSuspensionOfCetId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("indicationOfUrgency", 128L);

		columnBitmasks.put("requestForSuspension", 256L);

		columnBitmasks.put("evidenceOfInability", 512L);

		columnBitmasks.put("evidenceOfConsultation", 1024L);

		columnBitmasks.put("evidenceOfConsultationForeign", 2048L);

		columnBitmasks.put("nameOfAuthorizedPersonnel", 4096L);

		columnBitmasks.put("miicApplicationId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MiicSuspensionOfCet _escapedModel;

}