package com.nbp.janaac.application.form.web.portlet;

import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCResourceCommand;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.Validator;
import com.nbp.janaac.application.form.service.model.AccCerBodyManageReq;
import com.nbp.janaac.application.form.service.service.AccCerBodyManageReqLocalServiceUtil;
import com.nbp.janaac.application.form.web.constants.JanaacApplicationFormPortletKeys;

import java.io.IOException;

import javax.portlet.PortletException;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;

import org.osgi.service.component.annotations.Component;

@Component(immediate = true, property = {
		"javax.portlet.name=" +JanaacApplicationFormPortletKeys.JANAACAPPLICATIONFORM,
		"mvc.command.name=/acc/cer/bodies/manage/sys/req" }, service = MVCResourceCommand.class)
public class AddAccCerBodiesManageSysReqResourceCommand implements MVCResourceCommand {

	private static Log _log = LogFactoryUtil.getLog(AddAccCerBodiesManageSysReqResourceCommand.class.getName());

	@Override
	public boolean serveResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse)
			throws PortletException {
		_log.info("[Adding accreditation certification bodies -2015 standard management system requirement info------ Started]");
		JSONObject jsonFeed = JSONFactoryUtil.createJSONObject();
		JSONObject jsonOBJ = JSONFactoryUtil.createJSONObject();
		long janaacApplicationId = ParamUtil.getLong(resourceRequest, "janaacApplicationId");			
		String optionFollow = ParamUtil.getString(resourceRequest, "optionFollow");
		String impartialityPolicy = ParamUtil.getString(resourceRequest, "impartialityPolicy");
		String qMRefImpartiality = ParamUtil.getString(resourceRequest, "qMRefImpartiality");
		String riskAssessment= ParamUtil.getString(resourceRequest, "riskAssessment");
		String qMRefRisk= ParamUtil.getString(resourceRequest, "qMRefRisk");
		String orgStructure= ParamUtil.getString(resourceRequest, "orgStructure");
		String qMRefOrgStruct= ParamUtil.getString(resourceRequest, "qMRefOrgStruct");
		String termsOfReference= ParamUtil.getString(resourceRequest, "termsOfReference");
		String qMRefTerms= ParamUtil.getString(resourceRequest, "qMRefTerms");
		String processForControl= ParamUtil.getString(resourceRequest, "processForControl");
		String qMRefProcess= ParamUtil.getString(resourceRequest, "qMRefProcess");
		String criteriaReq= ParamUtil.getString(resourceRequest, "criteriaReq");
		String qMRefCriteria= ParamUtil.getString(resourceRequest, "qMRefCriteria");
		String initialCompetence= ParamUtil.getString(resourceRequest, "initialCompetence");
		String qMRefInitial = ParamUtil.getString(resourceRequest, "qMRefInitial");
		String selectingTraining = ParamUtil.getString(resourceRequest, "selectingTraining");
		String qMRefSelecting = ParamUtil.getString(resourceRequest, "qMRefSelecting");
		String monitoringCompetence= ParamUtil.getString(resourceRequest, "monitoringCompetence");
		String qMRefMonitoring= ParamUtil.getString(resourceRequest, "qMRefMonitoring");
		String writtenAgreement= ParamUtil.getString(resourceRequest, "writtenAgreement");
		String qMRefWritten= ParamUtil.getString(resourceRequest, "qMRefWritten");
		String descOfProcess= ParamUtil.getString(resourceRequest, "descOfProcess");
		String qMRefDescProcess= ParamUtil.getString(resourceRequest, "qMRefDescProcess");		
		String processForMonitor= ParamUtil.getString(resourceRequest, "processForMonitor");
		String qMRefMonitorProcess= ParamUtil.getString(resourceRequest, "qMRefMonitorProcess");
		String auditProcess= ParamUtil.getString(resourceRequest, "auditProcess");
		String qMRefAuditProcess= ParamUtil.getString(resourceRequest, "qMRefAuditProcess");
		String processGranting= ParamUtil.getString(resourceRequest, "processGranting");
		String qMRefGranting= ParamUtil.getString(resourceRequest, "qMRefGranting");
		String managemntSys = ParamUtil.getString(resourceRequest, "managemntSys");
		String qMRefManagemnt = ParamUtil.getString(resourceRequest, "qMRefManagemnt");
		String useOfCertification = ParamUtil.getString(resourceRequest, "useOfCertification");
		String qMRefUseOfCerti= ParamUtil.getString(resourceRequest, "qMRefUseOfCerti");
		String handlingReq= ParamUtil.getString(resourceRequest, "handlingReq");
		String qMRefHandling= ParamUtil.getString(resourceRequest, "qMRefHandling");
		String impartialityPolicies= ParamUtil.getString(resourceRequest, "impartialityPolicies");
		String qMRefImpartPolicy= ParamUtil.getString(resourceRequest, "qMRefImpartPolicy");
		String provisionInform= ParamUtil.getString(resourceRequest, "provisionInform");
		String qMRefProvision= ParamUtil.getString(resourceRequest, "qMRefProvision");
		String certificationDoc= ParamUtil.getString(resourceRequest, "certificationDoc");
		String qMRefCertification= ParamUtil.getString(resourceRequest, "qMRefCertification");
		String rulesGoverning= ParamUtil.getString(resourceRequest, "rulesGoverning");
		String qMRefGoverning= ParamUtil.getString(resourceRequest, "qMRefGoverning");
		String enforcableArrangements = ParamUtil.getString(resourceRequest, "enforcableArrangements");
		String qMRefEnforcable = ParamUtil.getString(resourceRequest, "qMRefEnforcable");
		String ensureConfidential = ParamUtil.getString(resourceRequest, "ensureConfidential");
		String qMRefEnsureConfid = ParamUtil.getString(resourceRequest, "qMRefEnsureConfid");		
		String informingMechanism= ParamUtil.getString(resourceRequest, "informingMechanism");
		String qMRefInforming= ParamUtil.getString(resourceRequest, "qMRefInforming");
		String applicationProcess= ParamUtil.getString(resourceRequest, "applicationProcess");
		String qMRefApplication= ParamUtil.getString(resourceRequest, "qMRefApplication");
		String applicationReview= ParamUtil.getString(resourceRequest, "applicationReview");
		String qMRefReview= ParamUtil.getString(resourceRequest, "qMRefReview");
		String certificationCycle= ParamUtil.getString(resourceRequest, "certificationCycle");
		String qMRefCertiCycle= ParamUtil.getString(resourceRequest, "qMRefCertiCycle");
		String auditTime= ParamUtil.getString(resourceRequest, "auditTime");
		String qMRefAuditTime= ParamUtil.getString(resourceRequest, "qMRefAuditTime");
		String samplingProgram= ParamUtil.getString(resourceRequest, "samplingProgram");
		String qMRefSampling= ParamUtil.getString(resourceRequest, "qMRefSampling");
		String auditPlanning= ParamUtil.getString(resourceRequest, "auditPlanning");
		String qMRefPlanning= ParamUtil.getString(resourceRequest, "qMRefPlanning");
		String auditTeam= ParamUtil.getString(resourceRequest, "auditTeam");
		String qMRefAuditTeam= ParamUtil.getString(resourceRequest, "qMRefAuditTeam");
		String onSiteAudit= ParamUtil.getString(resourceRequest, "onSiteAudit");
		String qMRefonSiteAudit= ParamUtil.getString(resourceRequest, "qMRefonSiteAudit");
		String auditReport= ParamUtil.getString(resourceRequest, "auditReport");
		String qMRefAuditReport= ParamUtil.getString(resourceRequest, "qMRefAuditReport");
		String correctiveActions= ParamUtil.getString(resourceRequest, "correctiveActions");
		String qMRefCorrective= ParamUtil.getString(resourceRequest, "qMRefCorrective");
		String reviewPriorDecision= ParamUtil.getString(resourceRequest, "reviewPriorDecision");
		String qMRefReviewPrior= ParamUtil.getString(resourceRequest, "qMRefReviewPrior");
		String transferCertification= ParamUtil.getString(resourceRequest, "transferCertification");
		String qMRefTransfer= ParamUtil.getString(resourceRequest, "qMRefTransfer");
		String suspensionPolicies= ParamUtil.getString(resourceRequest, "suspensionPolicies");
		String qMRefSuspension= ParamUtil.getString(resourceRequest, "qMRefSuspension");
		String suspensionProcedure= ParamUtil.getString(resourceRequest, "suspensionProcedure");
		String qMRefSuspensionProc= ParamUtil.getString(resourceRequest, "qMRefSuspensionProc");
		String decisionOnAppeals= ParamUtil.getString(resourceRequest, "decisionOnAppeals");
		String qMRefDecision= ParamUtil.getString(resourceRequest, "qMRefDecision");
		String handlingComplaints= ParamUtil.getString(resourceRequest, "handlingComplaints");
		String qMRefComplaints= ParamUtil.getString(resourceRequest, "qMRefComplaints");
		String recordRetentionPolicy= ParamUtil.getString(resourceRequest, "recordRetentionPolicy");
		String qMRefRetentionPolicy= ParamUtil.getString(resourceRequest, "qMRefRetentionPolicy");
		String recordRetentionProc= ParamUtil.getString(resourceRequest, "recordRetentionProc");
		String qMRefRetentionProc= ParamUtil.getString(resourceRequest, "qMRefRetentionProc");
		String manageSysPolicies= ParamUtil.getString(resourceRequest, "manageSysPolicies");
		String qMRefPolicies= ParamUtil.getString(resourceRequest, "qMRefPolicies");
		String manageSysObjective= ParamUtil.getString(resourceRequest, "manageSysObjective");
		String qMRefObjective= ParamUtil.getString(resourceRequest, "qMRefObjective");
		String manageSysManual= ParamUtil.getString(resourceRequest, "manageSysManual");
		String qMRefManual= ParamUtil.getString(resourceRequest, "qMRefManual");
		String docControlProc= ParamUtil.getString(resourceRequest, "docControlProc");
		String qMRefDocControl= ParamUtil.getString(resourceRequest, "qMRefDocControl");
		String recControlProc= ParamUtil.getString(resourceRequest, "recControlProc");
		String qMRefRecControl= ParamUtil.getString(resourceRequest, "qMRefRecControl");
		String managementReview= ParamUtil.getString(resourceRequest, "managementReview");
		String qMRefManagementRev= ParamUtil.getString(resourceRequest, "qMRefManagementRev");
		String internalAudits= ParamUtil.getString(resourceRequest, "internalAudits");
		String qMRefInternal= ParamUtil.getString(resourceRequest, "qMRefInternal");
		String identificationProc= ParamUtil.getString(resourceRequest, "identificationProc");
		String qMRefIdentification= ParamUtil.getString(resourceRequest, "qMRefIdentification");
		String qMSScopeB= ParamUtil.getString(resourceRequest, "qMSScopeB");
		String qMRefQMSScopeB= ParamUtil.getString(resourceRequest, "qMRefQMSScopeB");
		String designDevB= ParamUtil.getString(resourceRequest, "designDevB");		
		String qMRefDesignB= ParamUtil.getString(resourceRequest, "qMRefDesignB");
		String interestedPartyNeedsB= ParamUtil.getString(resourceRequest, "interestedPartyNeedsB");
		String qMRefInterestedB= ParamUtil.getString(resourceRequest, "qMRefInterestedB");
		String managementReviewB= ParamUtil.getString(resourceRequest, "managementReviewB");
		String qMRefmanagementReviewB= ParamUtil.getString(resourceRequest, "qMRefmanagementReviewB");
		AccCerBodyManageReq application=null;
		try {
			application = AccCerBodyManageReqLocalServiceUtil.getJANAAC_ByApplicationId(janaacApplicationId);
		} catch (Exception e) {
		}
		if (Validator.isNull(application)) {
			application = AccCerBodyManageReqLocalServiceUtil.createAccCerBodyManageReq(CounterLocalServiceUtil.increment());
		}	
		
		application.setOptionFollow(optionFollow);
		application.setImpartialityPolicy(impartialityPolicy);
		application.setQMRefImpartiality(qMRefImpartiality);
		application.setRiskAssessment(riskAssessment);
		application.setQMRefRisk(qMRefRisk);
		application.setOrgStructure(orgStructure);
		application.setQMRefOrgStruct(qMRefOrgStruct);
		application.setTermsOfReference(termsOfReference);
		application.setQMRefTerms(qMRefTerms);
		application.setProcessForControl(processForControl);
		application.setQMRefProcess(qMRefProcess);
		application.setCriteriaReq(criteriaReq);
		application.setQMRefCriteria(qMRefCriteria);
		application.setInitialCompetence(initialCompetence);
		application.setQMRefInitial(qMRefInitial);
		application.setSelectingTraining(selectingTraining);
		application.setQMRefSelecting(qMRefSelecting);
		application.setMonitoringCompetence(monitoringCompetence);
		application.setQMRefMonitoring(qMRefMonitoring);
		application.setWrittenAgreement(writtenAgreement);		
		application.setQMRefWritten(qMRefWritten);
		application.setDescOfProcess(descOfProcess);
		application.setQMRefDescProcess(qMRefDescProcess);
		application.setProcessForMonitor(processForMonitor);
		application.setQMRefMonitorProcess(qMRefMonitorProcess);
		application.setAuditProcess(auditProcess);
		application.setQMRefAuditProcess(qMRefAuditProcess);
		application.setProcessGranting(processGranting);
		application.setQMRefGranting(qMRefGranting);
		application.setManagemntSys(managemntSys);
		application.setQMRefManagemnt(qMRefManagemnt);
		application.setUseOfCertification(useOfCertification);
		application.setQMRefUseOfCerti(qMRefUseOfCerti);
		application.setHandlingReq(handlingReq);
		application.setQMRefHandling(qMRefHandling);
		application.setImpartialityPolicies(impartialityPolicies);
		application.setQMRefImpartPolicy(qMRefImpartPolicy);
		application.setProvisionInform(provisionInform);
		application.setQMRefProvision(qMRefProvision);
		application.setCertificationDoc(certificationDoc);
		application.setQMRefCertification(qMRefCertification);	
		application.setRulesGoverning(rulesGoverning);
		application.setQMRefGoverning(qMRefGoverning);
		application.setEnforcableArrangements(enforcableArrangements);
		application.setQMRefEnforcable(qMRefEnforcable);
		application.setEnsureConfidential(ensureConfidential);
		application.setQMRefEnsureConfid(qMRefEnsureConfid);
		application.setInformingMechanism(informingMechanism);
		application.setQMRefInforming(qMRefInforming);
		application.setApplicationProcess(applicationProcess);
		application.setQMRefApplication(qMRefApplication);
		application.setApplicationReview(applicationReview);
		application.setQMRefReview(qMRefReview);
		application.setCertificationCycle(certificationCycle);
		application.setQMRefCertiCycle(qMRefCertiCycle);
		application.setAuditTime(auditTime);
		application.setQMRefAuditTime(qMRefAuditTime);
		application.setSamplingProgram(samplingProgram);
		application.setQMRefSampling(qMRefSampling);
		application.setAuditPlanning(auditPlanning);
		application.setQMRefPlanning(qMRefPlanning);		
		application.setAuditTeam(auditTeam);
		application.setQMRefAuditTeam(qMRefAuditTeam);
		application.setOnSiteAudit(onSiteAudit);
		application.setQMRefonSiteAudit(qMRefonSiteAudit);
		application.setAuditReport(auditReport);
		application.setQMRefAuditReport(qMRefAuditReport);
		application.setCorrectiveActions(correctiveActions);
		application.setQMRefCorrective(qMRefCorrective);
		application.setReviewPriorDecision(reviewPriorDecision);
		application.setQMRefReviewPrior(qMRefReviewPrior);
		application.setTransferCertification(transferCertification);
		application.setQMRefTransfer(qMRefTransfer);
		application.setSuspensionPolicies(suspensionPolicies);
		application.setQMRefSuspension(qMRefSuspension);
		application.setSuspensionProcedure(suspensionProcedure);		
		application.setQMRefSuspensionProc(qMRefSuspensionProc);
		application.setDecisionOnAppeals(decisionOnAppeals);
		application.setQMRefDecision(qMRefDecision);
		application.setHandlingComplaints(handlingComplaints);
		application.setQMRefComplaints(qMRefComplaints);
		application.setRecordRetentionPolicy(recordRetentionPolicy);
		application.setQMRefRetentionPolicy(qMRefRetentionPolicy);
		application.setRecordRetentionProc(recordRetentionProc);
		application.setQMRefRetentionProc(qMRefRetentionProc);
		application.setManageSysPolicies(manageSysPolicies);
		application.setQMRefPolicies(qMRefPolicies);
		application.setManageSysObjective(manageSysObjective);
		application.setQMRefObjective(qMRefObjective);
		application.setManageSysManual(manageSysManual);
		application.setQMRefManual(qMRefManual);
		application.setDocControlProcedure(docControlProc);
		application.setQMRefDocControl(qMRefDocControl);
		application.setRecControlProc(recControlProc);
		application.setQMRefRecControl(qMRefRecControl);
		application.setManagementReview(managementReview);
		application.setQMRefManagementRev(qMRefManagementRev);
		application.setInternalAudits(internalAudits);
		application.setQMRefInternal(qMRefInternal);
		application.setIdentificationProc(identificationProc);
		application.setQMRefIdentification(qMRefIdentification);
		application.setQMSScopeB(qMSScopeB);
		application.setQMRefQMSScopeB(qMRefQMSScopeB);
		application.setDesignDevB(designDevB);
		application.setQMRefDesignB(qMRefDesignB);
		application.setInterestedPartyNeedsB(interestedPartyNeedsB);
		application.setQMRefInterestedB(qMRefInterestedB);
		application.setManagementReviewB(managementReviewB);
		application.setQMRefmanagementReviewB(qMRefmanagementReviewB);
		application.setJanaacApplicationId(janaacApplicationId);
		AccCerBodyManageReqLocalServiceUtil.updateAccCerBodyManageReq(application);
		jsonOBJ.put("janaacApplicationId", application.getJanaacApplicationId());
		jsonFeed.put("APP_DATA", jsonOBJ);
		resourceResponse.setContentType("application/json");
		try {
			resourceResponse.getWriter().write(jsonFeed.toString());
		} catch (IOException e) {
			_log.error("an error occured----"+e);
		}
		return false;
	}

}
