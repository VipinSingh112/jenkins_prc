/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerApplicationCurrentStage;
import com.nbp.farm.application.form.service.model.FarmerApplicationCurrentStageModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerApplicationCurrentStage service. Represents a row in the &quot;nbp_farmer_stage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerApplicationCurrentStageModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerApplicationCurrentStageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerApplicationCurrentStageImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerApplicationCurrentStageModelImpl
	extends BaseModelImpl<FarmerApplicationCurrentStage>
	implements FarmerApplicationCurrentStageModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer application current stage model instance should use the <code>FarmerApplicationCurrentStage</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_farmer_stage";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"farmerCurrentStageId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"currentStage", Types.VARCHAR}, {"lastFormStage", Types.VARCHAR},
		{"farmerApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerCurrentStageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("currentStage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastFormStage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_farmer_stage (uuid_ VARCHAR(75) null,farmerCurrentStageId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,currentStage VARCHAR(75) null,lastFormStage VARCHAR(75) null,farmerApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table nbp_farmer_stage";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerApplicationCurrentStage.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_farmer_stage.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerApplicationCurrentStageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerCurrentStageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerCurrentStageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerCurrentStageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerApplicationCurrentStage.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerApplicationCurrentStage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerApplicationCurrentStage, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerApplicationCurrentStage, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerApplicationCurrentStage, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(FarmerApplicationCurrentStage)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerApplicationCurrentStage, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerApplicationCurrentStage, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerApplicationCurrentStage)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerApplicationCurrentStage, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerApplicationCurrentStage, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerApplicationCurrentStage>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerApplicationCurrentStage.class.getClassLoader(),
			FarmerApplicationCurrentStage.class, ModelWrapper.class);

		try {
			Constructor<FarmerApplicationCurrentStage> constructor =
				(Constructor<FarmerApplicationCurrentStage>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<FarmerApplicationCurrentStage, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<FarmerApplicationCurrentStage, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerApplicationCurrentStage, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FarmerApplicationCurrentStage, Object>>();
		Map<String, BiConsumer<FarmerApplicationCurrentStage, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<FarmerApplicationCurrentStage, ?>>();

		attributeGetterFunctions.put(
			"uuid", FarmerApplicationCurrentStage::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FarmerApplicationCurrentStage, String>)
				FarmerApplicationCurrentStage::setUuid);
		attributeGetterFunctions.put(
			"farmerCurrentStageId",
			FarmerApplicationCurrentStage::getFarmerCurrentStageId);
		attributeSetterBiConsumers.put(
			"farmerCurrentStageId",
			(BiConsumer<FarmerApplicationCurrentStage, Long>)
				FarmerApplicationCurrentStage::setFarmerCurrentStageId);
		attributeGetterFunctions.put(
			"groupId", FarmerApplicationCurrentStage::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerApplicationCurrentStage, Long>)
				FarmerApplicationCurrentStage::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmerApplicationCurrentStage::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerApplicationCurrentStage, Long>)
				FarmerApplicationCurrentStage::setCompanyId);
		attributeGetterFunctions.put(
			"userId", FarmerApplicationCurrentStage::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerApplicationCurrentStage, Long>)
				FarmerApplicationCurrentStage::setUserId);
		attributeGetterFunctions.put(
			"userName", FarmerApplicationCurrentStage::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerApplicationCurrentStage, String>)
				FarmerApplicationCurrentStage::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmerApplicationCurrentStage::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerApplicationCurrentStage, Date>)
				FarmerApplicationCurrentStage::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerApplicationCurrentStage::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerApplicationCurrentStage, Date>)
				FarmerApplicationCurrentStage::setModifiedDate);
		attributeGetterFunctions.put(
			"currentStage", FarmerApplicationCurrentStage::getCurrentStage);
		attributeSetterBiConsumers.put(
			"currentStage",
			(BiConsumer<FarmerApplicationCurrentStage, String>)
				FarmerApplicationCurrentStage::setCurrentStage);
		attributeGetterFunctions.put(
			"lastFormStage", FarmerApplicationCurrentStage::getLastFormStage);
		attributeSetterBiConsumers.put(
			"lastFormStage",
			(BiConsumer<FarmerApplicationCurrentStage, String>)
				FarmerApplicationCurrentStage::setLastFormStage);
		attributeGetterFunctions.put(
			"farmerApplicationId",
			FarmerApplicationCurrentStage::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerApplicationCurrentStage, Long>)
				FarmerApplicationCurrentStage::setFarmerApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFarmerCurrentStageId() {
		return _farmerCurrentStageId;
	}

	@Override
	public void setFarmerCurrentStageId(long farmerCurrentStageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerCurrentStageId = farmerCurrentStageId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCurrentStage() {
		if (_currentStage == null) {
			return "";
		}
		else {
			return _currentStage;
		}
	}

	@Override
	public void setCurrentStage(String currentStage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentStage = currentStage;
	}

	@JSON
	@Override
	public String getLastFormStage() {
		if (_lastFormStage == null) {
			return "";
		}
		else {
			return _lastFormStage;
		}
	}

	@Override
	public void setLastFormStage(String lastFormStage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastFormStage = lastFormStage;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				FarmerApplicationCurrentStage.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerApplicationCurrentStage.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerApplicationCurrentStage toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerApplicationCurrentStage>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerApplicationCurrentStageImpl farmerApplicationCurrentStageImpl =
			new FarmerApplicationCurrentStageImpl();

		farmerApplicationCurrentStageImpl.setUuid(getUuid());
		farmerApplicationCurrentStageImpl.setFarmerCurrentStageId(
			getFarmerCurrentStageId());
		farmerApplicationCurrentStageImpl.setGroupId(getGroupId());
		farmerApplicationCurrentStageImpl.setCompanyId(getCompanyId());
		farmerApplicationCurrentStageImpl.setUserId(getUserId());
		farmerApplicationCurrentStageImpl.setUserName(getUserName());
		farmerApplicationCurrentStageImpl.setCreateDate(getCreateDate());
		farmerApplicationCurrentStageImpl.setModifiedDate(getModifiedDate());
		farmerApplicationCurrentStageImpl.setCurrentStage(getCurrentStage());
		farmerApplicationCurrentStageImpl.setLastFormStage(getLastFormStage());
		farmerApplicationCurrentStageImpl.setFarmerApplicationId(
			getFarmerApplicationId());

		farmerApplicationCurrentStageImpl.resetOriginalValues();

		return farmerApplicationCurrentStageImpl;
	}

	@Override
	public FarmerApplicationCurrentStage cloneWithOriginalValues() {
		FarmerApplicationCurrentStageImpl farmerApplicationCurrentStageImpl =
			new FarmerApplicationCurrentStageImpl();

		farmerApplicationCurrentStageImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		farmerApplicationCurrentStageImpl.setFarmerCurrentStageId(
			this.<Long>getColumnOriginalValue("farmerCurrentStageId"));
		farmerApplicationCurrentStageImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerApplicationCurrentStageImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerApplicationCurrentStageImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmerApplicationCurrentStageImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerApplicationCurrentStageImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerApplicationCurrentStageImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerApplicationCurrentStageImpl.setCurrentStage(
			this.<String>getColumnOriginalValue("currentStage"));
		farmerApplicationCurrentStageImpl.setLastFormStage(
			this.<String>getColumnOriginalValue("lastFormStage"));
		farmerApplicationCurrentStageImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));

		return farmerApplicationCurrentStageImpl;
	}

	@Override
	public int compareTo(
		FarmerApplicationCurrentStage farmerApplicationCurrentStage) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), farmerApplicationCurrentStage.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerApplicationCurrentStage)) {
			return false;
		}

		FarmerApplicationCurrentStage farmerApplicationCurrentStage =
			(FarmerApplicationCurrentStage)object;

		long primaryKey = farmerApplicationCurrentStage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerApplicationCurrentStage> toCacheModel() {
		FarmerApplicationCurrentStageCacheModel
			farmerApplicationCurrentStageCacheModel =
				new FarmerApplicationCurrentStageCacheModel();

		farmerApplicationCurrentStageCacheModel.uuid = getUuid();

		String uuid = farmerApplicationCurrentStageCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			farmerApplicationCurrentStageCacheModel.uuid = null;
		}

		farmerApplicationCurrentStageCacheModel.farmerCurrentStageId =
			getFarmerCurrentStageId();

		farmerApplicationCurrentStageCacheModel.groupId = getGroupId();

		farmerApplicationCurrentStageCacheModel.companyId = getCompanyId();

		farmerApplicationCurrentStageCacheModel.userId = getUserId();

		farmerApplicationCurrentStageCacheModel.userName = getUserName();

		String userName = farmerApplicationCurrentStageCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerApplicationCurrentStageCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerApplicationCurrentStageCacheModel.createDate =
				createDate.getTime();
		}
		else {
			farmerApplicationCurrentStageCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerApplicationCurrentStageCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			farmerApplicationCurrentStageCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		farmerApplicationCurrentStageCacheModel.currentStage =
			getCurrentStage();

		String currentStage =
			farmerApplicationCurrentStageCacheModel.currentStage;

		if ((currentStage != null) && (currentStage.length() == 0)) {
			farmerApplicationCurrentStageCacheModel.currentStage = null;
		}

		farmerApplicationCurrentStageCacheModel.lastFormStage =
			getLastFormStage();

		String lastFormStage =
			farmerApplicationCurrentStageCacheModel.lastFormStage;

		if ((lastFormStage != null) && (lastFormStage.length() == 0)) {
			farmerApplicationCurrentStageCacheModel.lastFormStage = null;
		}

		farmerApplicationCurrentStageCacheModel.farmerApplicationId =
			getFarmerApplicationId();

		return farmerApplicationCurrentStageCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerApplicationCurrentStage, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerApplicationCurrentStage, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerApplicationCurrentStage, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FarmerApplicationCurrentStage)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}


	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FarmerApplicationCurrentStage>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private String _uuid;
	private long _farmerCurrentStageId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _currentStage;
	private String _lastFormStage;
	private long _farmerApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FarmerApplicationCurrentStage, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerApplicationCurrentStage)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"farmerCurrentStageId", _farmerCurrentStageId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("currentStage", _currentStage);
		_columnOriginalValues.put("lastFormStage", _lastFormStage);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("farmerCurrentStageId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("currentStage", 256L);

		columnBitmasks.put("lastFormStage", 512L);

		columnBitmasks.put("farmerApplicationId", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerApplicationCurrentStage _escapedModel;

}