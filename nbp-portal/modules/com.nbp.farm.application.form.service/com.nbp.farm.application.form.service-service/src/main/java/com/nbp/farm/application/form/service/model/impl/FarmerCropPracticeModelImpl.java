/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerCropPractice;
import com.nbp.farm.application.form.service.model.FarmerCropPracticeModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerCropPractice service. Represents a row in the &quot;farmer_crop_practice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerCropPracticeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerCropPracticeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerCropPracticeImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerCropPracticeModelImpl
	extends BaseModelImpl<FarmerCropPractice>
	implements FarmerCropPracticeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer crop practice model instance should use the <code>FarmerCropPractice</code> interface instead.
	 */
	public static final String TABLE_NAME = "farmer_crop_practice";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmerCropPracticeId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"crop1landPrepration", Types.VARCHAR},
		{"crop1CropCare", Types.VARCHAR}, {"crop1water", Types.VARCHAR},
		{"crop1postHarvest", Types.VARCHAR}, {"crop02", Types.VARCHAR},
		{"crop03", Types.VARCHAR}, {"cropPracticeCounter", Types.VARCHAR},
		{"farmerApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmerCropPracticeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("crop1landPrepration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crop1CropCare", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crop1water", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crop1postHarvest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crop02", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crop03", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cropPracticeCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table farmer_crop_practice (farmerCropPracticeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,crop1landPrepration VARCHAR(75) null,crop1CropCare VARCHAR(75) null,crop1water VARCHAR(75) null,crop1postHarvest VARCHAR(75) null,crop02 VARCHAR(75) null,crop03 VARCHAR(500) null,cropPracticeCounter VARCHAR(75) null,farmerApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table farmer_crop_practice";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerCropPractice.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY farmer_crop_practice.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerCropPracticeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerCropPracticeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerCropPracticeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerCropPracticeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerCropPractice.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerCropPractice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerCropPractice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerCropPractice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerCropPractice, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerCropPractice)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerCropPractice, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerCropPractice, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerCropPractice)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerCropPractice, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerCropPractice, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerCropPractice>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerCropPractice.class.getClassLoader(), FarmerCropPractice.class,
			ModelWrapper.class);

		try {
			Constructor<FarmerCropPractice> constructor =
				(Constructor<FarmerCropPractice>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmerCropPractice, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmerCropPractice, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerCropPractice, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FarmerCropPractice, Object>>();
		Map<String, BiConsumer<FarmerCropPractice, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<FarmerCropPractice, ?>>();

		attributeGetterFunctions.put(
			"farmerCropPracticeId",
			FarmerCropPractice::getFarmerCropPracticeId);
		attributeSetterBiConsumers.put(
			"farmerCropPracticeId",
			(BiConsumer<FarmerCropPractice, Long>)
				FarmerCropPractice::setFarmerCropPracticeId);
		attributeGetterFunctions.put("groupId", FarmerCropPractice::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerCropPractice, Long>)
				FarmerCropPractice::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmerCropPractice::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerCropPractice, Long>)
				FarmerCropPractice::setCompanyId);
		attributeGetterFunctions.put("userId", FarmerCropPractice::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerCropPractice, Long>)
				FarmerCropPractice::setUserId);
		attributeGetterFunctions.put(
			"userName", FarmerCropPractice::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerCropPractice, String>)
				FarmerCropPractice::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmerCropPractice::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerCropPractice, Date>)
				FarmerCropPractice::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerCropPractice::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerCropPractice, Date>)
				FarmerCropPractice::setModifiedDate);
		attributeGetterFunctions.put(
			"crop1landPrepration", FarmerCropPractice::getCrop1landPrepration);
		attributeSetterBiConsumers.put(
			"crop1landPrepration",
			(BiConsumer<FarmerCropPractice, String>)
				FarmerCropPractice::setCrop1landPrepration);
		attributeGetterFunctions.put(
			"crop1CropCare", FarmerCropPractice::getCrop1CropCare);
		attributeSetterBiConsumers.put(
			"crop1CropCare",
			(BiConsumer<FarmerCropPractice, String>)
				FarmerCropPractice::setCrop1CropCare);
		attributeGetterFunctions.put(
			"crop1water", FarmerCropPractice::getCrop1water);
		attributeSetterBiConsumers.put(
			"crop1water",
			(BiConsumer<FarmerCropPractice, String>)
				FarmerCropPractice::setCrop1water);
		attributeGetterFunctions.put(
			"crop1postHarvest", FarmerCropPractice::getCrop1postHarvest);
		attributeSetterBiConsumers.put(
			"crop1postHarvest",
			(BiConsumer<FarmerCropPractice, String>)
				FarmerCropPractice::setCrop1postHarvest);
		attributeGetterFunctions.put("crop02", FarmerCropPractice::getCrop02);
		attributeSetterBiConsumers.put(
			"crop02",
			(BiConsumer<FarmerCropPractice, String>)
				FarmerCropPractice::setCrop02);
		attributeGetterFunctions.put("crop03", FarmerCropPractice::getCrop03);
		attributeSetterBiConsumers.put(
			"crop03",
			(BiConsumer<FarmerCropPractice, String>)
				FarmerCropPractice::setCrop03);
		attributeGetterFunctions.put(
			"cropPracticeCounter", FarmerCropPractice::getCropPracticeCounter);
		attributeSetterBiConsumers.put(
			"cropPracticeCounter",
			(BiConsumer<FarmerCropPractice, String>)
				FarmerCropPractice::setCropPracticeCounter);
		attributeGetterFunctions.put(
			"farmerApplicationId", FarmerCropPractice::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerCropPractice, Long>)
				FarmerCropPractice::setFarmerApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmerCropPracticeId() {
		return _farmerCropPracticeId;
	}

	@Override
	public void setFarmerCropPracticeId(long farmerCropPracticeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerCropPracticeId = farmerCropPracticeId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCrop1landPrepration() {
		if (_crop1landPrepration == null) {
			return "";
		}
		else {
			return _crop1landPrepration;
		}
	}

	@Override
	public void setCrop1landPrepration(String crop1landPrepration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crop1landPrepration = crop1landPrepration;
	}

	@JSON
	@Override
	public String getCrop1CropCare() {
		if (_crop1CropCare == null) {
			return "";
		}
		else {
			return _crop1CropCare;
		}
	}

	@Override
	public void setCrop1CropCare(String crop1CropCare) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crop1CropCare = crop1CropCare;
	}

	@JSON
	@Override
	public String getCrop1water() {
		if (_crop1water == null) {
			return "";
		}
		else {
			return _crop1water;
		}
	}

	@Override
	public void setCrop1water(String crop1water) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crop1water = crop1water;
	}

	@JSON
	@Override
	public String getCrop1postHarvest() {
		if (_crop1postHarvest == null) {
			return "";
		}
		else {
			return _crop1postHarvest;
		}
	}

	@Override
	public void setCrop1postHarvest(String crop1postHarvest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crop1postHarvest = crop1postHarvest;
	}

	@JSON
	@Override
	public String getCrop02() {
		if (_crop02 == null) {
			return "";
		}
		else {
			return _crop02;
		}
	}

	@Override
	public void setCrop02(String crop02) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crop02 = crop02;
	}

	@JSON
	@Override
	public String getCrop03() {
		if (_crop03 == null) {
			return "";
		}
		else {
			return _crop03;
		}
	}

	@Override
	public void setCrop03(String crop03) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crop03 = crop03;
	}

	@JSON
	@Override
	public String getCropPracticeCounter() {
		if (_cropPracticeCounter == null) {
			return "";
		}
		else {
			return _cropPracticeCounter;
		}
	}

	@Override
	public void setCropPracticeCounter(String cropPracticeCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cropPracticeCounter = cropPracticeCounter;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerCropPractice.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerCropPractice toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerCropPractice>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerCropPracticeImpl farmerCropPracticeImpl =
			new FarmerCropPracticeImpl();

		farmerCropPracticeImpl.setFarmerCropPracticeId(
			getFarmerCropPracticeId());
		farmerCropPracticeImpl.setGroupId(getGroupId());
		farmerCropPracticeImpl.setCompanyId(getCompanyId());
		farmerCropPracticeImpl.setUserId(getUserId());
		farmerCropPracticeImpl.setUserName(getUserName());
		farmerCropPracticeImpl.setCreateDate(getCreateDate());
		farmerCropPracticeImpl.setModifiedDate(getModifiedDate());
		farmerCropPracticeImpl.setCrop1landPrepration(getCrop1landPrepration());
		farmerCropPracticeImpl.setCrop1CropCare(getCrop1CropCare());
		farmerCropPracticeImpl.setCrop1water(getCrop1water());
		farmerCropPracticeImpl.setCrop1postHarvest(getCrop1postHarvest());
		farmerCropPracticeImpl.setCrop02(getCrop02());
		farmerCropPracticeImpl.setCrop03(getCrop03());
		farmerCropPracticeImpl.setCropPracticeCounter(getCropPracticeCounter());
		farmerCropPracticeImpl.setFarmerApplicationId(getFarmerApplicationId());

		farmerCropPracticeImpl.resetOriginalValues();

		return farmerCropPracticeImpl;
	}

	@Override
	public FarmerCropPractice cloneWithOriginalValues() {
		FarmerCropPracticeImpl farmerCropPracticeImpl =
			new FarmerCropPracticeImpl();

		farmerCropPracticeImpl.setFarmerCropPracticeId(
			this.<Long>getColumnOriginalValue("farmerCropPracticeId"));
		farmerCropPracticeImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerCropPracticeImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerCropPracticeImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmerCropPracticeImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerCropPracticeImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerCropPracticeImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerCropPracticeImpl.setCrop1landPrepration(
			this.<String>getColumnOriginalValue("crop1landPrepration"));
		farmerCropPracticeImpl.setCrop1CropCare(
			this.<String>getColumnOriginalValue("crop1CropCare"));
		farmerCropPracticeImpl.setCrop1water(
			this.<String>getColumnOriginalValue("crop1water"));
		farmerCropPracticeImpl.setCrop1postHarvest(
			this.<String>getColumnOriginalValue("crop1postHarvest"));
		farmerCropPracticeImpl.setCrop02(
			this.<String>getColumnOriginalValue("crop02"));
		farmerCropPracticeImpl.setCrop03(
			this.<String>getColumnOriginalValue("crop03"));
		farmerCropPracticeImpl.setCropPracticeCounter(
			this.<String>getColumnOriginalValue("cropPracticeCounter"));
		farmerCropPracticeImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));

		return farmerCropPracticeImpl;
	}

	@Override
	public int compareTo(FarmerCropPractice farmerCropPractice) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), farmerCropPractice.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerCropPractice)) {
			return false;
		}

		FarmerCropPractice farmerCropPractice = (FarmerCropPractice)object;

		long primaryKey = farmerCropPractice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerCropPractice> toCacheModel() {
		FarmerCropPracticeCacheModel farmerCropPracticeCacheModel =
			new FarmerCropPracticeCacheModel();

		farmerCropPracticeCacheModel.farmerCropPracticeId =
			getFarmerCropPracticeId();

		farmerCropPracticeCacheModel.groupId = getGroupId();

		farmerCropPracticeCacheModel.companyId = getCompanyId();

		farmerCropPracticeCacheModel.userId = getUserId();

		farmerCropPracticeCacheModel.userName = getUserName();

		String userName = farmerCropPracticeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerCropPracticeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerCropPracticeCacheModel.createDate = createDate.getTime();
		}
		else {
			farmerCropPracticeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerCropPracticeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			farmerCropPracticeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerCropPracticeCacheModel.crop1landPrepration =
			getCrop1landPrepration();

		String crop1landPrepration =
			farmerCropPracticeCacheModel.crop1landPrepration;

		if ((crop1landPrepration != null) &&
			(crop1landPrepration.length() == 0)) {

			farmerCropPracticeCacheModel.crop1landPrepration = null;
		}

		farmerCropPracticeCacheModel.crop1CropCare = getCrop1CropCare();

		String crop1CropCare = farmerCropPracticeCacheModel.crop1CropCare;

		if ((crop1CropCare != null) && (crop1CropCare.length() == 0)) {
			farmerCropPracticeCacheModel.crop1CropCare = null;
		}

		farmerCropPracticeCacheModel.crop1water = getCrop1water();

		String crop1water = farmerCropPracticeCacheModel.crop1water;

		if ((crop1water != null) && (crop1water.length() == 0)) {
			farmerCropPracticeCacheModel.crop1water = null;
		}

		farmerCropPracticeCacheModel.crop1postHarvest = getCrop1postHarvest();

		String crop1postHarvest = farmerCropPracticeCacheModel.crop1postHarvest;

		if ((crop1postHarvest != null) && (crop1postHarvest.length() == 0)) {
			farmerCropPracticeCacheModel.crop1postHarvest = null;
		}

		farmerCropPracticeCacheModel.crop02 = getCrop02();

		String crop02 = farmerCropPracticeCacheModel.crop02;

		if ((crop02 != null) && (crop02.length() == 0)) {
			farmerCropPracticeCacheModel.crop02 = null;
		}

		farmerCropPracticeCacheModel.crop03 = getCrop03();

		String crop03 = farmerCropPracticeCacheModel.crop03;

		if ((crop03 != null) && (crop03.length() == 0)) {
			farmerCropPracticeCacheModel.crop03 = null;
		}

		farmerCropPracticeCacheModel.cropPracticeCounter =
			getCropPracticeCounter();

		String cropPracticeCounter =
			farmerCropPracticeCacheModel.cropPracticeCounter;

		if ((cropPracticeCounter != null) &&
			(cropPracticeCounter.length() == 0)) {

			farmerCropPracticeCacheModel.cropPracticeCounter = null;
		}

		farmerCropPracticeCacheModel.farmerApplicationId =
			getFarmerApplicationId();

		return farmerCropPracticeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerCropPractice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerCropPractice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerCropPractice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FarmerCropPractice)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmerCropPractice>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _farmerCropPracticeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _crop1landPrepration;
	private String _crop1CropCare;
	private String _crop1water;
	private String _crop1postHarvest;
	private String _crop02;
	private String _crop03;
	private String _cropPracticeCounter;
	private long _farmerApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FarmerCropPractice, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerCropPractice)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"farmerCropPracticeId", _farmerCropPracticeId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("crop1landPrepration", _crop1landPrepration);
		_columnOriginalValues.put("crop1CropCare", _crop1CropCare);
		_columnOriginalValues.put("crop1water", _crop1water);
		_columnOriginalValues.put("crop1postHarvest", _crop1postHarvest);
		_columnOriginalValues.put("crop02", _crop02);
		_columnOriginalValues.put("crop03", _crop03);
		_columnOriginalValues.put("cropPracticeCounter", _cropPracticeCounter);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmerCropPracticeId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("crop1landPrepration", 128L);

		columnBitmasks.put("crop1CropCare", 256L);

		columnBitmasks.put("crop1water", 512L);

		columnBitmasks.put("crop1postHarvest", 1024L);

		columnBitmasks.put("crop02", 2048L);

		columnBitmasks.put("crop03", 4096L);

		columnBitmasks.put("cropPracticeCounter", 8192L);

		columnBitmasks.put("farmerApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerCropPractice _escapedModel;

}