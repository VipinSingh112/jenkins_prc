/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerLivestock;
import com.nbp.farm.application.form.service.model.FarmerLivestockModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerLivestock service. Represents a row in the &quot;farmer_livestock&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerLivestockModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerLivestockImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerLivestockImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerLivestockModelImpl
	extends BaseModelImpl<FarmerLivestock> implements FarmerLivestockModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer livestock model instance should use the <code>FarmerLivestock</code> interface instead.
	 */
	public static final String TABLE_NAME = "farmer_livestock";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmerLiveStockId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"livestockBreed", Types.VARCHAR},
		{"stageOflife", Types.VARCHAR}, {"count", Types.VARCHAR},
		{"colonies", Types.VARCHAR}, {"capacity", Types.VARCHAR},
		{"majorMarket", Types.VARCHAR}, {"majorMarketSold", Types.VARCHAR},
		{"minorMarket", Types.VARCHAR}, {"minorMarketSold", Types.VARCHAR},
		{"remarks", Types.VARCHAR}, {"livestockCounter", Types.VARCHAR},
		{"farmerApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmerLiveStockId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("livestockBreed", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stageOflife", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("count", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("colonies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("majorMarket", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("majorMarketSold", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("minorMarket", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("minorMarketSold", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("livestockCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table farmer_livestock (farmerLiveStockId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,livestockBreed VARCHAR(75) null,stageOflife VARCHAR(75) null,count VARCHAR(75) null,colonies VARCHAR(75) null,capacity VARCHAR(75) null,majorMarket VARCHAR(75) null,majorMarketSold VARCHAR(75) null,minorMarket VARCHAR(75) null,minorMarketSold VARCHAR(75) null,remarks VARCHAR(500) null,livestockCounter VARCHAR(75) null,farmerApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table farmer_livestock";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerLivestock.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY farmer_livestock.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerLivestockModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerLiveStockId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerLiveStockId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerLiveStockId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerLivestock.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerLivestock.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerLivestock, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerLivestock, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerLivestock, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerLivestock)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerLivestock, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerLivestock, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerLivestock)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerLivestock, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerLivestock, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerLivestock>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerLivestock.class.getClassLoader(), FarmerLivestock.class,
			ModelWrapper.class);

		try {
			Constructor<FarmerLivestock> constructor =
				(Constructor<FarmerLivestock>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmerLivestock, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmerLivestock, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerLivestock, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<FarmerLivestock, Object>>();
		Map<String, BiConsumer<FarmerLivestock, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FarmerLivestock, ?>>();

		attributeGetterFunctions.put(
			"farmerLiveStockId", FarmerLivestock::getFarmerLiveStockId);
		attributeSetterBiConsumers.put(
			"farmerLiveStockId",
			(BiConsumer<FarmerLivestock, Long>)
				FarmerLivestock::setFarmerLiveStockId);
		attributeGetterFunctions.put("groupId", FarmerLivestock::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerLivestock, Long>)FarmerLivestock::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmerLivestock::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerLivestock, Long>)FarmerLivestock::setCompanyId);
		attributeGetterFunctions.put("userId", FarmerLivestock::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerLivestock, Long>)FarmerLivestock::setUserId);
		attributeGetterFunctions.put("userName", FarmerLivestock::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerLivestock, String>)FarmerLivestock::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmerLivestock::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerLivestock, Date>)FarmerLivestock::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerLivestock::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerLivestock, Date>)
				FarmerLivestock::setModifiedDate);
		attributeGetterFunctions.put(
			"livestockBreed", FarmerLivestock::getLivestockBreed);
		attributeSetterBiConsumers.put(
			"livestockBreed",
			(BiConsumer<FarmerLivestock, String>)
				FarmerLivestock::setLivestockBreed);
		attributeGetterFunctions.put(
			"stageOflife", FarmerLivestock::getStageOflife);
		attributeSetterBiConsumers.put(
			"stageOflife",
			(BiConsumer<FarmerLivestock, String>)
				FarmerLivestock::setStageOflife);
		attributeGetterFunctions.put("count", FarmerLivestock::getCount);
		attributeSetterBiConsumers.put(
			"count",
			(BiConsumer<FarmerLivestock, String>)FarmerLivestock::setCount);
		attributeGetterFunctions.put("colonies", FarmerLivestock::getColonies);
		attributeSetterBiConsumers.put(
			"colonies",
			(BiConsumer<FarmerLivestock, String>)FarmerLivestock::setColonies);
		attributeGetterFunctions.put("capacity", FarmerLivestock::getCapacity);
		attributeSetterBiConsumers.put(
			"capacity",
			(BiConsumer<FarmerLivestock, String>)FarmerLivestock::setCapacity);
		attributeGetterFunctions.put(
			"majorMarket", FarmerLivestock::getMajorMarket);
		attributeSetterBiConsumers.put(
			"majorMarket",
			(BiConsumer<FarmerLivestock, String>)
				FarmerLivestock::setMajorMarket);
		attributeGetterFunctions.put(
			"majorMarketSold", FarmerLivestock::getMajorMarketSold);
		attributeSetterBiConsumers.put(
			"majorMarketSold",
			(BiConsumer<FarmerLivestock, String>)
				FarmerLivestock::setMajorMarketSold);
		attributeGetterFunctions.put(
			"minorMarket", FarmerLivestock::getMinorMarket);
		attributeSetterBiConsumers.put(
			"minorMarket",
			(BiConsumer<FarmerLivestock, String>)
				FarmerLivestock::setMinorMarket);
		attributeGetterFunctions.put(
			"minorMarketSold", FarmerLivestock::getMinorMarketSold);
		attributeSetterBiConsumers.put(
			"minorMarketSold",
			(BiConsumer<FarmerLivestock, String>)
				FarmerLivestock::setMinorMarketSold);
		attributeGetterFunctions.put("remarks", FarmerLivestock::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<FarmerLivestock, String>)FarmerLivestock::setRemarks);
		attributeGetterFunctions.put(
			"livestockCounter", FarmerLivestock::getLivestockCounter);
		attributeSetterBiConsumers.put(
			"livestockCounter",
			(BiConsumer<FarmerLivestock, String>)
				FarmerLivestock::setLivestockCounter);
		attributeGetterFunctions.put(
			"farmerApplicationId", FarmerLivestock::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerLivestock, Long>)
				FarmerLivestock::setFarmerApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmerLiveStockId() {
		return _farmerLiveStockId;
	}

	@Override
	public void setFarmerLiveStockId(long farmerLiveStockId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerLiveStockId = farmerLiveStockId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLivestockBreed() {
		if (_livestockBreed == null) {
			return "";
		}
		else {
			return _livestockBreed;
		}
	}

	@Override
	public void setLivestockBreed(String livestockBreed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_livestockBreed = livestockBreed;
	}

	@JSON
	@Override
	public String getStageOflife() {
		if (_stageOflife == null) {
			return "";
		}
		else {
			return _stageOflife;
		}
	}

	@Override
	public void setStageOflife(String stageOflife) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageOflife = stageOflife;
	}

	@JSON
	@Override
	public String getCount() {
		if (_count == null) {
			return "";
		}
		else {
			return _count;
		}
	}

	@Override
	public void setCount(String count) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_count = count;
	}

	@JSON
	@Override
	public String getColonies() {
		if (_colonies == null) {
			return "";
		}
		else {
			return _colonies;
		}
	}

	@Override
	public void setColonies(String colonies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_colonies = colonies;
	}

	@JSON
	@Override
	public String getCapacity() {
		if (_capacity == null) {
			return "";
		}
		else {
			return _capacity;
		}
	}

	@Override
	public void setCapacity(String capacity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capacity = capacity;
	}

	@JSON
	@Override
	public String getMajorMarket() {
		if (_majorMarket == null) {
			return "";
		}
		else {
			return _majorMarket;
		}
	}

	@Override
	public void setMajorMarket(String majorMarket) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_majorMarket = majorMarket;
	}

	@JSON
	@Override
	public String getMajorMarketSold() {
		if (_majorMarketSold == null) {
			return "";
		}
		else {
			return _majorMarketSold;
		}
	}

	@Override
	public void setMajorMarketSold(String majorMarketSold) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_majorMarketSold = majorMarketSold;
	}

	@JSON
	@Override
	public String getMinorMarket() {
		if (_minorMarket == null) {
			return "";
		}
		else {
			return _minorMarket;
		}
	}

	@Override
	public void setMinorMarket(String minorMarket) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minorMarket = minorMarket;
	}

	@JSON
	@Override
	public String getMinorMarketSold() {
		if (_minorMarketSold == null) {
			return "";
		}
		else {
			return _minorMarketSold;
		}
	}

	@Override
	public void setMinorMarketSold(String minorMarketSold) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minorMarketSold = minorMarketSold;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public String getLivestockCounter() {
		if (_livestockCounter == null) {
			return "";
		}
		else {
			return _livestockCounter;
		}
	}

	@Override
	public void setLivestockCounter(String livestockCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_livestockCounter = livestockCounter;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerLivestock.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerLivestock toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerLivestock>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerLivestockImpl farmerLivestockImpl = new FarmerLivestockImpl();

		farmerLivestockImpl.setFarmerLiveStockId(getFarmerLiveStockId());
		farmerLivestockImpl.setGroupId(getGroupId());
		farmerLivestockImpl.setCompanyId(getCompanyId());
		farmerLivestockImpl.setUserId(getUserId());
		farmerLivestockImpl.setUserName(getUserName());
		farmerLivestockImpl.setCreateDate(getCreateDate());
		farmerLivestockImpl.setModifiedDate(getModifiedDate());
		farmerLivestockImpl.setLivestockBreed(getLivestockBreed());
		farmerLivestockImpl.setStageOflife(getStageOflife());
		farmerLivestockImpl.setCount(getCount());
		farmerLivestockImpl.setColonies(getColonies());
		farmerLivestockImpl.setCapacity(getCapacity());
		farmerLivestockImpl.setMajorMarket(getMajorMarket());
		farmerLivestockImpl.setMajorMarketSold(getMajorMarketSold());
		farmerLivestockImpl.setMinorMarket(getMinorMarket());
		farmerLivestockImpl.setMinorMarketSold(getMinorMarketSold());
		farmerLivestockImpl.setRemarks(getRemarks());
		farmerLivestockImpl.setLivestockCounter(getLivestockCounter());
		farmerLivestockImpl.setFarmerApplicationId(getFarmerApplicationId());

		farmerLivestockImpl.resetOriginalValues();

		return farmerLivestockImpl;
	}

	@Override
	public FarmerLivestock cloneWithOriginalValues() {
		FarmerLivestockImpl farmerLivestockImpl = new FarmerLivestockImpl();

		farmerLivestockImpl.setFarmerLiveStockId(
			this.<Long>getColumnOriginalValue("farmerLiveStockId"));
		farmerLivestockImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerLivestockImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerLivestockImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmerLivestockImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerLivestockImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerLivestockImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerLivestockImpl.setLivestockBreed(
			this.<String>getColumnOriginalValue("livestockBreed"));
		farmerLivestockImpl.setStageOflife(
			this.<String>getColumnOriginalValue("stageOflife"));
		farmerLivestockImpl.setCount(
			this.<String>getColumnOriginalValue("count"));
		farmerLivestockImpl.setColonies(
			this.<String>getColumnOriginalValue("colonies"));
		farmerLivestockImpl.setCapacity(
			this.<String>getColumnOriginalValue("capacity"));
		farmerLivestockImpl.setMajorMarket(
			this.<String>getColumnOriginalValue("majorMarket"));
		farmerLivestockImpl.setMajorMarketSold(
			this.<String>getColumnOriginalValue("majorMarketSold"));
		farmerLivestockImpl.setMinorMarket(
			this.<String>getColumnOriginalValue("minorMarket"));
		farmerLivestockImpl.setMinorMarketSold(
			this.<String>getColumnOriginalValue("minorMarketSold"));
		farmerLivestockImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		farmerLivestockImpl.setLivestockCounter(
			this.<String>getColumnOriginalValue("livestockCounter"));
		farmerLivestockImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));

		return farmerLivestockImpl;
	}

	@Override
	public int compareTo(FarmerLivestock farmerLivestock) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), farmerLivestock.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerLivestock)) {
			return false;
		}

		FarmerLivestock farmerLivestock = (FarmerLivestock)object;

		long primaryKey = farmerLivestock.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerLivestock> toCacheModel() {
		FarmerLivestockCacheModel farmerLivestockCacheModel =
			new FarmerLivestockCacheModel();

		farmerLivestockCacheModel.farmerLiveStockId = getFarmerLiveStockId();

		farmerLivestockCacheModel.groupId = getGroupId();

		farmerLivestockCacheModel.companyId = getCompanyId();

		farmerLivestockCacheModel.userId = getUserId();

		farmerLivestockCacheModel.userName = getUserName();

		String userName = farmerLivestockCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerLivestockCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerLivestockCacheModel.createDate = createDate.getTime();
		}
		else {
			farmerLivestockCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerLivestockCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			farmerLivestockCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerLivestockCacheModel.livestockBreed = getLivestockBreed();

		String livestockBreed = farmerLivestockCacheModel.livestockBreed;

		if ((livestockBreed != null) && (livestockBreed.length() == 0)) {
			farmerLivestockCacheModel.livestockBreed = null;
		}

		farmerLivestockCacheModel.stageOflife = getStageOflife();

		String stageOflife = farmerLivestockCacheModel.stageOflife;

		if ((stageOflife != null) && (stageOflife.length() == 0)) {
			farmerLivestockCacheModel.stageOflife = null;
		}

		farmerLivestockCacheModel.count = getCount();

		String count = farmerLivestockCacheModel.count;

		if ((count != null) && (count.length() == 0)) {
			farmerLivestockCacheModel.count = null;
		}

		farmerLivestockCacheModel.colonies = getColonies();

		String colonies = farmerLivestockCacheModel.colonies;

		if ((colonies != null) && (colonies.length() == 0)) {
			farmerLivestockCacheModel.colonies = null;
		}

		farmerLivestockCacheModel.capacity = getCapacity();

		String capacity = farmerLivestockCacheModel.capacity;

		if ((capacity != null) && (capacity.length() == 0)) {
			farmerLivestockCacheModel.capacity = null;
		}

		farmerLivestockCacheModel.majorMarket = getMajorMarket();

		String majorMarket = farmerLivestockCacheModel.majorMarket;

		if ((majorMarket != null) && (majorMarket.length() == 0)) {
			farmerLivestockCacheModel.majorMarket = null;
		}

		farmerLivestockCacheModel.majorMarketSold = getMajorMarketSold();

		String majorMarketSold = farmerLivestockCacheModel.majorMarketSold;

		if ((majorMarketSold != null) && (majorMarketSold.length() == 0)) {
			farmerLivestockCacheModel.majorMarketSold = null;
		}

		farmerLivestockCacheModel.minorMarket = getMinorMarket();

		String minorMarket = farmerLivestockCacheModel.minorMarket;

		if ((minorMarket != null) && (minorMarket.length() == 0)) {
			farmerLivestockCacheModel.minorMarket = null;
		}

		farmerLivestockCacheModel.minorMarketSold = getMinorMarketSold();

		String minorMarketSold = farmerLivestockCacheModel.minorMarketSold;

		if ((minorMarketSold != null) && (minorMarketSold.length() == 0)) {
			farmerLivestockCacheModel.minorMarketSold = null;
		}

		farmerLivestockCacheModel.remarks = getRemarks();

		String remarks = farmerLivestockCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			farmerLivestockCacheModel.remarks = null;
		}

		farmerLivestockCacheModel.livestockCounter = getLivestockCounter();

		String livestockCounter = farmerLivestockCacheModel.livestockCounter;

		if ((livestockCounter != null) && (livestockCounter.length() == 0)) {
			farmerLivestockCacheModel.livestockCounter = null;
		}

		farmerLivestockCacheModel.farmerApplicationId =
			getFarmerApplicationId();

		return farmerLivestockCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerLivestock, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerLivestock, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerLivestock, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FarmerLivestock)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}


	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmerLivestock>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _farmerLiveStockId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _livestockBreed;
	private String _stageOflife;
	private String _count;
	private String _colonies;
	private String _capacity;
	private String _majorMarket;
	private String _majorMarketSold;
	private String _minorMarket;
	private String _minorMarketSold;
	private String _remarks;
	private String _livestockCounter;
	private long _farmerApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FarmerLivestock, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerLivestock)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("farmerLiveStockId", _farmerLiveStockId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("livestockBreed", _livestockBreed);
		_columnOriginalValues.put("stageOflife", _stageOflife);
		_columnOriginalValues.put("count", _count);
		_columnOriginalValues.put("colonies", _colonies);
		_columnOriginalValues.put("capacity", _capacity);
		_columnOriginalValues.put("majorMarket", _majorMarket);
		_columnOriginalValues.put("majorMarketSold", _majorMarketSold);
		_columnOriginalValues.put("minorMarket", _minorMarket);
		_columnOriginalValues.put("minorMarketSold", _minorMarketSold);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("livestockCounter", _livestockCounter);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmerLiveStockId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("livestockBreed", 128L);

		columnBitmasks.put("stageOflife", 256L);

		columnBitmasks.put("count", 512L);

		columnBitmasks.put("colonies", 1024L);

		columnBitmasks.put("capacity", 2048L);

		columnBitmasks.put("majorMarket", 4096L);

		columnBitmasks.put("majorMarketSold", 8192L);

		columnBitmasks.put("minorMarket", 16384L);

		columnBitmasks.put("minorMarketSold", 32768L);

		columnBitmasks.put("remarks", 65536L);

		columnBitmasks.put("livestockCounter", 131072L);

		columnBitmasks.put("farmerApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerLivestock _escapedModel;

}