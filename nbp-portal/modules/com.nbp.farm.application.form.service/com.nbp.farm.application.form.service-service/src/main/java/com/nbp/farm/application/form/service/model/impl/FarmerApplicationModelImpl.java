/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerApplication;
import com.nbp.farm.application.form.service.model.FarmerApplicationModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerApplication service. Represents a row in the &quot;nbp_farmer_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerApplicationModelImpl
	extends BaseModelImpl<FarmerApplication> implements FarmerApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer application model instance should use the <code>FarmerApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_farmer_application";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmerApplicationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"requestType", Types.VARCHAR},
		{"perishLocal", Types.VARCHAR}, {"farmType", Types.VARCHAR},
		{"farmParishLocal", Types.VARCHAR}, {"entityId", Types.VARCHAR},
		{"status", Types.INTEGER}, {"applicationNumber", Types.VARCHAR},
		{"expiredLicenseappNumber", Types.VARCHAR}, {"caseld", Types.VARCHAR},
		{"icmDocumentsPath", Types.VARCHAR}, {"PdfFileEntryId", Types.BIGINT},
		{"appCurrentStageName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("requestType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("perishLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmParishLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredLicenseappNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseld", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentsPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_farmer_application (farmerApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,requestType VARCHAR(75) null,perishLocal VARCHAR(75) null,farmType VARCHAR(75) null,farmParishLocal VARCHAR(75) null,entityId VARCHAR(75) null,status INTEGER,applicationNumber VARCHAR(75) null,expiredLicenseappNumber VARCHAR(75) null,caseld VARCHAR(500) null,icmDocumentsPath VARCHAR(500) null,PdfFileEntryId LONG,appCurrentStageName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_farmer_application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_farmer_application.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASELD_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPIREDLICENSEAPPNUMBER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REQUESTTYPE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerApplication.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerApplication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerApplication, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerApplication, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerApplication>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerApplication.class.getClassLoader(), FarmerApplication.class,
			ModelWrapper.class);

		try {
			Constructor<FarmerApplication> constructor =
				(Constructor<FarmerApplication>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmerApplication, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmerApplication, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerApplication, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FarmerApplication, Object>>();
		Map<String, BiConsumer<FarmerApplication, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<FarmerApplication, ?>>();

		attributeGetterFunctions.put(
			"farmerApplicationId", FarmerApplication::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerApplication, Long>)
				FarmerApplication::setFarmerApplicationId);
		attributeGetterFunctions.put("groupId", FarmerApplication::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerApplication, Long>)FarmerApplication::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmerApplication::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerApplication, Long>)
				FarmerApplication::setCompanyId);
		attributeGetterFunctions.put("userId", FarmerApplication::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerApplication, Long>)FarmerApplication::setUserId);
		attributeGetterFunctions.put(
			"userName", FarmerApplication::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmerApplication::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerApplication, Date>)
				FarmerApplication::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerApplication::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerApplication, Date>)
				FarmerApplication::setModifiedDate);
		attributeGetterFunctions.put(
			"requestType", FarmerApplication::getRequestType);
		attributeSetterBiConsumers.put(
			"requestType",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setRequestType);
		attributeGetterFunctions.put(
			"perishLocal", FarmerApplication::getPerishLocal);
		attributeSetterBiConsumers.put(
			"perishLocal",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setPerishLocal);
		attributeGetterFunctions.put(
			"farmType", FarmerApplication::getFarmType);
		attributeSetterBiConsumers.put(
			"farmType",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setFarmType);
		attributeGetterFunctions.put(
			"farmParishLocal", FarmerApplication::getFarmParishLocal);
		attributeSetterBiConsumers.put(
			"farmParishLocal",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setFarmParishLocal);
		attributeGetterFunctions.put(
			"entityId", FarmerApplication::getEntityId);
		attributeSetterBiConsumers.put(
			"entityId",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setEntityId);
		attributeGetterFunctions.put("status", FarmerApplication::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<FarmerApplication, Integer>)
				FarmerApplication::setStatus);
		attributeGetterFunctions.put(
			"applicationNumber", FarmerApplication::getApplicationNumber);
		attributeSetterBiConsumers.put(
			"applicationNumber",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setApplicationNumber);
		attributeGetterFunctions.put(
			"expiredLicenseappNumber",
			FarmerApplication::getExpiredLicenseappNumber);
		attributeSetterBiConsumers.put(
			"expiredLicenseappNumber",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setExpiredLicenseappNumber);
		attributeGetterFunctions.put("caseld", FarmerApplication::getCaseld);
		attributeSetterBiConsumers.put(
			"caseld",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setCaseld);
		attributeGetterFunctions.put(
			"icmDocumentsPath", FarmerApplication::getIcmDocumentsPath);
		attributeSetterBiConsumers.put(
			"icmDocumentsPath",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setIcmDocumentsPath);
		attributeGetterFunctions.put(
			"PdfFileEntryId", FarmerApplication::getPdfFileEntryId);
		attributeSetterBiConsumers.put(
			"PdfFileEntryId",
			(BiConsumer<FarmerApplication, Long>)
				FarmerApplication::setPdfFileEntryId);
		attributeGetterFunctions.put(
			"appCurrentStageName", FarmerApplication::getAppCurrentStageName);
		attributeSetterBiConsumers.put(
			"appCurrentStageName",
			(BiConsumer<FarmerApplication, String>)
				FarmerApplication::setAppCurrentStageName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRequestType() {
		if (_requestType == null) {
			return "";
		}
		else {
			return _requestType;
		}
	}

	@Override
	public void setRequestType(String requestType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestType = requestType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRequestType() {
		return getColumnOriginalValue("requestType");
	}

	@JSON
	@Override
	public String getPerishLocal() {
		if (_perishLocal == null) {
			return "";
		}
		else {
			return _perishLocal;
		}
	}

	@Override
	public void setPerishLocal(String perishLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_perishLocal = perishLocal;
	}

	@JSON
	@Override
	public String getFarmType() {
		if (_farmType == null) {
			return "";
		}
		else {
			return _farmType;
		}
	}

	@Override
	public void setFarmType(String farmType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmType = farmType;
	}

	@JSON
	@Override
	public String getFarmParishLocal() {
		if (_farmParishLocal == null) {
			return "";
		}
		else {
			return _farmParishLocal;
		}
	}

	@Override
	public void setFarmParishLocal(String farmParishLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmParishLocal = farmParishLocal;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getExpiredLicenseappNumber() {
		if (_expiredLicenseappNumber == null) {
			return "";
		}
		else {
			return _expiredLicenseappNumber;
		}
	}

	@Override
	public void setExpiredLicenseappNumber(String expiredLicenseappNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredLicenseappNumber = expiredLicenseappNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExpiredLicenseappNumber() {
		return getColumnOriginalValue("expiredLicenseappNumber");
	}

	@JSON
	@Override
	public String getCaseld() {
		if (_caseld == null) {
			return "";
		}
		else {
			return _caseld;
		}
	}

	@Override
	public void setCaseld(String caseld) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseld = caseld;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseld() {
		return getColumnOriginalValue("caseld");
	}

	@JSON
	@Override
	public String getIcmDocumentsPath() {
		if (_icmDocumentsPath == null) {
			return "";
		}
		else {
			return _icmDocumentsPath;
		}
	}

	@Override
	public void setIcmDocumentsPath(String icmDocumentsPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentsPath = icmDocumentsPath;
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _PdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long PdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_PdfFileEntryId = PdfFileEntryId;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerApplication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerApplicationImpl farmerApplicationImpl =
			new FarmerApplicationImpl();

		farmerApplicationImpl.setFarmerApplicationId(getFarmerApplicationId());
		farmerApplicationImpl.setGroupId(getGroupId());
		farmerApplicationImpl.setCompanyId(getCompanyId());
		farmerApplicationImpl.setUserId(getUserId());
		farmerApplicationImpl.setUserName(getUserName());
		farmerApplicationImpl.setCreateDate(getCreateDate());
		farmerApplicationImpl.setModifiedDate(getModifiedDate());
		farmerApplicationImpl.setRequestType(getRequestType());
		farmerApplicationImpl.setPerishLocal(getPerishLocal());
		farmerApplicationImpl.setFarmType(getFarmType());
		farmerApplicationImpl.setFarmParishLocal(getFarmParishLocal());
		farmerApplicationImpl.setEntityId(getEntityId());
		farmerApplicationImpl.setStatus(getStatus());
		farmerApplicationImpl.setApplicationNumber(getApplicationNumber());
		farmerApplicationImpl.setExpiredLicenseappNumber(
			getExpiredLicenseappNumber());
		farmerApplicationImpl.setCaseld(getCaseld());
		farmerApplicationImpl.setIcmDocumentsPath(getIcmDocumentsPath());
		farmerApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		farmerApplicationImpl.setAppCurrentStageName(getAppCurrentStageName());

		farmerApplicationImpl.resetOriginalValues();

		return farmerApplicationImpl;
	}

	@Override
	public FarmerApplication cloneWithOriginalValues() {
		FarmerApplicationImpl farmerApplicationImpl =
			new FarmerApplicationImpl();

		farmerApplicationImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
		farmerApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmerApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerApplicationImpl.setRequestType(
			this.<String>getColumnOriginalValue("requestType"));
		farmerApplicationImpl.setPerishLocal(
			this.<String>getColumnOriginalValue("perishLocal"));
		farmerApplicationImpl.setFarmType(
			this.<String>getColumnOriginalValue("farmType"));
		farmerApplicationImpl.setFarmParishLocal(
			this.<String>getColumnOriginalValue("farmParishLocal"));
		farmerApplicationImpl.setEntityId(
			this.<String>getColumnOriginalValue("entityId"));
		farmerApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		farmerApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		farmerApplicationImpl.setExpiredLicenseappNumber(
			this.<String>getColumnOriginalValue("expiredLicenseappNumber"));
		farmerApplicationImpl.setCaseld(
			this.<String>getColumnOriginalValue("caseld"));
		farmerApplicationImpl.setIcmDocumentsPath(
			this.<String>getColumnOriginalValue("icmDocumentsPath"));
		farmerApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("PdfFileEntryId"));
		farmerApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));

		return farmerApplicationImpl;
	}

	@Override
	public int compareTo(FarmerApplication farmerApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), farmerApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerApplication)) {
			return false;
		}

		FarmerApplication farmerApplication = (FarmerApplication)object;

		long primaryKey = farmerApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerApplication> toCacheModel() {
		FarmerApplicationCacheModel farmerApplicationCacheModel =
			new FarmerApplicationCacheModel();

		farmerApplicationCacheModel.farmerApplicationId =
			getFarmerApplicationId();

		farmerApplicationCacheModel.groupId = getGroupId();

		farmerApplicationCacheModel.companyId = getCompanyId();

		farmerApplicationCacheModel.userId = getUserId();

		farmerApplicationCacheModel.userName = getUserName();

		String userName = farmerApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			farmerApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			farmerApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerApplicationCacheModel.requestType = getRequestType();

		String requestType = farmerApplicationCacheModel.requestType;

		if ((requestType != null) && (requestType.length() == 0)) {
			farmerApplicationCacheModel.requestType = null;
		}

		farmerApplicationCacheModel.perishLocal = getPerishLocal();

		String perishLocal = farmerApplicationCacheModel.perishLocal;

		if ((perishLocal != null) && (perishLocal.length() == 0)) {
			farmerApplicationCacheModel.perishLocal = null;
		}

		farmerApplicationCacheModel.farmType = getFarmType();

		String farmType = farmerApplicationCacheModel.farmType;

		if ((farmType != null) && (farmType.length() == 0)) {
			farmerApplicationCacheModel.farmType = null;
		}

		farmerApplicationCacheModel.farmParishLocal = getFarmParishLocal();

		String farmParishLocal = farmerApplicationCacheModel.farmParishLocal;

		if ((farmParishLocal != null) && (farmParishLocal.length() == 0)) {
			farmerApplicationCacheModel.farmParishLocal = null;
		}

		farmerApplicationCacheModel.entityId = getEntityId();

		String entityId = farmerApplicationCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			farmerApplicationCacheModel.entityId = null;
		}

		farmerApplicationCacheModel.status = getStatus();

		farmerApplicationCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber =
			farmerApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			farmerApplicationCacheModel.applicationNumber = null;
		}

		farmerApplicationCacheModel.expiredLicenseappNumber =
			getExpiredLicenseappNumber();

		String expiredLicenseappNumber =
			farmerApplicationCacheModel.expiredLicenseappNumber;

		if ((expiredLicenseappNumber != null) &&
			(expiredLicenseappNumber.length() == 0)) {

			farmerApplicationCacheModel.expiredLicenseappNumber = null;
		}

		farmerApplicationCacheModel.caseld = getCaseld();

		String caseld = farmerApplicationCacheModel.caseld;

		if ((caseld != null) && (caseld.length() == 0)) {
			farmerApplicationCacheModel.caseld = null;
		}

		farmerApplicationCacheModel.icmDocumentsPath = getIcmDocumentsPath();

		String icmDocumentsPath = farmerApplicationCacheModel.icmDocumentsPath;

		if ((icmDocumentsPath != null) && (icmDocumentsPath.length() == 0)) {
			farmerApplicationCacheModel.icmDocumentsPath = null;
		}

		farmerApplicationCacheModel.PdfFileEntryId = getPdfFileEntryId();

		farmerApplicationCacheModel.appCurrentStageName =
			getAppCurrentStageName();

		String appCurrentStageName =
			farmerApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			farmerApplicationCacheModel.appCurrentStageName = null;
		}

		return farmerApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FarmerApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	
	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmerApplication>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _farmerApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _requestType;
	private String _perishLocal;
	private String _farmType;
	private String _farmParishLocal;
	private String _entityId;
	private int _status;
	private String _applicationNumber;
	private String _expiredLicenseappNumber;
	private String _caseld;
	private String _icmDocumentsPath;
	private long _PdfFileEntryId;
	private String _appCurrentStageName;

	public <T> T getColumnValue(String columnName) {
		Function<FarmerApplication, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("requestType", _requestType);
		_columnOriginalValues.put("perishLocal", _perishLocal);
		_columnOriginalValues.put("farmType", _farmType);
		_columnOriginalValues.put("farmParishLocal", _farmParishLocal);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"expiredLicenseappNumber", _expiredLicenseappNumber);
		_columnOriginalValues.put("caseld", _caseld);
		_columnOriginalValues.put("icmDocumentsPath", _icmDocumentsPath);
		_columnOriginalValues.put("PdfFileEntryId", _PdfFileEntryId);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmerApplicationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("requestType", 128L);

		columnBitmasks.put("perishLocal", 256L);

		columnBitmasks.put("farmType", 512L);

		columnBitmasks.put("farmParishLocal", 1024L);

		columnBitmasks.put("entityId", 2048L);

		columnBitmasks.put("status", 4096L);

		columnBitmasks.put("applicationNumber", 8192L);

		columnBitmasks.put("expiredLicenseappNumber", 16384L);

		columnBitmasks.put("caseld", 32768L);

		columnBitmasks.put("icmDocumentsPath", 65536L);

		columnBitmasks.put("PdfFileEntryId", 131072L);

		columnBitmasks.put("appCurrentStageName", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerApplication _escapedModel;

}