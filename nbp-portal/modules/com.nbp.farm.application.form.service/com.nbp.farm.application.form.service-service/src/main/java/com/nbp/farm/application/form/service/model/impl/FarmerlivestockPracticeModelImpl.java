/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerlivestockPractice;
import com.nbp.farm.application.form.service.model.FarmerlivestockPracticeModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerlivestockPractice service. Represents a row in the &quot;farmer_livestock_practice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerlivestockPracticeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerlivestockPracticeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerlivestockPracticeImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerlivestockPracticeModelImpl
	extends BaseModelImpl<FarmerlivestockPractice>
	implements FarmerlivestockPracticeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmerlivestock practice model instance should use the <code>FarmerlivestockPractice</code> interface instead.
	 */
	public static final String TABLE_NAME = "farmer_livestock_practice";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmerLivestockPracticeId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"husbandry", Types.VARCHAR},
		{"liveStockCare", Types.VARCHAR}, {"nutrient", Types.VARCHAR},
		{"water", Types.VARCHAR}, {"postHarvest", Types.VARCHAR},
		{"remarks", Types.VARCHAR}, {"livestockPracticeCounter", Types.VARCHAR},
		{"farmerApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmerLivestockPracticeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("husbandry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("liveStockCare", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nutrient", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("water", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postHarvest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("livestockPracticeCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table farmer_livestock_practice (farmerLivestockPracticeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,husbandry VARCHAR(75) null,liveStockCare VARCHAR(75) null,nutrient VARCHAR(75) null,water VARCHAR(75) null,postHarvest VARCHAR(75) null,remarks VARCHAR(500) null,livestockPracticeCounter VARCHAR(75) null,farmerApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table farmer_livestock_practice";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerlivestockPractice.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY farmer_livestock_practice.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerlivestockPracticeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerLivestockPracticeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerLivestockPracticeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerLivestockPracticeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerlivestockPractice.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerlivestockPractice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerlivestockPractice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerlivestockPractice, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerlivestockPractice, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerlivestockPractice)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerlivestockPractice, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerlivestockPractice, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerlivestockPractice)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerlivestockPractice, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerlivestockPractice, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerlivestockPractice>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerlivestockPractice.class.getClassLoader(),
			FarmerlivestockPractice.class, ModelWrapper.class);

		try {
			Constructor<FarmerlivestockPractice> constructor =
				(Constructor<FarmerlivestockPractice>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmerlivestockPractice, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<FarmerlivestockPractice, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerlivestockPractice, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FarmerlivestockPractice, Object>>();
		Map<String, BiConsumer<FarmerlivestockPractice, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<FarmerlivestockPractice, ?>>();

		attributeGetterFunctions.put(
			"farmerLivestockPracticeId",
			FarmerlivestockPractice::getFarmerLivestockPracticeId);
		attributeSetterBiConsumers.put(
			"farmerLivestockPracticeId",
			(BiConsumer<FarmerlivestockPractice, Long>)
				FarmerlivestockPractice::setFarmerLivestockPracticeId);
		attributeGetterFunctions.put(
			"groupId", FarmerlivestockPractice::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerlivestockPractice, Long>)
				FarmerlivestockPractice::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmerlivestockPractice::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerlivestockPractice, Long>)
				FarmerlivestockPractice::setCompanyId);
		attributeGetterFunctions.put(
			"userId", FarmerlivestockPractice::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerlivestockPractice, Long>)
				FarmerlivestockPractice::setUserId);
		attributeGetterFunctions.put(
			"userName", FarmerlivestockPractice::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerlivestockPractice, String>)
				FarmerlivestockPractice::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmerlivestockPractice::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerlivestockPractice, Date>)
				FarmerlivestockPractice::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerlivestockPractice::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerlivestockPractice, Date>)
				FarmerlivestockPractice::setModifiedDate);
		attributeGetterFunctions.put(
			"husbandry", FarmerlivestockPractice::getHusbandry);
		attributeSetterBiConsumers.put(
			"husbandry",
			(BiConsumer<FarmerlivestockPractice, String>)
				FarmerlivestockPractice::setHusbandry);
		attributeGetterFunctions.put(
			"liveStockCare", FarmerlivestockPractice::getLiveStockCare);
		attributeSetterBiConsumers.put(
			"liveStockCare",
			(BiConsumer<FarmerlivestockPractice, String>)
				FarmerlivestockPractice::setLiveStockCare);
		attributeGetterFunctions.put(
			"nutrient", FarmerlivestockPractice::getNutrient);
		attributeSetterBiConsumers.put(
			"nutrient",
			(BiConsumer<FarmerlivestockPractice, String>)
				FarmerlivestockPractice::setNutrient);
		attributeGetterFunctions.put(
			"water", FarmerlivestockPractice::getWater);
		attributeSetterBiConsumers.put(
			"water",
			(BiConsumer<FarmerlivestockPractice, String>)
				FarmerlivestockPractice::setWater);
		attributeGetterFunctions.put(
			"postHarvest", FarmerlivestockPractice::getPostHarvest);
		attributeSetterBiConsumers.put(
			"postHarvest",
			(BiConsumer<FarmerlivestockPractice, String>)
				FarmerlivestockPractice::setPostHarvest);
		attributeGetterFunctions.put(
			"remarks", FarmerlivestockPractice::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<FarmerlivestockPractice, String>)
				FarmerlivestockPractice::setRemarks);
		attributeGetterFunctions.put(
			"livestockPracticeCounter",
			FarmerlivestockPractice::getLivestockPracticeCounter);
		attributeSetterBiConsumers.put(
			"livestockPracticeCounter",
			(BiConsumer<FarmerlivestockPractice, String>)
				FarmerlivestockPractice::setLivestockPracticeCounter);
		attributeGetterFunctions.put(
			"farmerApplicationId",
			FarmerlivestockPractice::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerlivestockPractice, Long>)
				FarmerlivestockPractice::setFarmerApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmerLivestockPracticeId() {
		return _farmerLivestockPracticeId;
	}

	@Override
	public void setFarmerLivestockPracticeId(long farmerLivestockPracticeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerLivestockPracticeId = farmerLivestockPracticeId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getHusbandry() {
		if (_husbandry == null) {
			return "";
		}
		else {
			return _husbandry;
		}
	}

	@Override
	public void setHusbandry(String husbandry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_husbandry = husbandry;
	}

	@JSON
	@Override
	public String getLiveStockCare() {
		if (_liveStockCare == null) {
			return "";
		}
		else {
			return _liveStockCare;
		}
	}

	@Override
	public void setLiveStockCare(String liveStockCare) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_liveStockCare = liveStockCare;
	}

	@JSON
	@Override
	public String getNutrient() {
		if (_nutrient == null) {
			return "";
		}
		else {
			return _nutrient;
		}
	}

	@Override
	public void setNutrient(String nutrient) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nutrient = nutrient;
	}

	@JSON
	@Override
	public String getWater() {
		if (_water == null) {
			return "";
		}
		else {
			return _water;
		}
	}

	@Override
	public void setWater(String water) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_water = water;
	}

	@JSON
	@Override
	public String getPostHarvest() {
		if (_postHarvest == null) {
			return "";
		}
		else {
			return _postHarvest;
		}
	}

	@Override
	public void setPostHarvest(String postHarvest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postHarvest = postHarvest;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public String getLivestockPracticeCounter() {
		if (_livestockPracticeCounter == null) {
			return "";
		}
		else {
			return _livestockPracticeCounter;
		}
	}

	@Override
	public void setLivestockPracticeCounter(String livestockPracticeCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_livestockPracticeCounter = livestockPracticeCounter;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerlivestockPractice.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerlivestockPractice toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerlivestockPractice>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerlivestockPracticeImpl farmerlivestockPracticeImpl =
			new FarmerlivestockPracticeImpl();

		farmerlivestockPracticeImpl.setFarmerLivestockPracticeId(
			getFarmerLivestockPracticeId());
		farmerlivestockPracticeImpl.setGroupId(getGroupId());
		farmerlivestockPracticeImpl.setCompanyId(getCompanyId());
		farmerlivestockPracticeImpl.setUserId(getUserId());
		farmerlivestockPracticeImpl.setUserName(getUserName());
		farmerlivestockPracticeImpl.setCreateDate(getCreateDate());
		farmerlivestockPracticeImpl.setModifiedDate(getModifiedDate());
		farmerlivestockPracticeImpl.setHusbandry(getHusbandry());
		farmerlivestockPracticeImpl.setLiveStockCare(getLiveStockCare());
		farmerlivestockPracticeImpl.setNutrient(getNutrient());
		farmerlivestockPracticeImpl.setWater(getWater());
		farmerlivestockPracticeImpl.setPostHarvest(getPostHarvest());
		farmerlivestockPracticeImpl.setRemarks(getRemarks());
		farmerlivestockPracticeImpl.setLivestockPracticeCounter(
			getLivestockPracticeCounter());
		farmerlivestockPracticeImpl.setFarmerApplicationId(
			getFarmerApplicationId());

		farmerlivestockPracticeImpl.resetOriginalValues();

		return farmerlivestockPracticeImpl;
	}

	@Override
	public FarmerlivestockPractice cloneWithOriginalValues() {
		FarmerlivestockPracticeImpl farmerlivestockPracticeImpl =
			new FarmerlivestockPracticeImpl();

		farmerlivestockPracticeImpl.setFarmerLivestockPracticeId(
			this.<Long>getColumnOriginalValue("farmerLivestockPracticeId"));
		farmerlivestockPracticeImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerlivestockPracticeImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerlivestockPracticeImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmerlivestockPracticeImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerlivestockPracticeImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerlivestockPracticeImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerlivestockPracticeImpl.setHusbandry(
			this.<String>getColumnOriginalValue("husbandry"));
		farmerlivestockPracticeImpl.setLiveStockCare(
			this.<String>getColumnOriginalValue("liveStockCare"));
		farmerlivestockPracticeImpl.setNutrient(
			this.<String>getColumnOriginalValue("nutrient"));
		farmerlivestockPracticeImpl.setWater(
			this.<String>getColumnOriginalValue("water"));
		farmerlivestockPracticeImpl.setPostHarvest(
			this.<String>getColumnOriginalValue("postHarvest"));
		farmerlivestockPracticeImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		farmerlivestockPracticeImpl.setLivestockPracticeCounter(
			this.<String>getColumnOriginalValue("livestockPracticeCounter"));
		farmerlivestockPracticeImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));

		return farmerlivestockPracticeImpl;
	}

	@Override
	public int compareTo(FarmerlivestockPractice farmerlivestockPractice) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), farmerlivestockPractice.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerlivestockPractice)) {
			return false;
		}

		FarmerlivestockPractice farmerlivestockPractice =
			(FarmerlivestockPractice)object;

		long primaryKey = farmerlivestockPractice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerlivestockPractice> toCacheModel() {
		FarmerlivestockPracticeCacheModel farmerlivestockPracticeCacheModel =
			new FarmerlivestockPracticeCacheModel();

		farmerlivestockPracticeCacheModel.farmerLivestockPracticeId =
			getFarmerLivestockPracticeId();

		farmerlivestockPracticeCacheModel.groupId = getGroupId();

		farmerlivestockPracticeCacheModel.companyId = getCompanyId();

		farmerlivestockPracticeCacheModel.userId = getUserId();

		farmerlivestockPracticeCacheModel.userName = getUserName();

		String userName = farmerlivestockPracticeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerlivestockPracticeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerlivestockPracticeCacheModel.createDate = createDate.getTime();
		}
		else {
			farmerlivestockPracticeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerlivestockPracticeCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			farmerlivestockPracticeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerlivestockPracticeCacheModel.husbandry = getHusbandry();

		String husbandry = farmerlivestockPracticeCacheModel.husbandry;

		if ((husbandry != null) && (husbandry.length() == 0)) {
			farmerlivestockPracticeCacheModel.husbandry = null;
		}

		farmerlivestockPracticeCacheModel.liveStockCare = getLiveStockCare();

		String liveStockCare = farmerlivestockPracticeCacheModel.liveStockCare;

		if ((liveStockCare != null) && (liveStockCare.length() == 0)) {
			farmerlivestockPracticeCacheModel.liveStockCare = null;
		}

		farmerlivestockPracticeCacheModel.nutrient = getNutrient();

		String nutrient = farmerlivestockPracticeCacheModel.nutrient;

		if ((nutrient != null) && (nutrient.length() == 0)) {
			farmerlivestockPracticeCacheModel.nutrient = null;
		}

		farmerlivestockPracticeCacheModel.water = getWater();

		String water = farmerlivestockPracticeCacheModel.water;

		if ((water != null) && (water.length() == 0)) {
			farmerlivestockPracticeCacheModel.water = null;
		}

		farmerlivestockPracticeCacheModel.postHarvest = getPostHarvest();

		String postHarvest = farmerlivestockPracticeCacheModel.postHarvest;

		if ((postHarvest != null) && (postHarvest.length() == 0)) {
			farmerlivestockPracticeCacheModel.postHarvest = null;
		}

		farmerlivestockPracticeCacheModel.remarks = getRemarks();

		String remarks = farmerlivestockPracticeCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			farmerlivestockPracticeCacheModel.remarks = null;
		}

		farmerlivestockPracticeCacheModel.livestockPracticeCounter =
			getLivestockPracticeCounter();

		String livestockPracticeCounter =
			farmerlivestockPracticeCacheModel.livestockPracticeCounter;

		if ((livestockPracticeCounter != null) &&
			(livestockPracticeCounter.length() == 0)) {

			farmerlivestockPracticeCacheModel.livestockPracticeCounter = null;
		}

		farmerlivestockPracticeCacheModel.farmerApplicationId =
			getFarmerApplicationId();

		return farmerlivestockPracticeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerlivestockPractice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerlivestockPractice, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerlivestockPractice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FarmerlivestockPractice)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}


	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FarmerlivestockPractice>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _farmerLivestockPracticeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _husbandry;
	private String _liveStockCare;
	private String _nutrient;
	private String _water;
	private String _postHarvest;
	private String _remarks;
	private String _livestockPracticeCounter;
	private long _farmerApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FarmerlivestockPractice, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerlivestockPractice)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"farmerLivestockPracticeId", _farmerLivestockPracticeId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("husbandry", _husbandry);
		_columnOriginalValues.put("liveStockCare", _liveStockCare);
		_columnOriginalValues.put("nutrient", _nutrient);
		_columnOriginalValues.put("water", _water);
		_columnOriginalValues.put("postHarvest", _postHarvest);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put(
			"livestockPracticeCounter", _livestockPracticeCounter);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmerLivestockPracticeId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("husbandry", 128L);

		columnBitmasks.put("liveStockCare", 256L);

		columnBitmasks.put("nutrient", 512L);

		columnBitmasks.put("water", 1024L);

		columnBitmasks.put("postHarvest", 2048L);

		columnBitmasks.put("remarks", 4096L);

		columnBitmasks.put("livestockPracticeCounter", 8192L);

		columnBitmasks.put("farmerApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerlivestockPractice _escapedModel;

}