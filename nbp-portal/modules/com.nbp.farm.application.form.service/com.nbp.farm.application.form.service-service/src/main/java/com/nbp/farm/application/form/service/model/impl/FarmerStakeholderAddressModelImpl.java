/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerStakeholderAddress;
import com.nbp.farm.application.form.service.model.FarmerStakeholderAddressModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerStakeholderAddress service. Represents a row in the &quot;farmer_stakeholder_address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerStakeholderAddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerStakeholderAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerStakeholderAddressImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerStakeholderAddressModelImpl
	extends BaseModelImpl<FarmerStakeholderAddress>
	implements FarmerStakeholderAddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer stakeholder address model instance should use the <code>FarmerStakeholderAddress</code> interface instead.
	 */
	public static final String TABLE_NAME = "farmer_stakeholder_address";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmerStakeholderAddressId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"addressType", Types.VARCHAR},
		{"streetName", Types.VARCHAR}, {"district", Types.VARCHAR},
		{"postoffice", Types.VARCHAR}, {"parish", Types.VARCHAR},
		{"telephoneNumber", Types.VARCHAR},
		{"applicationNumber", Types.VARCHAR},
		{"farmerApplicationId", Types.BIGINT},
		{"stakeholderAddressId", Types.BIGINT},
		{"farmerStakeholderInfoId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmerStakeholderAddressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("addressType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("streetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("district", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postoffice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stakeholderAddressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("farmerStakeholderInfoId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table farmer_stakeholder_address (farmerStakeholderAddressId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,addressType VARCHAR(75) null,streetName VARCHAR(75) null,district VARCHAR(75) null,postoffice VARCHAR(75) null,parish VARCHAR(75) null,telephoneNumber VARCHAR(75) null,applicationNumber VARCHAR(75) null,farmerApplicationId LONG,stakeholderAddressId LONG,farmerStakeholderInfoId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table farmer_stakeholder_address";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerStakeholderAddress.farmerStakeholderAddressId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY farmer_stakeholder_address.farmerStakeholderAddressId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSTYPE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERSTAKEHOLDERINFOID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERSTAKEHOLDERADDRESSID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerStakeholderAddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerStakeholderAddressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerStakeholderAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerStakeholderAddressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerStakeholderAddress.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerStakeholderAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerStakeholderAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerStakeholderAddress, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerStakeholderAddress, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerStakeholderAddress)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerStakeholderAddress, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerStakeholderAddress, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerStakeholderAddress)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerStakeholderAddress, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerStakeholderAddress, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerStakeholderAddress>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerStakeholderAddress.class.getClassLoader(),
			FarmerStakeholderAddress.class, ModelWrapper.class);

		try {
			Constructor<FarmerStakeholderAddress> constructor =
				(Constructor<FarmerStakeholderAddress>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmerStakeholderAddress, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<FarmerStakeholderAddress, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerStakeholderAddress, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FarmerStakeholderAddress, Object>>();
		Map<String, BiConsumer<FarmerStakeholderAddress, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<FarmerStakeholderAddress, ?>>();

		attributeGetterFunctions.put(
			"farmerStakeholderAddressId",
			FarmerStakeholderAddress::getFarmerStakeholderAddressId);
		attributeSetterBiConsumers.put(
			"farmerStakeholderAddressId",
			(BiConsumer<FarmerStakeholderAddress, Long>)
				FarmerStakeholderAddress::setFarmerStakeholderAddressId);
		attributeGetterFunctions.put(
			"groupId", FarmerStakeholderAddress::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerStakeholderAddress, Long>)
				FarmerStakeholderAddress::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmerStakeholderAddress::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerStakeholderAddress, Long>)
				FarmerStakeholderAddress::setCompanyId);
		attributeGetterFunctions.put(
			"userId", FarmerStakeholderAddress::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerStakeholderAddress, Long>)
				FarmerStakeholderAddress::setUserId);
		attributeGetterFunctions.put(
			"userName", FarmerStakeholderAddress::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerStakeholderAddress, String>)
				FarmerStakeholderAddress::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmerStakeholderAddress::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerStakeholderAddress, Date>)
				FarmerStakeholderAddress::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerStakeholderAddress::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerStakeholderAddress, Date>)
				FarmerStakeholderAddress::setModifiedDate);
		attributeGetterFunctions.put(
			"addressType", FarmerStakeholderAddress::getAddressType);
		attributeSetterBiConsumers.put(
			"addressType",
			(BiConsumer<FarmerStakeholderAddress, String>)
				FarmerStakeholderAddress::setAddressType);
		attributeGetterFunctions.put(
			"streetName", FarmerStakeholderAddress::getStreetName);
		attributeSetterBiConsumers.put(
			"streetName",
			(BiConsumer<FarmerStakeholderAddress, String>)
				FarmerStakeholderAddress::setStreetName);
		attributeGetterFunctions.put(
			"district", FarmerStakeholderAddress::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<FarmerStakeholderAddress, String>)
				FarmerStakeholderAddress::setDistrict);
		attributeGetterFunctions.put(
			"postoffice", FarmerStakeholderAddress::getPostoffice);
		attributeSetterBiConsumers.put(
			"postoffice",
			(BiConsumer<FarmerStakeholderAddress, String>)
				FarmerStakeholderAddress::setPostoffice);
		attributeGetterFunctions.put(
			"parish", FarmerStakeholderAddress::getParish);
		attributeSetterBiConsumers.put(
			"parish",
			(BiConsumer<FarmerStakeholderAddress, String>)
				FarmerStakeholderAddress::setParish);
		attributeGetterFunctions.put(
			"telephoneNumber", FarmerStakeholderAddress::getTelephoneNumber);
		attributeSetterBiConsumers.put(
			"telephoneNumber",
			(BiConsumer<FarmerStakeholderAddress, String>)
				FarmerStakeholderAddress::setTelephoneNumber);
		attributeGetterFunctions.put(
			"applicationNumber",
			FarmerStakeholderAddress::getApplicationNumber);
		attributeSetterBiConsumers.put(
			"applicationNumber",
			(BiConsumer<FarmerStakeholderAddress, String>)
				FarmerStakeholderAddress::setApplicationNumber);
		attributeGetterFunctions.put(
			"farmerApplicationId",
			FarmerStakeholderAddress::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerStakeholderAddress, Long>)
				FarmerStakeholderAddress::setFarmerApplicationId);
		attributeGetterFunctions.put(
			"stakeholderAddressId",
			FarmerStakeholderAddress::getStakeholderAddressId);
		attributeSetterBiConsumers.put(
			"stakeholderAddressId",
			(BiConsumer<FarmerStakeholderAddress, Long>)
				FarmerStakeholderAddress::setStakeholderAddressId);
		attributeGetterFunctions.put(
			"farmerStakeholderInfoId",
			FarmerStakeholderAddress::getFarmerStakeholderInfoId);
		attributeSetterBiConsumers.put(
			"farmerStakeholderInfoId",
			(BiConsumer<FarmerStakeholderAddress, Long>)
				FarmerStakeholderAddress::setFarmerStakeholderInfoId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmerStakeholderAddressId() {
		return _farmerStakeholderAddressId;
	}

	@Override
	public void setFarmerStakeholderAddressId(long farmerStakeholderAddressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerStakeholderAddressId = farmerStakeholderAddressId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAddressType() {
		if (_addressType == null) {
			return "";
		}
		else {
			return _addressType;
		}
	}

	@Override
	public void setAddressType(String addressType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressType = addressType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAddressType() {
		return getColumnOriginalValue("addressType");
	}

	@JSON
	@Override
	public String getStreetName() {
		if (_streetName == null) {
			return "";
		}
		else {
			return _streetName;
		}
	}

	@Override
	public void setStreetName(String streetName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_streetName = streetName;
	}

	@JSON
	@Override
	public String getDistrict() {
		if (_district == null) {
			return "";
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public String getPostoffice() {
		if (_postoffice == null) {
			return "";
		}
		else {
			return _postoffice;
		}
	}

	@Override
	public void setPostoffice(String postoffice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postoffice = postoffice;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public String getTelephoneNumber() {
		if (_telephoneNumber == null) {
			return "";
		}
		else {
			return _telephoneNumber;
		}
	}

	@Override
	public void setTelephoneNumber(String telephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneNumber = telephoneNumber;
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	@JSON
	@Override
	public long getStakeholderAddressId() {
		return _stakeholderAddressId;
	}

	@Override
	public void setStakeholderAddressId(long stakeholderAddressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stakeholderAddressId = stakeholderAddressId;
	}

	@JSON
	@Override
	public long getFarmerStakeholderInfoId() {
		return _farmerStakeholderInfoId;
	}

	@Override
	public void setFarmerStakeholderInfoId(long farmerStakeholderInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerStakeholderInfoId = farmerStakeholderInfoId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerStakeholderInfoId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerStakeholderInfoId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerStakeholderAddress.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerStakeholderAddress toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerStakeholderAddress>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerStakeholderAddressImpl farmerStakeholderAddressImpl =
			new FarmerStakeholderAddressImpl();

		farmerStakeholderAddressImpl.setFarmerStakeholderAddressId(
			getFarmerStakeholderAddressId());
		farmerStakeholderAddressImpl.setGroupId(getGroupId());
		farmerStakeholderAddressImpl.setCompanyId(getCompanyId());
		farmerStakeholderAddressImpl.setUserId(getUserId());
		farmerStakeholderAddressImpl.setUserName(getUserName());
		farmerStakeholderAddressImpl.setCreateDate(getCreateDate());
		farmerStakeholderAddressImpl.setModifiedDate(getModifiedDate());
		farmerStakeholderAddressImpl.setAddressType(getAddressType());
		farmerStakeholderAddressImpl.setStreetName(getStreetName());
		farmerStakeholderAddressImpl.setDistrict(getDistrict());
		farmerStakeholderAddressImpl.setPostoffice(getPostoffice());
		farmerStakeholderAddressImpl.setParish(getParish());
		farmerStakeholderAddressImpl.setTelephoneNumber(getTelephoneNumber());
		farmerStakeholderAddressImpl.setApplicationNumber(
			getApplicationNumber());
		farmerStakeholderAddressImpl.setFarmerApplicationId(
			getFarmerApplicationId());
		farmerStakeholderAddressImpl.setStakeholderAddressId(
			getStakeholderAddressId());
		farmerStakeholderAddressImpl.setFarmerStakeholderInfoId(
			getFarmerStakeholderInfoId());

		farmerStakeholderAddressImpl.resetOriginalValues();

		return farmerStakeholderAddressImpl;
	}

	@Override
	public FarmerStakeholderAddress cloneWithOriginalValues() {
		FarmerStakeholderAddressImpl farmerStakeholderAddressImpl =
			new FarmerStakeholderAddressImpl();

		farmerStakeholderAddressImpl.setFarmerStakeholderAddressId(
			this.<Long>getColumnOriginalValue("farmerStakeholderAddressId"));
		farmerStakeholderAddressImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerStakeholderAddressImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerStakeholderAddressImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmerStakeholderAddressImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerStakeholderAddressImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerStakeholderAddressImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerStakeholderAddressImpl.setAddressType(
			this.<String>getColumnOriginalValue("addressType"));
		farmerStakeholderAddressImpl.setStreetName(
			this.<String>getColumnOriginalValue("streetName"));
		farmerStakeholderAddressImpl.setDistrict(
			this.<String>getColumnOriginalValue("district"));
		farmerStakeholderAddressImpl.setPostoffice(
			this.<String>getColumnOriginalValue("postoffice"));
		farmerStakeholderAddressImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		farmerStakeholderAddressImpl.setTelephoneNumber(
			this.<String>getColumnOriginalValue("telephoneNumber"));
		farmerStakeholderAddressImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		farmerStakeholderAddressImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
		farmerStakeholderAddressImpl.setStakeholderAddressId(
			this.<Long>getColumnOriginalValue("stakeholderAddressId"));
		farmerStakeholderAddressImpl.setFarmerStakeholderInfoId(
			this.<Long>getColumnOriginalValue("farmerStakeholderInfoId"));

		return farmerStakeholderAddressImpl;
	}

	@Override
	public int compareTo(FarmerStakeholderAddress farmerStakeholderAddress) {
		long primaryKey = farmerStakeholderAddress.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerStakeholderAddress)) {
			return false;
		}

		FarmerStakeholderAddress farmerStakeholderAddress =
			(FarmerStakeholderAddress)object;

		long primaryKey = farmerStakeholderAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerStakeholderAddress> toCacheModel() {
		FarmerStakeholderAddressCacheModel farmerStakeholderAddressCacheModel =
			new FarmerStakeholderAddressCacheModel();

		farmerStakeholderAddressCacheModel.farmerStakeholderAddressId =
			getFarmerStakeholderAddressId();

		farmerStakeholderAddressCacheModel.groupId = getGroupId();

		farmerStakeholderAddressCacheModel.companyId = getCompanyId();

		farmerStakeholderAddressCacheModel.userId = getUserId();

		farmerStakeholderAddressCacheModel.userName = getUserName();

		String userName = farmerStakeholderAddressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerStakeholderAddressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerStakeholderAddressCacheModel.createDate =
				createDate.getTime();
		}
		else {
			farmerStakeholderAddressCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerStakeholderAddressCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			farmerStakeholderAddressCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerStakeholderAddressCacheModel.addressType = getAddressType();

		String addressType = farmerStakeholderAddressCacheModel.addressType;

		if ((addressType != null) && (addressType.length() == 0)) {
			farmerStakeholderAddressCacheModel.addressType = null;
		}

		farmerStakeholderAddressCacheModel.streetName = getStreetName();

		String streetName = farmerStakeholderAddressCacheModel.streetName;

		if ((streetName != null) && (streetName.length() == 0)) {
			farmerStakeholderAddressCacheModel.streetName = null;
		}

		farmerStakeholderAddressCacheModel.district = getDistrict();

		String district = farmerStakeholderAddressCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			farmerStakeholderAddressCacheModel.district = null;
		}

		farmerStakeholderAddressCacheModel.postoffice = getPostoffice();

		String postoffice = farmerStakeholderAddressCacheModel.postoffice;

		if ((postoffice != null) && (postoffice.length() == 0)) {
			farmerStakeholderAddressCacheModel.postoffice = null;
		}

		farmerStakeholderAddressCacheModel.parish = getParish();

		String parish = farmerStakeholderAddressCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			farmerStakeholderAddressCacheModel.parish = null;
		}

		farmerStakeholderAddressCacheModel.telephoneNumber =
			getTelephoneNumber();

		String telephoneNumber =
			farmerStakeholderAddressCacheModel.telephoneNumber;

		if ((telephoneNumber != null) && (telephoneNumber.length() == 0)) {
			farmerStakeholderAddressCacheModel.telephoneNumber = null;
		}

		farmerStakeholderAddressCacheModel.applicationNumber =
			getApplicationNumber();

		String applicationNumber =
			farmerStakeholderAddressCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			farmerStakeholderAddressCacheModel.applicationNumber = null;
		}

		farmerStakeholderAddressCacheModel.farmerApplicationId =
			getFarmerApplicationId();

		farmerStakeholderAddressCacheModel.stakeholderAddressId =
			getStakeholderAddressId();

		farmerStakeholderAddressCacheModel.farmerStakeholderInfoId =
			getFarmerStakeholderInfoId();

		return farmerStakeholderAddressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerStakeholderAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerStakeholderAddress, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerStakeholderAddress, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FarmerStakeholderAddress)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	
	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FarmerStakeholderAddress>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _farmerStakeholderAddressId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _addressType;
	private String _streetName;
	private String _district;
	private String _postoffice;
	private String _parish;
	private String _telephoneNumber;
	private String _applicationNumber;
	private long _farmerApplicationId;
	private long _stakeholderAddressId;
	private long _farmerStakeholderInfoId;

	public <T> T getColumnValue(String columnName) {
		Function<FarmerStakeholderAddress, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerStakeholderAddress)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"farmerStakeholderAddressId", _farmerStakeholderAddressId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("addressType", _addressType);
		_columnOriginalValues.put("streetName", _streetName);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("postoffice", _postoffice);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("telephoneNumber", _telephoneNumber);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
		_columnOriginalValues.put(
			"stakeholderAddressId", _stakeholderAddressId);
		_columnOriginalValues.put(
			"farmerStakeholderInfoId", _farmerStakeholderInfoId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmerStakeholderAddressId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("addressType", 128L);

		columnBitmasks.put("streetName", 256L);

		columnBitmasks.put("district", 512L);

		columnBitmasks.put("postoffice", 1024L);

		columnBitmasks.put("parish", 2048L);

		columnBitmasks.put("telephoneNumber", 4096L);

		columnBitmasks.put("applicationNumber", 8192L);

		columnBitmasks.put("farmerApplicationId", 16384L);

		columnBitmasks.put("stakeholderAddressId", 32768L);

		columnBitmasks.put("farmerStakeholderInfoId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerStakeholderAddress _escapedModel;

}