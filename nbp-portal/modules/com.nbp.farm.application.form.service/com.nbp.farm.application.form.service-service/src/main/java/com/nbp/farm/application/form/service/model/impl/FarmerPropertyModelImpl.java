/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerProperty;
import com.nbp.farm.application.form.service.model.FarmerPropertyModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerProperty service. Represents a row in the &quot;farmer_property&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerPropertyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerPropertyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerPropertyImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerPropertyModelImpl
	extends BaseModelImpl<FarmerProperty> implements FarmerPropertyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer property model instance should use the <code>FarmerProperty</code> interface instead.
	 */
	public static final String TABLE_NAME = "farmer_property";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmerPropertyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"property01Extension", Types.VARCHAR},
		{"property01District", Types.VARCHAR},
		{"property01Tenure", Types.VARCHAR},
		{"property01Status", Types.VARCHAR}, {"property01Size", Types.VARCHAR},
		{"property01Usage", Types.VARCHAR}, {"property01Volume", Types.VARCHAR},
		{"property01Folio", Types.VARCHAR},
		{"property01DistanceFromRoad", Types.VARCHAR},
		{"propertyId02", Types.VARCHAR}, {"propertyId03", Types.VARCHAR},
		{"propertyCounter", Types.VARCHAR}, {"remarks", Types.VARCHAR},
		{"farmerApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmerPropertyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("property01Extension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("property01District", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("property01Tenure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("property01Status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("property01Size", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("property01Usage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("property01Volume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("property01Folio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("property01DistanceFromRoad", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyId02", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyId03", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table farmer_property (farmerPropertyId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,property01Extension VARCHAR(75) null,property01District VARCHAR(75) null,property01Tenure VARCHAR(75) null,property01Status VARCHAR(75) null,property01Size VARCHAR(75) null,property01Usage VARCHAR(75) null,property01Volume VARCHAR(75) null,property01Folio VARCHAR(75) null,property01DistanceFromRoad VARCHAR(75) null,propertyId02 VARCHAR(75) null,propertyId03 VARCHAR(75) null,propertyCounter VARCHAR(75) null,remarks VARCHAR(500) null,farmerApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table farmer_property";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerProperty.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY farmer_property.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerPropertyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerPropertyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerPropertyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerPropertyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerProperty.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerProperty.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerProperty, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerProperty, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerProperty, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerProperty)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerProperty, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerProperty, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerProperty)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerProperty, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerProperty, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerProperty>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerProperty.class.getClassLoader(), FarmerProperty.class,
			ModelWrapper.class);

		try {
			Constructor<FarmerProperty> constructor =
				(Constructor<FarmerProperty>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmerProperty, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmerProperty, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerProperty, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FarmerProperty, Object>>();
		Map<String, BiConsumer<FarmerProperty, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FarmerProperty, ?>>();

		attributeGetterFunctions.put(
			"farmerPropertyId", FarmerProperty::getFarmerPropertyId);
		attributeSetterBiConsumers.put(
			"farmerPropertyId",
			(BiConsumer<FarmerProperty, Long>)
				FarmerProperty::setFarmerPropertyId);
		attributeGetterFunctions.put("groupId", FarmerProperty::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerProperty, Long>)FarmerProperty::setGroupId);
		attributeGetterFunctions.put("companyId", FarmerProperty::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerProperty, Long>)FarmerProperty::setCompanyId);
		attributeGetterFunctions.put("userId", FarmerProperty::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerProperty, Long>)FarmerProperty::setUserId);
		attributeGetterFunctions.put("userName", FarmerProperty::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerProperty, String>)FarmerProperty::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmerProperty::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerProperty, Date>)FarmerProperty::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerProperty::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerProperty, Date>)FarmerProperty::setModifiedDate);
		attributeGetterFunctions.put(
			"property01Extension", FarmerProperty::getProperty01Extension);
		attributeSetterBiConsumers.put(
			"property01Extension",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01Extension);
		attributeGetterFunctions.put(
			"property01District", FarmerProperty::getProperty01District);
		attributeSetterBiConsumers.put(
			"property01District",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01District);
		attributeGetterFunctions.put(
			"property01Tenure", FarmerProperty::getProperty01Tenure);
		attributeSetterBiConsumers.put(
			"property01Tenure",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01Tenure);
		attributeGetterFunctions.put(
			"property01Status", FarmerProperty::getProperty01Status);
		attributeSetterBiConsumers.put(
			"property01Status",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01Status);
		attributeGetterFunctions.put(
			"property01Size", FarmerProperty::getProperty01Size);
		attributeSetterBiConsumers.put(
			"property01Size",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01Size);
		attributeGetterFunctions.put(
			"property01Usage", FarmerProperty::getProperty01Usage);
		attributeSetterBiConsumers.put(
			"property01Usage",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01Usage);
		attributeGetterFunctions.put(
			"property01Volume", FarmerProperty::getProperty01Volume);
		attributeSetterBiConsumers.put(
			"property01Volume",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01Volume);
		attributeGetterFunctions.put(
			"property01Folio", FarmerProperty::getProperty01Folio);
		attributeSetterBiConsumers.put(
			"property01Folio",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01Folio);
		attributeGetterFunctions.put(
			"property01DistanceFromRoad",
			FarmerProperty::getProperty01DistanceFromRoad);
		attributeSetterBiConsumers.put(
			"property01DistanceFromRoad",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setProperty01DistanceFromRoad);
		attributeGetterFunctions.put(
			"propertyId02", FarmerProperty::getPropertyId02);
		attributeSetterBiConsumers.put(
			"propertyId02",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setPropertyId02);
		attributeGetterFunctions.put(
			"propertyId03", FarmerProperty::getPropertyId03);
		attributeSetterBiConsumers.put(
			"propertyId03",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setPropertyId03);
		attributeGetterFunctions.put(
			"propertyCounter", FarmerProperty::getPropertyCounter);
		attributeSetterBiConsumers.put(
			"propertyCounter",
			(BiConsumer<FarmerProperty, String>)
				FarmerProperty::setPropertyCounter);
		attributeGetterFunctions.put("remarks", FarmerProperty::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<FarmerProperty, String>)FarmerProperty::setRemarks);
		attributeGetterFunctions.put(
			"farmerApplicationId", FarmerProperty::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerProperty, Long>)
				FarmerProperty::setFarmerApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmerPropertyId() {
		return _farmerPropertyId;
	}

	@Override
	public void setFarmerPropertyId(long farmerPropertyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerPropertyId = farmerPropertyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getProperty01Extension() {
		if (_property01Extension == null) {
			return "";
		}
		else {
			return _property01Extension;
		}
	}

	@Override
	public void setProperty01Extension(String property01Extension) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01Extension = property01Extension;
	}

	@JSON
	@Override
	public String getProperty01District() {
		if (_property01District == null) {
			return "";
		}
		else {
			return _property01District;
		}
	}

	@Override
	public void setProperty01District(String property01District) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01District = property01District;
	}

	@JSON
	@Override
	public String getProperty01Tenure() {
		if (_property01Tenure == null) {
			return "";
		}
		else {
			return _property01Tenure;
		}
	}

	@Override
	public void setProperty01Tenure(String property01Tenure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01Tenure = property01Tenure;
	}

	@JSON
	@Override
	public String getProperty01Status() {
		if (_property01Status == null) {
			return "";
		}
		else {
			return _property01Status;
		}
	}

	@Override
	public void setProperty01Status(String property01Status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01Status = property01Status;
	}

	@JSON
	@Override
	public String getProperty01Size() {
		if (_property01Size == null) {
			return "";
		}
		else {
			return _property01Size;
		}
	}

	@Override
	public void setProperty01Size(String property01Size) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01Size = property01Size;
	}

	@JSON
	@Override
	public String getProperty01Usage() {
		if (_property01Usage == null) {
			return "";
		}
		else {
			return _property01Usage;
		}
	}

	@Override
	public void setProperty01Usage(String property01Usage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01Usage = property01Usage;
	}

	@JSON
	@Override
	public String getProperty01Volume() {
		if (_property01Volume == null) {
			return "";
		}
		else {
			return _property01Volume;
		}
	}

	@Override
	public void setProperty01Volume(String property01Volume) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01Volume = property01Volume;
	}

	@JSON
	@Override
	public String getProperty01Folio() {
		if (_property01Folio == null) {
			return "";
		}
		else {
			return _property01Folio;
		}
	}

	@Override
	public void setProperty01Folio(String property01Folio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01Folio = property01Folio;
	}

	@JSON
	@Override
	public String getProperty01DistanceFromRoad() {
		if (_property01DistanceFromRoad == null) {
			return "";
		}
		else {
			return _property01DistanceFromRoad;
		}
	}

	@Override
	public void setProperty01DistanceFromRoad(
		String property01DistanceFromRoad) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_property01DistanceFromRoad = property01DistanceFromRoad;
	}

	@JSON
	@Override
	public String getPropertyId02() {
		if (_propertyId02 == null) {
			return "";
		}
		else {
			return _propertyId02;
		}
	}

	@Override
	public void setPropertyId02(String propertyId02) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyId02 = propertyId02;
	}

	@JSON
	@Override
	public String getPropertyId03() {
		if (_propertyId03 == null) {
			return "";
		}
		else {
			return _propertyId03;
		}
	}

	@Override
	public void setPropertyId03(String propertyId03) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyId03 = propertyId03;
	}

	@JSON
	@Override
	public String getPropertyCounter() {
		if (_propertyCounter == null) {
			return "";
		}
		else {
			return _propertyCounter;
		}
	}

	@Override
	public void setPropertyCounter(String propertyCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyCounter = propertyCounter;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerProperty.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerProperty toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerProperty>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerPropertyImpl farmerPropertyImpl = new FarmerPropertyImpl();

		farmerPropertyImpl.setFarmerPropertyId(getFarmerPropertyId());
		farmerPropertyImpl.setGroupId(getGroupId());
		farmerPropertyImpl.setCompanyId(getCompanyId());
		farmerPropertyImpl.setUserId(getUserId());
		farmerPropertyImpl.setUserName(getUserName());
		farmerPropertyImpl.setCreateDate(getCreateDate());
		farmerPropertyImpl.setModifiedDate(getModifiedDate());
		farmerPropertyImpl.setProperty01Extension(getProperty01Extension());
		farmerPropertyImpl.setProperty01District(getProperty01District());
		farmerPropertyImpl.setProperty01Tenure(getProperty01Tenure());
		farmerPropertyImpl.setProperty01Status(getProperty01Status());
		farmerPropertyImpl.setProperty01Size(getProperty01Size());
		farmerPropertyImpl.setProperty01Usage(getProperty01Usage());
		farmerPropertyImpl.setProperty01Volume(getProperty01Volume());
		farmerPropertyImpl.setProperty01Folio(getProperty01Folio());
		farmerPropertyImpl.setProperty01DistanceFromRoad(
			getProperty01DistanceFromRoad());
		farmerPropertyImpl.setPropertyId02(getPropertyId02());
		farmerPropertyImpl.setPropertyId03(getPropertyId03());
		farmerPropertyImpl.setPropertyCounter(getPropertyCounter());
		farmerPropertyImpl.setRemarks(getRemarks());
		farmerPropertyImpl.setFarmerApplicationId(getFarmerApplicationId());

		farmerPropertyImpl.resetOriginalValues();

		return farmerPropertyImpl;
	}

	@Override
	public FarmerProperty cloneWithOriginalValues() {
		FarmerPropertyImpl farmerPropertyImpl = new FarmerPropertyImpl();

		farmerPropertyImpl.setFarmerPropertyId(
			this.<Long>getColumnOriginalValue("farmerPropertyId"));
		farmerPropertyImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerPropertyImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerPropertyImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmerPropertyImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerPropertyImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerPropertyImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerPropertyImpl.setProperty01Extension(
			this.<String>getColumnOriginalValue("property01Extension"));
		farmerPropertyImpl.setProperty01District(
			this.<String>getColumnOriginalValue("property01District"));
		farmerPropertyImpl.setProperty01Tenure(
			this.<String>getColumnOriginalValue("property01Tenure"));
		farmerPropertyImpl.setProperty01Status(
			this.<String>getColumnOriginalValue("property01Status"));
		farmerPropertyImpl.setProperty01Size(
			this.<String>getColumnOriginalValue("property01Size"));
		farmerPropertyImpl.setProperty01Usage(
			this.<String>getColumnOriginalValue("property01Usage"));
		farmerPropertyImpl.setProperty01Volume(
			this.<String>getColumnOriginalValue("property01Volume"));
		farmerPropertyImpl.setProperty01Folio(
			this.<String>getColumnOriginalValue("property01Folio"));
		farmerPropertyImpl.setProperty01DistanceFromRoad(
			this.<String>getColumnOriginalValue("property01DistanceFromRoad"));
		farmerPropertyImpl.setPropertyId02(
			this.<String>getColumnOriginalValue("propertyId02"));
		farmerPropertyImpl.setPropertyId03(
			this.<String>getColumnOriginalValue("propertyId03"));
		farmerPropertyImpl.setPropertyCounter(
			this.<String>getColumnOriginalValue("propertyCounter"));
		farmerPropertyImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		farmerPropertyImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));

		return farmerPropertyImpl;
	}

	@Override
	public int compareTo(FarmerProperty farmerProperty) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), farmerProperty.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerProperty)) {
			return false;
		}

		FarmerProperty farmerProperty = (FarmerProperty)object;

		long primaryKey = farmerProperty.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerProperty> toCacheModel() {
		FarmerPropertyCacheModel farmerPropertyCacheModel =
			new FarmerPropertyCacheModel();

		farmerPropertyCacheModel.farmerPropertyId = getFarmerPropertyId();

		farmerPropertyCacheModel.groupId = getGroupId();

		farmerPropertyCacheModel.companyId = getCompanyId();

		farmerPropertyCacheModel.userId = getUserId();

		farmerPropertyCacheModel.userName = getUserName();

		String userName = farmerPropertyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerPropertyCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerPropertyCacheModel.createDate = createDate.getTime();
		}
		else {
			farmerPropertyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerPropertyCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			farmerPropertyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerPropertyCacheModel.property01Extension = getProperty01Extension();

		String property01Extension =
			farmerPropertyCacheModel.property01Extension;

		if ((property01Extension != null) &&
			(property01Extension.length() == 0)) {

			farmerPropertyCacheModel.property01Extension = null;
		}

		farmerPropertyCacheModel.property01District = getProperty01District();

		String property01District = farmerPropertyCacheModel.property01District;

		if ((property01District != null) &&
			(property01District.length() == 0)) {

			farmerPropertyCacheModel.property01District = null;
		}

		farmerPropertyCacheModel.property01Tenure = getProperty01Tenure();

		String property01Tenure = farmerPropertyCacheModel.property01Tenure;

		if ((property01Tenure != null) && (property01Tenure.length() == 0)) {
			farmerPropertyCacheModel.property01Tenure = null;
		}

		farmerPropertyCacheModel.property01Status = getProperty01Status();

		String property01Status = farmerPropertyCacheModel.property01Status;

		if ((property01Status != null) && (property01Status.length() == 0)) {
			farmerPropertyCacheModel.property01Status = null;
		}

		farmerPropertyCacheModel.property01Size = getProperty01Size();

		String property01Size = farmerPropertyCacheModel.property01Size;

		if ((property01Size != null) && (property01Size.length() == 0)) {
			farmerPropertyCacheModel.property01Size = null;
		}

		farmerPropertyCacheModel.property01Usage = getProperty01Usage();

		String property01Usage = farmerPropertyCacheModel.property01Usage;

		if ((property01Usage != null) && (property01Usage.length() == 0)) {
			farmerPropertyCacheModel.property01Usage = null;
		}

		farmerPropertyCacheModel.property01Volume = getProperty01Volume();

		String property01Volume = farmerPropertyCacheModel.property01Volume;

		if ((property01Volume != null) && (property01Volume.length() == 0)) {
			farmerPropertyCacheModel.property01Volume = null;
		}

		farmerPropertyCacheModel.property01Folio = getProperty01Folio();

		String property01Folio = farmerPropertyCacheModel.property01Folio;

		if ((property01Folio != null) && (property01Folio.length() == 0)) {
			farmerPropertyCacheModel.property01Folio = null;
		}

		farmerPropertyCacheModel.property01DistanceFromRoad =
			getProperty01DistanceFromRoad();

		String property01DistanceFromRoad =
			farmerPropertyCacheModel.property01DistanceFromRoad;

		if ((property01DistanceFromRoad != null) &&
			(property01DistanceFromRoad.length() == 0)) {

			farmerPropertyCacheModel.property01DistanceFromRoad = null;
		}

		farmerPropertyCacheModel.propertyId02 = getPropertyId02();

		String propertyId02 = farmerPropertyCacheModel.propertyId02;

		if ((propertyId02 != null) && (propertyId02.length() == 0)) {
			farmerPropertyCacheModel.propertyId02 = null;
		}

		farmerPropertyCacheModel.propertyId03 = getPropertyId03();

		String propertyId03 = farmerPropertyCacheModel.propertyId03;

		if ((propertyId03 != null) && (propertyId03.length() == 0)) {
			farmerPropertyCacheModel.propertyId03 = null;
		}

		farmerPropertyCacheModel.propertyCounter = getPropertyCounter();

		String propertyCounter = farmerPropertyCacheModel.propertyCounter;

		if ((propertyCounter != null) && (propertyCounter.length() == 0)) {
			farmerPropertyCacheModel.propertyCounter = null;
		}

		farmerPropertyCacheModel.remarks = getRemarks();

		String remarks = farmerPropertyCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			farmerPropertyCacheModel.remarks = null;
		}

		farmerPropertyCacheModel.farmerApplicationId = getFarmerApplicationId();

		return farmerPropertyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerProperty, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerProperty, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerProperty, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FarmerProperty)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmerProperty>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _farmerPropertyId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _property01Extension;
	private String _property01District;
	private String _property01Tenure;
	private String _property01Status;
	private String _property01Size;
	private String _property01Usage;
	private String _property01Volume;
	private String _property01Folio;
	private String _property01DistanceFromRoad;
	private String _propertyId02;
	private String _propertyId03;
	private String _propertyCounter;
	private String _remarks;
	private long _farmerApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FarmerProperty, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerProperty)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("farmerPropertyId", _farmerPropertyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("property01Extension", _property01Extension);
		_columnOriginalValues.put("property01District", _property01District);
		_columnOriginalValues.put("property01Tenure", _property01Tenure);
		_columnOriginalValues.put("property01Status", _property01Status);
		_columnOriginalValues.put("property01Size", _property01Size);
		_columnOriginalValues.put("property01Usage", _property01Usage);
		_columnOriginalValues.put("property01Volume", _property01Volume);
		_columnOriginalValues.put("property01Folio", _property01Folio);
		_columnOriginalValues.put(
			"property01DistanceFromRoad", _property01DistanceFromRoad);
		_columnOriginalValues.put("propertyId02", _propertyId02);
		_columnOriginalValues.put("propertyId03", _propertyId03);
		_columnOriginalValues.put("propertyCounter", _propertyCounter);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmerPropertyId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("property01Extension", 128L);

		columnBitmasks.put("property01District", 256L);

		columnBitmasks.put("property01Tenure", 512L);

		columnBitmasks.put("property01Status", 1024L);

		columnBitmasks.put("property01Size", 2048L);

		columnBitmasks.put("property01Usage", 4096L);

		columnBitmasks.put("property01Volume", 8192L);

		columnBitmasks.put("property01Folio", 16384L);

		columnBitmasks.put("property01DistanceFromRoad", 32768L);

		columnBitmasks.put("propertyId02", 65536L);

		columnBitmasks.put("propertyId03", 131072L);

		columnBitmasks.put("propertyCounter", 262144L);

		columnBitmasks.put("remarks", 524288L);

		columnBitmasks.put("farmerApplicationId", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerProperty _escapedModel;

}