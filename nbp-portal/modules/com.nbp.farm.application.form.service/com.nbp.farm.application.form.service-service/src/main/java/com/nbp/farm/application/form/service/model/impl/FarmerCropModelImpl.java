/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerCrop;
import com.nbp.farm.application.form.service.model.FarmerCropModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerCrop service. Represents a row in the &quot;farmer_crop&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerCropModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerCropImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerCropImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerCropModelImpl
	extends BaseModelImpl<FarmerCrop> implements FarmerCropModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer crop model instance should use the <code>FarmerCrop</code> interface instead.
	 */
	public static final String TABLE_NAME = "farmer_crop";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmerCropId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"cropAndVariety", Types.VARCHAR},
		{"area", Types.VARCHAR}, {"unit", Types.VARCHAR},
		{"cropContent", Types.VARCHAR}, {"plantingDate", Types.TIMESTAMP},
		{"majorMarket", Types.VARCHAR},
		{"majorMarketPercentSold", Types.VARCHAR},
		{"minorMarket", Types.VARCHAR},
		{"minorMarketPercentSold", Types.VARCHAR}, {"remarks", Types.VARCHAR},
		{"propertyId02", Types.VARCHAR}, {"propertyId03", Types.VARCHAR},
		{"cropCounter", Types.VARCHAR}, {"farmerApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmerCropId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("cropAndVariety", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("area", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cropContent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("plantingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("majorMarket", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("majorMarketPercentSold", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("minorMarket", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("minorMarketPercentSold", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyId02", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyId03", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cropCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table farmer_crop (farmerCropId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,cropAndVariety VARCHAR(75) null,area VARCHAR(75) null,unit VARCHAR(75) null,cropContent VARCHAR(75) null,plantingDate DATE null,majorMarket VARCHAR(75) null,majorMarketPercentSold VARCHAR(75) null,minorMarket VARCHAR(75) null,minorMarketPercentSold VARCHAR(75) null,remarks VARCHAR(500) null,propertyId02 VARCHAR(75) null,propertyId03 VARCHAR(75) null,cropCounter VARCHAR(75) null,farmerApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table farmer_crop";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerCrop.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY farmer_crop.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerCropModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerCropId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerCropId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerCropId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerCrop.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerCrop.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerCrop, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerCrop, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerCrop, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((FarmerCrop)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerCrop, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerCrop, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerCrop)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerCrop, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerCrop, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerCrop>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerCrop.class.getClassLoader(), FarmerCrop.class,
			ModelWrapper.class);

		try {
			Constructor<FarmerCrop> constructor =
				(Constructor<FarmerCrop>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmerCrop, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmerCrop, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerCrop, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FarmerCrop, Object>>();
		Map<String, BiConsumer<FarmerCrop, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FarmerCrop, ?>>();

		attributeGetterFunctions.put(
			"farmerCropId", FarmerCrop::getFarmerCropId);
		attributeSetterBiConsumers.put(
			"farmerCropId",
			(BiConsumer<FarmerCrop, Long>)FarmerCrop::setFarmerCropId);
		attributeGetterFunctions.put("groupId", FarmerCrop::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<FarmerCrop, Long>)FarmerCrop::setGroupId);
		attributeGetterFunctions.put("companyId", FarmerCrop::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerCrop, Long>)FarmerCrop::setCompanyId);
		attributeGetterFunctions.put("userId", FarmerCrop::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<FarmerCrop, Long>)FarmerCrop::setUserId);
		attributeGetterFunctions.put("userName", FarmerCrop::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerCrop, String>)FarmerCrop::setUserName);
		attributeGetterFunctions.put("createDate", FarmerCrop::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerCrop, Date>)FarmerCrop::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerCrop::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerCrop, Date>)FarmerCrop::setModifiedDate);
		attributeGetterFunctions.put(
			"cropAndVariety", FarmerCrop::getCropAndVariety);
		attributeSetterBiConsumers.put(
			"cropAndVariety",
			(BiConsumer<FarmerCrop, String>)FarmerCrop::setCropAndVariety);
		attributeGetterFunctions.put("area", FarmerCrop::getArea);
		attributeSetterBiConsumers.put(
			"area", (BiConsumer<FarmerCrop, String>)FarmerCrop::setArea);
		attributeGetterFunctions.put("unit", FarmerCrop::getUnit);
		attributeSetterBiConsumers.put(
			"unit", (BiConsumer<FarmerCrop, String>)FarmerCrop::setUnit);
		attributeGetterFunctions.put("cropContent", FarmerCrop::getCropContent);
		attributeSetterBiConsumers.put(
			"cropContent",
			(BiConsumer<FarmerCrop, String>)FarmerCrop::setCropContent);
		attributeGetterFunctions.put(
			"plantingDate", FarmerCrop::getPlantingDate);
		attributeSetterBiConsumers.put(
			"plantingDate",
			(BiConsumer<FarmerCrop, Date>)FarmerCrop::setPlantingDate);
		attributeGetterFunctions.put("majorMarket", FarmerCrop::getMajorMarket);
		attributeSetterBiConsumers.put(
			"majorMarket",
			(BiConsumer<FarmerCrop, String>)FarmerCrop::setMajorMarket);
		attributeGetterFunctions.put(
			"majorMarketPercentSold", FarmerCrop::getMajorMarketPercentSold);
		attributeSetterBiConsumers.put(
			"majorMarketPercentSold",
			(BiConsumer<FarmerCrop, String>)
				FarmerCrop::setMajorMarketPercentSold);
		attributeGetterFunctions.put("minorMarket", FarmerCrop::getMinorMarket);
		attributeSetterBiConsumers.put(
			"minorMarket",
			(BiConsumer<FarmerCrop, String>)FarmerCrop::setMinorMarket);
		attributeGetterFunctions.put(
			"minorMarketPercentSold", FarmerCrop::getMinorMarketPercentSold);
		attributeSetterBiConsumers.put(
			"minorMarketPercentSold",
			(BiConsumer<FarmerCrop, String>)
				FarmerCrop::setMinorMarketPercentSold);
		attributeGetterFunctions.put("remarks", FarmerCrop::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks", (BiConsumer<FarmerCrop, String>)FarmerCrop::setRemarks);
		attributeGetterFunctions.put(
			"propertyId02", FarmerCrop::getPropertyId02);
		attributeSetterBiConsumers.put(
			"propertyId02",
			(BiConsumer<FarmerCrop, String>)FarmerCrop::setPropertyId02);
		attributeGetterFunctions.put(
			"propertyId03", FarmerCrop::getPropertyId03);
		attributeSetterBiConsumers.put(
			"propertyId03",
			(BiConsumer<FarmerCrop, String>)FarmerCrop::setPropertyId03);
		attributeGetterFunctions.put("cropCounter", FarmerCrop::getCropCounter);
		attributeSetterBiConsumers.put(
			"cropCounter",
			(BiConsumer<FarmerCrop, String>)FarmerCrop::setCropCounter);
		attributeGetterFunctions.put(
			"farmerApplicationId", FarmerCrop::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerCrop, Long>)FarmerCrop::setFarmerApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmerCropId() {
		return _farmerCropId;
	}

	@Override
	public void setFarmerCropId(long farmerCropId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerCropId = farmerCropId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCropAndVariety() {
		if (_cropAndVariety == null) {
			return "";
		}
		else {
			return _cropAndVariety;
		}
	}

	@Override
	public void setCropAndVariety(String cropAndVariety) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cropAndVariety = cropAndVariety;
	}

	@JSON
	@Override
	public String getArea() {
		if (_area == null) {
			return "";
		}
		else {
			return _area;
		}
	}

	@Override
	public void setArea(String area) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_area = area;
	}

	@JSON
	@Override
	public String getUnit() {
		if (_unit == null) {
			return "";
		}
		else {
			return _unit;
		}
	}

	@Override
	public void setUnit(String unit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unit = unit;
	}

	@JSON
	@Override
	public String getCropContent() {
		if (_cropContent == null) {
			return "";
		}
		else {
			return _cropContent;
		}
	}

	@Override
	public void setCropContent(String cropContent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cropContent = cropContent;
	}

	@JSON
	@Override
	public Date getPlantingDate() {
		return _plantingDate;
	}

	@Override
	public void setPlantingDate(Date plantingDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_plantingDate = plantingDate;
	}

	@JSON
	@Override
	public String getMajorMarket() {
		if (_majorMarket == null) {
			return "";
		}
		else {
			return _majorMarket;
		}
	}

	@Override
	public void setMajorMarket(String majorMarket) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_majorMarket = majorMarket;
	}

	@JSON
	@Override
	public String getMajorMarketPercentSold() {
		if (_majorMarketPercentSold == null) {
			return "";
		}
		else {
			return _majorMarketPercentSold;
		}
	}

	@Override
	public void setMajorMarketPercentSold(String majorMarketPercentSold) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_majorMarketPercentSold = majorMarketPercentSold;
	}

	@JSON
	@Override
	public String getMinorMarket() {
		if (_minorMarket == null) {
			return "";
		}
		else {
			return _minorMarket;
		}
	}

	@Override
	public void setMinorMarket(String minorMarket) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minorMarket = minorMarket;
	}

	@JSON
	@Override
	public String getMinorMarketPercentSold() {
		if (_minorMarketPercentSold == null) {
			return "";
		}
		else {
			return _minorMarketPercentSold;
		}
	}

	@Override
	public void setMinorMarketPercentSold(String minorMarketPercentSold) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minorMarketPercentSold = minorMarketPercentSold;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public String getPropertyId02() {
		if (_propertyId02 == null) {
			return "";
		}
		else {
			return _propertyId02;
		}
	}

	@Override
	public void setPropertyId02(String propertyId02) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyId02 = propertyId02;
	}

	@JSON
	@Override
	public String getPropertyId03() {
		if (_propertyId03 == null) {
			return "";
		}
		else {
			return _propertyId03;
		}
	}

	@Override
	public void setPropertyId03(String propertyId03) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyId03 = propertyId03;
	}

	@JSON
	@Override
	public String getCropCounter() {
		if (_cropCounter == null) {
			return "";
		}
		else {
			return _cropCounter;
		}
	}

	@Override
	public void setCropCounter(String cropCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cropCounter = cropCounter;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerCrop.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerCrop toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerCrop>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerCropImpl farmerCropImpl = new FarmerCropImpl();

		farmerCropImpl.setFarmerCropId(getFarmerCropId());
		farmerCropImpl.setGroupId(getGroupId());
		farmerCropImpl.setCompanyId(getCompanyId());
		farmerCropImpl.setUserId(getUserId());
		farmerCropImpl.setUserName(getUserName());
		farmerCropImpl.setCreateDate(getCreateDate());
		farmerCropImpl.setModifiedDate(getModifiedDate());
		farmerCropImpl.setCropAndVariety(getCropAndVariety());
		farmerCropImpl.setArea(getArea());
		farmerCropImpl.setUnit(getUnit());
		farmerCropImpl.setCropContent(getCropContent());
		farmerCropImpl.setPlantingDate(getPlantingDate());
		farmerCropImpl.setMajorMarket(getMajorMarket());
		farmerCropImpl.setMajorMarketPercentSold(getMajorMarketPercentSold());
		farmerCropImpl.setMinorMarket(getMinorMarket());
		farmerCropImpl.setMinorMarketPercentSold(getMinorMarketPercentSold());
		farmerCropImpl.setRemarks(getRemarks());
		farmerCropImpl.setPropertyId02(getPropertyId02());
		farmerCropImpl.setPropertyId03(getPropertyId03());
		farmerCropImpl.setCropCounter(getCropCounter());
		farmerCropImpl.setFarmerApplicationId(getFarmerApplicationId());

		farmerCropImpl.resetOriginalValues();

		return farmerCropImpl;
	}

	@Override
	public FarmerCrop cloneWithOriginalValues() {
		FarmerCropImpl farmerCropImpl = new FarmerCropImpl();

		farmerCropImpl.setFarmerCropId(
			this.<Long>getColumnOriginalValue("farmerCropId"));
		farmerCropImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		farmerCropImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerCropImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		farmerCropImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerCropImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerCropImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerCropImpl.setCropAndVariety(
			this.<String>getColumnOriginalValue("cropAndVariety"));
		farmerCropImpl.setArea(this.<String>getColumnOriginalValue("area"));
		farmerCropImpl.setUnit(this.<String>getColumnOriginalValue("unit"));
		farmerCropImpl.setCropContent(
			this.<String>getColumnOriginalValue("cropContent"));
		farmerCropImpl.setPlantingDate(
			this.<Date>getColumnOriginalValue("plantingDate"));
		farmerCropImpl.setMajorMarket(
			this.<String>getColumnOriginalValue("majorMarket"));
		farmerCropImpl.setMajorMarketPercentSold(
			this.<String>getColumnOriginalValue("majorMarketPercentSold"));
		farmerCropImpl.setMinorMarket(
			this.<String>getColumnOriginalValue("minorMarket"));
		farmerCropImpl.setMinorMarketPercentSold(
			this.<String>getColumnOriginalValue("minorMarketPercentSold"));
		farmerCropImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		farmerCropImpl.setPropertyId02(
			this.<String>getColumnOriginalValue("propertyId02"));
		farmerCropImpl.setPropertyId03(
			this.<String>getColumnOriginalValue("propertyId03"));
		farmerCropImpl.setCropCounter(
			this.<String>getColumnOriginalValue("cropCounter"));
		farmerCropImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));

		return farmerCropImpl;
	}

	@Override
	public int compareTo(FarmerCrop farmerCrop) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), farmerCrop.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerCrop)) {
			return false;
		}

		FarmerCrop farmerCrop = (FarmerCrop)object;

		long primaryKey = farmerCrop.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerCrop> toCacheModel() {
		FarmerCropCacheModel farmerCropCacheModel = new FarmerCropCacheModel();

		farmerCropCacheModel.farmerCropId = getFarmerCropId();

		farmerCropCacheModel.groupId = getGroupId();

		farmerCropCacheModel.companyId = getCompanyId();

		farmerCropCacheModel.userId = getUserId();

		farmerCropCacheModel.userName = getUserName();

		String userName = farmerCropCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerCropCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerCropCacheModel.createDate = createDate.getTime();
		}
		else {
			farmerCropCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerCropCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			farmerCropCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerCropCacheModel.cropAndVariety = getCropAndVariety();

		String cropAndVariety = farmerCropCacheModel.cropAndVariety;

		if ((cropAndVariety != null) && (cropAndVariety.length() == 0)) {
			farmerCropCacheModel.cropAndVariety = null;
		}

		farmerCropCacheModel.area = getArea();

		String area = farmerCropCacheModel.area;

		if ((area != null) && (area.length() == 0)) {
			farmerCropCacheModel.area = null;
		}

		farmerCropCacheModel.unit = getUnit();

		String unit = farmerCropCacheModel.unit;

		if ((unit != null) && (unit.length() == 0)) {
			farmerCropCacheModel.unit = null;
		}

		farmerCropCacheModel.cropContent = getCropContent();

		String cropContent = farmerCropCacheModel.cropContent;

		if ((cropContent != null) && (cropContent.length() == 0)) {
			farmerCropCacheModel.cropContent = null;
		}

		Date plantingDate = getPlantingDate();

		if (plantingDate != null) {
			farmerCropCacheModel.plantingDate = plantingDate.getTime();
		}
		else {
			farmerCropCacheModel.plantingDate = Long.MIN_VALUE;
		}

		farmerCropCacheModel.majorMarket = getMajorMarket();

		String majorMarket = farmerCropCacheModel.majorMarket;

		if ((majorMarket != null) && (majorMarket.length() == 0)) {
			farmerCropCacheModel.majorMarket = null;
		}

		farmerCropCacheModel.majorMarketPercentSold =
			getMajorMarketPercentSold();

		String majorMarketPercentSold =
			farmerCropCacheModel.majorMarketPercentSold;

		if ((majorMarketPercentSold != null) &&
			(majorMarketPercentSold.length() == 0)) {

			farmerCropCacheModel.majorMarketPercentSold = null;
		}

		farmerCropCacheModel.minorMarket = getMinorMarket();

		String minorMarket = farmerCropCacheModel.minorMarket;

		if ((minorMarket != null) && (minorMarket.length() == 0)) {
			farmerCropCacheModel.minorMarket = null;
		}

		farmerCropCacheModel.minorMarketPercentSold =
			getMinorMarketPercentSold();

		String minorMarketPercentSold =
			farmerCropCacheModel.minorMarketPercentSold;

		if ((minorMarketPercentSold != null) &&
			(minorMarketPercentSold.length() == 0)) {

			farmerCropCacheModel.minorMarketPercentSold = null;
		}

		farmerCropCacheModel.remarks = getRemarks();

		String remarks = farmerCropCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			farmerCropCacheModel.remarks = null;
		}

		farmerCropCacheModel.propertyId02 = getPropertyId02();

		String propertyId02 = farmerCropCacheModel.propertyId02;

		if ((propertyId02 != null) && (propertyId02.length() == 0)) {
			farmerCropCacheModel.propertyId02 = null;
		}

		farmerCropCacheModel.propertyId03 = getPropertyId03();

		String propertyId03 = farmerCropCacheModel.propertyId03;

		if ((propertyId03 != null) && (propertyId03.length() == 0)) {
			farmerCropCacheModel.propertyId03 = null;
		}

		farmerCropCacheModel.cropCounter = getCropCounter();

		String cropCounter = farmerCropCacheModel.cropCounter;

		if ((cropCounter != null) && (cropCounter.length() == 0)) {
			farmerCropCacheModel.cropCounter = null;
		}

		farmerCropCacheModel.farmerApplicationId = getFarmerApplicationId();

		return farmerCropCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerCrop, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerCrop, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerCrop, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FarmerCrop)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmerCrop>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _farmerCropId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _cropAndVariety;
	private String _area;
	private String _unit;
	private String _cropContent;
	private Date _plantingDate;
	private String _majorMarket;
	private String _majorMarketPercentSold;
	private String _minorMarket;
	private String _minorMarketPercentSold;
	private String _remarks;
	private String _propertyId02;
	private String _propertyId03;
	private String _cropCounter;
	private long _farmerApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FarmerCrop, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerCrop)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("farmerCropId", _farmerCropId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("cropAndVariety", _cropAndVariety);
		_columnOriginalValues.put("area", _area);
		_columnOriginalValues.put("unit", _unit);
		_columnOriginalValues.put("cropContent", _cropContent);
		_columnOriginalValues.put("plantingDate", _plantingDate);
		_columnOriginalValues.put("majorMarket", _majorMarket);
		_columnOriginalValues.put(
			"majorMarketPercentSold", _majorMarketPercentSold);
		_columnOriginalValues.put("minorMarket", _minorMarket);
		_columnOriginalValues.put(
			"minorMarketPercentSold", _minorMarketPercentSold);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("propertyId02", _propertyId02);
		_columnOriginalValues.put("propertyId03", _propertyId03);
		_columnOriginalValues.put("cropCounter", _cropCounter);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmerCropId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("cropAndVariety", 128L);

		columnBitmasks.put("area", 256L);

		columnBitmasks.put("unit", 512L);

		columnBitmasks.put("cropContent", 1024L);

		columnBitmasks.put("plantingDate", 2048L);

		columnBitmasks.put("majorMarket", 4096L);

		columnBitmasks.put("majorMarketPercentSold", 8192L);

		columnBitmasks.put("minorMarket", 16384L);

		columnBitmasks.put("minorMarketPercentSold", 32768L);

		columnBitmasks.put("remarks", 65536L);

		columnBitmasks.put("propertyId02", 131072L);

		columnBitmasks.put("propertyId03", 262144L);

		columnBitmasks.put("cropCounter", 524288L);

		columnBitmasks.put("farmerApplicationId", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerCrop _escapedModel;

}