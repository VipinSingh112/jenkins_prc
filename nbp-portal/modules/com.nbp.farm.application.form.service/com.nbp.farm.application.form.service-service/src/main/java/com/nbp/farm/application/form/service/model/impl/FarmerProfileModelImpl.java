/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.form.service.model.FarmerProfile;
import com.nbp.farm.application.form.service.model.FarmerProfileModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerProfile service. Represents a row in the &quot;farmer_profile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerProfileModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerProfileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerProfileImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerProfileModelImpl
	extends BaseModelImpl<FarmerProfile> implements FarmerProfileModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer profile model instance should use the <code>FarmerProfile</code> interface instead.
	 */
	public static final String TABLE_NAME = "farmer_profile";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmerProfileId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"respondent", Types.VARCHAR},
		{"manager", Types.VARCHAR}, {"liveOnFarm", Types.VARCHAR},
		{"livelihood", Types.VARCHAR}, {"educationLevel", Types.VARCHAR},
		{"mainOccupation", Types.VARCHAR}, {"agriiInstitution", Types.VARCHAR},
		{"qualification", Types.VARCHAR}, {"agriTraining", Types.VARCHAR},
		{"trainingMethod", Types.VARCHAR}, {"mainAgriActivity", Types.VARCHAR},
		{"neareshPoliceStation", Types.VARCHAR},
		{"jasBranchGroup", Types.VARCHAR}, {"holdingStartYear", Types.VARCHAR},
		{"farmerType", Types.VARCHAR}, {"remarks", Types.VARCHAR},
		{"mainInformationSources", Types.VARCHAR},
		{"farmerApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmerProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("respondent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("liveOnFarm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("livelihood", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("educationLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mainOccupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agriiInstitution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agriTraining", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainingMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mainAgriActivity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("neareshPoliceStation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jasBranchGroup", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("holdingStartYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mainInformationSources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table farmer_profile (farmerProfileId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,respondent VARCHAR(75) null,manager VARCHAR(75) null,liveOnFarm VARCHAR(75) null,livelihood VARCHAR(75) null,educationLevel VARCHAR(75) null,mainOccupation VARCHAR(75) null,agriiInstitution VARCHAR(75) null,qualification VARCHAR(75) null,agriTraining VARCHAR(75) null,trainingMethod VARCHAR(75) null,mainAgriActivity VARCHAR(75) null,neareshPoliceStation VARCHAR(75) null,jasBranchGroup VARCHAR(75) null,holdingStartYear VARCHAR(75) null,farmerType VARCHAR(75) null,remarks VARCHAR(500) null,mainInformationSources VARCHAR(500) null,farmerApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table farmer_profile";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerProfile.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY farmer_profile.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerProfileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerProfileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerProfileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerProfileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerProfile.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerProfile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerProfile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerProfile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerProfile, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerProfile)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerProfile, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerProfile, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerProfile)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerProfile, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerProfile, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmerProfile>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmerProfile.class.getClassLoader(), FarmerProfile.class,
			ModelWrapper.class);

		try {
			Constructor<FarmerProfile> constructor =
				(Constructor<FarmerProfile>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmerProfile, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmerProfile, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerProfile, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FarmerProfile, Object>>();
		Map<String, BiConsumer<FarmerProfile, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FarmerProfile, ?>>();

		attributeGetterFunctions.put(
			"farmerProfileId", FarmerProfile::getFarmerProfileId);
		attributeSetterBiConsumers.put(
			"farmerProfileId",
			(BiConsumer<FarmerProfile, Long>)FarmerProfile::setFarmerProfileId);
		attributeGetterFunctions.put("groupId", FarmerProfile::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerProfile, Long>)FarmerProfile::setGroupId);
		attributeGetterFunctions.put("companyId", FarmerProfile::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerProfile, Long>)FarmerProfile::setCompanyId);
		attributeGetterFunctions.put("userId", FarmerProfile::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerProfile, Long>)FarmerProfile::setUserId);
		attributeGetterFunctions.put("userName", FarmerProfile::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmerProfile::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerProfile, Date>)FarmerProfile::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerProfile::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerProfile, Date>)FarmerProfile::setModifiedDate);
		attributeGetterFunctions.put(
			"respondent", FarmerProfile::getRespondent);
		attributeSetterBiConsumers.put(
			"respondent",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setRespondent);
		attributeGetterFunctions.put("manager", FarmerProfile::getManager);
		attributeSetterBiConsumers.put(
			"manager",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setManager);
		attributeGetterFunctions.put(
			"liveOnFarm", FarmerProfile::getLiveOnFarm);
		attributeSetterBiConsumers.put(
			"liveOnFarm",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setLiveOnFarm);
		attributeGetterFunctions.put(
			"livelihood", FarmerProfile::getLivelihood);
		attributeSetterBiConsumers.put(
			"livelihood",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setLivelihood);
		attributeGetterFunctions.put(
			"educationLevel", FarmerProfile::getEducationLevel);
		attributeSetterBiConsumers.put(
			"educationLevel",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setEducationLevel);
		attributeGetterFunctions.put(
			"mainOccupation", FarmerProfile::getMainOccupation);
		attributeSetterBiConsumers.put(
			"mainOccupation",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setMainOccupation);
		attributeGetterFunctions.put(
			"agriiInstitution", FarmerProfile::getAgriiInstitution);
		attributeSetterBiConsumers.put(
			"agriiInstitution",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setAgriiInstitution);
		attributeGetterFunctions.put(
			"qualification", FarmerProfile::getQualification);
		attributeSetterBiConsumers.put(
			"qualification",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setQualification);
		attributeGetterFunctions.put(
			"agriTraining", FarmerProfile::getAgriTraining);
		attributeSetterBiConsumers.put(
			"agriTraining",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setAgriTraining);
		attributeGetterFunctions.put(
			"trainingMethod", FarmerProfile::getTrainingMethod);
		attributeSetterBiConsumers.put(
			"trainingMethod",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setTrainingMethod);
		attributeGetterFunctions.put(
			"mainAgriActivity", FarmerProfile::getMainAgriActivity);
		attributeSetterBiConsumers.put(
			"mainAgriActivity",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setMainAgriActivity);
		attributeGetterFunctions.put(
			"neareshPoliceStation", FarmerProfile::getNeareshPoliceStation);
		attributeSetterBiConsumers.put(
			"neareshPoliceStation",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setNeareshPoliceStation);
		attributeGetterFunctions.put(
			"jasBranchGroup", FarmerProfile::getJasBranchGroup);
		attributeSetterBiConsumers.put(
			"jasBranchGroup",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setJasBranchGroup);
		attributeGetterFunctions.put(
			"holdingStartYear", FarmerProfile::getHoldingStartYear);
		attributeSetterBiConsumers.put(
			"holdingStartYear",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setHoldingStartYear);
		attributeGetterFunctions.put(
			"farmerType", FarmerProfile::getFarmerType);
		attributeSetterBiConsumers.put(
			"farmerType",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setFarmerType);
		attributeGetterFunctions.put("remarks", FarmerProfile::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<FarmerProfile, String>)FarmerProfile::setRemarks);
		attributeGetterFunctions.put(
			"mainInformationSources", FarmerProfile::getMainInformationSources);
		attributeSetterBiConsumers.put(
			"mainInformationSources",
			(BiConsumer<FarmerProfile, String>)
				FarmerProfile::setMainInformationSources);
		attributeGetterFunctions.put(
			"farmerApplicationId", FarmerProfile::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmerProfile, Long>)
				FarmerProfile::setFarmerApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmerProfileId() {
		return _farmerProfileId;
	}

	@Override
	public void setFarmerProfileId(long farmerProfileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerProfileId = farmerProfileId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRespondent() {
		if (_respondent == null) {
			return "";
		}
		else {
			return _respondent;
		}
	}

	@Override
	public void setRespondent(String respondent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_respondent = respondent;
	}

	@JSON
	@Override
	public String getManager() {
		if (_manager == null) {
			return "";
		}
		else {
			return _manager;
		}
	}

	@Override
	public void setManager(String manager) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manager = manager;
	}

	@JSON
	@Override
	public String getLiveOnFarm() {
		if (_liveOnFarm == null) {
			return "";
		}
		else {
			return _liveOnFarm;
		}
	}

	@Override
	public void setLiveOnFarm(String liveOnFarm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_liveOnFarm = liveOnFarm;
	}

	@JSON
	@Override
	public String getLivelihood() {
		if (_livelihood == null) {
			return "";
		}
		else {
			return _livelihood;
		}
	}

	@Override
	public void setLivelihood(String livelihood) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_livelihood = livelihood;
	}

	@JSON
	@Override
	public String getEducationLevel() {
		if (_educationLevel == null) {
			return "";
		}
		else {
			return _educationLevel;
		}
	}

	@Override
	public void setEducationLevel(String educationLevel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_educationLevel = educationLevel;
	}

	@JSON
	@Override
	public String getMainOccupation() {
		if (_mainOccupation == null) {
			return "";
		}
		else {
			return _mainOccupation;
		}
	}

	@Override
	public void setMainOccupation(String mainOccupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mainOccupation = mainOccupation;
	}

	@JSON
	@Override
	public String getAgriiInstitution() {
		if (_agriiInstitution == null) {
			return "";
		}
		else {
			return _agriiInstitution;
		}
	}

	@Override
	public void setAgriiInstitution(String agriiInstitution) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agriiInstitution = agriiInstitution;
	}

	@JSON
	@Override
	public String getQualification() {
		if (_qualification == null) {
			return "";
		}
		else {
			return _qualification;
		}
	}

	@Override
	public void setQualification(String qualification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualification = qualification;
	}

	@JSON
	@Override
	public String getAgriTraining() {
		if (_agriTraining == null) {
			return "";
		}
		else {
			return _agriTraining;
		}
	}

	@Override
	public void setAgriTraining(String agriTraining) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agriTraining = agriTraining;
	}

	@JSON
	@Override
	public String getTrainingMethod() {
		if (_trainingMethod == null) {
			return "";
		}
		else {
			return _trainingMethod;
		}
	}

	@Override
	public void setTrainingMethod(String trainingMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trainingMethod = trainingMethod;
	}

	@JSON
	@Override
	public String getMainAgriActivity() {
		if (_mainAgriActivity == null) {
			return "";
		}
		else {
			return _mainAgriActivity;
		}
	}

	@Override
	public void setMainAgriActivity(String mainAgriActivity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mainAgriActivity = mainAgriActivity;
	}

	@JSON
	@Override
	public String getNeareshPoliceStation() {
		if (_neareshPoliceStation == null) {
			return "";
		}
		else {
			return _neareshPoliceStation;
		}
	}

	@Override
	public void setNeareshPoliceStation(String neareshPoliceStation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_neareshPoliceStation = neareshPoliceStation;
	}

	@JSON
	@Override
	public String getJasBranchGroup() {
		if (_jasBranchGroup == null) {
			return "";
		}
		else {
			return _jasBranchGroup;
		}
	}

	@Override
	public void setJasBranchGroup(String jasBranchGroup) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jasBranchGroup = jasBranchGroup;
	}

	@JSON
	@Override
	public String getHoldingStartYear() {
		if (_holdingStartYear == null) {
			return "";
		}
		else {
			return _holdingStartYear;
		}
	}

	@Override
	public void setHoldingStartYear(String holdingStartYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_holdingStartYear = holdingStartYear;
	}

	@JSON
	@Override
	public String getFarmerType() {
		if (_farmerType == null) {
			return "";
		}
		else {
			return _farmerType;
		}
	}

	@Override
	public void setFarmerType(String farmerType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerType = farmerType;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public String getMainInformationSources() {
		if (_mainInformationSources == null) {
			return "";
		}
		else {
			return _mainInformationSources;
		}
	}

	@Override
	public void setMainInformationSources(String mainInformationSources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mainInformationSources = mainInformationSources;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerProfile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerProfile toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerProfile>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerProfileImpl farmerProfileImpl = new FarmerProfileImpl();

		farmerProfileImpl.setFarmerProfileId(getFarmerProfileId());
		farmerProfileImpl.setGroupId(getGroupId());
		farmerProfileImpl.setCompanyId(getCompanyId());
		farmerProfileImpl.setUserId(getUserId());
		farmerProfileImpl.setUserName(getUserName());
		farmerProfileImpl.setCreateDate(getCreateDate());
		farmerProfileImpl.setModifiedDate(getModifiedDate());
		farmerProfileImpl.setRespondent(getRespondent());
		farmerProfileImpl.setManager(getManager());
		farmerProfileImpl.setLiveOnFarm(getLiveOnFarm());
		farmerProfileImpl.setLivelihood(getLivelihood());
		farmerProfileImpl.setEducationLevel(getEducationLevel());
		farmerProfileImpl.setMainOccupation(getMainOccupation());
		farmerProfileImpl.setAgriiInstitution(getAgriiInstitution());
		farmerProfileImpl.setQualification(getQualification());
		farmerProfileImpl.setAgriTraining(getAgriTraining());
		farmerProfileImpl.setTrainingMethod(getTrainingMethod());
		farmerProfileImpl.setMainAgriActivity(getMainAgriActivity());
		farmerProfileImpl.setNeareshPoliceStation(getNeareshPoliceStation());
		farmerProfileImpl.setJasBranchGroup(getJasBranchGroup());
		farmerProfileImpl.setHoldingStartYear(getHoldingStartYear());
		farmerProfileImpl.setFarmerType(getFarmerType());
		farmerProfileImpl.setRemarks(getRemarks());
		farmerProfileImpl.setMainInformationSources(
			getMainInformationSources());
		farmerProfileImpl.setFarmerApplicationId(getFarmerApplicationId());

		farmerProfileImpl.resetOriginalValues();

		return farmerProfileImpl;
	}

	@Override
	public FarmerProfile cloneWithOriginalValues() {
		FarmerProfileImpl farmerProfileImpl = new FarmerProfileImpl();

		farmerProfileImpl.setFarmerProfileId(
			this.<Long>getColumnOriginalValue("farmerProfileId"));
		farmerProfileImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerProfileImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerProfileImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmerProfileImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmerProfileImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerProfileImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerProfileImpl.setRespondent(
			this.<String>getColumnOriginalValue("respondent"));
		farmerProfileImpl.setManager(
			this.<String>getColumnOriginalValue("manager"));
		farmerProfileImpl.setLiveOnFarm(
			this.<String>getColumnOriginalValue("liveOnFarm"));
		farmerProfileImpl.setLivelihood(
			this.<String>getColumnOriginalValue("livelihood"));
		farmerProfileImpl.setEducationLevel(
			this.<String>getColumnOriginalValue("educationLevel"));
		farmerProfileImpl.setMainOccupation(
			this.<String>getColumnOriginalValue("mainOccupation"));
		farmerProfileImpl.setAgriiInstitution(
			this.<String>getColumnOriginalValue("agriiInstitution"));
		farmerProfileImpl.setQualification(
			this.<String>getColumnOriginalValue("qualification"));
		farmerProfileImpl.setAgriTraining(
			this.<String>getColumnOriginalValue("agriTraining"));
		farmerProfileImpl.setTrainingMethod(
			this.<String>getColumnOriginalValue("trainingMethod"));
		farmerProfileImpl.setMainAgriActivity(
			this.<String>getColumnOriginalValue("mainAgriActivity"));
		farmerProfileImpl.setNeareshPoliceStation(
			this.<String>getColumnOriginalValue("neareshPoliceStation"));
		farmerProfileImpl.setJasBranchGroup(
			this.<String>getColumnOriginalValue("jasBranchGroup"));
		farmerProfileImpl.setHoldingStartYear(
			this.<String>getColumnOriginalValue("holdingStartYear"));
		farmerProfileImpl.setFarmerType(
			this.<String>getColumnOriginalValue("farmerType"));
		farmerProfileImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		farmerProfileImpl.setMainInformationSources(
			this.<String>getColumnOriginalValue("mainInformationSources"));
		farmerProfileImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));

		return farmerProfileImpl;
	}

	@Override
	public int compareTo(FarmerProfile farmerProfile) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), farmerProfile.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerProfile)) {
			return false;
		}

		FarmerProfile farmerProfile = (FarmerProfile)object;

		long primaryKey = farmerProfile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerProfile> toCacheModel() {
		FarmerProfileCacheModel farmerProfileCacheModel =
			new FarmerProfileCacheModel();

		farmerProfileCacheModel.farmerProfileId = getFarmerProfileId();

		farmerProfileCacheModel.groupId = getGroupId();

		farmerProfileCacheModel.companyId = getCompanyId();

		farmerProfileCacheModel.userId = getUserId();

		farmerProfileCacheModel.userName = getUserName();

		String userName = farmerProfileCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmerProfileCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerProfileCacheModel.createDate = createDate.getTime();
		}
		else {
			farmerProfileCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerProfileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			farmerProfileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerProfileCacheModel.respondent = getRespondent();

		String respondent = farmerProfileCacheModel.respondent;

		if ((respondent != null) && (respondent.length() == 0)) {
			farmerProfileCacheModel.respondent = null;
		}

		farmerProfileCacheModel.manager = getManager();

		String manager = farmerProfileCacheModel.manager;

		if ((manager != null) && (manager.length() == 0)) {
			farmerProfileCacheModel.manager = null;
		}

		farmerProfileCacheModel.liveOnFarm = getLiveOnFarm();

		String liveOnFarm = farmerProfileCacheModel.liveOnFarm;

		if ((liveOnFarm != null) && (liveOnFarm.length() == 0)) {
			farmerProfileCacheModel.liveOnFarm = null;
		}

		farmerProfileCacheModel.livelihood = getLivelihood();

		String livelihood = farmerProfileCacheModel.livelihood;

		if ((livelihood != null) && (livelihood.length() == 0)) {
			farmerProfileCacheModel.livelihood = null;
		}

		farmerProfileCacheModel.educationLevel = getEducationLevel();

		String educationLevel = farmerProfileCacheModel.educationLevel;

		if ((educationLevel != null) && (educationLevel.length() == 0)) {
			farmerProfileCacheModel.educationLevel = null;
		}

		farmerProfileCacheModel.mainOccupation = getMainOccupation();

		String mainOccupation = farmerProfileCacheModel.mainOccupation;

		if ((mainOccupation != null) && (mainOccupation.length() == 0)) {
			farmerProfileCacheModel.mainOccupation = null;
		}

		farmerProfileCacheModel.agriiInstitution = getAgriiInstitution();

		String agriiInstitution = farmerProfileCacheModel.agriiInstitution;

		if ((agriiInstitution != null) && (agriiInstitution.length() == 0)) {
			farmerProfileCacheModel.agriiInstitution = null;
		}

		farmerProfileCacheModel.qualification = getQualification();

		String qualification = farmerProfileCacheModel.qualification;

		if ((qualification != null) && (qualification.length() == 0)) {
			farmerProfileCacheModel.qualification = null;
		}

		farmerProfileCacheModel.agriTraining = getAgriTraining();

		String agriTraining = farmerProfileCacheModel.agriTraining;

		if ((agriTraining != null) && (agriTraining.length() == 0)) {
			farmerProfileCacheModel.agriTraining = null;
		}

		farmerProfileCacheModel.trainingMethod = getTrainingMethod();

		String trainingMethod = farmerProfileCacheModel.trainingMethod;

		if ((trainingMethod != null) && (trainingMethod.length() == 0)) {
			farmerProfileCacheModel.trainingMethod = null;
		}

		farmerProfileCacheModel.mainAgriActivity = getMainAgriActivity();

		String mainAgriActivity = farmerProfileCacheModel.mainAgriActivity;

		if ((mainAgriActivity != null) && (mainAgriActivity.length() == 0)) {
			farmerProfileCacheModel.mainAgriActivity = null;
		}

		farmerProfileCacheModel.neareshPoliceStation =
			getNeareshPoliceStation();

		String neareshPoliceStation =
			farmerProfileCacheModel.neareshPoliceStation;

		if ((neareshPoliceStation != null) &&
			(neareshPoliceStation.length() == 0)) {

			farmerProfileCacheModel.neareshPoliceStation = null;
		}

		farmerProfileCacheModel.jasBranchGroup = getJasBranchGroup();

		String jasBranchGroup = farmerProfileCacheModel.jasBranchGroup;

		if ((jasBranchGroup != null) && (jasBranchGroup.length() == 0)) {
			farmerProfileCacheModel.jasBranchGroup = null;
		}

		farmerProfileCacheModel.holdingStartYear = getHoldingStartYear();

		String holdingStartYear = farmerProfileCacheModel.holdingStartYear;

		if ((holdingStartYear != null) && (holdingStartYear.length() == 0)) {
			farmerProfileCacheModel.holdingStartYear = null;
		}

		farmerProfileCacheModel.farmerType = getFarmerType();

		String farmerType = farmerProfileCacheModel.farmerType;

		if ((farmerType != null) && (farmerType.length() == 0)) {
			farmerProfileCacheModel.farmerType = null;
		}

		farmerProfileCacheModel.remarks = getRemarks();

		String remarks = farmerProfileCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			farmerProfileCacheModel.remarks = null;
		}

		farmerProfileCacheModel.mainInformationSources =
			getMainInformationSources();

		String mainInformationSources =
			farmerProfileCacheModel.mainInformationSources;

		if ((mainInformationSources != null) &&
			(mainInformationSources.length() == 0)) {

			farmerProfileCacheModel.mainInformationSources = null;
		}

		farmerProfileCacheModel.farmerApplicationId = getFarmerApplicationId();

		return farmerProfileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerProfile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerProfile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerProfile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FarmerProfile)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	
	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmerProfile>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _farmerProfileId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _respondent;
	private String _manager;
	private String _liveOnFarm;
	private String _livelihood;
	private String _educationLevel;
	private String _mainOccupation;
	private String _agriiInstitution;
	private String _qualification;
	private String _agriTraining;
	private String _trainingMethod;
	private String _mainAgriActivity;
	private String _neareshPoliceStation;
	private String _jasBranchGroup;
	private String _holdingStartYear;
	private String _farmerType;
	private String _remarks;
	private String _mainInformationSources;
	private long _farmerApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FarmerProfile, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerProfile)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("farmerProfileId", _farmerProfileId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("respondent", _respondent);
		_columnOriginalValues.put("manager", _manager);
		_columnOriginalValues.put("liveOnFarm", _liveOnFarm);
		_columnOriginalValues.put("livelihood", _livelihood);
		_columnOriginalValues.put("educationLevel", _educationLevel);
		_columnOriginalValues.put("mainOccupation", _mainOccupation);
		_columnOriginalValues.put("agriiInstitution", _agriiInstitution);
		_columnOriginalValues.put("qualification", _qualification);
		_columnOriginalValues.put("agriTraining", _agriTraining);
		_columnOriginalValues.put("trainingMethod", _trainingMethod);
		_columnOriginalValues.put("mainAgriActivity", _mainAgriActivity);
		_columnOriginalValues.put(
			"neareshPoliceStation", _neareshPoliceStation);
		_columnOriginalValues.put("jasBranchGroup", _jasBranchGroup);
		_columnOriginalValues.put("holdingStartYear", _holdingStartYear);
		_columnOriginalValues.put("farmerType", _farmerType);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put(
			"mainInformationSources", _mainInformationSources);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmerProfileId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("respondent", 128L);

		columnBitmasks.put("manager", 256L);

		columnBitmasks.put("liveOnFarm", 512L);

		columnBitmasks.put("livelihood", 1024L);

		columnBitmasks.put("educationLevel", 2048L);

		columnBitmasks.put("mainOccupation", 4096L);

		columnBitmasks.put("agriiInstitution", 8192L);

		columnBitmasks.put("qualification", 16384L);

		columnBitmasks.put("agriTraining", 32768L);

		columnBitmasks.put("trainingMethod", 65536L);

		columnBitmasks.put("mainAgriActivity", 131072L);

		columnBitmasks.put("neareshPoliceStation", 262144L);

		columnBitmasks.put("jasBranchGroup", 524288L);

		columnBitmasks.put("holdingStartYear", 1048576L);

		columnBitmasks.put("farmerType", 2097152L);

		columnBitmasks.put("remarks", 4194304L);

		columnBitmasks.put("mainInformationSources", 8388608L);

		columnBitmasks.put("farmerApplicationId", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerProfile _escapedModel;

}