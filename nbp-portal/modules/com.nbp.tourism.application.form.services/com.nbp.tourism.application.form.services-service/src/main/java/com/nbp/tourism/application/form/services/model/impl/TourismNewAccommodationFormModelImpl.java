/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismNewAccommodationForm;
import com.nbp.tourism.application.form.services.model.TourismNewAccommodationFormModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismNewAccommodationForm service. Represents a row in the &quot;nbp_tourism_new_accommodation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismNewAccommodationFormModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismNewAccommodationFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismNewAccommodationFormImpl
 * @generated
 */
@JSON(strict = true)
public class TourismNewAccommodationFormModelImpl
	extends BaseModelImpl<TourismNewAccommodationForm>
	implements TourismNewAccommodationFormModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism new accommodation form model instance should use the <code>TourismNewAccommodationForm</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_new_accommodation";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismNewAccoFormId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"accoDateOfApplication", Types.TIMESTAMP},
		{"accoTypeOfAccommodation", Types.VARCHAR},
		{"accoNameOfProperty", Types.VARCHAR},
		{"accoNameOfOwner", Types.VARCHAR}, {"accoLocation", Types.VARCHAR},
		{"accoCompanyNumber", Types.VARCHAR},
		{"accoBusinessRegistrationNumber", Types.VARCHAR},
		{"accoDateOfRegistration", Types.TIMESTAMP},
		{"accoOwnerTrnNumber", Types.VARCHAR}, {"accoTccNumber", Types.VARCHAR},
		{"accoExpiryDate", Types.TIMESTAMP},
		{"accoNameOfOperator", Types.VARCHAR},
		{"accoOperatorTrnNumber", Types.VARCHAR},
		{"accoOperatorTccNumber", Types.VARCHAR},
		{"accoOperatorExpiryDate", Types.TIMESTAMP},
		{"accoContactPerson", Types.VARCHAR},
		{"accoPositionHeld", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismNewAccoFormId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accoDateOfApplication", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accoTypeOfAccommodation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoNameOfProperty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoNameOfOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoCompanyNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoBusinessRegistrationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoDateOfRegistration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accoOwnerTrnNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoTccNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accoNameOfOperator", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoOperatorTrnNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoOperatorTccNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoOperatorExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accoContactPerson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoPositionHeld", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_new_accommodation (tourismNewAccoFormId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,accoDateOfApplication DATE null,accoTypeOfAccommodation VARCHAR(75) null,accoNameOfProperty VARCHAR(75) null,accoNameOfOwner VARCHAR(75) null,accoLocation VARCHAR(500) null,accoCompanyNumber VARCHAR(75) null,accoBusinessRegistrationNumber VARCHAR(75) null,accoDateOfRegistration DATE null,accoOwnerTrnNumber VARCHAR(75) null,accoTccNumber VARCHAR(75) null,accoExpiryDate DATE null,accoNameOfOperator VARCHAR(75) null,accoOperatorTrnNumber VARCHAR(75) null,accoOperatorTccNumber VARCHAR(75) null,accoOperatorExpiryDate DATE null,accoContactPerson VARCHAR(75) null,accoPositionHeld VARCHAR(75) null,tourismApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_new_accommodation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismNewAccommodationForm.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_new_accommodation.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismNewAccommodationFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismNewAccoFormId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismNewAccoFormId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismNewAccoFormId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismNewAccommodationForm.class;
	}

	@Override
	public String getModelClassName() {
		return TourismNewAccommodationForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismNewAccommodationForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TourismNewAccommodationForm, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAccommodationForm, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismNewAccommodationForm)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismNewAccommodationForm, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismNewAccommodationForm, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismNewAccommodationForm)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismNewAccommodationForm, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismNewAccommodationForm, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismNewAccommodationForm, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismNewAccommodationForm, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<TourismNewAccommodationForm, Object>>();

			attributeGetterFunctions.put(
				"tourismNewAccoFormId",
				TourismNewAccommodationForm::getTourismNewAccoFormId);
			attributeGetterFunctions.put(
				"groupId", TourismNewAccommodationForm::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismNewAccommodationForm::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismNewAccommodationForm::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismNewAccommodationForm::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismNewAccommodationForm::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", TourismNewAccommodationForm::getModifiedDate);
			attributeGetterFunctions.put(
				"accoDateOfApplication",
				TourismNewAccommodationForm::getAccoDateOfApplication);
			attributeGetterFunctions.put(
				"accoTypeOfAccommodation",
				TourismNewAccommodationForm::getAccoTypeOfAccommodation);
			attributeGetterFunctions.put(
				"accoNameOfProperty",
				TourismNewAccommodationForm::getAccoNameOfProperty);
			attributeGetterFunctions.put(
				"accoNameOfOwner",
				TourismNewAccommodationForm::getAccoNameOfOwner);
			attributeGetterFunctions.put(
				"accoLocation", TourismNewAccommodationForm::getAccoLocation);
			attributeGetterFunctions.put(
				"accoCompanyNumber",
				TourismNewAccommodationForm::getAccoCompanyNumber);
			attributeGetterFunctions.put(
				"accoBusinessRegistrationNumber",
				TourismNewAccommodationForm::getAccoBusinessRegistrationNumber);
			attributeGetterFunctions.put(
				"accoDateOfRegistration",
				TourismNewAccommodationForm::getAccoDateOfRegistration);
			attributeGetterFunctions.put(
				"accoOwnerTrnNumber",
				TourismNewAccommodationForm::getAccoOwnerTrnNumber);
			attributeGetterFunctions.put(
				"accoTccNumber", TourismNewAccommodationForm::getAccoTccNumber);
			attributeGetterFunctions.put(
				"accoExpiryDate",
				TourismNewAccommodationForm::getAccoExpiryDate);
			attributeGetterFunctions.put(
				"accoNameOfOperator",
				TourismNewAccommodationForm::getAccoNameOfOperator);
			attributeGetterFunctions.put(
				"accoOperatorTrnNumber",
				TourismNewAccommodationForm::getAccoOperatorTrnNumber);
			attributeGetterFunctions.put(
				"accoOperatorTccNumber",
				TourismNewAccommodationForm::getAccoOperatorTccNumber);
			attributeGetterFunctions.put(
				"accoOperatorExpiryDate",
				TourismNewAccommodationForm::getAccoOperatorExpiryDate);
			attributeGetterFunctions.put(
				"accoContactPerson",
				TourismNewAccommodationForm::getAccoContactPerson);
			attributeGetterFunctions.put(
				"accoPositionHeld",
				TourismNewAccommodationForm::getAccoPositionHeld);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismNewAccommodationForm::getTourismApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismNewAccommodationForm, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismNewAccommodationForm, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<TourismNewAccommodationForm, ?>>();

			attributeSetterBiConsumers.put(
				"tourismNewAccoFormId",
				(BiConsumer<TourismNewAccommodationForm, Long>)
					TourismNewAccommodationForm::setTourismNewAccoFormId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismNewAccommodationForm, Long>)
					TourismNewAccommodationForm::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismNewAccommodationForm, Long>)
					TourismNewAccommodationForm::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismNewAccommodationForm, Long>)
					TourismNewAccommodationForm::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismNewAccommodationForm, Date>)
					TourismNewAccommodationForm::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismNewAccommodationForm, Date>)
					TourismNewAccommodationForm::setModifiedDate);
			attributeSetterBiConsumers.put(
				"accoDateOfApplication",
				(BiConsumer<TourismNewAccommodationForm, Date>)
					TourismNewAccommodationForm::setAccoDateOfApplication);
			attributeSetterBiConsumers.put(
				"accoTypeOfAccommodation",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoTypeOfAccommodation);
			attributeSetterBiConsumers.put(
				"accoNameOfProperty",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoNameOfProperty);
			attributeSetterBiConsumers.put(
				"accoNameOfOwner",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoNameOfOwner);
			attributeSetterBiConsumers.put(
				"accoLocation",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoLocation);
			attributeSetterBiConsumers.put(
				"accoCompanyNumber",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoCompanyNumber);
			attributeSetterBiConsumers.put(
				"accoBusinessRegistrationNumber",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::
						setAccoBusinessRegistrationNumber);
			attributeSetterBiConsumers.put(
				"accoDateOfRegistration",
				(BiConsumer<TourismNewAccommodationForm, Date>)
					TourismNewAccommodationForm::setAccoDateOfRegistration);
			attributeSetterBiConsumers.put(
				"accoOwnerTrnNumber",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoOwnerTrnNumber);
			attributeSetterBiConsumers.put(
				"accoTccNumber",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoTccNumber);
			attributeSetterBiConsumers.put(
				"accoExpiryDate",
				(BiConsumer<TourismNewAccommodationForm, Date>)
					TourismNewAccommodationForm::setAccoExpiryDate);
			attributeSetterBiConsumers.put(
				"accoNameOfOperator",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoNameOfOperator);
			attributeSetterBiConsumers.put(
				"accoOperatorTrnNumber",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoOperatorTrnNumber);
			attributeSetterBiConsumers.put(
				"accoOperatorTccNumber",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoOperatorTccNumber);
			attributeSetterBiConsumers.put(
				"accoOperatorExpiryDate",
				(BiConsumer<TourismNewAccommodationForm, Date>)
					TourismNewAccommodationForm::setAccoOperatorExpiryDate);
			attributeSetterBiConsumers.put(
				"accoContactPerson",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoContactPerson);
			attributeSetterBiConsumers.put(
				"accoPositionHeld",
				(BiConsumer<TourismNewAccommodationForm, String>)
					TourismNewAccommodationForm::setAccoPositionHeld);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismNewAccommodationForm, Long>)
					TourismNewAccommodationForm::setTourismApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismNewAccoFormId() {
		return _tourismNewAccoFormId;
	}

	@Override
	public void setTourismNewAccoFormId(long tourismNewAccoFormId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismNewAccoFormId = tourismNewAccoFormId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getAccoDateOfApplication() {
		return _accoDateOfApplication;
	}

	@Override
	public void setAccoDateOfApplication(Date accoDateOfApplication) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoDateOfApplication = accoDateOfApplication;
	}

	@JSON
	@Override
	public String getAccoTypeOfAccommodation() {
		if (_accoTypeOfAccommodation == null) {
			return "";
		}
		else {
			return _accoTypeOfAccommodation;
		}
	}

	@Override
	public void setAccoTypeOfAccommodation(String accoTypeOfAccommodation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoTypeOfAccommodation = accoTypeOfAccommodation;
	}

	@JSON
	@Override
	public String getAccoNameOfProperty() {
		if (_accoNameOfProperty == null) {
			return "";
		}
		else {
			return _accoNameOfProperty;
		}
	}

	@Override
	public void setAccoNameOfProperty(String accoNameOfProperty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoNameOfProperty = accoNameOfProperty;
	}

	@JSON
	@Override
	public String getAccoNameOfOwner() {
		if (_accoNameOfOwner == null) {
			return "";
		}
		else {
			return _accoNameOfOwner;
		}
	}

	@Override
	public void setAccoNameOfOwner(String accoNameOfOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoNameOfOwner = accoNameOfOwner;
	}

	@JSON
	@Override
	public String getAccoLocation() {
		if (_accoLocation == null) {
			return "";
		}
		else {
			return _accoLocation;
		}
	}

	@Override
	public void setAccoLocation(String accoLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoLocation = accoLocation;
	}

	@JSON
	@Override
	public String getAccoCompanyNumber() {
		if (_accoCompanyNumber == null) {
			return "";
		}
		else {
			return _accoCompanyNumber;
		}
	}

	@Override
	public void setAccoCompanyNumber(String accoCompanyNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoCompanyNumber = accoCompanyNumber;
	}

	@JSON
	@Override
	public String getAccoBusinessRegistrationNumber() {
		if (_accoBusinessRegistrationNumber == null) {
			return "";
		}
		else {
			return _accoBusinessRegistrationNumber;
		}
	}

	@Override
	public void setAccoBusinessRegistrationNumber(
		String accoBusinessRegistrationNumber) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoBusinessRegistrationNumber = accoBusinessRegistrationNumber;
	}

	@JSON
	@Override
	public Date getAccoDateOfRegistration() {
		return _accoDateOfRegistration;
	}

	@Override
	public void setAccoDateOfRegistration(Date accoDateOfRegistration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoDateOfRegistration = accoDateOfRegistration;
	}

	@JSON
	@Override
	public String getAccoOwnerTrnNumber() {
		if (_accoOwnerTrnNumber == null) {
			return "";
		}
		else {
			return _accoOwnerTrnNumber;
		}
	}

	@Override
	public void setAccoOwnerTrnNumber(String accoOwnerTrnNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoOwnerTrnNumber = accoOwnerTrnNumber;
	}

	@JSON
	@Override
	public String getAccoTccNumber() {
		if (_accoTccNumber == null) {
			return "";
		}
		else {
			return _accoTccNumber;
		}
	}

	@Override
	public void setAccoTccNumber(String accoTccNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoTccNumber = accoTccNumber;
	}

	@JSON
	@Override
	public Date getAccoExpiryDate() {
		return _accoExpiryDate;
	}

	@Override
	public void setAccoExpiryDate(Date accoExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoExpiryDate = accoExpiryDate;
	}

	@JSON
	@Override
	public String getAccoNameOfOperator() {
		if (_accoNameOfOperator == null) {
			return "";
		}
		else {
			return _accoNameOfOperator;
		}
	}

	@Override
	public void setAccoNameOfOperator(String accoNameOfOperator) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoNameOfOperator = accoNameOfOperator;
	}

	@JSON
	@Override
	public String getAccoOperatorTrnNumber() {
		if (_accoOperatorTrnNumber == null) {
			return "";
		}
		else {
			return _accoOperatorTrnNumber;
		}
	}

	@Override
	public void setAccoOperatorTrnNumber(String accoOperatorTrnNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoOperatorTrnNumber = accoOperatorTrnNumber;
	}

	@JSON
	@Override
	public String getAccoOperatorTccNumber() {
		if (_accoOperatorTccNumber == null) {
			return "";
		}
		else {
			return _accoOperatorTccNumber;
		}
	}

	@Override
	public void setAccoOperatorTccNumber(String accoOperatorTccNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoOperatorTccNumber = accoOperatorTccNumber;
	}

	@JSON
	@Override
	public Date getAccoOperatorExpiryDate() {
		return _accoOperatorExpiryDate;
	}

	@Override
	public void setAccoOperatorExpiryDate(Date accoOperatorExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoOperatorExpiryDate = accoOperatorExpiryDate;
	}

	@JSON
	@Override
	public String getAccoContactPerson() {
		if (_accoContactPerson == null) {
			return "";
		}
		else {
			return _accoContactPerson;
		}
	}

	@Override
	public void setAccoContactPerson(String accoContactPerson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoContactPerson = accoContactPerson;
	}

	@JSON
	@Override
	public String getAccoPositionHeld() {
		if (_accoPositionHeld == null) {
			return "";
		}
		else {
			return _accoPositionHeld;
		}
	}

	@Override
	public void setAccoPositionHeld(String accoPositionHeld) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoPositionHeld = accoPositionHeld;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismNewAccommodationForm.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismNewAccommodationForm toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismNewAccommodationForm>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismNewAccommodationFormImpl tourismNewAccommodationFormImpl =
			new TourismNewAccommodationFormImpl();

		tourismNewAccommodationFormImpl.setTourismNewAccoFormId(
			getTourismNewAccoFormId());
		tourismNewAccommodationFormImpl.setGroupId(getGroupId());
		tourismNewAccommodationFormImpl.setCompanyId(getCompanyId());
		tourismNewAccommodationFormImpl.setUserId(getUserId());
		tourismNewAccommodationFormImpl.setUserName(getUserName());
		tourismNewAccommodationFormImpl.setCreateDate(getCreateDate());
		tourismNewAccommodationFormImpl.setModifiedDate(getModifiedDate());
		tourismNewAccommodationFormImpl.setAccoDateOfApplication(
			getAccoDateOfApplication());
		tourismNewAccommodationFormImpl.setAccoTypeOfAccommodation(
			getAccoTypeOfAccommodation());
		tourismNewAccommodationFormImpl.setAccoNameOfProperty(
			getAccoNameOfProperty());
		tourismNewAccommodationFormImpl.setAccoNameOfOwner(
			getAccoNameOfOwner());
		tourismNewAccommodationFormImpl.setAccoLocation(getAccoLocation());
		tourismNewAccommodationFormImpl.setAccoCompanyNumber(
			getAccoCompanyNumber());
		tourismNewAccommodationFormImpl.setAccoBusinessRegistrationNumber(
			getAccoBusinessRegistrationNumber());
		tourismNewAccommodationFormImpl.setAccoDateOfRegistration(
			getAccoDateOfRegistration());
		tourismNewAccommodationFormImpl.setAccoOwnerTrnNumber(
			getAccoOwnerTrnNumber());
		tourismNewAccommodationFormImpl.setAccoTccNumber(getAccoTccNumber());
		tourismNewAccommodationFormImpl.setAccoExpiryDate(getAccoExpiryDate());
		tourismNewAccommodationFormImpl.setAccoNameOfOperator(
			getAccoNameOfOperator());
		tourismNewAccommodationFormImpl.setAccoOperatorTrnNumber(
			getAccoOperatorTrnNumber());
		tourismNewAccommodationFormImpl.setAccoOperatorTccNumber(
			getAccoOperatorTccNumber());
		tourismNewAccommodationFormImpl.setAccoOperatorExpiryDate(
			getAccoOperatorExpiryDate());
		tourismNewAccommodationFormImpl.setAccoContactPerson(
			getAccoContactPerson());
		tourismNewAccommodationFormImpl.setAccoPositionHeld(
			getAccoPositionHeld());
		tourismNewAccommodationFormImpl.setTourismApplicationId(
			getTourismApplicationId());

		tourismNewAccommodationFormImpl.resetOriginalValues();

		return tourismNewAccommodationFormImpl;
	}

	@Override
	public TourismNewAccommodationForm cloneWithOriginalValues() {
		TourismNewAccommodationFormImpl tourismNewAccommodationFormImpl =
			new TourismNewAccommodationFormImpl();

		tourismNewAccommodationFormImpl.setTourismNewAccoFormId(
			this.<Long>getColumnOriginalValue("tourismNewAccoFormId"));
		tourismNewAccommodationFormImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismNewAccommodationFormImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismNewAccommodationFormImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismNewAccommodationFormImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismNewAccommodationFormImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismNewAccommodationFormImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismNewAccommodationFormImpl.setAccoDateOfApplication(
			this.<Date>getColumnOriginalValue("accoDateOfApplication"));
		tourismNewAccommodationFormImpl.setAccoTypeOfAccommodation(
			this.<String>getColumnOriginalValue("accoTypeOfAccommodation"));
		tourismNewAccommodationFormImpl.setAccoNameOfProperty(
			this.<String>getColumnOriginalValue("accoNameOfProperty"));
		tourismNewAccommodationFormImpl.setAccoNameOfOwner(
			this.<String>getColumnOriginalValue("accoNameOfOwner"));
		tourismNewAccommodationFormImpl.setAccoLocation(
			this.<String>getColumnOriginalValue("accoLocation"));
		tourismNewAccommodationFormImpl.setAccoCompanyNumber(
			this.<String>getColumnOriginalValue("accoCompanyNumber"));
		tourismNewAccommodationFormImpl.setAccoBusinessRegistrationNumber(
			this.<String>getColumnOriginalValue(
				"accoBusinessRegistrationNumber"));
		tourismNewAccommodationFormImpl.setAccoDateOfRegistration(
			this.<Date>getColumnOriginalValue("accoDateOfRegistration"));
		tourismNewAccommodationFormImpl.setAccoOwnerTrnNumber(
			this.<String>getColumnOriginalValue("accoOwnerTrnNumber"));
		tourismNewAccommodationFormImpl.setAccoTccNumber(
			this.<String>getColumnOriginalValue("accoTccNumber"));
		tourismNewAccommodationFormImpl.setAccoExpiryDate(
			this.<Date>getColumnOriginalValue("accoExpiryDate"));
		tourismNewAccommodationFormImpl.setAccoNameOfOperator(
			this.<String>getColumnOriginalValue("accoNameOfOperator"));
		tourismNewAccommodationFormImpl.setAccoOperatorTrnNumber(
			this.<String>getColumnOriginalValue("accoOperatorTrnNumber"));
		tourismNewAccommodationFormImpl.setAccoOperatorTccNumber(
			this.<String>getColumnOriginalValue("accoOperatorTccNumber"));
		tourismNewAccommodationFormImpl.setAccoOperatorExpiryDate(
			this.<Date>getColumnOriginalValue("accoOperatorExpiryDate"));
		tourismNewAccommodationFormImpl.setAccoContactPerson(
			this.<String>getColumnOriginalValue("accoContactPerson"));
		tourismNewAccommodationFormImpl.setAccoPositionHeld(
			this.<String>getColumnOriginalValue("accoPositionHeld"));
		tourismNewAccommodationFormImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));

		return tourismNewAccommodationFormImpl;
	}

	@Override
	public int compareTo(
		TourismNewAccommodationForm tourismNewAccommodationForm) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), tourismNewAccommodationForm.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismNewAccommodationForm)) {
			return false;
		}

		TourismNewAccommodationForm tourismNewAccommodationForm =
			(TourismNewAccommodationForm)object;

		long primaryKey = tourismNewAccommodationForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismNewAccommodationForm> toCacheModel() {
		TourismNewAccommodationFormCacheModel
			tourismNewAccommodationFormCacheModel =
				new TourismNewAccommodationFormCacheModel();

		tourismNewAccommodationFormCacheModel.tourismNewAccoFormId =
			getTourismNewAccoFormId();

		tourismNewAccommodationFormCacheModel.groupId = getGroupId();

		tourismNewAccommodationFormCacheModel.companyId = getCompanyId();

		tourismNewAccommodationFormCacheModel.userId = getUserId();

		tourismNewAccommodationFormCacheModel.userName = getUserName();

		String userName = tourismNewAccommodationFormCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismNewAccommodationFormCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismNewAccommodationFormCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismNewAccommodationFormCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismNewAccommodationFormCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismNewAccommodationFormCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date accoDateOfApplication = getAccoDateOfApplication();

		if (accoDateOfApplication != null) {
			tourismNewAccommodationFormCacheModel.accoDateOfApplication =
				accoDateOfApplication.getTime();
		}
		else {
			tourismNewAccommodationFormCacheModel.accoDateOfApplication =
				Long.MIN_VALUE;
		}

		tourismNewAccommodationFormCacheModel.accoTypeOfAccommodation =
			getAccoTypeOfAccommodation();

		String accoTypeOfAccommodation =
			tourismNewAccommodationFormCacheModel.accoTypeOfAccommodation;

		if ((accoTypeOfAccommodation != null) &&
			(accoTypeOfAccommodation.length() == 0)) {

			tourismNewAccommodationFormCacheModel.accoTypeOfAccommodation =
				null;
		}

		tourismNewAccommodationFormCacheModel.accoNameOfProperty =
			getAccoNameOfProperty();

		String accoNameOfProperty =
			tourismNewAccommodationFormCacheModel.accoNameOfProperty;

		if ((accoNameOfProperty != null) &&
			(accoNameOfProperty.length() == 0)) {

			tourismNewAccommodationFormCacheModel.accoNameOfProperty = null;
		}

		tourismNewAccommodationFormCacheModel.accoNameOfOwner =
			getAccoNameOfOwner();

		String accoNameOfOwner =
			tourismNewAccommodationFormCacheModel.accoNameOfOwner;

		if ((accoNameOfOwner != null) && (accoNameOfOwner.length() == 0)) {
			tourismNewAccommodationFormCacheModel.accoNameOfOwner = null;
		}

		tourismNewAccommodationFormCacheModel.accoLocation = getAccoLocation();

		String accoLocation =
			tourismNewAccommodationFormCacheModel.accoLocation;

		if ((accoLocation != null) && (accoLocation.length() == 0)) {
			tourismNewAccommodationFormCacheModel.accoLocation = null;
		}

		tourismNewAccommodationFormCacheModel.accoCompanyNumber =
			getAccoCompanyNumber();

		String accoCompanyNumber =
			tourismNewAccommodationFormCacheModel.accoCompanyNumber;

		if ((accoCompanyNumber != null) && (accoCompanyNumber.length() == 0)) {
			tourismNewAccommodationFormCacheModel.accoCompanyNumber = null;
		}

		tourismNewAccommodationFormCacheModel.accoBusinessRegistrationNumber =
			getAccoBusinessRegistrationNumber();

		String accoBusinessRegistrationNumber =
			tourismNewAccommodationFormCacheModel.
				accoBusinessRegistrationNumber;

		if ((accoBusinessRegistrationNumber != null) &&
			(accoBusinessRegistrationNumber.length() == 0)) {

			tourismNewAccommodationFormCacheModel.
				accoBusinessRegistrationNumber = null;
		}

		Date accoDateOfRegistration = getAccoDateOfRegistration();

		if (accoDateOfRegistration != null) {
			tourismNewAccommodationFormCacheModel.accoDateOfRegistration =
				accoDateOfRegistration.getTime();
		}
		else {
			tourismNewAccommodationFormCacheModel.accoDateOfRegistration =
				Long.MIN_VALUE;
		}

		tourismNewAccommodationFormCacheModel.accoOwnerTrnNumber =
			getAccoOwnerTrnNumber();

		String accoOwnerTrnNumber =
			tourismNewAccommodationFormCacheModel.accoOwnerTrnNumber;

		if ((accoOwnerTrnNumber != null) &&
			(accoOwnerTrnNumber.length() == 0)) {

			tourismNewAccommodationFormCacheModel.accoOwnerTrnNumber = null;
		}

		tourismNewAccommodationFormCacheModel.accoTccNumber =
			getAccoTccNumber();

		String accoTccNumber =
			tourismNewAccommodationFormCacheModel.accoTccNumber;

		if ((accoTccNumber != null) && (accoTccNumber.length() == 0)) {
			tourismNewAccommodationFormCacheModel.accoTccNumber = null;
		}

		Date accoExpiryDate = getAccoExpiryDate();

		if (accoExpiryDate != null) {
			tourismNewAccommodationFormCacheModel.accoExpiryDate =
				accoExpiryDate.getTime();
		}
		else {
			tourismNewAccommodationFormCacheModel.accoExpiryDate =
				Long.MIN_VALUE;
		}

		tourismNewAccommodationFormCacheModel.accoNameOfOperator =
			getAccoNameOfOperator();

		String accoNameOfOperator =
			tourismNewAccommodationFormCacheModel.accoNameOfOperator;

		if ((accoNameOfOperator != null) &&
			(accoNameOfOperator.length() == 0)) {

			tourismNewAccommodationFormCacheModel.accoNameOfOperator = null;
		}

		tourismNewAccommodationFormCacheModel.accoOperatorTrnNumber =
			getAccoOperatorTrnNumber();

		String accoOperatorTrnNumber =
			tourismNewAccommodationFormCacheModel.accoOperatorTrnNumber;

		if ((accoOperatorTrnNumber != null) &&
			(accoOperatorTrnNumber.length() == 0)) {

			tourismNewAccommodationFormCacheModel.accoOperatorTrnNumber = null;
		}

		tourismNewAccommodationFormCacheModel.accoOperatorTccNumber =
			getAccoOperatorTccNumber();

		String accoOperatorTccNumber =
			tourismNewAccommodationFormCacheModel.accoOperatorTccNumber;

		if ((accoOperatorTccNumber != null) &&
			(accoOperatorTccNumber.length() == 0)) {

			tourismNewAccommodationFormCacheModel.accoOperatorTccNumber = null;
		}

		Date accoOperatorExpiryDate = getAccoOperatorExpiryDate();

		if (accoOperatorExpiryDate != null) {
			tourismNewAccommodationFormCacheModel.accoOperatorExpiryDate =
				accoOperatorExpiryDate.getTime();
		}
		else {
			tourismNewAccommodationFormCacheModel.accoOperatorExpiryDate =
				Long.MIN_VALUE;
		}

		tourismNewAccommodationFormCacheModel.accoContactPerson =
			getAccoContactPerson();

		String accoContactPerson =
			tourismNewAccommodationFormCacheModel.accoContactPerson;

		if ((accoContactPerson != null) && (accoContactPerson.length() == 0)) {
			tourismNewAccommodationFormCacheModel.accoContactPerson = null;
		}

		tourismNewAccommodationFormCacheModel.accoPositionHeld =
			getAccoPositionHeld();

		String accoPositionHeld =
			tourismNewAccommodationFormCacheModel.accoPositionHeld;

		if ((accoPositionHeld != null) && (accoPositionHeld.length() == 0)) {
			tourismNewAccommodationFormCacheModel.accoPositionHeld = null;
		}

		tourismNewAccommodationFormCacheModel.tourismApplicationId =
			getTourismApplicationId();

		return tourismNewAccommodationFormCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismNewAccommodationForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TourismNewAccommodationForm, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAccommodationForm, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismNewAccommodationForm)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismNewAccommodationForm>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismNewAccommodationForm.class, ModelWrapper.class);

	}

	private long _tourismNewAccoFormId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _accoDateOfApplication;
	private String _accoTypeOfAccommodation;
	private String _accoNameOfProperty;
	private String _accoNameOfOwner;
	private String _accoLocation;
	private String _accoCompanyNumber;
	private String _accoBusinessRegistrationNumber;
	private Date _accoDateOfRegistration;
	private String _accoOwnerTrnNumber;
	private String _accoTccNumber;
	private Date _accoExpiryDate;
	private String _accoNameOfOperator;
	private String _accoOperatorTrnNumber;
	private String _accoOperatorTccNumber;
	private Date _accoOperatorExpiryDate;
	private String _accoContactPerson;
	private String _accoPositionHeld;
	private long _tourismApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismNewAccommodationForm, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismNewAccommodationForm)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"tourismNewAccoFormId", _tourismNewAccoFormId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"accoDateOfApplication", _accoDateOfApplication);
		_columnOriginalValues.put(
			"accoTypeOfAccommodation", _accoTypeOfAccommodation);
		_columnOriginalValues.put("accoNameOfProperty", _accoNameOfProperty);
		_columnOriginalValues.put("accoNameOfOwner", _accoNameOfOwner);
		_columnOriginalValues.put("accoLocation", _accoLocation);
		_columnOriginalValues.put("accoCompanyNumber", _accoCompanyNumber);
		_columnOriginalValues.put(
			"accoBusinessRegistrationNumber", _accoBusinessRegistrationNumber);
		_columnOriginalValues.put(
			"accoDateOfRegistration", _accoDateOfRegistration);
		_columnOriginalValues.put("accoOwnerTrnNumber", _accoOwnerTrnNumber);
		_columnOriginalValues.put("accoTccNumber", _accoTccNumber);
		_columnOriginalValues.put("accoExpiryDate", _accoExpiryDate);
		_columnOriginalValues.put("accoNameOfOperator", _accoNameOfOperator);
		_columnOriginalValues.put(
			"accoOperatorTrnNumber", _accoOperatorTrnNumber);
		_columnOriginalValues.put(
			"accoOperatorTccNumber", _accoOperatorTccNumber);
		_columnOriginalValues.put(
			"accoOperatorExpiryDate", _accoOperatorExpiryDate);
		_columnOriginalValues.put("accoContactPerson", _accoContactPerson);
		_columnOriginalValues.put("accoPositionHeld", _accoPositionHeld);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismNewAccoFormId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("accoDateOfApplication", 128L);

		columnBitmasks.put("accoTypeOfAccommodation", 256L);

		columnBitmasks.put("accoNameOfProperty", 512L);

		columnBitmasks.put("accoNameOfOwner", 1024L);

		columnBitmasks.put("accoLocation", 2048L);

		columnBitmasks.put("accoCompanyNumber", 4096L);

		columnBitmasks.put("accoBusinessRegistrationNumber", 8192L);

		columnBitmasks.put("accoDateOfRegistration", 16384L);

		columnBitmasks.put("accoOwnerTrnNumber", 32768L);

		columnBitmasks.put("accoTccNumber", 65536L);

		columnBitmasks.put("accoExpiryDate", 131072L);

		columnBitmasks.put("accoNameOfOperator", 262144L);

		columnBitmasks.put("accoOperatorTrnNumber", 524288L);

		columnBitmasks.put("accoOperatorTccNumber", 1048576L);

		columnBitmasks.put("accoOperatorExpiryDate", 2097152L);

		columnBitmasks.put("accoContactPerson", 4194304L);

		columnBitmasks.put("accoPositionHeld", 8388608L);

		columnBitmasks.put("tourismApplicationId", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismNewAccommodationForm _escapedModel;

}