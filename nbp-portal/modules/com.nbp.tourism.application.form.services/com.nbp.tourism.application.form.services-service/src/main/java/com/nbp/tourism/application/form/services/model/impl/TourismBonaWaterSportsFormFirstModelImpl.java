/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismBonaWaterSportsFormFirst;
import com.nbp.tourism.application.form.services.model.TourismBonaWaterSportsFormFirstModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismBonaWaterSportsFormFirst service. Represents a row in the &quot;nbp_tourism_bona_water_sff&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismBonaWaterSportsFormFirstModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismBonaWaterSportsFormFirstImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismBonaWaterSportsFormFirstImpl
 * @generated
 */
@JSON(strict = true)
public class TourismBonaWaterSportsFormFirstModelImpl
	extends BaseModelImpl<TourismBonaWaterSportsFormFirst>
	implements TourismBonaWaterSportsFormFirstModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism bona water sports form first model instance should use the <code>TourismBonaWaterSportsFormFirst</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_bona_water_sff";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismBonaWaterSFFirstId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"bonaWaterTypeOfAttract", Types.VARCHAR},
		{"bonaWaterPurposeOfIncentives", Types.VARCHAR},
		{"bonaWaterOtherIncPurpose", Types.VARCHAR},
		{"bonaNameOfWatersportsEntity", Types.VARCHAR},
		{"bonaWaterNameOfOwnerCompany", Types.VARCHAR},
		{"bonaWaterLocation", Types.VARCHAR},
		{"bonaWaterCompanyNo", Types.VARCHAR},
		{"bonaWaterBusinessRegisNo", Types.VARCHAR},
		{"bonaWaterDateOfRegistration", Types.TIMESTAMP},
		{"bonaWaterOwnerTrnNo", Types.VARCHAR},
		{"bonaWaterTccNo", Types.VARCHAR},
		{"bonaWaterExpiryDate", Types.VARCHAR},
		{"bonaWaterNameOfOperator", Types.VARCHAR},
		{"bonaWaterOperatorTrnNo", Types.VARCHAR},
		{"bonaWaterOperatorTccNo", Types.VARCHAR},
		{"bonaWaterOperatorExpiryDate", Types.TIMESTAMP},
		{"bonaWaterContactPerson", Types.VARCHAR},
		{"bonaWaterPositionHeld", Types.VARCHAR},
		{"bonaWaterbriefdescription", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismBonaWaterSFFirstId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bonaWaterTypeOfAttract", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterPurposeOfIncentives", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterOtherIncPurpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaNameOfWatersportsEntity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterNameOfOwnerCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterCompanyNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterBusinessRegisNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterDateOfRegistration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bonaWaterOwnerTrnNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterTccNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterExpiryDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterNameOfOperator", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterOperatorTrnNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterOperatorTccNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterOperatorExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bonaWaterContactPerson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterPositionHeld", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaWaterbriefdescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_bona_water_sff (tourismBonaWaterSFFirstId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,bonaWaterTypeOfAttract VARCHAR(75) null,bonaWaterPurposeOfIncentives VARCHAR(75) null,bonaWaterOtherIncPurpose VARCHAR(75) null,bonaNameOfWatersportsEntity VARCHAR(75) null,bonaWaterNameOfOwnerCompany VARCHAR(75) null,bonaWaterLocation VARCHAR(500) null,bonaWaterCompanyNo VARCHAR(75) null,bonaWaterBusinessRegisNo VARCHAR(75) null,bonaWaterDateOfRegistration DATE null,bonaWaterOwnerTrnNo VARCHAR(75) null,bonaWaterTccNo VARCHAR(75) null,bonaWaterExpiryDate VARCHAR(75) null,bonaWaterNameOfOperator VARCHAR(75) null,bonaWaterOperatorTrnNo VARCHAR(75) null,bonaWaterOperatorTccNo VARCHAR(75) null,bonaWaterOperatorExpiryDate DATE null,bonaWaterContactPerson VARCHAR(75) null,bonaWaterPositionHeld VARCHAR(75) null,bonaWaterbriefdescription VARCHAR(500) null,tourismApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_bona_water_sff";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismBonaWaterSportsFormFirst.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_bona_water_sff.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismBonaWaterSportsFormFirstModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismBonaWaterSFFirstId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismBonaWaterSFFirstId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismBonaWaterSFFirstId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismBonaWaterSportsFormFirst.class;
	}

	@Override
	public String getModelClassName() {
		return TourismBonaWaterSportsFormFirst.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismBonaWaterSportsFormFirst, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<TourismBonaWaterSportsFormFirst, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismBonaWaterSportsFormFirst, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismBonaWaterSportsFormFirst)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismBonaWaterSportsFormFirst, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismBonaWaterSportsFormFirst, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismBonaWaterSportsFormFirst)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismBonaWaterSportsFormFirst, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismBonaWaterSportsFormFirst, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismBonaWaterSportsFormFirst, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismBonaWaterSportsFormFirst, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<TourismBonaWaterSportsFormFirst, Object>>();

			attributeGetterFunctions.put(
				"tourismBonaWaterSFFirstId",
				TourismBonaWaterSportsFormFirst::getTourismBonaWaterSFFirstId);
			attributeGetterFunctions.put(
				"groupId", TourismBonaWaterSportsFormFirst::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismBonaWaterSportsFormFirst::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismBonaWaterSportsFormFirst::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismBonaWaterSportsFormFirst::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismBonaWaterSportsFormFirst::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				TourismBonaWaterSportsFormFirst::getModifiedDate);
			attributeGetterFunctions.put(
				"bonaWaterTypeOfAttract",
				TourismBonaWaterSportsFormFirst::getBonaWaterTypeOfAttract);
			attributeGetterFunctions.put(
				"bonaWaterPurposeOfIncentives",
				TourismBonaWaterSportsFormFirst::
					getBonaWaterPurposeOfIncentives);
			attributeGetterFunctions.put(
				"bonaWaterOtherIncPurpose",
				TourismBonaWaterSportsFormFirst::getBonaWaterOtherIncPurpose);
			attributeGetterFunctions.put(
				"bonaNameOfWatersportsEntity",
				TourismBonaWaterSportsFormFirst::
					getBonaNameOfWatersportsEntity);
			attributeGetterFunctions.put(
				"bonaWaterNameOfOwnerCompany",
				TourismBonaWaterSportsFormFirst::
					getBonaWaterNameOfOwnerCompany);
			attributeGetterFunctions.put(
				"bonaWaterLocation",
				TourismBonaWaterSportsFormFirst::getBonaWaterLocation);
			attributeGetterFunctions.put(
				"bonaWaterCompanyNo",
				TourismBonaWaterSportsFormFirst::getBonaWaterCompanyNo);
			attributeGetterFunctions.put(
				"bonaWaterBusinessRegisNo",
				TourismBonaWaterSportsFormFirst::getBonaWaterBusinessRegisNo);
			attributeGetterFunctions.put(
				"bonaWaterDateOfRegistration",
				TourismBonaWaterSportsFormFirst::
					getBonaWaterDateOfRegistration);
			attributeGetterFunctions.put(
				"bonaWaterOwnerTrnNo",
				TourismBonaWaterSportsFormFirst::getBonaWaterOwnerTrnNo);
			attributeGetterFunctions.put(
				"bonaWaterTccNo",
				TourismBonaWaterSportsFormFirst::getBonaWaterTccNo);
			attributeGetterFunctions.put(
				"bonaWaterExpiryDate",
				TourismBonaWaterSportsFormFirst::getBonaWaterExpiryDate);
			attributeGetterFunctions.put(
				"bonaWaterNameOfOperator",
				TourismBonaWaterSportsFormFirst::getBonaWaterNameOfOperator);
			attributeGetterFunctions.put(
				"bonaWaterOperatorTrnNo",
				TourismBonaWaterSportsFormFirst::getBonaWaterOperatorTrnNo);
			attributeGetterFunctions.put(
				"bonaWaterOperatorTccNo",
				TourismBonaWaterSportsFormFirst::getBonaWaterOperatorTccNo);
			attributeGetterFunctions.put(
				"bonaWaterOperatorExpiryDate",
				TourismBonaWaterSportsFormFirst::
					getBonaWaterOperatorExpiryDate);
			attributeGetterFunctions.put(
				"bonaWaterContactPerson",
				TourismBonaWaterSportsFormFirst::getBonaWaterContactPerson);
			attributeGetterFunctions.put(
				"bonaWaterPositionHeld",
				TourismBonaWaterSportsFormFirst::getBonaWaterPositionHeld);
			attributeGetterFunctions.put(
				"bonaWaterbriefdescription",
				TourismBonaWaterSportsFormFirst::getBonaWaterbriefdescription);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismBonaWaterSportsFormFirst::getTourismApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismBonaWaterSportsFormFirst, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismBonaWaterSportsFormFirst, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<TourismBonaWaterSportsFormFirst, ?>>();

			attributeSetterBiConsumers.put(
				"tourismBonaWaterSFFirstId",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Long>)
					TourismBonaWaterSportsFormFirst::
						setTourismBonaWaterSFFirstId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Long>)
					TourismBonaWaterSportsFormFirst::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Long>)
					TourismBonaWaterSportsFormFirst::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Long>)
					TourismBonaWaterSportsFormFirst::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Date>)
					TourismBonaWaterSportsFormFirst::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Date>)
					TourismBonaWaterSportsFormFirst::setModifiedDate);
			attributeSetterBiConsumers.put(
				"bonaWaterTypeOfAttract",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterTypeOfAttract);
			attributeSetterBiConsumers.put(
				"bonaWaterPurposeOfIncentives",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::
						setBonaWaterPurposeOfIncentives);
			attributeSetterBiConsumers.put(
				"bonaWaterOtherIncPurpose",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::
						setBonaWaterOtherIncPurpose);
			attributeSetterBiConsumers.put(
				"bonaNameOfWatersportsEntity",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::
						setBonaNameOfWatersportsEntity);
			attributeSetterBiConsumers.put(
				"bonaWaterNameOfOwnerCompany",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::
						setBonaWaterNameOfOwnerCompany);
			attributeSetterBiConsumers.put(
				"bonaWaterLocation",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterLocation);
			attributeSetterBiConsumers.put(
				"bonaWaterCompanyNo",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterCompanyNo);
			attributeSetterBiConsumers.put(
				"bonaWaterBusinessRegisNo",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::
						setBonaWaterBusinessRegisNo);
			attributeSetterBiConsumers.put(
				"bonaWaterDateOfRegistration",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Date>)
					TourismBonaWaterSportsFormFirst::
						setBonaWaterDateOfRegistration);
			attributeSetterBiConsumers.put(
				"bonaWaterOwnerTrnNo",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterOwnerTrnNo);
			attributeSetterBiConsumers.put(
				"bonaWaterTccNo",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterTccNo);
			attributeSetterBiConsumers.put(
				"bonaWaterExpiryDate",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterExpiryDate);
			attributeSetterBiConsumers.put(
				"bonaWaterNameOfOperator",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::
						setBonaWaterNameOfOperator);
			attributeSetterBiConsumers.put(
				"bonaWaterOperatorTrnNo",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterOperatorTrnNo);
			attributeSetterBiConsumers.put(
				"bonaWaterOperatorTccNo",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterOperatorTccNo);
			attributeSetterBiConsumers.put(
				"bonaWaterOperatorExpiryDate",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Date>)
					TourismBonaWaterSportsFormFirst::
						setBonaWaterOperatorExpiryDate);
			attributeSetterBiConsumers.put(
				"bonaWaterContactPerson",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterContactPerson);
			attributeSetterBiConsumers.put(
				"bonaWaterPositionHeld",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::setBonaWaterPositionHeld);
			attributeSetterBiConsumers.put(
				"bonaWaterbriefdescription",
				(BiConsumer<TourismBonaWaterSportsFormFirst, String>)
					TourismBonaWaterSportsFormFirst::
						setBonaWaterbriefdescription);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismBonaWaterSportsFormFirst, Long>)
					TourismBonaWaterSportsFormFirst::setTourismApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismBonaWaterSFFirstId() {
		return _tourismBonaWaterSFFirstId;
	}

	@Override
	public void setTourismBonaWaterSFFirstId(long tourismBonaWaterSFFirstId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismBonaWaterSFFirstId = tourismBonaWaterSFFirstId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBonaWaterTypeOfAttract() {
		if (_bonaWaterTypeOfAttract == null) {
			return "";
		}
		else {
			return _bonaWaterTypeOfAttract;
		}
	}

	@Override
	public void setBonaWaterTypeOfAttract(String bonaWaterTypeOfAttract) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterTypeOfAttract = bonaWaterTypeOfAttract;
	}

	@JSON
	@Override
	public String getBonaWaterPurposeOfIncentives() {
		if (_bonaWaterPurposeOfIncentives == null) {
			return "";
		}
		else {
			return _bonaWaterPurposeOfIncentives;
		}
	}

	@Override
	public void setBonaWaterPurposeOfIncentives(
		String bonaWaterPurposeOfIncentives) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterPurposeOfIncentives = bonaWaterPurposeOfIncentives;
	}

	@JSON
	@Override
	public String getBonaWaterOtherIncPurpose() {
		if (_bonaWaterOtherIncPurpose == null) {
			return "";
		}
		else {
			return _bonaWaterOtherIncPurpose;
		}
	}

	@Override
	public void setBonaWaterOtherIncPurpose(String bonaWaterOtherIncPurpose) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterOtherIncPurpose = bonaWaterOtherIncPurpose;
	}

	@JSON
	@Override
	public String getBonaNameOfWatersportsEntity() {
		if (_bonaNameOfWatersportsEntity == null) {
			return "";
		}
		else {
			return _bonaNameOfWatersportsEntity;
		}
	}

	@Override
	public void setBonaNameOfWatersportsEntity(
		String bonaNameOfWatersportsEntity) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaNameOfWatersportsEntity = bonaNameOfWatersportsEntity;
	}

	@JSON
	@Override
	public String getBonaWaterNameOfOwnerCompany() {
		if (_bonaWaterNameOfOwnerCompany == null) {
			return "";
		}
		else {
			return _bonaWaterNameOfOwnerCompany;
		}
	}

	@Override
	public void setBonaWaterNameOfOwnerCompany(
		String bonaWaterNameOfOwnerCompany) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterNameOfOwnerCompany = bonaWaterNameOfOwnerCompany;
	}

	@JSON
	@Override
	public String getBonaWaterLocation() {
		if (_bonaWaterLocation == null) {
			return "";
		}
		else {
			return _bonaWaterLocation;
		}
	}

	@Override
	public void setBonaWaterLocation(String bonaWaterLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterLocation = bonaWaterLocation;
	}

	@JSON
	@Override
	public String getBonaWaterCompanyNo() {
		if (_bonaWaterCompanyNo == null) {
			return "";
		}
		else {
			return _bonaWaterCompanyNo;
		}
	}

	@Override
	public void setBonaWaterCompanyNo(String bonaWaterCompanyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterCompanyNo = bonaWaterCompanyNo;
	}

	@JSON
	@Override
	public String getBonaWaterBusinessRegisNo() {
		if (_bonaWaterBusinessRegisNo == null) {
			return "";
		}
		else {
			return _bonaWaterBusinessRegisNo;
		}
	}

	@Override
	public void setBonaWaterBusinessRegisNo(String bonaWaterBusinessRegisNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterBusinessRegisNo = bonaWaterBusinessRegisNo;
	}

	@JSON
	@Override
	public Date getBonaWaterDateOfRegistration() {
		return _bonaWaterDateOfRegistration;
	}

	@Override
	public void setBonaWaterDateOfRegistration(
		Date bonaWaterDateOfRegistration) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterDateOfRegistration = bonaWaterDateOfRegistration;
	}

	@JSON
	@Override
	public String getBonaWaterOwnerTrnNo() {
		if (_bonaWaterOwnerTrnNo == null) {
			return "";
		}
		else {
			return _bonaWaterOwnerTrnNo;
		}
	}

	@Override
	public void setBonaWaterOwnerTrnNo(String bonaWaterOwnerTrnNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterOwnerTrnNo = bonaWaterOwnerTrnNo;
	}

	@JSON
	@Override
	public String getBonaWaterTccNo() {
		if (_bonaWaterTccNo == null) {
			return "";
		}
		else {
			return _bonaWaterTccNo;
		}
	}

	@Override
	public void setBonaWaterTccNo(String bonaWaterTccNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterTccNo = bonaWaterTccNo;
	}

	@JSON
	@Override
	public String getBonaWaterExpiryDate() {
		if (_bonaWaterExpiryDate == null) {
			return "";
		}
		else {
			return _bonaWaterExpiryDate;
		}
	}

	@Override
	public void setBonaWaterExpiryDate(String bonaWaterExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterExpiryDate = bonaWaterExpiryDate;
	}

	@JSON
	@Override
	public String getBonaWaterNameOfOperator() {
		if (_bonaWaterNameOfOperator == null) {
			return "";
		}
		else {
			return _bonaWaterNameOfOperator;
		}
	}

	@Override
	public void setBonaWaterNameOfOperator(String bonaWaterNameOfOperator) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterNameOfOperator = bonaWaterNameOfOperator;
	}

	@JSON
	@Override
	public String getBonaWaterOperatorTrnNo() {
		if (_bonaWaterOperatorTrnNo == null) {
			return "";
		}
		else {
			return _bonaWaterOperatorTrnNo;
		}
	}

	@Override
	public void setBonaWaterOperatorTrnNo(String bonaWaterOperatorTrnNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterOperatorTrnNo = bonaWaterOperatorTrnNo;
	}

	@JSON
	@Override
	public String getBonaWaterOperatorTccNo() {
		if (_bonaWaterOperatorTccNo == null) {
			return "";
		}
		else {
			return _bonaWaterOperatorTccNo;
		}
	}

	@Override
	public void setBonaWaterOperatorTccNo(String bonaWaterOperatorTccNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterOperatorTccNo = bonaWaterOperatorTccNo;
	}

	@JSON
	@Override
	public Date getBonaWaterOperatorExpiryDate() {
		return _bonaWaterOperatorExpiryDate;
	}

	@Override
	public void setBonaWaterOperatorExpiryDate(
		Date bonaWaterOperatorExpiryDate) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterOperatorExpiryDate = bonaWaterOperatorExpiryDate;
	}

	@JSON
	@Override
	public String getBonaWaterContactPerson() {
		if (_bonaWaterContactPerson == null) {
			return "";
		}
		else {
			return _bonaWaterContactPerson;
		}
	}

	@Override
	public void setBonaWaterContactPerson(String bonaWaterContactPerson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterContactPerson = bonaWaterContactPerson;
	}

	@JSON
	@Override
	public String getBonaWaterPositionHeld() {
		if (_bonaWaterPositionHeld == null) {
			return "";
		}
		else {
			return _bonaWaterPositionHeld;
		}
	}

	@Override
	public void setBonaWaterPositionHeld(String bonaWaterPositionHeld) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterPositionHeld = bonaWaterPositionHeld;
	}

	@JSON
	@Override
	public String getBonaWaterbriefdescription() {
		if (_bonaWaterbriefdescription == null) {
			return "";
		}
		else {
			return _bonaWaterbriefdescription;
		}
	}

	@Override
	public void setBonaWaterbriefdescription(String bonaWaterbriefdescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaWaterbriefdescription = bonaWaterbriefdescription;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismBonaWaterSportsFormFirst.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismBonaWaterSportsFormFirst toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismBonaWaterSportsFormFirst>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismBonaWaterSportsFormFirstImpl
			tourismBonaWaterSportsFormFirstImpl =
				new TourismBonaWaterSportsFormFirstImpl();

		tourismBonaWaterSportsFormFirstImpl.setTourismBonaWaterSFFirstId(
			getTourismBonaWaterSFFirstId());
		tourismBonaWaterSportsFormFirstImpl.setGroupId(getGroupId());
		tourismBonaWaterSportsFormFirstImpl.setCompanyId(getCompanyId());
		tourismBonaWaterSportsFormFirstImpl.setUserId(getUserId());
		tourismBonaWaterSportsFormFirstImpl.setUserName(getUserName());
		tourismBonaWaterSportsFormFirstImpl.setCreateDate(getCreateDate());
		tourismBonaWaterSportsFormFirstImpl.setModifiedDate(getModifiedDate());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterTypeOfAttract(
			getBonaWaterTypeOfAttract());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterPurposeOfIncentives(
			getBonaWaterPurposeOfIncentives());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOtherIncPurpose(
			getBonaWaterOtherIncPurpose());
		tourismBonaWaterSportsFormFirstImpl.setBonaNameOfWatersportsEntity(
			getBonaNameOfWatersportsEntity());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterNameOfOwnerCompany(
			getBonaWaterNameOfOwnerCompany());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterLocation(
			getBonaWaterLocation());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterCompanyNo(
			getBonaWaterCompanyNo());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterBusinessRegisNo(
			getBonaWaterBusinessRegisNo());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterDateOfRegistration(
			getBonaWaterDateOfRegistration());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOwnerTrnNo(
			getBonaWaterOwnerTrnNo());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterTccNo(
			getBonaWaterTccNo());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterExpiryDate(
			getBonaWaterExpiryDate());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterNameOfOperator(
			getBonaWaterNameOfOperator());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOperatorTrnNo(
			getBonaWaterOperatorTrnNo());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOperatorTccNo(
			getBonaWaterOperatorTccNo());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOperatorExpiryDate(
			getBonaWaterOperatorExpiryDate());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterContactPerson(
			getBonaWaterContactPerson());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterPositionHeld(
			getBonaWaterPositionHeld());
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterbriefdescription(
			getBonaWaterbriefdescription());
		tourismBonaWaterSportsFormFirstImpl.setTourismApplicationId(
			getTourismApplicationId());

		tourismBonaWaterSportsFormFirstImpl.resetOriginalValues();

		return tourismBonaWaterSportsFormFirstImpl;
	}

	@Override
	public TourismBonaWaterSportsFormFirst cloneWithOriginalValues() {
		TourismBonaWaterSportsFormFirstImpl
			tourismBonaWaterSportsFormFirstImpl =
				new TourismBonaWaterSportsFormFirstImpl();

		tourismBonaWaterSportsFormFirstImpl.setTourismBonaWaterSFFirstId(
			this.<Long>getColumnOriginalValue("tourismBonaWaterSFFirstId"));
		tourismBonaWaterSportsFormFirstImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismBonaWaterSportsFormFirstImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismBonaWaterSportsFormFirstImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismBonaWaterSportsFormFirstImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismBonaWaterSportsFormFirstImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismBonaWaterSportsFormFirstImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterTypeOfAttract(
			this.<String>getColumnOriginalValue("bonaWaterTypeOfAttract"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterPurposeOfIncentives(
			this.<String>getColumnOriginalValue(
				"bonaWaterPurposeOfIncentives"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOtherIncPurpose(
			this.<String>getColumnOriginalValue("bonaWaterOtherIncPurpose"));
		tourismBonaWaterSportsFormFirstImpl.setBonaNameOfWatersportsEntity(
			this.<String>getColumnOriginalValue("bonaNameOfWatersportsEntity"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterNameOfOwnerCompany(
			this.<String>getColumnOriginalValue("bonaWaterNameOfOwnerCompany"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterLocation(
			this.<String>getColumnOriginalValue("bonaWaterLocation"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterCompanyNo(
			this.<String>getColumnOriginalValue("bonaWaterCompanyNo"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterBusinessRegisNo(
			this.<String>getColumnOriginalValue("bonaWaterBusinessRegisNo"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterDateOfRegistration(
			this.<Date>getColumnOriginalValue("bonaWaterDateOfRegistration"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOwnerTrnNo(
			this.<String>getColumnOriginalValue("bonaWaterOwnerTrnNo"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterTccNo(
			this.<String>getColumnOriginalValue("bonaWaterTccNo"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterExpiryDate(
			this.<String>getColumnOriginalValue("bonaWaterExpiryDate"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterNameOfOperator(
			this.<String>getColumnOriginalValue("bonaWaterNameOfOperator"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOperatorTrnNo(
			this.<String>getColumnOriginalValue("bonaWaterOperatorTrnNo"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOperatorTccNo(
			this.<String>getColumnOriginalValue("bonaWaterOperatorTccNo"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterOperatorExpiryDate(
			this.<Date>getColumnOriginalValue("bonaWaterOperatorExpiryDate"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterContactPerson(
			this.<String>getColumnOriginalValue("bonaWaterContactPerson"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterPositionHeld(
			this.<String>getColumnOriginalValue("bonaWaterPositionHeld"));
		tourismBonaWaterSportsFormFirstImpl.setBonaWaterbriefdescription(
			this.<String>getColumnOriginalValue("bonaWaterbriefdescription"));
		tourismBonaWaterSportsFormFirstImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));

		return tourismBonaWaterSportsFormFirstImpl;
	}

	@Override
	public int compareTo(
		TourismBonaWaterSportsFormFirst tourismBonaWaterSportsFormFirst) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), tourismBonaWaterSportsFormFirst.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismBonaWaterSportsFormFirst)) {
			return false;
		}

		TourismBonaWaterSportsFormFirst tourismBonaWaterSportsFormFirst =
			(TourismBonaWaterSportsFormFirst)object;

		long primaryKey = tourismBonaWaterSportsFormFirst.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismBonaWaterSportsFormFirst> toCacheModel() {
		TourismBonaWaterSportsFormFirstCacheModel
			tourismBonaWaterSportsFormFirstCacheModel =
				new TourismBonaWaterSportsFormFirstCacheModel();

		tourismBonaWaterSportsFormFirstCacheModel.tourismBonaWaterSFFirstId =
			getTourismBonaWaterSFFirstId();

		tourismBonaWaterSportsFormFirstCacheModel.groupId = getGroupId();

		tourismBonaWaterSportsFormFirstCacheModel.companyId = getCompanyId();

		tourismBonaWaterSportsFormFirstCacheModel.userId = getUserId();

		tourismBonaWaterSportsFormFirstCacheModel.userName = getUserName();

		String userName = tourismBonaWaterSportsFormFirstCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismBonaWaterSportsFormFirstCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismBonaWaterSportsFormFirstCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismBonaWaterSportsFormFirstCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismBonaWaterSportsFormFirstCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismBonaWaterSportsFormFirstCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterTypeOfAttract =
			getBonaWaterTypeOfAttract();

		String bonaWaterTypeOfAttract =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterTypeOfAttract;

		if ((bonaWaterTypeOfAttract != null) &&
			(bonaWaterTypeOfAttract.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterTypeOfAttract =
				null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterPurposeOfIncentives =
			getBonaWaterPurposeOfIncentives();

		String bonaWaterPurposeOfIncentives =
			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterPurposeOfIncentives;

		if ((bonaWaterPurposeOfIncentives != null) &&
			(bonaWaterPurposeOfIncentives.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterPurposeOfIncentives = null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOtherIncPurpose =
			getBonaWaterOtherIncPurpose();

		String bonaWaterOtherIncPurpose =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOtherIncPurpose;

		if ((bonaWaterOtherIncPurpose != null) &&
			(bonaWaterOtherIncPurpose.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOtherIncPurpose =
				null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaNameOfWatersportsEntity =
			getBonaNameOfWatersportsEntity();

		String bonaNameOfWatersportsEntity =
			tourismBonaWaterSportsFormFirstCacheModel.
				bonaNameOfWatersportsEntity;

		if ((bonaNameOfWatersportsEntity != null) &&
			(bonaNameOfWatersportsEntity.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.
				bonaNameOfWatersportsEntity = null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterNameOfOwnerCompany =
			getBonaWaterNameOfOwnerCompany();

		String bonaWaterNameOfOwnerCompany =
			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterNameOfOwnerCompany;

		if ((bonaWaterNameOfOwnerCompany != null) &&
			(bonaWaterNameOfOwnerCompany.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterNameOfOwnerCompany = null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterLocation =
			getBonaWaterLocation();

		String bonaWaterLocation =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterLocation;

		if ((bonaWaterLocation != null) && (bonaWaterLocation.length() == 0)) {
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterLocation = null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterCompanyNo =
			getBonaWaterCompanyNo();

		String bonaWaterCompanyNo =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterCompanyNo;

		if ((bonaWaterCompanyNo != null) &&
			(bonaWaterCompanyNo.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterCompanyNo = null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterBusinessRegisNo =
			getBonaWaterBusinessRegisNo();

		String bonaWaterBusinessRegisNo =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterBusinessRegisNo;

		if ((bonaWaterBusinessRegisNo != null) &&
			(bonaWaterBusinessRegisNo.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterBusinessRegisNo =
				null;
		}

		Date bonaWaterDateOfRegistration = getBonaWaterDateOfRegistration();

		if (bonaWaterDateOfRegistration != null) {
			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterDateOfRegistration =
					bonaWaterDateOfRegistration.getTime();
		}
		else {
			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterDateOfRegistration = Long.MIN_VALUE;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOwnerTrnNo =
			getBonaWaterOwnerTrnNo();

		String bonaWaterOwnerTrnNo =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOwnerTrnNo;

		if ((bonaWaterOwnerTrnNo != null) &&
			(bonaWaterOwnerTrnNo.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOwnerTrnNo =
				null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterTccNo =
			getBonaWaterTccNo();

		String bonaWaterTccNo =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterTccNo;

		if ((bonaWaterTccNo != null) && (bonaWaterTccNo.length() == 0)) {
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterTccNo = null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterExpiryDate =
			getBonaWaterExpiryDate();

		String bonaWaterExpiryDate =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterExpiryDate;

		if ((bonaWaterExpiryDate != null) &&
			(bonaWaterExpiryDate.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterExpiryDate =
				null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterNameOfOperator =
			getBonaWaterNameOfOperator();

		String bonaWaterNameOfOperator =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterNameOfOperator;

		if ((bonaWaterNameOfOperator != null) &&
			(bonaWaterNameOfOperator.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterNameOfOperator =
				null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOperatorTrnNo =
			getBonaWaterOperatorTrnNo();

		String bonaWaterOperatorTrnNo =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOperatorTrnNo;

		if ((bonaWaterOperatorTrnNo != null) &&
			(bonaWaterOperatorTrnNo.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOperatorTrnNo =
				null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOperatorTccNo =
			getBonaWaterOperatorTccNo();

		String bonaWaterOperatorTccNo =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOperatorTccNo;

		if ((bonaWaterOperatorTccNo != null) &&
			(bonaWaterOperatorTccNo.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterOperatorTccNo =
				null;
		}

		Date bonaWaterOperatorExpiryDate = getBonaWaterOperatorExpiryDate();

		if (bonaWaterOperatorExpiryDate != null) {
			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterOperatorExpiryDate =
					bonaWaterOperatorExpiryDate.getTime();
		}
		else {
			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterOperatorExpiryDate = Long.MIN_VALUE;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterContactPerson =
			getBonaWaterContactPerson();

		String bonaWaterContactPerson =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterContactPerson;

		if ((bonaWaterContactPerson != null) &&
			(bonaWaterContactPerson.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterContactPerson =
				null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterPositionHeld =
			getBonaWaterPositionHeld();

		String bonaWaterPositionHeld =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterPositionHeld;

		if ((bonaWaterPositionHeld != null) &&
			(bonaWaterPositionHeld.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterPositionHeld =
				null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.bonaWaterbriefdescription =
			getBonaWaterbriefdescription();

		String bonaWaterbriefdescription =
			tourismBonaWaterSportsFormFirstCacheModel.bonaWaterbriefdescription;

		if ((bonaWaterbriefdescription != null) &&
			(bonaWaterbriefdescription.length() == 0)) {

			tourismBonaWaterSportsFormFirstCacheModel.
				bonaWaterbriefdescription = null;
		}

		tourismBonaWaterSportsFormFirstCacheModel.tourismApplicationId =
			getTourismApplicationId();

		return tourismBonaWaterSportsFormFirstCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismBonaWaterSportsFormFirst, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<TourismBonaWaterSportsFormFirst, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismBonaWaterSportsFormFirst, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismBonaWaterSportsFormFirst)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismBonaWaterSportsFormFirst>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismBonaWaterSportsFormFirst.class,
						ModelWrapper.class);

	}

	private long _tourismBonaWaterSFFirstId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _bonaWaterTypeOfAttract;
	private String _bonaWaterPurposeOfIncentives;
	private String _bonaWaterOtherIncPurpose;
	private String _bonaNameOfWatersportsEntity;
	private String _bonaWaterNameOfOwnerCompany;
	private String _bonaWaterLocation;
	private String _bonaWaterCompanyNo;
	private String _bonaWaterBusinessRegisNo;
	private Date _bonaWaterDateOfRegistration;
	private String _bonaWaterOwnerTrnNo;
	private String _bonaWaterTccNo;
	private String _bonaWaterExpiryDate;
	private String _bonaWaterNameOfOperator;
	private String _bonaWaterOperatorTrnNo;
	private String _bonaWaterOperatorTccNo;
	private Date _bonaWaterOperatorExpiryDate;
	private String _bonaWaterContactPerson;
	private String _bonaWaterPositionHeld;
	private String _bonaWaterbriefdescription;
	private long _tourismApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismBonaWaterSportsFormFirst, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismBonaWaterSportsFormFirst)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"tourismBonaWaterSFFirstId", _tourismBonaWaterSFFirstId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"bonaWaterTypeOfAttract", _bonaWaterTypeOfAttract);
		_columnOriginalValues.put(
			"bonaWaterPurposeOfIncentives", _bonaWaterPurposeOfIncentives);
		_columnOriginalValues.put(
			"bonaWaterOtherIncPurpose", _bonaWaterOtherIncPurpose);
		_columnOriginalValues.put(
			"bonaNameOfWatersportsEntity", _bonaNameOfWatersportsEntity);
		_columnOriginalValues.put(
			"bonaWaterNameOfOwnerCompany", _bonaWaterNameOfOwnerCompany);
		_columnOriginalValues.put("bonaWaterLocation", _bonaWaterLocation);
		_columnOriginalValues.put("bonaWaterCompanyNo", _bonaWaterCompanyNo);
		_columnOriginalValues.put(
			"bonaWaterBusinessRegisNo", _bonaWaterBusinessRegisNo);
		_columnOriginalValues.put(
			"bonaWaterDateOfRegistration", _bonaWaterDateOfRegistration);
		_columnOriginalValues.put("bonaWaterOwnerTrnNo", _bonaWaterOwnerTrnNo);
		_columnOriginalValues.put("bonaWaterTccNo", _bonaWaterTccNo);
		_columnOriginalValues.put("bonaWaterExpiryDate", _bonaWaterExpiryDate);
		_columnOriginalValues.put(
			"bonaWaterNameOfOperator", _bonaWaterNameOfOperator);
		_columnOriginalValues.put(
			"bonaWaterOperatorTrnNo", _bonaWaterOperatorTrnNo);
		_columnOriginalValues.put(
			"bonaWaterOperatorTccNo", _bonaWaterOperatorTccNo);
		_columnOriginalValues.put(
			"bonaWaterOperatorExpiryDate", _bonaWaterOperatorExpiryDate);
		_columnOriginalValues.put(
			"bonaWaterContactPerson", _bonaWaterContactPerson);
		_columnOriginalValues.put(
			"bonaWaterPositionHeld", _bonaWaterPositionHeld);
		_columnOriginalValues.put(
			"bonaWaterbriefdescription", _bonaWaterbriefdescription);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismBonaWaterSFFirstId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("bonaWaterTypeOfAttract", 128L);

		columnBitmasks.put("bonaWaterPurposeOfIncentives", 256L);

		columnBitmasks.put("bonaWaterOtherIncPurpose", 512L);

		columnBitmasks.put("bonaNameOfWatersportsEntity", 1024L);

		columnBitmasks.put("bonaWaterNameOfOwnerCompany", 2048L);

		columnBitmasks.put("bonaWaterLocation", 4096L);

		columnBitmasks.put("bonaWaterCompanyNo", 8192L);

		columnBitmasks.put("bonaWaterBusinessRegisNo", 16384L);

		columnBitmasks.put("bonaWaterDateOfRegistration", 32768L);

		columnBitmasks.put("bonaWaterOwnerTrnNo", 65536L);

		columnBitmasks.put("bonaWaterTccNo", 131072L);

		columnBitmasks.put("bonaWaterExpiryDate", 262144L);

		columnBitmasks.put("bonaWaterNameOfOperator", 524288L);

		columnBitmasks.put("bonaWaterOperatorTrnNo", 1048576L);

		columnBitmasks.put("bonaWaterOperatorTccNo", 2097152L);

		columnBitmasks.put("bonaWaterOperatorExpiryDate", 4194304L);

		columnBitmasks.put("bonaWaterContactPerson", 8388608L);

		columnBitmasks.put("bonaWaterPositionHeld", 16777216L);

		columnBitmasks.put("bonaWaterbriefdescription", 33554432L);

		columnBitmasks.put("tourismApplicationId", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismBonaWaterSportsFormFirst _escapedModel;

}