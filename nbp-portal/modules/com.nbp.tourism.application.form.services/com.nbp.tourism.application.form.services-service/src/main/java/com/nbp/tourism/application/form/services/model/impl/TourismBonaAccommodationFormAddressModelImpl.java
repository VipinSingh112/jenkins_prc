/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismBonaAccommodationFormAddress;
import com.nbp.tourism.application.form.services.model.TourismBonaAccommodationFormAddressModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismBonaAccommodationFormAddress service. Represents a row in the &quot;nbp_tourism_boma_acco_faoo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismBonaAccommodationFormAddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismBonaAccommodationFormAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismBonaAccommodationFormAddressImpl
 * @generated
 */
@JSON(strict = true)
public class TourismBonaAccommodationFormAddressModelImpl
	extends BaseModelImpl<TourismBonaAccommodationFormAddress>
	implements TourismBonaAccommodationFormAddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism bona accommodation form address model instance should use the <code>TourismBonaAccommodationFormAddress</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_boma_acco_faoo";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismBonaAccommodationFAOOId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"addressType", Types.VARCHAR}, {"bonaAccoAddress", Types.VARCHAR},
		{"bonaAccoTelephoneNumber", Types.VARCHAR},
		{"bonaAccoFaxNumber", Types.VARCHAR}, {"bonaAccoEmail", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT},
		{"tourismBonaAFId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismBonaAccommodationFAOOId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("addressType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaAccoAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaAccoTelephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaAccoFaxNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaAccoEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tourismBonaAFId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_boma_acco_faoo (tourismBonaAccommodationFAOOId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,addressType VARCHAR(75) null,bonaAccoAddress VARCHAR(500) null,bonaAccoTelephoneNumber VARCHAR(75) null,bonaAccoFaxNumber VARCHAR(75) null,bonaAccoEmail VARCHAR(75) null,tourismApplicationId LONG,tourismBonaAFId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_boma_acco_faoo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismBonaAccommodationFormAddress.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_boma_acco_faoo.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSTYPE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMBONAAFID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismBonaAccommodationFormAddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismBonaAccommodationFAOOId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismBonaAccommodationFAOOId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismBonaAccommodationFAOOId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismBonaAccommodationFormAddress.class;
	}

	@Override
	public String getModelClassName() {
		return TourismBonaAccommodationFormAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismBonaAccommodationFormAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<TourismBonaAccommodationFormAddress, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismBonaAccommodationFormAddress, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismBonaAccommodationFormAddress)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismBonaAccommodationFormAddress, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismBonaAccommodationFormAddress, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismBonaAccommodationFormAddress)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismBonaAccommodationFormAddress, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismBonaAccommodationFormAddress, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismBonaAccommodationFormAddress, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismBonaAccommodationFormAddress, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function
							 <TourismBonaAccommodationFormAddress, Object>>();

			attributeGetterFunctions.put(
				"tourismBonaAccommodationFAOOId",
				TourismBonaAccommodationFormAddress::
					getTourismBonaAccommodationFAOOId);
			attributeGetterFunctions.put(
				"groupId", TourismBonaAccommodationFormAddress::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismBonaAccommodationFormAddress::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismBonaAccommodationFormAddress::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismBonaAccommodationFormAddress::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				TourismBonaAccommodationFormAddress::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				TourismBonaAccommodationFormAddress::getModifiedDate);
			attributeGetterFunctions.put(
				"addressType",
				TourismBonaAccommodationFormAddress::getAddressType);
			attributeGetterFunctions.put(
				"bonaAccoAddress",
				TourismBonaAccommodationFormAddress::getBonaAccoAddress);
			attributeGetterFunctions.put(
				"bonaAccoTelephoneNumber",
				TourismBonaAccommodationFormAddress::
					getBonaAccoTelephoneNumber);
			attributeGetterFunctions.put(
				"bonaAccoFaxNumber",
				TourismBonaAccommodationFormAddress::getBonaAccoFaxNumber);
			attributeGetterFunctions.put(
				"bonaAccoEmail",
				TourismBonaAccommodationFormAddress::getBonaAccoEmail);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismBonaAccommodationFormAddress::getTourismApplicationId);
			attributeGetterFunctions.put(
				"tourismBonaAFId",
				TourismBonaAccommodationFormAddress::getTourismBonaAFId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismBonaAccommodationFormAddress, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismBonaAccommodationFormAddress, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<TourismBonaAccommodationFormAddress, ?>>();

			attributeSetterBiConsumers.put(
				"tourismBonaAccommodationFAOOId",
				(BiConsumer<TourismBonaAccommodationFormAddress, Long>)
					TourismBonaAccommodationFormAddress::
						setTourismBonaAccommodationFAOOId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismBonaAccommodationFormAddress, Long>)
					TourismBonaAccommodationFormAddress::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismBonaAccommodationFormAddress, Long>)
					TourismBonaAccommodationFormAddress::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismBonaAccommodationFormAddress, Long>)
					TourismBonaAccommodationFormAddress::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismBonaAccommodationFormAddress, String>)
					TourismBonaAccommodationFormAddress::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismBonaAccommodationFormAddress, Date>)
					TourismBonaAccommodationFormAddress::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismBonaAccommodationFormAddress, Date>)
					TourismBonaAccommodationFormAddress::setModifiedDate);
			attributeSetterBiConsumers.put(
				"addressType",
				(BiConsumer<TourismBonaAccommodationFormAddress, String>)
					TourismBonaAccommodationFormAddress::setAddressType);
			attributeSetterBiConsumers.put(
				"bonaAccoAddress",
				(BiConsumer<TourismBonaAccommodationFormAddress, String>)
					TourismBonaAccommodationFormAddress::setBonaAccoAddress);
			attributeSetterBiConsumers.put(
				"bonaAccoTelephoneNumber",
				(BiConsumer<TourismBonaAccommodationFormAddress, String>)
					TourismBonaAccommodationFormAddress::
						setBonaAccoTelephoneNumber);
			attributeSetterBiConsumers.put(
				"bonaAccoFaxNumber",
				(BiConsumer<TourismBonaAccommodationFormAddress, String>)
					TourismBonaAccommodationFormAddress::setBonaAccoFaxNumber);
			attributeSetterBiConsumers.put(
				"bonaAccoEmail",
				(BiConsumer<TourismBonaAccommodationFormAddress, String>)
					TourismBonaAccommodationFormAddress::setBonaAccoEmail);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismBonaAccommodationFormAddress, Long>)
					TourismBonaAccommodationFormAddress::
						setTourismApplicationId);
			attributeSetterBiConsumers.put(
				"tourismBonaAFId",
				(BiConsumer<TourismBonaAccommodationFormAddress, Long>)
					TourismBonaAccommodationFormAddress::setTourismBonaAFId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismBonaAccommodationFAOOId() {
		return _tourismBonaAccommodationFAOOId;
	}

	@Override
	public void setTourismBonaAccommodationFAOOId(
		long tourismBonaAccommodationFAOOId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismBonaAccommodationFAOOId = tourismBonaAccommodationFAOOId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAddressType() {
		if (_addressType == null) {
			return "";
		}
		else {
			return _addressType;
		}
	}

	@Override
	public void setAddressType(String addressType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressType = addressType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAddressType() {
		return getColumnOriginalValue("addressType");
	}

	@JSON
	@Override
	public String getBonaAccoAddress() {
		if (_bonaAccoAddress == null) {
			return "";
		}
		else {
			return _bonaAccoAddress;
		}
	}

	@Override
	public void setBonaAccoAddress(String bonaAccoAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaAccoAddress = bonaAccoAddress;
	}

	@JSON
	@Override
	public String getBonaAccoTelephoneNumber() {
		if (_bonaAccoTelephoneNumber == null) {
			return "";
		}
		else {
			return _bonaAccoTelephoneNumber;
		}
	}

	@Override
	public void setBonaAccoTelephoneNumber(String bonaAccoTelephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaAccoTelephoneNumber = bonaAccoTelephoneNumber;
	}

	@JSON
	@Override
	public String getBonaAccoFaxNumber() {
		if (_bonaAccoFaxNumber == null) {
			return "";
		}
		else {
			return _bonaAccoFaxNumber;
		}
	}

	@Override
	public void setBonaAccoFaxNumber(String bonaAccoFaxNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaAccoFaxNumber = bonaAccoFaxNumber;
	}

	@JSON
	@Override
	public String getBonaAccoEmail() {
		if (_bonaAccoEmail == null) {
			return "";
		}
		else {
			return _bonaAccoEmail;
		}
	}

	@Override
	public void setBonaAccoEmail(String bonaAccoEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaAccoEmail = bonaAccoEmail;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	@JSON
	@Override
	public long getTourismBonaAFId() {
		return _tourismBonaAFId;
	}

	@Override
	public void setTourismBonaAFId(long tourismBonaAFId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismBonaAFId = tourismBonaAFId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismBonaAFId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismBonaAFId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismBonaAccommodationFormAddress.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismBonaAccommodationFormAddress toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismBonaAccommodationFormAddress>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismBonaAccommodationFormAddressImpl
			tourismBonaAccommodationFormAddressImpl =
				new TourismBonaAccommodationFormAddressImpl();

		tourismBonaAccommodationFormAddressImpl.
			setTourismBonaAccommodationFAOOId(
				getTourismBonaAccommodationFAOOId());
		tourismBonaAccommodationFormAddressImpl.setGroupId(getGroupId());
		tourismBonaAccommodationFormAddressImpl.setCompanyId(getCompanyId());
		tourismBonaAccommodationFormAddressImpl.setUserId(getUserId());
		tourismBonaAccommodationFormAddressImpl.setUserName(getUserName());
		tourismBonaAccommodationFormAddressImpl.setCreateDate(getCreateDate());
		tourismBonaAccommodationFormAddressImpl.setModifiedDate(
			getModifiedDate());
		tourismBonaAccommodationFormAddressImpl.setAddressType(
			getAddressType());
		tourismBonaAccommodationFormAddressImpl.setBonaAccoAddress(
			getBonaAccoAddress());
		tourismBonaAccommodationFormAddressImpl.setBonaAccoTelephoneNumber(
			getBonaAccoTelephoneNumber());
		tourismBonaAccommodationFormAddressImpl.setBonaAccoFaxNumber(
			getBonaAccoFaxNumber());
		tourismBonaAccommodationFormAddressImpl.setBonaAccoEmail(
			getBonaAccoEmail());
		tourismBonaAccommodationFormAddressImpl.setTourismApplicationId(
			getTourismApplicationId());
		tourismBonaAccommodationFormAddressImpl.setTourismBonaAFId(
			getTourismBonaAFId());

		tourismBonaAccommodationFormAddressImpl.resetOriginalValues();

		return tourismBonaAccommodationFormAddressImpl;
	}

	@Override
	public TourismBonaAccommodationFormAddress cloneWithOriginalValues() {
		TourismBonaAccommodationFormAddressImpl
			tourismBonaAccommodationFormAddressImpl =
				new TourismBonaAccommodationFormAddressImpl();

		tourismBonaAccommodationFormAddressImpl.
			setTourismBonaAccommodationFAOOId(
				this.<Long>getColumnOriginalValue(
					"tourismBonaAccommodationFAOOId"));
		tourismBonaAccommodationFormAddressImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismBonaAccommodationFormAddressImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismBonaAccommodationFormAddressImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismBonaAccommodationFormAddressImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismBonaAccommodationFormAddressImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismBonaAccommodationFormAddressImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismBonaAccommodationFormAddressImpl.setAddressType(
			this.<String>getColumnOriginalValue("addressType"));
		tourismBonaAccommodationFormAddressImpl.setBonaAccoAddress(
			this.<String>getColumnOriginalValue("bonaAccoAddress"));
		tourismBonaAccommodationFormAddressImpl.setBonaAccoTelephoneNumber(
			this.<String>getColumnOriginalValue("bonaAccoTelephoneNumber"));
		tourismBonaAccommodationFormAddressImpl.setBonaAccoFaxNumber(
			this.<String>getColumnOriginalValue("bonaAccoFaxNumber"));
		tourismBonaAccommodationFormAddressImpl.setBonaAccoEmail(
			this.<String>getColumnOriginalValue("bonaAccoEmail"));
		tourismBonaAccommodationFormAddressImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
		tourismBonaAccommodationFormAddressImpl.setTourismBonaAFId(
			this.<Long>getColumnOriginalValue("tourismBonaAFId"));

		return tourismBonaAccommodationFormAddressImpl;
	}

	@Override
	public int compareTo(
		TourismBonaAccommodationFormAddress
			tourismBonaAccommodationFormAddress) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(),
			tourismBonaAccommodationFormAddress.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismBonaAccommodationFormAddress)) {
			return false;
		}

		TourismBonaAccommodationFormAddress
			tourismBonaAccommodationFormAddress =
				(TourismBonaAccommodationFormAddress)object;

		long primaryKey = tourismBonaAccommodationFormAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismBonaAccommodationFormAddress> toCacheModel() {
		TourismBonaAccommodationFormAddressCacheModel
			tourismBonaAccommodationFormAddressCacheModel =
				new TourismBonaAccommodationFormAddressCacheModel();

		tourismBonaAccommodationFormAddressCacheModel.
			tourismBonaAccommodationFAOOId =
				getTourismBonaAccommodationFAOOId();

		tourismBonaAccommodationFormAddressCacheModel.groupId = getGroupId();

		tourismBonaAccommodationFormAddressCacheModel.companyId =
			getCompanyId();

		tourismBonaAccommodationFormAddressCacheModel.userId = getUserId();

		tourismBonaAccommodationFormAddressCacheModel.userName = getUserName();

		String userName =
			tourismBonaAccommodationFormAddressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismBonaAccommodationFormAddressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismBonaAccommodationFormAddressCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismBonaAccommodationFormAddressCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismBonaAccommodationFormAddressCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismBonaAccommodationFormAddressCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		tourismBonaAccommodationFormAddressCacheModel.addressType =
			getAddressType();

		String addressType =
			tourismBonaAccommodationFormAddressCacheModel.addressType;

		if ((addressType != null) && (addressType.length() == 0)) {
			tourismBonaAccommodationFormAddressCacheModel.addressType = null;
		}

		tourismBonaAccommodationFormAddressCacheModel.bonaAccoAddress =
			getBonaAccoAddress();

		String bonaAccoAddress =
			tourismBonaAccommodationFormAddressCacheModel.bonaAccoAddress;

		if ((bonaAccoAddress != null) && (bonaAccoAddress.length() == 0)) {
			tourismBonaAccommodationFormAddressCacheModel.bonaAccoAddress =
				null;
		}

		tourismBonaAccommodationFormAddressCacheModel.bonaAccoTelephoneNumber =
			getBonaAccoTelephoneNumber();

		String bonaAccoTelephoneNumber =
			tourismBonaAccommodationFormAddressCacheModel.
				bonaAccoTelephoneNumber;

		if ((bonaAccoTelephoneNumber != null) &&
			(bonaAccoTelephoneNumber.length() == 0)) {

			tourismBonaAccommodationFormAddressCacheModel.
				bonaAccoTelephoneNumber = null;
		}

		tourismBonaAccommodationFormAddressCacheModel.bonaAccoFaxNumber =
			getBonaAccoFaxNumber();

		String bonaAccoFaxNumber =
			tourismBonaAccommodationFormAddressCacheModel.bonaAccoFaxNumber;

		if ((bonaAccoFaxNumber != null) && (bonaAccoFaxNumber.length() == 0)) {
			tourismBonaAccommodationFormAddressCacheModel.bonaAccoFaxNumber =
				null;
		}

		tourismBonaAccommodationFormAddressCacheModel.bonaAccoEmail =
			getBonaAccoEmail();

		String bonaAccoEmail =
			tourismBonaAccommodationFormAddressCacheModel.bonaAccoEmail;

		if ((bonaAccoEmail != null) && (bonaAccoEmail.length() == 0)) {
			tourismBonaAccommodationFormAddressCacheModel.bonaAccoEmail = null;
		}

		tourismBonaAccommodationFormAddressCacheModel.tourismApplicationId =
			getTourismApplicationId();

		tourismBonaAccommodationFormAddressCacheModel.tourismBonaAFId =
			getTourismBonaAFId();

		return tourismBonaAccommodationFormAddressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismBonaAccommodationFormAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<TourismBonaAccommodationFormAddress, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismBonaAccommodationFormAddress, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismBonaAccommodationFormAddress)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismBonaAccommodationFormAddress>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismBonaAccommodationFormAddress.class,
						ModelWrapper.class);

	}

	private long _tourismBonaAccommodationFAOOId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _addressType;
	private String _bonaAccoAddress;
	private String _bonaAccoTelephoneNumber;
	private String _bonaAccoFaxNumber;
	private String _bonaAccoEmail;
	private long _tourismApplicationId;
	private long _tourismBonaAFId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismBonaAccommodationFormAddress, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismBonaAccommodationFormAddress)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"tourismBonaAccommodationFAOOId", _tourismBonaAccommodationFAOOId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("addressType", _addressType);
		_columnOriginalValues.put("bonaAccoAddress", _bonaAccoAddress);
		_columnOriginalValues.put(
			"bonaAccoTelephoneNumber", _bonaAccoTelephoneNumber);
		_columnOriginalValues.put("bonaAccoFaxNumber", _bonaAccoFaxNumber);
		_columnOriginalValues.put("bonaAccoEmail", _bonaAccoEmail);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
		_columnOriginalValues.put("tourismBonaAFId", _tourismBonaAFId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismBonaAccommodationFAOOId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("addressType", 128L);

		columnBitmasks.put("bonaAccoAddress", 256L);

		columnBitmasks.put("bonaAccoTelephoneNumber", 512L);

		columnBitmasks.put("bonaAccoFaxNumber", 1024L);

		columnBitmasks.put("bonaAccoEmail", 2048L);

		columnBitmasks.put("tourismApplicationId", 4096L);

		columnBitmasks.put("tourismBonaAFId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismBonaAccommodationFormAddress _escapedModel;

}