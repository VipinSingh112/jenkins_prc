/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismNewAnnualEarnings;
import com.nbp.tourism.application.form.services.model.TourismNewAnnualEarningsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismNewAnnualEarnings service. Represents a row in the &quot;nbp_tourism_new_acco_annual&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismNewAnnualEarningsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismNewAnnualEarningsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismNewAnnualEarningsImpl
 * @generated
 */
@JSON(strict = true)
public class TourismNewAnnualEarningsModelImpl
	extends BaseModelImpl<TourismNewAnnualEarnings>
	implements TourismNewAnnualEarningsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism new annual earnings model instance should use the <code>TourismNewAnnualEarnings</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_new_acco_annual";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismNewAnnualEarningsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"yearOne", Types.VARCHAR},
		{"yearTwo", Types.VARCHAR}, {"yearThree", Types.VARCHAR},
		{"targetLocalPer", Types.VARCHAR}, {"targetForeignPer", Types.VARCHAR},
		{"targetCountries", Types.VARCHAR}, {"estimatedPer", Types.VARCHAR},
		{"volume", Types.VARCHAR}, {"expenditure", Types.VARCHAR},
		{"manufactureEstimatedPer", Types.VARCHAR},
		{"manufactureVolume", Types.VARCHAR},
		{"manufactureExpenditure", Types.VARCHAR},
		{"seafoodPer", Types.VARCHAR}, {"seafoodVolume", Types.VARCHAR},
		{"seafoodExpenditure", Types.VARCHAR}, {"enterServices", Types.VARCHAR},
		{"enterLocal", Types.VARCHAR}, {"enterForeign", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismNewAnnualEarningsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("yearOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("yearTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("yearThree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetLocalPer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetForeignPer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetCountries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estimatedPer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("volume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expenditure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufactureEstimatedPer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufactureVolume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufactureExpenditure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("seafoodPer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("seafoodVolume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("seafoodExpenditure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("enterServices", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("enterLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("enterForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_new_acco_annual (tourismNewAnnualEarningsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,yearOne VARCHAR(75) null,yearTwo VARCHAR(75) null,yearThree VARCHAR(75) null,targetLocalPer VARCHAR(75) null,targetForeignPer VARCHAR(75) null,targetCountries VARCHAR(75) null,estimatedPer VARCHAR(75) null,volume VARCHAR(75) null,expenditure VARCHAR(75) null,manufactureEstimatedPer VARCHAR(75) null,manufactureVolume VARCHAR(75) null,manufactureExpenditure VARCHAR(75) null,seafoodPer VARCHAR(75) null,seafoodVolume VARCHAR(75) null,seafoodExpenditure VARCHAR(75) null,enterServices VARCHAR(75) null,enterLocal VARCHAR(75) null,enterForeign VARCHAR(75) null,tourismApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_new_acco_annual";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismNewAnnualEarnings.tourismNewAnnualEarningsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_new_acco_annual.tourismNewAnnualEarningsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMNEWANNUALEARNINGSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismNewAnnualEarningsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismNewAnnualEarningsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismNewAnnualEarningsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismNewAnnualEarningsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismNewAnnualEarnings.class;
	}

	@Override
	public String getModelClassName() {
		return TourismNewAnnualEarnings.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismNewAnnualEarnings, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TourismNewAnnualEarnings, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAnnualEarnings, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TourismNewAnnualEarnings)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismNewAnnualEarnings, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismNewAnnualEarnings, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismNewAnnualEarnings)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismNewAnnualEarnings, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismNewAnnualEarnings, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismNewAnnualEarnings, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismNewAnnualEarnings, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<TourismNewAnnualEarnings, Object>>();

			attributeGetterFunctions.put(
				"tourismNewAnnualEarningsId",
				TourismNewAnnualEarnings::getTourismNewAnnualEarningsId);
			attributeGetterFunctions.put(
				"groupId", TourismNewAnnualEarnings::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismNewAnnualEarnings::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismNewAnnualEarnings::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismNewAnnualEarnings::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismNewAnnualEarnings::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", TourismNewAnnualEarnings::getModifiedDate);
			attributeGetterFunctions.put(
				"yearOne", TourismNewAnnualEarnings::getYearOne);
			attributeGetterFunctions.put(
				"yearTwo", TourismNewAnnualEarnings::getYearTwo);
			attributeGetterFunctions.put(
				"yearThree", TourismNewAnnualEarnings::getYearThree);
			attributeGetterFunctions.put(
				"targetLocalPer", TourismNewAnnualEarnings::getTargetLocalPer);
			attributeGetterFunctions.put(
				"targetForeignPer",
				TourismNewAnnualEarnings::getTargetForeignPer);
			attributeGetterFunctions.put(
				"targetCountries",
				TourismNewAnnualEarnings::getTargetCountries);
			attributeGetterFunctions.put(
				"estimatedPer", TourismNewAnnualEarnings::getEstimatedPer);
			attributeGetterFunctions.put(
				"volume", TourismNewAnnualEarnings::getVolume);
			attributeGetterFunctions.put(
				"expenditure", TourismNewAnnualEarnings::getExpenditure);
			attributeGetterFunctions.put(
				"manufactureEstimatedPer",
				TourismNewAnnualEarnings::getManufactureEstimatedPer);
			attributeGetterFunctions.put(
				"manufactureVolume",
				TourismNewAnnualEarnings::getManufactureVolume);
			attributeGetterFunctions.put(
				"manufactureExpenditure",
				TourismNewAnnualEarnings::getManufactureExpenditure);
			attributeGetterFunctions.put(
				"seafoodPer", TourismNewAnnualEarnings::getSeafoodPer);
			attributeGetterFunctions.put(
				"seafoodVolume", TourismNewAnnualEarnings::getSeafoodVolume);
			attributeGetterFunctions.put(
				"seafoodExpenditure",
				TourismNewAnnualEarnings::getSeafoodExpenditure);
			attributeGetterFunctions.put(
				"enterServices", TourismNewAnnualEarnings::getEnterServices);
			attributeGetterFunctions.put(
				"enterLocal", TourismNewAnnualEarnings::getEnterLocal);
			attributeGetterFunctions.put(
				"enterForeign", TourismNewAnnualEarnings::getEnterForeign);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismNewAnnualEarnings::getTourismApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismNewAnnualEarnings, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismNewAnnualEarnings, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<TourismNewAnnualEarnings, ?>>();

			attributeSetterBiConsumers.put(
				"tourismNewAnnualEarningsId",
				(BiConsumer<TourismNewAnnualEarnings, Long>)
					TourismNewAnnualEarnings::setTourismNewAnnualEarningsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismNewAnnualEarnings, Long>)
					TourismNewAnnualEarnings::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismNewAnnualEarnings, Long>)
					TourismNewAnnualEarnings::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismNewAnnualEarnings, Long>)
					TourismNewAnnualEarnings::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismNewAnnualEarnings, Date>)
					TourismNewAnnualEarnings::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismNewAnnualEarnings, Date>)
					TourismNewAnnualEarnings::setModifiedDate);
			attributeSetterBiConsumers.put(
				"yearOne",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setYearOne);
			attributeSetterBiConsumers.put(
				"yearTwo",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setYearTwo);
			attributeSetterBiConsumers.put(
				"yearThree",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setYearThree);
			attributeSetterBiConsumers.put(
				"targetLocalPer",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setTargetLocalPer);
			attributeSetterBiConsumers.put(
				"targetForeignPer",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setTargetForeignPer);
			attributeSetterBiConsumers.put(
				"targetCountries",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setTargetCountries);
			attributeSetterBiConsumers.put(
				"estimatedPer",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setEstimatedPer);
			attributeSetterBiConsumers.put(
				"volume",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setVolume);
			attributeSetterBiConsumers.put(
				"expenditure",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setExpenditure);
			attributeSetterBiConsumers.put(
				"manufactureEstimatedPer",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setManufactureEstimatedPer);
			attributeSetterBiConsumers.put(
				"manufactureVolume",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setManufactureVolume);
			attributeSetterBiConsumers.put(
				"manufactureExpenditure",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setManufactureExpenditure);
			attributeSetterBiConsumers.put(
				"seafoodPer",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setSeafoodPer);
			attributeSetterBiConsumers.put(
				"seafoodVolume",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setSeafoodVolume);
			attributeSetterBiConsumers.put(
				"seafoodExpenditure",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setSeafoodExpenditure);
			attributeSetterBiConsumers.put(
				"enterServices",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setEnterServices);
			attributeSetterBiConsumers.put(
				"enterLocal",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setEnterLocal);
			attributeSetterBiConsumers.put(
				"enterForeign",
				(BiConsumer<TourismNewAnnualEarnings, String>)
					TourismNewAnnualEarnings::setEnterForeign);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismNewAnnualEarnings, Long>)
					TourismNewAnnualEarnings::setTourismApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismNewAnnualEarningsId() {
		return _tourismNewAnnualEarningsId;
	}

	@Override
	public void setTourismNewAnnualEarningsId(long tourismNewAnnualEarningsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismNewAnnualEarningsId = tourismNewAnnualEarningsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getYearOne() {
		if (_yearOne == null) {
			return "";
		}
		else {
			return _yearOne;
		}
	}

	@Override
	public void setYearOne(String yearOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_yearOne = yearOne;
	}

	@JSON
	@Override
	public String getYearTwo() {
		if (_yearTwo == null) {
			return "";
		}
		else {
			return _yearTwo;
		}
	}

	@Override
	public void setYearTwo(String yearTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_yearTwo = yearTwo;
	}

	@JSON
	@Override
	public String getYearThree() {
		if (_yearThree == null) {
			return "";
		}
		else {
			return _yearThree;
		}
	}

	@Override
	public void setYearThree(String yearThree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_yearThree = yearThree;
	}

	@JSON
	@Override
	public String getTargetLocalPer() {
		if (_targetLocalPer == null) {
			return "";
		}
		else {
			return _targetLocalPer;
		}
	}

	@Override
	public void setTargetLocalPer(String targetLocalPer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetLocalPer = targetLocalPer;
	}

	@JSON
	@Override
	public String getTargetForeignPer() {
		if (_targetForeignPer == null) {
			return "";
		}
		else {
			return _targetForeignPer;
		}
	}

	@Override
	public void setTargetForeignPer(String targetForeignPer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetForeignPer = targetForeignPer;
	}

	@JSON
	@Override
	public String getTargetCountries() {
		if (_targetCountries == null) {
			return "";
		}
		else {
			return _targetCountries;
		}
	}

	@Override
	public void setTargetCountries(String targetCountries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetCountries = targetCountries;
	}

	@JSON
	@Override
	public String getEstimatedPer() {
		if (_estimatedPer == null) {
			return "";
		}
		else {
			return _estimatedPer;
		}
	}

	@Override
	public void setEstimatedPer(String estimatedPer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estimatedPer = estimatedPer;
	}

	@JSON
	@Override
	public String getVolume() {
		if (_volume == null) {
			return "";
		}
		else {
			return _volume;
		}
	}

	@Override
	public void setVolume(String volume) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_volume = volume;
	}

	@JSON
	@Override
	public String getExpenditure() {
		if (_expenditure == null) {
			return "";
		}
		else {
			return _expenditure;
		}
	}

	@Override
	public void setExpenditure(String expenditure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expenditure = expenditure;
	}

	@JSON
	@Override
	public String getManufactureEstimatedPer() {
		if (_manufactureEstimatedPer == null) {
			return "";
		}
		else {
			return _manufactureEstimatedPer;
		}
	}

	@Override
	public void setManufactureEstimatedPer(String manufactureEstimatedPer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufactureEstimatedPer = manufactureEstimatedPer;
	}

	@JSON
	@Override
	public String getManufactureVolume() {
		if (_manufactureVolume == null) {
			return "";
		}
		else {
			return _manufactureVolume;
		}
	}

	@Override
	public void setManufactureVolume(String manufactureVolume) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufactureVolume = manufactureVolume;
	}

	@JSON
	@Override
	public String getManufactureExpenditure() {
		if (_manufactureExpenditure == null) {
			return "";
		}
		else {
			return _manufactureExpenditure;
		}
	}

	@Override
	public void setManufactureExpenditure(String manufactureExpenditure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufactureExpenditure = manufactureExpenditure;
	}

	@JSON
	@Override
	public String getSeafoodPer() {
		if (_seafoodPer == null) {
			return "";
		}
		else {
			return _seafoodPer;
		}
	}

	@Override
	public void setSeafoodPer(String seafoodPer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_seafoodPer = seafoodPer;
	}

	@JSON
	@Override
	public String getSeafoodVolume() {
		if (_seafoodVolume == null) {
			return "";
		}
		else {
			return _seafoodVolume;
		}
	}

	@Override
	public void setSeafoodVolume(String seafoodVolume) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_seafoodVolume = seafoodVolume;
	}

	@JSON
	@Override
	public String getSeafoodExpenditure() {
		if (_seafoodExpenditure == null) {
			return "";
		}
		else {
			return _seafoodExpenditure;
		}
	}

	@Override
	public void setSeafoodExpenditure(String seafoodExpenditure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_seafoodExpenditure = seafoodExpenditure;
	}

	@JSON
	@Override
	public String getEnterServices() {
		if (_enterServices == null) {
			return "";
		}
		else {
			return _enterServices;
		}
	}

	@Override
	public void setEnterServices(String enterServices) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enterServices = enterServices;
	}

	@JSON
	@Override
	public String getEnterLocal() {
		if (_enterLocal == null) {
			return "";
		}
		else {
			return _enterLocal;
		}
	}

	@Override
	public void setEnterLocal(String enterLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enterLocal = enterLocal;
	}

	@JSON
	@Override
	public String getEnterForeign() {
		if (_enterForeign == null) {
			return "";
		}
		else {
			return _enterForeign;
		}
	}

	@Override
	public void setEnterForeign(String enterForeign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enterForeign = enterForeign;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismNewAnnualEarnings.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismNewAnnualEarnings toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismNewAnnualEarnings>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismNewAnnualEarningsImpl tourismNewAnnualEarningsImpl =
			new TourismNewAnnualEarningsImpl();

		tourismNewAnnualEarningsImpl.setTourismNewAnnualEarningsId(
			getTourismNewAnnualEarningsId());
		tourismNewAnnualEarningsImpl.setGroupId(getGroupId());
		tourismNewAnnualEarningsImpl.setCompanyId(getCompanyId());
		tourismNewAnnualEarningsImpl.setUserId(getUserId());
		tourismNewAnnualEarningsImpl.setUserName(getUserName());
		tourismNewAnnualEarningsImpl.setCreateDate(getCreateDate());
		tourismNewAnnualEarningsImpl.setModifiedDate(getModifiedDate());
		tourismNewAnnualEarningsImpl.setYearOne(getYearOne());
		tourismNewAnnualEarningsImpl.setYearTwo(getYearTwo());
		tourismNewAnnualEarningsImpl.setYearThree(getYearThree());
		tourismNewAnnualEarningsImpl.setTargetLocalPer(getTargetLocalPer());
		tourismNewAnnualEarningsImpl.setTargetForeignPer(getTargetForeignPer());
		tourismNewAnnualEarningsImpl.setTargetCountries(getTargetCountries());
		tourismNewAnnualEarningsImpl.setEstimatedPer(getEstimatedPer());
		tourismNewAnnualEarningsImpl.setVolume(getVolume());
		tourismNewAnnualEarningsImpl.setExpenditure(getExpenditure());
		tourismNewAnnualEarningsImpl.setManufactureEstimatedPer(
			getManufactureEstimatedPer());
		tourismNewAnnualEarningsImpl.setManufactureVolume(
			getManufactureVolume());
		tourismNewAnnualEarningsImpl.setManufactureExpenditure(
			getManufactureExpenditure());
		tourismNewAnnualEarningsImpl.setSeafoodPer(getSeafoodPer());
		tourismNewAnnualEarningsImpl.setSeafoodVolume(getSeafoodVolume());
		tourismNewAnnualEarningsImpl.setSeafoodExpenditure(
			getSeafoodExpenditure());
		tourismNewAnnualEarningsImpl.setEnterServices(getEnterServices());
		tourismNewAnnualEarningsImpl.setEnterLocal(getEnterLocal());
		tourismNewAnnualEarningsImpl.setEnterForeign(getEnterForeign());
		tourismNewAnnualEarningsImpl.setTourismApplicationId(
			getTourismApplicationId());

		tourismNewAnnualEarningsImpl.resetOriginalValues();

		return tourismNewAnnualEarningsImpl;
	}

	@Override
	public TourismNewAnnualEarnings cloneWithOriginalValues() {
		TourismNewAnnualEarningsImpl tourismNewAnnualEarningsImpl =
			new TourismNewAnnualEarningsImpl();

		tourismNewAnnualEarningsImpl.setTourismNewAnnualEarningsId(
			this.<Long>getColumnOriginalValue("tourismNewAnnualEarningsId"));
		tourismNewAnnualEarningsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismNewAnnualEarningsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismNewAnnualEarningsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismNewAnnualEarningsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismNewAnnualEarningsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismNewAnnualEarningsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismNewAnnualEarningsImpl.setYearOne(
			this.<String>getColumnOriginalValue("yearOne"));
		tourismNewAnnualEarningsImpl.setYearTwo(
			this.<String>getColumnOriginalValue("yearTwo"));
		tourismNewAnnualEarningsImpl.setYearThree(
			this.<String>getColumnOriginalValue("yearThree"));
		tourismNewAnnualEarningsImpl.setTargetLocalPer(
			this.<String>getColumnOriginalValue("targetLocalPer"));
		tourismNewAnnualEarningsImpl.setTargetForeignPer(
			this.<String>getColumnOriginalValue("targetForeignPer"));
		tourismNewAnnualEarningsImpl.setTargetCountries(
			this.<String>getColumnOriginalValue("targetCountries"));
		tourismNewAnnualEarningsImpl.setEstimatedPer(
			this.<String>getColumnOriginalValue("estimatedPer"));
		tourismNewAnnualEarningsImpl.setVolume(
			this.<String>getColumnOriginalValue("volume"));
		tourismNewAnnualEarningsImpl.setExpenditure(
			this.<String>getColumnOriginalValue("expenditure"));
		tourismNewAnnualEarningsImpl.setManufactureEstimatedPer(
			this.<String>getColumnOriginalValue("manufactureEstimatedPer"));
		tourismNewAnnualEarningsImpl.setManufactureVolume(
			this.<String>getColumnOriginalValue("manufactureVolume"));
		tourismNewAnnualEarningsImpl.setManufactureExpenditure(
			this.<String>getColumnOriginalValue("manufactureExpenditure"));
		tourismNewAnnualEarningsImpl.setSeafoodPer(
			this.<String>getColumnOriginalValue("seafoodPer"));
		tourismNewAnnualEarningsImpl.setSeafoodVolume(
			this.<String>getColumnOriginalValue("seafoodVolume"));
		tourismNewAnnualEarningsImpl.setSeafoodExpenditure(
			this.<String>getColumnOriginalValue("seafoodExpenditure"));
		tourismNewAnnualEarningsImpl.setEnterServices(
			this.<String>getColumnOriginalValue("enterServices"));
		tourismNewAnnualEarningsImpl.setEnterLocal(
			this.<String>getColumnOriginalValue("enterLocal"));
		tourismNewAnnualEarningsImpl.setEnterForeign(
			this.<String>getColumnOriginalValue("enterForeign"));
		tourismNewAnnualEarningsImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));

		return tourismNewAnnualEarningsImpl;
	}

	@Override
	public int compareTo(TourismNewAnnualEarnings tourismNewAnnualEarnings) {
		long primaryKey = tourismNewAnnualEarnings.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismNewAnnualEarnings)) {
			return false;
		}

		TourismNewAnnualEarnings tourismNewAnnualEarnings =
			(TourismNewAnnualEarnings)object;

		long primaryKey = tourismNewAnnualEarnings.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismNewAnnualEarnings> toCacheModel() {
		TourismNewAnnualEarningsCacheModel tourismNewAnnualEarningsCacheModel =
			new TourismNewAnnualEarningsCacheModel();

		tourismNewAnnualEarningsCacheModel.tourismNewAnnualEarningsId =
			getTourismNewAnnualEarningsId();

		tourismNewAnnualEarningsCacheModel.groupId = getGroupId();

		tourismNewAnnualEarningsCacheModel.companyId = getCompanyId();

		tourismNewAnnualEarningsCacheModel.userId = getUserId();

		tourismNewAnnualEarningsCacheModel.userName = getUserName();

		String userName = tourismNewAnnualEarningsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismNewAnnualEarningsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismNewAnnualEarningsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismNewAnnualEarningsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismNewAnnualEarningsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tourismNewAnnualEarningsCacheModel.yearOne = getYearOne();

		String yearOne = tourismNewAnnualEarningsCacheModel.yearOne;

		if ((yearOne != null) && (yearOne.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.yearOne = null;
		}

		tourismNewAnnualEarningsCacheModel.yearTwo = getYearTwo();

		String yearTwo = tourismNewAnnualEarningsCacheModel.yearTwo;

		if ((yearTwo != null) && (yearTwo.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.yearTwo = null;
		}

		tourismNewAnnualEarningsCacheModel.yearThree = getYearThree();

		String yearThree = tourismNewAnnualEarningsCacheModel.yearThree;

		if ((yearThree != null) && (yearThree.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.yearThree = null;
		}

		tourismNewAnnualEarningsCacheModel.targetLocalPer = getTargetLocalPer();

		String targetLocalPer =
			tourismNewAnnualEarningsCacheModel.targetLocalPer;

		if ((targetLocalPer != null) && (targetLocalPer.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.targetLocalPer = null;
		}

		tourismNewAnnualEarningsCacheModel.targetForeignPer =
			getTargetForeignPer();

		String targetForeignPer =
			tourismNewAnnualEarningsCacheModel.targetForeignPer;

		if ((targetForeignPer != null) && (targetForeignPer.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.targetForeignPer = null;
		}

		tourismNewAnnualEarningsCacheModel.targetCountries =
			getTargetCountries();

		String targetCountries =
			tourismNewAnnualEarningsCacheModel.targetCountries;

		if ((targetCountries != null) && (targetCountries.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.targetCountries = null;
		}

		tourismNewAnnualEarningsCacheModel.estimatedPer = getEstimatedPer();

		String estimatedPer = tourismNewAnnualEarningsCacheModel.estimatedPer;

		if ((estimatedPer != null) && (estimatedPer.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.estimatedPer = null;
		}

		tourismNewAnnualEarningsCacheModel.volume = getVolume();

		String volume = tourismNewAnnualEarningsCacheModel.volume;

		if ((volume != null) && (volume.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.volume = null;
		}

		tourismNewAnnualEarningsCacheModel.expenditure = getExpenditure();

		String expenditure = tourismNewAnnualEarningsCacheModel.expenditure;

		if ((expenditure != null) && (expenditure.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.expenditure = null;
		}

		tourismNewAnnualEarningsCacheModel.manufactureEstimatedPer =
			getManufactureEstimatedPer();

		String manufactureEstimatedPer =
			tourismNewAnnualEarningsCacheModel.manufactureEstimatedPer;

		if ((manufactureEstimatedPer != null) &&
			(manufactureEstimatedPer.length() == 0)) {

			tourismNewAnnualEarningsCacheModel.manufactureEstimatedPer = null;
		}

		tourismNewAnnualEarningsCacheModel.manufactureVolume =
			getManufactureVolume();

		String manufactureVolume =
			tourismNewAnnualEarningsCacheModel.manufactureVolume;

		if ((manufactureVolume != null) && (manufactureVolume.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.manufactureVolume = null;
		}

		tourismNewAnnualEarningsCacheModel.manufactureExpenditure =
			getManufactureExpenditure();

		String manufactureExpenditure =
			tourismNewAnnualEarningsCacheModel.manufactureExpenditure;

		if ((manufactureExpenditure != null) &&
			(manufactureExpenditure.length() == 0)) {

			tourismNewAnnualEarningsCacheModel.manufactureExpenditure = null;
		}

		tourismNewAnnualEarningsCacheModel.seafoodPer = getSeafoodPer();

		String seafoodPer = tourismNewAnnualEarningsCacheModel.seafoodPer;

		if ((seafoodPer != null) && (seafoodPer.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.seafoodPer = null;
		}

		tourismNewAnnualEarningsCacheModel.seafoodVolume = getSeafoodVolume();

		String seafoodVolume = tourismNewAnnualEarningsCacheModel.seafoodVolume;

		if ((seafoodVolume != null) && (seafoodVolume.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.seafoodVolume = null;
		}

		tourismNewAnnualEarningsCacheModel.seafoodExpenditure =
			getSeafoodExpenditure();

		String seafoodExpenditure =
			tourismNewAnnualEarningsCacheModel.seafoodExpenditure;

		if ((seafoodExpenditure != null) &&
			(seafoodExpenditure.length() == 0)) {

			tourismNewAnnualEarningsCacheModel.seafoodExpenditure = null;
		}

		tourismNewAnnualEarningsCacheModel.enterServices = getEnterServices();

		String enterServices = tourismNewAnnualEarningsCacheModel.enterServices;

		if ((enterServices != null) && (enterServices.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.enterServices = null;
		}

		tourismNewAnnualEarningsCacheModel.enterLocal = getEnterLocal();

		String enterLocal = tourismNewAnnualEarningsCacheModel.enterLocal;

		if ((enterLocal != null) && (enterLocal.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.enterLocal = null;
		}

		tourismNewAnnualEarningsCacheModel.enterForeign = getEnterForeign();

		String enterForeign = tourismNewAnnualEarningsCacheModel.enterForeign;

		if ((enterForeign != null) && (enterForeign.length() == 0)) {
			tourismNewAnnualEarningsCacheModel.enterForeign = null;
		}

		tourismNewAnnualEarningsCacheModel.tourismApplicationId =
			getTourismApplicationId();

		return tourismNewAnnualEarningsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismNewAnnualEarnings, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TourismNewAnnualEarnings, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAnnualEarnings, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismNewAnnualEarnings)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismNewAnnualEarnings>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismNewAnnualEarnings.class, ModelWrapper.class);

	}

	private long _tourismNewAnnualEarningsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _yearOne;
	private String _yearTwo;
	private String _yearThree;
	private String _targetLocalPer;
	private String _targetForeignPer;
	private String _targetCountries;
	private String _estimatedPer;
	private String _volume;
	private String _expenditure;
	private String _manufactureEstimatedPer;
	private String _manufactureVolume;
	private String _manufactureExpenditure;
	private String _seafoodPer;
	private String _seafoodVolume;
	private String _seafoodExpenditure;
	private String _enterServices;
	private String _enterLocal;
	private String _enterForeign;
	private long _tourismApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismNewAnnualEarnings, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismNewAnnualEarnings)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"tourismNewAnnualEarningsId", _tourismNewAnnualEarningsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("yearOne", _yearOne);
		_columnOriginalValues.put("yearTwo", _yearTwo);
		_columnOriginalValues.put("yearThree", _yearThree);
		_columnOriginalValues.put("targetLocalPer", _targetLocalPer);
		_columnOriginalValues.put("targetForeignPer", _targetForeignPer);
		_columnOriginalValues.put("targetCountries", _targetCountries);
		_columnOriginalValues.put("estimatedPer", _estimatedPer);
		_columnOriginalValues.put("volume", _volume);
		_columnOriginalValues.put("expenditure", _expenditure);
		_columnOriginalValues.put(
			"manufactureEstimatedPer", _manufactureEstimatedPer);
		_columnOriginalValues.put("manufactureVolume", _manufactureVolume);
		_columnOriginalValues.put(
			"manufactureExpenditure", _manufactureExpenditure);
		_columnOriginalValues.put("seafoodPer", _seafoodPer);
		_columnOriginalValues.put("seafoodVolume", _seafoodVolume);
		_columnOriginalValues.put("seafoodExpenditure", _seafoodExpenditure);
		_columnOriginalValues.put("enterServices", _enterServices);
		_columnOriginalValues.put("enterLocal", _enterLocal);
		_columnOriginalValues.put("enterForeign", _enterForeign);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismNewAnnualEarningsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("yearOne", 128L);

		columnBitmasks.put("yearTwo", 256L);

		columnBitmasks.put("yearThree", 512L);

		columnBitmasks.put("targetLocalPer", 1024L);

		columnBitmasks.put("targetForeignPer", 2048L);

		columnBitmasks.put("targetCountries", 4096L);

		columnBitmasks.put("estimatedPer", 8192L);

		columnBitmasks.put("volume", 16384L);

		columnBitmasks.put("expenditure", 32768L);

		columnBitmasks.put("manufactureEstimatedPer", 65536L);

		columnBitmasks.put("manufactureVolume", 131072L);

		columnBitmasks.put("manufactureExpenditure", 262144L);

		columnBitmasks.put("seafoodPer", 524288L);

		columnBitmasks.put("seafoodVolume", 1048576L);

		columnBitmasks.put("seafoodExpenditure", 2097152L);

		columnBitmasks.put("enterServices", 4194304L);

		columnBitmasks.put("enterLocal", 8388608L);

		columnBitmasks.put("enterForeign", 16777216L);

		columnBitmasks.put("tourismApplicationId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismNewAnnualEarnings _escapedModel;

}