/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismNewAttractionFormSecond;
import com.nbp.tourism.application.form.services.model.TourismNewAttractionFormSecondModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismNewAttractionFormSecond service. Represents a row in the &quot;nbp_tourism_new_attraction_fs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismNewAttractionFormSecondModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismNewAttractionFormSecondImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismNewAttractionFormSecondImpl
 * @generated
 */
@JSON(strict = true)
public class TourismNewAttractionFormSecondModelImpl
	extends BaseModelImpl<TourismNewAttractionFormSecond>
	implements TourismNewAttractionFormSecondModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism new attraction form second model instance should use the <code>TourismNewAttractionFormSecond</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_new_attraction_fs";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismNewAttractionFormSecId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"targetMarketLocal", Types.VARCHAR},
		{"targetMarketForeign", Types.VARCHAR},
		{"targetMarketCountries", Types.VARCHAR},
		{"ownerCountryOfOrigin", Types.VARCHAR},
		{"ownerJointVenture", Types.VARCHAR}, {"ownerLocal", Types.VARCHAR},
		{"ownerForeign", Types.VARCHAR},
		{"capitalizationUSComponent", Types.VARCHAR},
		{"capitalizationJEquivalent", Types.VARCHAR},
		{"capitalizationRateOfExchange", Types.VARCHAR},
		{"capitalizationJComponent", Types.VARCHAR},
		{"capitalizationCapitalInvest", Types.VARCHAR},
		{"sourcesLoan ", Types.VARCHAR}, {"sourcesEquity", Types.VARCHAR},
		{"sourcesStateSourceOfLoanFinanc", Types.VARCHAR},
		{"annualProjectedOne ", Types.VARCHAR},
		{"annualProjectedTwo", Types.VARCHAR},
		{"annualProjectedThree ", Types.VARCHAR},
		{"annualProjectedNumber", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismNewAttractionFormSecId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("targetMarketLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetMarketForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetMarketCountries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerCountryOfOrigin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerJointVenture", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capitalizationUSComponent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capitalizationJEquivalent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capitalizationRateOfExchange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capitalizationJComponent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capitalizationCapitalInvest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sourcesLoan ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sourcesEquity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sourcesStateSourceOfLoanFinanc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualProjectedOne ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualProjectedTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualProjectedThree ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualProjectedNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_new_attraction_fs (tourismNewAttractionFormSecId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,targetMarketLocal VARCHAR(75) null,targetMarketForeign VARCHAR(75) null,targetMarketCountries VARCHAR(75) null,ownerCountryOfOrigin VARCHAR(75) null,ownerJointVenture VARCHAR(75) null,ownerLocal VARCHAR(75) null,ownerForeign VARCHAR(75) null,capitalizationUSComponent VARCHAR(75) null,capitalizationJEquivalent VARCHAR(75) null,capitalizationRateOfExchange VARCHAR(75) null,capitalizationJComponent VARCHAR(75) null,capitalizationCapitalInvest VARCHAR(75) null,sourcesLoan  VARCHAR(75) null,sourcesEquity VARCHAR(75) null,sourcesStateSourceOfLoanFinanc VARCHAR(75) null,annualProjectedOne  VARCHAR(75) null,annualProjectedTwo VARCHAR(75) null,annualProjectedThree  VARCHAR(75) null,annualProjectedNumber VARCHAR(75) null,tourismApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_new_attraction_fs";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismNewAttractionFormSecond.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_new_attraction_fs.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismNewAttractionFormSecondModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismNewAttractionFormSecId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismNewAttractionFormSecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismNewAttractionFormSecId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismNewAttractionFormSecond.class;
	}

	@Override
	public String getModelClassName() {
		return TourismNewAttractionFormSecond.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismNewAttractionFormSecond, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TourismNewAttractionFormSecond, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAttractionFormSecond, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismNewAttractionFormSecond)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismNewAttractionFormSecond, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismNewAttractionFormSecond, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismNewAttractionFormSecond)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismNewAttractionFormSecond, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismNewAttractionFormSecond, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismNewAttractionFormSecond, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismNewAttractionFormSecond, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<TourismNewAttractionFormSecond, Object>>();

			attributeGetterFunctions.put(
				"tourismNewAttractionFormSecId",
				TourismNewAttractionFormSecond::
					getTourismNewAttractionFormSecId);
			attributeGetterFunctions.put(
				"groupId", TourismNewAttractionFormSecond::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismNewAttractionFormSecond::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismNewAttractionFormSecond::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismNewAttractionFormSecond::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismNewAttractionFormSecond::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				TourismNewAttractionFormSecond::getModifiedDate);
			attributeGetterFunctions.put(
				"targetMarketLocal",
				TourismNewAttractionFormSecond::getTargetMarketLocal);
			attributeGetterFunctions.put(
				"targetMarketForeign",
				TourismNewAttractionFormSecond::getTargetMarketForeign);
			attributeGetterFunctions.put(
				"targetMarketCountries",
				TourismNewAttractionFormSecond::getTargetMarketCountries);
			attributeGetterFunctions.put(
				"ownerCountryOfOrigin",
				TourismNewAttractionFormSecond::getOwnerCountryOfOrigin);
			attributeGetterFunctions.put(
				"ownerJointVenture",
				TourismNewAttractionFormSecond::getOwnerJointVenture);
			attributeGetterFunctions.put(
				"ownerLocal", TourismNewAttractionFormSecond::getOwnerLocal);
			attributeGetterFunctions.put(
				"ownerForeign",
				TourismNewAttractionFormSecond::getOwnerForeign);
			attributeGetterFunctions.put(
				"capitalizationUSComponent",
				TourismNewAttractionFormSecond::getCapitalizationUSComponent);
			attributeGetterFunctions.put(
				"capitalizationJEquivalent",
				TourismNewAttractionFormSecond::getCapitalizationJEquivalent);
			attributeGetterFunctions.put(
				"capitalizationRateOfExchange",
				TourismNewAttractionFormSecond::
					getCapitalizationRateOfExchange);
			attributeGetterFunctions.put(
				"capitalizationJComponent",
				TourismNewAttractionFormSecond::getCapitalizationJComponent);
			attributeGetterFunctions.put(
				"capitalizationCapitalInvest",
				TourismNewAttractionFormSecond::getCapitalizationCapitalInvest);
			attributeGetterFunctions.put(
				"sourcesLoan ", TourismNewAttractionFormSecond::getSourcesLoan);
			attributeGetterFunctions.put(
				"sourcesEquity",
				TourismNewAttractionFormSecond::getSourcesEquity);
			attributeGetterFunctions.put(
				"sourcesStateSourceOfLoanFinanc",
				TourismNewAttractionFormSecond::
					getSourcesStateSourceOfLoanFinanc);
			attributeGetterFunctions.put(
				"annualProjectedOne ",
				TourismNewAttractionFormSecond::getAnnualProjectedOne);
			attributeGetterFunctions.put(
				"annualProjectedTwo",
				TourismNewAttractionFormSecond::getAnnualProjectedTwo);
			attributeGetterFunctions.put(
				"annualProjectedThree ",
				TourismNewAttractionFormSecond::getAnnualProjectedThree);
			attributeGetterFunctions.put(
				"annualProjectedNumber",
				TourismNewAttractionFormSecond::getAnnualProjectedNumber);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismNewAttractionFormSecond::getTourismApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismNewAttractionFormSecond, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismNewAttractionFormSecond, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<TourismNewAttractionFormSecond, ?>>();

			attributeSetterBiConsumers.put(
				"tourismNewAttractionFormSecId",
				(BiConsumer<TourismNewAttractionFormSecond, Long>)
					TourismNewAttractionFormSecond::
						setTourismNewAttractionFormSecId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismNewAttractionFormSecond, Long>)
					TourismNewAttractionFormSecond::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismNewAttractionFormSecond, Long>)
					TourismNewAttractionFormSecond::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismNewAttractionFormSecond, Long>)
					TourismNewAttractionFormSecond::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismNewAttractionFormSecond, Date>)
					TourismNewAttractionFormSecond::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismNewAttractionFormSecond, Date>)
					TourismNewAttractionFormSecond::setModifiedDate);
			attributeSetterBiConsumers.put(
				"targetMarketLocal",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setTargetMarketLocal);
			attributeSetterBiConsumers.put(
				"targetMarketForeign",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setTargetMarketForeign);
			attributeSetterBiConsumers.put(
				"targetMarketCountries",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setTargetMarketCountries);
			attributeSetterBiConsumers.put(
				"ownerCountryOfOrigin",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setOwnerCountryOfOrigin);
			attributeSetterBiConsumers.put(
				"ownerJointVenture",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setOwnerJointVenture);
			attributeSetterBiConsumers.put(
				"ownerLocal",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setOwnerLocal);
			attributeSetterBiConsumers.put(
				"ownerForeign",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setOwnerForeign);
			attributeSetterBiConsumers.put(
				"capitalizationUSComponent",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::
						setCapitalizationUSComponent);
			attributeSetterBiConsumers.put(
				"capitalizationJEquivalent",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::
						setCapitalizationJEquivalent);
			attributeSetterBiConsumers.put(
				"capitalizationRateOfExchange",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::
						setCapitalizationRateOfExchange);
			attributeSetterBiConsumers.put(
				"capitalizationJComponent",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::
						setCapitalizationJComponent);
			attributeSetterBiConsumers.put(
				"capitalizationCapitalInvest",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::
						setCapitalizationCapitalInvest);
			attributeSetterBiConsumers.put(
				"sourcesLoan ",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setSourcesLoan);
			attributeSetterBiConsumers.put(
				"sourcesEquity",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setSourcesEquity);
			attributeSetterBiConsumers.put(
				"sourcesStateSourceOfLoanFinanc",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::
						setSourcesStateSourceOfLoanFinanc);
			attributeSetterBiConsumers.put(
				"annualProjectedOne ",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setAnnualProjectedOne);
			attributeSetterBiConsumers.put(
				"annualProjectedTwo",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setAnnualProjectedTwo);
			attributeSetterBiConsumers.put(
				"annualProjectedThree ",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setAnnualProjectedThree);
			attributeSetterBiConsumers.put(
				"annualProjectedNumber",
				(BiConsumer<TourismNewAttractionFormSecond, String>)
					TourismNewAttractionFormSecond::setAnnualProjectedNumber);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismNewAttractionFormSecond, Long>)
					TourismNewAttractionFormSecond::setTourismApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismNewAttractionFormSecId() {
		return _tourismNewAttractionFormSecId;
	}

	@Override
	public void setTourismNewAttractionFormSecId(
		long tourismNewAttractionFormSecId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismNewAttractionFormSecId = tourismNewAttractionFormSecId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTargetMarketLocal() {
		if (_targetMarketLocal == null) {
			return "";
		}
		else {
			return _targetMarketLocal;
		}
	}

	@Override
	public void setTargetMarketLocal(String targetMarketLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetMarketLocal = targetMarketLocal;
	}

	@JSON
	@Override
	public String getTargetMarketForeign() {
		if (_targetMarketForeign == null) {
			return "";
		}
		else {
			return _targetMarketForeign;
		}
	}

	@Override
	public void setTargetMarketForeign(String targetMarketForeign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetMarketForeign = targetMarketForeign;
	}

	@JSON
	@Override
	public String getTargetMarketCountries() {
		if (_targetMarketCountries == null) {
			return "";
		}
		else {
			return _targetMarketCountries;
		}
	}

	@Override
	public void setTargetMarketCountries(String targetMarketCountries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetMarketCountries = targetMarketCountries;
	}

	@JSON
	@Override
	public String getOwnerCountryOfOrigin() {
		if (_ownerCountryOfOrigin == null) {
			return "";
		}
		else {
			return _ownerCountryOfOrigin;
		}
	}

	@Override
	public void setOwnerCountryOfOrigin(String ownerCountryOfOrigin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerCountryOfOrigin = ownerCountryOfOrigin;
	}

	@JSON
	@Override
	public String getOwnerJointVenture() {
		if (_ownerJointVenture == null) {
			return "";
		}
		else {
			return _ownerJointVenture;
		}
	}

	@Override
	public void setOwnerJointVenture(String ownerJointVenture) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerJointVenture = ownerJointVenture;
	}

	@JSON
	@Override
	public String getOwnerLocal() {
		if (_ownerLocal == null) {
			return "";
		}
		else {
			return _ownerLocal;
		}
	}

	@Override
	public void setOwnerLocal(String ownerLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerLocal = ownerLocal;
	}

	@JSON
	@Override
	public String getOwnerForeign() {
		if (_ownerForeign == null) {
			return "";
		}
		else {
			return _ownerForeign;
		}
	}

	@Override
	public void setOwnerForeign(String ownerForeign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerForeign = ownerForeign;
	}

	@JSON
	@Override
	public String getCapitalizationUSComponent() {
		if (_capitalizationUSComponent == null) {
			return "";
		}
		else {
			return _capitalizationUSComponent;
		}
	}

	@Override
	public void setCapitalizationUSComponent(String capitalizationUSComponent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capitalizationUSComponent = capitalizationUSComponent;
	}

	@JSON
	@Override
	public String getCapitalizationJEquivalent() {
		if (_capitalizationJEquivalent == null) {
			return "";
		}
		else {
			return _capitalizationJEquivalent;
		}
	}

	@Override
	public void setCapitalizationJEquivalent(String capitalizationJEquivalent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capitalizationJEquivalent = capitalizationJEquivalent;
	}

	@JSON
	@Override
	public String getCapitalizationRateOfExchange() {
		if (_capitalizationRateOfExchange == null) {
			return "";
		}
		else {
			return _capitalizationRateOfExchange;
		}
	}

	@Override
	public void setCapitalizationRateOfExchange(
		String capitalizationRateOfExchange) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capitalizationRateOfExchange = capitalizationRateOfExchange;
	}

	@JSON
	@Override
	public String getCapitalizationJComponent() {
		if (_capitalizationJComponent == null) {
			return "";
		}
		else {
			return _capitalizationJComponent;
		}
	}

	@Override
	public void setCapitalizationJComponent(String capitalizationJComponent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capitalizationJComponent = capitalizationJComponent;
	}

	@JSON
	@Override
	public String getCapitalizationCapitalInvest() {
		if (_capitalizationCapitalInvest == null) {
			return "";
		}
		else {
			return _capitalizationCapitalInvest;
		}
	}

	@Override
	public void setCapitalizationCapitalInvest(
		String capitalizationCapitalInvest) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capitalizationCapitalInvest = capitalizationCapitalInvest;
	}

	@JSON
	@Override
	public String getSourcesLoan() {
		if (_sourcesLoan == null) {
			return "";
		}
		else {
			return _sourcesLoan;
		}
	}

	@Override
	public void setSourcesLoan(String sourcesLoan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourcesLoan = sourcesLoan;
	}

	@JSON
	@Override
	public String getSourcesEquity() {
		if (_sourcesEquity == null) {
			return "";
		}
		else {
			return _sourcesEquity;
		}
	}

	@Override
	public void setSourcesEquity(String sourcesEquity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourcesEquity = sourcesEquity;
	}

	@JSON
	@Override
	public String getSourcesStateSourceOfLoanFinanc() {
		if (_sourcesStateSourceOfLoanFinanc == null) {
			return "";
		}
		else {
			return _sourcesStateSourceOfLoanFinanc;
		}
	}

	@Override
	public void setSourcesStateSourceOfLoanFinanc(
		String sourcesStateSourceOfLoanFinanc) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourcesStateSourceOfLoanFinanc = sourcesStateSourceOfLoanFinanc;
	}

	@JSON
	@Override
	public String getAnnualProjectedOne() {
		if (_annualProjectedOne == null) {
			return "";
		}
		else {
			return _annualProjectedOne;
		}
	}

	@Override
	public void setAnnualProjectedOne(String annualProjectedOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualProjectedOne = annualProjectedOne;
	}

	@JSON
	@Override
	public String getAnnualProjectedTwo() {
		if (_annualProjectedTwo == null) {
			return "";
		}
		else {
			return _annualProjectedTwo;
		}
	}

	@Override
	public void setAnnualProjectedTwo(String annualProjectedTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualProjectedTwo = annualProjectedTwo;
	}

	@JSON
	@Override
	public String getAnnualProjectedThree() {
		if (_annualProjectedThree == null) {
			return "";
		}
		else {
			return _annualProjectedThree;
		}
	}

	@Override
	public void setAnnualProjectedThree(String annualProjectedThree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualProjectedThree = annualProjectedThree;
	}

	@JSON
	@Override
	public String getAnnualProjectedNumber() {
		if (_annualProjectedNumber == null) {
			return "";
		}
		else {
			return _annualProjectedNumber;
		}
	}

	@Override
	public void setAnnualProjectedNumber(String annualProjectedNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualProjectedNumber = annualProjectedNumber;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismNewAttractionFormSecond.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismNewAttractionFormSecond toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismNewAttractionFormSecond>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismNewAttractionFormSecondImpl tourismNewAttractionFormSecondImpl =
			new TourismNewAttractionFormSecondImpl();

		tourismNewAttractionFormSecondImpl.setTourismNewAttractionFormSecId(
			getTourismNewAttractionFormSecId());
		tourismNewAttractionFormSecondImpl.setGroupId(getGroupId());
		tourismNewAttractionFormSecondImpl.setCompanyId(getCompanyId());
		tourismNewAttractionFormSecondImpl.setUserId(getUserId());
		tourismNewAttractionFormSecondImpl.setUserName(getUserName());
		tourismNewAttractionFormSecondImpl.setCreateDate(getCreateDate());
		tourismNewAttractionFormSecondImpl.setModifiedDate(getModifiedDate());
		tourismNewAttractionFormSecondImpl.setTargetMarketLocal(
			getTargetMarketLocal());
		tourismNewAttractionFormSecondImpl.setTargetMarketForeign(
			getTargetMarketForeign());
		tourismNewAttractionFormSecondImpl.setTargetMarketCountries(
			getTargetMarketCountries());
		tourismNewAttractionFormSecondImpl.setOwnerCountryOfOrigin(
			getOwnerCountryOfOrigin());
		tourismNewAttractionFormSecondImpl.setOwnerJointVenture(
			getOwnerJointVenture());
		tourismNewAttractionFormSecondImpl.setOwnerLocal(getOwnerLocal());
		tourismNewAttractionFormSecondImpl.setOwnerForeign(getOwnerForeign());
		tourismNewAttractionFormSecondImpl.setCapitalizationUSComponent(
			getCapitalizationUSComponent());
		tourismNewAttractionFormSecondImpl.setCapitalizationJEquivalent(
			getCapitalizationJEquivalent());
		tourismNewAttractionFormSecondImpl.setCapitalizationRateOfExchange(
			getCapitalizationRateOfExchange());
		tourismNewAttractionFormSecondImpl.setCapitalizationJComponent(
			getCapitalizationJComponent());
		tourismNewAttractionFormSecondImpl.setCapitalizationCapitalInvest(
			getCapitalizationCapitalInvest());
		tourismNewAttractionFormSecondImpl.setSourcesLoan(getSourcesLoan());
		tourismNewAttractionFormSecondImpl.setSourcesEquity(getSourcesEquity());
		tourismNewAttractionFormSecondImpl.setSourcesStateSourceOfLoanFinanc(
			getSourcesStateSourceOfLoanFinanc());
		tourismNewAttractionFormSecondImpl.setAnnualProjectedOne(
			getAnnualProjectedOne());
		tourismNewAttractionFormSecondImpl.setAnnualProjectedTwo(
			getAnnualProjectedTwo());
		tourismNewAttractionFormSecondImpl.setAnnualProjectedThree(
			getAnnualProjectedThree());
		tourismNewAttractionFormSecondImpl.setAnnualProjectedNumber(
			getAnnualProjectedNumber());
		tourismNewAttractionFormSecondImpl.setTourismApplicationId(
			getTourismApplicationId());

		tourismNewAttractionFormSecondImpl.resetOriginalValues();

		return tourismNewAttractionFormSecondImpl;
	}

	@Override
	public TourismNewAttractionFormSecond cloneWithOriginalValues() {
		TourismNewAttractionFormSecondImpl tourismNewAttractionFormSecondImpl =
			new TourismNewAttractionFormSecondImpl();

		tourismNewAttractionFormSecondImpl.setTourismNewAttractionFormSecId(
			this.<Long>getColumnOriginalValue("tourismNewAttractionFormSecId"));
		tourismNewAttractionFormSecondImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismNewAttractionFormSecondImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismNewAttractionFormSecondImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismNewAttractionFormSecondImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismNewAttractionFormSecondImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismNewAttractionFormSecondImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismNewAttractionFormSecondImpl.setTargetMarketLocal(
			this.<String>getColumnOriginalValue("targetMarketLocal"));
		tourismNewAttractionFormSecondImpl.setTargetMarketForeign(
			this.<String>getColumnOriginalValue("targetMarketForeign"));
		tourismNewAttractionFormSecondImpl.setTargetMarketCountries(
			this.<String>getColumnOriginalValue("targetMarketCountries"));
		tourismNewAttractionFormSecondImpl.setOwnerCountryOfOrigin(
			this.<String>getColumnOriginalValue("ownerCountryOfOrigin"));
		tourismNewAttractionFormSecondImpl.setOwnerJointVenture(
			this.<String>getColumnOriginalValue("ownerJointVenture"));
		tourismNewAttractionFormSecondImpl.setOwnerLocal(
			this.<String>getColumnOriginalValue("ownerLocal"));
		tourismNewAttractionFormSecondImpl.setOwnerForeign(
			this.<String>getColumnOriginalValue("ownerForeign"));
		tourismNewAttractionFormSecondImpl.setCapitalizationUSComponent(
			this.<String>getColumnOriginalValue("capitalizationUSComponent"));
		tourismNewAttractionFormSecondImpl.setCapitalizationJEquivalent(
			this.<String>getColumnOriginalValue("capitalizationJEquivalent"));
		tourismNewAttractionFormSecondImpl.setCapitalizationRateOfExchange(
			this.<String>getColumnOriginalValue(
				"capitalizationRateOfExchange"));
		tourismNewAttractionFormSecondImpl.setCapitalizationJComponent(
			this.<String>getColumnOriginalValue("capitalizationJComponent"));
		tourismNewAttractionFormSecondImpl.setCapitalizationCapitalInvest(
			this.<String>getColumnOriginalValue("capitalizationCapitalInvest"));
		tourismNewAttractionFormSecondImpl.setSourcesLoan(
			this.<String>getColumnOriginalValue("sourcesLoan "));
		tourismNewAttractionFormSecondImpl.setSourcesEquity(
			this.<String>getColumnOriginalValue("sourcesEquity"));
		tourismNewAttractionFormSecondImpl.setSourcesStateSourceOfLoanFinanc(
			this.<String>getColumnOriginalValue(
				"sourcesStateSourceOfLoanFinanc"));
		tourismNewAttractionFormSecondImpl.setAnnualProjectedOne(
			this.<String>getColumnOriginalValue("annualProjectedOne "));
		tourismNewAttractionFormSecondImpl.setAnnualProjectedTwo(
			this.<String>getColumnOriginalValue("annualProjectedTwo"));
		tourismNewAttractionFormSecondImpl.setAnnualProjectedThree(
			this.<String>getColumnOriginalValue("annualProjectedThree "));
		tourismNewAttractionFormSecondImpl.setAnnualProjectedNumber(
			this.<String>getColumnOriginalValue("annualProjectedNumber"));
		tourismNewAttractionFormSecondImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));

		return tourismNewAttractionFormSecondImpl;
	}

	@Override
	public int compareTo(
		TourismNewAttractionFormSecond tourismNewAttractionFormSecond) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), tourismNewAttractionFormSecond.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismNewAttractionFormSecond)) {
			return false;
		}

		TourismNewAttractionFormSecond tourismNewAttractionFormSecond =
			(TourismNewAttractionFormSecond)object;

		long primaryKey = tourismNewAttractionFormSecond.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismNewAttractionFormSecond> toCacheModel() {
		TourismNewAttractionFormSecondCacheModel
			tourismNewAttractionFormSecondCacheModel =
				new TourismNewAttractionFormSecondCacheModel();

		tourismNewAttractionFormSecondCacheModel.tourismNewAttractionFormSecId =
			getTourismNewAttractionFormSecId();

		tourismNewAttractionFormSecondCacheModel.groupId = getGroupId();

		tourismNewAttractionFormSecondCacheModel.companyId = getCompanyId();

		tourismNewAttractionFormSecondCacheModel.userId = getUserId();

		tourismNewAttractionFormSecondCacheModel.userName = getUserName();

		String userName = tourismNewAttractionFormSecondCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismNewAttractionFormSecondCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismNewAttractionFormSecondCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismNewAttractionFormSecondCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismNewAttractionFormSecondCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismNewAttractionFormSecondCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		tourismNewAttractionFormSecondCacheModel.targetMarketLocal =
			getTargetMarketLocal();

		String targetMarketLocal =
			tourismNewAttractionFormSecondCacheModel.targetMarketLocal;

		if ((targetMarketLocal != null) && (targetMarketLocal.length() == 0)) {
			tourismNewAttractionFormSecondCacheModel.targetMarketLocal = null;
		}

		tourismNewAttractionFormSecondCacheModel.targetMarketForeign =
			getTargetMarketForeign();

		String targetMarketForeign =
			tourismNewAttractionFormSecondCacheModel.targetMarketForeign;

		if ((targetMarketForeign != null) &&
			(targetMarketForeign.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.targetMarketForeign = null;
		}

		tourismNewAttractionFormSecondCacheModel.targetMarketCountries =
			getTargetMarketCountries();

		String targetMarketCountries =
			tourismNewAttractionFormSecondCacheModel.targetMarketCountries;

		if ((targetMarketCountries != null) &&
			(targetMarketCountries.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.targetMarketCountries =
				null;
		}

		tourismNewAttractionFormSecondCacheModel.ownerCountryOfOrigin =
			getOwnerCountryOfOrigin();

		String ownerCountryOfOrigin =
			tourismNewAttractionFormSecondCacheModel.ownerCountryOfOrigin;

		if ((ownerCountryOfOrigin != null) &&
			(ownerCountryOfOrigin.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.ownerCountryOfOrigin =
				null;
		}

		tourismNewAttractionFormSecondCacheModel.ownerJointVenture =
			getOwnerJointVenture();

		String ownerJointVenture =
			tourismNewAttractionFormSecondCacheModel.ownerJointVenture;

		if ((ownerJointVenture != null) && (ownerJointVenture.length() == 0)) {
			tourismNewAttractionFormSecondCacheModel.ownerJointVenture = null;
		}

		tourismNewAttractionFormSecondCacheModel.ownerLocal = getOwnerLocal();

		String ownerLocal = tourismNewAttractionFormSecondCacheModel.ownerLocal;

		if ((ownerLocal != null) && (ownerLocal.length() == 0)) {
			tourismNewAttractionFormSecondCacheModel.ownerLocal = null;
		}

		tourismNewAttractionFormSecondCacheModel.ownerForeign =
			getOwnerForeign();

		String ownerForeign =
			tourismNewAttractionFormSecondCacheModel.ownerForeign;

		if ((ownerForeign != null) && (ownerForeign.length() == 0)) {
			tourismNewAttractionFormSecondCacheModel.ownerForeign = null;
		}

		tourismNewAttractionFormSecondCacheModel.capitalizationUSComponent =
			getCapitalizationUSComponent();

		String capitalizationUSComponent =
			tourismNewAttractionFormSecondCacheModel.capitalizationUSComponent;

		if ((capitalizationUSComponent != null) &&
			(capitalizationUSComponent.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.capitalizationUSComponent =
				null;
		}

		tourismNewAttractionFormSecondCacheModel.capitalizationJEquivalent =
			getCapitalizationJEquivalent();

		String capitalizationJEquivalent =
			tourismNewAttractionFormSecondCacheModel.capitalizationJEquivalent;

		if ((capitalizationJEquivalent != null) &&
			(capitalizationJEquivalent.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.capitalizationJEquivalent =
				null;
		}

		tourismNewAttractionFormSecondCacheModel.capitalizationRateOfExchange =
			getCapitalizationRateOfExchange();

		String capitalizationRateOfExchange =
			tourismNewAttractionFormSecondCacheModel.
				capitalizationRateOfExchange;

		if ((capitalizationRateOfExchange != null) &&
			(capitalizationRateOfExchange.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.
				capitalizationRateOfExchange = null;
		}

		tourismNewAttractionFormSecondCacheModel.capitalizationJComponent =
			getCapitalizationJComponent();

		String capitalizationJComponent =
			tourismNewAttractionFormSecondCacheModel.capitalizationJComponent;

		if ((capitalizationJComponent != null) &&
			(capitalizationJComponent.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.capitalizationJComponent =
				null;
		}

		tourismNewAttractionFormSecondCacheModel.capitalizationCapitalInvest =
			getCapitalizationCapitalInvest();

		String capitalizationCapitalInvest =
			tourismNewAttractionFormSecondCacheModel.
				capitalizationCapitalInvest;

		if ((capitalizationCapitalInvest != null) &&
			(capitalizationCapitalInvest.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.
				capitalizationCapitalInvest = null;
		}

		tourismNewAttractionFormSecondCacheModel.sourcesLoan = getSourcesLoan();

		String sourcesLoan =
			tourismNewAttractionFormSecondCacheModel.sourcesLoan;

		if ((sourcesLoan != null) && (sourcesLoan.length() == 0)) {
			tourismNewAttractionFormSecondCacheModel.sourcesLoan = null;
		}

		tourismNewAttractionFormSecondCacheModel.sourcesEquity =
			getSourcesEquity();

		String sourcesEquity =
			tourismNewAttractionFormSecondCacheModel.sourcesEquity;

		if ((sourcesEquity != null) && (sourcesEquity.length() == 0)) {
			tourismNewAttractionFormSecondCacheModel.sourcesEquity = null;
		}

		tourismNewAttractionFormSecondCacheModel.
			sourcesStateSourceOfLoanFinanc =
				getSourcesStateSourceOfLoanFinanc();

		String sourcesStateSourceOfLoanFinanc =
			tourismNewAttractionFormSecondCacheModel.
				sourcesStateSourceOfLoanFinanc;

		if ((sourcesStateSourceOfLoanFinanc != null) &&
			(sourcesStateSourceOfLoanFinanc.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.
				sourcesStateSourceOfLoanFinanc = null;
		}

		tourismNewAttractionFormSecondCacheModel.annualProjectedOne =
			getAnnualProjectedOne();

		String annualProjectedOne =
			tourismNewAttractionFormSecondCacheModel.annualProjectedOne;

		if ((annualProjectedOne != null) &&
			(annualProjectedOne.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.annualProjectedOne = null;
		}

		tourismNewAttractionFormSecondCacheModel.annualProjectedTwo =
			getAnnualProjectedTwo();

		String annualProjectedTwo =
			tourismNewAttractionFormSecondCacheModel.annualProjectedTwo;

		if ((annualProjectedTwo != null) &&
			(annualProjectedTwo.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.annualProjectedTwo = null;
		}

		tourismNewAttractionFormSecondCacheModel.annualProjectedThree =
			getAnnualProjectedThree();

		String annualProjectedThree =
			tourismNewAttractionFormSecondCacheModel.annualProjectedThree;

		if ((annualProjectedThree != null) &&
			(annualProjectedThree.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.annualProjectedThree =
				null;
		}

		tourismNewAttractionFormSecondCacheModel.annualProjectedNumber =
			getAnnualProjectedNumber();

		String annualProjectedNumber =
			tourismNewAttractionFormSecondCacheModel.annualProjectedNumber;

		if ((annualProjectedNumber != null) &&
			(annualProjectedNumber.length() == 0)) {

			tourismNewAttractionFormSecondCacheModel.annualProjectedNumber =
				null;
		}

		tourismNewAttractionFormSecondCacheModel.tourismApplicationId =
			getTourismApplicationId();

		return tourismNewAttractionFormSecondCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismNewAttractionFormSecond, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TourismNewAttractionFormSecond, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAttractionFormSecond, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismNewAttractionFormSecond)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismNewAttractionFormSecond>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismNewAttractionFormSecond.class,
						ModelWrapper.class);

	}

	private long _tourismNewAttractionFormSecId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _targetMarketLocal;
	private String _targetMarketForeign;
	private String _targetMarketCountries;
	private String _ownerCountryOfOrigin;
	private String _ownerJointVenture;
	private String _ownerLocal;
	private String _ownerForeign;
	private String _capitalizationUSComponent;
	private String _capitalizationJEquivalent;
	private String _capitalizationRateOfExchange;
	private String _capitalizationJComponent;
	private String _capitalizationCapitalInvest;
	private String _sourcesLoan;
	private String _sourcesEquity;
	private String _sourcesStateSourceOfLoanFinanc;
	private String _annualProjectedOne;
	private String _annualProjectedTwo;
	private String _annualProjectedThree;
	private String _annualProjectedNumber;
	private long _tourismApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismNewAttractionFormSecond, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismNewAttractionFormSecond)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"tourismNewAttractionFormSecId", _tourismNewAttractionFormSecId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("targetMarketLocal", _targetMarketLocal);
		_columnOriginalValues.put("targetMarketForeign", _targetMarketForeign);
		_columnOriginalValues.put(
			"targetMarketCountries", _targetMarketCountries);
		_columnOriginalValues.put(
			"ownerCountryOfOrigin", _ownerCountryOfOrigin);
		_columnOriginalValues.put("ownerJointVenture", _ownerJointVenture);
		_columnOriginalValues.put("ownerLocal", _ownerLocal);
		_columnOriginalValues.put("ownerForeign", _ownerForeign);
		_columnOriginalValues.put(
			"capitalizationUSComponent", _capitalizationUSComponent);
		_columnOriginalValues.put(
			"capitalizationJEquivalent", _capitalizationJEquivalent);
		_columnOriginalValues.put(
			"capitalizationRateOfExchange", _capitalizationRateOfExchange);
		_columnOriginalValues.put(
			"capitalizationJComponent", _capitalizationJComponent);
		_columnOriginalValues.put(
			"capitalizationCapitalInvest", _capitalizationCapitalInvest);
		_columnOriginalValues.put("sourcesLoan ", _sourcesLoan);
		_columnOriginalValues.put("sourcesEquity", _sourcesEquity);
		_columnOriginalValues.put(
			"sourcesStateSourceOfLoanFinanc", _sourcesStateSourceOfLoanFinanc);
		_columnOriginalValues.put("annualProjectedOne ", _annualProjectedOne);
		_columnOriginalValues.put("annualProjectedTwo", _annualProjectedTwo);
		_columnOriginalValues.put(
			"annualProjectedThree ", _annualProjectedThree);
		_columnOriginalValues.put(
			"annualProjectedNumber", _annualProjectedNumber);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismNewAttractionFormSecId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("targetMarketLocal", 128L);

		columnBitmasks.put("targetMarketForeign", 256L);

		columnBitmasks.put("targetMarketCountries", 512L);

		columnBitmasks.put("ownerCountryOfOrigin", 1024L);

		columnBitmasks.put("ownerJointVenture", 2048L);

		columnBitmasks.put("ownerLocal", 4096L);

		columnBitmasks.put("ownerForeign", 8192L);

		columnBitmasks.put("capitalizationUSComponent", 16384L);

		columnBitmasks.put("capitalizationJEquivalent", 32768L);

		columnBitmasks.put("capitalizationRateOfExchange", 65536L);

		columnBitmasks.put("capitalizationJComponent", 131072L);

		columnBitmasks.put("capitalizationCapitalInvest", 262144L);

		columnBitmasks.put("sourcesLoan ", 524288L);

		columnBitmasks.put("sourcesEquity", 1048576L);

		columnBitmasks.put("sourcesStateSourceOfLoanFinanc", 2097152L);

		columnBitmasks.put("annualProjectedOne ", 4194304L);

		columnBitmasks.put("annualProjectedTwo", 8388608L);

		columnBitmasks.put("annualProjectedThree ", 16777216L);

		columnBitmasks.put("annualProjectedNumber", 33554432L);

		columnBitmasks.put("tourismApplicationId", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismNewAttractionFormSecond _escapedModel;

}