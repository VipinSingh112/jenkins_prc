/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismNewAttractionFormFirst;
import com.nbp.tourism.application.form.services.model.TourismNewAttractionFormFirstModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismNewAttractionFormFirst service. Represents a row in the &quot;nbp_tourism_new_attraction_ff&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismNewAttractionFormFirstModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismNewAttractionFormFirstImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismNewAttractionFormFirstImpl
 * @generated
 */
@JSON(strict = true)
public class TourismNewAttractionFormFirstModelImpl
	extends BaseModelImpl<TourismNewAttractionFormFirst>
	implements TourismNewAttractionFormFirstModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism new attraction form first model instance should use the <code>TourismNewAttractionFormFirst</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_new_attraction_ff";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismNewAttractFormFirstId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"attractionDateOfApplication", Types.TIMESTAMP},
		{"typeOfAttrcation", Types.VARCHAR},
		{"attractionNameOfProperty", Types.VARCHAR},
		{"attractionNameOfOwner", Types.VARCHAR},
		{"attractionLocation", Types.VARCHAR},
		{"attractionCompanyNumber", Types.VARCHAR},
		{"attractionBusinessRegisNo", Types.VARCHAR},
		{"attractionDateOfRegistration", Types.TIMESTAMP},
		{"attractionOwnerTrnNumber", Types.VARCHAR},
		{"attractionTccNumber", Types.VARCHAR},
		{"attractionExpiryDate", Types.TIMESTAMP},
		{"attractionNameOfOperator", Types.VARCHAR},
		{"attractionoperatorTrnNumber", Types.VARCHAR},
		{"attractionOperatorTccNumber", Types.VARCHAR},
		{"attractOperatorExpiryDate", Types.TIMESTAMP},
		{"attractionContactPerson", Types.VARCHAR},
		{"attractionPositionHeld", Types.VARCHAR},
		{"attractionEntityId", Types.VARCHAR},
		{"attractionBriefdescription", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismNewAttractFormFirstId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("attractionDateOfApplication", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeOfAttrcation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionNameOfProperty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionNameOfOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionCompanyNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionBusinessRegisNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionDateOfRegistration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("attractionOwnerTrnNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionTccNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("attractionNameOfOperator", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionoperatorTrnNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionOperatorTccNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractOperatorExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("attractionContactPerson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionPositionHeld", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionEntityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attractionBriefdescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_new_attraction_ff (tourismNewAttractFormFirstId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,attractionDateOfApplication DATE null,typeOfAttrcation VARCHAR(75) null,attractionNameOfProperty VARCHAR(75) null,attractionNameOfOwner VARCHAR(75) null,attractionLocation VARCHAR(500) null,attractionCompanyNumber VARCHAR(75) null,attractionBusinessRegisNo VARCHAR(75) null,attractionDateOfRegistration DATE null,attractionOwnerTrnNumber VARCHAR(75) null,attractionTccNumber VARCHAR(75) null,attractionExpiryDate DATE null,attractionNameOfOperator VARCHAR(75) null,attractionoperatorTrnNumber VARCHAR(75) null,attractionOperatorTccNumber VARCHAR(75) null,attractOperatorExpiryDate DATE null,attractionContactPerson VARCHAR(75) null,attractionPositionHeld VARCHAR(75) null,attractionEntityId VARCHAR(75) null,attractionBriefdescription VARCHAR(500) null,tourismApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_new_attraction_ff";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismNewAttractionFormFirst.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_new_attraction_ff.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismNewAttractionFormFirstModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismNewAttractFormFirstId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismNewAttractFormFirstId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismNewAttractFormFirstId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismNewAttractionFormFirst.class;
	}

	@Override
	public String getModelClassName() {
		return TourismNewAttractionFormFirst.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismNewAttractionFormFirst, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TourismNewAttractionFormFirst, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAttractionFormFirst, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismNewAttractionFormFirst)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismNewAttractionFormFirst, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismNewAttractionFormFirst, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismNewAttractionFormFirst)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismNewAttractionFormFirst, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismNewAttractionFormFirst, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismNewAttractionFormFirst, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismNewAttractionFormFirst, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<TourismNewAttractionFormFirst, Object>>();

			attributeGetterFunctions.put(
				"tourismNewAttractFormFirstId",
				TourismNewAttractionFormFirst::getTourismNewAttractFormFirstId);
			attributeGetterFunctions.put(
				"groupId", TourismNewAttractionFormFirst::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismNewAttractionFormFirst::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismNewAttractionFormFirst::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismNewAttractionFormFirst::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismNewAttractionFormFirst::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", TourismNewAttractionFormFirst::getModifiedDate);
			attributeGetterFunctions.put(
				"attractionDateOfApplication",
				TourismNewAttractionFormFirst::getAttractionDateOfApplication);
			attributeGetterFunctions.put(
				"typeOfAttrcation",
				TourismNewAttractionFormFirst::getTypeOfAttrcation);
			attributeGetterFunctions.put(
				"attractionNameOfProperty",
				TourismNewAttractionFormFirst::getAttractionNameOfProperty);
			attributeGetterFunctions.put(
				"attractionNameOfOwner",
				TourismNewAttractionFormFirst::getAttractionNameOfOwner);
			attributeGetterFunctions.put(
				"attractionLocation",
				TourismNewAttractionFormFirst::getAttractionLocation);
			attributeGetterFunctions.put(
				"attractionCompanyNumber",
				TourismNewAttractionFormFirst::getAttractionCompanyNumber);
			attributeGetterFunctions.put(
				"attractionBusinessRegisNo",
				TourismNewAttractionFormFirst::getAttractionBusinessRegisNo);
			attributeGetterFunctions.put(
				"attractionDateOfRegistration",
				TourismNewAttractionFormFirst::getAttractionDateOfRegistration);
			attributeGetterFunctions.put(
				"attractionOwnerTrnNumber",
				TourismNewAttractionFormFirst::getAttractionOwnerTrnNumber);
			attributeGetterFunctions.put(
				"attractionTccNumber",
				TourismNewAttractionFormFirst::getAttractionTccNumber);
			attributeGetterFunctions.put(
				"attractionExpiryDate",
				TourismNewAttractionFormFirst::getAttractionExpiryDate);
			attributeGetterFunctions.put(
				"attractionNameOfOperator",
				TourismNewAttractionFormFirst::getAttractionNameOfOperator);
			attributeGetterFunctions.put(
				"attractionoperatorTrnNumber",
				TourismNewAttractionFormFirst::getAttractionoperatorTrnNumber);
			attributeGetterFunctions.put(
				"attractionOperatorTccNumber",
				TourismNewAttractionFormFirst::getAttractionOperatorTccNumber);
			attributeGetterFunctions.put(
				"attractOperatorExpiryDate",
				TourismNewAttractionFormFirst::getAttractOperatorExpiryDate);
			attributeGetterFunctions.put(
				"attractionContactPerson",
				TourismNewAttractionFormFirst::getAttractionContactPerson);
			attributeGetterFunctions.put(
				"attractionPositionHeld",
				TourismNewAttractionFormFirst::getAttractionPositionHeld);
			attributeGetterFunctions.put(
				"attractionEntityId",
				TourismNewAttractionFormFirst::getAttractionEntityId);
			attributeGetterFunctions.put(
				"attractionBriefdescription",
				TourismNewAttractionFormFirst::getAttractionBriefdescription);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismNewAttractionFormFirst::getTourismApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismNewAttractionFormFirst, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismNewAttractionFormFirst, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<TourismNewAttractionFormFirst, ?>>();

			attributeSetterBiConsumers.put(
				"tourismNewAttractFormFirstId",
				(BiConsumer<TourismNewAttractionFormFirst, Long>)
					TourismNewAttractionFormFirst::
						setTourismNewAttractFormFirstId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismNewAttractionFormFirst, Long>)
					TourismNewAttractionFormFirst::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismNewAttractionFormFirst, Long>)
					TourismNewAttractionFormFirst::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismNewAttractionFormFirst, Long>)
					TourismNewAttractionFormFirst::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismNewAttractionFormFirst, Date>)
					TourismNewAttractionFormFirst::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismNewAttractionFormFirst, Date>)
					TourismNewAttractionFormFirst::setModifiedDate);
			attributeSetterBiConsumers.put(
				"attractionDateOfApplication",
				(BiConsumer<TourismNewAttractionFormFirst, Date>)
					TourismNewAttractionFormFirst::
						setAttractionDateOfApplication);
			attributeSetterBiConsumers.put(
				"typeOfAttrcation",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setTypeOfAttrcation);
			attributeSetterBiConsumers.put(
				"attractionNameOfProperty",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionNameOfProperty);
			attributeSetterBiConsumers.put(
				"attractionNameOfOwner",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionNameOfOwner);
			attributeSetterBiConsumers.put(
				"attractionLocation",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionLocation);
			attributeSetterBiConsumers.put(
				"attractionCompanyNumber",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionCompanyNumber);
			attributeSetterBiConsumers.put(
				"attractionBusinessRegisNo",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::
						setAttractionBusinessRegisNo);
			attributeSetterBiConsumers.put(
				"attractionDateOfRegistration",
				(BiConsumer<TourismNewAttractionFormFirst, Date>)
					TourismNewAttractionFormFirst::
						setAttractionDateOfRegistration);
			attributeSetterBiConsumers.put(
				"attractionOwnerTrnNumber",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionOwnerTrnNumber);
			attributeSetterBiConsumers.put(
				"attractionTccNumber",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionTccNumber);
			attributeSetterBiConsumers.put(
				"attractionExpiryDate",
				(BiConsumer<TourismNewAttractionFormFirst, Date>)
					TourismNewAttractionFormFirst::setAttractionExpiryDate);
			attributeSetterBiConsumers.put(
				"attractionNameOfOperator",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionNameOfOperator);
			attributeSetterBiConsumers.put(
				"attractionoperatorTrnNumber",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::
						setAttractionoperatorTrnNumber);
			attributeSetterBiConsumers.put(
				"attractionOperatorTccNumber",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::
						setAttractionOperatorTccNumber);
			attributeSetterBiConsumers.put(
				"attractOperatorExpiryDate",
				(BiConsumer<TourismNewAttractionFormFirst, Date>)
					TourismNewAttractionFormFirst::
						setAttractOperatorExpiryDate);
			attributeSetterBiConsumers.put(
				"attractionContactPerson",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionContactPerson);
			attributeSetterBiConsumers.put(
				"attractionPositionHeld",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionPositionHeld);
			attributeSetterBiConsumers.put(
				"attractionEntityId",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::setAttractionEntityId);
			attributeSetterBiConsumers.put(
				"attractionBriefdescription",
				(BiConsumer<TourismNewAttractionFormFirst, String>)
					TourismNewAttractionFormFirst::
						setAttractionBriefdescription);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismNewAttractionFormFirst, Long>)
					TourismNewAttractionFormFirst::setTourismApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismNewAttractFormFirstId() {
		return _tourismNewAttractFormFirstId;
	}

	@Override
	public void setTourismNewAttractFormFirstId(
		long tourismNewAttractFormFirstId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismNewAttractFormFirstId = tourismNewAttractFormFirstId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getAttractionDateOfApplication() {
		return _attractionDateOfApplication;
	}

	@Override
	public void setAttractionDateOfApplication(
		Date attractionDateOfApplication) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionDateOfApplication = attractionDateOfApplication;
	}

	@JSON
	@Override
	public String getTypeOfAttrcation() {
		if (_typeOfAttrcation == null) {
			return "";
		}
		else {
			return _typeOfAttrcation;
		}
	}

	@Override
	public void setTypeOfAttrcation(String typeOfAttrcation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfAttrcation = typeOfAttrcation;
	}

	@JSON
	@Override
	public String getAttractionNameOfProperty() {
		if (_attractionNameOfProperty == null) {
			return "";
		}
		else {
			return _attractionNameOfProperty;
		}
	}

	@Override
	public void setAttractionNameOfProperty(String attractionNameOfProperty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionNameOfProperty = attractionNameOfProperty;
	}

	@JSON
	@Override
	public String getAttractionNameOfOwner() {
		if (_attractionNameOfOwner == null) {
			return "";
		}
		else {
			return _attractionNameOfOwner;
		}
	}

	@Override
	public void setAttractionNameOfOwner(String attractionNameOfOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionNameOfOwner = attractionNameOfOwner;
	}

	@JSON
	@Override
	public String getAttractionLocation() {
		if (_attractionLocation == null) {
			return "";
		}
		else {
			return _attractionLocation;
		}
	}

	@Override
	public void setAttractionLocation(String attractionLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionLocation = attractionLocation;
	}

	@JSON
	@Override
	public String getAttractionCompanyNumber() {
		if (_attractionCompanyNumber == null) {
			return "";
		}
		else {
			return _attractionCompanyNumber;
		}
	}

	@Override
	public void setAttractionCompanyNumber(String attractionCompanyNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionCompanyNumber = attractionCompanyNumber;
	}

	@JSON
	@Override
	public String getAttractionBusinessRegisNo() {
		if (_attractionBusinessRegisNo == null) {
			return "";
		}
		else {
			return _attractionBusinessRegisNo;
		}
	}

	@Override
	public void setAttractionBusinessRegisNo(String attractionBusinessRegisNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionBusinessRegisNo = attractionBusinessRegisNo;
	}

	@JSON
	@Override
	public Date getAttractionDateOfRegistration() {
		return _attractionDateOfRegistration;
	}

	@Override
	public void setAttractionDateOfRegistration(
		Date attractionDateOfRegistration) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionDateOfRegistration = attractionDateOfRegistration;
	}

	@JSON
	@Override
	public String getAttractionOwnerTrnNumber() {
		if (_attractionOwnerTrnNumber == null) {
			return "";
		}
		else {
			return _attractionOwnerTrnNumber;
		}
	}

	@Override
	public void setAttractionOwnerTrnNumber(String attractionOwnerTrnNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionOwnerTrnNumber = attractionOwnerTrnNumber;
	}

	@JSON
	@Override
	public String getAttractionTccNumber() {
		if (_attractionTccNumber == null) {
			return "";
		}
		else {
			return _attractionTccNumber;
		}
	}

	@Override
	public void setAttractionTccNumber(String attractionTccNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionTccNumber = attractionTccNumber;
	}

	@JSON
	@Override
	public Date getAttractionExpiryDate() {
		return _attractionExpiryDate;
	}

	@Override
	public void setAttractionExpiryDate(Date attractionExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionExpiryDate = attractionExpiryDate;
	}

	@JSON
	@Override
	public String getAttractionNameOfOperator() {
		if (_attractionNameOfOperator == null) {
			return "";
		}
		else {
			return _attractionNameOfOperator;
		}
	}

	@Override
	public void setAttractionNameOfOperator(String attractionNameOfOperator) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionNameOfOperator = attractionNameOfOperator;
	}

	@JSON
	@Override
	public String getAttractionoperatorTrnNumber() {
		if (_attractionoperatorTrnNumber == null) {
			return "";
		}
		else {
			return _attractionoperatorTrnNumber;
		}
	}

	@Override
	public void setAttractionoperatorTrnNumber(
		String attractionoperatorTrnNumber) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionoperatorTrnNumber = attractionoperatorTrnNumber;
	}

	@JSON
	@Override
	public String getAttractionOperatorTccNumber() {
		if (_attractionOperatorTccNumber == null) {
			return "";
		}
		else {
			return _attractionOperatorTccNumber;
		}
	}

	@Override
	public void setAttractionOperatorTccNumber(
		String attractionOperatorTccNumber) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionOperatorTccNumber = attractionOperatorTccNumber;
	}

	@JSON
	@Override
	public Date getAttractOperatorExpiryDate() {
		return _attractOperatorExpiryDate;
	}

	@Override
	public void setAttractOperatorExpiryDate(Date attractOperatorExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractOperatorExpiryDate = attractOperatorExpiryDate;
	}

	@JSON
	@Override
	public String getAttractionContactPerson() {
		if (_attractionContactPerson == null) {
			return "";
		}
		else {
			return _attractionContactPerson;
		}
	}

	@Override
	public void setAttractionContactPerson(String attractionContactPerson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionContactPerson = attractionContactPerson;
	}

	@JSON
	@Override
	public String getAttractionPositionHeld() {
		if (_attractionPositionHeld == null) {
			return "";
		}
		else {
			return _attractionPositionHeld;
		}
	}

	@Override
	public void setAttractionPositionHeld(String attractionPositionHeld) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionPositionHeld = attractionPositionHeld;
	}

	@JSON
	@Override
	public String getAttractionEntityId() {
		if (_attractionEntityId == null) {
			return "";
		}
		else {
			return _attractionEntityId;
		}
	}

	@Override
	public void setAttractionEntityId(String attractionEntityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionEntityId = attractionEntityId;
	}

	@JSON
	@Override
	public String getAttractionBriefdescription() {
		if (_attractionBriefdescription == null) {
			return "";
		}
		else {
			return _attractionBriefdescription;
		}
	}

	@Override
	public void setAttractionBriefdescription(
		String attractionBriefdescription) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionBriefdescription = attractionBriefdescription;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismNewAttractionFormFirst.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismNewAttractionFormFirst toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismNewAttractionFormFirst>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismNewAttractionFormFirstImpl tourismNewAttractionFormFirstImpl =
			new TourismNewAttractionFormFirstImpl();

		tourismNewAttractionFormFirstImpl.setTourismNewAttractFormFirstId(
			getTourismNewAttractFormFirstId());
		tourismNewAttractionFormFirstImpl.setGroupId(getGroupId());
		tourismNewAttractionFormFirstImpl.setCompanyId(getCompanyId());
		tourismNewAttractionFormFirstImpl.setUserId(getUserId());
		tourismNewAttractionFormFirstImpl.setUserName(getUserName());
		tourismNewAttractionFormFirstImpl.setCreateDate(getCreateDate());
		tourismNewAttractionFormFirstImpl.setModifiedDate(getModifiedDate());
		tourismNewAttractionFormFirstImpl.setAttractionDateOfApplication(
			getAttractionDateOfApplication());
		tourismNewAttractionFormFirstImpl.setTypeOfAttrcation(
			getTypeOfAttrcation());
		tourismNewAttractionFormFirstImpl.setAttractionNameOfProperty(
			getAttractionNameOfProperty());
		tourismNewAttractionFormFirstImpl.setAttractionNameOfOwner(
			getAttractionNameOfOwner());
		tourismNewAttractionFormFirstImpl.setAttractionLocation(
			getAttractionLocation());
		tourismNewAttractionFormFirstImpl.setAttractionCompanyNumber(
			getAttractionCompanyNumber());
		tourismNewAttractionFormFirstImpl.setAttractionBusinessRegisNo(
			getAttractionBusinessRegisNo());
		tourismNewAttractionFormFirstImpl.setAttractionDateOfRegistration(
			getAttractionDateOfRegistration());
		tourismNewAttractionFormFirstImpl.setAttractionOwnerTrnNumber(
			getAttractionOwnerTrnNumber());
		tourismNewAttractionFormFirstImpl.setAttractionTccNumber(
			getAttractionTccNumber());
		tourismNewAttractionFormFirstImpl.setAttractionExpiryDate(
			getAttractionExpiryDate());
		tourismNewAttractionFormFirstImpl.setAttractionNameOfOperator(
			getAttractionNameOfOperator());
		tourismNewAttractionFormFirstImpl.setAttractionoperatorTrnNumber(
			getAttractionoperatorTrnNumber());
		tourismNewAttractionFormFirstImpl.setAttractionOperatorTccNumber(
			getAttractionOperatorTccNumber());
		tourismNewAttractionFormFirstImpl.setAttractOperatorExpiryDate(
			getAttractOperatorExpiryDate());
		tourismNewAttractionFormFirstImpl.setAttractionContactPerson(
			getAttractionContactPerson());
		tourismNewAttractionFormFirstImpl.setAttractionPositionHeld(
			getAttractionPositionHeld());
		tourismNewAttractionFormFirstImpl.setAttractionEntityId(
			getAttractionEntityId());
		tourismNewAttractionFormFirstImpl.setAttractionBriefdescription(
			getAttractionBriefdescription());
		tourismNewAttractionFormFirstImpl.setTourismApplicationId(
			getTourismApplicationId());

		tourismNewAttractionFormFirstImpl.resetOriginalValues();

		return tourismNewAttractionFormFirstImpl;
	}

	@Override
	public TourismNewAttractionFormFirst cloneWithOriginalValues() {
		TourismNewAttractionFormFirstImpl tourismNewAttractionFormFirstImpl =
			new TourismNewAttractionFormFirstImpl();

		tourismNewAttractionFormFirstImpl.setTourismNewAttractFormFirstId(
			this.<Long>getColumnOriginalValue("tourismNewAttractFormFirstId"));
		tourismNewAttractionFormFirstImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismNewAttractionFormFirstImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismNewAttractionFormFirstImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismNewAttractionFormFirstImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismNewAttractionFormFirstImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismNewAttractionFormFirstImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismNewAttractionFormFirstImpl.setAttractionDateOfApplication(
			this.<Date>getColumnOriginalValue("attractionDateOfApplication"));
		tourismNewAttractionFormFirstImpl.setTypeOfAttrcation(
			this.<String>getColumnOriginalValue("typeOfAttrcation"));
		tourismNewAttractionFormFirstImpl.setAttractionNameOfProperty(
			this.<String>getColumnOriginalValue("attractionNameOfProperty"));
		tourismNewAttractionFormFirstImpl.setAttractionNameOfOwner(
			this.<String>getColumnOriginalValue("attractionNameOfOwner"));
		tourismNewAttractionFormFirstImpl.setAttractionLocation(
			this.<String>getColumnOriginalValue("attractionLocation"));
		tourismNewAttractionFormFirstImpl.setAttractionCompanyNumber(
			this.<String>getColumnOriginalValue("attractionCompanyNumber"));
		tourismNewAttractionFormFirstImpl.setAttractionBusinessRegisNo(
			this.<String>getColumnOriginalValue("attractionBusinessRegisNo"));
		tourismNewAttractionFormFirstImpl.setAttractionDateOfRegistration(
			this.<Date>getColumnOriginalValue("attractionDateOfRegistration"));
		tourismNewAttractionFormFirstImpl.setAttractionOwnerTrnNumber(
			this.<String>getColumnOriginalValue("attractionOwnerTrnNumber"));
		tourismNewAttractionFormFirstImpl.setAttractionTccNumber(
			this.<String>getColumnOriginalValue("attractionTccNumber"));
		tourismNewAttractionFormFirstImpl.setAttractionExpiryDate(
			this.<Date>getColumnOriginalValue("attractionExpiryDate"));
		tourismNewAttractionFormFirstImpl.setAttractionNameOfOperator(
			this.<String>getColumnOriginalValue("attractionNameOfOperator"));
		tourismNewAttractionFormFirstImpl.setAttractionoperatorTrnNumber(
			this.<String>getColumnOriginalValue("attractionoperatorTrnNumber"));
		tourismNewAttractionFormFirstImpl.setAttractionOperatorTccNumber(
			this.<String>getColumnOriginalValue("attractionOperatorTccNumber"));
		tourismNewAttractionFormFirstImpl.setAttractOperatorExpiryDate(
			this.<Date>getColumnOriginalValue("attractOperatorExpiryDate"));
		tourismNewAttractionFormFirstImpl.setAttractionContactPerson(
			this.<String>getColumnOriginalValue("attractionContactPerson"));
		tourismNewAttractionFormFirstImpl.setAttractionPositionHeld(
			this.<String>getColumnOriginalValue("attractionPositionHeld"));
		tourismNewAttractionFormFirstImpl.setAttractionEntityId(
			this.<String>getColumnOriginalValue("attractionEntityId"));
		tourismNewAttractionFormFirstImpl.setAttractionBriefdescription(
			this.<String>getColumnOriginalValue("attractionBriefdescription"));
		tourismNewAttractionFormFirstImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));

		return tourismNewAttractionFormFirstImpl;
	}

	@Override
	public int compareTo(
		TourismNewAttractionFormFirst tourismNewAttractionFormFirst) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), tourismNewAttractionFormFirst.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismNewAttractionFormFirst)) {
			return false;
		}

		TourismNewAttractionFormFirst tourismNewAttractionFormFirst =
			(TourismNewAttractionFormFirst)object;

		long primaryKey = tourismNewAttractionFormFirst.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismNewAttractionFormFirst> toCacheModel() {
		TourismNewAttractionFormFirstCacheModel
			tourismNewAttractionFormFirstCacheModel =
				new TourismNewAttractionFormFirstCacheModel();

		tourismNewAttractionFormFirstCacheModel.tourismNewAttractFormFirstId =
			getTourismNewAttractFormFirstId();

		tourismNewAttractionFormFirstCacheModel.groupId = getGroupId();

		tourismNewAttractionFormFirstCacheModel.companyId = getCompanyId();

		tourismNewAttractionFormFirstCacheModel.userId = getUserId();

		tourismNewAttractionFormFirstCacheModel.userName = getUserName();

		String userName = tourismNewAttractionFormFirstCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismNewAttractionFormFirstCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismNewAttractionFormFirstCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismNewAttractionFormFirstCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismNewAttractionFormFirstCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismNewAttractionFormFirstCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		Date attractionDateOfApplication = getAttractionDateOfApplication();

		if (attractionDateOfApplication != null) {
			tourismNewAttractionFormFirstCacheModel.
				attractionDateOfApplication =
					attractionDateOfApplication.getTime();
		}
		else {
			tourismNewAttractionFormFirstCacheModel.
				attractionDateOfApplication = Long.MIN_VALUE;
		}

		tourismNewAttractionFormFirstCacheModel.typeOfAttrcation =
			getTypeOfAttrcation();

		String typeOfAttrcation =
			tourismNewAttractionFormFirstCacheModel.typeOfAttrcation;

		if ((typeOfAttrcation != null) && (typeOfAttrcation.length() == 0)) {
			tourismNewAttractionFormFirstCacheModel.typeOfAttrcation = null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionNameOfProperty =
			getAttractionNameOfProperty();

		String attractionNameOfProperty =
			tourismNewAttractionFormFirstCacheModel.attractionNameOfProperty;

		if ((attractionNameOfProperty != null) &&
			(attractionNameOfProperty.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionNameOfProperty =
				null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionNameOfOwner =
			getAttractionNameOfOwner();

		String attractionNameOfOwner =
			tourismNewAttractionFormFirstCacheModel.attractionNameOfOwner;

		if ((attractionNameOfOwner != null) &&
			(attractionNameOfOwner.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionNameOfOwner =
				null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionLocation =
			getAttractionLocation();

		String attractionLocation =
			tourismNewAttractionFormFirstCacheModel.attractionLocation;

		if ((attractionLocation != null) &&
			(attractionLocation.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionLocation = null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionCompanyNumber =
			getAttractionCompanyNumber();

		String attractionCompanyNumber =
			tourismNewAttractionFormFirstCacheModel.attractionCompanyNumber;

		if ((attractionCompanyNumber != null) &&
			(attractionCompanyNumber.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionCompanyNumber =
				null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionBusinessRegisNo =
			getAttractionBusinessRegisNo();

		String attractionBusinessRegisNo =
			tourismNewAttractionFormFirstCacheModel.attractionBusinessRegisNo;

		if ((attractionBusinessRegisNo != null) &&
			(attractionBusinessRegisNo.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionBusinessRegisNo =
				null;
		}

		Date attractionDateOfRegistration = getAttractionDateOfRegistration();

		if (attractionDateOfRegistration != null) {
			tourismNewAttractionFormFirstCacheModel.
				attractionDateOfRegistration =
					attractionDateOfRegistration.getTime();
		}
		else {
			tourismNewAttractionFormFirstCacheModel.
				attractionDateOfRegistration = Long.MIN_VALUE;
		}

		tourismNewAttractionFormFirstCacheModel.attractionOwnerTrnNumber =
			getAttractionOwnerTrnNumber();

		String attractionOwnerTrnNumber =
			tourismNewAttractionFormFirstCacheModel.attractionOwnerTrnNumber;

		if ((attractionOwnerTrnNumber != null) &&
			(attractionOwnerTrnNumber.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionOwnerTrnNumber =
				null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionTccNumber =
			getAttractionTccNumber();

		String attractionTccNumber =
			tourismNewAttractionFormFirstCacheModel.attractionTccNumber;

		if ((attractionTccNumber != null) &&
			(attractionTccNumber.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionTccNumber = null;
		}

		Date attractionExpiryDate = getAttractionExpiryDate();

		if (attractionExpiryDate != null) {
			tourismNewAttractionFormFirstCacheModel.attractionExpiryDate =
				attractionExpiryDate.getTime();
		}
		else {
			tourismNewAttractionFormFirstCacheModel.attractionExpiryDate =
				Long.MIN_VALUE;
		}

		tourismNewAttractionFormFirstCacheModel.attractionNameOfOperator =
			getAttractionNameOfOperator();

		String attractionNameOfOperator =
			tourismNewAttractionFormFirstCacheModel.attractionNameOfOperator;

		if ((attractionNameOfOperator != null) &&
			(attractionNameOfOperator.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionNameOfOperator =
				null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionoperatorTrnNumber =
			getAttractionoperatorTrnNumber();

		String attractionoperatorTrnNumber =
			tourismNewAttractionFormFirstCacheModel.attractionoperatorTrnNumber;

		if ((attractionoperatorTrnNumber != null) &&
			(attractionoperatorTrnNumber.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.
				attractionoperatorTrnNumber = null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionOperatorTccNumber =
			getAttractionOperatorTccNumber();

		String attractionOperatorTccNumber =
			tourismNewAttractionFormFirstCacheModel.attractionOperatorTccNumber;

		if ((attractionOperatorTccNumber != null) &&
			(attractionOperatorTccNumber.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.
				attractionOperatorTccNumber = null;
		}

		Date attractOperatorExpiryDate = getAttractOperatorExpiryDate();

		if (attractOperatorExpiryDate != null) {
			tourismNewAttractionFormFirstCacheModel.attractOperatorExpiryDate =
				attractOperatorExpiryDate.getTime();
		}
		else {
			tourismNewAttractionFormFirstCacheModel.attractOperatorExpiryDate =
				Long.MIN_VALUE;
		}

		tourismNewAttractionFormFirstCacheModel.attractionContactPerson =
			getAttractionContactPerson();

		String attractionContactPerson =
			tourismNewAttractionFormFirstCacheModel.attractionContactPerson;

		if ((attractionContactPerson != null) &&
			(attractionContactPerson.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionContactPerson =
				null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionPositionHeld =
			getAttractionPositionHeld();

		String attractionPositionHeld =
			tourismNewAttractionFormFirstCacheModel.attractionPositionHeld;

		if ((attractionPositionHeld != null) &&
			(attractionPositionHeld.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionPositionHeld =
				null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionEntityId =
			getAttractionEntityId();

		String attractionEntityId =
			tourismNewAttractionFormFirstCacheModel.attractionEntityId;

		if ((attractionEntityId != null) &&
			(attractionEntityId.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionEntityId = null;
		}

		tourismNewAttractionFormFirstCacheModel.attractionBriefdescription =
			getAttractionBriefdescription();

		String attractionBriefdescription =
			tourismNewAttractionFormFirstCacheModel.attractionBriefdescription;

		if ((attractionBriefdescription != null) &&
			(attractionBriefdescription.length() == 0)) {

			tourismNewAttractionFormFirstCacheModel.attractionBriefdescription =
				null;
		}

		tourismNewAttractionFormFirstCacheModel.tourismApplicationId =
			getTourismApplicationId();

		return tourismNewAttractionFormFirstCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismNewAttractionFormFirst, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TourismNewAttractionFormFirst, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAttractionFormFirst, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismNewAttractionFormFirst)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismNewAttractionFormFirst>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismNewAttractionFormFirst.class,
						ModelWrapper.class);

	}

	private long _tourismNewAttractFormFirstId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _attractionDateOfApplication;
	private String _typeOfAttrcation;
	private String _attractionNameOfProperty;
	private String _attractionNameOfOwner;
	private String _attractionLocation;
	private String _attractionCompanyNumber;
	private String _attractionBusinessRegisNo;
	private Date _attractionDateOfRegistration;
	private String _attractionOwnerTrnNumber;
	private String _attractionTccNumber;
	private Date _attractionExpiryDate;
	private String _attractionNameOfOperator;
	private String _attractionoperatorTrnNumber;
	private String _attractionOperatorTccNumber;
	private Date _attractOperatorExpiryDate;
	private String _attractionContactPerson;
	private String _attractionPositionHeld;
	private String _attractionEntityId;
	private String _attractionBriefdescription;
	private long _tourismApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismNewAttractionFormFirst, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismNewAttractionFormFirst)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"tourismNewAttractFormFirstId", _tourismNewAttractFormFirstId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"attractionDateOfApplication", _attractionDateOfApplication);
		_columnOriginalValues.put("typeOfAttrcation", _typeOfAttrcation);
		_columnOriginalValues.put(
			"attractionNameOfProperty", _attractionNameOfProperty);
		_columnOriginalValues.put(
			"attractionNameOfOwner", _attractionNameOfOwner);
		_columnOriginalValues.put("attractionLocation", _attractionLocation);
		_columnOriginalValues.put(
			"attractionCompanyNumber", _attractionCompanyNumber);
		_columnOriginalValues.put(
			"attractionBusinessRegisNo", _attractionBusinessRegisNo);
		_columnOriginalValues.put(
			"attractionDateOfRegistration", _attractionDateOfRegistration);
		_columnOriginalValues.put(
			"attractionOwnerTrnNumber", _attractionOwnerTrnNumber);
		_columnOriginalValues.put("attractionTccNumber", _attractionTccNumber);
		_columnOriginalValues.put(
			"attractionExpiryDate", _attractionExpiryDate);
		_columnOriginalValues.put(
			"attractionNameOfOperator", _attractionNameOfOperator);
		_columnOriginalValues.put(
			"attractionoperatorTrnNumber", _attractionoperatorTrnNumber);
		_columnOriginalValues.put(
			"attractionOperatorTccNumber", _attractionOperatorTccNumber);
		_columnOriginalValues.put(
			"attractOperatorExpiryDate", _attractOperatorExpiryDate);
		_columnOriginalValues.put(
			"attractionContactPerson", _attractionContactPerson);
		_columnOriginalValues.put(
			"attractionPositionHeld", _attractionPositionHeld);
		_columnOriginalValues.put("attractionEntityId", _attractionEntityId);
		_columnOriginalValues.put(
			"attractionBriefdescription", _attractionBriefdescription);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismNewAttractFormFirstId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("attractionDateOfApplication", 128L);

		columnBitmasks.put("typeOfAttrcation", 256L);

		columnBitmasks.put("attractionNameOfProperty", 512L);

		columnBitmasks.put("attractionNameOfOwner", 1024L);

		columnBitmasks.put("attractionLocation", 2048L);

		columnBitmasks.put("attractionCompanyNumber", 4096L);

		columnBitmasks.put("attractionBusinessRegisNo", 8192L);

		columnBitmasks.put("attractionDateOfRegistration", 16384L);

		columnBitmasks.put("attractionOwnerTrnNumber", 32768L);

		columnBitmasks.put("attractionTccNumber", 65536L);

		columnBitmasks.put("attractionExpiryDate", 131072L);

		columnBitmasks.put("attractionNameOfOperator", 262144L);

		columnBitmasks.put("attractionoperatorTrnNumber", 524288L);

		columnBitmasks.put("attractionOperatorTccNumber", 1048576L);

		columnBitmasks.put("attractOperatorExpiryDate", 2097152L);

		columnBitmasks.put("attractionContactPerson", 4194304L);

		columnBitmasks.put("attractionPositionHeld", 8388608L);

		columnBitmasks.put("attractionEntityId", 16777216L);

		columnBitmasks.put("attractionBriefdescription", 33554432L);

		columnBitmasks.put("tourismApplicationId", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismNewAttractionFormFirst _escapedModel;

}