/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismNewAccommodationAddress;
import com.nbp.tourism.application.form.services.model.TourismNewAccommodationAddressModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismNewAccommodationAddress service. Represents a row in the &quot;nbp_tourism_new_accco_aoo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismNewAccommodationAddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismNewAccommodationAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismNewAccommodationAddressImpl
 * @generated
 */
@JSON(strict = true)
public class TourismNewAccommodationAddressModelImpl
	extends BaseModelImpl<TourismNewAccommodationAddress>
	implements TourismNewAccommodationAddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism new accommodation address model instance should use the <code>TourismNewAccommodationAddress</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_new_accco_aoo";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismNewAccommodationAOOId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"addressType", Types.VARCHAR}, {"accoAddress", Types.VARCHAR},
		{"accoTelephoneNumber", Types.VARCHAR},
		{"accoFaxNumber", Types.VARCHAR}, {"accoEmail", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT},
		{"tourismNewAccoFormId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismNewAccommodationAOOId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("addressType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoTelephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoFaxNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tourismNewAccoFormId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_new_accco_aoo (tourismNewAccommodationAOOId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,addressType VARCHAR(75) null,accoAddress VARCHAR(500) null,accoTelephoneNumber VARCHAR(75) null,accoFaxNumber VARCHAR(75) null,accoEmail VARCHAR(75) null,tourismApplicationId LONG,tourismNewAccoFormId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_new_accco_aoo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismNewAccommodationAddress.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_new_accco_aoo.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSTYPE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMNEWACCOFORMID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismNewAccommodationAddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismNewAccommodationAOOId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismNewAccommodationAOOId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismNewAccommodationAOOId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismNewAccommodationAddress.class;
	}

	@Override
	public String getModelClassName() {
		return TourismNewAccommodationAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismNewAccommodationAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TourismNewAccommodationAddress, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAccommodationAddress, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismNewAccommodationAddress)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismNewAccommodationAddress, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismNewAccommodationAddress, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismNewAccommodationAddress)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismNewAccommodationAddress, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismNewAccommodationAddress, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismNewAccommodationAddress, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismNewAccommodationAddress, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<TourismNewAccommodationAddress, Object>>();

			attributeGetterFunctions.put(
				"tourismNewAccommodationAOOId",
				TourismNewAccommodationAddress::
					getTourismNewAccommodationAOOId);
			attributeGetterFunctions.put(
				"groupId", TourismNewAccommodationAddress::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismNewAccommodationAddress::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismNewAccommodationAddress::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismNewAccommodationAddress::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismNewAccommodationAddress::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				TourismNewAccommodationAddress::getModifiedDate);
			attributeGetterFunctions.put(
				"addressType", TourismNewAccommodationAddress::getAddressType);
			attributeGetterFunctions.put(
				"accoAddress", TourismNewAccommodationAddress::getAccoAddress);
			attributeGetterFunctions.put(
				"accoTelephoneNumber",
				TourismNewAccommodationAddress::getAccoTelephoneNumber);
			attributeGetterFunctions.put(
				"accoFaxNumber",
				TourismNewAccommodationAddress::getAccoFaxNumber);
			attributeGetterFunctions.put(
				"accoEmail", TourismNewAccommodationAddress::getAccoEmail);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismNewAccommodationAddress::getTourismApplicationId);
			attributeGetterFunctions.put(
				"tourismNewAccoFormId",
				TourismNewAccommodationAddress::getTourismNewAccoFormId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismNewAccommodationAddress, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismNewAccommodationAddress, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<TourismNewAccommodationAddress, ?>>();

			attributeSetterBiConsumers.put(
				"tourismNewAccommodationAOOId",
				(BiConsumer<TourismNewAccommodationAddress, Long>)
					TourismNewAccommodationAddress::
						setTourismNewAccommodationAOOId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismNewAccommodationAddress, Long>)
					TourismNewAccommodationAddress::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismNewAccommodationAddress, Long>)
					TourismNewAccommodationAddress::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismNewAccommodationAddress, Long>)
					TourismNewAccommodationAddress::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismNewAccommodationAddress, String>)
					TourismNewAccommodationAddress::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismNewAccommodationAddress, Date>)
					TourismNewAccommodationAddress::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismNewAccommodationAddress, Date>)
					TourismNewAccommodationAddress::setModifiedDate);
			attributeSetterBiConsumers.put(
				"addressType",
				(BiConsumer<TourismNewAccommodationAddress, String>)
					TourismNewAccommodationAddress::setAddressType);
			attributeSetterBiConsumers.put(
				"accoAddress",
				(BiConsumer<TourismNewAccommodationAddress, String>)
					TourismNewAccommodationAddress::setAccoAddress);
			attributeSetterBiConsumers.put(
				"accoTelephoneNumber",
				(BiConsumer<TourismNewAccommodationAddress, String>)
					TourismNewAccommodationAddress::setAccoTelephoneNumber);
			attributeSetterBiConsumers.put(
				"accoFaxNumber",
				(BiConsumer<TourismNewAccommodationAddress, String>)
					TourismNewAccommodationAddress::setAccoFaxNumber);
			attributeSetterBiConsumers.put(
				"accoEmail",
				(BiConsumer<TourismNewAccommodationAddress, String>)
					TourismNewAccommodationAddress::setAccoEmail);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismNewAccommodationAddress, Long>)
					TourismNewAccommodationAddress::setTourismApplicationId);
			attributeSetterBiConsumers.put(
				"tourismNewAccoFormId",
				(BiConsumer<TourismNewAccommodationAddress, Long>)
					TourismNewAccommodationAddress::setTourismNewAccoFormId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismNewAccommodationAOOId() {
		return _tourismNewAccommodationAOOId;
	}

	@Override
	public void setTourismNewAccommodationAOOId(
		long tourismNewAccommodationAOOId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismNewAccommodationAOOId = tourismNewAccommodationAOOId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAddressType() {
		if (_addressType == null) {
			return "";
		}
		else {
			return _addressType;
		}
	}

	@Override
	public void setAddressType(String addressType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressType = addressType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAddressType() {
		return getColumnOriginalValue("addressType");
	}

	@JSON
	@Override
	public String getAccoAddress() {
		if (_accoAddress == null) {
			return "";
		}
		else {
			return _accoAddress;
		}
	}

	@Override
	public void setAccoAddress(String accoAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoAddress = accoAddress;
	}

	@JSON
	@Override
	public String getAccoTelephoneNumber() {
		if (_accoTelephoneNumber == null) {
			return "";
		}
		else {
			return _accoTelephoneNumber;
		}
	}

	@Override
	public void setAccoTelephoneNumber(String accoTelephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoTelephoneNumber = accoTelephoneNumber;
	}

	@JSON
	@Override
	public String getAccoFaxNumber() {
		if (_accoFaxNumber == null) {
			return "";
		}
		else {
			return _accoFaxNumber;
		}
	}

	@Override
	public void setAccoFaxNumber(String accoFaxNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoFaxNumber = accoFaxNumber;
	}

	@JSON
	@Override
	public String getAccoEmail() {
		if (_accoEmail == null) {
			return "";
		}
		else {
			return _accoEmail;
		}
	}

	@Override
	public void setAccoEmail(String accoEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoEmail = accoEmail;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	@JSON
	@Override
	public long getTourismNewAccoFormId() {
		return _tourismNewAccoFormId;
	}

	@Override
	public void setTourismNewAccoFormId(long tourismNewAccoFormId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismNewAccoFormId = tourismNewAccoFormId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismNewAccoFormId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismNewAccoFormId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismNewAccommodationAddress.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismNewAccommodationAddress toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismNewAccommodationAddress>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismNewAccommodationAddressImpl tourismNewAccommodationAddressImpl =
			new TourismNewAccommodationAddressImpl();

		tourismNewAccommodationAddressImpl.setTourismNewAccommodationAOOId(
			getTourismNewAccommodationAOOId());
		tourismNewAccommodationAddressImpl.setGroupId(getGroupId());
		tourismNewAccommodationAddressImpl.setCompanyId(getCompanyId());
		tourismNewAccommodationAddressImpl.setUserId(getUserId());
		tourismNewAccommodationAddressImpl.setUserName(getUserName());
		tourismNewAccommodationAddressImpl.setCreateDate(getCreateDate());
		tourismNewAccommodationAddressImpl.setModifiedDate(getModifiedDate());
		tourismNewAccommodationAddressImpl.setAddressType(getAddressType());
		tourismNewAccommodationAddressImpl.setAccoAddress(getAccoAddress());
		tourismNewAccommodationAddressImpl.setAccoTelephoneNumber(
			getAccoTelephoneNumber());
		tourismNewAccommodationAddressImpl.setAccoFaxNumber(getAccoFaxNumber());
		tourismNewAccommodationAddressImpl.setAccoEmail(getAccoEmail());
		tourismNewAccommodationAddressImpl.setTourismApplicationId(
			getTourismApplicationId());
		tourismNewAccommodationAddressImpl.setTourismNewAccoFormId(
			getTourismNewAccoFormId());

		tourismNewAccommodationAddressImpl.resetOriginalValues();

		return tourismNewAccommodationAddressImpl;
	}

	@Override
	public TourismNewAccommodationAddress cloneWithOriginalValues() {
		TourismNewAccommodationAddressImpl tourismNewAccommodationAddressImpl =
			new TourismNewAccommodationAddressImpl();

		tourismNewAccommodationAddressImpl.setTourismNewAccommodationAOOId(
			this.<Long>getColumnOriginalValue("tourismNewAccommodationAOOId"));
		tourismNewAccommodationAddressImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismNewAccommodationAddressImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismNewAccommodationAddressImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismNewAccommodationAddressImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismNewAccommodationAddressImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismNewAccommodationAddressImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismNewAccommodationAddressImpl.setAddressType(
			this.<String>getColumnOriginalValue("addressType"));
		tourismNewAccommodationAddressImpl.setAccoAddress(
			this.<String>getColumnOriginalValue("accoAddress"));
		tourismNewAccommodationAddressImpl.setAccoTelephoneNumber(
			this.<String>getColumnOriginalValue("accoTelephoneNumber"));
		tourismNewAccommodationAddressImpl.setAccoFaxNumber(
			this.<String>getColumnOriginalValue("accoFaxNumber"));
		tourismNewAccommodationAddressImpl.setAccoEmail(
			this.<String>getColumnOriginalValue("accoEmail"));
		tourismNewAccommodationAddressImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
		tourismNewAccommodationAddressImpl.setTourismNewAccoFormId(
			this.<Long>getColumnOriginalValue("tourismNewAccoFormId"));

		return tourismNewAccommodationAddressImpl;
	}

	@Override
	public int compareTo(
		TourismNewAccommodationAddress tourismNewAccommodationAddress) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), tourismNewAccommodationAddress.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismNewAccommodationAddress)) {
			return false;
		}

		TourismNewAccommodationAddress tourismNewAccommodationAddress =
			(TourismNewAccommodationAddress)object;

		long primaryKey = tourismNewAccommodationAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismNewAccommodationAddress> toCacheModel() {
		TourismNewAccommodationAddressCacheModel
			tourismNewAccommodationAddressCacheModel =
				new TourismNewAccommodationAddressCacheModel();

		tourismNewAccommodationAddressCacheModel.tourismNewAccommodationAOOId =
			getTourismNewAccommodationAOOId();

		tourismNewAccommodationAddressCacheModel.groupId = getGroupId();

		tourismNewAccommodationAddressCacheModel.companyId = getCompanyId();

		tourismNewAccommodationAddressCacheModel.userId = getUserId();

		tourismNewAccommodationAddressCacheModel.userName = getUserName();

		String userName = tourismNewAccommodationAddressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismNewAccommodationAddressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismNewAccommodationAddressCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismNewAccommodationAddressCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismNewAccommodationAddressCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismNewAccommodationAddressCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		tourismNewAccommodationAddressCacheModel.addressType = getAddressType();

		String addressType =
			tourismNewAccommodationAddressCacheModel.addressType;

		if ((addressType != null) && (addressType.length() == 0)) {
			tourismNewAccommodationAddressCacheModel.addressType = null;
		}

		tourismNewAccommodationAddressCacheModel.accoAddress = getAccoAddress();

		String accoAddress =
			tourismNewAccommodationAddressCacheModel.accoAddress;

		if ((accoAddress != null) && (accoAddress.length() == 0)) {
			tourismNewAccommodationAddressCacheModel.accoAddress = null;
		}

		tourismNewAccommodationAddressCacheModel.accoTelephoneNumber =
			getAccoTelephoneNumber();

		String accoTelephoneNumber =
			tourismNewAccommodationAddressCacheModel.accoTelephoneNumber;

		if ((accoTelephoneNumber != null) &&
			(accoTelephoneNumber.length() == 0)) {

			tourismNewAccommodationAddressCacheModel.accoTelephoneNumber = null;
		}

		tourismNewAccommodationAddressCacheModel.accoFaxNumber =
			getAccoFaxNumber();

		String accoFaxNumber =
			tourismNewAccommodationAddressCacheModel.accoFaxNumber;

		if ((accoFaxNumber != null) && (accoFaxNumber.length() == 0)) {
			tourismNewAccommodationAddressCacheModel.accoFaxNumber = null;
		}

		tourismNewAccommodationAddressCacheModel.accoEmail = getAccoEmail();

		String accoEmail = tourismNewAccommodationAddressCacheModel.accoEmail;

		if ((accoEmail != null) && (accoEmail.length() == 0)) {
			tourismNewAccommodationAddressCacheModel.accoEmail = null;
		}

		tourismNewAccommodationAddressCacheModel.tourismApplicationId =
			getTourismApplicationId();

		tourismNewAccommodationAddressCacheModel.tourismNewAccoFormId =
			getTourismNewAccoFormId();

		return tourismNewAccommodationAddressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismNewAccommodationAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TourismNewAccommodationAddress, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAccommodationAddress, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismNewAccommodationAddress)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismNewAccommodationAddress>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismNewAccommodationAddress.class,
						ModelWrapper.class);

	}

	private long _tourismNewAccommodationAOOId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _addressType;
	private String _accoAddress;
	private String _accoTelephoneNumber;
	private String _accoFaxNumber;
	private String _accoEmail;
	private long _tourismApplicationId;
	private long _tourismNewAccoFormId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismNewAccommodationAddress, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismNewAccommodationAddress)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"tourismNewAccommodationAOOId", _tourismNewAccommodationAOOId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("addressType", _addressType);
		_columnOriginalValues.put("accoAddress", _accoAddress);
		_columnOriginalValues.put("accoTelephoneNumber", _accoTelephoneNumber);
		_columnOriginalValues.put("accoFaxNumber", _accoFaxNumber);
		_columnOriginalValues.put("accoEmail", _accoEmail);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
		_columnOriginalValues.put(
			"tourismNewAccoFormId", _tourismNewAccoFormId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismNewAccommodationAOOId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("addressType", 128L);

		columnBitmasks.put("accoAddress", 256L);

		columnBitmasks.put("accoTelephoneNumber", 512L);

		columnBitmasks.put("accoFaxNumber", 1024L);

		columnBitmasks.put("accoEmail", 2048L);

		columnBitmasks.put("tourismApplicationId", 4096L);

		columnBitmasks.put("tourismNewAccoFormId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismNewAccommodationAddress _escapedModel;

}