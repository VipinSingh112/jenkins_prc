/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismNewGroundTransportation;
import com.nbp.tourism.application.form.services.model.TourismNewGroundTransportationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismNewGroundTransportation service. Represents a row in the &quot;nbp_tourism_new_ground_tarns&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismNewGroundTransportationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismNewGroundTransportationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismNewGroundTransportationImpl
 * @generated
 */
@JSON(strict = true)
public class TourismNewGroundTransportationModelImpl
	extends BaseModelImpl<TourismNewGroundTransportation>
	implements TourismNewGroundTransportationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism new ground transportation model instance should use the <code>TourismNewGroundTransportation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_new_ground_tarns";

	public static final Object[][] TABLE_COLUMNS = {
		{"TourismNewGroundTransId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"typeOfGroundTransportation", Types.VARCHAR},
		{"newGroundName", Types.VARCHAR},
		{"newGroundHomeAddress", Types.VARCHAR},
		{"newGroundBusinessAddress", Types.VARCHAR},
		{"newGroundLandlineNo", Types.VARCHAR},
		{"newGroundMobileNo", Types.VARCHAR}, {"newGroundFaxNo", Types.VARCHAR},
		{"newGroundLicensedWith", Types.VARCHAR},
		{"newGroundBoardExpiryDate", Types.TIMESTAMP},
		{"newGroundHaveYouBenefitBefore", Types.VARCHAR},
		{"newGroundHaveBenefitDate", Types.TIMESTAMP},
		{"newGroundEntityType", Types.VARCHAR},
		{"newGroundVehicleInfoMake", Types.VARCHAR},
		{"newGroundVehicleInfoModel", Types.VARCHAR},
		{"newGroundVehicleInfoYear", Types.VARCHAR},
		{"newGroundSeatingCapacity", Types.VARCHAR},
		{"newGroundExistingFleetAmount", Types.VARCHAR},
		{"newGroundIndicateVehicleWill", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("TourismNewGroundTransId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeOfGroundTransportation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundHomeAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundBusinessAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundLandlineNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundMobileNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundLicensedWith", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundBoardExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("newGroundHaveYouBenefitBefore", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundHaveBenefitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("newGroundEntityType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundVehicleInfoMake", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundVehicleInfoModel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundVehicleInfoYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundSeatingCapacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundExistingFleetAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newGroundIndicateVehicleWill", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_new_ground_tarns (TourismNewGroundTransId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,typeOfGroundTransportation VARCHAR(75) null,newGroundName VARCHAR(75) null,newGroundHomeAddress VARCHAR(500) null,newGroundBusinessAddress VARCHAR(500) null,newGroundLandlineNo VARCHAR(75) null,newGroundMobileNo VARCHAR(75) null,newGroundFaxNo VARCHAR(75) null,newGroundLicensedWith VARCHAR(75) null,newGroundBoardExpiryDate DATE null,newGroundHaveYouBenefitBefore VARCHAR(75) null,newGroundHaveBenefitDate DATE null,newGroundEntityType VARCHAR(75) null,newGroundVehicleInfoMake VARCHAR(75) null,newGroundVehicleInfoModel VARCHAR(75) null,newGroundVehicleInfoYear VARCHAR(75) null,newGroundSeatingCapacity VARCHAR(75) null,newGroundExistingFleetAmount VARCHAR(75) null,newGroundIndicateVehicleWill VARCHAR(75) null,tourismApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_new_ground_tarns";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismNewGroundTransportation.TourismNewGroundTransId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_new_ground_tarns.TourismNewGroundTransId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMNEWGROUNDTRANSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismNewGroundTransportationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _TourismNewGroundTransId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismNewGroundTransId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _TourismNewGroundTransId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismNewGroundTransportation.class;
	}

	@Override
	public String getModelClassName() {
		return TourismNewGroundTransportation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismNewGroundTransportation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TourismNewGroundTransportation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewGroundTransportation, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismNewGroundTransportation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismNewGroundTransportation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismNewGroundTransportation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismNewGroundTransportation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismNewGroundTransportation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismNewGroundTransportation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismNewGroundTransportation, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismNewGroundTransportation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<TourismNewGroundTransportation, Object>>();

			attributeGetterFunctions.put(
				"TourismNewGroundTransId",
				TourismNewGroundTransportation::getTourismNewGroundTransId);
			attributeGetterFunctions.put(
				"groupId", TourismNewGroundTransportation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismNewGroundTransportation::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismNewGroundTransportation::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismNewGroundTransportation::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismNewGroundTransportation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				TourismNewGroundTransportation::getModifiedDate);
			attributeGetterFunctions.put(
				"typeOfGroundTransportation",
				TourismNewGroundTransportation::getTypeOfGroundTransportation);
			attributeGetterFunctions.put(
				"newGroundName",
				TourismNewGroundTransportation::getNewGroundName);
			attributeGetterFunctions.put(
				"newGroundHomeAddress",
				TourismNewGroundTransportation::getNewGroundHomeAddress);
			attributeGetterFunctions.put(
				"newGroundBusinessAddress",
				TourismNewGroundTransportation::getNewGroundBusinessAddress);
			attributeGetterFunctions.put(
				"newGroundLandlineNo",
				TourismNewGroundTransportation::getNewGroundLandlineNo);
			attributeGetterFunctions.put(
				"newGroundMobileNo",
				TourismNewGroundTransportation::getNewGroundMobileNo);
			attributeGetterFunctions.put(
				"newGroundFaxNo",
				TourismNewGroundTransportation::getNewGroundFaxNo);
			attributeGetterFunctions.put(
				"newGroundLicensedWith",
				TourismNewGroundTransportation::getNewGroundLicensedWith);
			attributeGetterFunctions.put(
				"newGroundBoardExpiryDate",
				TourismNewGroundTransportation::getNewGroundBoardExpiryDate);
			attributeGetterFunctions.put(
				"newGroundHaveYouBenefitBefore",
				TourismNewGroundTransportation::
					getNewGroundHaveYouBenefitBefore);
			attributeGetterFunctions.put(
				"newGroundHaveBenefitDate",
				TourismNewGroundTransportation::getNewGroundHaveBenefitDate);
			attributeGetterFunctions.put(
				"newGroundEntityType",
				TourismNewGroundTransportation::getNewGroundEntityType);
			attributeGetterFunctions.put(
				"newGroundVehicleInfoMake",
				TourismNewGroundTransportation::getNewGroundVehicleInfoMake);
			attributeGetterFunctions.put(
				"newGroundVehicleInfoModel",
				TourismNewGroundTransportation::getNewGroundVehicleInfoModel);
			attributeGetterFunctions.put(
				"newGroundVehicleInfoYear",
				TourismNewGroundTransportation::getNewGroundVehicleInfoYear);
			attributeGetterFunctions.put(
				"newGroundSeatingCapacity",
				TourismNewGroundTransportation::getNewGroundSeatingCapacity);
			attributeGetterFunctions.put(
				"newGroundExistingFleetAmount",
				TourismNewGroundTransportation::
					getNewGroundExistingFleetAmount);
			attributeGetterFunctions.put(
				"newGroundIndicateVehicleWill",
				TourismNewGroundTransportation::
					getNewGroundIndicateVehicleWill);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismNewGroundTransportation::getTourismApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismNewGroundTransportation, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismNewGroundTransportation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<TourismNewGroundTransportation, ?>>();

			attributeSetterBiConsumers.put(
				"TourismNewGroundTransId",
				(BiConsumer<TourismNewGroundTransportation, Long>)
					TourismNewGroundTransportation::setTourismNewGroundTransId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismNewGroundTransportation, Long>)
					TourismNewGroundTransportation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismNewGroundTransportation, Long>)
					TourismNewGroundTransportation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismNewGroundTransportation, Long>)
					TourismNewGroundTransportation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismNewGroundTransportation, Date>)
					TourismNewGroundTransportation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismNewGroundTransportation, Date>)
					TourismNewGroundTransportation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"typeOfGroundTransportation",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setTypeOfGroundTransportation);
			attributeSetterBiConsumers.put(
				"newGroundName",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::setNewGroundName);
			attributeSetterBiConsumers.put(
				"newGroundHomeAddress",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::setNewGroundHomeAddress);
			attributeSetterBiConsumers.put(
				"newGroundBusinessAddress",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setNewGroundBusinessAddress);
			attributeSetterBiConsumers.put(
				"newGroundLandlineNo",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::setNewGroundLandlineNo);
			attributeSetterBiConsumers.put(
				"newGroundMobileNo",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::setNewGroundMobileNo);
			attributeSetterBiConsumers.put(
				"newGroundFaxNo",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::setNewGroundFaxNo);
			attributeSetterBiConsumers.put(
				"newGroundLicensedWith",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::setNewGroundLicensedWith);
			attributeSetterBiConsumers.put(
				"newGroundBoardExpiryDate",
				(BiConsumer<TourismNewGroundTransportation, Date>)
					TourismNewGroundTransportation::
						setNewGroundBoardExpiryDate);
			attributeSetterBiConsumers.put(
				"newGroundHaveYouBenefitBefore",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setNewGroundHaveYouBenefitBefore);
			attributeSetterBiConsumers.put(
				"newGroundHaveBenefitDate",
				(BiConsumer<TourismNewGroundTransportation, Date>)
					TourismNewGroundTransportation::
						setNewGroundHaveBenefitDate);
			attributeSetterBiConsumers.put(
				"newGroundEntityType",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::setNewGroundEntityType);
			attributeSetterBiConsumers.put(
				"newGroundVehicleInfoMake",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setNewGroundVehicleInfoMake);
			attributeSetterBiConsumers.put(
				"newGroundVehicleInfoModel",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setNewGroundVehicleInfoModel);
			attributeSetterBiConsumers.put(
				"newGroundVehicleInfoYear",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setNewGroundVehicleInfoYear);
			attributeSetterBiConsumers.put(
				"newGroundSeatingCapacity",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setNewGroundSeatingCapacity);
			attributeSetterBiConsumers.put(
				"newGroundExistingFleetAmount",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setNewGroundExistingFleetAmount);
			attributeSetterBiConsumers.put(
				"newGroundIndicateVehicleWill",
				(BiConsumer<TourismNewGroundTransportation, String>)
					TourismNewGroundTransportation::
						setNewGroundIndicateVehicleWill);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismNewGroundTransportation, Long>)
					TourismNewGroundTransportation::setTourismApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismNewGroundTransId() {
		return _TourismNewGroundTransId;
	}

	@Override
	public void setTourismNewGroundTransId(long TourismNewGroundTransId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_TourismNewGroundTransId = TourismNewGroundTransId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTypeOfGroundTransportation() {
		if (_typeOfGroundTransportation == null) {
			return "";
		}
		else {
			return _typeOfGroundTransportation;
		}
	}

	@Override
	public void setTypeOfGroundTransportation(
		String typeOfGroundTransportation) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfGroundTransportation = typeOfGroundTransportation;
	}

	@JSON
	@Override
	public String getNewGroundName() {
		if (_newGroundName == null) {
			return "";
		}
		else {
			return _newGroundName;
		}
	}

	@Override
	public void setNewGroundName(String newGroundName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundName = newGroundName;
	}

	@JSON
	@Override
	public String getNewGroundHomeAddress() {
		if (_newGroundHomeAddress == null) {
			return "";
		}
		else {
			return _newGroundHomeAddress;
		}
	}

	@Override
	public void setNewGroundHomeAddress(String newGroundHomeAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundHomeAddress = newGroundHomeAddress;
	}

	@JSON
	@Override
	public String getNewGroundBusinessAddress() {
		if (_newGroundBusinessAddress == null) {
			return "";
		}
		else {
			return _newGroundBusinessAddress;
		}
	}

	@Override
	public void setNewGroundBusinessAddress(String newGroundBusinessAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundBusinessAddress = newGroundBusinessAddress;
	}

	@JSON
	@Override
	public String getNewGroundLandlineNo() {
		if (_newGroundLandlineNo == null) {
			return "";
		}
		else {
			return _newGroundLandlineNo;
		}
	}

	@Override
	public void setNewGroundLandlineNo(String newGroundLandlineNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundLandlineNo = newGroundLandlineNo;
	}

	@JSON
	@Override
	public String getNewGroundMobileNo() {
		if (_newGroundMobileNo == null) {
			return "";
		}
		else {
			return _newGroundMobileNo;
		}
	}

	@Override
	public void setNewGroundMobileNo(String newGroundMobileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundMobileNo = newGroundMobileNo;
	}

	@JSON
	@Override
	public String getNewGroundFaxNo() {
		if (_newGroundFaxNo == null) {
			return "";
		}
		else {
			return _newGroundFaxNo;
		}
	}

	@Override
	public void setNewGroundFaxNo(String newGroundFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundFaxNo = newGroundFaxNo;
	}

	@JSON
	@Override
	public String getNewGroundLicensedWith() {
		if (_newGroundLicensedWith == null) {
			return "";
		}
		else {
			return _newGroundLicensedWith;
		}
	}

	@Override
	public void setNewGroundLicensedWith(String newGroundLicensedWith) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundLicensedWith = newGroundLicensedWith;
	}

	@JSON
	@Override
	public Date getNewGroundBoardExpiryDate() {
		return _newGroundBoardExpiryDate;
	}

	@Override
	public void setNewGroundBoardExpiryDate(Date newGroundBoardExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundBoardExpiryDate = newGroundBoardExpiryDate;
	}

	@JSON
	@Override
	public String getNewGroundHaveYouBenefitBefore() {
		if (_newGroundHaveYouBenefitBefore == null) {
			return "";
		}
		else {
			return _newGroundHaveYouBenefitBefore;
		}
	}

	@Override
	public void setNewGroundHaveYouBenefitBefore(
		String newGroundHaveYouBenefitBefore) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundHaveYouBenefitBefore = newGroundHaveYouBenefitBefore;
	}

	@JSON
	@Override
	public Date getNewGroundHaveBenefitDate() {
		return _newGroundHaveBenefitDate;
	}

	@Override
	public void setNewGroundHaveBenefitDate(Date newGroundHaveBenefitDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundHaveBenefitDate = newGroundHaveBenefitDate;
	}

	@JSON
	@Override
	public String getNewGroundEntityType() {
		if (_newGroundEntityType == null) {
			return "";
		}
		else {
			return _newGroundEntityType;
		}
	}

	@Override
	public void setNewGroundEntityType(String newGroundEntityType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundEntityType = newGroundEntityType;
	}

	@JSON
	@Override
	public String getNewGroundVehicleInfoMake() {
		if (_newGroundVehicleInfoMake == null) {
			return "";
		}
		else {
			return _newGroundVehicleInfoMake;
		}
	}

	@Override
	public void setNewGroundVehicleInfoMake(String newGroundVehicleInfoMake) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundVehicleInfoMake = newGroundVehicleInfoMake;
	}

	@JSON
	@Override
	public String getNewGroundVehicleInfoModel() {
		if (_newGroundVehicleInfoModel == null) {
			return "";
		}
		else {
			return _newGroundVehicleInfoModel;
		}
	}

	@Override
	public void setNewGroundVehicleInfoModel(String newGroundVehicleInfoModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundVehicleInfoModel = newGroundVehicleInfoModel;
	}

	@JSON
	@Override
	public String getNewGroundVehicleInfoYear() {
		if (_newGroundVehicleInfoYear == null) {
			return "";
		}
		else {
			return _newGroundVehicleInfoYear;
		}
	}

	@Override
	public void setNewGroundVehicleInfoYear(String newGroundVehicleInfoYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundVehicleInfoYear = newGroundVehicleInfoYear;
	}

	@JSON
	@Override
	public String getNewGroundSeatingCapacity() {
		if (_newGroundSeatingCapacity == null) {
			return "";
		}
		else {
			return _newGroundSeatingCapacity;
		}
	}

	@Override
	public void setNewGroundSeatingCapacity(String newGroundSeatingCapacity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundSeatingCapacity = newGroundSeatingCapacity;
	}

	@JSON
	@Override
	public String getNewGroundExistingFleetAmount() {
		if (_newGroundExistingFleetAmount == null) {
			return "";
		}
		else {
			return _newGroundExistingFleetAmount;
		}
	}

	@Override
	public void setNewGroundExistingFleetAmount(
		String newGroundExistingFleetAmount) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundExistingFleetAmount = newGroundExistingFleetAmount;
	}

	@JSON
	@Override
	public String getNewGroundIndicateVehicleWill() {
		if (_newGroundIndicateVehicleWill == null) {
			return "";
		}
		else {
			return _newGroundIndicateVehicleWill;
		}
	}

	@Override
	public void setNewGroundIndicateVehicleWill(
		String newGroundIndicateVehicleWill) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newGroundIndicateVehicleWill = newGroundIndicateVehicleWill;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismNewGroundTransportation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismNewGroundTransportation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismNewGroundTransportation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismNewGroundTransportationImpl tourismNewGroundTransportationImpl =
			new TourismNewGroundTransportationImpl();

		tourismNewGroundTransportationImpl.setTourismNewGroundTransId(
			getTourismNewGroundTransId());
		tourismNewGroundTransportationImpl.setGroupId(getGroupId());
		tourismNewGroundTransportationImpl.setCompanyId(getCompanyId());
		tourismNewGroundTransportationImpl.setUserId(getUserId());
		tourismNewGroundTransportationImpl.setUserName(getUserName());
		tourismNewGroundTransportationImpl.setCreateDate(getCreateDate());
		tourismNewGroundTransportationImpl.setModifiedDate(getModifiedDate());
		tourismNewGroundTransportationImpl.setTypeOfGroundTransportation(
			getTypeOfGroundTransportation());
		tourismNewGroundTransportationImpl.setNewGroundName(getNewGroundName());
		tourismNewGroundTransportationImpl.setNewGroundHomeAddress(
			getNewGroundHomeAddress());
		tourismNewGroundTransportationImpl.setNewGroundBusinessAddress(
			getNewGroundBusinessAddress());
		tourismNewGroundTransportationImpl.setNewGroundLandlineNo(
			getNewGroundLandlineNo());
		tourismNewGroundTransportationImpl.setNewGroundMobileNo(
			getNewGroundMobileNo());
		tourismNewGroundTransportationImpl.setNewGroundFaxNo(
			getNewGroundFaxNo());
		tourismNewGroundTransportationImpl.setNewGroundLicensedWith(
			getNewGroundLicensedWith());
		tourismNewGroundTransportationImpl.setNewGroundBoardExpiryDate(
			getNewGroundBoardExpiryDate());
		tourismNewGroundTransportationImpl.setNewGroundHaveYouBenefitBefore(
			getNewGroundHaveYouBenefitBefore());
		tourismNewGroundTransportationImpl.setNewGroundHaveBenefitDate(
			getNewGroundHaveBenefitDate());
		tourismNewGroundTransportationImpl.setNewGroundEntityType(
			getNewGroundEntityType());
		tourismNewGroundTransportationImpl.setNewGroundVehicleInfoMake(
			getNewGroundVehicleInfoMake());
		tourismNewGroundTransportationImpl.setNewGroundVehicleInfoModel(
			getNewGroundVehicleInfoModel());
		tourismNewGroundTransportationImpl.setNewGroundVehicleInfoYear(
			getNewGroundVehicleInfoYear());
		tourismNewGroundTransportationImpl.setNewGroundSeatingCapacity(
			getNewGroundSeatingCapacity());
		tourismNewGroundTransportationImpl.setNewGroundExistingFleetAmount(
			getNewGroundExistingFleetAmount());
		tourismNewGroundTransportationImpl.setNewGroundIndicateVehicleWill(
			getNewGroundIndicateVehicleWill());
		tourismNewGroundTransportationImpl.setTourismApplicationId(
			getTourismApplicationId());

		tourismNewGroundTransportationImpl.resetOriginalValues();

		return tourismNewGroundTransportationImpl;
	}

	@Override
	public TourismNewGroundTransportation cloneWithOriginalValues() {
		TourismNewGroundTransportationImpl tourismNewGroundTransportationImpl =
			new TourismNewGroundTransportationImpl();

		tourismNewGroundTransportationImpl.setTourismNewGroundTransId(
			this.<Long>getColumnOriginalValue("TourismNewGroundTransId"));
		tourismNewGroundTransportationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismNewGroundTransportationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismNewGroundTransportationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismNewGroundTransportationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismNewGroundTransportationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismNewGroundTransportationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismNewGroundTransportationImpl.setTypeOfGroundTransportation(
			this.<String>getColumnOriginalValue("typeOfGroundTransportation"));
		tourismNewGroundTransportationImpl.setNewGroundName(
			this.<String>getColumnOriginalValue("newGroundName"));
		tourismNewGroundTransportationImpl.setNewGroundHomeAddress(
			this.<String>getColumnOriginalValue("newGroundHomeAddress"));
		tourismNewGroundTransportationImpl.setNewGroundBusinessAddress(
			this.<String>getColumnOriginalValue("newGroundBusinessAddress"));
		tourismNewGroundTransportationImpl.setNewGroundLandlineNo(
			this.<String>getColumnOriginalValue("newGroundLandlineNo"));
		tourismNewGroundTransportationImpl.setNewGroundMobileNo(
			this.<String>getColumnOriginalValue("newGroundMobileNo"));
		tourismNewGroundTransportationImpl.setNewGroundFaxNo(
			this.<String>getColumnOriginalValue("newGroundFaxNo"));
		tourismNewGroundTransportationImpl.setNewGroundLicensedWith(
			this.<String>getColumnOriginalValue("newGroundLicensedWith"));
		tourismNewGroundTransportationImpl.setNewGroundBoardExpiryDate(
			this.<Date>getColumnOriginalValue("newGroundBoardExpiryDate"));
		tourismNewGroundTransportationImpl.setNewGroundHaveYouBenefitBefore(
			this.<String>getColumnOriginalValue(
				"newGroundHaveYouBenefitBefore"));
		tourismNewGroundTransportationImpl.setNewGroundHaveBenefitDate(
			this.<Date>getColumnOriginalValue("newGroundHaveBenefitDate"));
		tourismNewGroundTransportationImpl.setNewGroundEntityType(
			this.<String>getColumnOriginalValue("newGroundEntityType"));
		tourismNewGroundTransportationImpl.setNewGroundVehicleInfoMake(
			this.<String>getColumnOriginalValue("newGroundVehicleInfoMake"));
		tourismNewGroundTransportationImpl.setNewGroundVehicleInfoModel(
			this.<String>getColumnOriginalValue("newGroundVehicleInfoModel"));
		tourismNewGroundTransportationImpl.setNewGroundVehicleInfoYear(
			this.<String>getColumnOriginalValue("newGroundVehicleInfoYear"));
		tourismNewGroundTransportationImpl.setNewGroundSeatingCapacity(
			this.<String>getColumnOriginalValue("newGroundSeatingCapacity"));
		tourismNewGroundTransportationImpl.setNewGroundExistingFleetAmount(
			this.<String>getColumnOriginalValue(
				"newGroundExistingFleetAmount"));
		tourismNewGroundTransportationImpl.setNewGroundIndicateVehicleWill(
			this.<String>getColumnOriginalValue(
				"newGroundIndicateVehicleWill"));
		tourismNewGroundTransportationImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));

		return tourismNewGroundTransportationImpl;
	}

	@Override
	public int compareTo(
		TourismNewGroundTransportation tourismNewGroundTransportation) {

		long primaryKey = tourismNewGroundTransportation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismNewGroundTransportation)) {
			return false;
		}

		TourismNewGroundTransportation tourismNewGroundTransportation =
			(TourismNewGroundTransportation)object;

		long primaryKey = tourismNewGroundTransportation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismNewGroundTransportation> toCacheModel() {
		TourismNewGroundTransportationCacheModel
			tourismNewGroundTransportationCacheModel =
				new TourismNewGroundTransportationCacheModel();

		tourismNewGroundTransportationCacheModel.TourismNewGroundTransId =
			getTourismNewGroundTransId();

		tourismNewGroundTransportationCacheModel.groupId = getGroupId();

		tourismNewGroundTransportationCacheModel.companyId = getCompanyId();

		tourismNewGroundTransportationCacheModel.userId = getUserId();

		tourismNewGroundTransportationCacheModel.userName = getUserName();

		String userName = tourismNewGroundTransportationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismNewGroundTransportationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismNewGroundTransportationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismNewGroundTransportationCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismNewGroundTransportationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismNewGroundTransportationCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		tourismNewGroundTransportationCacheModel.typeOfGroundTransportation =
			getTypeOfGroundTransportation();

		String typeOfGroundTransportation =
			tourismNewGroundTransportationCacheModel.typeOfGroundTransportation;

		if ((typeOfGroundTransportation != null) &&
			(typeOfGroundTransportation.length() == 0)) {

			tourismNewGroundTransportationCacheModel.
				typeOfGroundTransportation = null;
		}

		tourismNewGroundTransportationCacheModel.newGroundName =
			getNewGroundName();

		String newGroundName =
			tourismNewGroundTransportationCacheModel.newGroundName;

		if ((newGroundName != null) && (newGroundName.length() == 0)) {
			tourismNewGroundTransportationCacheModel.newGroundName = null;
		}

		tourismNewGroundTransportationCacheModel.newGroundHomeAddress =
			getNewGroundHomeAddress();

		String newGroundHomeAddress =
			tourismNewGroundTransportationCacheModel.newGroundHomeAddress;

		if ((newGroundHomeAddress != null) &&
			(newGroundHomeAddress.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundHomeAddress =
				null;
		}

		tourismNewGroundTransportationCacheModel.newGroundBusinessAddress =
			getNewGroundBusinessAddress();

		String newGroundBusinessAddress =
			tourismNewGroundTransportationCacheModel.newGroundBusinessAddress;

		if ((newGroundBusinessAddress != null) &&
			(newGroundBusinessAddress.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundBusinessAddress =
				null;
		}

		tourismNewGroundTransportationCacheModel.newGroundLandlineNo =
			getNewGroundLandlineNo();

		String newGroundLandlineNo =
			tourismNewGroundTransportationCacheModel.newGroundLandlineNo;

		if ((newGroundLandlineNo != null) &&
			(newGroundLandlineNo.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundLandlineNo = null;
		}

		tourismNewGroundTransportationCacheModel.newGroundMobileNo =
			getNewGroundMobileNo();

		String newGroundMobileNo =
			tourismNewGroundTransportationCacheModel.newGroundMobileNo;

		if ((newGroundMobileNo != null) && (newGroundMobileNo.length() == 0)) {
			tourismNewGroundTransportationCacheModel.newGroundMobileNo = null;
		}

		tourismNewGroundTransportationCacheModel.newGroundFaxNo =
			getNewGroundFaxNo();

		String newGroundFaxNo =
			tourismNewGroundTransportationCacheModel.newGroundFaxNo;

		if ((newGroundFaxNo != null) && (newGroundFaxNo.length() == 0)) {
			tourismNewGroundTransportationCacheModel.newGroundFaxNo = null;
		}

		tourismNewGroundTransportationCacheModel.newGroundLicensedWith =
			getNewGroundLicensedWith();

		String newGroundLicensedWith =
			tourismNewGroundTransportationCacheModel.newGroundLicensedWith;

		if ((newGroundLicensedWith != null) &&
			(newGroundLicensedWith.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundLicensedWith =
				null;
		}

		Date newGroundBoardExpiryDate = getNewGroundBoardExpiryDate();

		if (newGroundBoardExpiryDate != null) {
			tourismNewGroundTransportationCacheModel.newGroundBoardExpiryDate =
				newGroundBoardExpiryDate.getTime();
		}
		else {
			tourismNewGroundTransportationCacheModel.newGroundBoardExpiryDate =
				Long.MIN_VALUE;
		}

		tourismNewGroundTransportationCacheModel.newGroundHaveYouBenefitBefore =
			getNewGroundHaveYouBenefitBefore();

		String newGroundHaveYouBenefitBefore =
			tourismNewGroundTransportationCacheModel.
				newGroundHaveYouBenefitBefore;

		if ((newGroundHaveYouBenefitBefore != null) &&
			(newGroundHaveYouBenefitBefore.length() == 0)) {

			tourismNewGroundTransportationCacheModel.
				newGroundHaveYouBenefitBefore = null;
		}

		Date newGroundHaveBenefitDate = getNewGroundHaveBenefitDate();

		if (newGroundHaveBenefitDate != null) {
			tourismNewGroundTransportationCacheModel.newGroundHaveBenefitDate =
				newGroundHaveBenefitDate.getTime();
		}
		else {
			tourismNewGroundTransportationCacheModel.newGroundHaveBenefitDate =
				Long.MIN_VALUE;
		}

		tourismNewGroundTransportationCacheModel.newGroundEntityType =
			getNewGroundEntityType();

		String newGroundEntityType =
			tourismNewGroundTransportationCacheModel.newGroundEntityType;

		if ((newGroundEntityType != null) &&
			(newGroundEntityType.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundEntityType = null;
		}

		tourismNewGroundTransportationCacheModel.newGroundVehicleInfoMake =
			getNewGroundVehicleInfoMake();

		String newGroundVehicleInfoMake =
			tourismNewGroundTransportationCacheModel.newGroundVehicleInfoMake;

		if ((newGroundVehicleInfoMake != null) &&
			(newGroundVehicleInfoMake.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundVehicleInfoMake =
				null;
		}

		tourismNewGroundTransportationCacheModel.newGroundVehicleInfoModel =
			getNewGroundVehicleInfoModel();

		String newGroundVehicleInfoModel =
			tourismNewGroundTransportationCacheModel.newGroundVehicleInfoModel;

		if ((newGroundVehicleInfoModel != null) &&
			(newGroundVehicleInfoModel.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundVehicleInfoModel =
				null;
		}

		tourismNewGroundTransportationCacheModel.newGroundVehicleInfoYear =
			getNewGroundVehicleInfoYear();

		String newGroundVehicleInfoYear =
			tourismNewGroundTransportationCacheModel.newGroundVehicleInfoYear;

		if ((newGroundVehicleInfoYear != null) &&
			(newGroundVehicleInfoYear.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundVehicleInfoYear =
				null;
		}

		tourismNewGroundTransportationCacheModel.newGroundSeatingCapacity =
			getNewGroundSeatingCapacity();

		String newGroundSeatingCapacity =
			tourismNewGroundTransportationCacheModel.newGroundSeatingCapacity;

		if ((newGroundSeatingCapacity != null) &&
			(newGroundSeatingCapacity.length() == 0)) {

			tourismNewGroundTransportationCacheModel.newGroundSeatingCapacity =
				null;
		}

		tourismNewGroundTransportationCacheModel.newGroundExistingFleetAmount =
			getNewGroundExistingFleetAmount();

		String newGroundExistingFleetAmount =
			tourismNewGroundTransportationCacheModel.
				newGroundExistingFleetAmount;

		if ((newGroundExistingFleetAmount != null) &&
			(newGroundExistingFleetAmount.length() == 0)) {

			tourismNewGroundTransportationCacheModel.
				newGroundExistingFleetAmount = null;
		}

		tourismNewGroundTransportationCacheModel.newGroundIndicateVehicleWill =
			getNewGroundIndicateVehicleWill();

		String newGroundIndicateVehicleWill =
			tourismNewGroundTransportationCacheModel.
				newGroundIndicateVehicleWill;

		if ((newGroundIndicateVehicleWill != null) &&
			(newGroundIndicateVehicleWill.length() == 0)) {

			tourismNewGroundTransportationCacheModel.
				newGroundIndicateVehicleWill = null;
		}

		tourismNewGroundTransportationCacheModel.tourismApplicationId =
			getTourismApplicationId();

		return tourismNewGroundTransportationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismNewGroundTransportation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TourismNewGroundTransportation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewGroundTransportation, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismNewGroundTransportation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismNewGroundTransportation>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismNewGroundTransportation.class,
						ModelWrapper.class);

	}

	private long _TourismNewGroundTransId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _typeOfGroundTransportation;
	private String _newGroundName;
	private String _newGroundHomeAddress;
	private String _newGroundBusinessAddress;
	private String _newGroundLandlineNo;
	private String _newGroundMobileNo;
	private String _newGroundFaxNo;
	private String _newGroundLicensedWith;
	private Date _newGroundBoardExpiryDate;
	private String _newGroundHaveYouBenefitBefore;
	private Date _newGroundHaveBenefitDate;
	private String _newGroundEntityType;
	private String _newGroundVehicleInfoMake;
	private String _newGroundVehicleInfoModel;
	private String _newGroundVehicleInfoYear;
	private String _newGroundSeatingCapacity;
	private String _newGroundExistingFleetAmount;
	private String _newGroundIndicateVehicleWill;
	private long _tourismApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismNewGroundTransportation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismNewGroundTransportation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"TourismNewGroundTransId", _TourismNewGroundTransId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"typeOfGroundTransportation", _typeOfGroundTransportation);
		_columnOriginalValues.put("newGroundName", _newGroundName);
		_columnOriginalValues.put(
			"newGroundHomeAddress", _newGroundHomeAddress);
		_columnOriginalValues.put(
			"newGroundBusinessAddress", _newGroundBusinessAddress);
		_columnOriginalValues.put("newGroundLandlineNo", _newGroundLandlineNo);
		_columnOriginalValues.put("newGroundMobileNo", _newGroundMobileNo);
		_columnOriginalValues.put("newGroundFaxNo", _newGroundFaxNo);
		_columnOriginalValues.put(
			"newGroundLicensedWith", _newGroundLicensedWith);
		_columnOriginalValues.put(
			"newGroundBoardExpiryDate", _newGroundBoardExpiryDate);
		_columnOriginalValues.put(
			"newGroundHaveYouBenefitBefore", _newGroundHaveYouBenefitBefore);
		_columnOriginalValues.put(
			"newGroundHaveBenefitDate", _newGroundHaveBenefitDate);
		_columnOriginalValues.put("newGroundEntityType", _newGroundEntityType);
		_columnOriginalValues.put(
			"newGroundVehicleInfoMake", _newGroundVehicleInfoMake);
		_columnOriginalValues.put(
			"newGroundVehicleInfoModel", _newGroundVehicleInfoModel);
		_columnOriginalValues.put(
			"newGroundVehicleInfoYear", _newGroundVehicleInfoYear);
		_columnOriginalValues.put(
			"newGroundSeatingCapacity", _newGroundSeatingCapacity);
		_columnOriginalValues.put(
			"newGroundExistingFleetAmount", _newGroundExistingFleetAmount);
		_columnOriginalValues.put(
			"newGroundIndicateVehicleWill", _newGroundIndicateVehicleWill);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("TourismNewGroundTransId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("typeOfGroundTransportation", 128L);

		columnBitmasks.put("newGroundName", 256L);

		columnBitmasks.put("newGroundHomeAddress", 512L);

		columnBitmasks.put("newGroundBusinessAddress", 1024L);

		columnBitmasks.put("newGroundLandlineNo", 2048L);

		columnBitmasks.put("newGroundMobileNo", 4096L);

		columnBitmasks.put("newGroundFaxNo", 8192L);

		columnBitmasks.put("newGroundLicensedWith", 16384L);

		columnBitmasks.put("newGroundBoardExpiryDate", 32768L);

		columnBitmasks.put("newGroundHaveYouBenefitBefore", 65536L);

		columnBitmasks.put("newGroundHaveBenefitDate", 131072L);

		columnBitmasks.put("newGroundEntityType", 262144L);

		columnBitmasks.put("newGroundVehicleInfoMake", 524288L);

		columnBitmasks.put("newGroundVehicleInfoModel", 1048576L);

		columnBitmasks.put("newGroundVehicleInfoYear", 2097152L);

		columnBitmasks.put("newGroundSeatingCapacity", 4194304L);

		columnBitmasks.put("newGroundExistingFleetAmount", 8388608L);

		columnBitmasks.put("newGroundIndicateVehicleWill", 16777216L);

		columnBitmasks.put("tourismApplicationId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismNewGroundTransportation _escapedModel;

}