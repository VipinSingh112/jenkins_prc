/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismBonaWaterSportsFormSecond;
import com.nbp.tourism.application.form.services.model.TourismBonaWaterSportsFormSecondModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismBonaWaterSportsFormSecond service. Represents a row in the &quot;nbp_tourism_bona_water_ssf&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismBonaWaterSportsFormSecondModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismBonaWaterSportsFormSecondImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismBonaWaterSportsFormSecondImpl
 * @generated
 */
@JSON(strict = true)
public class TourismBonaWaterSportsFormSecondModelImpl
	extends BaseModelImpl<TourismBonaWaterSportsFormSecond>
	implements TourismBonaWaterSportsFormSecondModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism bona water sports form second model instance should use the <code>TourismBonaWaterSportsFormSecond</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_bona_water_ssf";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismBonaWaterSportsFSecId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"bonaTargetMarketLocal", Types.VARCHAR},
		{"bonaTargetMarketForeign", Types.VARCHAR},
		{"bonaTargetMarketCountries", Types.VARCHAR},
		{"bonaOwnerCountryOfOrigin", Types.VARCHAR},
		{"bonaOwnerJointVenture", Types.VARCHAR},
		{"bonaOwnerLocal", Types.VARCHAR}, {"bonaOwnerForeign", Types.VARCHAR},
		{"bonaCapitalizationUSComponent", Types.VARCHAR},
		{"bonaCapitalizationJEquivalent", Types.VARCHAR},
		{"bonaCapitalizationRateExchange", Types.VARCHAR},
		{"bonaCapitalizationJComponent", Types.VARCHAR},
		{"bonaCapitalCapitalInvest", Types.VARCHAR},
		{"bonaSourcesLoan ", Types.VARCHAR},
		{"bonaSourcesEquity", Types.VARCHAR},
		{"bonaSourcesStateOfFinanc", Types.VARCHAR},
		{"bonaAnnualProjectedOne ", Types.VARCHAR},
		{"bonaAnnualProjectedTwo", Types.VARCHAR},
		{"bonaAnnualProjectedThree ", Types.VARCHAR},
		{"bonaAnnualProjectedNumber", Types.VARCHAR},
		{"tourismApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismBonaWaterSportsFSecId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bonaTargetMarketLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaTargetMarketForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaTargetMarketCountries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaOwnerCountryOfOrigin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaOwnerJointVenture", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaOwnerLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaOwnerForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaCapitalizationUSComponent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaCapitalizationJEquivalent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaCapitalizationRateExchange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaCapitalizationJComponent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaCapitalCapitalInvest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaSourcesLoan ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaSourcesEquity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaSourcesStateOfFinanc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaAnnualProjectedOne ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaAnnualProjectedTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaAnnualProjectedThree ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bonaAnnualProjectedNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_bona_water_ssf (tourismBonaWaterSportsFSecId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,bonaTargetMarketLocal VARCHAR(75) null,bonaTargetMarketForeign VARCHAR(75) null,bonaTargetMarketCountries VARCHAR(75) null,bonaOwnerCountryOfOrigin VARCHAR(75) null,bonaOwnerJointVenture VARCHAR(75) null,bonaOwnerLocal VARCHAR(75) null,bonaOwnerForeign VARCHAR(75) null,bonaCapitalizationUSComponent VARCHAR(75) null,bonaCapitalizationJEquivalent VARCHAR(75) null,bonaCapitalizationRateExchange VARCHAR(75) null,bonaCapitalizationJComponent VARCHAR(75) null,bonaCapitalCapitalInvest VARCHAR(75) null,bonaSourcesLoan  VARCHAR(75) null,bonaSourcesEquity VARCHAR(75) null,bonaSourcesStateOfFinanc VARCHAR(75) null,bonaAnnualProjectedOne  VARCHAR(75) null,bonaAnnualProjectedTwo VARCHAR(75) null,bonaAnnualProjectedThree  VARCHAR(75) null,bonaAnnualProjectedNumber VARCHAR(75) null,tourismApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_bona_water_ssf";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismBonaWaterSportsFormSecond.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_bona_water_ssf.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismBonaWaterSportsFormSecondModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismBonaWaterSportsFSecId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismBonaWaterSportsFSecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismBonaWaterSportsFSecId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismBonaWaterSportsFormSecond.class;
	}

	@Override
	public String getModelClassName() {
		return TourismBonaWaterSportsFormSecond.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismBonaWaterSportsFormSecond, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<TourismBonaWaterSportsFormSecond, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismBonaWaterSportsFormSecond, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismBonaWaterSportsFormSecond)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismBonaWaterSportsFormSecond, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismBonaWaterSportsFormSecond, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismBonaWaterSportsFormSecond)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismBonaWaterSportsFormSecond, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismBonaWaterSportsFormSecond, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<TourismBonaWaterSportsFormSecond, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<TourismBonaWaterSportsFormSecond, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<TourismBonaWaterSportsFormSecond, Object>>();

			attributeGetterFunctions.put(
				"tourismBonaWaterSportsFSecId",
				TourismBonaWaterSportsFormSecond::
					getTourismBonaWaterSportsFSecId);
			attributeGetterFunctions.put(
				"groupId", TourismBonaWaterSportsFormSecond::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismBonaWaterSportsFormSecond::getCompanyId);
			attributeGetterFunctions.put(
				"userId", TourismBonaWaterSportsFormSecond::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismBonaWaterSportsFormSecond::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismBonaWaterSportsFormSecond::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				TourismBonaWaterSportsFormSecond::getModifiedDate);
			attributeGetterFunctions.put(
				"bonaTargetMarketLocal",
				TourismBonaWaterSportsFormSecond::getBonaTargetMarketLocal);
			attributeGetterFunctions.put(
				"bonaTargetMarketForeign",
				TourismBonaWaterSportsFormSecond::getBonaTargetMarketForeign);
			attributeGetterFunctions.put(
				"bonaTargetMarketCountries",
				TourismBonaWaterSportsFormSecond::getBonaTargetMarketCountries);
			attributeGetterFunctions.put(
				"bonaOwnerCountryOfOrigin",
				TourismBonaWaterSportsFormSecond::getBonaOwnerCountryOfOrigin);
			attributeGetterFunctions.put(
				"bonaOwnerJointVenture",
				TourismBonaWaterSportsFormSecond::getBonaOwnerJointVenture);
			attributeGetterFunctions.put(
				"bonaOwnerLocal",
				TourismBonaWaterSportsFormSecond::getBonaOwnerLocal);
			attributeGetterFunctions.put(
				"bonaOwnerForeign",
				TourismBonaWaterSportsFormSecond::getBonaOwnerForeign);
			attributeGetterFunctions.put(
				"bonaCapitalizationUSComponent",
				TourismBonaWaterSportsFormSecond::
					getBonaCapitalizationUSComponent);
			attributeGetterFunctions.put(
				"bonaCapitalizationJEquivalent",
				TourismBonaWaterSportsFormSecond::
					getBonaCapitalizationJEquivalent);
			attributeGetterFunctions.put(
				"bonaCapitalizationRateExchange",
				TourismBonaWaterSportsFormSecond::
					getBonaCapitalizationRateExchange);
			attributeGetterFunctions.put(
				"bonaCapitalizationJComponent",
				TourismBonaWaterSportsFormSecond::
					getBonaCapitalizationJComponent);
			attributeGetterFunctions.put(
				"bonaCapitalCapitalInvest",
				TourismBonaWaterSportsFormSecond::getBonaCapitalCapitalInvest);
			attributeGetterFunctions.put(
				"bonaSourcesLoan ",
				TourismBonaWaterSportsFormSecond::getBonaSourcesLoan);
			attributeGetterFunctions.put(
				"bonaSourcesEquity",
				TourismBonaWaterSportsFormSecond::getBonaSourcesEquity);
			attributeGetterFunctions.put(
				"bonaSourcesStateOfFinanc",
				TourismBonaWaterSportsFormSecond::getBonaSourcesStateOfFinanc);
			attributeGetterFunctions.put(
				"bonaAnnualProjectedOne ",
				TourismBonaWaterSportsFormSecond::getBonaAnnualProjectedOne);
			attributeGetterFunctions.put(
				"bonaAnnualProjectedTwo",
				TourismBonaWaterSportsFormSecond::getBonaAnnualProjectedTwo);
			attributeGetterFunctions.put(
				"bonaAnnualProjectedThree ",
				TourismBonaWaterSportsFormSecond::getBonaAnnualProjectedThree);
			attributeGetterFunctions.put(
				"bonaAnnualProjectedNumber",
				TourismBonaWaterSportsFormSecond::getBonaAnnualProjectedNumber);
			attributeGetterFunctions.put(
				"tourismApplicationId",
				TourismBonaWaterSportsFormSecond::getTourismApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<TourismBonaWaterSportsFormSecond, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismBonaWaterSportsFormSecond, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<TourismBonaWaterSportsFormSecond, ?>>();

			attributeSetterBiConsumers.put(
				"tourismBonaWaterSportsFSecId",
				(BiConsumer<TourismBonaWaterSportsFormSecond, Long>)
					TourismBonaWaterSportsFormSecond::
						setTourismBonaWaterSportsFSecId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismBonaWaterSportsFormSecond, Long>)
					TourismBonaWaterSportsFormSecond::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismBonaWaterSportsFormSecond, Long>)
					TourismBonaWaterSportsFormSecond::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismBonaWaterSportsFormSecond, Long>)
					TourismBonaWaterSportsFormSecond::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismBonaWaterSportsFormSecond, Date>)
					TourismBonaWaterSportsFormSecond::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismBonaWaterSportsFormSecond, Date>)
					TourismBonaWaterSportsFormSecond::setModifiedDate);
			attributeSetterBiConsumers.put(
				"bonaTargetMarketLocal",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::setBonaTargetMarketLocal);
			attributeSetterBiConsumers.put(
				"bonaTargetMarketForeign",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaTargetMarketForeign);
			attributeSetterBiConsumers.put(
				"bonaTargetMarketCountries",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaTargetMarketCountries);
			attributeSetterBiConsumers.put(
				"bonaOwnerCountryOfOrigin",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaOwnerCountryOfOrigin);
			attributeSetterBiConsumers.put(
				"bonaOwnerJointVenture",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::setBonaOwnerJointVenture);
			attributeSetterBiConsumers.put(
				"bonaOwnerLocal",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::setBonaOwnerLocal);
			attributeSetterBiConsumers.put(
				"bonaOwnerForeign",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::setBonaOwnerForeign);
			attributeSetterBiConsumers.put(
				"bonaCapitalizationUSComponent",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaCapitalizationUSComponent);
			attributeSetterBiConsumers.put(
				"bonaCapitalizationJEquivalent",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaCapitalizationJEquivalent);
			attributeSetterBiConsumers.put(
				"bonaCapitalizationRateExchange",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaCapitalizationRateExchange);
			attributeSetterBiConsumers.put(
				"bonaCapitalizationJComponent",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaCapitalizationJComponent);
			attributeSetterBiConsumers.put(
				"bonaCapitalCapitalInvest",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaCapitalCapitalInvest);
			attributeSetterBiConsumers.put(
				"bonaSourcesLoan ",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::setBonaSourcesLoan);
			attributeSetterBiConsumers.put(
				"bonaSourcesEquity",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::setBonaSourcesEquity);
			attributeSetterBiConsumers.put(
				"bonaSourcesStateOfFinanc",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaSourcesStateOfFinanc);
			attributeSetterBiConsumers.put(
				"bonaAnnualProjectedOne ",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaAnnualProjectedOne);
			attributeSetterBiConsumers.put(
				"bonaAnnualProjectedTwo",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaAnnualProjectedTwo);
			attributeSetterBiConsumers.put(
				"bonaAnnualProjectedThree ",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaAnnualProjectedThree);
			attributeSetterBiConsumers.put(
				"bonaAnnualProjectedNumber",
				(BiConsumer<TourismBonaWaterSportsFormSecond, String>)
					TourismBonaWaterSportsFormSecond::
						setBonaAnnualProjectedNumber);
			attributeSetterBiConsumers.put(
				"tourismApplicationId",
				(BiConsumer<TourismBonaWaterSportsFormSecond, Long>)
					TourismBonaWaterSportsFormSecond::setTourismApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismBonaWaterSportsFSecId() {
		return _tourismBonaWaterSportsFSecId;
	}

	@Override
	public void setTourismBonaWaterSportsFSecId(
		long tourismBonaWaterSportsFSecId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismBonaWaterSportsFSecId = tourismBonaWaterSportsFSecId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBonaTargetMarketLocal() {
		if (_bonaTargetMarketLocal == null) {
			return "";
		}
		else {
			return _bonaTargetMarketLocal;
		}
	}

	@Override
	public void setBonaTargetMarketLocal(String bonaTargetMarketLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaTargetMarketLocal = bonaTargetMarketLocal;
	}

	@JSON
	@Override
	public String getBonaTargetMarketForeign() {
		if (_bonaTargetMarketForeign == null) {
			return "";
		}
		else {
			return _bonaTargetMarketForeign;
		}
	}

	@Override
	public void setBonaTargetMarketForeign(String bonaTargetMarketForeign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaTargetMarketForeign = bonaTargetMarketForeign;
	}

	@JSON
	@Override
	public String getBonaTargetMarketCountries() {
		if (_bonaTargetMarketCountries == null) {
			return "";
		}
		else {
			return _bonaTargetMarketCountries;
		}
	}

	@Override
	public void setBonaTargetMarketCountries(String bonaTargetMarketCountries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaTargetMarketCountries = bonaTargetMarketCountries;
	}

	@JSON
	@Override
	public String getBonaOwnerCountryOfOrigin() {
		if (_bonaOwnerCountryOfOrigin == null) {
			return "";
		}
		else {
			return _bonaOwnerCountryOfOrigin;
		}
	}

	@Override
	public void setBonaOwnerCountryOfOrigin(String bonaOwnerCountryOfOrigin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaOwnerCountryOfOrigin = bonaOwnerCountryOfOrigin;
	}

	@JSON
	@Override
	public String getBonaOwnerJointVenture() {
		if (_bonaOwnerJointVenture == null) {
			return "";
		}
		else {
			return _bonaOwnerJointVenture;
		}
	}

	@Override
	public void setBonaOwnerJointVenture(String bonaOwnerJointVenture) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaOwnerJointVenture = bonaOwnerJointVenture;
	}

	@JSON
	@Override
	public String getBonaOwnerLocal() {
		if (_bonaOwnerLocal == null) {
			return "";
		}
		else {
			return _bonaOwnerLocal;
		}
	}

	@Override
	public void setBonaOwnerLocal(String bonaOwnerLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaOwnerLocal = bonaOwnerLocal;
	}

	@JSON
	@Override
	public String getBonaOwnerForeign() {
		if (_bonaOwnerForeign == null) {
			return "";
		}
		else {
			return _bonaOwnerForeign;
		}
	}

	@Override
	public void setBonaOwnerForeign(String bonaOwnerForeign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaOwnerForeign = bonaOwnerForeign;
	}

	@JSON
	@Override
	public String getBonaCapitalizationUSComponent() {
		if (_bonaCapitalizationUSComponent == null) {
			return "";
		}
		else {
			return _bonaCapitalizationUSComponent;
		}
	}

	@Override
	public void setBonaCapitalizationUSComponent(
		String bonaCapitalizationUSComponent) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaCapitalizationUSComponent = bonaCapitalizationUSComponent;
	}

	@JSON
	@Override
	public String getBonaCapitalizationJEquivalent() {
		if (_bonaCapitalizationJEquivalent == null) {
			return "";
		}
		else {
			return _bonaCapitalizationJEquivalent;
		}
	}

	@Override
	public void setBonaCapitalizationJEquivalent(
		String bonaCapitalizationJEquivalent) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaCapitalizationJEquivalent = bonaCapitalizationJEquivalent;
	}

	@JSON
	@Override
	public String getBonaCapitalizationRateExchange() {
		if (_bonaCapitalizationRateExchange == null) {
			return "";
		}
		else {
			return _bonaCapitalizationRateExchange;
		}
	}

	@Override
	public void setBonaCapitalizationRateExchange(
		String bonaCapitalizationRateExchange) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaCapitalizationRateExchange = bonaCapitalizationRateExchange;
	}

	@JSON
	@Override
	public String getBonaCapitalizationJComponent() {
		if (_bonaCapitalizationJComponent == null) {
			return "";
		}
		else {
			return _bonaCapitalizationJComponent;
		}
	}

	@Override
	public void setBonaCapitalizationJComponent(
		String bonaCapitalizationJComponent) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaCapitalizationJComponent = bonaCapitalizationJComponent;
	}

	@JSON
	@Override
	public String getBonaCapitalCapitalInvest() {
		if (_bonaCapitalCapitalInvest == null) {
			return "";
		}
		else {
			return _bonaCapitalCapitalInvest;
		}
	}

	@Override
	public void setBonaCapitalCapitalInvest(String bonaCapitalCapitalInvest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaCapitalCapitalInvest = bonaCapitalCapitalInvest;
	}

	@JSON
	@Override
	public String getBonaSourcesLoan() {
		if (_bonaSourcesLoan == null) {
			return "";
		}
		else {
			return _bonaSourcesLoan;
		}
	}

	@Override
	public void setBonaSourcesLoan(String bonaSourcesLoan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaSourcesLoan = bonaSourcesLoan;
	}

	@JSON
	@Override
	public String getBonaSourcesEquity() {
		if (_bonaSourcesEquity == null) {
			return "";
		}
		else {
			return _bonaSourcesEquity;
		}
	}

	@Override
	public void setBonaSourcesEquity(String bonaSourcesEquity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaSourcesEquity = bonaSourcesEquity;
	}

	@JSON
	@Override
	public String getBonaSourcesStateOfFinanc() {
		if (_bonaSourcesStateOfFinanc == null) {
			return "";
		}
		else {
			return _bonaSourcesStateOfFinanc;
		}
	}

	@Override
	public void setBonaSourcesStateOfFinanc(String bonaSourcesStateOfFinanc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaSourcesStateOfFinanc = bonaSourcesStateOfFinanc;
	}

	@JSON
	@Override
	public String getBonaAnnualProjectedOne() {
		if (_bonaAnnualProjectedOne == null) {
			return "";
		}
		else {
			return _bonaAnnualProjectedOne;
		}
	}

	@Override
	public void setBonaAnnualProjectedOne(String bonaAnnualProjectedOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaAnnualProjectedOne = bonaAnnualProjectedOne;
	}

	@JSON
	@Override
	public String getBonaAnnualProjectedTwo() {
		if (_bonaAnnualProjectedTwo == null) {
			return "";
		}
		else {
			return _bonaAnnualProjectedTwo;
		}
	}

	@Override
	public void setBonaAnnualProjectedTwo(String bonaAnnualProjectedTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaAnnualProjectedTwo = bonaAnnualProjectedTwo;
	}

	@JSON
	@Override
	public String getBonaAnnualProjectedThree() {
		if (_bonaAnnualProjectedThree == null) {
			return "";
		}
		else {
			return _bonaAnnualProjectedThree;
		}
	}

	@Override
	public void setBonaAnnualProjectedThree(String bonaAnnualProjectedThree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaAnnualProjectedThree = bonaAnnualProjectedThree;
	}

	@JSON
	@Override
	public String getBonaAnnualProjectedNumber() {
		if (_bonaAnnualProjectedNumber == null) {
			return "";
		}
		else {
			return _bonaAnnualProjectedNumber;
		}
	}

	@Override
	public void setBonaAnnualProjectedNumber(String bonaAnnualProjectedNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bonaAnnualProjectedNumber = bonaAnnualProjectedNumber;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismBonaWaterSportsFormSecond.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismBonaWaterSportsFormSecond toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismBonaWaterSportsFormSecond>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismBonaWaterSportsFormSecondImpl
			tourismBonaWaterSportsFormSecondImpl =
				new TourismBonaWaterSportsFormSecondImpl();

		tourismBonaWaterSportsFormSecondImpl.setTourismBonaWaterSportsFSecId(
			getTourismBonaWaterSportsFSecId());
		tourismBonaWaterSportsFormSecondImpl.setGroupId(getGroupId());
		tourismBonaWaterSportsFormSecondImpl.setCompanyId(getCompanyId());
		tourismBonaWaterSportsFormSecondImpl.setUserId(getUserId());
		tourismBonaWaterSportsFormSecondImpl.setUserName(getUserName());
		tourismBonaWaterSportsFormSecondImpl.setCreateDate(getCreateDate());
		tourismBonaWaterSportsFormSecondImpl.setModifiedDate(getModifiedDate());
		tourismBonaWaterSportsFormSecondImpl.setBonaTargetMarketLocal(
			getBonaTargetMarketLocal());
		tourismBonaWaterSportsFormSecondImpl.setBonaTargetMarketForeign(
			getBonaTargetMarketForeign());
		tourismBonaWaterSportsFormSecondImpl.setBonaTargetMarketCountries(
			getBonaTargetMarketCountries());
		tourismBonaWaterSportsFormSecondImpl.setBonaOwnerCountryOfOrigin(
			getBonaOwnerCountryOfOrigin());
		tourismBonaWaterSportsFormSecondImpl.setBonaOwnerJointVenture(
			getBonaOwnerJointVenture());
		tourismBonaWaterSportsFormSecondImpl.setBonaOwnerLocal(
			getBonaOwnerLocal());
		tourismBonaWaterSportsFormSecondImpl.setBonaOwnerForeign(
			getBonaOwnerForeign());
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalizationUSComponent(
			getBonaCapitalizationUSComponent());
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalizationJEquivalent(
			getBonaCapitalizationJEquivalent());
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalizationRateExchange(
			getBonaCapitalizationRateExchange());
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalizationJComponent(
			getBonaCapitalizationJComponent());
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalCapitalInvest(
			getBonaCapitalCapitalInvest());
		tourismBonaWaterSportsFormSecondImpl.setBonaSourcesLoan(
			getBonaSourcesLoan());
		tourismBonaWaterSportsFormSecondImpl.setBonaSourcesEquity(
			getBonaSourcesEquity());
		tourismBonaWaterSportsFormSecondImpl.setBonaSourcesStateOfFinanc(
			getBonaSourcesStateOfFinanc());
		tourismBonaWaterSportsFormSecondImpl.setBonaAnnualProjectedOne(
			getBonaAnnualProjectedOne());
		tourismBonaWaterSportsFormSecondImpl.setBonaAnnualProjectedTwo(
			getBonaAnnualProjectedTwo());
		tourismBonaWaterSportsFormSecondImpl.setBonaAnnualProjectedThree(
			getBonaAnnualProjectedThree());
		tourismBonaWaterSportsFormSecondImpl.setBonaAnnualProjectedNumber(
			getBonaAnnualProjectedNumber());
		tourismBonaWaterSportsFormSecondImpl.setTourismApplicationId(
			getTourismApplicationId());

		tourismBonaWaterSportsFormSecondImpl.resetOriginalValues();

		return tourismBonaWaterSportsFormSecondImpl;
	}

	@Override
	public TourismBonaWaterSportsFormSecond cloneWithOriginalValues() {
		TourismBonaWaterSportsFormSecondImpl
			tourismBonaWaterSportsFormSecondImpl =
				new TourismBonaWaterSportsFormSecondImpl();

		tourismBonaWaterSportsFormSecondImpl.setTourismBonaWaterSportsFSecId(
			this.<Long>getColumnOriginalValue("tourismBonaWaterSportsFSecId"));
		tourismBonaWaterSportsFormSecondImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismBonaWaterSportsFormSecondImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismBonaWaterSportsFormSecondImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismBonaWaterSportsFormSecondImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismBonaWaterSportsFormSecondImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismBonaWaterSportsFormSecondImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismBonaWaterSportsFormSecondImpl.setBonaTargetMarketLocal(
			this.<String>getColumnOriginalValue("bonaTargetMarketLocal"));
		tourismBonaWaterSportsFormSecondImpl.setBonaTargetMarketForeign(
			this.<String>getColumnOriginalValue("bonaTargetMarketForeign"));
		tourismBonaWaterSportsFormSecondImpl.setBonaTargetMarketCountries(
			this.<String>getColumnOriginalValue("bonaTargetMarketCountries"));
		tourismBonaWaterSportsFormSecondImpl.setBonaOwnerCountryOfOrigin(
			this.<String>getColumnOriginalValue("bonaOwnerCountryOfOrigin"));
		tourismBonaWaterSportsFormSecondImpl.setBonaOwnerJointVenture(
			this.<String>getColumnOriginalValue("bonaOwnerJointVenture"));
		tourismBonaWaterSportsFormSecondImpl.setBonaOwnerLocal(
			this.<String>getColumnOriginalValue("bonaOwnerLocal"));
		tourismBonaWaterSportsFormSecondImpl.setBonaOwnerForeign(
			this.<String>getColumnOriginalValue("bonaOwnerForeign"));
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalizationUSComponent(
			this.<String>getColumnOriginalValue(
				"bonaCapitalizationUSComponent"));
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalizationJEquivalent(
			this.<String>getColumnOriginalValue(
				"bonaCapitalizationJEquivalent"));
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalizationRateExchange(
			this.<String>getColumnOriginalValue(
				"bonaCapitalizationRateExchange"));
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalizationJComponent(
			this.<String>getColumnOriginalValue(
				"bonaCapitalizationJComponent"));
		tourismBonaWaterSportsFormSecondImpl.setBonaCapitalCapitalInvest(
			this.<String>getColumnOriginalValue("bonaCapitalCapitalInvest"));
		tourismBonaWaterSportsFormSecondImpl.setBonaSourcesLoan(
			this.<String>getColumnOriginalValue("bonaSourcesLoan "));
		tourismBonaWaterSportsFormSecondImpl.setBonaSourcesEquity(
			this.<String>getColumnOriginalValue("bonaSourcesEquity"));
		tourismBonaWaterSportsFormSecondImpl.setBonaSourcesStateOfFinanc(
			this.<String>getColumnOriginalValue("bonaSourcesStateOfFinanc"));
		tourismBonaWaterSportsFormSecondImpl.setBonaAnnualProjectedOne(
			this.<String>getColumnOriginalValue("bonaAnnualProjectedOne "));
		tourismBonaWaterSportsFormSecondImpl.setBonaAnnualProjectedTwo(
			this.<String>getColumnOriginalValue("bonaAnnualProjectedTwo"));
		tourismBonaWaterSportsFormSecondImpl.setBonaAnnualProjectedThree(
			this.<String>getColumnOriginalValue("bonaAnnualProjectedThree "));
		tourismBonaWaterSportsFormSecondImpl.setBonaAnnualProjectedNumber(
			this.<String>getColumnOriginalValue("bonaAnnualProjectedNumber"));
		tourismBonaWaterSportsFormSecondImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));

		return tourismBonaWaterSportsFormSecondImpl;
	}

	@Override
	public int compareTo(
		TourismBonaWaterSportsFormSecond tourismBonaWaterSportsFormSecond) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), tourismBonaWaterSportsFormSecond.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismBonaWaterSportsFormSecond)) {
			return false;
		}

		TourismBonaWaterSportsFormSecond tourismBonaWaterSportsFormSecond =
			(TourismBonaWaterSportsFormSecond)object;

		long primaryKey = tourismBonaWaterSportsFormSecond.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismBonaWaterSportsFormSecond> toCacheModel() {
		TourismBonaWaterSportsFormSecondCacheModel
			tourismBonaWaterSportsFormSecondCacheModel =
				new TourismBonaWaterSportsFormSecondCacheModel();

		tourismBonaWaterSportsFormSecondCacheModel.
			tourismBonaWaterSportsFSecId = getTourismBonaWaterSportsFSecId();

		tourismBonaWaterSportsFormSecondCacheModel.groupId = getGroupId();

		tourismBonaWaterSportsFormSecondCacheModel.companyId = getCompanyId();

		tourismBonaWaterSportsFormSecondCacheModel.userId = getUserId();

		tourismBonaWaterSportsFormSecondCacheModel.userName = getUserName();

		String userName = tourismBonaWaterSportsFormSecondCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismBonaWaterSportsFormSecondCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismBonaWaterSportsFormSecondCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismBonaWaterSportsFormSecondCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismBonaWaterSportsFormSecondCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismBonaWaterSportsFormSecondCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaTargetMarketLocal =
			getBonaTargetMarketLocal();

		String bonaTargetMarketLocal =
			tourismBonaWaterSportsFormSecondCacheModel.bonaTargetMarketLocal;

		if ((bonaTargetMarketLocal != null) &&
			(bonaTargetMarketLocal.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.bonaTargetMarketLocal =
				null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaTargetMarketForeign =
			getBonaTargetMarketForeign();

		String bonaTargetMarketForeign =
			tourismBonaWaterSportsFormSecondCacheModel.bonaTargetMarketForeign;

		if ((bonaTargetMarketForeign != null) &&
			(bonaTargetMarketForeign.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.bonaTargetMarketForeign =
				null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaTargetMarketCountries =
			getBonaTargetMarketCountries();

		String bonaTargetMarketCountries =
			tourismBonaWaterSportsFormSecondCacheModel.
				bonaTargetMarketCountries;

		if ((bonaTargetMarketCountries != null) &&
			(bonaTargetMarketCountries.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaTargetMarketCountries = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerCountryOfOrigin =
			getBonaOwnerCountryOfOrigin();

		String bonaOwnerCountryOfOrigin =
			tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerCountryOfOrigin;

		if ((bonaOwnerCountryOfOrigin != null) &&
			(bonaOwnerCountryOfOrigin.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaOwnerCountryOfOrigin = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerJointVenture =
			getBonaOwnerJointVenture();

		String bonaOwnerJointVenture =
			tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerJointVenture;

		if ((bonaOwnerJointVenture != null) &&
			(bonaOwnerJointVenture.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerJointVenture =
				null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerLocal =
			getBonaOwnerLocal();

		String bonaOwnerLocal =
			tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerLocal;

		if ((bonaOwnerLocal != null) && (bonaOwnerLocal.length() == 0)) {
			tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerLocal = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerForeign =
			getBonaOwnerForeign();

		String bonaOwnerForeign =
			tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerForeign;

		if ((bonaOwnerForeign != null) && (bonaOwnerForeign.length() == 0)) {
			tourismBonaWaterSportsFormSecondCacheModel.bonaOwnerForeign = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.
			bonaCapitalizationUSComponent = getBonaCapitalizationUSComponent();

		String bonaCapitalizationUSComponent =
			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalizationUSComponent;

		if ((bonaCapitalizationUSComponent != null) &&
			(bonaCapitalizationUSComponent.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalizationUSComponent = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.
			bonaCapitalizationJEquivalent = getBonaCapitalizationJEquivalent();

		String bonaCapitalizationJEquivalent =
			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalizationJEquivalent;

		if ((bonaCapitalizationJEquivalent != null) &&
			(bonaCapitalizationJEquivalent.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalizationJEquivalent = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.
			bonaCapitalizationRateExchange =
				getBonaCapitalizationRateExchange();

		String bonaCapitalizationRateExchange =
			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalizationRateExchange;

		if ((bonaCapitalizationRateExchange != null) &&
			(bonaCapitalizationRateExchange.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalizationRateExchange = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.
			bonaCapitalizationJComponent = getBonaCapitalizationJComponent();

		String bonaCapitalizationJComponent =
			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalizationJComponent;

		if ((bonaCapitalizationJComponent != null) &&
			(bonaCapitalizationJComponent.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalizationJComponent = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaCapitalCapitalInvest =
			getBonaCapitalCapitalInvest();

		String bonaCapitalCapitalInvest =
			tourismBonaWaterSportsFormSecondCacheModel.bonaCapitalCapitalInvest;

		if ((bonaCapitalCapitalInvest != null) &&
			(bonaCapitalCapitalInvest.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaCapitalCapitalInvest = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaSourcesLoan =
			getBonaSourcesLoan();

		String bonaSourcesLoan =
			tourismBonaWaterSportsFormSecondCacheModel.bonaSourcesLoan;

		if ((bonaSourcesLoan != null) && (bonaSourcesLoan.length() == 0)) {
			tourismBonaWaterSportsFormSecondCacheModel.bonaSourcesLoan = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaSourcesEquity =
			getBonaSourcesEquity();

		String bonaSourcesEquity =
			tourismBonaWaterSportsFormSecondCacheModel.bonaSourcesEquity;

		if ((bonaSourcesEquity != null) && (bonaSourcesEquity.length() == 0)) {
			tourismBonaWaterSportsFormSecondCacheModel.bonaSourcesEquity = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaSourcesStateOfFinanc =
			getBonaSourcesStateOfFinanc();

		String bonaSourcesStateOfFinanc =
			tourismBonaWaterSportsFormSecondCacheModel.bonaSourcesStateOfFinanc;

		if ((bonaSourcesStateOfFinanc != null) &&
			(bonaSourcesStateOfFinanc.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaSourcesStateOfFinanc = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedOne =
			getBonaAnnualProjectedOne();

		String bonaAnnualProjectedOne =
			tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedOne;

		if ((bonaAnnualProjectedOne != null) &&
			(bonaAnnualProjectedOne.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedOne =
				null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedTwo =
			getBonaAnnualProjectedTwo();

		String bonaAnnualProjectedTwo =
			tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedTwo;

		if ((bonaAnnualProjectedTwo != null) &&
			(bonaAnnualProjectedTwo.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedTwo =
				null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedThree =
			getBonaAnnualProjectedThree();

		String bonaAnnualProjectedThree =
			tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedThree;

		if ((bonaAnnualProjectedThree != null) &&
			(bonaAnnualProjectedThree.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaAnnualProjectedThree = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.bonaAnnualProjectedNumber =
			getBonaAnnualProjectedNumber();

		String bonaAnnualProjectedNumber =
			tourismBonaWaterSportsFormSecondCacheModel.
				bonaAnnualProjectedNumber;

		if ((bonaAnnualProjectedNumber != null) &&
			(bonaAnnualProjectedNumber.length() == 0)) {

			tourismBonaWaterSportsFormSecondCacheModel.
				bonaAnnualProjectedNumber = null;
		}

		tourismBonaWaterSportsFormSecondCacheModel.tourismApplicationId =
			getTourismApplicationId();

		return tourismBonaWaterSportsFormSecondCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismBonaWaterSportsFormSecond, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<TourismBonaWaterSportsFormSecond, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismBonaWaterSportsFormSecond, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismBonaWaterSportsFormSecond)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismBonaWaterSportsFormSecond>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						TourismBonaWaterSportsFormSecond.class,
						ModelWrapper.class);

	}

	private long _tourismBonaWaterSportsFSecId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _bonaTargetMarketLocal;
	private String _bonaTargetMarketForeign;
	private String _bonaTargetMarketCountries;
	private String _bonaOwnerCountryOfOrigin;
	private String _bonaOwnerJointVenture;
	private String _bonaOwnerLocal;
	private String _bonaOwnerForeign;
	private String _bonaCapitalizationUSComponent;
	private String _bonaCapitalizationJEquivalent;
	private String _bonaCapitalizationRateExchange;
	private String _bonaCapitalizationJComponent;
	private String _bonaCapitalCapitalInvest;
	private String _bonaSourcesLoan;
	private String _bonaSourcesEquity;
	private String _bonaSourcesStateOfFinanc;
	private String _bonaAnnualProjectedOne;
	private String _bonaAnnualProjectedTwo;
	private String _bonaAnnualProjectedThree;
	private String _bonaAnnualProjectedNumber;
	private long _tourismApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismBonaWaterSportsFormSecond, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismBonaWaterSportsFormSecond)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"tourismBonaWaterSportsFSecId", _tourismBonaWaterSportsFSecId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"bonaTargetMarketLocal", _bonaTargetMarketLocal);
		_columnOriginalValues.put(
			"bonaTargetMarketForeign", _bonaTargetMarketForeign);
		_columnOriginalValues.put(
			"bonaTargetMarketCountries", _bonaTargetMarketCountries);
		_columnOriginalValues.put(
			"bonaOwnerCountryOfOrigin", _bonaOwnerCountryOfOrigin);
		_columnOriginalValues.put(
			"bonaOwnerJointVenture", _bonaOwnerJointVenture);
		_columnOriginalValues.put("bonaOwnerLocal", _bonaOwnerLocal);
		_columnOriginalValues.put("bonaOwnerForeign", _bonaOwnerForeign);
		_columnOriginalValues.put(
			"bonaCapitalizationUSComponent", _bonaCapitalizationUSComponent);
		_columnOriginalValues.put(
			"bonaCapitalizationJEquivalent", _bonaCapitalizationJEquivalent);
		_columnOriginalValues.put(
			"bonaCapitalizationRateExchange", _bonaCapitalizationRateExchange);
		_columnOriginalValues.put(
			"bonaCapitalizationJComponent", _bonaCapitalizationJComponent);
		_columnOriginalValues.put(
			"bonaCapitalCapitalInvest", _bonaCapitalCapitalInvest);
		_columnOriginalValues.put("bonaSourcesLoan ", _bonaSourcesLoan);
		_columnOriginalValues.put("bonaSourcesEquity", _bonaSourcesEquity);
		_columnOriginalValues.put(
			"bonaSourcesStateOfFinanc", _bonaSourcesStateOfFinanc);
		_columnOriginalValues.put(
			"bonaAnnualProjectedOne ", _bonaAnnualProjectedOne);
		_columnOriginalValues.put(
			"bonaAnnualProjectedTwo", _bonaAnnualProjectedTwo);
		_columnOriginalValues.put(
			"bonaAnnualProjectedThree ", _bonaAnnualProjectedThree);
		_columnOriginalValues.put(
			"bonaAnnualProjectedNumber", _bonaAnnualProjectedNumber);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismBonaWaterSportsFSecId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("bonaTargetMarketLocal", 128L);

		columnBitmasks.put("bonaTargetMarketForeign", 256L);

		columnBitmasks.put("bonaTargetMarketCountries", 512L);

		columnBitmasks.put("bonaOwnerCountryOfOrigin", 1024L);

		columnBitmasks.put("bonaOwnerJointVenture", 2048L);

		columnBitmasks.put("bonaOwnerLocal", 4096L);

		columnBitmasks.put("bonaOwnerForeign", 8192L);

		columnBitmasks.put("bonaCapitalizationUSComponent", 16384L);

		columnBitmasks.put("bonaCapitalizationJEquivalent", 32768L);

		columnBitmasks.put("bonaCapitalizationRateExchange", 65536L);

		columnBitmasks.put("bonaCapitalizationJComponent", 131072L);

		columnBitmasks.put("bonaCapitalCapitalInvest", 262144L);

		columnBitmasks.put("bonaSourcesLoan ", 524288L);

		columnBitmasks.put("bonaSourcesEquity", 1048576L);

		columnBitmasks.put("bonaSourcesStateOfFinanc", 2097152L);

		columnBitmasks.put("bonaAnnualProjectedOne ", 4194304L);

		columnBitmasks.put("bonaAnnualProjectedTwo", 8388608L);

		columnBitmasks.put("bonaAnnualProjectedThree ", 16777216L);

		columnBitmasks.put("bonaAnnualProjectedNumber", 33554432L);

		columnBitmasks.put("tourismApplicationId", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismBonaWaterSportsFormSecond _escapedModel;

}