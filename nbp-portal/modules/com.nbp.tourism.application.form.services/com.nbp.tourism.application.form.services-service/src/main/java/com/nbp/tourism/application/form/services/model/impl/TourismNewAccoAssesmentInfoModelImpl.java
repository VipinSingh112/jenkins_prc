/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.tourism.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.form.services.model.TourismNewAccoAssesmentInfo;
import com.nbp.tourism.application.form.services.model.TourismNewAccoAssesmentInfoModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismNewAccoAssesmentInfo service. Represents a row in the &quot;nbp_tourism_new_acco_assesm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismNewAccoAssesmentInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismNewAccoAssesmentInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismNewAccoAssesmentInfoImpl
 * @generated
 */
@JSON(strict = true)
public class TourismNewAccoAssesmentInfoModelImpl
	extends BaseModelImpl<TourismNewAccoAssesmentInfo>
	implements TourismNewAccoAssesmentInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism new acco assesment info model instance should use the <code>TourismNewAccoAssesmentInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_new_acco_assesm";

	public static final Object[][] TABLE_COLUMNS = {
		{"TourismNewAccoAssesmentInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"countryOrigin", Types.VARCHAR}, {"jointVenture", Types.VARCHAR},
		{"localPer", Types.VARCHAR}, {"foreignPer", Types.VARCHAR},
		{"capitalInvest", Types.VARCHAR}, {"sourceAttach", Types.VARCHAR},
		{"shareCapital", Types.VARCHAR}, {"loanCapital", Types.VARCHAR},
		{"other", Types.VARCHAR}, {"tourismApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("TourismNewAccoAssesmentInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("countryOrigin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jointVenture", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localPer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foreignPer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capitalInvest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sourceAttach", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shareCapital", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loanCapital", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("other", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tourismApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_new_acco_assesm (TourismNewAccoAssesmentInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,countryOrigin VARCHAR(75) null,jointVenture VARCHAR(75) null,localPer VARCHAR(75) null,foreignPer VARCHAR(75) null,capitalInvest VARCHAR(75) null,sourceAttach VARCHAR(75) null,shareCapital VARCHAR(75) null,loanCapital VARCHAR(75) null,other VARCHAR(75) null,tourismApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_tourism_new_acco_assesm";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismNewAccoAssesmentInfo.TourismNewAccoAssesmentInfoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_new_acco_assesm.TourismNewAccoAssesmentInfoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMNEWACCOASSESMENTINFOID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismNewAccoAssesmentInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _TourismNewAccoAssesmentInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismNewAccoAssesmentInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _TourismNewAccoAssesmentInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismNewAccoAssesmentInfo.class;
	}

	@Override
	public String getModelClassName() {
		return TourismNewAccoAssesmentInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismNewAccoAssesmentInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TourismNewAccoAssesmentInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAccoAssesmentInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(TourismNewAccoAssesmentInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismNewAccoAssesmentInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismNewAccoAssesmentInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismNewAccoAssesmentInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismNewAccoAssesmentInfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismNewAccoAssesmentInfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TourismNewAccoAssesmentInfo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TourismNewAccoAssesmentInfo.class.getClassLoader(),
			TourismNewAccoAssesmentInfo.class, ModelWrapper.class);

		try {
			Constructor<TourismNewAccoAssesmentInfo> constructor =
				(Constructor<TourismNewAccoAssesmentInfo>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<TourismNewAccoAssesmentInfo, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<TourismNewAccoAssesmentInfo, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<TourismNewAccoAssesmentInfo, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<TourismNewAccoAssesmentInfo, Object>>();
		Map<String, BiConsumer<TourismNewAccoAssesmentInfo, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<TourismNewAccoAssesmentInfo, ?>>();

		attributeGetterFunctions.put(
			"TourismNewAccoAssesmentInfoId",
			TourismNewAccoAssesmentInfo::getTourismNewAccoAssesmentInfoId);
		attributeSetterBiConsumers.put(
			"TourismNewAccoAssesmentInfoId",
			(BiConsumer<TourismNewAccoAssesmentInfo, Long>)
				TourismNewAccoAssesmentInfo::setTourismNewAccoAssesmentInfoId);
		attributeGetterFunctions.put(
			"groupId", TourismNewAccoAssesmentInfo::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TourismNewAccoAssesmentInfo, Long>)
				TourismNewAccoAssesmentInfo::setGroupId);
		attributeGetterFunctions.put(
			"companyId", TourismNewAccoAssesmentInfo::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TourismNewAccoAssesmentInfo, Long>)
				TourismNewAccoAssesmentInfo::setCompanyId);
		attributeGetterFunctions.put(
			"userId", TourismNewAccoAssesmentInfo::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<TourismNewAccoAssesmentInfo, Long>)
				TourismNewAccoAssesmentInfo::setUserId);
		attributeGetterFunctions.put(
			"userName", TourismNewAccoAssesmentInfo::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setUserName);
		attributeGetterFunctions.put(
			"createDate", TourismNewAccoAssesmentInfo::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TourismNewAccoAssesmentInfo, Date>)
				TourismNewAccoAssesmentInfo::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", TourismNewAccoAssesmentInfo::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TourismNewAccoAssesmentInfo, Date>)
				TourismNewAccoAssesmentInfo::setModifiedDate);
		attributeGetterFunctions.put(
			"countryOrigin", TourismNewAccoAssesmentInfo::getCountryOrigin);
		attributeSetterBiConsumers.put(
			"countryOrigin",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setCountryOrigin);
		attributeGetterFunctions.put(
			"jointVenture", TourismNewAccoAssesmentInfo::getJointVenture);
		attributeSetterBiConsumers.put(
			"jointVenture",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setJointVenture);
		attributeGetterFunctions.put(
			"localPer", TourismNewAccoAssesmentInfo::getLocalPer);
		attributeSetterBiConsumers.put(
			"localPer",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setLocalPer);
		attributeGetterFunctions.put(
			"foreignPer", TourismNewAccoAssesmentInfo::getForeignPer);
		attributeSetterBiConsumers.put(
			"foreignPer",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setForeignPer);
		attributeGetterFunctions.put(
			"capitalInvest", TourismNewAccoAssesmentInfo::getCapitalInvest);
		attributeSetterBiConsumers.put(
			"capitalInvest",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setCapitalInvest);
		attributeGetterFunctions.put(
			"sourceAttach", TourismNewAccoAssesmentInfo::getSourceAttach);
		attributeSetterBiConsumers.put(
			"sourceAttach",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setSourceAttach);
		attributeGetterFunctions.put(
			"shareCapital", TourismNewAccoAssesmentInfo::getShareCapital);
		attributeSetterBiConsumers.put(
			"shareCapital",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setShareCapital);
		attributeGetterFunctions.put(
			"loanCapital", TourismNewAccoAssesmentInfo::getLoanCapital);
		attributeSetterBiConsumers.put(
			"loanCapital",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setLoanCapital);
		attributeGetterFunctions.put(
			"other", TourismNewAccoAssesmentInfo::getOther);
		attributeSetterBiConsumers.put(
			"other",
			(BiConsumer<TourismNewAccoAssesmentInfo, String>)
				TourismNewAccoAssesmentInfo::setOther);
		attributeGetterFunctions.put(
			"tourismApplicationId",
			TourismNewAccoAssesmentInfo::getTourismApplicationId);
		attributeSetterBiConsumers.put(
			"tourismApplicationId",
			(BiConsumer<TourismNewAccoAssesmentInfo, Long>)
				TourismNewAccoAssesmentInfo::setTourismApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTourismNewAccoAssesmentInfoId() {
		return _TourismNewAccoAssesmentInfoId;
	}

	@Override
	public void setTourismNewAccoAssesmentInfoId(
		long TourismNewAccoAssesmentInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_TourismNewAccoAssesmentInfoId = TourismNewAccoAssesmentInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCountryOrigin() {
		if (_countryOrigin == null) {
			return "";
		}
		else {
			return _countryOrigin;
		}
	}

	@Override
	public void setCountryOrigin(String countryOrigin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countryOrigin = countryOrigin;
	}

	@JSON
	@Override
	public String getJointVenture() {
		if (_jointVenture == null) {
			return "";
		}
		else {
			return _jointVenture;
		}
	}

	@Override
	public void setJointVenture(String jointVenture) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jointVenture = jointVenture;
	}

	@JSON
	@Override
	public String getLocalPer() {
		if (_localPer == null) {
			return "";
		}
		else {
			return _localPer;
		}
	}

	@Override
	public void setLocalPer(String localPer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localPer = localPer;
	}

	@JSON
	@Override
	public String getForeignPer() {
		if (_foreignPer == null) {
			return "";
		}
		else {
			return _foreignPer;
		}
	}

	@Override
	public void setForeignPer(String foreignPer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foreignPer = foreignPer;
	}

	@JSON
	@Override
	public String getCapitalInvest() {
		if (_capitalInvest == null) {
			return "";
		}
		else {
			return _capitalInvest;
		}
	}

	@Override
	public void setCapitalInvest(String capitalInvest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capitalInvest = capitalInvest;
	}

	@JSON
	@Override
	public String getSourceAttach() {
		if (_sourceAttach == null) {
			return "";
		}
		else {
			return _sourceAttach;
		}
	}

	@Override
	public void setSourceAttach(String sourceAttach) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourceAttach = sourceAttach;
	}

	@JSON
	@Override
	public String getShareCapital() {
		if (_shareCapital == null) {
			return "";
		}
		else {
			return _shareCapital;
		}
	}

	@Override
	public void setShareCapital(String shareCapital) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shareCapital = shareCapital;
	}

	@JSON
	@Override
	public String getLoanCapital() {
		if (_loanCapital == null) {
			return "";
		}
		else {
			return _loanCapital;
		}
	}

	@Override
	public void setLoanCapital(String loanCapital) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loanCapital = loanCapital;
	}

	@JSON
	@Override
	public String getOther() {
		if (_other == null) {
			return "";
		}
		else {
			return _other;
		}
	}

	@Override
	public void setOther(String other) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_other = other;
	}

	@JSON
	@Override
	public long getTourismApplicationId() {
		return _tourismApplicationId;
	}

	@Override
	public void setTourismApplicationId(long tourismApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismApplicationId = tourismApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTourismApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismNewAccoAssesmentInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismNewAccoAssesmentInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismNewAccoAssesmentInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismNewAccoAssesmentInfoImpl tourismNewAccoAssesmentInfoImpl =
			new TourismNewAccoAssesmentInfoImpl();

		tourismNewAccoAssesmentInfoImpl.setTourismNewAccoAssesmentInfoId(
			getTourismNewAccoAssesmentInfoId());
		tourismNewAccoAssesmentInfoImpl.setGroupId(getGroupId());
		tourismNewAccoAssesmentInfoImpl.setCompanyId(getCompanyId());
		tourismNewAccoAssesmentInfoImpl.setUserId(getUserId());
		tourismNewAccoAssesmentInfoImpl.setUserName(getUserName());
		tourismNewAccoAssesmentInfoImpl.setCreateDate(getCreateDate());
		tourismNewAccoAssesmentInfoImpl.setModifiedDate(getModifiedDate());
		tourismNewAccoAssesmentInfoImpl.setCountryOrigin(getCountryOrigin());
		tourismNewAccoAssesmentInfoImpl.setJointVenture(getJointVenture());
		tourismNewAccoAssesmentInfoImpl.setLocalPer(getLocalPer());
		tourismNewAccoAssesmentInfoImpl.setForeignPer(getForeignPer());
		tourismNewAccoAssesmentInfoImpl.setCapitalInvest(getCapitalInvest());
		tourismNewAccoAssesmentInfoImpl.setSourceAttach(getSourceAttach());
		tourismNewAccoAssesmentInfoImpl.setShareCapital(getShareCapital());
		tourismNewAccoAssesmentInfoImpl.setLoanCapital(getLoanCapital());
		tourismNewAccoAssesmentInfoImpl.setOther(getOther());
		tourismNewAccoAssesmentInfoImpl.setTourismApplicationId(
			getTourismApplicationId());

		tourismNewAccoAssesmentInfoImpl.resetOriginalValues();

		return tourismNewAccoAssesmentInfoImpl;
	}

	@Override
	public TourismNewAccoAssesmentInfo cloneWithOriginalValues() {
		TourismNewAccoAssesmentInfoImpl tourismNewAccoAssesmentInfoImpl =
			new TourismNewAccoAssesmentInfoImpl();

		tourismNewAccoAssesmentInfoImpl.setTourismNewAccoAssesmentInfoId(
			this.<Long>getColumnOriginalValue("TourismNewAccoAssesmentInfoId"));
		tourismNewAccoAssesmentInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismNewAccoAssesmentInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismNewAccoAssesmentInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismNewAccoAssesmentInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismNewAccoAssesmentInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismNewAccoAssesmentInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismNewAccoAssesmentInfoImpl.setCountryOrigin(
			this.<String>getColumnOriginalValue("countryOrigin"));
		tourismNewAccoAssesmentInfoImpl.setJointVenture(
			this.<String>getColumnOriginalValue("jointVenture"));
		tourismNewAccoAssesmentInfoImpl.setLocalPer(
			this.<String>getColumnOriginalValue("localPer"));
		tourismNewAccoAssesmentInfoImpl.setForeignPer(
			this.<String>getColumnOriginalValue("foreignPer"));
		tourismNewAccoAssesmentInfoImpl.setCapitalInvest(
			this.<String>getColumnOriginalValue("capitalInvest"));
		tourismNewAccoAssesmentInfoImpl.setSourceAttach(
			this.<String>getColumnOriginalValue("sourceAttach"));
		tourismNewAccoAssesmentInfoImpl.setShareCapital(
			this.<String>getColumnOriginalValue("shareCapital"));
		tourismNewAccoAssesmentInfoImpl.setLoanCapital(
			this.<String>getColumnOriginalValue("loanCapital"));
		tourismNewAccoAssesmentInfoImpl.setOther(
			this.<String>getColumnOriginalValue("other"));
		tourismNewAccoAssesmentInfoImpl.setTourismApplicationId(
			this.<Long>getColumnOriginalValue("tourismApplicationId"));

		return tourismNewAccoAssesmentInfoImpl;
	}

	@Override
	public int compareTo(
		TourismNewAccoAssesmentInfo tourismNewAccoAssesmentInfo) {

		long primaryKey = tourismNewAccoAssesmentInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismNewAccoAssesmentInfo)) {
			return false;
		}

		TourismNewAccoAssesmentInfo tourismNewAccoAssesmentInfo =
			(TourismNewAccoAssesmentInfo)object;

		long primaryKey = tourismNewAccoAssesmentInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismNewAccoAssesmentInfo> toCacheModel() {
		TourismNewAccoAssesmentInfoCacheModel
			tourismNewAccoAssesmentInfoCacheModel =
				new TourismNewAccoAssesmentInfoCacheModel();

		tourismNewAccoAssesmentInfoCacheModel.TourismNewAccoAssesmentInfoId =
			getTourismNewAccoAssesmentInfoId();

		tourismNewAccoAssesmentInfoCacheModel.groupId = getGroupId();

		tourismNewAccoAssesmentInfoCacheModel.companyId = getCompanyId();

		tourismNewAccoAssesmentInfoCacheModel.userId = getUserId();

		tourismNewAccoAssesmentInfoCacheModel.userName = getUserName();

		String userName = tourismNewAccoAssesmentInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismNewAccoAssesmentInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			tourismNewAccoAssesmentInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismNewAccoAssesmentInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			tourismNewAccoAssesmentInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tourismNewAccoAssesmentInfoCacheModel.countryOrigin =
			getCountryOrigin();

		String countryOrigin =
			tourismNewAccoAssesmentInfoCacheModel.countryOrigin;

		if ((countryOrigin != null) && (countryOrigin.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.countryOrigin = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.jointVenture = getJointVenture();

		String jointVenture =
			tourismNewAccoAssesmentInfoCacheModel.jointVenture;

		if ((jointVenture != null) && (jointVenture.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.jointVenture = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.localPer = getLocalPer();

		String localPer = tourismNewAccoAssesmentInfoCacheModel.localPer;

		if ((localPer != null) && (localPer.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.localPer = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.foreignPer = getForeignPer();

		String foreignPer = tourismNewAccoAssesmentInfoCacheModel.foreignPer;

		if ((foreignPer != null) && (foreignPer.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.foreignPer = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.capitalInvest =
			getCapitalInvest();

		String capitalInvest =
			tourismNewAccoAssesmentInfoCacheModel.capitalInvest;

		if ((capitalInvest != null) && (capitalInvest.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.capitalInvest = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.sourceAttach = getSourceAttach();

		String sourceAttach =
			tourismNewAccoAssesmentInfoCacheModel.sourceAttach;

		if ((sourceAttach != null) && (sourceAttach.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.sourceAttach = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.shareCapital = getShareCapital();

		String shareCapital =
			tourismNewAccoAssesmentInfoCacheModel.shareCapital;

		if ((shareCapital != null) && (shareCapital.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.shareCapital = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.loanCapital = getLoanCapital();

		String loanCapital = tourismNewAccoAssesmentInfoCacheModel.loanCapital;

		if ((loanCapital != null) && (loanCapital.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.loanCapital = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.other = getOther();

		String other = tourismNewAccoAssesmentInfoCacheModel.other;

		if ((other != null) && (other.length() == 0)) {
			tourismNewAccoAssesmentInfoCacheModel.other = null;
		}

		tourismNewAccoAssesmentInfoCacheModel.tourismApplicationId =
			getTourismApplicationId();

		return tourismNewAccoAssesmentInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismNewAccoAssesmentInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TourismNewAccoAssesmentInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismNewAccoAssesmentInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TourismNewAccoAssesmentInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	
	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, TourismNewAccoAssesmentInfo>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _TourismNewAccoAssesmentInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _countryOrigin;
	private String _jointVenture;
	private String _localPer;
	private String _foreignPer;
	private String _capitalInvest;
	private String _sourceAttach;
	private String _shareCapital;
	private String _loanCapital;
	private String _other;
	private long _tourismApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<TourismNewAccoAssesmentInfo, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismNewAccoAssesmentInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"TourismNewAccoAssesmentInfoId", _TourismNewAccoAssesmentInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("countryOrigin", _countryOrigin);
		_columnOriginalValues.put("jointVenture", _jointVenture);
		_columnOriginalValues.put("localPer", _localPer);
		_columnOriginalValues.put("foreignPer", _foreignPer);
		_columnOriginalValues.put("capitalInvest", _capitalInvest);
		_columnOriginalValues.put("sourceAttach", _sourceAttach);
		_columnOriginalValues.put("shareCapital", _shareCapital);
		_columnOriginalValues.put("loanCapital", _loanCapital);
		_columnOriginalValues.put("other", _other);
		_columnOriginalValues.put(
			"tourismApplicationId", _tourismApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("TourismNewAccoAssesmentInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("countryOrigin", 128L);

		columnBitmasks.put("jointVenture", 256L);

		columnBitmasks.put("localPer", 512L);

		columnBitmasks.put("foreignPer", 1024L);

		columnBitmasks.put("capitalInvest", 2048L);

		columnBitmasks.put("sourceAttach", 4096L);

		columnBitmasks.put("shareCapital", 8192L);

		columnBitmasks.put("loanCapital", 16384L);

		columnBitmasks.put("other", 32768L);

		columnBitmasks.put("tourismApplicationId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismNewAccoAssesmentInfo _escapedModel;

}