/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.healthcare.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.healthcare.application.form.service.model.HealthcareEquipHeadingList;
import com.nbp.healthcare.application.form.service.model.HealthcareEquipHeadingListModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HealthcareEquipHeadingList service. Represents a row in the &quot;nbp_health_equip_heading_list&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HealthcareEquipHeadingListModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HealthcareEquipHeadingListImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HealthcareEquipHeadingListImpl
 * @generated
 */
@JSON(strict = true)
public class HealthcareEquipHeadingListModelImpl
	extends BaseModelImpl<HealthcareEquipHeadingList>
	implements HealthcareEquipHeadingListModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a healthcare equip heading list model instance should use the <code>HealthcareEquipHeadingList</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_health_equip_heading_list";

	public static final Object[][] TABLE_COLUMNS = {
		{"healthcareEquipHeadingListId", Types.BIGINT},
		{"healthcareDescription", Types.VARCHAR},
		{"healthcareHsHeading", Types.VARCHAR},
		{"healthcareSubHeading", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("healthcareEquipHeadingListId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("healthcareDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("healthcareHsHeading", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("healthcareSubHeading", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_health_equip_heading_list (healthcareEquipHeadingListId LONG not null primary key,healthcareDescription VARCHAR(1000) null,healthcareHsHeading VARCHAR(75) null,healthcareSubHeading VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_health_equip_heading_list";

	public static final String ORDER_BY_JPQL =
		" ORDER BY healthcareEquipHeadingList.healthcareEquipHeadingListId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_health_equip_heading_list.healthcareEquipHeadingListId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HEALTHCAREDESCRIPTION_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HEALTHCAREEQUIPHEADINGLISTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HealthcareEquipHeadingListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _healthcareEquipHeadingListId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHealthcareEquipHeadingListId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _healthcareEquipHeadingListId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HealthcareEquipHeadingList.class;
	}

	@Override
	public String getModelClassName() {
		return HealthcareEquipHeadingList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HealthcareEquipHeadingList, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HealthcareEquipHeadingList, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HealthcareEquipHeadingList, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(HealthcareEquipHeadingList)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HealthcareEquipHeadingList, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HealthcareEquipHeadingList, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HealthcareEquipHeadingList)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HealthcareEquipHeadingList, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HealthcareEquipHeadingList, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<HealthcareEquipHeadingList, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<HealthcareEquipHeadingList, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<HealthcareEquipHeadingList, Object>>();

			attributeGetterFunctions.put(
				"healthcareEquipHeadingListId",
				HealthcareEquipHeadingList::getHealthcareEquipHeadingListId);
			attributeGetterFunctions.put(
				"healthcareDescription",
				HealthcareEquipHeadingList::getHealthcareDescription);
			attributeGetterFunctions.put(
				"healthcareHsHeading",
				HealthcareEquipHeadingList::getHealthcareHsHeading);
			attributeGetterFunctions.put(
				"healthcareSubHeading",
				HealthcareEquipHeadingList::getHealthcareSubHeading);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<HealthcareEquipHeadingList, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<HealthcareEquipHeadingList, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<HealthcareEquipHeadingList, ?>>();

			attributeSetterBiConsumers.put(
				"healthcareEquipHeadingListId",
				(BiConsumer<HealthcareEquipHeadingList, Long>)
					HealthcareEquipHeadingList::
						setHealthcareEquipHeadingListId);
			attributeSetterBiConsumers.put(
				"healthcareDescription",
				(BiConsumer<HealthcareEquipHeadingList, String>)
					HealthcareEquipHeadingList::setHealthcareDescription);
			attributeSetterBiConsumers.put(
				"healthcareHsHeading",
				(BiConsumer<HealthcareEquipHeadingList, String>)
					HealthcareEquipHeadingList::setHealthcareHsHeading);
			attributeSetterBiConsumers.put(
				"healthcareSubHeading",
				(BiConsumer<HealthcareEquipHeadingList, String>)
					HealthcareEquipHeadingList::setHealthcareSubHeading);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getHealthcareEquipHeadingListId() {
		return _healthcareEquipHeadingListId;
	}

	@Override
	public void setHealthcareEquipHeadingListId(
		long healthcareEquipHeadingListId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthcareEquipHeadingListId = healthcareEquipHeadingListId;
	}

	@JSON
	@Override
	public String getHealthcareDescription() {
		if (_healthcareDescription == null) {
			return "";
		}
		else {
			return _healthcareDescription;
		}
	}

	@Override
	public void setHealthcareDescription(String healthcareDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthcareDescription = healthcareDescription;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalHealthcareDescription() {
		return getColumnOriginalValue("healthcareDescription");
	}

	@JSON
	@Override
	public String getHealthcareHsHeading() {
		if (_healthcareHsHeading == null) {
			return "";
		}
		else {
			return _healthcareHsHeading;
		}
	}

	@Override
	public void setHealthcareHsHeading(String healthcareHsHeading) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthcareHsHeading = healthcareHsHeading;
	}

	@JSON
	@Override
	public String getHealthcareSubHeading() {
		if (_healthcareSubHeading == null) {
			return "";
		}
		else {
			return _healthcareSubHeading;
		}
	}

	@Override
	public void setHealthcareSubHeading(String healthcareSubHeading) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthcareSubHeading = healthcareSubHeading;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, HealthcareEquipHeadingList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HealthcareEquipHeadingList toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HealthcareEquipHeadingList>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HealthcareEquipHeadingListImpl healthcareEquipHeadingListImpl =
			new HealthcareEquipHeadingListImpl();

		healthcareEquipHeadingListImpl.setHealthcareEquipHeadingListId(
			getHealthcareEquipHeadingListId());
		healthcareEquipHeadingListImpl.setHealthcareDescription(
			getHealthcareDescription());
		healthcareEquipHeadingListImpl.setHealthcareHsHeading(
			getHealthcareHsHeading());
		healthcareEquipHeadingListImpl.setHealthcareSubHeading(
			getHealthcareSubHeading());

		healthcareEquipHeadingListImpl.resetOriginalValues();

		return healthcareEquipHeadingListImpl;
	}

	@Override
	public HealthcareEquipHeadingList cloneWithOriginalValues() {
		HealthcareEquipHeadingListImpl healthcareEquipHeadingListImpl =
			new HealthcareEquipHeadingListImpl();

		healthcareEquipHeadingListImpl.setHealthcareEquipHeadingListId(
			this.<Long>getColumnOriginalValue("healthcareEquipHeadingListId"));
		healthcareEquipHeadingListImpl.setHealthcareDescription(
			this.<String>getColumnOriginalValue("healthcareDescription"));
		healthcareEquipHeadingListImpl.setHealthcareHsHeading(
			this.<String>getColumnOriginalValue("healthcareHsHeading"));
		healthcareEquipHeadingListImpl.setHealthcareSubHeading(
			this.<String>getColumnOriginalValue("healthcareSubHeading"));

		return healthcareEquipHeadingListImpl;
	}

	@Override
	public int compareTo(
		HealthcareEquipHeadingList healthcareEquipHeadingList) {

		long primaryKey = healthcareEquipHeadingList.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof HealthcareEquipHeadingList)) {
			return false;
		}

		HealthcareEquipHeadingList healthcareEquipHeadingList =
			(HealthcareEquipHeadingList)object;

		long primaryKey = healthcareEquipHeadingList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<HealthcareEquipHeadingList> toCacheModel() {
		HealthcareEquipHeadingListCacheModel
			healthcareEquipHeadingListCacheModel =
				new HealthcareEquipHeadingListCacheModel();

		healthcareEquipHeadingListCacheModel.healthcareEquipHeadingListId =
			getHealthcareEquipHeadingListId();

		healthcareEquipHeadingListCacheModel.healthcareDescription =
			getHealthcareDescription();

		String healthcareDescription =
			healthcareEquipHeadingListCacheModel.healthcareDescription;

		if ((healthcareDescription != null) &&
			(healthcareDescription.length() == 0)) {

			healthcareEquipHeadingListCacheModel.healthcareDescription = null;
		}

		healthcareEquipHeadingListCacheModel.healthcareHsHeading =
			getHealthcareHsHeading();

		String healthcareHsHeading =
			healthcareEquipHeadingListCacheModel.healthcareHsHeading;

		if ((healthcareHsHeading != null) &&
			(healthcareHsHeading.length() == 0)) {

			healthcareEquipHeadingListCacheModel.healthcareHsHeading = null;
		}

		healthcareEquipHeadingListCacheModel.healthcareSubHeading =
			getHealthcareSubHeading();

		String healthcareSubHeading =
			healthcareEquipHeadingListCacheModel.healthcareSubHeading;

		if ((healthcareSubHeading != null) &&
			(healthcareSubHeading.length() == 0)) {

			healthcareEquipHeadingListCacheModel.healthcareSubHeading = null;
		}

		return healthcareEquipHeadingListCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HealthcareEquipHeadingList, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HealthcareEquipHeadingList, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HealthcareEquipHeadingList, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(HealthcareEquipHeadingList)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, HealthcareEquipHeadingList>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						HealthcareEquipHeadingList.class, ModelWrapper.class);

	}

	private long _healthcareEquipHeadingListId;
	private String _healthcareDescription;
	private String _healthcareHsHeading;
	private String _healthcareSubHeading;

	public <T> T getColumnValue(String columnName) {
		Function<HealthcareEquipHeadingList, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((HealthcareEquipHeadingList)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"healthcareEquipHeadingListId", _healthcareEquipHeadingListId);
		_columnOriginalValues.put(
			"healthcareDescription", _healthcareDescription);
		_columnOriginalValues.put("healthcareHsHeading", _healthcareHsHeading);
		_columnOriginalValues.put(
			"healthcareSubHeading", _healthcareSubHeading);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("healthcareEquipHeadingListId", 1L);

		columnBitmasks.put("healthcareDescription", 2L);

		columnBitmasks.put("healthcareHsHeading", 4L);

		columnBitmasks.put("healthcareSubHeading", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private HealthcareEquipHeadingList _escapedModel;

}