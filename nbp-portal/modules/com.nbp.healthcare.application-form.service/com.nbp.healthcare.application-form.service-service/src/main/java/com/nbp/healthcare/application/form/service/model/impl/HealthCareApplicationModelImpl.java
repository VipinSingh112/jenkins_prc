/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.healthcare.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.healthcare.application.form.service.model.HealthCareApplication;
import com.nbp.healthcare.application.form.service.model.HealthCareApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HealthCareApplication service. Represents a row in the &quot;nbp_healthcare_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HealthCareApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HealthCareApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HealthCareApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class HealthCareApplicationModelImpl
	extends BaseModelImpl<HealthCareApplication>
	implements HealthCareApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a health care application model instance should use the <code>HealthCareApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_healthcare_application";

	public static final Object[][] TABLE_COLUMNS = {
		{"healthCareApplicationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"entityId", Types.VARCHAR},
		{"healthCareFacility", Types.VARCHAR},
		{"healthCareRegistrationNum", Types.VARCHAR}, {"status", Types.INTEGER},
		{"applicationNumber", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"icmDocumentPath", Types.VARCHAR}, {"pdfFileEntryId", Types.BIGINT},
		{"appCurrentStageName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("healthCareApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("healthCareFacility", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("healthCareRegistrationNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_healthcare_application (healthCareApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityId VARCHAR(75) null,healthCareFacility VARCHAR(75) null,healthCareRegistrationNum VARCHAR(75) null,status INTEGER,applicationNumber VARCHAR(75) null,caseId VARCHAR(500) null,icmDocumentPath VARCHAR(500) null,pdfFileEntryId LONG,appCurrentStageName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_healthcare_application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY healthCareApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_healthcare_application.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HEALTHCAREAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HealthCareApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _healthCareApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHealthCareApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _healthCareApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HealthCareApplication.class;
	}

	@Override
	public String getModelClassName() {
		return HealthCareApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HealthCareApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HealthCareApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HealthCareApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((HealthCareApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HealthCareApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HealthCareApplication, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HealthCareApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HealthCareApplication, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HealthCareApplication, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<HealthCareApplication, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<HealthCareApplication, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<HealthCareApplication, Object>>();

			attributeGetterFunctions.put(
				"healthCareApplicationId",
				HealthCareApplication::getHealthCareApplicationId);
			attributeGetterFunctions.put(
				"groupId", HealthCareApplication::getGroupId);
			attributeGetterFunctions.put(
				"companyId", HealthCareApplication::getCompanyId);
			attributeGetterFunctions.put(
				"userId", HealthCareApplication::getUserId);
			attributeGetterFunctions.put(
				"userName", HealthCareApplication::getUserName);
			attributeGetterFunctions.put(
				"createDate", HealthCareApplication::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", HealthCareApplication::getModifiedDate);
			attributeGetterFunctions.put(
				"entityId", HealthCareApplication::getEntityId);
			attributeGetterFunctions.put(
				"healthCareFacility",
				HealthCareApplication::getHealthCareFacility);
			attributeGetterFunctions.put(
				"healthCareRegistrationNum",
				HealthCareApplication::getHealthCareRegistrationNum);
			attributeGetterFunctions.put(
				"status", HealthCareApplication::getStatus);
			attributeGetterFunctions.put(
				"applicationNumber",
				HealthCareApplication::getApplicationNumber);
			attributeGetterFunctions.put(
				"caseId", HealthCareApplication::getCaseId);
			attributeGetterFunctions.put(
				"icmDocumentPath", HealthCareApplication::getIcmDocumentPath);
			attributeGetterFunctions.put(
				"pdfFileEntryId", HealthCareApplication::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"appCurrentStageName",
				HealthCareApplication::getAppCurrentStageName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<HealthCareApplication, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<HealthCareApplication, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<HealthCareApplication, ?>>();

			attributeSetterBiConsumers.put(
				"healthCareApplicationId",
				(BiConsumer<HealthCareApplication, Long>)
					HealthCareApplication::setHealthCareApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<HealthCareApplication, Long>)
					HealthCareApplication::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<HealthCareApplication, Long>)
					HealthCareApplication::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<HealthCareApplication, Long>)
					HealthCareApplication::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<HealthCareApplication, String>)
					HealthCareApplication::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<HealthCareApplication, Date>)
					HealthCareApplication::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<HealthCareApplication, Date>)
					HealthCareApplication::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<HealthCareApplication, String>)
					HealthCareApplication::setEntityId);
			attributeSetterBiConsumers.put(
				"healthCareFacility",
				(BiConsumer<HealthCareApplication, String>)
					HealthCareApplication::setHealthCareFacility);
			attributeSetterBiConsumers.put(
				"healthCareRegistrationNum",
				(BiConsumer<HealthCareApplication, String>)
					HealthCareApplication::setHealthCareRegistrationNum);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<HealthCareApplication, Integer>)
					HealthCareApplication::setStatus);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<HealthCareApplication, String>)
					HealthCareApplication::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<HealthCareApplication, String>)
					HealthCareApplication::setCaseId);
			attributeSetterBiConsumers.put(
				"icmDocumentPath",
				(BiConsumer<HealthCareApplication, String>)
					HealthCareApplication::setIcmDocumentPath);
			attributeSetterBiConsumers.put(
				"pdfFileEntryId",
				(BiConsumer<HealthCareApplication, Long>)
					HealthCareApplication::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<HealthCareApplication, String>)
					HealthCareApplication::setAppCurrentStageName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getHealthCareApplicationId() {
		return _healthCareApplicationId;
	}

	@Override
	public void setHealthCareApplicationId(long healthCareApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthCareApplicationId = healthCareApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHealthCareApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("healthCareApplicationId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	@JSON
	@Override
	public String getHealthCareFacility() {
		if (_healthCareFacility == null) {
			return "";
		}
		else {
			return _healthCareFacility;
		}
	}

	@Override
	public void setHealthCareFacility(String healthCareFacility) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthCareFacility = healthCareFacility;
	}

	@JSON
	@Override
	public String getHealthCareRegistrationNum() {
		if (_healthCareRegistrationNum == null) {
			return "";
		}
		else {
			return _healthCareRegistrationNum;
		}
	}

	@Override
	public void setHealthCareRegistrationNum(String healthCareRegistrationNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthCareRegistrationNum = healthCareRegistrationNum;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getIcmDocumentPath() {
		if (_icmDocumentPath == null) {
			return "";
		}
		else {
			return _icmDocumentPath;
		}
	}

	@Override
	public void setIcmDocumentPath(String icmDocumentPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentPath = icmDocumentPath;
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _pdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long pdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pdfFileEntryId = pdfFileEntryId;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), HealthCareApplication.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HealthCareApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HealthCareApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HealthCareApplicationImpl healthCareApplicationImpl =
			new HealthCareApplicationImpl();

		healthCareApplicationImpl.setHealthCareApplicationId(
			getHealthCareApplicationId());
		healthCareApplicationImpl.setGroupId(getGroupId());
		healthCareApplicationImpl.setCompanyId(getCompanyId());
		healthCareApplicationImpl.setUserId(getUserId());
		healthCareApplicationImpl.setUserName(getUserName());
		healthCareApplicationImpl.setCreateDate(getCreateDate());
		healthCareApplicationImpl.setModifiedDate(getModifiedDate());
		healthCareApplicationImpl.setEntityId(getEntityId());
		healthCareApplicationImpl.setHealthCareFacility(
			getHealthCareFacility());
		healthCareApplicationImpl.setHealthCareRegistrationNum(
			getHealthCareRegistrationNum());
		healthCareApplicationImpl.setStatus(getStatus());
		healthCareApplicationImpl.setApplicationNumber(getApplicationNumber());
		healthCareApplicationImpl.setCaseId(getCaseId());
		healthCareApplicationImpl.setIcmDocumentPath(getIcmDocumentPath());
		healthCareApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		healthCareApplicationImpl.setAppCurrentStageName(
			getAppCurrentStageName());

		healthCareApplicationImpl.resetOriginalValues();

		return healthCareApplicationImpl;
	}

	@Override
	public HealthCareApplication cloneWithOriginalValues() {
		HealthCareApplicationImpl healthCareApplicationImpl =
			new HealthCareApplicationImpl();

		healthCareApplicationImpl.setHealthCareApplicationId(
			this.<Long>getColumnOriginalValue("healthCareApplicationId"));
		healthCareApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		healthCareApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		healthCareApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		healthCareApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		healthCareApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		healthCareApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		healthCareApplicationImpl.setEntityId(
			this.<String>getColumnOriginalValue("entityId"));
		healthCareApplicationImpl.setHealthCareFacility(
			this.<String>getColumnOriginalValue("healthCareFacility"));
		healthCareApplicationImpl.setHealthCareRegistrationNum(
			this.<String>getColumnOriginalValue("healthCareRegistrationNum"));
		healthCareApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		healthCareApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		healthCareApplicationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		healthCareApplicationImpl.setIcmDocumentPath(
			this.<String>getColumnOriginalValue("icmDocumentPath"));
		healthCareApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("pdfFileEntryId"));
		healthCareApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));

		return healthCareApplicationImpl;
	}

	@Override
	public int compareTo(HealthCareApplication healthCareApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), healthCareApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof HealthCareApplication)) {
			return false;
		}

		HealthCareApplication healthCareApplication =
			(HealthCareApplication)object;

		long primaryKey = healthCareApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<HealthCareApplication> toCacheModel() {
		HealthCareApplicationCacheModel healthCareApplicationCacheModel =
			new HealthCareApplicationCacheModel();

		healthCareApplicationCacheModel.healthCareApplicationId =
			getHealthCareApplicationId();

		healthCareApplicationCacheModel.groupId = getGroupId();

		healthCareApplicationCacheModel.companyId = getCompanyId();

		healthCareApplicationCacheModel.userId = getUserId();

		healthCareApplicationCacheModel.userName = getUserName();

		String userName = healthCareApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			healthCareApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			healthCareApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			healthCareApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			healthCareApplicationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			healthCareApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		healthCareApplicationCacheModel.entityId = getEntityId();

		String entityId = healthCareApplicationCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			healthCareApplicationCacheModel.entityId = null;
		}

		healthCareApplicationCacheModel.healthCareFacility =
			getHealthCareFacility();

		String healthCareFacility =
			healthCareApplicationCacheModel.healthCareFacility;

		if ((healthCareFacility != null) &&
			(healthCareFacility.length() == 0)) {

			healthCareApplicationCacheModel.healthCareFacility = null;
		}

		healthCareApplicationCacheModel.healthCareRegistrationNum =
			getHealthCareRegistrationNum();

		String healthCareRegistrationNum =
			healthCareApplicationCacheModel.healthCareRegistrationNum;

		if ((healthCareRegistrationNum != null) &&
			(healthCareRegistrationNum.length() == 0)) {

			healthCareApplicationCacheModel.healthCareRegistrationNum = null;
		}

		healthCareApplicationCacheModel.status = getStatus();

		healthCareApplicationCacheModel.applicationNumber =
			getApplicationNumber();

		String applicationNumber =
			healthCareApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			healthCareApplicationCacheModel.applicationNumber = null;
		}

		healthCareApplicationCacheModel.caseId = getCaseId();

		String caseId = healthCareApplicationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			healthCareApplicationCacheModel.caseId = null;
		}

		healthCareApplicationCacheModel.icmDocumentPath = getIcmDocumentPath();

		String icmDocumentPath =
			healthCareApplicationCacheModel.icmDocumentPath;

		if ((icmDocumentPath != null) && (icmDocumentPath.length() == 0)) {
			healthCareApplicationCacheModel.icmDocumentPath = null;
		}

		healthCareApplicationCacheModel.pdfFileEntryId = getPdfFileEntryId();

		healthCareApplicationCacheModel.appCurrentStageName =
			getAppCurrentStageName();

		String appCurrentStageName =
			healthCareApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			healthCareApplicationCacheModel.appCurrentStageName = null;
		}

		return healthCareApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HealthCareApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HealthCareApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HealthCareApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(HealthCareApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, HealthCareApplication>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					HealthCareApplication.class, ModelWrapper.class);

	}

	private long _healthCareApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityId;
	private String _healthCareFacility;
	private String _healthCareRegistrationNum;
	private int _status;
	private String _applicationNumber;
	private String _caseId;
	private String _icmDocumentPath;
	private long _pdfFileEntryId;
	private String _appCurrentStageName;

	public <T> T getColumnValue(String columnName) {
		Function<HealthCareApplication, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((HealthCareApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"healthCareApplicationId", _healthCareApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("healthCareFacility", _healthCareFacility);
		_columnOriginalValues.put(
			"healthCareRegistrationNum", _healthCareRegistrationNum);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("icmDocumentPath", _icmDocumentPath);
		_columnOriginalValues.put("pdfFileEntryId", _pdfFileEntryId);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("healthCareApplicationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("entityId", 128L);

		columnBitmasks.put("healthCareFacility", 256L);

		columnBitmasks.put("healthCareRegistrationNum", 512L);

		columnBitmasks.put("status", 1024L);

		columnBitmasks.put("applicationNumber", 2048L);

		columnBitmasks.put("caseId", 4096L);

		columnBitmasks.put("icmDocumentPath", 8192L);

		columnBitmasks.put("pdfFileEntryId", 16384L);

		columnBitmasks.put("appCurrentStageName", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private HealthCareApplication _escapedModel;

}