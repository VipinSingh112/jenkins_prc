/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.healthcare.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.healthcare.application.form.service.model.HealthCareEquipmentInfo;
import com.nbp.healthcare.application.form.service.model.HealthCareEquipmentInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HealthCareEquipmentInfo service. Represents a row in the &quot;nbp_healthcare_equipment_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HealthCareEquipmentInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HealthCareEquipmentInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HealthCareEquipmentInfoImpl
 * @generated
 */
@JSON(strict = true)
public class HealthCareEquipmentInfoModelImpl
	extends BaseModelImpl<HealthCareEquipmentInfo>
	implements HealthCareEquipmentInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a health care equipment info model instance should use the <code>HealthCareEquipmentInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_healthcare_equipment_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"healthCareEquipmentInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"healthCareApplicationId", Types.BIGINT},
		{"equipmentManu", Types.VARCHAR}, {"equipmentModel", Types.VARCHAR},
		{"equipmentMake", Types.VARCHAR}, {"yearOfEquipment", Types.VARCHAR},
		{"serialNumber", Types.VARCHAR}, {"quantity", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"hsHeading", Types.VARCHAR},
		{"hsSubHeading", Types.VARCHAR}, {"counter", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("healthCareEquipmentInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("healthCareApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("equipmentManu", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentModel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentMake", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("yearOfEquipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serialNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsHeading", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsSubHeading", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_healthcare_equipment_info (healthCareEquipmentInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,healthCareApplicationId LONG,equipmentManu VARCHAR(75) null,equipmentModel VARCHAR(75) null,equipmentMake VARCHAR(75) null,yearOfEquipment VARCHAR(75) null,serialNumber VARCHAR(75) null,quantity VARCHAR(75) null,description VARCHAR(500) null,hsHeading VARCHAR(75) null,hsSubHeading VARCHAR(75) null,counter VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_healthcare_equipment_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY healthCareEquipmentInfo.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_healthcare_equipment_info.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HEALTHCAREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HealthCareEquipmentInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _healthCareEquipmentInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHealthCareEquipmentInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _healthCareEquipmentInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HealthCareEquipmentInfo.class;
	}

	@Override
	public String getModelClassName() {
		return HealthCareEquipmentInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HealthCareEquipmentInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HealthCareEquipmentInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HealthCareEquipmentInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((HealthCareEquipmentInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HealthCareEquipmentInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HealthCareEquipmentInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HealthCareEquipmentInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HealthCareEquipmentInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HealthCareEquipmentInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<HealthCareEquipmentInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<HealthCareEquipmentInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<HealthCareEquipmentInfo, Object>>();

			attributeGetterFunctions.put(
				"healthCareEquipmentInfoId",
				HealthCareEquipmentInfo::getHealthCareEquipmentInfoId);
			attributeGetterFunctions.put(
				"groupId", HealthCareEquipmentInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", HealthCareEquipmentInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", HealthCareEquipmentInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", HealthCareEquipmentInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", HealthCareEquipmentInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", HealthCareEquipmentInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"healthCareApplicationId",
				HealthCareEquipmentInfo::getHealthCareApplicationId);
			attributeGetterFunctions.put(
				"equipmentManu", HealthCareEquipmentInfo::getEquipmentManu);
			attributeGetterFunctions.put(
				"equipmentModel", HealthCareEquipmentInfo::getEquipmentModel);
			attributeGetterFunctions.put(
				"equipmentMake", HealthCareEquipmentInfo::getEquipmentMake);
			attributeGetterFunctions.put(
				"yearOfEquipment", HealthCareEquipmentInfo::getYearOfEquipment);
			attributeGetterFunctions.put(
				"serialNumber", HealthCareEquipmentInfo::getSerialNumber);
			attributeGetterFunctions.put(
				"quantity", HealthCareEquipmentInfo::getQuantity);
			attributeGetterFunctions.put(
				"description", HealthCareEquipmentInfo::getDescription);
			attributeGetterFunctions.put(
				"hsHeading", HealthCareEquipmentInfo::getHsHeading);
			attributeGetterFunctions.put(
				"hsSubHeading", HealthCareEquipmentInfo::getHsSubHeading);
			attributeGetterFunctions.put(
				"counter", HealthCareEquipmentInfo::getCounter);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<HealthCareEquipmentInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<HealthCareEquipmentInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<HealthCareEquipmentInfo, ?>>();

			attributeSetterBiConsumers.put(
				"healthCareEquipmentInfoId",
				(BiConsumer<HealthCareEquipmentInfo, Long>)
					HealthCareEquipmentInfo::setHealthCareEquipmentInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<HealthCareEquipmentInfo, Long>)
					HealthCareEquipmentInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<HealthCareEquipmentInfo, Long>)
					HealthCareEquipmentInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<HealthCareEquipmentInfo, Long>)
					HealthCareEquipmentInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<HealthCareEquipmentInfo, Date>)
					HealthCareEquipmentInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<HealthCareEquipmentInfo, Date>)
					HealthCareEquipmentInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"healthCareApplicationId",
				(BiConsumer<HealthCareEquipmentInfo, Long>)
					HealthCareEquipmentInfo::setHealthCareApplicationId);
			attributeSetterBiConsumers.put(
				"equipmentManu",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setEquipmentManu);
			attributeSetterBiConsumers.put(
				"equipmentModel",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setEquipmentModel);
			attributeSetterBiConsumers.put(
				"equipmentMake",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setEquipmentMake);
			attributeSetterBiConsumers.put(
				"yearOfEquipment",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setYearOfEquipment);
			attributeSetterBiConsumers.put(
				"serialNumber",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setSerialNumber);
			attributeSetterBiConsumers.put(
				"quantity",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setQuantity);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setDescription);
			attributeSetterBiConsumers.put(
				"hsHeading",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setHsHeading);
			attributeSetterBiConsumers.put(
				"hsSubHeading",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setHsSubHeading);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<HealthCareEquipmentInfo, String>)
					HealthCareEquipmentInfo::setCounter);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getHealthCareEquipmentInfoId() {
		return _healthCareEquipmentInfoId;
	}

	@Override
	public void setHealthCareEquipmentInfoId(long healthCareEquipmentInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthCareEquipmentInfoId = healthCareEquipmentInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getHealthCareApplicationId() {
		return _healthCareApplicationId;
	}

	@Override
	public void setHealthCareApplicationId(long healthCareApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthCareApplicationId = healthCareApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHealthCareApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("healthCareApplicationId"));
	}

	@JSON
	@Override
	public String getEquipmentManu() {
		if (_equipmentManu == null) {
			return "";
		}
		else {
			return _equipmentManu;
		}
	}

	@Override
	public void setEquipmentManu(String equipmentManu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentManu = equipmentManu;
	}

	@JSON
	@Override
	public String getEquipmentModel() {
		if (_equipmentModel == null) {
			return "";
		}
		else {
			return _equipmentModel;
		}
	}

	@Override
	public void setEquipmentModel(String equipmentModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentModel = equipmentModel;
	}

	@JSON
	@Override
	public String getEquipmentMake() {
		if (_equipmentMake == null) {
			return "";
		}
		else {
			return _equipmentMake;
		}
	}

	@Override
	public void setEquipmentMake(String equipmentMake) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentMake = equipmentMake;
	}

	@JSON
	@Override
	public String getYearOfEquipment() {
		if (_yearOfEquipment == null) {
			return "";
		}
		else {
			return _yearOfEquipment;
		}
	}

	@Override
	public void setYearOfEquipment(String yearOfEquipment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_yearOfEquipment = yearOfEquipment;
	}

	@JSON
	@Override
	public String getSerialNumber() {
		if (_serialNumber == null) {
			return "";
		}
		else {
			return _serialNumber;
		}
	}

	@Override
	public void setSerialNumber(String serialNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serialNumber = serialNumber;
	}

	@JSON
	@Override
	public String getQuantity() {
		if (_quantity == null) {
			return "";
		}
		else {
			return _quantity;
		}
	}

	@Override
	public void setQuantity(String quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getHsHeading() {
		if (_hsHeading == null) {
			return "";
		}
		else {
			return _hsHeading;
		}
	}

	@Override
	public void setHsHeading(String hsHeading) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsHeading = hsHeading;
	}

	@JSON
	@Override
	public String getHsSubHeading() {
		if (_hsSubHeading == null) {
			return "";
		}
		else {
			return _hsSubHeading;
		}
	}

	@Override
	public void setHsSubHeading(String hsSubHeading) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsSubHeading = hsSubHeading;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), HealthCareEquipmentInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HealthCareEquipmentInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HealthCareEquipmentInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HealthCareEquipmentInfoImpl healthCareEquipmentInfoImpl =
			new HealthCareEquipmentInfoImpl();

		healthCareEquipmentInfoImpl.setHealthCareEquipmentInfoId(
			getHealthCareEquipmentInfoId());
		healthCareEquipmentInfoImpl.setGroupId(getGroupId());
		healthCareEquipmentInfoImpl.setCompanyId(getCompanyId());
		healthCareEquipmentInfoImpl.setUserId(getUserId());
		healthCareEquipmentInfoImpl.setUserName(getUserName());
		healthCareEquipmentInfoImpl.setCreateDate(getCreateDate());
		healthCareEquipmentInfoImpl.setModifiedDate(getModifiedDate());
		healthCareEquipmentInfoImpl.setHealthCareApplicationId(
			getHealthCareApplicationId());
		healthCareEquipmentInfoImpl.setEquipmentManu(getEquipmentManu());
		healthCareEquipmentInfoImpl.setEquipmentModel(getEquipmentModel());
		healthCareEquipmentInfoImpl.setEquipmentMake(getEquipmentMake());
		healthCareEquipmentInfoImpl.setYearOfEquipment(getYearOfEquipment());
		healthCareEquipmentInfoImpl.setSerialNumber(getSerialNumber());
		healthCareEquipmentInfoImpl.setQuantity(getQuantity());
		healthCareEquipmentInfoImpl.setDescription(getDescription());
		healthCareEquipmentInfoImpl.setHsHeading(getHsHeading());
		healthCareEquipmentInfoImpl.setHsSubHeading(getHsSubHeading());
		healthCareEquipmentInfoImpl.setCounter(getCounter());

		healthCareEquipmentInfoImpl.resetOriginalValues();

		return healthCareEquipmentInfoImpl;
	}

	@Override
	public HealthCareEquipmentInfo cloneWithOriginalValues() {
		HealthCareEquipmentInfoImpl healthCareEquipmentInfoImpl =
			new HealthCareEquipmentInfoImpl();

		healthCareEquipmentInfoImpl.setHealthCareEquipmentInfoId(
			this.<Long>getColumnOriginalValue("healthCareEquipmentInfoId"));
		healthCareEquipmentInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		healthCareEquipmentInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		healthCareEquipmentInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		healthCareEquipmentInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		healthCareEquipmentInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		healthCareEquipmentInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		healthCareEquipmentInfoImpl.setHealthCareApplicationId(
			this.<Long>getColumnOriginalValue("healthCareApplicationId"));
		healthCareEquipmentInfoImpl.setEquipmentManu(
			this.<String>getColumnOriginalValue("equipmentManu"));
		healthCareEquipmentInfoImpl.setEquipmentModel(
			this.<String>getColumnOriginalValue("equipmentModel"));
		healthCareEquipmentInfoImpl.setEquipmentMake(
			this.<String>getColumnOriginalValue("equipmentMake"));
		healthCareEquipmentInfoImpl.setYearOfEquipment(
			this.<String>getColumnOriginalValue("yearOfEquipment"));
		healthCareEquipmentInfoImpl.setSerialNumber(
			this.<String>getColumnOriginalValue("serialNumber"));
		healthCareEquipmentInfoImpl.setQuantity(
			this.<String>getColumnOriginalValue("quantity"));
		healthCareEquipmentInfoImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		healthCareEquipmentInfoImpl.setHsHeading(
			this.<String>getColumnOriginalValue("hsHeading"));
		healthCareEquipmentInfoImpl.setHsSubHeading(
			this.<String>getColumnOriginalValue("hsSubHeading"));
		healthCareEquipmentInfoImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));

		return healthCareEquipmentInfoImpl;
	}

	@Override
	public int compareTo(HealthCareEquipmentInfo healthCareEquipmentInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), healthCareEquipmentInfo.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof HealthCareEquipmentInfo)) {
			return false;
		}

		HealthCareEquipmentInfo healthCareEquipmentInfo =
			(HealthCareEquipmentInfo)object;

		long primaryKey = healthCareEquipmentInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<HealthCareEquipmentInfo> toCacheModel() {
		HealthCareEquipmentInfoCacheModel healthCareEquipmentInfoCacheModel =
			new HealthCareEquipmentInfoCacheModel();

		healthCareEquipmentInfoCacheModel.healthCareEquipmentInfoId =
			getHealthCareEquipmentInfoId();

		healthCareEquipmentInfoCacheModel.groupId = getGroupId();

		healthCareEquipmentInfoCacheModel.companyId = getCompanyId();

		healthCareEquipmentInfoCacheModel.userId = getUserId();

		healthCareEquipmentInfoCacheModel.userName = getUserName();

		String userName = healthCareEquipmentInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			healthCareEquipmentInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			healthCareEquipmentInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			healthCareEquipmentInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			healthCareEquipmentInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			healthCareEquipmentInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		healthCareEquipmentInfoCacheModel.healthCareApplicationId =
			getHealthCareApplicationId();

		healthCareEquipmentInfoCacheModel.equipmentManu = getEquipmentManu();

		String equipmentManu = healthCareEquipmentInfoCacheModel.equipmentManu;

		if ((equipmentManu != null) && (equipmentManu.length() == 0)) {
			healthCareEquipmentInfoCacheModel.equipmentManu = null;
		}

		healthCareEquipmentInfoCacheModel.equipmentModel = getEquipmentModel();

		String equipmentModel =
			healthCareEquipmentInfoCacheModel.equipmentModel;

		if ((equipmentModel != null) && (equipmentModel.length() == 0)) {
			healthCareEquipmentInfoCacheModel.equipmentModel = null;
		}

		healthCareEquipmentInfoCacheModel.equipmentMake = getEquipmentMake();

		String equipmentMake = healthCareEquipmentInfoCacheModel.equipmentMake;

		if ((equipmentMake != null) && (equipmentMake.length() == 0)) {
			healthCareEquipmentInfoCacheModel.equipmentMake = null;
		}

		healthCareEquipmentInfoCacheModel.yearOfEquipment =
			getYearOfEquipment();

		String yearOfEquipment =
			healthCareEquipmentInfoCacheModel.yearOfEquipment;

		if ((yearOfEquipment != null) && (yearOfEquipment.length() == 0)) {
			healthCareEquipmentInfoCacheModel.yearOfEquipment = null;
		}

		healthCareEquipmentInfoCacheModel.serialNumber = getSerialNumber();

		String serialNumber = healthCareEquipmentInfoCacheModel.serialNumber;

		if ((serialNumber != null) && (serialNumber.length() == 0)) {
			healthCareEquipmentInfoCacheModel.serialNumber = null;
		}

		healthCareEquipmentInfoCacheModel.quantity = getQuantity();

		String quantity = healthCareEquipmentInfoCacheModel.quantity;

		if ((quantity != null) && (quantity.length() == 0)) {
			healthCareEquipmentInfoCacheModel.quantity = null;
		}

		healthCareEquipmentInfoCacheModel.description = getDescription();

		String description = healthCareEquipmentInfoCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			healthCareEquipmentInfoCacheModel.description = null;
		}

		healthCareEquipmentInfoCacheModel.hsHeading = getHsHeading();

		String hsHeading = healthCareEquipmentInfoCacheModel.hsHeading;

		if ((hsHeading != null) && (hsHeading.length() == 0)) {
			healthCareEquipmentInfoCacheModel.hsHeading = null;
		}

		healthCareEquipmentInfoCacheModel.hsSubHeading = getHsSubHeading();

		String hsSubHeading = healthCareEquipmentInfoCacheModel.hsSubHeading;

		if ((hsSubHeading != null) && (hsSubHeading.length() == 0)) {
			healthCareEquipmentInfoCacheModel.hsSubHeading = null;
		}

		healthCareEquipmentInfoCacheModel.counter = getCounter();

		String counter = healthCareEquipmentInfoCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			healthCareEquipmentInfoCacheModel.counter = null;
		}

		return healthCareEquipmentInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HealthCareEquipmentInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HealthCareEquipmentInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HealthCareEquipmentInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(HealthCareEquipmentInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, HealthCareEquipmentInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						HealthCareEquipmentInfo.class, ModelWrapper.class);

	}

	private long _healthCareEquipmentInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _healthCareApplicationId;
	private String _equipmentManu;
	private String _equipmentModel;
	private String _equipmentMake;
	private String _yearOfEquipment;
	private String _serialNumber;
	private String _quantity;
	private String _description;
	private String _hsHeading;
	private String _hsSubHeading;
	private String _counter;

	public <T> T getColumnValue(String columnName) {
		Function<HealthCareEquipmentInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((HealthCareEquipmentInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"healthCareEquipmentInfoId", _healthCareEquipmentInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"healthCareApplicationId", _healthCareApplicationId);
		_columnOriginalValues.put("equipmentManu", _equipmentManu);
		_columnOriginalValues.put("equipmentModel", _equipmentModel);
		_columnOriginalValues.put("equipmentMake", _equipmentMake);
		_columnOriginalValues.put("yearOfEquipment", _yearOfEquipment);
		_columnOriginalValues.put("serialNumber", _serialNumber);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("hsHeading", _hsHeading);
		_columnOriginalValues.put("hsSubHeading", _hsSubHeading);
		_columnOriginalValues.put("counter", _counter);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("healthCareEquipmentInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("healthCareApplicationId", 128L);

		columnBitmasks.put("equipmentManu", 256L);

		columnBitmasks.put("equipmentModel", 512L);

		columnBitmasks.put("equipmentMake", 1024L);

		columnBitmasks.put("yearOfEquipment", 2048L);

		columnBitmasks.put("serialNumber", 4096L);

		columnBitmasks.put("quantity", 8192L);

		columnBitmasks.put("description", 16384L);

		columnBitmasks.put("hsHeading", 32768L);

		columnBitmasks.put("hsSubHeading", 65536L);

		columnBitmasks.put("counter", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private HealthCareEquipmentInfo _escapedModel;

}