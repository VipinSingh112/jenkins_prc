/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.agriculture.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.agriculture.stages.services.model.AgricultureInspection;
import com.nbp.agriculture.stages.services.model.AgricultureInspectionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AgricultureInspection service. Represents a row in the &quot;nbp_agriculture_inspection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AgricultureInspectionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AgricultureInspectionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AgricultureInspectionImpl
 * @generated
 */
@JSON(strict = true)
public class AgricultureInspectionModelImpl
	extends BaseModelImpl<AgricultureInspection>
	implements AgricultureInspectionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a agriculture inspection model instance should use the <code>AgricultureInspection</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_agriculture_inspection";

	public static final Object[][] TABLE_COLUMNS = {
		{"agricultureInspectionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"dateOfInspection", Types.TIMESTAMP},
		{"insectionDateRange", Types.VARCHAR}, {"invities", Types.VARCHAR},
		{"location", Types.VARCHAR}, {"updatedBySource", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"agriApplicationId", Types.BIGINT},
		{"slotBookedByUser", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("agricultureInspectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfInspection", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("insectionDateRange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("invities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedBySource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agriApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("slotBookedByUser", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_agriculture_inspection (agricultureInspectionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,dateOfInspection DATE null,insectionDateRange VARCHAR(75) null,invities VARCHAR(75) null,location VARCHAR(75) null,updatedBySource VARCHAR(75) null,status VARCHAR(75) null,agriApplicationId LONG,slotBookedByUser LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_agriculture_inspection";

	public static final String ORDER_BY_JPQL =
		" ORDER BY agricultureInspection.agricultureInspectionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_agriculture_inspection.agricultureInspectionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AGRIAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SLOTBOOKEDBYUSER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AGRICULTUREINSPECTIONID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AgricultureInspectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _agricultureInspectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAgricultureInspectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _agricultureInspectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AgricultureInspection.class;
	}

	@Override
	public String getModelClassName() {
		return AgricultureInspection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AgricultureInspection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AgricultureInspection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AgricultureInspection, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AgricultureInspection)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AgricultureInspection, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AgricultureInspection, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AgricultureInspection)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AgricultureInspection, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AgricultureInspection, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AgricultureInspection, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AgricultureInspection, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AgricultureInspection, Object>>();

			attributeGetterFunctions.put(
				"agricultureInspectionId",
				AgricultureInspection::getAgricultureInspectionId);
			attributeGetterFunctions.put(
				"groupId", AgricultureInspection::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AgricultureInspection::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AgricultureInspection::getUserId);
			attributeGetterFunctions.put(
				"userName", AgricultureInspection::getUserName);
			attributeGetterFunctions.put(
				"createDate", AgricultureInspection::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AgricultureInspection::getModifiedDate);
			attributeGetterFunctions.put(
				"caseId", AgricultureInspection::getCaseId);
			attributeGetterFunctions.put(
				"dateOfInspection", AgricultureInspection::getDateOfInspection);
			attributeGetterFunctions.put(
				"insectionDateRange",
				AgricultureInspection::getInsectionDateRange);
			attributeGetterFunctions.put(
				"invities", AgricultureInspection::getInvities);
			attributeGetterFunctions.put(
				"location", AgricultureInspection::getLocation);
			attributeGetterFunctions.put(
				"updatedBySource", AgricultureInspection::getUpdatedBySource);
			attributeGetterFunctions.put(
				"status", AgricultureInspection::getStatus);
			attributeGetterFunctions.put(
				"agriApplicationId",
				AgricultureInspection::getAgriApplicationId);
			attributeGetterFunctions.put(
				"slotBookedByUser", AgricultureInspection::getSlotBookedByUser);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AgricultureInspection, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AgricultureInspection, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AgricultureInspection, ?>>();

			attributeSetterBiConsumers.put(
				"agricultureInspectionId",
				(BiConsumer<AgricultureInspection, Long>)
					AgricultureInspection::setAgricultureInspectionId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AgricultureInspection, Long>)
					AgricultureInspection::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AgricultureInspection, Long>)
					AgricultureInspection::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AgricultureInspection, Long>)
					AgricultureInspection::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AgricultureInspection, String>)
					AgricultureInspection::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AgricultureInspection, Date>)
					AgricultureInspection::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AgricultureInspection, Date>)
					AgricultureInspection::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<AgricultureInspection, String>)
					AgricultureInspection::setCaseId);
			attributeSetterBiConsumers.put(
				"dateOfInspection",
				(BiConsumer<AgricultureInspection, Date>)
					AgricultureInspection::setDateOfInspection);
			attributeSetterBiConsumers.put(
				"insectionDateRange",
				(BiConsumer<AgricultureInspection, String>)
					AgricultureInspection::setInsectionDateRange);
			attributeSetterBiConsumers.put(
				"invities",
				(BiConsumer<AgricultureInspection, String>)
					AgricultureInspection::setInvities);
			attributeSetterBiConsumers.put(
				"location",
				(BiConsumer<AgricultureInspection, String>)
					AgricultureInspection::setLocation);
			attributeSetterBiConsumers.put(
				"updatedBySource",
				(BiConsumer<AgricultureInspection, String>)
					AgricultureInspection::setUpdatedBySource);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<AgricultureInspection, String>)
					AgricultureInspection::setStatus);
			attributeSetterBiConsumers.put(
				"agriApplicationId",
				(BiConsumer<AgricultureInspection, Long>)
					AgricultureInspection::setAgriApplicationId);
			attributeSetterBiConsumers.put(
				"slotBookedByUser",
				(BiConsumer<AgricultureInspection, Long>)
					AgricultureInspection::setSlotBookedByUser);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAgricultureInspectionId() {
		return _agricultureInspectionId;
	}

	@Override
	public void setAgricultureInspectionId(long agricultureInspectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agricultureInspectionId = agricultureInspectionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public Date getDateOfInspection() {
		return _dateOfInspection;
	}

	@Override
	public void setDateOfInspection(Date dateOfInspection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfInspection = dateOfInspection;
	}

	@JSON
	@Override
	public String getInsectionDateRange() {
		if (_insectionDateRange == null) {
			return "";
		}
		else {
			return _insectionDateRange;
		}
	}

	@Override
	public void setInsectionDateRange(String insectionDateRange) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insectionDateRange = insectionDateRange;
	}

	@JSON
	@Override
	public String getInvities() {
		if (_invities == null) {
			return "";
		}
		else {
			return _invities;
		}
	}

	@Override
	public void setInvities(String invities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_invities = invities;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@JSON
	@Override
	public String getUpdatedBySource() {
		if (_updatedBySource == null) {
			return "";
		}
		else {
			return _updatedBySource;
		}
	}

	@Override
	public void setUpdatedBySource(String updatedBySource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedBySource = updatedBySource;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("status");
	}

	@JSON
	@Override
	public long getAgriApplicationId() {
		return _agriApplicationId;
	}

	@Override
	public void setAgriApplicationId(long agriApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agriApplicationId = agriApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAgriApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("agriApplicationId"));
	}

	@JSON
	@Override
	public long getSlotBookedByUser() {
		return _slotBookedByUser;
	}

	@Override
	public void setSlotBookedByUser(long slotBookedByUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_slotBookedByUser = slotBookedByUser;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSlotBookedByUser() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("slotBookedByUser"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AgricultureInspection.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AgricultureInspection toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AgricultureInspection>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AgricultureInspectionImpl agricultureInspectionImpl =
			new AgricultureInspectionImpl();

		agricultureInspectionImpl.setAgricultureInspectionId(
			getAgricultureInspectionId());
		agricultureInspectionImpl.setGroupId(getGroupId());
		agricultureInspectionImpl.setCompanyId(getCompanyId());
		agricultureInspectionImpl.setUserId(getUserId());
		agricultureInspectionImpl.setUserName(getUserName());
		agricultureInspectionImpl.setCreateDate(getCreateDate());
		agricultureInspectionImpl.setModifiedDate(getModifiedDate());
		agricultureInspectionImpl.setCaseId(getCaseId());
		agricultureInspectionImpl.setDateOfInspection(getDateOfInspection());
		agricultureInspectionImpl.setInsectionDateRange(
			getInsectionDateRange());
		agricultureInspectionImpl.setInvities(getInvities());
		agricultureInspectionImpl.setLocation(getLocation());
		agricultureInspectionImpl.setUpdatedBySource(getUpdatedBySource());
		agricultureInspectionImpl.setStatus(getStatus());
		agricultureInspectionImpl.setAgriApplicationId(getAgriApplicationId());
		agricultureInspectionImpl.setSlotBookedByUser(getSlotBookedByUser());

		agricultureInspectionImpl.resetOriginalValues();

		return agricultureInspectionImpl;
	}

	@Override
	public AgricultureInspection cloneWithOriginalValues() {
		AgricultureInspectionImpl agricultureInspectionImpl =
			new AgricultureInspectionImpl();

		agricultureInspectionImpl.setAgricultureInspectionId(
			this.<Long>getColumnOriginalValue("agricultureInspectionId"));
		agricultureInspectionImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		agricultureInspectionImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		agricultureInspectionImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		agricultureInspectionImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		agricultureInspectionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		agricultureInspectionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		agricultureInspectionImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		agricultureInspectionImpl.setDateOfInspection(
			this.<Date>getColumnOriginalValue("dateOfInspection"));
		agricultureInspectionImpl.setInsectionDateRange(
			this.<String>getColumnOriginalValue("insectionDateRange"));
		agricultureInspectionImpl.setInvities(
			this.<String>getColumnOriginalValue("invities"));
		agricultureInspectionImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		agricultureInspectionImpl.setUpdatedBySource(
			this.<String>getColumnOriginalValue("updatedBySource"));
		agricultureInspectionImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		agricultureInspectionImpl.setAgriApplicationId(
			this.<Long>getColumnOriginalValue("agriApplicationId"));
		agricultureInspectionImpl.setSlotBookedByUser(
			this.<Long>getColumnOriginalValue("slotBookedByUser"));

		return agricultureInspectionImpl;
	}

	@Override
	public int compareTo(AgricultureInspection agricultureInspection) {
		long primaryKey = agricultureInspection.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AgricultureInspection)) {
			return false;
		}

		AgricultureInspection agricultureInspection =
			(AgricultureInspection)object;

		long primaryKey = agricultureInspection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AgricultureInspection> toCacheModel() {
		AgricultureInspectionCacheModel agricultureInspectionCacheModel =
			new AgricultureInspectionCacheModel();

		agricultureInspectionCacheModel.agricultureInspectionId =
			getAgricultureInspectionId();

		agricultureInspectionCacheModel.groupId = getGroupId();

		agricultureInspectionCacheModel.companyId = getCompanyId();

		agricultureInspectionCacheModel.userId = getUserId();

		agricultureInspectionCacheModel.userName = getUserName();

		String userName = agricultureInspectionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			agricultureInspectionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			agricultureInspectionCacheModel.createDate = createDate.getTime();
		}
		else {
			agricultureInspectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			agricultureInspectionCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			agricultureInspectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		agricultureInspectionCacheModel.caseId = getCaseId();

		String caseId = agricultureInspectionCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			agricultureInspectionCacheModel.caseId = null;
		}

		Date dateOfInspection = getDateOfInspection();

		if (dateOfInspection != null) {
			agricultureInspectionCacheModel.dateOfInspection =
				dateOfInspection.getTime();
		}
		else {
			agricultureInspectionCacheModel.dateOfInspection = Long.MIN_VALUE;
		}

		agricultureInspectionCacheModel.insectionDateRange =
			getInsectionDateRange();

		String insectionDateRange =
			agricultureInspectionCacheModel.insectionDateRange;

		if ((insectionDateRange != null) &&
			(insectionDateRange.length() == 0)) {

			agricultureInspectionCacheModel.insectionDateRange = null;
		}

		agricultureInspectionCacheModel.invities = getInvities();

		String invities = agricultureInspectionCacheModel.invities;

		if ((invities != null) && (invities.length() == 0)) {
			agricultureInspectionCacheModel.invities = null;
		}

		agricultureInspectionCacheModel.location = getLocation();

		String location = agricultureInspectionCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			agricultureInspectionCacheModel.location = null;
		}

		agricultureInspectionCacheModel.updatedBySource = getUpdatedBySource();

		String updatedBySource =
			agricultureInspectionCacheModel.updatedBySource;

		if ((updatedBySource != null) && (updatedBySource.length() == 0)) {
			agricultureInspectionCacheModel.updatedBySource = null;
		}

		agricultureInspectionCacheModel.status = getStatus();

		String status = agricultureInspectionCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			agricultureInspectionCacheModel.status = null;
		}

		agricultureInspectionCacheModel.agriApplicationId =
			getAgriApplicationId();

		agricultureInspectionCacheModel.slotBookedByUser =
			getSlotBookedByUser();

		return agricultureInspectionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AgricultureInspection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AgricultureInspection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AgricultureInspection, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AgricultureInspection)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AgricultureInspection>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AgricultureInspection.class, ModelWrapper.class);

	}

	private long _agricultureInspectionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private Date _dateOfInspection;
	private String _insectionDateRange;
	private String _invities;
	private String _location;
	private String _updatedBySource;
	private String _status;
	private long _agriApplicationId;
	private long _slotBookedByUser;

	public <T> T getColumnValue(String columnName) {
		Function<AgricultureInspection, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AgricultureInspection)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"agricultureInspectionId", _agricultureInspectionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("dateOfInspection", _dateOfInspection);
		_columnOriginalValues.put("insectionDateRange", _insectionDateRange);
		_columnOriginalValues.put("invities", _invities);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("updatedBySource", _updatedBySource);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("agriApplicationId", _agriApplicationId);
		_columnOriginalValues.put("slotBookedByUser", _slotBookedByUser);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("agricultureInspectionId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("dateOfInspection", 256L);

		columnBitmasks.put("insectionDateRange", 512L);

		columnBitmasks.put("invities", 1024L);

		columnBitmasks.put("location", 2048L);

		columnBitmasks.put("updatedBySource", 4096L);

		columnBitmasks.put("status", 8192L);

		columnBitmasks.put("agriApplicationId", 16384L);

		columnBitmasks.put("slotBookedByUser", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AgricultureInspection _escapedModel;

}