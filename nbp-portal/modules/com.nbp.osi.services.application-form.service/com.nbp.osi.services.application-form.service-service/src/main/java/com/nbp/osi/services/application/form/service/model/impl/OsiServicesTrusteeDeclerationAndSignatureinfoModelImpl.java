/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.services.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.services.application.form.service.model.OsiServicesTrusteeDeclerationAndSignatureinfo;
import com.nbp.osi.services.application.form.service.model.OsiServicesTrusteeDeclerationAndSignatureinfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OsiServicesTrusteeDeclerationAndSignatureinfo service. Represents a row in the &quot;nbp_osi_services_trus_in_decl&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OsiServicesTrusteeDeclerationAndSignatureinfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OsiServicesTrusteeDeclerationAndSignatureinfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OsiServicesTrusteeDeclerationAndSignatureinfoImpl
 * @generated
 */
@JSON(strict = true)
public class OsiServicesTrusteeDeclerationAndSignatureinfoModelImpl
	extends BaseModelImpl<OsiServicesTrusteeDeclerationAndSignatureinfo>
	implements OsiServicesTrusteeDeclerationAndSignatureinfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a osi services trustee decleration and signatureinfo model instance should use the <code>OsiServicesTrusteeDeclerationAndSignatureinfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_services_trus_in_decl";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"osiDeclerationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"indiUndersignedApplicantName", Types.VARCHAR},
		{"indiUndersignedDated", Types.TIMESTAMP},
		{"osiServicesApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiDeclerationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("indiUndersignedApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indiUndersignedDated", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("osiServicesApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_services_trus_in_decl (uuid_ VARCHAR(75) null,osiDeclerationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,indiUndersignedApplicantName VARCHAR(75) null,indiUndersignedDated DATE null,osiServicesApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_services_trus_in_decl";

	public static final String ORDER_BY_JPQL =
		" ORDER BY osiServicesTrusteeDeclerationAndSignatureinfo.osiDeclerationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_services_trus_in_decl.osiDeclerationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSISERVICESAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIDECLERATIONID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OsiServicesTrusteeDeclerationAndSignatureinfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _osiDeclerationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOsiDeclerationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _osiDeclerationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OsiServicesTrusteeDeclerationAndSignatureinfo.class;
	}

	@Override
	public String getModelClassName() {
		return OsiServicesTrusteeDeclerationAndSignatureinfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map
			<String,
			 Function<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
				attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String,
				 Function
					 <OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
						entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(OsiServicesTrusteeDeclerationAndSignatureinfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map
			<String,
			 BiConsumer<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
				attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OsiServicesTrusteeDeclerationAndSignatureinfo)this,
					entry.getValue());
			}
		}
	}

	public Map
		<String,
		 Function<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
			getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map
		<String,
		 BiConsumer<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
			getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String,
			 Function<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
				_attributeGetterFunctions;

		static {
			Map
				<String,
				 Function
					 <OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
						attributeGetterFunctions =
							new LinkedHashMap
								<String,
								 Function
									 <OsiServicesTrusteeDeclerationAndSignatureinfo,
									  Object>>();

			attributeGetterFunctions.put(
				"uuid", OsiServicesTrusteeDeclerationAndSignatureinfo::getUuid);
			attributeGetterFunctions.put(
				"osiDeclerationId",
				OsiServicesTrusteeDeclerationAndSignatureinfo::
					getOsiDeclerationId);
			attributeGetterFunctions.put(
				"groupId",
				OsiServicesTrusteeDeclerationAndSignatureinfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId",
				OsiServicesTrusteeDeclerationAndSignatureinfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId",
				OsiServicesTrusteeDeclerationAndSignatureinfo::getUserId);
			attributeGetterFunctions.put(
				"userName",
				OsiServicesTrusteeDeclerationAndSignatureinfo::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				OsiServicesTrusteeDeclerationAndSignatureinfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				OsiServicesTrusteeDeclerationAndSignatureinfo::getModifiedDate);
			attributeGetterFunctions.put(
				"indiUndersignedApplicantName",
				OsiServicesTrusteeDeclerationAndSignatureinfo::
					getIndiUndersignedApplicantName);
			attributeGetterFunctions.put(
				"indiUndersignedDated",
				OsiServicesTrusteeDeclerationAndSignatureinfo::
					getIndiUndersignedDated);
			attributeGetterFunctions.put(
				"osiServicesApplicationId",
				OsiServicesTrusteeDeclerationAndSignatureinfo::
					getOsiServicesApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String,
			 BiConsumer<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map
				<String,
				 BiConsumer<OsiServicesTrusteeDeclerationAndSignatureinfo, ?>>
					attributeSetterBiConsumers =
						new LinkedHashMap
							<String,
							 BiConsumer
								 <OsiServicesTrusteeDeclerationAndSignatureinfo,
								  ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, String>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::setUuid);
			attributeSetterBiConsumers.put(
				"osiDeclerationId",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, Long>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setOsiDeclerationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, Long>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, Long>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, Long>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, String>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, Date>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, Date>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setModifiedDate);
			attributeSetterBiConsumers.put(
				"indiUndersignedApplicantName",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, String>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setIndiUndersignedApplicantName);
			attributeSetterBiConsumers.put(
				"indiUndersignedDated",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, Date>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setIndiUndersignedDated);
			attributeSetterBiConsumers.put(
				"osiServicesApplicationId",
				(BiConsumer
					<OsiServicesTrusteeDeclerationAndSignatureinfo, Long>)
						OsiServicesTrusteeDeclerationAndSignatureinfo::
							setOsiServicesApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getOsiDeclerationId() {
		return _osiDeclerationId;
	}

	@Override
	public void setOsiDeclerationId(long osiDeclerationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiDeclerationId = osiDeclerationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getIndiUndersignedApplicantName() {
		if (_indiUndersignedApplicantName == null) {
			return "";
		}
		else {
			return _indiUndersignedApplicantName;
		}
	}

	@Override
	public void setIndiUndersignedApplicantName(
		String indiUndersignedApplicantName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indiUndersignedApplicantName = indiUndersignedApplicantName;
	}

	@JSON
	@Override
	public Date getIndiUndersignedDated() {
		return _indiUndersignedDated;
	}

	@Override
	public void setIndiUndersignedDated(Date indiUndersignedDated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indiUndersignedDated = indiUndersignedDated;
	}

	@JSON
	@Override
	public long getOsiServicesApplicationId() {
		return _osiServicesApplicationId;
	}

	@Override
	public void setOsiServicesApplicationId(long osiServicesApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiServicesApplicationId = osiServicesApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiServicesApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiServicesApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				OsiServicesTrusteeDeclerationAndSignatureinfo.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(),
			OsiServicesTrusteeDeclerationAndSignatureinfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OsiServicesTrusteeDeclerationAndSignatureinfo toEscapedModel() {
		if (_escapedModel == null) {
			Function
				<InvocationHandler,
				 OsiServicesTrusteeDeclerationAndSignatureinfo>
					escapedModelProxyProviderFunction =
						EscapedModelProxyProviderFunctionHolder.
							_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OsiServicesTrusteeDeclerationAndSignatureinfoImpl
			osiServicesTrusteeDeclerationAndSignatureinfoImpl =
				new OsiServicesTrusteeDeclerationAndSignatureinfoImpl();

		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setUuid(getUuid());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setOsiDeclerationId(
			getOsiDeclerationId());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setGroupId(
			getGroupId());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setCompanyId(
			getCompanyId());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setUserId(
			getUserId());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setUserName(
			getUserName());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setCreateDate(
			getCreateDate());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setModifiedDate(
			getModifiedDate());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.
			setIndiUndersignedApplicantName(getIndiUndersignedApplicantName());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.
			setIndiUndersignedDated(getIndiUndersignedDated());
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.
			setOsiServicesApplicationId(getOsiServicesApplicationId());

		osiServicesTrusteeDeclerationAndSignatureinfoImpl.resetOriginalValues();

		return osiServicesTrusteeDeclerationAndSignatureinfoImpl;
	}

	@Override
	public OsiServicesTrusteeDeclerationAndSignatureinfo
		cloneWithOriginalValues() {

		OsiServicesTrusteeDeclerationAndSignatureinfoImpl
			osiServicesTrusteeDeclerationAndSignatureinfoImpl =
				new OsiServicesTrusteeDeclerationAndSignatureinfoImpl();

		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setOsiDeclerationId(
			this.<Long>getColumnOriginalValue("osiDeclerationId"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.
			setIndiUndersignedApplicantName(
				this.<String>getColumnOriginalValue(
					"indiUndersignedApplicantName"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.
			setIndiUndersignedDated(
				this.<Date>getColumnOriginalValue("indiUndersignedDated"));
		osiServicesTrusteeDeclerationAndSignatureinfoImpl.
			setOsiServicesApplicationId(
				this.<Long>getColumnOriginalValue("osiServicesApplicationId"));

		return osiServicesTrusteeDeclerationAndSignatureinfoImpl;
	}

	@Override
	public int compareTo(
		OsiServicesTrusteeDeclerationAndSignatureinfo
			osiServicesTrusteeDeclerationAndSignatureinfo) {

		long primaryKey =
			osiServicesTrusteeDeclerationAndSignatureinfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof
				OsiServicesTrusteeDeclerationAndSignatureinfo)) {

			return false;
		}

		OsiServicesTrusteeDeclerationAndSignatureinfo
			osiServicesTrusteeDeclerationAndSignatureinfo =
				(OsiServicesTrusteeDeclerationAndSignatureinfo)object;

		long primaryKey =
			osiServicesTrusteeDeclerationAndSignatureinfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OsiServicesTrusteeDeclerationAndSignatureinfo>
		toCacheModel() {

		OsiServicesTrusteeDeclerationAndSignatureinfoCacheModel
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel =
				new OsiServicesTrusteeDeclerationAndSignatureinfoCacheModel();

		osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.uuid =
			getUuid();

		String uuid =
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.uuid = null;
		}

		osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
			osiDeclerationId = getOsiDeclerationId();

		osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.groupId =
			getGroupId();

		osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.companyId =
			getCompanyId();

		osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.userId =
			getUserId();

		osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.userName =
			getUserName();

		String userName =
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.userName =
				null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
				modifiedDate = modifiedDate.getTime();
		}
		else {
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
				modifiedDate = Long.MIN_VALUE;
		}

		osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
			indiUndersignedApplicantName = getIndiUndersignedApplicantName();

		String indiUndersignedApplicantName =
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
				indiUndersignedApplicantName;

		if ((indiUndersignedApplicantName != null) &&
			(indiUndersignedApplicantName.length() == 0)) {

			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
				indiUndersignedApplicantName = null;
		}

		Date indiUndersignedDated = getIndiUndersignedDated();

		if (indiUndersignedDated != null) {
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
				indiUndersignedDated = indiUndersignedDated.getTime();
		}
		else {
			osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
				indiUndersignedDated = Long.MIN_VALUE;
		}

		osiServicesTrusteeDeclerationAndSignatureinfoCacheModel.
			osiServicesApplicationId = getOsiServicesApplicationId();

		return osiServicesTrusteeDeclerationAndSignatureinfoCacheModel;
	}

	@Override
	public String toString() {
		Map
			<String,
			 Function<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
				attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String,
				 Function
					 <OsiServicesTrusteeDeclerationAndSignatureinfo, Object>>
						entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(OsiServicesTrusteeDeclerationAndSignatureinfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, OsiServicesTrusteeDeclerationAndSignatureinfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						OsiServicesTrusteeDeclerationAndSignatureinfo.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _osiDeclerationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _indiUndersignedApplicantName;
	private Date _indiUndersignedDated;
	private long _osiServicesApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<OsiServicesTrusteeDeclerationAndSignatureinfo, Object>
			function =
				AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
					columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply(
			(OsiServicesTrusteeDeclerationAndSignatureinfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("osiDeclerationId", _osiDeclerationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"indiUndersignedApplicantName", _indiUndersignedApplicantName);
		_columnOriginalValues.put(
			"indiUndersignedDated", _indiUndersignedDated);
		_columnOriginalValues.put(
			"osiServicesApplicationId", _osiServicesApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("osiDeclerationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("indiUndersignedApplicantName", 256L);

		columnBitmasks.put("indiUndersignedDated", 512L);

		columnBitmasks.put("osiServicesApplicationId", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OsiServicesTrusteeDeclerationAndSignatureinfo _escapedModel;

}