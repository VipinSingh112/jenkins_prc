/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.services.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.services.application.form.service.model.OSIServiceSupportingDocInd;
import com.nbp.osi.services.application.form.service.model.OSIServiceSupportingDocIndModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OSIServiceSupportingDocInd service. Represents a row in the &quot;nbp_osi_services_sup_doc_ind&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OSIServiceSupportingDocIndModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OSIServiceSupportingDocIndImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OSIServiceSupportingDocIndImpl
 * @generated
 */
@JSON(strict = true)
public class OSIServiceSupportingDocIndModelImpl
	extends BaseModelImpl<OSIServiceSupportingDocInd>
	implements OSIServiceSupportingDocIndModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a osi service supporting doc ind model instance should use the <code>OSIServiceSupportingDocInd</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_services_sup_doc_ind";

	public static final Object[][] TABLE_COLUMNS = {
		{"oSIServiceSupportingDocIndId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"supportingDocCheckboxes", Types.VARCHAR},
		{"nonProvisionReasonReq1", Types.VARCHAR},
		{"expectedDateReq1", Types.TIMESTAMP},
		{"nonProvisionReasonReq2", Types.VARCHAR},
		{"expectedDateReq2", Types.TIMESTAMP},
		{"nonProvisionReasonReq3", Types.VARCHAR},
		{"expectedDateReq3", Types.TIMESTAMP},
		{"nonProvisionReasonReq4", Types.VARCHAR},
		{"expectedDateReq4", Types.TIMESTAMP},
		{"nonProvisionReasonReq5", Types.VARCHAR},
		{"expectedDateReq5", Types.TIMESTAMP},
		{"nonProvisionReasonReq6", Types.VARCHAR},
		{"expectedDateReq6", Types.TIMESTAMP},
		{"nonProvisionReasonReq7", Types.VARCHAR},
		{"expectedDateReq7", Types.TIMESTAMP},
		{"nonProvisionReasonReq8", Types.VARCHAR},
		{"expectedDateReq8", Types.TIMESTAMP},
		{"nonProvisionReasonReq9", Types.VARCHAR},
		{"expectedDateReq9", Types.TIMESTAMP},
		{"nonProvisionReasonReq10", Types.VARCHAR},
		{"expectedDateReq10", Types.TIMESTAMP},
		{"nonProvisionReasonReq11", Types.VARCHAR},
		{"expectedDateReq11", Types.TIMESTAMP},
		{"nonProvisionReasonReq12", Types.VARCHAR},
		{"expectedDateReq12", Types.TIMESTAMP}, {"category", Types.VARCHAR},
		{"osiServicesApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("oSIServiceSupportingDocIndId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("supportingDocCheckboxes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq1", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq2", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq3", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq4", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq5", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq5", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq6", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq6", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq7", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq7", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq8", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq8", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq9", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq9", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq10", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq10", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq11", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq11", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nonProvisionReasonReq12", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedDateReq12", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiServicesApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_services_sup_doc_ind (oSIServiceSupportingDocIndId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,supportingDocCheckboxes TEXT null,nonProvisionReasonReq1 VARCHAR(75) null,expectedDateReq1 DATE null,nonProvisionReasonReq2 VARCHAR(75) null,expectedDateReq2 DATE null,nonProvisionReasonReq3 VARCHAR(75) null,expectedDateReq3 DATE null,nonProvisionReasonReq4 VARCHAR(75) null,expectedDateReq4 DATE null,nonProvisionReasonReq5 VARCHAR(75) null,expectedDateReq5 DATE null,nonProvisionReasonReq6 VARCHAR(75) null,expectedDateReq6 DATE null,nonProvisionReasonReq7 VARCHAR(75) null,expectedDateReq7 DATE null,nonProvisionReasonReq8 VARCHAR(75) null,expectedDateReq8 DATE null,nonProvisionReasonReq9 VARCHAR(75) null,expectedDateReq9 DATE null,nonProvisionReasonReq10 VARCHAR(75) null,expectedDateReq10 DATE null,nonProvisionReasonReq11 VARCHAR(75) null,expectedDateReq11 DATE null,nonProvisionReasonReq12 VARCHAR(75) null,expectedDateReq12 DATE null,category VARCHAR(75) null,osiServicesApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_services_sup_doc_ind";

	public static final String ORDER_BY_JPQL =
		" ORDER BY osiServiceSupportingDocInd.oSIServiceSupportingDocIndId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_services_sup_doc_ind.oSIServiceSupportingDocIndId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSISERVICESAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSISERVICESUPPORTINGDOCINDID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OSIServiceSupportingDocIndModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _oSIServiceSupportingDocIndId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOSIServiceSupportingDocIndId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _oSIServiceSupportingDocIndId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OSIServiceSupportingDocInd.class;
	}

	@Override
	public String getModelClassName() {
		return OSIServiceSupportingDocInd.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OSIServiceSupportingDocInd, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OSIServiceSupportingDocInd, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OSIServiceSupportingDocInd, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(OSIServiceSupportingDocInd)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OSIServiceSupportingDocInd, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OSIServiceSupportingDocInd, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OSIServiceSupportingDocInd)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OSIServiceSupportingDocInd, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OSIServiceSupportingDocInd, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<OSIServiceSupportingDocInd, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<OSIServiceSupportingDocInd, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<OSIServiceSupportingDocInd, Object>>();

			attributeGetterFunctions.put(
				"oSIServiceSupportingDocIndId",
				OSIServiceSupportingDocInd::getOSIServiceSupportingDocIndId);
			attributeGetterFunctions.put(
				"groupId", OSIServiceSupportingDocInd::getGroupId);
			attributeGetterFunctions.put(
				"companyId", OSIServiceSupportingDocInd::getCompanyId);
			attributeGetterFunctions.put(
				"userId", OSIServiceSupportingDocInd::getUserId);
			attributeGetterFunctions.put(
				"userName", OSIServiceSupportingDocInd::getUserName);
			attributeGetterFunctions.put(
				"createDate", OSIServiceSupportingDocInd::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", OSIServiceSupportingDocInd::getModifiedDate);
			attributeGetterFunctions.put(
				"supportingDocCheckboxes",
				OSIServiceSupportingDocInd::getSupportingDocCheckboxes);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq1",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq1);
			attributeGetterFunctions.put(
				"expectedDateReq1",
				OSIServiceSupportingDocInd::getExpectedDateReq1);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq2",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq2);
			attributeGetterFunctions.put(
				"expectedDateReq2",
				OSIServiceSupportingDocInd::getExpectedDateReq2);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq3",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq3);
			attributeGetterFunctions.put(
				"expectedDateReq3",
				OSIServiceSupportingDocInd::getExpectedDateReq3);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq4",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq4);
			attributeGetterFunctions.put(
				"expectedDateReq4",
				OSIServiceSupportingDocInd::getExpectedDateReq4);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq5",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq5);
			attributeGetterFunctions.put(
				"expectedDateReq5",
				OSIServiceSupportingDocInd::getExpectedDateReq5);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq6",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq6);
			attributeGetterFunctions.put(
				"expectedDateReq6",
				OSIServiceSupportingDocInd::getExpectedDateReq6);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq7",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq7);
			attributeGetterFunctions.put(
				"expectedDateReq7",
				OSIServiceSupportingDocInd::getExpectedDateReq7);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq8",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq8);
			attributeGetterFunctions.put(
				"expectedDateReq8",
				OSIServiceSupportingDocInd::getExpectedDateReq8);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq9",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq9);
			attributeGetterFunctions.put(
				"expectedDateReq9",
				OSIServiceSupportingDocInd::getExpectedDateReq9);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq10",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq10);
			attributeGetterFunctions.put(
				"expectedDateReq10",
				OSIServiceSupportingDocInd::getExpectedDateReq10);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq11",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq11);
			attributeGetterFunctions.put(
				"expectedDateReq11",
				OSIServiceSupportingDocInd::getExpectedDateReq11);
			attributeGetterFunctions.put(
				"nonProvisionReasonReq12",
				OSIServiceSupportingDocInd::getNonProvisionReasonReq12);
			attributeGetterFunctions.put(
				"expectedDateReq12",
				OSIServiceSupportingDocInd::getExpectedDateReq12);
			attributeGetterFunctions.put(
				"category", OSIServiceSupportingDocInd::getCategory);
			attributeGetterFunctions.put(
				"osiServicesApplicationId",
				OSIServiceSupportingDocInd::getOsiServicesApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<OSIServiceSupportingDocInd, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<OSIServiceSupportingDocInd, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<OSIServiceSupportingDocInd, ?>>();

			attributeSetterBiConsumers.put(
				"oSIServiceSupportingDocIndId",
				(BiConsumer<OSIServiceSupportingDocInd, Long>)
					OSIServiceSupportingDocInd::
						setOSIServiceSupportingDocIndId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<OSIServiceSupportingDocInd, Long>)
					OSIServiceSupportingDocInd::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<OSIServiceSupportingDocInd, Long>)
					OSIServiceSupportingDocInd::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<OSIServiceSupportingDocInd, Long>)
					OSIServiceSupportingDocInd::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setModifiedDate);
			attributeSetterBiConsumers.put(
				"supportingDocCheckboxes",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setSupportingDocCheckboxes);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq1",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq1);
			attributeSetterBiConsumers.put(
				"expectedDateReq1",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq1);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq2",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq2);
			attributeSetterBiConsumers.put(
				"expectedDateReq2",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq2);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq3",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq3);
			attributeSetterBiConsumers.put(
				"expectedDateReq3",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq3);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq4",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq4);
			attributeSetterBiConsumers.put(
				"expectedDateReq4",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq4);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq5",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq5);
			attributeSetterBiConsumers.put(
				"expectedDateReq5",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq5);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq6",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq6);
			attributeSetterBiConsumers.put(
				"expectedDateReq6",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq6);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq7",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq7);
			attributeSetterBiConsumers.put(
				"expectedDateReq7",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq7);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq8",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq8);
			attributeSetterBiConsumers.put(
				"expectedDateReq8",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq8);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq9",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq9);
			attributeSetterBiConsumers.put(
				"expectedDateReq9",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq9);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq10",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq10);
			attributeSetterBiConsumers.put(
				"expectedDateReq10",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq10);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq11",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq11);
			attributeSetterBiConsumers.put(
				"expectedDateReq11",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq11);
			attributeSetterBiConsumers.put(
				"nonProvisionReasonReq12",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setNonProvisionReasonReq12);
			attributeSetterBiConsumers.put(
				"expectedDateReq12",
				(BiConsumer<OSIServiceSupportingDocInd, Date>)
					OSIServiceSupportingDocInd::setExpectedDateReq12);
			attributeSetterBiConsumers.put(
				"category",
				(BiConsumer<OSIServiceSupportingDocInd, String>)
					OSIServiceSupportingDocInd::setCategory);
			attributeSetterBiConsumers.put(
				"osiServicesApplicationId",
				(BiConsumer<OSIServiceSupportingDocInd, Long>)
					OSIServiceSupportingDocInd::setOsiServicesApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getOSIServiceSupportingDocIndId() {
		return _oSIServiceSupportingDocIndId;
	}

	@Override
	public void setOSIServiceSupportingDocIndId(
		long oSIServiceSupportingDocIndId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_oSIServiceSupportingDocIndId = oSIServiceSupportingDocIndId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSupportingDocCheckboxes() {
		if (_supportingDocCheckboxes == null) {
			return "";
		}
		else {
			return _supportingDocCheckboxes;
		}
	}

	@Override
	public void setSupportingDocCheckboxes(String supportingDocCheckboxes) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_supportingDocCheckboxes = supportingDocCheckboxes;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq1() {
		if (_nonProvisionReasonReq1 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq1;
		}
	}

	@Override
	public void setNonProvisionReasonReq1(String nonProvisionReasonReq1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq1 = nonProvisionReasonReq1;
	}

	@JSON
	@Override
	public Date getExpectedDateReq1() {
		return _expectedDateReq1;
	}

	@Override
	public void setExpectedDateReq1(Date expectedDateReq1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq1 = expectedDateReq1;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq2() {
		if (_nonProvisionReasonReq2 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq2;
		}
	}

	@Override
	public void setNonProvisionReasonReq2(String nonProvisionReasonReq2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq2 = nonProvisionReasonReq2;
	}

	@JSON
	@Override
	public Date getExpectedDateReq2() {
		return _expectedDateReq2;
	}

	@Override
	public void setExpectedDateReq2(Date expectedDateReq2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq2 = expectedDateReq2;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq3() {
		if (_nonProvisionReasonReq3 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq3;
		}
	}

	@Override
	public void setNonProvisionReasonReq3(String nonProvisionReasonReq3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq3 = nonProvisionReasonReq3;
	}

	@JSON
	@Override
	public Date getExpectedDateReq3() {
		return _expectedDateReq3;
	}

	@Override
	public void setExpectedDateReq3(Date expectedDateReq3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq3 = expectedDateReq3;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq4() {
		if (_nonProvisionReasonReq4 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq4;
		}
	}

	@Override
	public void setNonProvisionReasonReq4(String nonProvisionReasonReq4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq4 = nonProvisionReasonReq4;
	}

	@JSON
	@Override
	public Date getExpectedDateReq4() {
		return _expectedDateReq4;
	}

	@Override
	public void setExpectedDateReq4(Date expectedDateReq4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq4 = expectedDateReq4;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq5() {
		if (_nonProvisionReasonReq5 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq5;
		}
	}

	@Override
	public void setNonProvisionReasonReq5(String nonProvisionReasonReq5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq5 = nonProvisionReasonReq5;
	}

	@JSON
	@Override
	public Date getExpectedDateReq5() {
		return _expectedDateReq5;
	}

	@Override
	public void setExpectedDateReq5(Date expectedDateReq5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq5 = expectedDateReq5;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq6() {
		if (_nonProvisionReasonReq6 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq6;
		}
	}

	@Override
	public void setNonProvisionReasonReq6(String nonProvisionReasonReq6) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq6 = nonProvisionReasonReq6;
	}

	@JSON
	@Override
	public Date getExpectedDateReq6() {
		return _expectedDateReq6;
	}

	@Override
	public void setExpectedDateReq6(Date expectedDateReq6) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq6 = expectedDateReq6;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq7() {
		if (_nonProvisionReasonReq7 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq7;
		}
	}

	@Override
	public void setNonProvisionReasonReq7(String nonProvisionReasonReq7) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq7 = nonProvisionReasonReq7;
	}

	@JSON
	@Override
	public Date getExpectedDateReq7() {
		return _expectedDateReq7;
	}

	@Override
	public void setExpectedDateReq7(Date expectedDateReq7) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq7 = expectedDateReq7;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq8() {
		if (_nonProvisionReasonReq8 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq8;
		}
	}

	@Override
	public void setNonProvisionReasonReq8(String nonProvisionReasonReq8) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq8 = nonProvisionReasonReq8;
	}

	@JSON
	@Override
	public Date getExpectedDateReq8() {
		return _expectedDateReq8;
	}

	@Override
	public void setExpectedDateReq8(Date expectedDateReq8) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq8 = expectedDateReq8;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq9() {
		if (_nonProvisionReasonReq9 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq9;
		}
	}

	@Override
	public void setNonProvisionReasonReq9(String nonProvisionReasonReq9) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq9 = nonProvisionReasonReq9;
	}

	@JSON
	@Override
	public Date getExpectedDateReq9() {
		return _expectedDateReq9;
	}

	@Override
	public void setExpectedDateReq9(Date expectedDateReq9) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq9 = expectedDateReq9;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq10() {
		if (_nonProvisionReasonReq10 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq10;
		}
	}

	@Override
	public void setNonProvisionReasonReq10(String nonProvisionReasonReq10) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq10 = nonProvisionReasonReq10;
	}

	@JSON
	@Override
	public Date getExpectedDateReq10() {
		return _expectedDateReq10;
	}

	@Override
	public void setExpectedDateReq10(Date expectedDateReq10) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq10 = expectedDateReq10;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq11() {
		if (_nonProvisionReasonReq11 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq11;
		}
	}

	@Override
	public void setNonProvisionReasonReq11(String nonProvisionReasonReq11) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq11 = nonProvisionReasonReq11;
	}

	@JSON
	@Override
	public Date getExpectedDateReq11() {
		return _expectedDateReq11;
	}

	@Override
	public void setExpectedDateReq11(Date expectedDateReq11) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq11 = expectedDateReq11;
	}

	@JSON
	@Override
	public String getNonProvisionReasonReq12() {
		if (_nonProvisionReasonReq12 == null) {
			return "";
		}
		else {
			return _nonProvisionReasonReq12;
		}
	}

	@Override
	public void setNonProvisionReasonReq12(String nonProvisionReasonReq12) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonProvisionReasonReq12 = nonProvisionReasonReq12;
	}

	@JSON
	@Override
	public Date getExpectedDateReq12() {
		return _expectedDateReq12;
	}

	@Override
	public void setExpectedDateReq12(Date expectedDateReq12) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDateReq12 = expectedDateReq12;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	@JSON
	@Override
	public long getOsiServicesApplicationId() {
		return _osiServicesApplicationId;
	}

	@Override
	public void setOsiServicesApplicationId(long osiServicesApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiServicesApplicationId = osiServicesApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiServicesApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiServicesApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OSIServiceSupportingDocInd.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OSIServiceSupportingDocInd toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OSIServiceSupportingDocInd>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OSIServiceSupportingDocIndImpl osiServiceSupportingDocIndImpl =
			new OSIServiceSupportingDocIndImpl();

		osiServiceSupportingDocIndImpl.setOSIServiceSupportingDocIndId(
			getOSIServiceSupportingDocIndId());
		osiServiceSupportingDocIndImpl.setGroupId(getGroupId());
		osiServiceSupportingDocIndImpl.setCompanyId(getCompanyId());
		osiServiceSupportingDocIndImpl.setUserId(getUserId());
		osiServiceSupportingDocIndImpl.setUserName(getUserName());
		osiServiceSupportingDocIndImpl.setCreateDate(getCreateDate());
		osiServiceSupportingDocIndImpl.setModifiedDate(getModifiedDate());
		osiServiceSupportingDocIndImpl.setSupportingDocCheckboxes(
			getSupportingDocCheckboxes());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq1(
			getNonProvisionReasonReq1());
		osiServiceSupportingDocIndImpl.setExpectedDateReq1(
			getExpectedDateReq1());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq2(
			getNonProvisionReasonReq2());
		osiServiceSupportingDocIndImpl.setExpectedDateReq2(
			getExpectedDateReq2());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq3(
			getNonProvisionReasonReq3());
		osiServiceSupportingDocIndImpl.setExpectedDateReq3(
			getExpectedDateReq3());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq4(
			getNonProvisionReasonReq4());
		osiServiceSupportingDocIndImpl.setExpectedDateReq4(
			getExpectedDateReq4());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq5(
			getNonProvisionReasonReq5());
		osiServiceSupportingDocIndImpl.setExpectedDateReq5(
			getExpectedDateReq5());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq6(
			getNonProvisionReasonReq6());
		osiServiceSupportingDocIndImpl.setExpectedDateReq6(
			getExpectedDateReq6());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq7(
			getNonProvisionReasonReq7());
		osiServiceSupportingDocIndImpl.setExpectedDateReq7(
			getExpectedDateReq7());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq8(
			getNonProvisionReasonReq8());
		osiServiceSupportingDocIndImpl.setExpectedDateReq8(
			getExpectedDateReq8());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq9(
			getNonProvisionReasonReq9());
		osiServiceSupportingDocIndImpl.setExpectedDateReq9(
			getExpectedDateReq9());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq10(
			getNonProvisionReasonReq10());
		osiServiceSupportingDocIndImpl.setExpectedDateReq10(
			getExpectedDateReq10());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq11(
			getNonProvisionReasonReq11());
		osiServiceSupportingDocIndImpl.setExpectedDateReq11(
			getExpectedDateReq11());
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq12(
			getNonProvisionReasonReq12());
		osiServiceSupportingDocIndImpl.setExpectedDateReq12(
			getExpectedDateReq12());
		osiServiceSupportingDocIndImpl.setCategory(getCategory());
		osiServiceSupportingDocIndImpl.setOsiServicesApplicationId(
			getOsiServicesApplicationId());

		osiServiceSupportingDocIndImpl.resetOriginalValues();

		return osiServiceSupportingDocIndImpl;
	}

	@Override
	public OSIServiceSupportingDocInd cloneWithOriginalValues() {
		OSIServiceSupportingDocIndImpl osiServiceSupportingDocIndImpl =
			new OSIServiceSupportingDocIndImpl();

		osiServiceSupportingDocIndImpl.setOSIServiceSupportingDocIndId(
			this.<Long>getColumnOriginalValue("oSIServiceSupportingDocIndId"));
		osiServiceSupportingDocIndImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		osiServiceSupportingDocIndImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		osiServiceSupportingDocIndImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		osiServiceSupportingDocIndImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		osiServiceSupportingDocIndImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		osiServiceSupportingDocIndImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		osiServiceSupportingDocIndImpl.setSupportingDocCheckboxes(
			this.<String>getColumnOriginalValue("supportingDocCheckboxes"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq1(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq1"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq1(
			this.<Date>getColumnOriginalValue("expectedDateReq1"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq2(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq2"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq2(
			this.<Date>getColumnOriginalValue("expectedDateReq2"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq3(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq3"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq3(
			this.<Date>getColumnOriginalValue("expectedDateReq3"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq4(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq4"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq4(
			this.<Date>getColumnOriginalValue("expectedDateReq4"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq5(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq5"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq5(
			this.<Date>getColumnOriginalValue("expectedDateReq5"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq6(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq6"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq6(
			this.<Date>getColumnOriginalValue("expectedDateReq6"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq7(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq7"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq7(
			this.<Date>getColumnOriginalValue("expectedDateReq7"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq8(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq8"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq8(
			this.<Date>getColumnOriginalValue("expectedDateReq8"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq9(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq9"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq9(
			this.<Date>getColumnOriginalValue("expectedDateReq9"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq10(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq10"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq10(
			this.<Date>getColumnOriginalValue("expectedDateReq10"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq11(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq11"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq11(
			this.<Date>getColumnOriginalValue("expectedDateReq11"));
		osiServiceSupportingDocIndImpl.setNonProvisionReasonReq12(
			this.<String>getColumnOriginalValue("nonProvisionReasonReq12"));
		osiServiceSupportingDocIndImpl.setExpectedDateReq12(
			this.<Date>getColumnOriginalValue("expectedDateReq12"));
		osiServiceSupportingDocIndImpl.setCategory(
			this.<String>getColumnOriginalValue("category"));
		osiServiceSupportingDocIndImpl.setOsiServicesApplicationId(
			this.<Long>getColumnOriginalValue("osiServicesApplicationId"));

		return osiServiceSupportingDocIndImpl;
	}

	@Override
	public int compareTo(
		OSIServiceSupportingDocInd osiServiceSupportingDocInd) {

		long primaryKey = osiServiceSupportingDocInd.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OSIServiceSupportingDocInd)) {
			return false;
		}

		OSIServiceSupportingDocInd osiServiceSupportingDocInd =
			(OSIServiceSupportingDocInd)object;

		long primaryKey = osiServiceSupportingDocInd.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OSIServiceSupportingDocInd> toCacheModel() {
		OSIServiceSupportingDocIndCacheModel
			osiServiceSupportingDocIndCacheModel =
				new OSIServiceSupportingDocIndCacheModel();

		osiServiceSupportingDocIndCacheModel.oSIServiceSupportingDocIndId =
			getOSIServiceSupportingDocIndId();

		osiServiceSupportingDocIndCacheModel.groupId = getGroupId();

		osiServiceSupportingDocIndCacheModel.companyId = getCompanyId();

		osiServiceSupportingDocIndCacheModel.userId = getUserId();

		osiServiceSupportingDocIndCacheModel.userName = getUserName();

		String userName = osiServiceSupportingDocIndCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			osiServiceSupportingDocIndCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			osiServiceSupportingDocIndCacheModel.createDate =
				createDate.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			osiServiceSupportingDocIndCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.supportingDocCheckboxes =
			getSupportingDocCheckboxes();

		String supportingDocCheckboxes =
			osiServiceSupportingDocIndCacheModel.supportingDocCheckboxes;

		if ((supportingDocCheckboxes != null) &&
			(supportingDocCheckboxes.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.supportingDocCheckboxes = null;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq1 =
			getNonProvisionReasonReq1();

		String nonProvisionReasonReq1 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq1;

		if ((nonProvisionReasonReq1 != null) &&
			(nonProvisionReasonReq1.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq1 = null;
		}

		Date expectedDateReq1 = getExpectedDateReq1();

		if (expectedDateReq1 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq1 =
				expectedDateReq1.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq1 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq2 =
			getNonProvisionReasonReq2();

		String nonProvisionReasonReq2 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq2;

		if ((nonProvisionReasonReq2 != null) &&
			(nonProvisionReasonReq2.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq2 = null;
		}

		Date expectedDateReq2 = getExpectedDateReq2();

		if (expectedDateReq2 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq2 =
				expectedDateReq2.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq2 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq3 =
			getNonProvisionReasonReq3();

		String nonProvisionReasonReq3 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq3;

		if ((nonProvisionReasonReq3 != null) &&
			(nonProvisionReasonReq3.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq3 = null;
		}

		Date expectedDateReq3 = getExpectedDateReq3();

		if (expectedDateReq3 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq3 =
				expectedDateReq3.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq3 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq4 =
			getNonProvisionReasonReq4();

		String nonProvisionReasonReq4 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq4;

		if ((nonProvisionReasonReq4 != null) &&
			(nonProvisionReasonReq4.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq4 = null;
		}

		Date expectedDateReq4 = getExpectedDateReq4();

		if (expectedDateReq4 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq4 =
				expectedDateReq4.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq4 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq5 =
			getNonProvisionReasonReq5();

		String nonProvisionReasonReq5 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq5;

		if ((nonProvisionReasonReq5 != null) &&
			(nonProvisionReasonReq5.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq5 = null;
		}

		Date expectedDateReq5 = getExpectedDateReq5();

		if (expectedDateReq5 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq5 =
				expectedDateReq5.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq5 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq6 =
			getNonProvisionReasonReq6();

		String nonProvisionReasonReq6 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq6;

		if ((nonProvisionReasonReq6 != null) &&
			(nonProvisionReasonReq6.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq6 = null;
		}

		Date expectedDateReq6 = getExpectedDateReq6();

		if (expectedDateReq6 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq6 =
				expectedDateReq6.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq6 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq7 =
			getNonProvisionReasonReq7();

		String nonProvisionReasonReq7 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq7;

		if ((nonProvisionReasonReq7 != null) &&
			(nonProvisionReasonReq7.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq7 = null;
		}

		Date expectedDateReq7 = getExpectedDateReq7();

		if (expectedDateReq7 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq7 =
				expectedDateReq7.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq7 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq8 =
			getNonProvisionReasonReq8();

		String nonProvisionReasonReq8 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq8;

		if ((nonProvisionReasonReq8 != null) &&
			(nonProvisionReasonReq8.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq8 = null;
		}

		Date expectedDateReq8 = getExpectedDateReq8();

		if (expectedDateReq8 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq8 =
				expectedDateReq8.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq8 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq9 =
			getNonProvisionReasonReq9();

		String nonProvisionReasonReq9 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq9;

		if ((nonProvisionReasonReq9 != null) &&
			(nonProvisionReasonReq9.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq9 = null;
		}

		Date expectedDateReq9 = getExpectedDateReq9();

		if (expectedDateReq9 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq9 =
				expectedDateReq9.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq9 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq10 =
			getNonProvisionReasonReq10();

		String nonProvisionReasonReq10 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq10;

		if ((nonProvisionReasonReq10 != null) &&
			(nonProvisionReasonReq10.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq10 = null;
		}

		Date expectedDateReq10 = getExpectedDateReq10();

		if (expectedDateReq10 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq10 =
				expectedDateReq10.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq10 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq11 =
			getNonProvisionReasonReq11();

		String nonProvisionReasonReq11 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq11;

		if ((nonProvisionReasonReq11 != null) &&
			(nonProvisionReasonReq11.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq11 = null;
		}

		Date expectedDateReq11 = getExpectedDateReq11();

		if (expectedDateReq11 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq11 =
				expectedDateReq11.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq11 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq12 =
			getNonProvisionReasonReq12();

		String nonProvisionReasonReq12 =
			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq12;

		if ((nonProvisionReasonReq12 != null) &&
			(nonProvisionReasonReq12.length() == 0)) {

			osiServiceSupportingDocIndCacheModel.nonProvisionReasonReq12 = null;
		}

		Date expectedDateReq12 = getExpectedDateReq12();

		if (expectedDateReq12 != null) {
			osiServiceSupportingDocIndCacheModel.expectedDateReq12 =
				expectedDateReq12.getTime();
		}
		else {
			osiServiceSupportingDocIndCacheModel.expectedDateReq12 =
				Long.MIN_VALUE;
		}

		osiServiceSupportingDocIndCacheModel.category = getCategory();

		String category = osiServiceSupportingDocIndCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			osiServiceSupportingDocIndCacheModel.category = null;
		}

		osiServiceSupportingDocIndCacheModel.osiServicesApplicationId =
			getOsiServicesApplicationId();

		return osiServiceSupportingDocIndCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OSIServiceSupportingDocInd, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OSIServiceSupportingDocInd, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OSIServiceSupportingDocInd, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(OSIServiceSupportingDocInd)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, OSIServiceSupportingDocInd>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						OSIServiceSupportingDocInd.class, ModelWrapper.class);

	}

	private long _oSIServiceSupportingDocIndId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _supportingDocCheckboxes;
	private String _nonProvisionReasonReq1;
	private Date _expectedDateReq1;
	private String _nonProvisionReasonReq2;
	private Date _expectedDateReq2;
	private String _nonProvisionReasonReq3;
	private Date _expectedDateReq3;
	private String _nonProvisionReasonReq4;
	private Date _expectedDateReq4;
	private String _nonProvisionReasonReq5;
	private Date _expectedDateReq5;
	private String _nonProvisionReasonReq6;
	private Date _expectedDateReq6;
	private String _nonProvisionReasonReq7;
	private Date _expectedDateReq7;
	private String _nonProvisionReasonReq8;
	private Date _expectedDateReq8;
	private String _nonProvisionReasonReq9;
	private Date _expectedDateReq9;
	private String _nonProvisionReasonReq10;
	private Date _expectedDateReq10;
	private String _nonProvisionReasonReq11;
	private Date _expectedDateReq11;
	private String _nonProvisionReasonReq12;
	private Date _expectedDateReq12;
	private String _category;
	private long _osiServicesApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<OSIServiceSupportingDocInd, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OSIServiceSupportingDocInd)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"oSIServiceSupportingDocIndId", _oSIServiceSupportingDocIndId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"supportingDocCheckboxes", _supportingDocCheckboxes);
		_columnOriginalValues.put(
			"nonProvisionReasonReq1", _nonProvisionReasonReq1);
		_columnOriginalValues.put("expectedDateReq1", _expectedDateReq1);
		_columnOriginalValues.put(
			"nonProvisionReasonReq2", _nonProvisionReasonReq2);
		_columnOriginalValues.put("expectedDateReq2", _expectedDateReq2);
		_columnOriginalValues.put(
			"nonProvisionReasonReq3", _nonProvisionReasonReq3);
		_columnOriginalValues.put("expectedDateReq3", _expectedDateReq3);
		_columnOriginalValues.put(
			"nonProvisionReasonReq4", _nonProvisionReasonReq4);
		_columnOriginalValues.put("expectedDateReq4", _expectedDateReq4);
		_columnOriginalValues.put(
			"nonProvisionReasonReq5", _nonProvisionReasonReq5);
		_columnOriginalValues.put("expectedDateReq5", _expectedDateReq5);
		_columnOriginalValues.put(
			"nonProvisionReasonReq6", _nonProvisionReasonReq6);
		_columnOriginalValues.put("expectedDateReq6", _expectedDateReq6);
		_columnOriginalValues.put(
			"nonProvisionReasonReq7", _nonProvisionReasonReq7);
		_columnOriginalValues.put("expectedDateReq7", _expectedDateReq7);
		_columnOriginalValues.put(
			"nonProvisionReasonReq8", _nonProvisionReasonReq8);
		_columnOriginalValues.put("expectedDateReq8", _expectedDateReq8);
		_columnOriginalValues.put(
			"nonProvisionReasonReq9", _nonProvisionReasonReq9);
		_columnOriginalValues.put("expectedDateReq9", _expectedDateReq9);
		_columnOriginalValues.put(
			"nonProvisionReasonReq10", _nonProvisionReasonReq10);
		_columnOriginalValues.put("expectedDateReq10", _expectedDateReq10);
		_columnOriginalValues.put(
			"nonProvisionReasonReq11", _nonProvisionReasonReq11);
		_columnOriginalValues.put("expectedDateReq11", _expectedDateReq11);
		_columnOriginalValues.put(
			"nonProvisionReasonReq12", _nonProvisionReasonReq12);
		_columnOriginalValues.put("expectedDateReq12", _expectedDateReq12);
		_columnOriginalValues.put("category", _category);
		_columnOriginalValues.put(
			"osiServicesApplicationId", _osiServicesApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("oSIServiceSupportingDocIndId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("supportingDocCheckboxes", 128L);

		columnBitmasks.put("nonProvisionReasonReq1", 256L);

		columnBitmasks.put("expectedDateReq1", 512L);

		columnBitmasks.put("nonProvisionReasonReq2", 1024L);

		columnBitmasks.put("expectedDateReq2", 2048L);

		columnBitmasks.put("nonProvisionReasonReq3", 4096L);

		columnBitmasks.put("expectedDateReq3", 8192L);

		columnBitmasks.put("nonProvisionReasonReq4", 16384L);

		columnBitmasks.put("expectedDateReq4", 32768L);

		columnBitmasks.put("nonProvisionReasonReq5", 65536L);

		columnBitmasks.put("expectedDateReq5", 131072L);

		columnBitmasks.put("nonProvisionReasonReq6", 262144L);

		columnBitmasks.put("expectedDateReq6", 524288L);

		columnBitmasks.put("nonProvisionReasonReq7", 1048576L);

		columnBitmasks.put("expectedDateReq7", 2097152L);

		columnBitmasks.put("nonProvisionReasonReq8", 4194304L);

		columnBitmasks.put("expectedDateReq8", 8388608L);

		columnBitmasks.put("nonProvisionReasonReq9", 16777216L);

		columnBitmasks.put("expectedDateReq9", 33554432L);

		columnBitmasks.put("nonProvisionReasonReq10", 67108864L);

		columnBitmasks.put("expectedDateReq10", 134217728L);

		columnBitmasks.put("nonProvisionReasonReq11", 268435456L);

		columnBitmasks.put("expectedDateReq11", 536870912L);

		columnBitmasks.put("nonProvisionReasonReq12", 1073741824L);

		columnBitmasks.put("expectedDateReq12", 2147483648L);

		columnBitmasks.put("category", 4294967296L);

		columnBitmasks.put("osiServicesApplicationId", 8589934592L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OSIServiceSupportingDocInd _escapedModel;

}