/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.creative.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.creative.application.form.service.model.CreativeCompanyGeneralInformation;
import com.nbp.creative.application.form.service.model.CreativeCompanyGeneralInformationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CreativeCompanyGeneralInformation service. Represents a row in the &quot;nbp_creative_company_gen_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CreativeCompanyGeneralInformationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CreativeCompanyGeneralInformationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CreativeCompanyGeneralInformationImpl
 * @generated
 */
@JSON(strict = true)
public class CreativeCompanyGeneralInformationModelImpl
	extends BaseModelImpl<CreativeCompanyGeneralInformation>
	implements CreativeCompanyGeneralInformationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a creative company general information model instance should use the <code>CreativeCompanyGeneralInformation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_creative_company_gen_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"creativeCompanyGeneralInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"HaveYouRecievedAny", Types.VARCHAR},
		{"mprsStartDate", Types.TIMESTAMP}, {"mprsEndDate", Types.TIMESTAMP},
		{"mttStartDate", Types.TIMESTAMP}, {"mttEndDate", Types.TIMESTAMP},
		{"CreativeApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("creativeCompanyGeneralInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("HaveYouRecievedAny", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mprsStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("mprsEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("mttStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("mttEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CreativeApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_creative_company_gen_info (creativeCompanyGeneralInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,HaveYouRecievedAny VARCHAR(75) null,mprsStartDate DATE null,mprsEndDate DATE null,mttStartDate DATE null,mttEndDate DATE null,CreativeApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_creative_company_gen_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY creativeCompanyGeneralInformation.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_creative_company_gen_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATIVEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CreativeCompanyGeneralInformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _creativeCompanyGeneralInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCreativeCompanyGeneralInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _creativeCompanyGeneralInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CreativeCompanyGeneralInformation.class;
	}

	@Override
	public String getModelClassName() {
		return CreativeCompanyGeneralInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CreativeCompanyGeneralInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<CreativeCompanyGeneralInformation, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyGeneralInformation, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CreativeCompanyGeneralInformation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CreativeCompanyGeneralInformation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CreativeCompanyGeneralInformation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CreativeCompanyGeneralInformation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CreativeCompanyGeneralInformation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CreativeCompanyGeneralInformation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CreativeCompanyGeneralInformation, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CreativeCompanyGeneralInformation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CreativeCompanyGeneralInformation, Object>>();

			attributeGetterFunctions.put(
				"creativeCompanyGeneralInfoId",
				CreativeCompanyGeneralInformation::
					getCreativeCompanyGeneralInfoId);
			attributeGetterFunctions.put(
				"groupId", CreativeCompanyGeneralInformation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CreativeCompanyGeneralInformation::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CreativeCompanyGeneralInformation::getUserId);
			attributeGetterFunctions.put(
				"userName", CreativeCompanyGeneralInformation::getUserName);
			attributeGetterFunctions.put(
				"createDate", CreativeCompanyGeneralInformation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				CreativeCompanyGeneralInformation::getModifiedDate);
			attributeGetterFunctions.put(
				"HaveYouRecievedAny",
				CreativeCompanyGeneralInformation::getHaveYouRecievedAny);
			attributeGetterFunctions.put(
				"mprsStartDate",
				CreativeCompanyGeneralInformation::getMprsStartDate);
			attributeGetterFunctions.put(
				"mprsEndDate",
				CreativeCompanyGeneralInformation::getMprsEndDate);
			attributeGetterFunctions.put(
				"mttStartDate",
				CreativeCompanyGeneralInformation::getMttStartDate);
			attributeGetterFunctions.put(
				"mttEndDate", CreativeCompanyGeneralInformation::getMttEndDate);
			attributeGetterFunctions.put(
				"CreativeApplicationId",
				CreativeCompanyGeneralInformation::getCreativeApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CreativeCompanyGeneralInformation, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CreativeCompanyGeneralInformation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CreativeCompanyGeneralInformation, ?>>();

			attributeSetterBiConsumers.put(
				"creativeCompanyGeneralInfoId",
				(BiConsumer<CreativeCompanyGeneralInformation, Long>)
					CreativeCompanyGeneralInformation::
						setCreativeCompanyGeneralInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CreativeCompanyGeneralInformation, Long>)
					CreativeCompanyGeneralInformation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CreativeCompanyGeneralInformation, Long>)
					CreativeCompanyGeneralInformation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CreativeCompanyGeneralInformation, Long>)
					CreativeCompanyGeneralInformation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CreativeCompanyGeneralInformation, String>)
					CreativeCompanyGeneralInformation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CreativeCompanyGeneralInformation, Date>)
					CreativeCompanyGeneralInformation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CreativeCompanyGeneralInformation, Date>)
					CreativeCompanyGeneralInformation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"HaveYouRecievedAny",
				(BiConsumer<CreativeCompanyGeneralInformation, String>)
					CreativeCompanyGeneralInformation::setHaveYouRecievedAny);
			attributeSetterBiConsumers.put(
				"mprsStartDate",
				(BiConsumer<CreativeCompanyGeneralInformation, Date>)
					CreativeCompanyGeneralInformation::setMprsStartDate);
			attributeSetterBiConsumers.put(
				"mprsEndDate",
				(BiConsumer<CreativeCompanyGeneralInformation, Date>)
					CreativeCompanyGeneralInformation::setMprsEndDate);
			attributeSetterBiConsumers.put(
				"mttStartDate",
				(BiConsumer<CreativeCompanyGeneralInformation, Date>)
					CreativeCompanyGeneralInformation::setMttStartDate);
			attributeSetterBiConsumers.put(
				"mttEndDate",
				(BiConsumer<CreativeCompanyGeneralInformation, Date>)
					CreativeCompanyGeneralInformation::setMttEndDate);
			attributeSetterBiConsumers.put(
				"CreativeApplicationId",
				(BiConsumer<CreativeCompanyGeneralInformation, Long>)
					CreativeCompanyGeneralInformation::
						setCreativeApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCreativeCompanyGeneralInfoId() {
		return _creativeCompanyGeneralInfoId;
	}

	@Override
	public void setCreativeCompanyGeneralInfoId(
		long creativeCompanyGeneralInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeCompanyGeneralInfoId = creativeCompanyGeneralInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getHaveYouRecievedAny() {
		if (_HaveYouRecievedAny == null) {
			return "";
		}
		else {
			return _HaveYouRecievedAny;
		}
	}

	@Override
	public void setHaveYouRecievedAny(String HaveYouRecievedAny) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_HaveYouRecievedAny = HaveYouRecievedAny;
	}

	@JSON
	@Override
	public Date getMprsStartDate() {
		return _mprsStartDate;
	}

	@Override
	public void setMprsStartDate(Date mprsStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mprsStartDate = mprsStartDate;
	}

	@JSON
	@Override
	public Date getMprsEndDate() {
		return _mprsEndDate;
	}

	@Override
	public void setMprsEndDate(Date mprsEndDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mprsEndDate = mprsEndDate;
	}

	@JSON
	@Override
	public Date getMttStartDate() {
		return _mttStartDate;
	}

	@Override
	public void setMttStartDate(Date mttStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mttStartDate = mttStartDate;
	}

	@JSON
	@Override
	public Date getMttEndDate() {
		return _mttEndDate;
	}

	@Override
	public void setMttEndDate(Date mttEndDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mttEndDate = mttEndDate;
	}

	@JSON
	@Override
	public long getCreativeApplicationId() {
		return _CreativeApplicationId;
	}

	@Override
	public void setCreativeApplicationId(long CreativeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CreativeApplicationId = CreativeApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreativeApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CreativeCompanyGeneralInformation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CreativeCompanyGeneralInformation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CreativeCompanyGeneralInformation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CreativeCompanyGeneralInformationImpl
			creativeCompanyGeneralInformationImpl =
				new CreativeCompanyGeneralInformationImpl();

		creativeCompanyGeneralInformationImpl.setCreativeCompanyGeneralInfoId(
			getCreativeCompanyGeneralInfoId());
		creativeCompanyGeneralInformationImpl.setGroupId(getGroupId());
		creativeCompanyGeneralInformationImpl.setCompanyId(getCompanyId());
		creativeCompanyGeneralInformationImpl.setUserId(getUserId());
		creativeCompanyGeneralInformationImpl.setUserName(getUserName());
		creativeCompanyGeneralInformationImpl.setCreateDate(getCreateDate());
		creativeCompanyGeneralInformationImpl.setModifiedDate(
			getModifiedDate());
		creativeCompanyGeneralInformationImpl.setHaveYouRecievedAny(
			getHaveYouRecievedAny());
		creativeCompanyGeneralInformationImpl.setMprsStartDate(
			getMprsStartDate());
		creativeCompanyGeneralInformationImpl.setMprsEndDate(getMprsEndDate());
		creativeCompanyGeneralInformationImpl.setMttStartDate(
			getMttStartDate());
		creativeCompanyGeneralInformationImpl.setMttEndDate(getMttEndDate());
		creativeCompanyGeneralInformationImpl.setCreativeApplicationId(
			getCreativeApplicationId());

		creativeCompanyGeneralInformationImpl.resetOriginalValues();

		return creativeCompanyGeneralInformationImpl;
	}

	@Override
	public CreativeCompanyGeneralInformation cloneWithOriginalValues() {
		CreativeCompanyGeneralInformationImpl
			creativeCompanyGeneralInformationImpl =
				new CreativeCompanyGeneralInformationImpl();

		creativeCompanyGeneralInformationImpl.setCreativeCompanyGeneralInfoId(
			this.<Long>getColumnOriginalValue("creativeCompanyGeneralInfoId"));
		creativeCompanyGeneralInformationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		creativeCompanyGeneralInformationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		creativeCompanyGeneralInformationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		creativeCompanyGeneralInformationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		creativeCompanyGeneralInformationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		creativeCompanyGeneralInformationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		creativeCompanyGeneralInformationImpl.setHaveYouRecievedAny(
			this.<String>getColumnOriginalValue("HaveYouRecievedAny"));
		creativeCompanyGeneralInformationImpl.setMprsStartDate(
			this.<Date>getColumnOriginalValue("mprsStartDate"));
		creativeCompanyGeneralInformationImpl.setMprsEndDate(
			this.<Date>getColumnOriginalValue("mprsEndDate"));
		creativeCompanyGeneralInformationImpl.setMttStartDate(
			this.<Date>getColumnOriginalValue("mttStartDate"));
		creativeCompanyGeneralInformationImpl.setMttEndDate(
			this.<Date>getColumnOriginalValue("mttEndDate"));
		creativeCompanyGeneralInformationImpl.setCreativeApplicationId(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));

		return creativeCompanyGeneralInformationImpl;
	}

	@Override
	public int compareTo(
		CreativeCompanyGeneralInformation creativeCompanyGeneralInformation) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), creativeCompanyGeneralInformation.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CreativeCompanyGeneralInformation)) {
			return false;
		}

		CreativeCompanyGeneralInformation creativeCompanyGeneralInformation =
			(CreativeCompanyGeneralInformation)object;

		long primaryKey = creativeCompanyGeneralInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CreativeCompanyGeneralInformation> toCacheModel() {
		CreativeCompanyGeneralInformationCacheModel
			creativeCompanyGeneralInformationCacheModel =
				new CreativeCompanyGeneralInformationCacheModel();

		creativeCompanyGeneralInformationCacheModel.
			creativeCompanyGeneralInfoId = getCreativeCompanyGeneralInfoId();

		creativeCompanyGeneralInformationCacheModel.groupId = getGroupId();

		creativeCompanyGeneralInformationCacheModel.companyId = getCompanyId();

		creativeCompanyGeneralInformationCacheModel.userId = getUserId();

		creativeCompanyGeneralInformationCacheModel.userName = getUserName();

		String userName = creativeCompanyGeneralInformationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			creativeCompanyGeneralInformationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			creativeCompanyGeneralInformationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			creativeCompanyGeneralInformationCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			creativeCompanyGeneralInformationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			creativeCompanyGeneralInformationCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		creativeCompanyGeneralInformationCacheModel.HaveYouRecievedAny =
			getHaveYouRecievedAny();

		String HaveYouRecievedAny =
			creativeCompanyGeneralInformationCacheModel.HaveYouRecievedAny;

		if ((HaveYouRecievedAny != null) &&
			(HaveYouRecievedAny.length() == 0)) {

			creativeCompanyGeneralInformationCacheModel.HaveYouRecievedAny =
				null;
		}

		Date mprsStartDate = getMprsStartDate();

		if (mprsStartDate != null) {
			creativeCompanyGeneralInformationCacheModel.mprsStartDate =
				mprsStartDate.getTime();
		}
		else {
			creativeCompanyGeneralInformationCacheModel.mprsStartDate =
				Long.MIN_VALUE;
		}

		Date mprsEndDate = getMprsEndDate();

		if (mprsEndDate != null) {
			creativeCompanyGeneralInformationCacheModel.mprsEndDate =
				mprsEndDate.getTime();
		}
		else {
			creativeCompanyGeneralInformationCacheModel.mprsEndDate =
				Long.MIN_VALUE;
		}

		Date mttStartDate = getMttStartDate();

		if (mttStartDate != null) {
			creativeCompanyGeneralInformationCacheModel.mttStartDate =
				mttStartDate.getTime();
		}
		else {
			creativeCompanyGeneralInformationCacheModel.mttStartDate =
				Long.MIN_VALUE;
		}

		Date mttEndDate = getMttEndDate();

		if (mttEndDate != null) {
			creativeCompanyGeneralInformationCacheModel.mttEndDate =
				mttEndDate.getTime();
		}
		else {
			creativeCompanyGeneralInformationCacheModel.mttEndDate =
				Long.MIN_VALUE;
		}

		creativeCompanyGeneralInformationCacheModel.CreativeApplicationId =
			getCreativeApplicationId();

		return creativeCompanyGeneralInformationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CreativeCompanyGeneralInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<CreativeCompanyGeneralInformation, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyGeneralInformation, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CreativeCompanyGeneralInformation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CreativeCompanyGeneralInformation>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CreativeCompanyGeneralInformation.class,
						ModelWrapper.class);

	}

	private long _creativeCompanyGeneralInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _HaveYouRecievedAny;
	private Date _mprsStartDate;
	private Date _mprsEndDate;
	private Date _mttStartDate;
	private Date _mttEndDate;
	private long _CreativeApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<CreativeCompanyGeneralInformation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CreativeCompanyGeneralInformation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"creativeCompanyGeneralInfoId", _creativeCompanyGeneralInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("HaveYouRecievedAny", _HaveYouRecievedAny);
		_columnOriginalValues.put("mprsStartDate", _mprsStartDate);
		_columnOriginalValues.put("mprsEndDate", _mprsEndDate);
		_columnOriginalValues.put("mttStartDate", _mttStartDate);
		_columnOriginalValues.put("mttEndDate", _mttEndDate);
		_columnOriginalValues.put(
			"CreativeApplicationId", _CreativeApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("creativeCompanyGeneralInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("HaveYouRecievedAny", 128L);

		columnBitmasks.put("mprsStartDate", 256L);

		columnBitmasks.put("mprsEndDate", 512L);

		columnBitmasks.put("mttStartDate", 1024L);

		columnBitmasks.put("mttEndDate", 2048L);

		columnBitmasks.put("CreativeApplicationId", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CreativeCompanyGeneralInformation _escapedModel;

}