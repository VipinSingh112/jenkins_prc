/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.creative.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.creative.application.form.service.model.CreativeCompanyDirectorInformation;
import com.nbp.creative.application.form.service.model.CreativeCompanyDirectorInformationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CreativeCompanyDirectorInformation service. Represents a row in the &quot;nbp_comapny_director_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CreativeCompanyDirectorInformationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CreativeCompanyDirectorInformationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CreativeCompanyDirectorInformationImpl
 * @generated
 */
@JSON(strict = true)
public class CreativeCompanyDirectorInformationModelImpl
	extends BaseModelImpl<CreativeCompanyDirectorInformation>
	implements CreativeCompanyDirectorInformationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a creative company director information model instance should use the <code>CreativeCompanyDirectorInformation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_comapny_director_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"creativeComDirectorInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"directorFullName", Types.VARCHAR},
		{"directorTitle", Types.VARCHAR}, {"directorTrn", Types.VARCHAR},
		{"telephoneNumber", Types.VARCHAR}, {"faxNumber", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"socialMedia", Types.VARCHAR},
		{"profileName", Types.VARCHAR},
		{"isOperatorDifferentFromOwner", Types.VARCHAR},
		{"operatorFirstName", Types.VARCHAR},
		{"operatorMiddleName", Types.VARCHAR},
		{"operatorLastName", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"country", Types.VARCHAR}, {"sex", Types.VARCHAR},
		{"trn", Types.VARCHAR}, {"cell", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"CreativeApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("creativeComDirectorInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("directorFullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("directorTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("directorTrn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("faxNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("socialMedia", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("profileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isOperatorDifferentFromOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operatorFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operatorMiddleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operatorLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sex", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cell", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CreativeApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_comapny_director_info (creativeComDirectorInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,directorFullName VARCHAR(75) null,directorTitle VARCHAR(75) null,directorTrn VARCHAR(75) null,telephoneNumber VARCHAR(75) null,faxNumber VARCHAR(75) null,emailAddress VARCHAR(75) null,socialMedia VARCHAR(75) null,profileName VARCHAR(75) null,isOperatorDifferentFromOwner VARCHAR(75) null,operatorFirstName VARCHAR(75) null,operatorMiddleName VARCHAR(75) null,operatorLastName VARCHAR(75) null,city VARCHAR(75) null,country VARCHAR(75) null,sex VARCHAR(75) null,trn VARCHAR(75) null,cell VARCHAR(75) null,email VARCHAR(75) null,CreativeApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_comapny_director_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY creativeCompanyDirectorInformation.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_comapny_director_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATIVEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CreativeCompanyDirectorInformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _creativeComDirectorInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCreativeComDirectorInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _creativeComDirectorInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CreativeCompanyDirectorInformation.class;
	}

	@Override
	public String getModelClassName() {
		return CreativeCompanyDirectorInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CreativeCompanyDirectorInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<CreativeCompanyDirectorInformation, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyDirectorInformation, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CreativeCompanyDirectorInformation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CreativeCompanyDirectorInformation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CreativeCompanyDirectorInformation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CreativeCompanyDirectorInformation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CreativeCompanyDirectorInformation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CreativeCompanyDirectorInformation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CreativeCompanyDirectorInformation, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CreativeCompanyDirectorInformation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function
							 <CreativeCompanyDirectorInformation, Object>>();

			attributeGetterFunctions.put(
				"creativeComDirectorInfoId",
				CreativeCompanyDirectorInformation::
					getCreativeComDirectorInfoId);
			attributeGetterFunctions.put(
				"groupId", CreativeCompanyDirectorInformation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CreativeCompanyDirectorInformation::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CreativeCompanyDirectorInformation::getUserId);
			attributeGetterFunctions.put(
				"userName", CreativeCompanyDirectorInformation::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				CreativeCompanyDirectorInformation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				CreativeCompanyDirectorInformation::getModifiedDate);
			attributeGetterFunctions.put(
				"directorFullName",
				CreativeCompanyDirectorInformation::getDirectorFullName);
			attributeGetterFunctions.put(
				"directorTitle",
				CreativeCompanyDirectorInformation::getDirectorTitle);
			attributeGetterFunctions.put(
				"directorTrn",
				CreativeCompanyDirectorInformation::getDirectorTrn);
			attributeGetterFunctions.put(
				"telephoneNumber",
				CreativeCompanyDirectorInformation::getTelephoneNumber);
			attributeGetterFunctions.put(
				"faxNumber", CreativeCompanyDirectorInformation::getFaxNumber);
			attributeGetterFunctions.put(
				"emailAddress",
				CreativeCompanyDirectorInformation::getEmailAddress);
			attributeGetterFunctions.put(
				"socialMedia",
				CreativeCompanyDirectorInformation::getSocialMedia);
			attributeGetterFunctions.put(
				"profileName",
				CreativeCompanyDirectorInformation::getProfileName);
			attributeGetterFunctions.put(
				"isOperatorDifferentFromOwner",
				CreativeCompanyDirectorInformation::
					getIsOperatorDifferentFromOwner);
			attributeGetterFunctions.put(
				"operatorFirstName",
				CreativeCompanyDirectorInformation::getOperatorFirstName);
			attributeGetterFunctions.put(
				"operatorMiddleName",
				CreativeCompanyDirectorInformation::getOperatorMiddleName);
			attributeGetterFunctions.put(
				"operatorLastName",
				CreativeCompanyDirectorInformation::getOperatorLastName);
			attributeGetterFunctions.put(
				"city", CreativeCompanyDirectorInformation::getCity);
			attributeGetterFunctions.put(
				"country", CreativeCompanyDirectorInformation::getCountry);
			attributeGetterFunctions.put(
				"sex", CreativeCompanyDirectorInformation::getSex);
			attributeGetterFunctions.put(
				"trn", CreativeCompanyDirectorInformation::getTrn);
			attributeGetterFunctions.put(
				"cell", CreativeCompanyDirectorInformation::getCell);
			attributeGetterFunctions.put(
				"email", CreativeCompanyDirectorInformation::getEmail);
			attributeGetterFunctions.put(
				"CreativeApplicationId",
				CreativeCompanyDirectorInformation::getCreativeApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CreativeCompanyDirectorInformation, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CreativeCompanyDirectorInformation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CreativeCompanyDirectorInformation, ?>>();

			attributeSetterBiConsumers.put(
				"creativeComDirectorInfoId",
				(BiConsumer<CreativeCompanyDirectorInformation, Long>)
					CreativeCompanyDirectorInformation::
						setCreativeComDirectorInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CreativeCompanyDirectorInformation, Long>)
					CreativeCompanyDirectorInformation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CreativeCompanyDirectorInformation, Long>)
					CreativeCompanyDirectorInformation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CreativeCompanyDirectorInformation, Long>)
					CreativeCompanyDirectorInformation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CreativeCompanyDirectorInformation, Date>)
					CreativeCompanyDirectorInformation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CreativeCompanyDirectorInformation, Date>)
					CreativeCompanyDirectorInformation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"directorFullName",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setDirectorFullName);
			attributeSetterBiConsumers.put(
				"directorTitle",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setDirectorTitle);
			attributeSetterBiConsumers.put(
				"directorTrn",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setDirectorTrn);
			attributeSetterBiConsumers.put(
				"telephoneNumber",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setTelephoneNumber);
			attributeSetterBiConsumers.put(
				"faxNumber",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setFaxNumber);
			attributeSetterBiConsumers.put(
				"emailAddress",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setEmailAddress);
			attributeSetterBiConsumers.put(
				"socialMedia",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setSocialMedia);
			attributeSetterBiConsumers.put(
				"profileName",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setProfileName);
			attributeSetterBiConsumers.put(
				"isOperatorDifferentFromOwner",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::
						setIsOperatorDifferentFromOwner);
			attributeSetterBiConsumers.put(
				"operatorFirstName",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setOperatorFirstName);
			attributeSetterBiConsumers.put(
				"operatorMiddleName",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setOperatorMiddleName);
			attributeSetterBiConsumers.put(
				"operatorLastName",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setOperatorLastName);
			attributeSetterBiConsumers.put(
				"city",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setCity);
			attributeSetterBiConsumers.put(
				"country",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setCountry);
			attributeSetterBiConsumers.put(
				"sex",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setSex);
			attributeSetterBiConsumers.put(
				"trn",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setTrn);
			attributeSetterBiConsumers.put(
				"cell",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setCell);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<CreativeCompanyDirectorInformation, String>)
					CreativeCompanyDirectorInformation::setEmail);
			attributeSetterBiConsumers.put(
				"CreativeApplicationId",
				(BiConsumer<CreativeCompanyDirectorInformation, Long>)
					CreativeCompanyDirectorInformation::
						setCreativeApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCreativeComDirectorInfoId() {
		return _creativeComDirectorInfoId;
	}

	@Override
	public void setCreativeComDirectorInfoId(long creativeComDirectorInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeComDirectorInfoId = creativeComDirectorInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDirectorFullName() {
		if (_directorFullName == null) {
			return "";
		}
		else {
			return _directorFullName;
		}
	}

	@Override
	public void setDirectorFullName(String directorFullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_directorFullName = directorFullName;
	}

	@JSON
	@Override
	public String getDirectorTitle() {
		if (_directorTitle == null) {
			return "";
		}
		else {
			return _directorTitle;
		}
	}

	@Override
	public void setDirectorTitle(String directorTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_directorTitle = directorTitle;
	}

	@JSON
	@Override
	public String getDirectorTrn() {
		if (_directorTrn == null) {
			return "";
		}
		else {
			return _directorTrn;
		}
	}

	@Override
	public void setDirectorTrn(String directorTrn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_directorTrn = directorTrn;
	}

	@JSON
	@Override
	public String getTelephoneNumber() {
		if (_telephoneNumber == null) {
			return "";
		}
		else {
			return _telephoneNumber;
		}
	}

	@Override
	public void setTelephoneNumber(String telephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneNumber = telephoneNumber;
	}

	@JSON
	@Override
	public String getFaxNumber() {
		if (_faxNumber == null) {
			return "";
		}
		else {
			return _faxNumber;
		}
	}

	@Override
	public void setFaxNumber(String faxNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_faxNumber = faxNumber;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getSocialMedia() {
		if (_socialMedia == null) {
			return "";
		}
		else {
			return _socialMedia;
		}
	}

	@Override
	public void setSocialMedia(String socialMedia) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_socialMedia = socialMedia;
	}

	@JSON
	@Override
	public String getProfileName() {
		if (_profileName == null) {
			return "";
		}
		else {
			return _profileName;
		}
	}

	@Override
	public void setProfileName(String profileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_profileName = profileName;
	}

	@JSON
	@Override
	public String getIsOperatorDifferentFromOwner() {
		if (_isOperatorDifferentFromOwner == null) {
			return "";
		}
		else {
			return _isOperatorDifferentFromOwner;
		}
	}

	@Override
	public void setIsOperatorDifferentFromOwner(
		String isOperatorDifferentFromOwner) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isOperatorDifferentFromOwner = isOperatorDifferentFromOwner;
	}

	@JSON
	@Override
	public String getOperatorFirstName() {
		if (_operatorFirstName == null) {
			return "";
		}
		else {
			return _operatorFirstName;
		}
	}

	@Override
	public void setOperatorFirstName(String operatorFirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operatorFirstName = operatorFirstName;
	}

	@JSON
	@Override
	public String getOperatorMiddleName() {
		if (_operatorMiddleName == null) {
			return "";
		}
		else {
			return _operatorMiddleName;
		}
	}

	@Override
	public void setOperatorMiddleName(String operatorMiddleName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operatorMiddleName = operatorMiddleName;
	}

	@JSON
	@Override
	public String getOperatorLastName() {
		if (_operatorLastName == null) {
			return "";
		}
		else {
			return _operatorLastName;
		}
	}

	@Override
	public void setOperatorLastName(String operatorLastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operatorLastName = operatorLastName;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@JSON
	@Override
	public String getSex() {
		if (_sex == null) {
			return "";
		}
		else {
			return _sex;
		}
	}

	@Override
	public void setSex(String sex) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sex = sex;
	}

	@JSON
	@Override
	public String getTrn() {
		if (_trn == null) {
			return "";
		}
		else {
			return _trn;
		}
	}

	@Override
	public void setTrn(String trn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trn = trn;
	}

	@JSON
	@Override
	public String getCell() {
		if (_cell == null) {
			return "";
		}
		else {
			return _cell;
		}
	}

	@Override
	public void setCell(String cell) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cell = cell;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public long getCreativeApplicationId() {
		return _CreativeApplicationId;
	}

	@Override
	public void setCreativeApplicationId(long CreativeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CreativeApplicationId = CreativeApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreativeApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CreativeCompanyDirectorInformation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CreativeCompanyDirectorInformation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CreativeCompanyDirectorInformation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CreativeCompanyDirectorInformationImpl
			creativeCompanyDirectorInformationImpl =
				new CreativeCompanyDirectorInformationImpl();

		creativeCompanyDirectorInformationImpl.setCreativeComDirectorInfoId(
			getCreativeComDirectorInfoId());
		creativeCompanyDirectorInformationImpl.setGroupId(getGroupId());
		creativeCompanyDirectorInformationImpl.setCompanyId(getCompanyId());
		creativeCompanyDirectorInformationImpl.setUserId(getUserId());
		creativeCompanyDirectorInformationImpl.setUserName(getUserName());
		creativeCompanyDirectorInformationImpl.setCreateDate(getCreateDate());
		creativeCompanyDirectorInformationImpl.setModifiedDate(
			getModifiedDate());
		creativeCompanyDirectorInformationImpl.setDirectorFullName(
			getDirectorFullName());
		creativeCompanyDirectorInformationImpl.setDirectorTitle(
			getDirectorTitle());
		creativeCompanyDirectorInformationImpl.setDirectorTrn(getDirectorTrn());
		creativeCompanyDirectorInformationImpl.setTelephoneNumber(
			getTelephoneNumber());
		creativeCompanyDirectorInformationImpl.setFaxNumber(getFaxNumber());
		creativeCompanyDirectorInformationImpl.setEmailAddress(
			getEmailAddress());
		creativeCompanyDirectorInformationImpl.setSocialMedia(getSocialMedia());
		creativeCompanyDirectorInformationImpl.setProfileName(getProfileName());
		creativeCompanyDirectorInformationImpl.setIsOperatorDifferentFromOwner(
			getIsOperatorDifferentFromOwner());
		creativeCompanyDirectorInformationImpl.setOperatorFirstName(
			getOperatorFirstName());
		creativeCompanyDirectorInformationImpl.setOperatorMiddleName(
			getOperatorMiddleName());
		creativeCompanyDirectorInformationImpl.setOperatorLastName(
			getOperatorLastName());
		creativeCompanyDirectorInformationImpl.setCity(getCity());
		creativeCompanyDirectorInformationImpl.setCountry(getCountry());
		creativeCompanyDirectorInformationImpl.setSex(getSex());
		creativeCompanyDirectorInformationImpl.setTrn(getTrn());
		creativeCompanyDirectorInformationImpl.setCell(getCell());
		creativeCompanyDirectorInformationImpl.setEmail(getEmail());
		creativeCompanyDirectorInformationImpl.setCreativeApplicationId(
			getCreativeApplicationId());

		creativeCompanyDirectorInformationImpl.resetOriginalValues();

		return creativeCompanyDirectorInformationImpl;
	}

	@Override
	public CreativeCompanyDirectorInformation cloneWithOriginalValues() {
		CreativeCompanyDirectorInformationImpl
			creativeCompanyDirectorInformationImpl =
				new CreativeCompanyDirectorInformationImpl();

		creativeCompanyDirectorInformationImpl.setCreativeComDirectorInfoId(
			this.<Long>getColumnOriginalValue("creativeComDirectorInfoId"));
		creativeCompanyDirectorInformationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		creativeCompanyDirectorInformationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		creativeCompanyDirectorInformationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		creativeCompanyDirectorInformationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		creativeCompanyDirectorInformationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		creativeCompanyDirectorInformationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		creativeCompanyDirectorInformationImpl.setDirectorFullName(
			this.<String>getColumnOriginalValue("directorFullName"));
		creativeCompanyDirectorInformationImpl.setDirectorTitle(
			this.<String>getColumnOriginalValue("directorTitle"));
		creativeCompanyDirectorInformationImpl.setDirectorTrn(
			this.<String>getColumnOriginalValue("directorTrn"));
		creativeCompanyDirectorInformationImpl.setTelephoneNumber(
			this.<String>getColumnOriginalValue("telephoneNumber"));
		creativeCompanyDirectorInformationImpl.setFaxNumber(
			this.<String>getColumnOriginalValue("faxNumber"));
		creativeCompanyDirectorInformationImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		creativeCompanyDirectorInformationImpl.setSocialMedia(
			this.<String>getColumnOriginalValue("socialMedia"));
		creativeCompanyDirectorInformationImpl.setProfileName(
			this.<String>getColumnOriginalValue("profileName"));
		creativeCompanyDirectorInformationImpl.setIsOperatorDifferentFromOwner(
			this.<String>getColumnOriginalValue(
				"isOperatorDifferentFromOwner"));
		creativeCompanyDirectorInformationImpl.setOperatorFirstName(
			this.<String>getColumnOriginalValue("operatorFirstName"));
		creativeCompanyDirectorInformationImpl.setOperatorMiddleName(
			this.<String>getColumnOriginalValue("operatorMiddleName"));
		creativeCompanyDirectorInformationImpl.setOperatorLastName(
			this.<String>getColumnOriginalValue("operatorLastName"));
		creativeCompanyDirectorInformationImpl.setCity(
			this.<String>getColumnOriginalValue("city"));
		creativeCompanyDirectorInformationImpl.setCountry(
			this.<String>getColumnOriginalValue("country"));
		creativeCompanyDirectorInformationImpl.setSex(
			this.<String>getColumnOriginalValue("sex"));
		creativeCompanyDirectorInformationImpl.setTrn(
			this.<String>getColumnOriginalValue("trn"));
		creativeCompanyDirectorInformationImpl.setCell(
			this.<String>getColumnOriginalValue("cell"));
		creativeCompanyDirectorInformationImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		creativeCompanyDirectorInformationImpl.setCreativeApplicationId(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));

		return creativeCompanyDirectorInformationImpl;
	}

	@Override
	public int compareTo(
		CreativeCompanyDirectorInformation creativeCompanyDirectorInformation) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(),
			creativeCompanyDirectorInformation.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CreativeCompanyDirectorInformation)) {
			return false;
		}

		CreativeCompanyDirectorInformation creativeCompanyDirectorInformation =
			(CreativeCompanyDirectorInformation)object;

		long primaryKey = creativeCompanyDirectorInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CreativeCompanyDirectorInformation> toCacheModel() {
		CreativeCompanyDirectorInformationCacheModel
			creativeCompanyDirectorInformationCacheModel =
				new CreativeCompanyDirectorInformationCacheModel();

		creativeCompanyDirectorInformationCacheModel.creativeComDirectorInfoId =
			getCreativeComDirectorInfoId();

		creativeCompanyDirectorInformationCacheModel.groupId = getGroupId();

		creativeCompanyDirectorInformationCacheModel.companyId = getCompanyId();

		creativeCompanyDirectorInformationCacheModel.userId = getUserId();

		creativeCompanyDirectorInformationCacheModel.userName = getUserName();

		String userName = creativeCompanyDirectorInformationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			creativeCompanyDirectorInformationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			creativeCompanyDirectorInformationCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			creativeCompanyDirectorInformationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			creativeCompanyDirectorInformationCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		creativeCompanyDirectorInformationCacheModel.directorFullName =
			getDirectorFullName();

		String directorFullName =
			creativeCompanyDirectorInformationCacheModel.directorFullName;

		if ((directorFullName != null) && (directorFullName.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.directorFullName =
				null;
		}

		creativeCompanyDirectorInformationCacheModel.directorTitle =
			getDirectorTitle();

		String directorTitle =
			creativeCompanyDirectorInformationCacheModel.directorTitle;

		if ((directorTitle != null) && (directorTitle.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.directorTitle = null;
		}

		creativeCompanyDirectorInformationCacheModel.directorTrn =
			getDirectorTrn();

		String directorTrn =
			creativeCompanyDirectorInformationCacheModel.directorTrn;

		if ((directorTrn != null) && (directorTrn.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.directorTrn = null;
		}

		creativeCompanyDirectorInformationCacheModel.telephoneNumber =
			getTelephoneNumber();

		String telephoneNumber =
			creativeCompanyDirectorInformationCacheModel.telephoneNumber;

		if ((telephoneNumber != null) && (telephoneNumber.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.telephoneNumber = null;
		}

		creativeCompanyDirectorInformationCacheModel.faxNumber = getFaxNumber();

		String faxNumber =
			creativeCompanyDirectorInformationCacheModel.faxNumber;

		if ((faxNumber != null) && (faxNumber.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.faxNumber = null;
		}

		creativeCompanyDirectorInformationCacheModel.emailAddress =
			getEmailAddress();

		String emailAddress =
			creativeCompanyDirectorInformationCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.emailAddress = null;
		}

		creativeCompanyDirectorInformationCacheModel.socialMedia =
			getSocialMedia();

		String socialMedia =
			creativeCompanyDirectorInformationCacheModel.socialMedia;

		if ((socialMedia != null) && (socialMedia.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.socialMedia = null;
		}

		creativeCompanyDirectorInformationCacheModel.profileName =
			getProfileName();

		String profileName =
			creativeCompanyDirectorInformationCacheModel.profileName;

		if ((profileName != null) && (profileName.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.profileName = null;
		}

		creativeCompanyDirectorInformationCacheModel.
			isOperatorDifferentFromOwner = getIsOperatorDifferentFromOwner();

		String isOperatorDifferentFromOwner =
			creativeCompanyDirectorInformationCacheModel.
				isOperatorDifferentFromOwner;

		if ((isOperatorDifferentFromOwner != null) &&
			(isOperatorDifferentFromOwner.length() == 0)) {

			creativeCompanyDirectorInformationCacheModel.
				isOperatorDifferentFromOwner = null;
		}

		creativeCompanyDirectorInformationCacheModel.operatorFirstName =
			getOperatorFirstName();

		String operatorFirstName =
			creativeCompanyDirectorInformationCacheModel.operatorFirstName;

		if ((operatorFirstName != null) && (operatorFirstName.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.operatorFirstName =
				null;
		}

		creativeCompanyDirectorInformationCacheModel.operatorMiddleName =
			getOperatorMiddleName();

		String operatorMiddleName =
			creativeCompanyDirectorInformationCacheModel.operatorMiddleName;

		if ((operatorMiddleName != null) &&
			(operatorMiddleName.length() == 0)) {

			creativeCompanyDirectorInformationCacheModel.operatorMiddleName =
				null;
		}

		creativeCompanyDirectorInformationCacheModel.operatorLastName =
			getOperatorLastName();

		String operatorLastName =
			creativeCompanyDirectorInformationCacheModel.operatorLastName;

		if ((operatorLastName != null) && (operatorLastName.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.operatorLastName =
				null;
		}

		creativeCompanyDirectorInformationCacheModel.city = getCity();

		String city = creativeCompanyDirectorInformationCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.city = null;
		}

		creativeCompanyDirectorInformationCacheModel.country = getCountry();

		String country = creativeCompanyDirectorInformationCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.country = null;
		}

		creativeCompanyDirectorInformationCacheModel.sex = getSex();

		String sex = creativeCompanyDirectorInformationCacheModel.sex;

		if ((sex != null) && (sex.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.sex = null;
		}

		creativeCompanyDirectorInformationCacheModel.trn = getTrn();

		String trn = creativeCompanyDirectorInformationCacheModel.trn;

		if ((trn != null) && (trn.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.trn = null;
		}

		creativeCompanyDirectorInformationCacheModel.cell = getCell();

		String cell = creativeCompanyDirectorInformationCacheModel.cell;

		if ((cell != null) && (cell.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.cell = null;
		}

		creativeCompanyDirectorInformationCacheModel.email = getEmail();

		String email = creativeCompanyDirectorInformationCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			creativeCompanyDirectorInformationCacheModel.email = null;
		}

		creativeCompanyDirectorInformationCacheModel.CreativeApplicationId =
			getCreativeApplicationId();

		return creativeCompanyDirectorInformationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CreativeCompanyDirectorInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<CreativeCompanyDirectorInformation, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyDirectorInformation, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CreativeCompanyDirectorInformation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CreativeCompanyDirectorInformation>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CreativeCompanyDirectorInformation.class,
						ModelWrapper.class);

	}

	private long _creativeComDirectorInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _directorFullName;
	private String _directorTitle;
	private String _directorTrn;
	private String _telephoneNumber;
	private String _faxNumber;
	private String _emailAddress;
	private String _socialMedia;
	private String _profileName;
	private String _isOperatorDifferentFromOwner;
	private String _operatorFirstName;
	private String _operatorMiddleName;
	private String _operatorLastName;
	private String _city;
	private String _country;
	private String _sex;
	private String _trn;
	private String _cell;
	private String _email;
	private long _CreativeApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<CreativeCompanyDirectorInformation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CreativeCompanyDirectorInformation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"creativeComDirectorInfoId", _creativeComDirectorInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("directorFullName", _directorFullName);
		_columnOriginalValues.put("directorTitle", _directorTitle);
		_columnOriginalValues.put("directorTrn", _directorTrn);
		_columnOriginalValues.put("telephoneNumber", _telephoneNumber);
		_columnOriginalValues.put("faxNumber", _faxNumber);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("socialMedia", _socialMedia);
		_columnOriginalValues.put("profileName", _profileName);
		_columnOriginalValues.put(
			"isOperatorDifferentFromOwner", _isOperatorDifferentFromOwner);
		_columnOriginalValues.put("operatorFirstName", _operatorFirstName);
		_columnOriginalValues.put("operatorMiddleName", _operatorMiddleName);
		_columnOriginalValues.put("operatorLastName", _operatorLastName);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("country", _country);
		_columnOriginalValues.put("sex", _sex);
		_columnOriginalValues.put("trn", _trn);
		_columnOriginalValues.put("cell", _cell);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put(
			"CreativeApplicationId", _CreativeApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("creativeComDirectorInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("directorFullName", 128L);

		columnBitmasks.put("directorTitle", 256L);

		columnBitmasks.put("directorTrn", 512L);

		columnBitmasks.put("telephoneNumber", 1024L);

		columnBitmasks.put("faxNumber", 2048L);

		columnBitmasks.put("emailAddress", 4096L);

		columnBitmasks.put("socialMedia", 8192L);

		columnBitmasks.put("profileName", 16384L);

		columnBitmasks.put("isOperatorDifferentFromOwner", 32768L);

		columnBitmasks.put("operatorFirstName", 65536L);

		columnBitmasks.put("operatorMiddleName", 131072L);

		columnBitmasks.put("operatorLastName", 262144L);

		columnBitmasks.put("city", 524288L);

		columnBitmasks.put("country", 1048576L);

		columnBitmasks.put("sex", 2097152L);

		columnBitmasks.put("trn", 4194304L);

		columnBitmasks.put("cell", 8388608L);

		columnBitmasks.put("email", 16777216L);

		columnBitmasks.put("CreativeApplicationId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CreativeCompanyDirectorInformation _escapedModel;

}