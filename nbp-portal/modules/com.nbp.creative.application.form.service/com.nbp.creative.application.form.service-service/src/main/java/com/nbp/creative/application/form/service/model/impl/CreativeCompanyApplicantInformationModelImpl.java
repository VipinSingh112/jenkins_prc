/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.creative.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.creative.application.form.service.model.CreativeCompanyApplicantInformation;
import com.nbp.creative.application.form.service.model.CreativeCompanyApplicantInformationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CreativeCompanyApplicantInformation service. Represents a row in the &quot;nbp_creative_com_appli_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CreativeCompanyApplicantInformationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CreativeCompanyApplicantInformationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CreativeCompanyApplicantInformationImpl
 * @generated
 */
@JSON(strict = true)
public class CreativeCompanyApplicantInformationModelImpl
	extends BaseModelImpl<CreativeCompanyApplicantInformation>
	implements CreativeCompanyApplicantInformationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a creative company applicant information model instance should use the <code>CreativeCompanyApplicantInformation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_creative_com_appli_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"creativeCompanyApplicantInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"prefix", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"sex", Types.VARCHAR},
		{"trn", Types.VARCHAR}, {"countryOfResidence", Types.VARCHAR},
		{"nationality", Types.VARCHAR}, {"cell", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"CreativeApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("creativeCompanyApplicantInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("prefix", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sex", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countryOfResidence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cell", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CreativeApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_creative_com_appli_info (creativeCompanyApplicantInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,prefix VARCHAR(75) null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,sex VARCHAR(75) null,trn VARCHAR(75) null,countryOfResidence VARCHAR(75) null,nationality VARCHAR(75) null,cell VARCHAR(75) null,email VARCHAR(75) null,CreativeApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_creative_com_appli_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY creativeCompanyApplicantInformation.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_creative_com_appli_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATIVEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CreativeCompanyApplicantInformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _creativeCompanyApplicantInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCreativeCompanyApplicantInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _creativeCompanyApplicantInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CreativeCompanyApplicantInformation.class;
	}

	@Override
	public String getModelClassName() {
		return CreativeCompanyApplicantInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CreativeCompanyApplicantInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<CreativeCompanyApplicantInformation, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyApplicantInformation, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CreativeCompanyApplicantInformation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CreativeCompanyApplicantInformation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CreativeCompanyApplicantInformation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CreativeCompanyApplicantInformation)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<CreativeCompanyApplicantInformation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CreativeCompanyApplicantInformation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CreativeCompanyApplicantInformation, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CreativeCompanyApplicantInformation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function
							 <CreativeCompanyApplicantInformation, Object>>();

			attributeGetterFunctions.put(
				"creativeCompanyApplicantInfoId",
				CreativeCompanyApplicantInformation::
					getCreativeCompanyApplicantInfoId);
			attributeGetterFunctions.put(
				"groupId", CreativeCompanyApplicantInformation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CreativeCompanyApplicantInformation::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CreativeCompanyApplicantInformation::getUserId);
			attributeGetterFunctions.put(
				"userName", CreativeCompanyApplicantInformation::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				CreativeCompanyApplicantInformation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				CreativeCompanyApplicantInformation::getModifiedDate);
			attributeGetterFunctions.put(
				"prefix", CreativeCompanyApplicantInformation::getPrefix);
			attributeGetterFunctions.put(
				"firstName", CreativeCompanyApplicantInformation::getFirstName);
			attributeGetterFunctions.put(
				"lastName", CreativeCompanyApplicantInformation::getLastName);
			attributeGetterFunctions.put(
				"sex", CreativeCompanyApplicantInformation::getSex);
			attributeGetterFunctions.put(
				"trn", CreativeCompanyApplicantInformation::getTrn);
			attributeGetterFunctions.put(
				"countryOfResidence",
				CreativeCompanyApplicantInformation::getCountryOfResidence);
			attributeGetterFunctions.put(
				"nationality",
				CreativeCompanyApplicantInformation::getNationality);
			attributeGetterFunctions.put(
				"cell", CreativeCompanyApplicantInformation::getCell);
			attributeGetterFunctions.put(
				"email", CreativeCompanyApplicantInformation::getEmail);
			attributeGetterFunctions.put(
				"CreativeApplicationId",
				CreativeCompanyApplicantInformation::getCreativeApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CreativeCompanyApplicantInformation, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CreativeCompanyApplicantInformation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CreativeCompanyApplicantInformation, ?>>();

			attributeSetterBiConsumers.put(
				"creativeCompanyApplicantInfoId",
				(BiConsumer<CreativeCompanyApplicantInformation, Long>)
					CreativeCompanyApplicantInformation::
						setCreativeCompanyApplicantInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CreativeCompanyApplicantInformation, Long>)
					CreativeCompanyApplicantInformation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CreativeCompanyApplicantInformation, Long>)
					CreativeCompanyApplicantInformation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CreativeCompanyApplicantInformation, Long>)
					CreativeCompanyApplicantInformation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CreativeCompanyApplicantInformation, Date>)
					CreativeCompanyApplicantInformation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CreativeCompanyApplicantInformation, Date>)
					CreativeCompanyApplicantInformation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"prefix",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setPrefix);
			attributeSetterBiConsumers.put(
				"firstName",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setFirstName);
			attributeSetterBiConsumers.put(
				"lastName",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setLastName);
			attributeSetterBiConsumers.put(
				"sex",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setSex);
			attributeSetterBiConsumers.put(
				"trn",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setTrn);
			attributeSetterBiConsumers.put(
				"countryOfResidence",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setCountryOfResidence);
			attributeSetterBiConsumers.put(
				"nationality",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setNationality);
			attributeSetterBiConsumers.put(
				"cell",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setCell);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<CreativeCompanyApplicantInformation, String>)
					CreativeCompanyApplicantInformation::setEmail);
			attributeSetterBiConsumers.put(
				"CreativeApplicationId",
				(BiConsumer<CreativeCompanyApplicantInformation, Long>)
					CreativeCompanyApplicantInformation::
						setCreativeApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCreativeCompanyApplicantInfoId() {
		return _creativeCompanyApplicantInfoId;
	}

	@Override
	public void setCreativeCompanyApplicantInfoId(
		long creativeCompanyApplicantInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeCompanyApplicantInfoId = creativeCompanyApplicantInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPrefix() {
		if (_prefix == null) {
			return "";
		}
		else {
			return _prefix;
		}
	}

	@Override
	public void setPrefix(String prefix) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prefix = prefix;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getSex() {
		if (_sex == null) {
			return "";
		}
		else {
			return _sex;
		}
	}

	@Override
	public void setSex(String sex) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sex = sex;
	}

	@JSON
	@Override
	public String getTrn() {
		if (_trn == null) {
			return "";
		}
		else {
			return _trn;
		}
	}

	@Override
	public void setTrn(String trn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trn = trn;
	}

	@JSON
	@Override
	public String getCountryOfResidence() {
		if (_countryOfResidence == null) {
			return "";
		}
		else {
			return _countryOfResidence;
		}
	}

	@Override
	public void setCountryOfResidence(String countryOfResidence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countryOfResidence = countryOfResidence;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return "";
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationality = nationality;
	}

	@JSON
	@Override
	public String getCell() {
		if (_cell == null) {
			return "";
		}
		else {
			return _cell;
		}
	}

	@Override
	public void setCell(String cell) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cell = cell;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public long getCreativeApplicationId() {
		return _CreativeApplicationId;
	}

	@Override
	public void setCreativeApplicationId(long CreativeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CreativeApplicationId = CreativeApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreativeApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CreativeCompanyApplicantInformation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CreativeCompanyApplicantInformation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CreativeCompanyApplicantInformation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CreativeCompanyApplicantInformationImpl
			creativeCompanyApplicantInformationImpl =
				new CreativeCompanyApplicantInformationImpl();

		creativeCompanyApplicantInformationImpl.
			setCreativeCompanyApplicantInfoId(
				getCreativeCompanyApplicantInfoId());
		creativeCompanyApplicantInformationImpl.setGroupId(getGroupId());
		creativeCompanyApplicantInformationImpl.setCompanyId(getCompanyId());
		creativeCompanyApplicantInformationImpl.setUserId(getUserId());
		creativeCompanyApplicantInformationImpl.setUserName(getUserName());
		creativeCompanyApplicantInformationImpl.setCreateDate(getCreateDate());
		creativeCompanyApplicantInformationImpl.setModifiedDate(
			getModifiedDate());
		creativeCompanyApplicantInformationImpl.setPrefix(getPrefix());
		creativeCompanyApplicantInformationImpl.setFirstName(getFirstName());
		creativeCompanyApplicantInformationImpl.setLastName(getLastName());
		creativeCompanyApplicantInformationImpl.setSex(getSex());
		creativeCompanyApplicantInformationImpl.setTrn(getTrn());
		creativeCompanyApplicantInformationImpl.setCountryOfResidence(
			getCountryOfResidence());
		creativeCompanyApplicantInformationImpl.setNationality(
			getNationality());
		creativeCompanyApplicantInformationImpl.setCell(getCell());
		creativeCompanyApplicantInformationImpl.setEmail(getEmail());
		creativeCompanyApplicantInformationImpl.setCreativeApplicationId(
			getCreativeApplicationId());

		creativeCompanyApplicantInformationImpl.resetOriginalValues();

		return creativeCompanyApplicantInformationImpl;
	}

	@Override
	public CreativeCompanyApplicantInformation cloneWithOriginalValues() {
		CreativeCompanyApplicantInformationImpl
			creativeCompanyApplicantInformationImpl =
				new CreativeCompanyApplicantInformationImpl();

		creativeCompanyApplicantInformationImpl.
			setCreativeCompanyApplicantInfoId(
				this.<Long>getColumnOriginalValue(
					"creativeCompanyApplicantInfoId"));
		creativeCompanyApplicantInformationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		creativeCompanyApplicantInformationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		creativeCompanyApplicantInformationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		creativeCompanyApplicantInformationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		creativeCompanyApplicantInformationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		creativeCompanyApplicantInformationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		creativeCompanyApplicantInformationImpl.setPrefix(
			this.<String>getColumnOriginalValue("prefix"));
		creativeCompanyApplicantInformationImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		creativeCompanyApplicantInformationImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		creativeCompanyApplicantInformationImpl.setSex(
			this.<String>getColumnOriginalValue("sex"));
		creativeCompanyApplicantInformationImpl.setTrn(
			this.<String>getColumnOriginalValue("trn"));
		creativeCompanyApplicantInformationImpl.setCountryOfResidence(
			this.<String>getColumnOriginalValue("countryOfResidence"));
		creativeCompanyApplicantInformationImpl.setNationality(
			this.<String>getColumnOriginalValue("nationality"));
		creativeCompanyApplicantInformationImpl.setCell(
			this.<String>getColumnOriginalValue("cell"));
		creativeCompanyApplicantInformationImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		creativeCompanyApplicantInformationImpl.setCreativeApplicationId(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));

		return creativeCompanyApplicantInformationImpl;
	}

	@Override
	public int compareTo(
		CreativeCompanyApplicantInformation
			creativeCompanyApplicantInformation) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(),
			creativeCompanyApplicantInformation.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CreativeCompanyApplicantInformation)) {
			return false;
		}

		CreativeCompanyApplicantInformation
			creativeCompanyApplicantInformation =
				(CreativeCompanyApplicantInformation)object;

		long primaryKey = creativeCompanyApplicantInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CreativeCompanyApplicantInformation> toCacheModel() {
		CreativeCompanyApplicantInformationCacheModel
			creativeCompanyApplicantInformationCacheModel =
				new CreativeCompanyApplicantInformationCacheModel();

		creativeCompanyApplicantInformationCacheModel.
			creativeCompanyApplicantInfoId =
				getCreativeCompanyApplicantInfoId();

		creativeCompanyApplicantInformationCacheModel.groupId = getGroupId();

		creativeCompanyApplicantInformationCacheModel.companyId =
			getCompanyId();

		creativeCompanyApplicantInformationCacheModel.userId = getUserId();

		creativeCompanyApplicantInformationCacheModel.userName = getUserName();

		String userName =
			creativeCompanyApplicantInformationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			creativeCompanyApplicantInformationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			creativeCompanyApplicantInformationCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			creativeCompanyApplicantInformationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			creativeCompanyApplicantInformationCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		creativeCompanyApplicantInformationCacheModel.prefix = getPrefix();

		String prefix = creativeCompanyApplicantInformationCacheModel.prefix;

		if ((prefix != null) && (prefix.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.prefix = null;
		}

		creativeCompanyApplicantInformationCacheModel.firstName =
			getFirstName();

		String firstName =
			creativeCompanyApplicantInformationCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.firstName = null;
		}

		creativeCompanyApplicantInformationCacheModel.lastName = getLastName();

		String lastName =
			creativeCompanyApplicantInformationCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.lastName = null;
		}

		creativeCompanyApplicantInformationCacheModel.sex = getSex();

		String sex = creativeCompanyApplicantInformationCacheModel.sex;

		if ((sex != null) && (sex.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.sex = null;
		}

		creativeCompanyApplicantInformationCacheModel.trn = getTrn();

		String trn = creativeCompanyApplicantInformationCacheModel.trn;

		if ((trn != null) && (trn.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.trn = null;
		}

		creativeCompanyApplicantInformationCacheModel.countryOfResidence =
			getCountryOfResidence();

		String countryOfResidence =
			creativeCompanyApplicantInformationCacheModel.countryOfResidence;

		if ((countryOfResidence != null) &&
			(countryOfResidence.length() == 0)) {

			creativeCompanyApplicantInformationCacheModel.countryOfResidence =
				null;
		}

		creativeCompanyApplicantInformationCacheModel.nationality =
			getNationality();

		String nationality =
			creativeCompanyApplicantInformationCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.nationality = null;
		}

		creativeCompanyApplicantInformationCacheModel.cell = getCell();

		String cell = creativeCompanyApplicantInformationCacheModel.cell;

		if ((cell != null) && (cell.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.cell = null;
		}

		creativeCompanyApplicantInformationCacheModel.email = getEmail();

		String email = creativeCompanyApplicantInformationCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			creativeCompanyApplicantInformationCacheModel.email = null;
		}

		creativeCompanyApplicantInformationCacheModel.CreativeApplicationId =
			getCreativeApplicationId();

		return creativeCompanyApplicantInformationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CreativeCompanyApplicantInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<CreativeCompanyApplicantInformation, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyApplicantInformation, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CreativeCompanyApplicantInformation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CreativeCompanyApplicantInformation>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CreativeCompanyApplicantInformation.class,
						ModelWrapper.class);

	}

	private long _creativeCompanyApplicantInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _prefix;
	private String _firstName;
	private String _lastName;
	private String _sex;
	private String _trn;
	private String _countryOfResidence;
	private String _nationality;
	private String _cell;
	private String _email;
	private long _CreativeApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<CreativeCompanyApplicantInformation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CreativeCompanyApplicantInformation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"creativeCompanyApplicantInfoId", _creativeCompanyApplicantInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("prefix", _prefix);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("sex", _sex);
		_columnOriginalValues.put("trn", _trn);
		_columnOriginalValues.put("countryOfResidence", _countryOfResidence);
		_columnOriginalValues.put("nationality", _nationality);
		_columnOriginalValues.put("cell", _cell);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put(
			"CreativeApplicationId", _CreativeApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("creativeCompanyApplicantInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("prefix", 128L);

		columnBitmasks.put("firstName", 256L);

		columnBitmasks.put("lastName", 512L);

		columnBitmasks.put("sex", 1024L);

		columnBitmasks.put("trn", 2048L);

		columnBitmasks.put("countryOfResidence", 4096L);

		columnBitmasks.put("nationality", 8192L);

		columnBitmasks.put("cell", 16384L);

		columnBitmasks.put("email", 32768L);

		columnBitmasks.put("CreativeApplicationId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CreativeCompanyApplicantInformation _escapedModel;

}