/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.creative.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.creative.application.form.service.model.CreativeCompanyEconomicEffect;
import com.nbp.creative.application.form.service.model.CreativeCompanyEconomicEffectModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CreativeCompanyEconomicEffect service. Represents a row in the &quot;nbp_creative_com_eco_effect&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CreativeCompanyEconomicEffectModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CreativeCompanyEconomicEffectImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CreativeCompanyEconomicEffectImpl
 * @generated
 */
@JSON(strict = true)
public class CreativeCompanyEconomicEffectModelImpl
	extends BaseModelImpl<CreativeCompanyEconomicEffect>
	implements CreativeCompanyEconomicEffectModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a creative company economic effect model instance should use the <code>CreativeCompanyEconomicEffect</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_creative_com_eco_effect";

	public static final Object[][] TABLE_COLUMNS = {
		{"creativeComEconomicEffectId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"assessmentcountryOfOrigin", Types.VARCHAR},
		{"ssessmentjointVenture", Types.VARCHAR},
		{"assessmentLocal", Types.VARCHAR},
		{"assessmentForeign", Types.VARCHAR}, {"shareJmd", Types.VARCHAR},
		{"shareExchangeRate", Types.VARCHAR}, {"shareUsd", Types.VARCHAR},
		{"localJmd", Types.VARCHAR}, {"localExchangeRate", Types.VARCHAR},
		{"localUsd", Types.VARCHAR}, {"otherJmd", Types.VARCHAR},
		{"otherExchangeRate", Types.VARCHAR}, {"OtherUsd", Types.VARCHAR},
		{"permanentLocalMale", Types.VARCHAR},
		{"permanentLocalFemale", Types.VARCHAR},
		{"permanentForeignMale", Types.VARCHAR},
		{"permanentForeignFemale", Types.VARCHAR},
		{"temporaryLocalMale", Types.VARCHAR},
		{"temporaryLocalFemale", Types.VARCHAR},
		{"temporaryForeignMale", Types.VARCHAR},
		{"temporaryForgeignFemale", Types.VARCHAR},
		{"totalLocalMale", Types.VARCHAR}, {"totalLocalFemale", Types.VARCHAR},
		{"totalForeignMale", Types.VARCHAR},
		{"totalForeignFemale", Types.VARCHAR},
		{"CreativeApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("creativeComEconomicEffectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("assessmentcountryOfOrigin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ssessmentjointVenture", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assessmentLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assessmentForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shareJmd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shareExchangeRate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shareUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localJmd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localExchangeRate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherJmd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherExchangeRate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OtherUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permanentLocalMale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permanentLocalFemale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permanentForeignMale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permanentForeignFemale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("temporaryLocalMale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("temporaryLocalFemale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("temporaryForeignMale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("temporaryForgeignFemale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalLocalMale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalLocalFemale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalForeignMale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalForeignFemale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CreativeApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_creative_com_eco_effect (creativeComEconomicEffectId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,assessmentcountryOfOrigin VARCHAR(75) null,ssessmentjointVenture VARCHAR(75) null,assessmentLocal VARCHAR(75) null,assessmentForeign VARCHAR(75) null,shareJmd VARCHAR(75) null,shareExchangeRate VARCHAR(75) null,shareUsd VARCHAR(75) null,localJmd VARCHAR(75) null,localExchangeRate VARCHAR(75) null,localUsd VARCHAR(75) null,otherJmd VARCHAR(75) null,otherExchangeRate VARCHAR(75) null,OtherUsd VARCHAR(75) null,permanentLocalMale VARCHAR(75) null,permanentLocalFemale VARCHAR(75) null,permanentForeignMale VARCHAR(75) null,permanentForeignFemale VARCHAR(75) null,temporaryLocalMale VARCHAR(75) null,temporaryLocalFemale VARCHAR(75) null,temporaryForeignMale VARCHAR(75) null,temporaryForgeignFemale VARCHAR(75) null,totalLocalMale VARCHAR(75) null,totalLocalFemale VARCHAR(75) null,totalForeignMale VARCHAR(75) null,totalForeignFemale VARCHAR(75) null,CreativeApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_creative_com_eco_effect";

	public static final String ORDER_BY_JPQL =
		" ORDER BY creativeCompanyEconomicEffect.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_creative_com_eco_effect.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATIVEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CreativeCompanyEconomicEffectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _creativeComEconomicEffectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCreativeComEconomicEffectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _creativeComEconomicEffectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CreativeCompanyEconomicEffect.class;
	}

	@Override
	public String getModelClassName() {
		return CreativeCompanyEconomicEffect.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CreativeCompanyEconomicEffect, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CreativeCompanyEconomicEffect, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyEconomicEffect, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CreativeCompanyEconomicEffect)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CreativeCompanyEconomicEffect, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CreativeCompanyEconomicEffect, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CreativeCompanyEconomicEffect)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CreativeCompanyEconomicEffect, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CreativeCompanyEconomicEffect, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CreativeCompanyEconomicEffect, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CreativeCompanyEconomicEffect, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CreativeCompanyEconomicEffect, Object>>();

			attributeGetterFunctions.put(
				"creativeComEconomicEffectId",
				CreativeCompanyEconomicEffect::getCreativeComEconomicEffectId);
			attributeGetterFunctions.put(
				"groupId", CreativeCompanyEconomicEffect::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CreativeCompanyEconomicEffect::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CreativeCompanyEconomicEffect::getUserId);
			attributeGetterFunctions.put(
				"userName", CreativeCompanyEconomicEffect::getUserName);
			attributeGetterFunctions.put(
				"createDate", CreativeCompanyEconomicEffect::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CreativeCompanyEconomicEffect::getModifiedDate);
			attributeGetterFunctions.put(
				"assessmentcountryOfOrigin",
				CreativeCompanyEconomicEffect::getAssessmentcountryOfOrigin);
			attributeGetterFunctions.put(
				"ssessmentjointVenture",
				CreativeCompanyEconomicEffect::getSsessmentjointVenture);
			attributeGetterFunctions.put(
				"assessmentLocal",
				CreativeCompanyEconomicEffect::getAssessmentLocal);
			attributeGetterFunctions.put(
				"assessmentForeign",
				CreativeCompanyEconomicEffect::getAssessmentForeign);
			attributeGetterFunctions.put(
				"shareJmd", CreativeCompanyEconomicEffect::getShareJmd);
			attributeGetterFunctions.put(
				"shareExchangeRate",
				CreativeCompanyEconomicEffect::getShareExchangeRate);
			attributeGetterFunctions.put(
				"shareUsd", CreativeCompanyEconomicEffect::getShareUsd);
			attributeGetterFunctions.put(
				"localJmd", CreativeCompanyEconomicEffect::getLocalJmd);
			attributeGetterFunctions.put(
				"localExchangeRate",
				CreativeCompanyEconomicEffect::getLocalExchangeRate);
			attributeGetterFunctions.put(
				"localUsd", CreativeCompanyEconomicEffect::getLocalUsd);
			attributeGetterFunctions.put(
				"otherJmd", CreativeCompanyEconomicEffect::getOtherJmd);
			attributeGetterFunctions.put(
				"otherExchangeRate",
				CreativeCompanyEconomicEffect::getOtherExchangeRate);
			attributeGetterFunctions.put(
				"OtherUsd", CreativeCompanyEconomicEffect::getOtherUsd);
			attributeGetterFunctions.put(
				"permanentLocalMale",
				CreativeCompanyEconomicEffect::getPermanentLocalMale);
			attributeGetterFunctions.put(
				"permanentLocalFemale",
				CreativeCompanyEconomicEffect::getPermanentLocalFemale);
			attributeGetterFunctions.put(
				"permanentForeignMale",
				CreativeCompanyEconomicEffect::getPermanentForeignMale);
			attributeGetterFunctions.put(
				"permanentForeignFemale",
				CreativeCompanyEconomicEffect::getPermanentForeignFemale);
			attributeGetterFunctions.put(
				"temporaryLocalMale",
				CreativeCompanyEconomicEffect::getTemporaryLocalMale);
			attributeGetterFunctions.put(
				"temporaryLocalFemale",
				CreativeCompanyEconomicEffect::getTemporaryLocalFemale);
			attributeGetterFunctions.put(
				"temporaryForeignMale",
				CreativeCompanyEconomicEffect::getTemporaryForeignMale);
			attributeGetterFunctions.put(
				"temporaryForgeignFemale",
				CreativeCompanyEconomicEffect::getTemporaryForgeignFemale);
			attributeGetterFunctions.put(
				"totalLocalMale",
				CreativeCompanyEconomicEffect::getTotalLocalMale);
			attributeGetterFunctions.put(
				"totalLocalFemale",
				CreativeCompanyEconomicEffect::getTotalLocalFemale);
			attributeGetterFunctions.put(
				"totalForeignMale",
				CreativeCompanyEconomicEffect::getTotalForeignMale);
			attributeGetterFunctions.put(
				"totalForeignFemale",
				CreativeCompanyEconomicEffect::getTotalForeignFemale);
			attributeGetterFunctions.put(
				"CreativeApplicationId",
				CreativeCompanyEconomicEffect::getCreativeApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CreativeCompanyEconomicEffect, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CreativeCompanyEconomicEffect, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CreativeCompanyEconomicEffect, ?>>();

			attributeSetterBiConsumers.put(
				"creativeComEconomicEffectId",
				(BiConsumer<CreativeCompanyEconomicEffect, Long>)
					CreativeCompanyEconomicEffect::
						setCreativeComEconomicEffectId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CreativeCompanyEconomicEffect, Long>)
					CreativeCompanyEconomicEffect::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CreativeCompanyEconomicEffect, Long>)
					CreativeCompanyEconomicEffect::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CreativeCompanyEconomicEffect, Long>)
					CreativeCompanyEconomicEffect::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CreativeCompanyEconomicEffect, Date>)
					CreativeCompanyEconomicEffect::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CreativeCompanyEconomicEffect, Date>)
					CreativeCompanyEconomicEffect::setModifiedDate);
			attributeSetterBiConsumers.put(
				"assessmentcountryOfOrigin",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::
						setAssessmentcountryOfOrigin);
			attributeSetterBiConsumers.put(
				"ssessmentjointVenture",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setSsessmentjointVenture);
			attributeSetterBiConsumers.put(
				"assessmentLocal",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setAssessmentLocal);
			attributeSetterBiConsumers.put(
				"assessmentForeign",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setAssessmentForeign);
			attributeSetterBiConsumers.put(
				"shareJmd",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setShareJmd);
			attributeSetterBiConsumers.put(
				"shareExchangeRate",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setShareExchangeRate);
			attributeSetterBiConsumers.put(
				"shareUsd",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setShareUsd);
			attributeSetterBiConsumers.put(
				"localJmd",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setLocalJmd);
			attributeSetterBiConsumers.put(
				"localExchangeRate",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setLocalExchangeRate);
			attributeSetterBiConsumers.put(
				"localUsd",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setLocalUsd);
			attributeSetterBiConsumers.put(
				"otherJmd",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setOtherJmd);
			attributeSetterBiConsumers.put(
				"otherExchangeRate",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setOtherExchangeRate);
			attributeSetterBiConsumers.put(
				"OtherUsd",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setOtherUsd);
			attributeSetterBiConsumers.put(
				"permanentLocalMale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setPermanentLocalMale);
			attributeSetterBiConsumers.put(
				"permanentLocalFemale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setPermanentLocalFemale);
			attributeSetterBiConsumers.put(
				"permanentForeignMale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setPermanentForeignMale);
			attributeSetterBiConsumers.put(
				"permanentForeignFemale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setPermanentForeignFemale);
			attributeSetterBiConsumers.put(
				"temporaryLocalMale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setTemporaryLocalMale);
			attributeSetterBiConsumers.put(
				"temporaryLocalFemale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setTemporaryLocalFemale);
			attributeSetterBiConsumers.put(
				"temporaryForeignMale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setTemporaryForeignMale);
			attributeSetterBiConsumers.put(
				"temporaryForgeignFemale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setTemporaryForgeignFemale);
			attributeSetterBiConsumers.put(
				"totalLocalMale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setTotalLocalMale);
			attributeSetterBiConsumers.put(
				"totalLocalFemale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setTotalLocalFemale);
			attributeSetterBiConsumers.put(
				"totalForeignMale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setTotalForeignMale);
			attributeSetterBiConsumers.put(
				"totalForeignFemale",
				(BiConsumer<CreativeCompanyEconomicEffect, String>)
					CreativeCompanyEconomicEffect::setTotalForeignFemale);
			attributeSetterBiConsumers.put(
				"CreativeApplicationId",
				(BiConsumer<CreativeCompanyEconomicEffect, Long>)
					CreativeCompanyEconomicEffect::setCreativeApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCreativeComEconomicEffectId() {
		return _creativeComEconomicEffectId;
	}

	@Override
	public void setCreativeComEconomicEffectId(
		long creativeComEconomicEffectId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeComEconomicEffectId = creativeComEconomicEffectId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAssessmentcountryOfOrigin() {
		if (_assessmentcountryOfOrigin == null) {
			return "";
		}
		else {
			return _assessmentcountryOfOrigin;
		}
	}

	@Override
	public void setAssessmentcountryOfOrigin(String assessmentcountryOfOrigin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assessmentcountryOfOrigin = assessmentcountryOfOrigin;
	}

	@JSON
	@Override
	public String getSsessmentjointVenture() {
		if (_ssessmentjointVenture == null) {
			return "";
		}
		else {
			return _ssessmentjointVenture;
		}
	}

	@Override
	public void setSsessmentjointVenture(String ssessmentjointVenture) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ssessmentjointVenture = ssessmentjointVenture;
	}

	@JSON
	@Override
	public String getAssessmentLocal() {
		if (_assessmentLocal == null) {
			return "";
		}
		else {
			return _assessmentLocal;
		}
	}

	@Override
	public void setAssessmentLocal(String assessmentLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assessmentLocal = assessmentLocal;
	}

	@JSON
	@Override
	public String getAssessmentForeign() {
		if (_assessmentForeign == null) {
			return "";
		}
		else {
			return _assessmentForeign;
		}
	}

	@Override
	public void setAssessmentForeign(String assessmentForeign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assessmentForeign = assessmentForeign;
	}

	@JSON
	@Override
	public String getShareJmd() {
		if (_shareJmd == null) {
			return "";
		}
		else {
			return _shareJmd;
		}
	}

	@Override
	public void setShareJmd(String shareJmd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shareJmd = shareJmd;
	}

	@JSON
	@Override
	public String getShareExchangeRate() {
		if (_shareExchangeRate == null) {
			return "";
		}
		else {
			return _shareExchangeRate;
		}
	}

	@Override
	public void setShareExchangeRate(String shareExchangeRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shareExchangeRate = shareExchangeRate;
	}

	@JSON
	@Override
	public String getShareUsd() {
		if (_shareUsd == null) {
			return "";
		}
		else {
			return _shareUsd;
		}
	}

	@Override
	public void setShareUsd(String shareUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shareUsd = shareUsd;
	}

	@JSON
	@Override
	public String getLocalJmd() {
		if (_localJmd == null) {
			return "";
		}
		else {
			return _localJmd;
		}
	}

	@Override
	public void setLocalJmd(String localJmd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localJmd = localJmd;
	}

	@JSON
	@Override
	public String getLocalExchangeRate() {
		if (_localExchangeRate == null) {
			return "";
		}
		else {
			return _localExchangeRate;
		}
	}

	@Override
	public void setLocalExchangeRate(String localExchangeRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localExchangeRate = localExchangeRate;
	}

	@JSON
	@Override
	public String getLocalUsd() {
		if (_localUsd == null) {
			return "";
		}
		else {
			return _localUsd;
		}
	}

	@Override
	public void setLocalUsd(String localUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localUsd = localUsd;
	}

	@JSON
	@Override
	public String getOtherJmd() {
		if (_otherJmd == null) {
			return "";
		}
		else {
			return _otherJmd;
		}
	}

	@Override
	public void setOtherJmd(String otherJmd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherJmd = otherJmd;
	}

	@JSON
	@Override
	public String getOtherExchangeRate() {
		if (_otherExchangeRate == null) {
			return "";
		}
		else {
			return _otherExchangeRate;
		}
	}

	@Override
	public void setOtherExchangeRate(String otherExchangeRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherExchangeRate = otherExchangeRate;
	}

	@JSON
	@Override
	public String getOtherUsd() {
		if (_OtherUsd == null) {
			return "";
		}
		else {
			return _OtherUsd;
		}
	}

	@Override
	public void setOtherUsd(String OtherUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_OtherUsd = OtherUsd;
	}

	@JSON
	@Override
	public String getPermanentLocalMale() {
		if (_permanentLocalMale == null) {
			return "";
		}
		else {
			return _permanentLocalMale;
		}
	}

	@Override
	public void setPermanentLocalMale(String permanentLocalMale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permanentLocalMale = permanentLocalMale;
	}

	@JSON
	@Override
	public String getPermanentLocalFemale() {
		if (_permanentLocalFemale == null) {
			return "";
		}
		else {
			return _permanentLocalFemale;
		}
	}

	@Override
	public void setPermanentLocalFemale(String permanentLocalFemale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permanentLocalFemale = permanentLocalFemale;
	}

	@JSON
	@Override
	public String getPermanentForeignMale() {
		if (_permanentForeignMale == null) {
			return "";
		}
		else {
			return _permanentForeignMale;
		}
	}

	@Override
	public void setPermanentForeignMale(String permanentForeignMale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permanentForeignMale = permanentForeignMale;
	}

	@JSON
	@Override
	public String getPermanentForeignFemale() {
		if (_permanentForeignFemale == null) {
			return "";
		}
		else {
			return _permanentForeignFemale;
		}
	}

	@Override
	public void setPermanentForeignFemale(String permanentForeignFemale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permanentForeignFemale = permanentForeignFemale;
	}

	@JSON
	@Override
	public String getTemporaryLocalMale() {
		if (_temporaryLocalMale == null) {
			return "";
		}
		else {
			return _temporaryLocalMale;
		}
	}

	@Override
	public void setTemporaryLocalMale(String temporaryLocalMale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_temporaryLocalMale = temporaryLocalMale;
	}

	@JSON
	@Override
	public String getTemporaryLocalFemale() {
		if (_temporaryLocalFemale == null) {
			return "";
		}
		else {
			return _temporaryLocalFemale;
		}
	}

	@Override
	public void setTemporaryLocalFemale(String temporaryLocalFemale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_temporaryLocalFemale = temporaryLocalFemale;
	}

	@JSON
	@Override
	public String getTemporaryForeignMale() {
		if (_temporaryForeignMale == null) {
			return "";
		}
		else {
			return _temporaryForeignMale;
		}
	}

	@Override
	public void setTemporaryForeignMale(String temporaryForeignMale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_temporaryForeignMale = temporaryForeignMale;
	}

	@JSON
	@Override
	public String getTemporaryForgeignFemale() {
		if (_temporaryForgeignFemale == null) {
			return "";
		}
		else {
			return _temporaryForgeignFemale;
		}
	}

	@Override
	public void setTemporaryForgeignFemale(String temporaryForgeignFemale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_temporaryForgeignFemale = temporaryForgeignFemale;
	}

	@JSON
	@Override
	public String getTotalLocalMale() {
		if (_totalLocalMale == null) {
			return "";
		}
		else {
			return _totalLocalMale;
		}
	}

	@Override
	public void setTotalLocalMale(String totalLocalMale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalLocalMale = totalLocalMale;
	}

	@JSON
	@Override
	public String getTotalLocalFemale() {
		if (_totalLocalFemale == null) {
			return "";
		}
		else {
			return _totalLocalFemale;
		}
	}

	@Override
	public void setTotalLocalFemale(String totalLocalFemale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalLocalFemale = totalLocalFemale;
	}

	@JSON
	@Override
	public String getTotalForeignMale() {
		if (_totalForeignMale == null) {
			return "";
		}
		else {
			return _totalForeignMale;
		}
	}

	@Override
	public void setTotalForeignMale(String totalForeignMale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalForeignMale = totalForeignMale;
	}

	@JSON
	@Override
	public String getTotalForeignFemale() {
		if (_totalForeignFemale == null) {
			return "";
		}
		else {
			return _totalForeignFemale;
		}
	}

	@Override
	public void setTotalForeignFemale(String totalForeignFemale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalForeignFemale = totalForeignFemale;
	}

	@JSON
	@Override
	public long getCreativeApplicationId() {
		return _CreativeApplicationId;
	}

	@Override
	public void setCreativeApplicationId(long CreativeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CreativeApplicationId = CreativeApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreativeApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CreativeCompanyEconomicEffect.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CreativeCompanyEconomicEffect toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CreativeCompanyEconomicEffect>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CreativeCompanyEconomicEffectImpl creativeCompanyEconomicEffectImpl =
			new CreativeCompanyEconomicEffectImpl();

		creativeCompanyEconomicEffectImpl.setCreativeComEconomicEffectId(
			getCreativeComEconomicEffectId());
		creativeCompanyEconomicEffectImpl.setGroupId(getGroupId());
		creativeCompanyEconomicEffectImpl.setCompanyId(getCompanyId());
		creativeCompanyEconomicEffectImpl.setUserId(getUserId());
		creativeCompanyEconomicEffectImpl.setUserName(getUserName());
		creativeCompanyEconomicEffectImpl.setCreateDate(getCreateDate());
		creativeCompanyEconomicEffectImpl.setModifiedDate(getModifiedDate());
		creativeCompanyEconomicEffectImpl.setAssessmentcountryOfOrigin(
			getAssessmentcountryOfOrigin());
		creativeCompanyEconomicEffectImpl.setSsessmentjointVenture(
			getSsessmentjointVenture());
		creativeCompanyEconomicEffectImpl.setAssessmentLocal(
			getAssessmentLocal());
		creativeCompanyEconomicEffectImpl.setAssessmentForeign(
			getAssessmentForeign());
		creativeCompanyEconomicEffectImpl.setShareJmd(getShareJmd());
		creativeCompanyEconomicEffectImpl.setShareExchangeRate(
			getShareExchangeRate());
		creativeCompanyEconomicEffectImpl.setShareUsd(getShareUsd());
		creativeCompanyEconomicEffectImpl.setLocalJmd(getLocalJmd());
		creativeCompanyEconomicEffectImpl.setLocalExchangeRate(
			getLocalExchangeRate());
		creativeCompanyEconomicEffectImpl.setLocalUsd(getLocalUsd());
		creativeCompanyEconomicEffectImpl.setOtherJmd(getOtherJmd());
		creativeCompanyEconomicEffectImpl.setOtherExchangeRate(
			getOtherExchangeRate());
		creativeCompanyEconomicEffectImpl.setOtherUsd(getOtherUsd());
		creativeCompanyEconomicEffectImpl.setPermanentLocalMale(
			getPermanentLocalMale());
		creativeCompanyEconomicEffectImpl.setPermanentLocalFemale(
			getPermanentLocalFemale());
		creativeCompanyEconomicEffectImpl.setPermanentForeignMale(
			getPermanentForeignMale());
		creativeCompanyEconomicEffectImpl.setPermanentForeignFemale(
			getPermanentForeignFemale());
		creativeCompanyEconomicEffectImpl.setTemporaryLocalMale(
			getTemporaryLocalMale());
		creativeCompanyEconomicEffectImpl.setTemporaryLocalFemale(
			getTemporaryLocalFemale());
		creativeCompanyEconomicEffectImpl.setTemporaryForeignMale(
			getTemporaryForeignMale());
		creativeCompanyEconomicEffectImpl.setTemporaryForgeignFemale(
			getTemporaryForgeignFemale());
		creativeCompanyEconomicEffectImpl.setTotalLocalMale(
			getTotalLocalMale());
		creativeCompanyEconomicEffectImpl.setTotalLocalFemale(
			getTotalLocalFemale());
		creativeCompanyEconomicEffectImpl.setTotalForeignMale(
			getTotalForeignMale());
		creativeCompanyEconomicEffectImpl.setTotalForeignFemale(
			getTotalForeignFemale());
		creativeCompanyEconomicEffectImpl.setCreativeApplicationId(
			getCreativeApplicationId());

		creativeCompanyEconomicEffectImpl.resetOriginalValues();

		return creativeCompanyEconomicEffectImpl;
	}

	@Override
	public CreativeCompanyEconomicEffect cloneWithOriginalValues() {
		CreativeCompanyEconomicEffectImpl creativeCompanyEconomicEffectImpl =
			new CreativeCompanyEconomicEffectImpl();

		creativeCompanyEconomicEffectImpl.setCreativeComEconomicEffectId(
			this.<Long>getColumnOriginalValue("creativeComEconomicEffectId"));
		creativeCompanyEconomicEffectImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		creativeCompanyEconomicEffectImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		creativeCompanyEconomicEffectImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		creativeCompanyEconomicEffectImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		creativeCompanyEconomicEffectImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		creativeCompanyEconomicEffectImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		creativeCompanyEconomicEffectImpl.setAssessmentcountryOfOrigin(
			this.<String>getColumnOriginalValue("assessmentcountryOfOrigin"));
		creativeCompanyEconomicEffectImpl.setSsessmentjointVenture(
			this.<String>getColumnOriginalValue("ssessmentjointVenture"));
		creativeCompanyEconomicEffectImpl.setAssessmentLocal(
			this.<String>getColumnOriginalValue("assessmentLocal"));
		creativeCompanyEconomicEffectImpl.setAssessmentForeign(
			this.<String>getColumnOriginalValue("assessmentForeign"));
		creativeCompanyEconomicEffectImpl.setShareJmd(
			this.<String>getColumnOriginalValue("shareJmd"));
		creativeCompanyEconomicEffectImpl.setShareExchangeRate(
			this.<String>getColumnOriginalValue("shareExchangeRate"));
		creativeCompanyEconomicEffectImpl.setShareUsd(
			this.<String>getColumnOriginalValue("shareUsd"));
		creativeCompanyEconomicEffectImpl.setLocalJmd(
			this.<String>getColumnOriginalValue("localJmd"));
		creativeCompanyEconomicEffectImpl.setLocalExchangeRate(
			this.<String>getColumnOriginalValue("localExchangeRate"));
		creativeCompanyEconomicEffectImpl.setLocalUsd(
			this.<String>getColumnOriginalValue("localUsd"));
		creativeCompanyEconomicEffectImpl.setOtherJmd(
			this.<String>getColumnOriginalValue("otherJmd"));
		creativeCompanyEconomicEffectImpl.setOtherExchangeRate(
			this.<String>getColumnOriginalValue("otherExchangeRate"));
		creativeCompanyEconomicEffectImpl.setOtherUsd(
			this.<String>getColumnOriginalValue("OtherUsd"));
		creativeCompanyEconomicEffectImpl.setPermanentLocalMale(
			this.<String>getColumnOriginalValue("permanentLocalMale"));
		creativeCompanyEconomicEffectImpl.setPermanentLocalFemale(
			this.<String>getColumnOriginalValue("permanentLocalFemale"));
		creativeCompanyEconomicEffectImpl.setPermanentForeignMale(
			this.<String>getColumnOriginalValue("permanentForeignMale"));
		creativeCompanyEconomicEffectImpl.setPermanentForeignFemale(
			this.<String>getColumnOriginalValue("permanentForeignFemale"));
		creativeCompanyEconomicEffectImpl.setTemporaryLocalMale(
			this.<String>getColumnOriginalValue("temporaryLocalMale"));
		creativeCompanyEconomicEffectImpl.setTemporaryLocalFemale(
			this.<String>getColumnOriginalValue("temporaryLocalFemale"));
		creativeCompanyEconomicEffectImpl.setTemporaryForeignMale(
			this.<String>getColumnOriginalValue("temporaryForeignMale"));
		creativeCompanyEconomicEffectImpl.setTemporaryForgeignFemale(
			this.<String>getColumnOriginalValue("temporaryForgeignFemale"));
		creativeCompanyEconomicEffectImpl.setTotalLocalMale(
			this.<String>getColumnOriginalValue("totalLocalMale"));
		creativeCompanyEconomicEffectImpl.setTotalLocalFemale(
			this.<String>getColumnOriginalValue("totalLocalFemale"));
		creativeCompanyEconomicEffectImpl.setTotalForeignMale(
			this.<String>getColumnOriginalValue("totalForeignMale"));
		creativeCompanyEconomicEffectImpl.setTotalForeignFemale(
			this.<String>getColumnOriginalValue("totalForeignFemale"));
		creativeCompanyEconomicEffectImpl.setCreativeApplicationId(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));

		return creativeCompanyEconomicEffectImpl;
	}

	@Override
	public int compareTo(
		CreativeCompanyEconomicEffect creativeCompanyEconomicEffect) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), creativeCompanyEconomicEffect.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CreativeCompanyEconomicEffect)) {
			return false;
		}

		CreativeCompanyEconomicEffect creativeCompanyEconomicEffect =
			(CreativeCompanyEconomicEffect)object;

		long primaryKey = creativeCompanyEconomicEffect.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CreativeCompanyEconomicEffect> toCacheModel() {
		CreativeCompanyEconomicEffectCacheModel
			creativeCompanyEconomicEffectCacheModel =
				new CreativeCompanyEconomicEffectCacheModel();

		creativeCompanyEconomicEffectCacheModel.creativeComEconomicEffectId =
			getCreativeComEconomicEffectId();

		creativeCompanyEconomicEffectCacheModel.groupId = getGroupId();

		creativeCompanyEconomicEffectCacheModel.companyId = getCompanyId();

		creativeCompanyEconomicEffectCacheModel.userId = getUserId();

		creativeCompanyEconomicEffectCacheModel.userName = getUserName();

		String userName = creativeCompanyEconomicEffectCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			creativeCompanyEconomicEffectCacheModel.createDate =
				createDate.getTime();
		}
		else {
			creativeCompanyEconomicEffectCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			creativeCompanyEconomicEffectCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			creativeCompanyEconomicEffectCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		creativeCompanyEconomicEffectCacheModel.assessmentcountryOfOrigin =
			getAssessmentcountryOfOrigin();

		String assessmentcountryOfOrigin =
			creativeCompanyEconomicEffectCacheModel.assessmentcountryOfOrigin;

		if ((assessmentcountryOfOrigin != null) &&
			(assessmentcountryOfOrigin.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.assessmentcountryOfOrigin =
				null;
		}

		creativeCompanyEconomicEffectCacheModel.ssessmentjointVenture =
			getSsessmentjointVenture();

		String ssessmentjointVenture =
			creativeCompanyEconomicEffectCacheModel.ssessmentjointVenture;

		if ((ssessmentjointVenture != null) &&
			(ssessmentjointVenture.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.ssessmentjointVenture =
				null;
		}

		creativeCompanyEconomicEffectCacheModel.assessmentLocal =
			getAssessmentLocal();

		String assessmentLocal =
			creativeCompanyEconomicEffectCacheModel.assessmentLocal;

		if ((assessmentLocal != null) && (assessmentLocal.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.assessmentLocal = null;
		}

		creativeCompanyEconomicEffectCacheModel.assessmentForeign =
			getAssessmentForeign();

		String assessmentForeign =
			creativeCompanyEconomicEffectCacheModel.assessmentForeign;

		if ((assessmentForeign != null) && (assessmentForeign.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.assessmentForeign = null;
		}

		creativeCompanyEconomicEffectCacheModel.shareJmd = getShareJmd();

		String shareJmd = creativeCompanyEconomicEffectCacheModel.shareJmd;

		if ((shareJmd != null) && (shareJmd.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.shareJmd = null;
		}

		creativeCompanyEconomicEffectCacheModel.shareExchangeRate =
			getShareExchangeRate();

		String shareExchangeRate =
			creativeCompanyEconomicEffectCacheModel.shareExchangeRate;

		if ((shareExchangeRate != null) && (shareExchangeRate.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.shareExchangeRate = null;
		}

		creativeCompanyEconomicEffectCacheModel.shareUsd = getShareUsd();

		String shareUsd = creativeCompanyEconomicEffectCacheModel.shareUsd;

		if ((shareUsd != null) && (shareUsd.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.shareUsd = null;
		}

		creativeCompanyEconomicEffectCacheModel.localJmd = getLocalJmd();

		String localJmd = creativeCompanyEconomicEffectCacheModel.localJmd;

		if ((localJmd != null) && (localJmd.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.localJmd = null;
		}

		creativeCompanyEconomicEffectCacheModel.localExchangeRate =
			getLocalExchangeRate();

		String localExchangeRate =
			creativeCompanyEconomicEffectCacheModel.localExchangeRate;

		if ((localExchangeRate != null) && (localExchangeRate.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.localExchangeRate = null;
		}

		creativeCompanyEconomicEffectCacheModel.localUsd = getLocalUsd();

		String localUsd = creativeCompanyEconomicEffectCacheModel.localUsd;

		if ((localUsd != null) && (localUsd.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.localUsd = null;
		}

		creativeCompanyEconomicEffectCacheModel.otherJmd = getOtherJmd();

		String otherJmd = creativeCompanyEconomicEffectCacheModel.otherJmd;

		if ((otherJmd != null) && (otherJmd.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.otherJmd = null;
		}

		creativeCompanyEconomicEffectCacheModel.otherExchangeRate =
			getOtherExchangeRate();

		String otherExchangeRate =
			creativeCompanyEconomicEffectCacheModel.otherExchangeRate;

		if ((otherExchangeRate != null) && (otherExchangeRate.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.otherExchangeRate = null;
		}

		creativeCompanyEconomicEffectCacheModel.OtherUsd = getOtherUsd();

		String OtherUsd = creativeCompanyEconomicEffectCacheModel.OtherUsd;

		if ((OtherUsd != null) && (OtherUsd.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.OtherUsd = null;
		}

		creativeCompanyEconomicEffectCacheModel.permanentLocalMale =
			getPermanentLocalMale();

		String permanentLocalMale =
			creativeCompanyEconomicEffectCacheModel.permanentLocalMale;

		if ((permanentLocalMale != null) &&
			(permanentLocalMale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.permanentLocalMale = null;
		}

		creativeCompanyEconomicEffectCacheModel.permanentLocalFemale =
			getPermanentLocalFemale();

		String permanentLocalFemale =
			creativeCompanyEconomicEffectCacheModel.permanentLocalFemale;

		if ((permanentLocalFemale != null) &&
			(permanentLocalFemale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.permanentLocalFemale = null;
		}

		creativeCompanyEconomicEffectCacheModel.permanentForeignMale =
			getPermanentForeignMale();

		String permanentForeignMale =
			creativeCompanyEconomicEffectCacheModel.permanentForeignMale;

		if ((permanentForeignMale != null) &&
			(permanentForeignMale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.permanentForeignMale = null;
		}

		creativeCompanyEconomicEffectCacheModel.permanentForeignFemale =
			getPermanentForeignFemale();

		String permanentForeignFemale =
			creativeCompanyEconomicEffectCacheModel.permanentForeignFemale;

		if ((permanentForeignFemale != null) &&
			(permanentForeignFemale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.permanentForeignFemale =
				null;
		}

		creativeCompanyEconomicEffectCacheModel.temporaryLocalMale =
			getTemporaryLocalMale();

		String temporaryLocalMale =
			creativeCompanyEconomicEffectCacheModel.temporaryLocalMale;

		if ((temporaryLocalMale != null) &&
			(temporaryLocalMale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.temporaryLocalMale = null;
		}

		creativeCompanyEconomicEffectCacheModel.temporaryLocalFemale =
			getTemporaryLocalFemale();

		String temporaryLocalFemale =
			creativeCompanyEconomicEffectCacheModel.temporaryLocalFemale;

		if ((temporaryLocalFemale != null) &&
			(temporaryLocalFemale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.temporaryLocalFemale = null;
		}

		creativeCompanyEconomicEffectCacheModel.temporaryForeignMale =
			getTemporaryForeignMale();

		String temporaryForeignMale =
			creativeCompanyEconomicEffectCacheModel.temporaryForeignMale;

		if ((temporaryForeignMale != null) &&
			(temporaryForeignMale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.temporaryForeignMale = null;
		}

		creativeCompanyEconomicEffectCacheModel.temporaryForgeignFemale =
			getTemporaryForgeignFemale();

		String temporaryForgeignFemale =
			creativeCompanyEconomicEffectCacheModel.temporaryForgeignFemale;

		if ((temporaryForgeignFemale != null) &&
			(temporaryForgeignFemale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.temporaryForgeignFemale =
				null;
		}

		creativeCompanyEconomicEffectCacheModel.totalLocalMale =
			getTotalLocalMale();

		String totalLocalMale =
			creativeCompanyEconomicEffectCacheModel.totalLocalMale;

		if ((totalLocalMale != null) && (totalLocalMale.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.totalLocalMale = null;
		}

		creativeCompanyEconomicEffectCacheModel.totalLocalFemale =
			getTotalLocalFemale();

		String totalLocalFemale =
			creativeCompanyEconomicEffectCacheModel.totalLocalFemale;

		if ((totalLocalFemale != null) && (totalLocalFemale.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.totalLocalFemale = null;
		}

		creativeCompanyEconomicEffectCacheModel.totalForeignMale =
			getTotalForeignMale();

		String totalForeignMale =
			creativeCompanyEconomicEffectCacheModel.totalForeignMale;

		if ((totalForeignMale != null) && (totalForeignMale.length() == 0)) {
			creativeCompanyEconomicEffectCacheModel.totalForeignMale = null;
		}

		creativeCompanyEconomicEffectCacheModel.totalForeignFemale =
			getTotalForeignFemale();

		String totalForeignFemale =
			creativeCompanyEconomicEffectCacheModel.totalForeignFemale;

		if ((totalForeignFemale != null) &&
			(totalForeignFemale.length() == 0)) {

			creativeCompanyEconomicEffectCacheModel.totalForeignFemale = null;
		}

		creativeCompanyEconomicEffectCacheModel.CreativeApplicationId =
			getCreativeApplicationId();

		return creativeCompanyEconomicEffectCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CreativeCompanyEconomicEffect, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CreativeCompanyEconomicEffect, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyEconomicEffect, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CreativeCompanyEconomicEffect)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CreativeCompanyEconomicEffect>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CreativeCompanyEconomicEffect.class,
						ModelWrapper.class);

	}

	private long _creativeComEconomicEffectId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _assessmentcountryOfOrigin;
	private String _ssessmentjointVenture;
	private String _assessmentLocal;
	private String _assessmentForeign;
	private String _shareJmd;
	private String _shareExchangeRate;
	private String _shareUsd;
	private String _localJmd;
	private String _localExchangeRate;
	private String _localUsd;
	private String _otherJmd;
	private String _otherExchangeRate;
	private String _OtherUsd;
	private String _permanentLocalMale;
	private String _permanentLocalFemale;
	private String _permanentForeignMale;
	private String _permanentForeignFemale;
	private String _temporaryLocalMale;
	private String _temporaryLocalFemale;
	private String _temporaryForeignMale;
	private String _temporaryForgeignFemale;
	private String _totalLocalMale;
	private String _totalLocalFemale;
	private String _totalForeignMale;
	private String _totalForeignFemale;
	private long _CreativeApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<CreativeCompanyEconomicEffect, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CreativeCompanyEconomicEffect)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"creativeComEconomicEffectId", _creativeComEconomicEffectId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"assessmentcountryOfOrigin", _assessmentcountryOfOrigin);
		_columnOriginalValues.put(
			"ssessmentjointVenture", _ssessmentjointVenture);
		_columnOriginalValues.put("assessmentLocal", _assessmentLocal);
		_columnOriginalValues.put("assessmentForeign", _assessmentForeign);
		_columnOriginalValues.put("shareJmd", _shareJmd);
		_columnOriginalValues.put("shareExchangeRate", _shareExchangeRate);
		_columnOriginalValues.put("shareUsd", _shareUsd);
		_columnOriginalValues.put("localJmd", _localJmd);
		_columnOriginalValues.put("localExchangeRate", _localExchangeRate);
		_columnOriginalValues.put("localUsd", _localUsd);
		_columnOriginalValues.put("otherJmd", _otherJmd);
		_columnOriginalValues.put("otherExchangeRate", _otherExchangeRate);
		_columnOriginalValues.put("OtherUsd", _OtherUsd);
		_columnOriginalValues.put("permanentLocalMale", _permanentLocalMale);
		_columnOriginalValues.put(
			"permanentLocalFemale", _permanentLocalFemale);
		_columnOriginalValues.put(
			"permanentForeignMale", _permanentForeignMale);
		_columnOriginalValues.put(
			"permanentForeignFemale", _permanentForeignFemale);
		_columnOriginalValues.put("temporaryLocalMale", _temporaryLocalMale);
		_columnOriginalValues.put(
			"temporaryLocalFemale", _temporaryLocalFemale);
		_columnOriginalValues.put(
			"temporaryForeignMale", _temporaryForeignMale);
		_columnOriginalValues.put(
			"temporaryForgeignFemale", _temporaryForgeignFemale);
		_columnOriginalValues.put("totalLocalMale", _totalLocalMale);
		_columnOriginalValues.put("totalLocalFemale", _totalLocalFemale);
		_columnOriginalValues.put("totalForeignMale", _totalForeignMale);
		_columnOriginalValues.put("totalForeignFemale", _totalForeignFemale);
		_columnOriginalValues.put(
			"CreativeApplicationId", _CreativeApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("creativeComEconomicEffectId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("assessmentcountryOfOrigin", 128L);

		columnBitmasks.put("ssessmentjointVenture", 256L);

		columnBitmasks.put("assessmentLocal", 512L);

		columnBitmasks.put("assessmentForeign", 1024L);

		columnBitmasks.put("shareJmd", 2048L);

		columnBitmasks.put("shareExchangeRate", 4096L);

		columnBitmasks.put("shareUsd", 8192L);

		columnBitmasks.put("localJmd", 16384L);

		columnBitmasks.put("localExchangeRate", 32768L);

		columnBitmasks.put("localUsd", 65536L);

		columnBitmasks.put("otherJmd", 131072L);

		columnBitmasks.put("otherExchangeRate", 262144L);

		columnBitmasks.put("OtherUsd", 524288L);

		columnBitmasks.put("permanentLocalMale", 1048576L);

		columnBitmasks.put("permanentLocalFemale", 2097152L);

		columnBitmasks.put("permanentForeignMale", 4194304L);

		columnBitmasks.put("permanentForeignFemale", 8388608L);

		columnBitmasks.put("temporaryLocalMale", 16777216L);

		columnBitmasks.put("temporaryLocalFemale", 33554432L);

		columnBitmasks.put("temporaryForeignMale", 67108864L);

		columnBitmasks.put("temporaryForgeignFemale", 134217728L);

		columnBitmasks.put("totalLocalMale", 268435456L);

		columnBitmasks.put("totalLocalFemale", 536870912L);

		columnBitmasks.put("totalForeignMale", 1073741824L);

		columnBitmasks.put("totalForeignFemale", 2147483648L);

		columnBitmasks.put("CreativeApplicationId", 4294967296L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CreativeCompanyEconomicEffect _escapedModel;

}