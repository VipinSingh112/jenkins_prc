/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.creative.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.creative.application.form.service.model.CreativeCompanyDetailsAddress;
import com.nbp.creative.application.form.service.model.CreativeCompanyDetailsAddressModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CreativeCompanyDetailsAddress service. Represents a row in the &quot;nbp_creative_com_detail_addres&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CreativeCompanyDetailsAddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CreativeCompanyDetailsAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CreativeCompanyDetailsAddressImpl
 * @generated
 */
@JSON(strict = true)
public class CreativeCompanyDetailsAddressModelImpl
	extends BaseModelImpl<CreativeCompanyDetailsAddress>
	implements CreativeCompanyDetailsAddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a creative company details address model instance should use the <code>CreativeCompanyDetailsAddress</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_creative_com_detail_addres";

	public static final Object[][] TABLE_COLUMNS = {
		{"creativeComDetailsAddressId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"addressType", Types.VARCHAR}, {"streetAddress", Types.VARCHAR},
		{"streetAddressLineTwo", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"country", Types.VARCHAR}, {"CreativeApplicationId", Types.BIGINT},
		{"creativeCompanyDetailsId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("creativeComDetailsAddressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("addressType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("streetAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("streetAddressLineTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CreativeApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("creativeCompanyDetailsId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_creative_com_detail_addres (creativeComDetailsAddressId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,addressType VARCHAR(75) null,streetAddress VARCHAR(500) null,streetAddressLineTwo VARCHAR(500) null,city VARCHAR(75) null,country VARCHAR(75) null,CreativeApplicationId LONG,creativeCompanyDetailsId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_creative_com_detail_addres";

	public static final String ORDER_BY_JPQL =
		" ORDER BY creativeCompanyDetailsAddress.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_creative_com_detail_addres.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSTYPE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATIVECOMPANYDETAILSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CreativeCompanyDetailsAddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _creativeComDetailsAddressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCreativeComDetailsAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _creativeComDetailsAddressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CreativeCompanyDetailsAddress.class;
	}

	@Override
	public String getModelClassName() {
		return CreativeCompanyDetailsAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CreativeCompanyDetailsAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CreativeCompanyDetailsAddress, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyDetailsAddress, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CreativeCompanyDetailsAddress)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CreativeCompanyDetailsAddress, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CreativeCompanyDetailsAddress, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CreativeCompanyDetailsAddress)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CreativeCompanyDetailsAddress, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CreativeCompanyDetailsAddress, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CreativeCompanyDetailsAddress, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CreativeCompanyDetailsAddress, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CreativeCompanyDetailsAddress, Object>>();

			attributeGetterFunctions.put(
				"creativeComDetailsAddressId",
				CreativeCompanyDetailsAddress::getCreativeComDetailsAddressId);
			attributeGetterFunctions.put(
				"groupId", CreativeCompanyDetailsAddress::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CreativeCompanyDetailsAddress::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CreativeCompanyDetailsAddress::getUserId);
			attributeGetterFunctions.put(
				"userName", CreativeCompanyDetailsAddress::getUserName);
			attributeGetterFunctions.put(
				"createDate", CreativeCompanyDetailsAddress::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CreativeCompanyDetailsAddress::getModifiedDate);
			attributeGetterFunctions.put(
				"addressType", CreativeCompanyDetailsAddress::getAddressType);
			attributeGetterFunctions.put(
				"streetAddress",
				CreativeCompanyDetailsAddress::getStreetAddress);
			attributeGetterFunctions.put(
				"streetAddressLineTwo",
				CreativeCompanyDetailsAddress::getStreetAddressLineTwo);
			attributeGetterFunctions.put(
				"city", CreativeCompanyDetailsAddress::getCity);
			attributeGetterFunctions.put(
				"country", CreativeCompanyDetailsAddress::getCountry);
			attributeGetterFunctions.put(
				"CreativeApplicationId",
				CreativeCompanyDetailsAddress::getCreativeApplicationId);
			attributeGetterFunctions.put(
				"creativeCompanyDetailsId",
				CreativeCompanyDetailsAddress::getCreativeCompanyDetailsId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CreativeCompanyDetailsAddress, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CreativeCompanyDetailsAddress, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CreativeCompanyDetailsAddress, ?>>();

			attributeSetterBiConsumers.put(
				"creativeComDetailsAddressId",
				(BiConsumer<CreativeCompanyDetailsAddress, Long>)
					CreativeCompanyDetailsAddress::
						setCreativeComDetailsAddressId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CreativeCompanyDetailsAddress, Long>)
					CreativeCompanyDetailsAddress::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CreativeCompanyDetailsAddress, Long>)
					CreativeCompanyDetailsAddress::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CreativeCompanyDetailsAddress, Long>)
					CreativeCompanyDetailsAddress::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CreativeCompanyDetailsAddress, String>)
					CreativeCompanyDetailsAddress::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CreativeCompanyDetailsAddress, Date>)
					CreativeCompanyDetailsAddress::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CreativeCompanyDetailsAddress, Date>)
					CreativeCompanyDetailsAddress::setModifiedDate);
			attributeSetterBiConsumers.put(
				"addressType",
				(BiConsumer<CreativeCompanyDetailsAddress, String>)
					CreativeCompanyDetailsAddress::setAddressType);
			attributeSetterBiConsumers.put(
				"streetAddress",
				(BiConsumer<CreativeCompanyDetailsAddress, String>)
					CreativeCompanyDetailsAddress::setStreetAddress);
			attributeSetterBiConsumers.put(
				"streetAddressLineTwo",
				(BiConsumer<CreativeCompanyDetailsAddress, String>)
					CreativeCompanyDetailsAddress::setStreetAddressLineTwo);
			attributeSetterBiConsumers.put(
				"city",
				(BiConsumer<CreativeCompanyDetailsAddress, String>)
					CreativeCompanyDetailsAddress::setCity);
			attributeSetterBiConsumers.put(
				"country",
				(BiConsumer<CreativeCompanyDetailsAddress, String>)
					CreativeCompanyDetailsAddress::setCountry);
			attributeSetterBiConsumers.put(
				"CreativeApplicationId",
				(BiConsumer<CreativeCompanyDetailsAddress, Long>)
					CreativeCompanyDetailsAddress::setCreativeApplicationId);
			attributeSetterBiConsumers.put(
				"creativeCompanyDetailsId",
				(BiConsumer<CreativeCompanyDetailsAddress, Long>)
					CreativeCompanyDetailsAddress::setCreativeCompanyDetailsId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCreativeComDetailsAddressId() {
		return _creativeComDetailsAddressId;
	}

	@Override
	public void setCreativeComDetailsAddressId(
		long creativeComDetailsAddressId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeComDetailsAddressId = creativeComDetailsAddressId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAddressType() {
		if (_addressType == null) {
			return "";
		}
		else {
			return _addressType;
		}
	}

	@Override
	public void setAddressType(String addressType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressType = addressType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAddressType() {
		return getColumnOriginalValue("addressType");
	}

	@JSON
	@Override
	public String getStreetAddress() {
		if (_streetAddress == null) {
			return "";
		}
		else {
			return _streetAddress;
		}
	}

	@Override
	public void setStreetAddress(String streetAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_streetAddress = streetAddress;
	}

	@JSON
	@Override
	public String getStreetAddressLineTwo() {
		if (_streetAddressLineTwo == null) {
			return "";
		}
		else {
			return _streetAddressLineTwo;
		}
	}

	@Override
	public void setStreetAddressLineTwo(String streetAddressLineTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_streetAddressLineTwo = streetAddressLineTwo;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@JSON
	@Override
	public long getCreativeApplicationId() {
		return _CreativeApplicationId;
	}

	@Override
	public void setCreativeApplicationId(long CreativeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CreativeApplicationId = CreativeApplicationId;
	}

	@JSON
	@Override
	public long getCreativeCompanyDetailsId() {
		return _creativeCompanyDetailsId;
	}

	@Override
	public void setCreativeCompanyDetailsId(long creativeCompanyDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeCompanyDetailsId = creativeCompanyDetailsId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreativeCompanyDetailsId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("creativeCompanyDetailsId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CreativeCompanyDetailsAddress.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CreativeCompanyDetailsAddress toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CreativeCompanyDetailsAddress>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CreativeCompanyDetailsAddressImpl creativeCompanyDetailsAddressImpl =
			new CreativeCompanyDetailsAddressImpl();

		creativeCompanyDetailsAddressImpl.setCreativeComDetailsAddressId(
			getCreativeComDetailsAddressId());
		creativeCompanyDetailsAddressImpl.setGroupId(getGroupId());
		creativeCompanyDetailsAddressImpl.setCompanyId(getCompanyId());
		creativeCompanyDetailsAddressImpl.setUserId(getUserId());
		creativeCompanyDetailsAddressImpl.setUserName(getUserName());
		creativeCompanyDetailsAddressImpl.setCreateDate(getCreateDate());
		creativeCompanyDetailsAddressImpl.setModifiedDate(getModifiedDate());
		creativeCompanyDetailsAddressImpl.setAddressType(getAddressType());
		creativeCompanyDetailsAddressImpl.setStreetAddress(getStreetAddress());
		creativeCompanyDetailsAddressImpl.setStreetAddressLineTwo(
			getStreetAddressLineTwo());
		creativeCompanyDetailsAddressImpl.setCity(getCity());
		creativeCompanyDetailsAddressImpl.setCountry(getCountry());
		creativeCompanyDetailsAddressImpl.setCreativeApplicationId(
			getCreativeApplicationId());
		creativeCompanyDetailsAddressImpl.setCreativeCompanyDetailsId(
			getCreativeCompanyDetailsId());

		creativeCompanyDetailsAddressImpl.resetOriginalValues();

		return creativeCompanyDetailsAddressImpl;
	}

	@Override
	public CreativeCompanyDetailsAddress cloneWithOriginalValues() {
		CreativeCompanyDetailsAddressImpl creativeCompanyDetailsAddressImpl =
			new CreativeCompanyDetailsAddressImpl();

		creativeCompanyDetailsAddressImpl.setCreativeComDetailsAddressId(
			this.<Long>getColumnOriginalValue("creativeComDetailsAddressId"));
		creativeCompanyDetailsAddressImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		creativeCompanyDetailsAddressImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		creativeCompanyDetailsAddressImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		creativeCompanyDetailsAddressImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		creativeCompanyDetailsAddressImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		creativeCompanyDetailsAddressImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		creativeCompanyDetailsAddressImpl.setAddressType(
			this.<String>getColumnOriginalValue("addressType"));
		creativeCompanyDetailsAddressImpl.setStreetAddress(
			this.<String>getColumnOriginalValue("streetAddress"));
		creativeCompanyDetailsAddressImpl.setStreetAddressLineTwo(
			this.<String>getColumnOriginalValue("streetAddressLineTwo"));
		creativeCompanyDetailsAddressImpl.setCity(
			this.<String>getColumnOriginalValue("city"));
		creativeCompanyDetailsAddressImpl.setCountry(
			this.<String>getColumnOriginalValue("country"));
		creativeCompanyDetailsAddressImpl.setCreativeApplicationId(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));
		creativeCompanyDetailsAddressImpl.setCreativeCompanyDetailsId(
			this.<Long>getColumnOriginalValue("creativeCompanyDetailsId"));

		return creativeCompanyDetailsAddressImpl;
	}

	@Override
	public int compareTo(
		CreativeCompanyDetailsAddress creativeCompanyDetailsAddress) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), creativeCompanyDetailsAddress.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CreativeCompanyDetailsAddress)) {
			return false;
		}

		CreativeCompanyDetailsAddress creativeCompanyDetailsAddress =
			(CreativeCompanyDetailsAddress)object;

		long primaryKey = creativeCompanyDetailsAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CreativeCompanyDetailsAddress> toCacheModel() {
		CreativeCompanyDetailsAddressCacheModel
			creativeCompanyDetailsAddressCacheModel =
				new CreativeCompanyDetailsAddressCacheModel();

		creativeCompanyDetailsAddressCacheModel.creativeComDetailsAddressId =
			getCreativeComDetailsAddressId();

		creativeCompanyDetailsAddressCacheModel.groupId = getGroupId();

		creativeCompanyDetailsAddressCacheModel.companyId = getCompanyId();

		creativeCompanyDetailsAddressCacheModel.userId = getUserId();

		creativeCompanyDetailsAddressCacheModel.userName = getUserName();

		String userName = creativeCompanyDetailsAddressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			creativeCompanyDetailsAddressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			creativeCompanyDetailsAddressCacheModel.createDate =
				createDate.getTime();
		}
		else {
			creativeCompanyDetailsAddressCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			creativeCompanyDetailsAddressCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			creativeCompanyDetailsAddressCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		creativeCompanyDetailsAddressCacheModel.addressType = getAddressType();

		String addressType =
			creativeCompanyDetailsAddressCacheModel.addressType;

		if ((addressType != null) && (addressType.length() == 0)) {
			creativeCompanyDetailsAddressCacheModel.addressType = null;
		}

		creativeCompanyDetailsAddressCacheModel.streetAddress =
			getStreetAddress();

		String streetAddress =
			creativeCompanyDetailsAddressCacheModel.streetAddress;

		if ((streetAddress != null) && (streetAddress.length() == 0)) {
			creativeCompanyDetailsAddressCacheModel.streetAddress = null;
		}

		creativeCompanyDetailsAddressCacheModel.streetAddressLineTwo =
			getStreetAddressLineTwo();

		String streetAddressLineTwo =
			creativeCompanyDetailsAddressCacheModel.streetAddressLineTwo;

		if ((streetAddressLineTwo != null) &&
			(streetAddressLineTwo.length() == 0)) {

			creativeCompanyDetailsAddressCacheModel.streetAddressLineTwo = null;
		}

		creativeCompanyDetailsAddressCacheModel.city = getCity();

		String city = creativeCompanyDetailsAddressCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			creativeCompanyDetailsAddressCacheModel.city = null;
		}

		creativeCompanyDetailsAddressCacheModel.country = getCountry();

		String country = creativeCompanyDetailsAddressCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			creativeCompanyDetailsAddressCacheModel.country = null;
		}

		creativeCompanyDetailsAddressCacheModel.CreativeApplicationId =
			getCreativeApplicationId();

		creativeCompanyDetailsAddressCacheModel.creativeCompanyDetailsId =
			getCreativeCompanyDetailsId();

		return creativeCompanyDetailsAddressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CreativeCompanyDetailsAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CreativeCompanyDetailsAddress, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeCompanyDetailsAddress, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CreativeCompanyDetailsAddress)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CreativeCompanyDetailsAddress>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CreativeCompanyDetailsAddress.class,
						ModelWrapper.class);

	}

	private long _creativeComDetailsAddressId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _addressType;
	private String _streetAddress;
	private String _streetAddressLineTwo;
	private String _city;
	private String _country;
	private long _CreativeApplicationId;
	private long _creativeCompanyDetailsId;

	public <T> T getColumnValue(String columnName) {
		Function<CreativeCompanyDetailsAddress, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CreativeCompanyDetailsAddress)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"creativeComDetailsAddressId", _creativeComDetailsAddressId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("addressType", _addressType);
		_columnOriginalValues.put("streetAddress", _streetAddress);
		_columnOriginalValues.put(
			"streetAddressLineTwo", _streetAddressLineTwo);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("country", _country);
		_columnOriginalValues.put(
			"CreativeApplicationId", _CreativeApplicationId);
		_columnOriginalValues.put(
			"creativeCompanyDetailsId", _creativeCompanyDetailsId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("creativeComDetailsAddressId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("addressType", 128L);

		columnBitmasks.put("streetAddress", 256L);

		columnBitmasks.put("streetAddressLineTwo", 512L);

		columnBitmasks.put("city", 1024L);

		columnBitmasks.put("country", 2048L);

		columnBitmasks.put("CreativeApplicationId", 4096L);

		columnBitmasks.put("creativeCompanyDetailsId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CreativeCompanyDetailsAddress _escapedModel;

}