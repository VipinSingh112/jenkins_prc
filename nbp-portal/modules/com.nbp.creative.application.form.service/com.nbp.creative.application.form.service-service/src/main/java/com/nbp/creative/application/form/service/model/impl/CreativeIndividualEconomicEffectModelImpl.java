/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.creative.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.creative.application.form.service.model.CreativeIndividualEconomicEffect;
import com.nbp.creative.application.form.service.model.CreativeIndividualEconomicEffectModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CreativeIndividualEconomicEffect service. Represents a row in the &quot;nbp_creative_economic_effect&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CreativeIndividualEconomicEffectModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CreativeIndividualEconomicEffectImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CreativeIndividualEconomicEffectImpl
 * @generated
 */
@JSON(strict = true)
public class CreativeIndividualEconomicEffectModelImpl
	extends BaseModelImpl<CreativeIndividualEconomicEffect>
	implements CreativeIndividualEconomicEffectModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a creative individual economic effect model instance should use the <code>CreativeIndividualEconomicEffect</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_creative_economic_effect";

	public static final Object[][] TABLE_COLUMNS = {
		{"creativeIndiEcoEffectId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"shareCapitalJmd", Types.VARCHAR},
		{"shareCapitalExchangeRate", Types.VARCHAR},
		{"shareCapitalUsd", Types.VARCHAR}, {"localCapitalJmd", Types.VARCHAR},
		{"localCapitalExchangeRate", Types.VARCHAR},
		{"localCapitalUsd", Types.VARCHAR}, {"otherJmd", Types.VARCHAR},
		{"otherExchangeRate", Types.VARCHAR}, {"otherUsd", Types.VARCHAR},
		{"estimatedLocalExpenditure", Types.VARCHAR},
		{"otherEstimatedLocal ", Types.VARCHAR},
		{"annualYearOne", Types.VARCHAR}, {"annualOneUsd", Types.VARCHAR},
		{"annualYearTwo", Types.VARCHAR}, {"annualTwoUsd", Types.VARCHAR},
		{"annualYearThree", Types.VARCHAR}, {"annualThreeUsd", Types.VARCHAR},
		{"targetMarketLocal", Types.VARCHAR},
		{"targetMarketForeign", Types.VARCHAR},
		{"targetMarketCountries", Types.VARCHAR},
		{"declareInformationProvide", Types.VARCHAR},
		{"CreativeApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("creativeIndiEcoEffectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("shareCapitalJmd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shareCapitalExchangeRate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shareCapitalUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localCapitalJmd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localCapitalExchangeRate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localCapitalUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherJmd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherExchangeRate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estimatedLocalExpenditure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherEstimatedLocal ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualYearOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualOneUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualYearTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualTwoUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualYearThree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualThreeUsd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetMarketLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetMarketForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetMarketCountries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("declareInformationProvide", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CreativeApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_creative_economic_effect (creativeIndiEcoEffectId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,shareCapitalJmd VARCHAR(75) null,shareCapitalExchangeRate VARCHAR(75) null,shareCapitalUsd VARCHAR(75) null,localCapitalJmd VARCHAR(75) null,localCapitalExchangeRate VARCHAR(75) null,localCapitalUsd VARCHAR(75) null,otherJmd VARCHAR(75) null,otherExchangeRate VARCHAR(75) null,otherUsd VARCHAR(75) null,estimatedLocalExpenditure VARCHAR(75) null,otherEstimatedLocal  VARCHAR(75) null,annualYearOne VARCHAR(75) null,annualOneUsd VARCHAR(75) null,annualYearTwo VARCHAR(75) null,annualTwoUsd VARCHAR(75) null,annualYearThree VARCHAR(75) null,annualThreeUsd VARCHAR(75) null,targetMarketLocal VARCHAR(75) null,targetMarketForeign VARCHAR(75) null,targetMarketCountries VARCHAR(75) null,declareInformationProvide VARCHAR(75) null,CreativeApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_creative_economic_effect";

	public static final String ORDER_BY_JPQL =
		" ORDER BY creativeIndividualEconomicEffect.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_creative_economic_effect.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATIVEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CreativeIndividualEconomicEffectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _creativeIndiEcoEffectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCreativeIndiEcoEffectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _creativeIndiEcoEffectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CreativeIndividualEconomicEffect.class;
	}

	@Override
	public String getModelClassName() {
		return CreativeIndividualEconomicEffect.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CreativeIndividualEconomicEffect, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<CreativeIndividualEconomicEffect, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeIndividualEconomicEffect, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CreativeIndividualEconomicEffect)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CreativeIndividualEconomicEffect, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CreativeIndividualEconomicEffect, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CreativeIndividualEconomicEffect)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CreativeIndividualEconomicEffect, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CreativeIndividualEconomicEffect, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CreativeIndividualEconomicEffect, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CreativeIndividualEconomicEffect, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CreativeIndividualEconomicEffect, Object>>();

			attributeGetterFunctions.put(
				"creativeIndiEcoEffectId",
				CreativeIndividualEconomicEffect::getCreativeIndiEcoEffectId);
			attributeGetterFunctions.put(
				"groupId", CreativeIndividualEconomicEffect::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CreativeIndividualEconomicEffect::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CreativeIndividualEconomicEffect::getUserId);
			attributeGetterFunctions.put(
				"userName", CreativeIndividualEconomicEffect::getUserName);
			attributeGetterFunctions.put(
				"createDate", CreativeIndividualEconomicEffect::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				CreativeIndividualEconomicEffect::getModifiedDate);
			attributeGetterFunctions.put(
				"shareCapitalJmd",
				CreativeIndividualEconomicEffect::getShareCapitalJmd);
			attributeGetterFunctions.put(
				"shareCapitalExchangeRate",
				CreativeIndividualEconomicEffect::getShareCapitalExchangeRate);
			attributeGetterFunctions.put(
				"shareCapitalUsd",
				CreativeIndividualEconomicEffect::getShareCapitalUsd);
			attributeGetterFunctions.put(
				"localCapitalJmd",
				CreativeIndividualEconomicEffect::getLocalCapitalJmd);
			attributeGetterFunctions.put(
				"localCapitalExchangeRate",
				CreativeIndividualEconomicEffect::getLocalCapitalExchangeRate);
			attributeGetterFunctions.put(
				"localCapitalUsd",
				CreativeIndividualEconomicEffect::getLocalCapitalUsd);
			attributeGetterFunctions.put(
				"otherJmd", CreativeIndividualEconomicEffect::getOtherJmd);
			attributeGetterFunctions.put(
				"otherExchangeRate",
				CreativeIndividualEconomicEffect::getOtherExchangeRate);
			attributeGetterFunctions.put(
				"otherUsd", CreativeIndividualEconomicEffect::getOtherUsd);
			attributeGetterFunctions.put(
				"estimatedLocalExpenditure",
				CreativeIndividualEconomicEffect::getEstimatedLocalExpenditure);
			attributeGetterFunctions.put(
				"otherEstimatedLocal ",
				CreativeIndividualEconomicEffect::getOtherEstimatedLocal);
			attributeGetterFunctions.put(
				"annualYearOne",
				CreativeIndividualEconomicEffect::getAnnualYearOne);
			attributeGetterFunctions.put(
				"annualOneUsd",
				CreativeIndividualEconomicEffect::getAnnualOneUsd);
			attributeGetterFunctions.put(
				"annualYearTwo",
				CreativeIndividualEconomicEffect::getAnnualYearTwo);
			attributeGetterFunctions.put(
				"annualTwoUsd",
				CreativeIndividualEconomicEffect::getAnnualTwoUsd);
			attributeGetterFunctions.put(
				"annualYearThree",
				CreativeIndividualEconomicEffect::getAnnualYearThree);
			attributeGetterFunctions.put(
				"annualThreeUsd",
				CreativeIndividualEconomicEffect::getAnnualThreeUsd);
			attributeGetterFunctions.put(
				"targetMarketLocal",
				CreativeIndividualEconomicEffect::getTargetMarketLocal);
			attributeGetterFunctions.put(
				"targetMarketForeign",
				CreativeIndividualEconomicEffect::getTargetMarketForeign);
			attributeGetterFunctions.put(
				"targetMarketCountries",
				CreativeIndividualEconomicEffect::getTargetMarketCountries);
			attributeGetterFunctions.put(
				"declareInformationProvide",
				CreativeIndividualEconomicEffect::getDeclareInformationProvide);
			attributeGetterFunctions.put(
				"CreativeApplicationId",
				CreativeIndividualEconomicEffect::getCreativeApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CreativeIndividualEconomicEffect, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CreativeIndividualEconomicEffect, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CreativeIndividualEconomicEffect, ?>>();

			attributeSetterBiConsumers.put(
				"creativeIndiEcoEffectId",
				(BiConsumer<CreativeIndividualEconomicEffect, Long>)
					CreativeIndividualEconomicEffect::
						setCreativeIndiEcoEffectId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CreativeIndividualEconomicEffect, Long>)
					CreativeIndividualEconomicEffect::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CreativeIndividualEconomicEffect, Long>)
					CreativeIndividualEconomicEffect::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CreativeIndividualEconomicEffect, Long>)
					CreativeIndividualEconomicEffect::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CreativeIndividualEconomicEffect, Date>)
					CreativeIndividualEconomicEffect::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CreativeIndividualEconomicEffect, Date>)
					CreativeIndividualEconomicEffect::setModifiedDate);
			attributeSetterBiConsumers.put(
				"shareCapitalJmd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setShareCapitalJmd);
			attributeSetterBiConsumers.put(
				"shareCapitalExchangeRate",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::
						setShareCapitalExchangeRate);
			attributeSetterBiConsumers.put(
				"shareCapitalUsd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setShareCapitalUsd);
			attributeSetterBiConsumers.put(
				"localCapitalJmd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setLocalCapitalJmd);
			attributeSetterBiConsumers.put(
				"localCapitalExchangeRate",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::
						setLocalCapitalExchangeRate);
			attributeSetterBiConsumers.put(
				"localCapitalUsd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setLocalCapitalUsd);
			attributeSetterBiConsumers.put(
				"otherJmd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setOtherJmd);
			attributeSetterBiConsumers.put(
				"otherExchangeRate",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setOtherExchangeRate);
			attributeSetterBiConsumers.put(
				"otherUsd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setOtherUsd);
			attributeSetterBiConsumers.put(
				"estimatedLocalExpenditure",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::
						setEstimatedLocalExpenditure);
			attributeSetterBiConsumers.put(
				"otherEstimatedLocal ",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setOtherEstimatedLocal);
			attributeSetterBiConsumers.put(
				"annualYearOne",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setAnnualYearOne);
			attributeSetterBiConsumers.put(
				"annualOneUsd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setAnnualOneUsd);
			attributeSetterBiConsumers.put(
				"annualYearTwo",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setAnnualYearTwo);
			attributeSetterBiConsumers.put(
				"annualTwoUsd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setAnnualTwoUsd);
			attributeSetterBiConsumers.put(
				"annualYearThree",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setAnnualYearThree);
			attributeSetterBiConsumers.put(
				"annualThreeUsd",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setAnnualThreeUsd);
			attributeSetterBiConsumers.put(
				"targetMarketLocal",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setTargetMarketLocal);
			attributeSetterBiConsumers.put(
				"targetMarketForeign",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setTargetMarketForeign);
			attributeSetterBiConsumers.put(
				"targetMarketCountries",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::setTargetMarketCountries);
			attributeSetterBiConsumers.put(
				"declareInformationProvide",
				(BiConsumer<CreativeIndividualEconomicEffect, String>)
					CreativeIndividualEconomicEffect::
						setDeclareInformationProvide);
			attributeSetterBiConsumers.put(
				"CreativeApplicationId",
				(BiConsumer<CreativeIndividualEconomicEffect, Long>)
					CreativeIndividualEconomicEffect::setCreativeApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCreativeIndiEcoEffectId() {
		return _creativeIndiEcoEffectId;
	}

	@Override
	public void setCreativeIndiEcoEffectId(long creativeIndiEcoEffectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creativeIndiEcoEffectId = creativeIndiEcoEffectId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getShareCapitalJmd() {
		if (_shareCapitalJmd == null) {
			return "";
		}
		else {
			return _shareCapitalJmd;
		}
	}

	@Override
	public void setShareCapitalJmd(String shareCapitalJmd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shareCapitalJmd = shareCapitalJmd;
	}

	@JSON
	@Override
	public String getShareCapitalExchangeRate() {
		if (_shareCapitalExchangeRate == null) {
			return "";
		}
		else {
			return _shareCapitalExchangeRate;
		}
	}

	@Override
	public void setShareCapitalExchangeRate(String shareCapitalExchangeRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shareCapitalExchangeRate = shareCapitalExchangeRate;
	}

	@JSON
	@Override
	public String getShareCapitalUsd() {
		if (_shareCapitalUsd == null) {
			return "";
		}
		else {
			return _shareCapitalUsd;
		}
	}

	@Override
	public void setShareCapitalUsd(String shareCapitalUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shareCapitalUsd = shareCapitalUsd;
	}

	@JSON
	@Override
	public String getLocalCapitalJmd() {
		if (_localCapitalJmd == null) {
			return "";
		}
		else {
			return _localCapitalJmd;
		}
	}

	@Override
	public void setLocalCapitalJmd(String localCapitalJmd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localCapitalJmd = localCapitalJmd;
	}

	@JSON
	@Override
	public String getLocalCapitalExchangeRate() {
		if (_localCapitalExchangeRate == null) {
			return "";
		}
		else {
			return _localCapitalExchangeRate;
		}
	}

	@Override
	public void setLocalCapitalExchangeRate(String localCapitalExchangeRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localCapitalExchangeRate = localCapitalExchangeRate;
	}

	@JSON
	@Override
	public String getLocalCapitalUsd() {
		if (_localCapitalUsd == null) {
			return "";
		}
		else {
			return _localCapitalUsd;
		}
	}

	@Override
	public void setLocalCapitalUsd(String localCapitalUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localCapitalUsd = localCapitalUsd;
	}

	@JSON
	@Override
	public String getOtherJmd() {
		if (_otherJmd == null) {
			return "";
		}
		else {
			return _otherJmd;
		}
	}

	@Override
	public void setOtherJmd(String otherJmd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherJmd = otherJmd;
	}

	@JSON
	@Override
	public String getOtherExchangeRate() {
		if (_otherExchangeRate == null) {
			return "";
		}
		else {
			return _otherExchangeRate;
		}
	}

	@Override
	public void setOtherExchangeRate(String otherExchangeRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherExchangeRate = otherExchangeRate;
	}

	@JSON
	@Override
	public String getOtherUsd() {
		if (_otherUsd == null) {
			return "";
		}
		else {
			return _otherUsd;
		}
	}

	@Override
	public void setOtherUsd(String otherUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherUsd = otherUsd;
	}

	@JSON
	@Override
	public String getEstimatedLocalExpenditure() {
		if (_estimatedLocalExpenditure == null) {
			return "";
		}
		else {
			return _estimatedLocalExpenditure;
		}
	}

	@Override
	public void setEstimatedLocalExpenditure(String estimatedLocalExpenditure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estimatedLocalExpenditure = estimatedLocalExpenditure;
	}

	@JSON
	@Override
	public String getOtherEstimatedLocal() {
		if (_otherEstimatedLocal == null) {
			return "";
		}
		else {
			return _otherEstimatedLocal;
		}
	}

	@Override
	public void setOtherEstimatedLocal(String otherEstimatedLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherEstimatedLocal = otherEstimatedLocal;
	}

	@JSON
	@Override
	public String getAnnualYearOne() {
		if (_annualYearOne == null) {
			return "";
		}
		else {
			return _annualYearOne;
		}
	}

	@Override
	public void setAnnualYearOne(String annualYearOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualYearOne = annualYearOne;
	}

	@JSON
	@Override
	public String getAnnualOneUsd() {
		if (_annualOneUsd == null) {
			return "";
		}
		else {
			return _annualOneUsd;
		}
	}

	@Override
	public void setAnnualOneUsd(String annualOneUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualOneUsd = annualOneUsd;
	}

	@JSON
	@Override
	public String getAnnualYearTwo() {
		if (_annualYearTwo == null) {
			return "";
		}
		else {
			return _annualYearTwo;
		}
	}

	@Override
	public void setAnnualYearTwo(String annualYearTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualYearTwo = annualYearTwo;
	}

	@JSON
	@Override
	public String getAnnualTwoUsd() {
		if (_annualTwoUsd == null) {
			return "";
		}
		else {
			return _annualTwoUsd;
		}
	}

	@Override
	public void setAnnualTwoUsd(String annualTwoUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualTwoUsd = annualTwoUsd;
	}

	@JSON
	@Override
	public String getAnnualYearThree() {
		if (_annualYearThree == null) {
			return "";
		}
		else {
			return _annualYearThree;
		}
	}

	@Override
	public void setAnnualYearThree(String annualYearThree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualYearThree = annualYearThree;
	}

	@JSON
	@Override
	public String getAnnualThreeUsd() {
		if (_annualThreeUsd == null) {
			return "";
		}
		else {
			return _annualThreeUsd;
		}
	}

	@Override
	public void setAnnualThreeUsd(String annualThreeUsd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualThreeUsd = annualThreeUsd;
	}

	@JSON
	@Override
	public String getTargetMarketLocal() {
		if (_targetMarketLocal == null) {
			return "";
		}
		else {
			return _targetMarketLocal;
		}
	}

	@Override
	public void setTargetMarketLocal(String targetMarketLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetMarketLocal = targetMarketLocal;
	}

	@JSON
	@Override
	public String getTargetMarketForeign() {
		if (_targetMarketForeign == null) {
			return "";
		}
		else {
			return _targetMarketForeign;
		}
	}

	@Override
	public void setTargetMarketForeign(String targetMarketForeign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetMarketForeign = targetMarketForeign;
	}

	@JSON
	@Override
	public String getTargetMarketCountries() {
		if (_targetMarketCountries == null) {
			return "";
		}
		else {
			return _targetMarketCountries;
		}
	}

	@Override
	public void setTargetMarketCountries(String targetMarketCountries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetMarketCountries = targetMarketCountries;
	}

	@JSON
	@Override
	public String getDeclareInformationProvide() {
		if (_declareInformationProvide == null) {
			return "";
		}
		else {
			return _declareInformationProvide;
		}
	}

	@Override
	public void setDeclareInformationProvide(String declareInformationProvide) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_declareInformationProvide = declareInformationProvide;
	}

	@JSON
	@Override
	public long getCreativeApplicationId() {
		return _CreativeApplicationId;
	}

	@Override
	public void setCreativeApplicationId(long CreativeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CreativeApplicationId = CreativeApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreativeApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CreativeIndividualEconomicEffect.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CreativeIndividualEconomicEffect toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CreativeIndividualEconomicEffect>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CreativeIndividualEconomicEffectImpl
			creativeIndividualEconomicEffectImpl =
				new CreativeIndividualEconomicEffectImpl();

		creativeIndividualEconomicEffectImpl.setCreativeIndiEcoEffectId(
			getCreativeIndiEcoEffectId());
		creativeIndividualEconomicEffectImpl.setGroupId(getGroupId());
		creativeIndividualEconomicEffectImpl.setCompanyId(getCompanyId());
		creativeIndividualEconomicEffectImpl.setUserId(getUserId());
		creativeIndividualEconomicEffectImpl.setUserName(getUserName());
		creativeIndividualEconomicEffectImpl.setCreateDate(getCreateDate());
		creativeIndividualEconomicEffectImpl.setModifiedDate(getModifiedDate());
		creativeIndividualEconomicEffectImpl.setShareCapitalJmd(
			getShareCapitalJmd());
		creativeIndividualEconomicEffectImpl.setShareCapitalExchangeRate(
			getShareCapitalExchangeRate());
		creativeIndividualEconomicEffectImpl.setShareCapitalUsd(
			getShareCapitalUsd());
		creativeIndividualEconomicEffectImpl.setLocalCapitalJmd(
			getLocalCapitalJmd());
		creativeIndividualEconomicEffectImpl.setLocalCapitalExchangeRate(
			getLocalCapitalExchangeRate());
		creativeIndividualEconomicEffectImpl.setLocalCapitalUsd(
			getLocalCapitalUsd());
		creativeIndividualEconomicEffectImpl.setOtherJmd(getOtherJmd());
		creativeIndividualEconomicEffectImpl.setOtherExchangeRate(
			getOtherExchangeRate());
		creativeIndividualEconomicEffectImpl.setOtherUsd(getOtherUsd());
		creativeIndividualEconomicEffectImpl.setEstimatedLocalExpenditure(
			getEstimatedLocalExpenditure());
		creativeIndividualEconomicEffectImpl.setOtherEstimatedLocal(
			getOtherEstimatedLocal());
		creativeIndividualEconomicEffectImpl.setAnnualYearOne(
			getAnnualYearOne());
		creativeIndividualEconomicEffectImpl.setAnnualOneUsd(getAnnualOneUsd());
		creativeIndividualEconomicEffectImpl.setAnnualYearTwo(
			getAnnualYearTwo());
		creativeIndividualEconomicEffectImpl.setAnnualTwoUsd(getAnnualTwoUsd());
		creativeIndividualEconomicEffectImpl.setAnnualYearThree(
			getAnnualYearThree());
		creativeIndividualEconomicEffectImpl.setAnnualThreeUsd(
			getAnnualThreeUsd());
		creativeIndividualEconomicEffectImpl.setTargetMarketLocal(
			getTargetMarketLocal());
		creativeIndividualEconomicEffectImpl.setTargetMarketForeign(
			getTargetMarketForeign());
		creativeIndividualEconomicEffectImpl.setTargetMarketCountries(
			getTargetMarketCountries());
		creativeIndividualEconomicEffectImpl.setDeclareInformationProvide(
			getDeclareInformationProvide());
		creativeIndividualEconomicEffectImpl.setCreativeApplicationId(
			getCreativeApplicationId());

		creativeIndividualEconomicEffectImpl.resetOriginalValues();

		return creativeIndividualEconomicEffectImpl;
	}

	@Override
	public CreativeIndividualEconomicEffect cloneWithOriginalValues() {
		CreativeIndividualEconomicEffectImpl
			creativeIndividualEconomicEffectImpl =
				new CreativeIndividualEconomicEffectImpl();

		creativeIndividualEconomicEffectImpl.setCreativeIndiEcoEffectId(
			this.<Long>getColumnOriginalValue("creativeIndiEcoEffectId"));
		creativeIndividualEconomicEffectImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		creativeIndividualEconomicEffectImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		creativeIndividualEconomicEffectImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		creativeIndividualEconomicEffectImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		creativeIndividualEconomicEffectImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		creativeIndividualEconomicEffectImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		creativeIndividualEconomicEffectImpl.setShareCapitalJmd(
			this.<String>getColumnOriginalValue("shareCapitalJmd"));
		creativeIndividualEconomicEffectImpl.setShareCapitalExchangeRate(
			this.<String>getColumnOriginalValue("shareCapitalExchangeRate"));
		creativeIndividualEconomicEffectImpl.setShareCapitalUsd(
			this.<String>getColumnOriginalValue("shareCapitalUsd"));
		creativeIndividualEconomicEffectImpl.setLocalCapitalJmd(
			this.<String>getColumnOriginalValue("localCapitalJmd"));
		creativeIndividualEconomicEffectImpl.setLocalCapitalExchangeRate(
			this.<String>getColumnOriginalValue("localCapitalExchangeRate"));
		creativeIndividualEconomicEffectImpl.setLocalCapitalUsd(
			this.<String>getColumnOriginalValue("localCapitalUsd"));
		creativeIndividualEconomicEffectImpl.setOtherJmd(
			this.<String>getColumnOriginalValue("otherJmd"));
		creativeIndividualEconomicEffectImpl.setOtherExchangeRate(
			this.<String>getColumnOriginalValue("otherExchangeRate"));
		creativeIndividualEconomicEffectImpl.setOtherUsd(
			this.<String>getColumnOriginalValue("otherUsd"));
		creativeIndividualEconomicEffectImpl.setEstimatedLocalExpenditure(
			this.<String>getColumnOriginalValue("estimatedLocalExpenditure"));
		creativeIndividualEconomicEffectImpl.setOtherEstimatedLocal(
			this.<String>getColumnOriginalValue("otherEstimatedLocal "));
		creativeIndividualEconomicEffectImpl.setAnnualYearOne(
			this.<String>getColumnOriginalValue("annualYearOne"));
		creativeIndividualEconomicEffectImpl.setAnnualOneUsd(
			this.<String>getColumnOriginalValue("annualOneUsd"));
		creativeIndividualEconomicEffectImpl.setAnnualYearTwo(
			this.<String>getColumnOriginalValue("annualYearTwo"));
		creativeIndividualEconomicEffectImpl.setAnnualTwoUsd(
			this.<String>getColumnOriginalValue("annualTwoUsd"));
		creativeIndividualEconomicEffectImpl.setAnnualYearThree(
			this.<String>getColumnOriginalValue("annualYearThree"));
		creativeIndividualEconomicEffectImpl.setAnnualThreeUsd(
			this.<String>getColumnOriginalValue("annualThreeUsd"));
		creativeIndividualEconomicEffectImpl.setTargetMarketLocal(
			this.<String>getColumnOriginalValue("targetMarketLocal"));
		creativeIndividualEconomicEffectImpl.setTargetMarketForeign(
			this.<String>getColumnOriginalValue("targetMarketForeign"));
		creativeIndividualEconomicEffectImpl.setTargetMarketCountries(
			this.<String>getColumnOriginalValue("targetMarketCountries"));
		creativeIndividualEconomicEffectImpl.setDeclareInformationProvide(
			this.<String>getColumnOriginalValue("declareInformationProvide"));
		creativeIndividualEconomicEffectImpl.setCreativeApplicationId(
			this.<Long>getColumnOriginalValue("CreativeApplicationId"));

		return creativeIndividualEconomicEffectImpl;
	}

	@Override
	public int compareTo(
		CreativeIndividualEconomicEffect creativeIndividualEconomicEffect) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), creativeIndividualEconomicEffect.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CreativeIndividualEconomicEffect)) {
			return false;
		}

		CreativeIndividualEconomicEffect creativeIndividualEconomicEffect =
			(CreativeIndividualEconomicEffect)object;

		long primaryKey = creativeIndividualEconomicEffect.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CreativeIndividualEconomicEffect> toCacheModel() {
		CreativeIndividualEconomicEffectCacheModel
			creativeIndividualEconomicEffectCacheModel =
				new CreativeIndividualEconomicEffectCacheModel();

		creativeIndividualEconomicEffectCacheModel.creativeIndiEcoEffectId =
			getCreativeIndiEcoEffectId();

		creativeIndividualEconomicEffectCacheModel.groupId = getGroupId();

		creativeIndividualEconomicEffectCacheModel.companyId = getCompanyId();

		creativeIndividualEconomicEffectCacheModel.userId = getUserId();

		creativeIndividualEconomicEffectCacheModel.userName = getUserName();

		String userName = creativeIndividualEconomicEffectCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			creativeIndividualEconomicEffectCacheModel.createDate =
				createDate.getTime();
		}
		else {
			creativeIndividualEconomicEffectCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			creativeIndividualEconomicEffectCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			creativeIndividualEconomicEffectCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		creativeIndividualEconomicEffectCacheModel.shareCapitalJmd =
			getShareCapitalJmd();

		String shareCapitalJmd =
			creativeIndividualEconomicEffectCacheModel.shareCapitalJmd;

		if ((shareCapitalJmd != null) && (shareCapitalJmd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.shareCapitalJmd = null;
		}

		creativeIndividualEconomicEffectCacheModel.shareCapitalExchangeRate =
			getShareCapitalExchangeRate();

		String shareCapitalExchangeRate =
			creativeIndividualEconomicEffectCacheModel.shareCapitalExchangeRate;

		if ((shareCapitalExchangeRate != null) &&
			(shareCapitalExchangeRate.length() == 0)) {

			creativeIndividualEconomicEffectCacheModel.
				shareCapitalExchangeRate = null;
		}

		creativeIndividualEconomicEffectCacheModel.shareCapitalUsd =
			getShareCapitalUsd();

		String shareCapitalUsd =
			creativeIndividualEconomicEffectCacheModel.shareCapitalUsd;

		if ((shareCapitalUsd != null) && (shareCapitalUsd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.shareCapitalUsd = null;
		}

		creativeIndividualEconomicEffectCacheModel.localCapitalJmd =
			getLocalCapitalJmd();

		String localCapitalJmd =
			creativeIndividualEconomicEffectCacheModel.localCapitalJmd;

		if ((localCapitalJmd != null) && (localCapitalJmd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.localCapitalJmd = null;
		}

		creativeIndividualEconomicEffectCacheModel.localCapitalExchangeRate =
			getLocalCapitalExchangeRate();

		String localCapitalExchangeRate =
			creativeIndividualEconomicEffectCacheModel.localCapitalExchangeRate;

		if ((localCapitalExchangeRate != null) &&
			(localCapitalExchangeRate.length() == 0)) {

			creativeIndividualEconomicEffectCacheModel.
				localCapitalExchangeRate = null;
		}

		creativeIndividualEconomicEffectCacheModel.localCapitalUsd =
			getLocalCapitalUsd();

		String localCapitalUsd =
			creativeIndividualEconomicEffectCacheModel.localCapitalUsd;

		if ((localCapitalUsd != null) && (localCapitalUsd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.localCapitalUsd = null;
		}

		creativeIndividualEconomicEffectCacheModel.otherJmd = getOtherJmd();

		String otherJmd = creativeIndividualEconomicEffectCacheModel.otherJmd;

		if ((otherJmd != null) && (otherJmd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.otherJmd = null;
		}

		creativeIndividualEconomicEffectCacheModel.otherExchangeRate =
			getOtherExchangeRate();

		String otherExchangeRate =
			creativeIndividualEconomicEffectCacheModel.otherExchangeRate;

		if ((otherExchangeRate != null) && (otherExchangeRate.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.otherExchangeRate = null;
		}

		creativeIndividualEconomicEffectCacheModel.otherUsd = getOtherUsd();

		String otherUsd = creativeIndividualEconomicEffectCacheModel.otherUsd;

		if ((otherUsd != null) && (otherUsd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.otherUsd = null;
		}

		creativeIndividualEconomicEffectCacheModel.estimatedLocalExpenditure =
			getEstimatedLocalExpenditure();

		String estimatedLocalExpenditure =
			creativeIndividualEconomicEffectCacheModel.
				estimatedLocalExpenditure;

		if ((estimatedLocalExpenditure != null) &&
			(estimatedLocalExpenditure.length() == 0)) {

			creativeIndividualEconomicEffectCacheModel.
				estimatedLocalExpenditure = null;
		}

		creativeIndividualEconomicEffectCacheModel.otherEstimatedLocal =
			getOtherEstimatedLocal();

		String otherEstimatedLocal =
			creativeIndividualEconomicEffectCacheModel.otherEstimatedLocal;

		if ((otherEstimatedLocal != null) &&
			(otherEstimatedLocal.length() == 0)) {

			creativeIndividualEconomicEffectCacheModel.otherEstimatedLocal =
				null;
		}

		creativeIndividualEconomicEffectCacheModel.annualYearOne =
			getAnnualYearOne();

		String annualYearOne =
			creativeIndividualEconomicEffectCacheModel.annualYearOne;

		if ((annualYearOne != null) && (annualYearOne.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.annualYearOne = null;
		}

		creativeIndividualEconomicEffectCacheModel.annualOneUsd =
			getAnnualOneUsd();

		String annualOneUsd =
			creativeIndividualEconomicEffectCacheModel.annualOneUsd;

		if ((annualOneUsd != null) && (annualOneUsd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.annualOneUsd = null;
		}

		creativeIndividualEconomicEffectCacheModel.annualYearTwo =
			getAnnualYearTwo();

		String annualYearTwo =
			creativeIndividualEconomicEffectCacheModel.annualYearTwo;

		if ((annualYearTwo != null) && (annualYearTwo.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.annualYearTwo = null;
		}

		creativeIndividualEconomicEffectCacheModel.annualTwoUsd =
			getAnnualTwoUsd();

		String annualTwoUsd =
			creativeIndividualEconomicEffectCacheModel.annualTwoUsd;

		if ((annualTwoUsd != null) && (annualTwoUsd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.annualTwoUsd = null;
		}

		creativeIndividualEconomicEffectCacheModel.annualYearThree =
			getAnnualYearThree();

		String annualYearThree =
			creativeIndividualEconomicEffectCacheModel.annualYearThree;

		if ((annualYearThree != null) && (annualYearThree.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.annualYearThree = null;
		}

		creativeIndividualEconomicEffectCacheModel.annualThreeUsd =
			getAnnualThreeUsd();

		String annualThreeUsd =
			creativeIndividualEconomicEffectCacheModel.annualThreeUsd;

		if ((annualThreeUsd != null) && (annualThreeUsd.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.annualThreeUsd = null;
		}

		creativeIndividualEconomicEffectCacheModel.targetMarketLocal =
			getTargetMarketLocal();

		String targetMarketLocal =
			creativeIndividualEconomicEffectCacheModel.targetMarketLocal;

		if ((targetMarketLocal != null) && (targetMarketLocal.length() == 0)) {
			creativeIndividualEconomicEffectCacheModel.targetMarketLocal = null;
		}

		creativeIndividualEconomicEffectCacheModel.targetMarketForeign =
			getTargetMarketForeign();

		String targetMarketForeign =
			creativeIndividualEconomicEffectCacheModel.targetMarketForeign;

		if ((targetMarketForeign != null) &&
			(targetMarketForeign.length() == 0)) {

			creativeIndividualEconomicEffectCacheModel.targetMarketForeign =
				null;
		}

		creativeIndividualEconomicEffectCacheModel.targetMarketCountries =
			getTargetMarketCountries();

		String targetMarketCountries =
			creativeIndividualEconomicEffectCacheModel.targetMarketCountries;

		if ((targetMarketCountries != null) &&
			(targetMarketCountries.length() == 0)) {

			creativeIndividualEconomicEffectCacheModel.targetMarketCountries =
				null;
		}

		creativeIndividualEconomicEffectCacheModel.declareInformationProvide =
			getDeclareInformationProvide();

		String declareInformationProvide =
			creativeIndividualEconomicEffectCacheModel.
				declareInformationProvide;

		if ((declareInformationProvide != null) &&
			(declareInformationProvide.length() == 0)) {

			creativeIndividualEconomicEffectCacheModel.
				declareInformationProvide = null;
		}

		creativeIndividualEconomicEffectCacheModel.CreativeApplicationId =
			getCreativeApplicationId();

		return creativeIndividualEconomicEffectCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CreativeIndividualEconomicEffect, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<CreativeIndividualEconomicEffect, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreativeIndividualEconomicEffect, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CreativeIndividualEconomicEffect)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CreativeIndividualEconomicEffect>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CreativeIndividualEconomicEffect.class,
						ModelWrapper.class);

	}

	private long _creativeIndiEcoEffectId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _shareCapitalJmd;
	private String _shareCapitalExchangeRate;
	private String _shareCapitalUsd;
	private String _localCapitalJmd;
	private String _localCapitalExchangeRate;
	private String _localCapitalUsd;
	private String _otherJmd;
	private String _otherExchangeRate;
	private String _otherUsd;
	private String _estimatedLocalExpenditure;
	private String _otherEstimatedLocal;
	private String _annualYearOne;
	private String _annualOneUsd;
	private String _annualYearTwo;
	private String _annualTwoUsd;
	private String _annualYearThree;
	private String _annualThreeUsd;
	private String _targetMarketLocal;
	private String _targetMarketForeign;
	private String _targetMarketCountries;
	private String _declareInformationProvide;
	private long _CreativeApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<CreativeIndividualEconomicEffect, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CreativeIndividualEconomicEffect)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"creativeIndiEcoEffectId", _creativeIndiEcoEffectId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("shareCapitalJmd", _shareCapitalJmd);
		_columnOriginalValues.put(
			"shareCapitalExchangeRate", _shareCapitalExchangeRate);
		_columnOriginalValues.put("shareCapitalUsd", _shareCapitalUsd);
		_columnOriginalValues.put("localCapitalJmd", _localCapitalJmd);
		_columnOriginalValues.put(
			"localCapitalExchangeRate", _localCapitalExchangeRate);
		_columnOriginalValues.put("localCapitalUsd", _localCapitalUsd);
		_columnOriginalValues.put("otherJmd", _otherJmd);
		_columnOriginalValues.put("otherExchangeRate", _otherExchangeRate);
		_columnOriginalValues.put("otherUsd", _otherUsd);
		_columnOriginalValues.put(
			"estimatedLocalExpenditure", _estimatedLocalExpenditure);
		_columnOriginalValues.put("otherEstimatedLocal ", _otherEstimatedLocal);
		_columnOriginalValues.put("annualYearOne", _annualYearOne);
		_columnOriginalValues.put("annualOneUsd", _annualOneUsd);
		_columnOriginalValues.put("annualYearTwo", _annualYearTwo);
		_columnOriginalValues.put("annualTwoUsd", _annualTwoUsd);
		_columnOriginalValues.put("annualYearThree", _annualYearThree);
		_columnOriginalValues.put("annualThreeUsd", _annualThreeUsd);
		_columnOriginalValues.put("targetMarketLocal", _targetMarketLocal);
		_columnOriginalValues.put("targetMarketForeign", _targetMarketForeign);
		_columnOriginalValues.put(
			"targetMarketCountries", _targetMarketCountries);
		_columnOriginalValues.put(
			"declareInformationProvide", _declareInformationProvide);
		_columnOriginalValues.put(
			"CreativeApplicationId", _CreativeApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("creativeIndiEcoEffectId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("shareCapitalJmd", 128L);

		columnBitmasks.put("shareCapitalExchangeRate", 256L);

		columnBitmasks.put("shareCapitalUsd", 512L);

		columnBitmasks.put("localCapitalJmd", 1024L);

		columnBitmasks.put("localCapitalExchangeRate", 2048L);

		columnBitmasks.put("localCapitalUsd", 4096L);

		columnBitmasks.put("otherJmd", 8192L);

		columnBitmasks.put("otherExchangeRate", 16384L);

		columnBitmasks.put("otherUsd", 32768L);

		columnBitmasks.put("estimatedLocalExpenditure", 65536L);

		columnBitmasks.put("otherEstimatedLocal ", 131072L);

		columnBitmasks.put("annualYearOne", 262144L);

		columnBitmasks.put("annualOneUsd", 524288L);

		columnBitmasks.put("annualYearTwo", 1048576L);

		columnBitmasks.put("annualTwoUsd", 2097152L);

		columnBitmasks.put("annualYearThree", 4194304L);

		columnBitmasks.put("annualThreeUsd", 8388608L);

		columnBitmasks.put("targetMarketLocal", 16777216L);

		columnBitmasks.put("targetMarketForeign", 33554432L);

		columnBitmasks.put("targetMarketCountries", 67108864L);

		columnBitmasks.put("declareInformationProvide", 134217728L);

		columnBitmasks.put("CreativeApplicationId", 268435456L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CreativeIndividualEconomicEffect _escapedModel;

}