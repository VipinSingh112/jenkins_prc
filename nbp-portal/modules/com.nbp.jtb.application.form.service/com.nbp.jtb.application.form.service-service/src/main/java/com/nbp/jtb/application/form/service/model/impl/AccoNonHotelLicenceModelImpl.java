/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AccoNonHotelLicence;
import com.nbp.jtb.application.form.service.model.AccoNonHotelLicenceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccoNonHotelLicence service. Represents a row in the &quot;nbp_jtb_acco_non_hotel_lic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccoNonHotelLicenceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccoNonHotelLicenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccoNonHotelLicenceImpl
 * @generated
 */
@JSON(strict = true)
public class AccoNonHotelLicenceModelImpl
	extends BaseModelImpl<AccoNonHotelLicence>
	implements AccoNonHotelLicenceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acco non hotel licence model instance should use the <code>AccoNonHotelLicence</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_acco_non_hotel_lic";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accoNonHotelLicenceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"accoName", Types.VARCHAR}, {"accoAddress", Types.VARCHAR},
		{"accoTeleNo", Types.VARCHAR}, {"accoFaxNo", Types.VARCHAR},
		{"accoEmail", Types.VARCHAR}, {"accoNoOfEmp", Types.VARCHAR},
		{"accoOfferedType", Types.VARCHAR}, {"noOfRooms", Types.VARCHAR},
		{"ownerName", Types.VARCHAR}, {"ownerAddress", Types.VARCHAR},
		{"ownerTeleNo", Types.VARCHAR}, {"ownerFaxNo", Types.VARCHAR},
		{"operCompName", Types.VARCHAR}, {"operAddress", Types.VARCHAR},
		{"managerName", Types.VARCHAR}, {"managerAddress", Types.VARCHAR},
		{"managerTeleNo", Types.VARCHAR}, {"managerFaxNo", Types.VARCHAR},
		{"managerEmail", Types.VARCHAR}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoNonHotelLicenceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accoName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoTeleNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoNoOfEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoOfferedType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noOfRooms", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerTeleNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operCompName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerTeleNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_acco_non_hotel_lic (uuid_ VARCHAR(75) null,accoNonHotelLicenceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,accoName VARCHAR(75) null,accoAddress VARCHAR(500) null,accoTeleNo VARCHAR(75) null,accoFaxNo VARCHAR(75) null,accoEmail VARCHAR(75) null,accoNoOfEmp VARCHAR(75) null,accoOfferedType VARCHAR(75) null,noOfRooms VARCHAR(75) null,ownerName VARCHAR(75) null,ownerAddress VARCHAR(500) null,ownerTeleNo VARCHAR(75) null,ownerFaxNo VARCHAR(75) null,operCompName VARCHAR(75) null,operAddress VARCHAR(500) null,managerName VARCHAR(75) null,managerAddress VARCHAR(500) null,managerTeleNo VARCHAR(75) null,managerFaxNo VARCHAR(75) null,managerEmail VARCHAR(75) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_acco_non_hotel_lic";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accoNonHotelLicence.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_acco_non_hotel_lic.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccoNonHotelLicenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accoNonHotelLicenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccoNonHotelLicenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accoNonHotelLicenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccoNonHotelLicence.class;
	}

	@Override
	public String getModelClassName() {
		return AccoNonHotelLicence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccoNonHotelLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccoNonHotelLicence, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoNonHotelLicence, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccoNonHotelLicence)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccoNonHotelLicence, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccoNonHotelLicence, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccoNonHotelLicence)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccoNonHotelLicence, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccoNonHotelLicence, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccoNonHotelLicence, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccoNonHotelLicence, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccoNonHotelLicence, Object>>();

			attributeGetterFunctions.put("uuid", AccoNonHotelLicence::getUuid);
			attributeGetterFunctions.put(
				"accoNonHotelLicenceId",
				AccoNonHotelLicence::getAccoNonHotelLicenceId);
			attributeGetterFunctions.put(
				"groupId", AccoNonHotelLicence::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccoNonHotelLicence::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccoNonHotelLicence::getUserId);
			attributeGetterFunctions.put(
				"userName", AccoNonHotelLicence::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccoNonHotelLicence::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccoNonHotelLicence::getModifiedDate);
			attributeGetterFunctions.put(
				"accoName", AccoNonHotelLicence::getAccoName);
			attributeGetterFunctions.put(
				"accoAddress", AccoNonHotelLicence::getAccoAddress);
			attributeGetterFunctions.put(
				"accoTeleNo", AccoNonHotelLicence::getAccoTeleNo);
			attributeGetterFunctions.put(
				"accoFaxNo", AccoNonHotelLicence::getAccoFaxNo);
			attributeGetterFunctions.put(
				"accoEmail", AccoNonHotelLicence::getAccoEmail);
			attributeGetterFunctions.put(
				"accoNoOfEmp", AccoNonHotelLicence::getAccoNoOfEmp);
			attributeGetterFunctions.put(
				"accoOfferedType", AccoNonHotelLicence::getAccoOfferedType);
			attributeGetterFunctions.put(
				"noOfRooms", AccoNonHotelLicence::getNoOfRooms);
			attributeGetterFunctions.put(
				"ownerName", AccoNonHotelLicence::getOwnerName);
			attributeGetterFunctions.put(
				"ownerAddress", AccoNonHotelLicence::getOwnerAddress);
			attributeGetterFunctions.put(
				"ownerTeleNo", AccoNonHotelLicence::getOwnerTeleNo);
			attributeGetterFunctions.put(
				"ownerFaxNo", AccoNonHotelLicence::getOwnerFaxNo);
			attributeGetterFunctions.put(
				"operCompName", AccoNonHotelLicence::getOperCompName);
			attributeGetterFunctions.put(
				"operAddress", AccoNonHotelLicence::getOperAddress);
			attributeGetterFunctions.put(
				"managerName", AccoNonHotelLicence::getManagerName);
			attributeGetterFunctions.put(
				"managerAddress", AccoNonHotelLicence::getManagerAddress);
			attributeGetterFunctions.put(
				"managerTeleNo", AccoNonHotelLicence::getManagerTeleNo);
			attributeGetterFunctions.put(
				"managerFaxNo", AccoNonHotelLicence::getManagerFaxNo);
			attributeGetterFunctions.put(
				"managerEmail", AccoNonHotelLicence::getManagerEmail);
			attributeGetterFunctions.put(
				"jtbApplicationId", AccoNonHotelLicence::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccoNonHotelLicence, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccoNonHotelLicence, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccoNonHotelLicence, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setUuid);
			attributeSetterBiConsumers.put(
				"accoNonHotelLicenceId",
				(BiConsumer<AccoNonHotelLicence, Long>)
					AccoNonHotelLicence::setAccoNonHotelLicenceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccoNonHotelLicence, Long>)
					AccoNonHotelLicence::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccoNonHotelLicence, Long>)
					AccoNonHotelLicence::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccoNonHotelLicence, Long>)
					AccoNonHotelLicence::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccoNonHotelLicence, Date>)
					AccoNonHotelLicence::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccoNonHotelLicence, Date>)
					AccoNonHotelLicence::setModifiedDate);
			attributeSetterBiConsumers.put(
				"accoName",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setAccoName);
			attributeSetterBiConsumers.put(
				"accoAddress",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setAccoAddress);
			attributeSetterBiConsumers.put(
				"accoTeleNo",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setAccoTeleNo);
			attributeSetterBiConsumers.put(
				"accoFaxNo",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setAccoFaxNo);
			attributeSetterBiConsumers.put(
				"accoEmail",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setAccoEmail);
			attributeSetterBiConsumers.put(
				"accoNoOfEmp",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setAccoNoOfEmp);
			attributeSetterBiConsumers.put(
				"accoOfferedType",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setAccoOfferedType);
			attributeSetterBiConsumers.put(
				"noOfRooms",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setNoOfRooms);
			attributeSetterBiConsumers.put(
				"ownerName",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setOwnerName);
			attributeSetterBiConsumers.put(
				"ownerAddress",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setOwnerAddress);
			attributeSetterBiConsumers.put(
				"ownerTeleNo",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setOwnerTeleNo);
			attributeSetterBiConsumers.put(
				"ownerFaxNo",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setOwnerFaxNo);
			attributeSetterBiConsumers.put(
				"operCompName",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setOperCompName);
			attributeSetterBiConsumers.put(
				"operAddress",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setOperAddress);
			attributeSetterBiConsumers.put(
				"managerName",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setManagerName);
			attributeSetterBiConsumers.put(
				"managerAddress",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setManagerAddress);
			attributeSetterBiConsumers.put(
				"managerTeleNo",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setManagerTeleNo);
			attributeSetterBiConsumers.put(
				"managerFaxNo",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setManagerFaxNo);
			attributeSetterBiConsumers.put(
				"managerEmail",
				(BiConsumer<AccoNonHotelLicence, String>)
					AccoNonHotelLicence::setManagerEmail);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AccoNonHotelLicence, Long>)
					AccoNonHotelLicence::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccoNonHotelLicenceId() {
		return _accoNonHotelLicenceId;
	}

	@Override
	public void setAccoNonHotelLicenceId(long accoNonHotelLicenceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoNonHotelLicenceId = accoNonHotelLicenceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAccoName() {
		if (_accoName == null) {
			return "";
		}
		else {
			return _accoName;
		}
	}

	@Override
	public void setAccoName(String accoName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoName = accoName;
	}

	@JSON
	@Override
	public String getAccoAddress() {
		if (_accoAddress == null) {
			return "";
		}
		else {
			return _accoAddress;
		}
	}

	@Override
	public void setAccoAddress(String accoAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoAddress = accoAddress;
	}

	@JSON
	@Override
	public String getAccoTeleNo() {
		if (_accoTeleNo == null) {
			return "";
		}
		else {
			return _accoTeleNo;
		}
	}

	@Override
	public void setAccoTeleNo(String accoTeleNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoTeleNo = accoTeleNo;
	}

	@JSON
	@Override
	public String getAccoFaxNo() {
		if (_accoFaxNo == null) {
			return "";
		}
		else {
			return _accoFaxNo;
		}
	}

	@Override
	public void setAccoFaxNo(String accoFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoFaxNo = accoFaxNo;
	}

	@JSON
	@Override
	public String getAccoEmail() {
		if (_accoEmail == null) {
			return "";
		}
		else {
			return _accoEmail;
		}
	}

	@Override
	public void setAccoEmail(String accoEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoEmail = accoEmail;
	}

	@JSON
	@Override
	public String getAccoNoOfEmp() {
		if (_accoNoOfEmp == null) {
			return "";
		}
		else {
			return _accoNoOfEmp;
		}
	}

	@Override
	public void setAccoNoOfEmp(String accoNoOfEmp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoNoOfEmp = accoNoOfEmp;
	}

	@JSON
	@Override
	public String getAccoOfferedType() {
		if (_accoOfferedType == null) {
			return "";
		}
		else {
			return _accoOfferedType;
		}
	}

	@Override
	public void setAccoOfferedType(String accoOfferedType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoOfferedType = accoOfferedType;
	}

	@JSON
	@Override
	public String getNoOfRooms() {
		if (_noOfRooms == null) {
			return "";
		}
		else {
			return _noOfRooms;
		}
	}

	@Override
	public void setNoOfRooms(String noOfRooms) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noOfRooms = noOfRooms;
	}

	@JSON
	@Override
	public String getOwnerName() {
		if (_ownerName == null) {
			return "";
		}
		else {
			return _ownerName;
		}
	}

	@Override
	public void setOwnerName(String ownerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerName = ownerName;
	}

	@JSON
	@Override
	public String getOwnerAddress() {
		if (_ownerAddress == null) {
			return "";
		}
		else {
			return _ownerAddress;
		}
	}

	@Override
	public void setOwnerAddress(String ownerAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerAddress = ownerAddress;
	}

	@JSON
	@Override
	public String getOwnerTeleNo() {
		if (_ownerTeleNo == null) {
			return "";
		}
		else {
			return _ownerTeleNo;
		}
	}

	@Override
	public void setOwnerTeleNo(String ownerTeleNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerTeleNo = ownerTeleNo;
	}

	@JSON
	@Override
	public String getOwnerFaxNo() {
		if (_ownerFaxNo == null) {
			return "";
		}
		else {
			return _ownerFaxNo;
		}
	}

	@Override
	public void setOwnerFaxNo(String ownerFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerFaxNo = ownerFaxNo;
	}

	@JSON
	@Override
	public String getOperCompName() {
		if (_operCompName == null) {
			return "";
		}
		else {
			return _operCompName;
		}
	}

	@Override
	public void setOperCompName(String operCompName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operCompName = operCompName;
	}

	@JSON
	@Override
	public String getOperAddress() {
		if (_operAddress == null) {
			return "";
		}
		else {
			return _operAddress;
		}
	}

	@Override
	public void setOperAddress(String operAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operAddress = operAddress;
	}

	@JSON
	@Override
	public String getManagerName() {
		if (_managerName == null) {
			return "";
		}
		else {
			return _managerName;
		}
	}

	@Override
	public void setManagerName(String managerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerName = managerName;
	}

	@JSON
	@Override
	public String getManagerAddress() {
		if (_managerAddress == null) {
			return "";
		}
		else {
			return _managerAddress;
		}
	}

	@Override
	public void setManagerAddress(String managerAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerAddress = managerAddress;
	}

	@JSON
	@Override
	public String getManagerTeleNo() {
		if (_managerTeleNo == null) {
			return "";
		}
		else {
			return _managerTeleNo;
		}
	}

	@Override
	public void setManagerTeleNo(String managerTeleNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerTeleNo = managerTeleNo;
	}

	@JSON
	@Override
	public String getManagerFaxNo() {
		if (_managerFaxNo == null) {
			return "";
		}
		else {
			return _managerFaxNo;
		}
	}

	@Override
	public void setManagerFaxNo(String managerFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerFaxNo = managerFaxNo;
	}

	@JSON
	@Override
	public String getManagerEmail() {
		if (_managerEmail == null) {
			return "";
		}
		else {
			return _managerEmail;
		}
	}

	@Override
	public void setManagerEmail(String managerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerEmail = managerEmail;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccoNonHotelLicence.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccoNonHotelLicence.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccoNonHotelLicence toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccoNonHotelLicence>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccoNonHotelLicenceImpl accoNonHotelLicenceImpl =
			new AccoNonHotelLicenceImpl();

		accoNonHotelLicenceImpl.setUuid(getUuid());
		accoNonHotelLicenceImpl.setAccoNonHotelLicenceId(
			getAccoNonHotelLicenceId());
		accoNonHotelLicenceImpl.setGroupId(getGroupId());
		accoNonHotelLicenceImpl.setCompanyId(getCompanyId());
		accoNonHotelLicenceImpl.setUserId(getUserId());
		accoNonHotelLicenceImpl.setUserName(getUserName());
		accoNonHotelLicenceImpl.setCreateDate(getCreateDate());
		accoNonHotelLicenceImpl.setModifiedDate(getModifiedDate());
		accoNonHotelLicenceImpl.setAccoName(getAccoName());
		accoNonHotelLicenceImpl.setAccoAddress(getAccoAddress());
		accoNonHotelLicenceImpl.setAccoTeleNo(getAccoTeleNo());
		accoNonHotelLicenceImpl.setAccoFaxNo(getAccoFaxNo());
		accoNonHotelLicenceImpl.setAccoEmail(getAccoEmail());
		accoNonHotelLicenceImpl.setAccoNoOfEmp(getAccoNoOfEmp());
		accoNonHotelLicenceImpl.setAccoOfferedType(getAccoOfferedType());
		accoNonHotelLicenceImpl.setNoOfRooms(getNoOfRooms());
		accoNonHotelLicenceImpl.setOwnerName(getOwnerName());
		accoNonHotelLicenceImpl.setOwnerAddress(getOwnerAddress());
		accoNonHotelLicenceImpl.setOwnerTeleNo(getOwnerTeleNo());
		accoNonHotelLicenceImpl.setOwnerFaxNo(getOwnerFaxNo());
		accoNonHotelLicenceImpl.setOperCompName(getOperCompName());
		accoNonHotelLicenceImpl.setOperAddress(getOperAddress());
		accoNonHotelLicenceImpl.setManagerName(getManagerName());
		accoNonHotelLicenceImpl.setManagerAddress(getManagerAddress());
		accoNonHotelLicenceImpl.setManagerTeleNo(getManagerTeleNo());
		accoNonHotelLicenceImpl.setManagerFaxNo(getManagerFaxNo());
		accoNonHotelLicenceImpl.setManagerEmail(getManagerEmail());
		accoNonHotelLicenceImpl.setJtbApplicationId(getJtbApplicationId());

		accoNonHotelLicenceImpl.resetOriginalValues();

		return accoNonHotelLicenceImpl;
	}

	@Override
	public AccoNonHotelLicence cloneWithOriginalValues() {
		AccoNonHotelLicenceImpl accoNonHotelLicenceImpl =
			new AccoNonHotelLicenceImpl();

		accoNonHotelLicenceImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accoNonHotelLicenceImpl.setAccoNonHotelLicenceId(
			this.<Long>getColumnOriginalValue("accoNonHotelLicenceId"));
		accoNonHotelLicenceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accoNonHotelLicenceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accoNonHotelLicenceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accoNonHotelLicenceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accoNonHotelLicenceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accoNonHotelLicenceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accoNonHotelLicenceImpl.setAccoName(
			this.<String>getColumnOriginalValue("accoName"));
		accoNonHotelLicenceImpl.setAccoAddress(
			this.<String>getColumnOriginalValue("accoAddress"));
		accoNonHotelLicenceImpl.setAccoTeleNo(
			this.<String>getColumnOriginalValue("accoTeleNo"));
		accoNonHotelLicenceImpl.setAccoFaxNo(
			this.<String>getColumnOriginalValue("accoFaxNo"));
		accoNonHotelLicenceImpl.setAccoEmail(
			this.<String>getColumnOriginalValue("accoEmail"));
		accoNonHotelLicenceImpl.setAccoNoOfEmp(
			this.<String>getColumnOriginalValue("accoNoOfEmp"));
		accoNonHotelLicenceImpl.setAccoOfferedType(
			this.<String>getColumnOriginalValue("accoOfferedType"));
		accoNonHotelLicenceImpl.setNoOfRooms(
			this.<String>getColumnOriginalValue("noOfRooms"));
		accoNonHotelLicenceImpl.setOwnerName(
			this.<String>getColumnOriginalValue("ownerName"));
		accoNonHotelLicenceImpl.setOwnerAddress(
			this.<String>getColumnOriginalValue("ownerAddress"));
		accoNonHotelLicenceImpl.setOwnerTeleNo(
			this.<String>getColumnOriginalValue("ownerTeleNo"));
		accoNonHotelLicenceImpl.setOwnerFaxNo(
			this.<String>getColumnOriginalValue("ownerFaxNo"));
		accoNonHotelLicenceImpl.setOperCompName(
			this.<String>getColumnOriginalValue("operCompName"));
		accoNonHotelLicenceImpl.setOperAddress(
			this.<String>getColumnOriginalValue("operAddress"));
		accoNonHotelLicenceImpl.setManagerName(
			this.<String>getColumnOriginalValue("managerName"));
		accoNonHotelLicenceImpl.setManagerAddress(
			this.<String>getColumnOriginalValue("managerAddress"));
		accoNonHotelLicenceImpl.setManagerTeleNo(
			this.<String>getColumnOriginalValue("managerTeleNo"));
		accoNonHotelLicenceImpl.setManagerFaxNo(
			this.<String>getColumnOriginalValue("managerFaxNo"));
		accoNonHotelLicenceImpl.setManagerEmail(
			this.<String>getColumnOriginalValue("managerEmail"));
		accoNonHotelLicenceImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return accoNonHotelLicenceImpl;
	}

	@Override
	public int compareTo(AccoNonHotelLicence accoNonHotelLicence) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), accoNonHotelLicence.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccoNonHotelLicence)) {
			return false;
		}

		AccoNonHotelLicence accoNonHotelLicence = (AccoNonHotelLicence)object;

		long primaryKey = accoNonHotelLicence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccoNonHotelLicence> toCacheModel() {
		AccoNonHotelLicenceCacheModel accoNonHotelLicenceCacheModel =
			new AccoNonHotelLicenceCacheModel();

		accoNonHotelLicenceCacheModel.uuid = getUuid();

		String uuid = accoNonHotelLicenceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accoNonHotelLicenceCacheModel.uuid = null;
		}

		accoNonHotelLicenceCacheModel.accoNonHotelLicenceId =
			getAccoNonHotelLicenceId();

		accoNonHotelLicenceCacheModel.groupId = getGroupId();

		accoNonHotelLicenceCacheModel.companyId = getCompanyId();

		accoNonHotelLicenceCacheModel.userId = getUserId();

		accoNonHotelLicenceCacheModel.userName = getUserName();

		String userName = accoNonHotelLicenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accoNonHotelLicenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accoNonHotelLicenceCacheModel.createDate = createDate.getTime();
		}
		else {
			accoNonHotelLicenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accoNonHotelLicenceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accoNonHotelLicenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accoNonHotelLicenceCacheModel.accoName = getAccoName();

		String accoName = accoNonHotelLicenceCacheModel.accoName;

		if ((accoName != null) && (accoName.length() == 0)) {
			accoNonHotelLicenceCacheModel.accoName = null;
		}

		accoNonHotelLicenceCacheModel.accoAddress = getAccoAddress();

		String accoAddress = accoNonHotelLicenceCacheModel.accoAddress;

		if ((accoAddress != null) && (accoAddress.length() == 0)) {
			accoNonHotelLicenceCacheModel.accoAddress = null;
		}

		accoNonHotelLicenceCacheModel.accoTeleNo = getAccoTeleNo();

		String accoTeleNo = accoNonHotelLicenceCacheModel.accoTeleNo;

		if ((accoTeleNo != null) && (accoTeleNo.length() == 0)) {
			accoNonHotelLicenceCacheModel.accoTeleNo = null;
		}

		accoNonHotelLicenceCacheModel.accoFaxNo = getAccoFaxNo();

		String accoFaxNo = accoNonHotelLicenceCacheModel.accoFaxNo;

		if ((accoFaxNo != null) && (accoFaxNo.length() == 0)) {
			accoNonHotelLicenceCacheModel.accoFaxNo = null;
		}

		accoNonHotelLicenceCacheModel.accoEmail = getAccoEmail();

		String accoEmail = accoNonHotelLicenceCacheModel.accoEmail;

		if ((accoEmail != null) && (accoEmail.length() == 0)) {
			accoNonHotelLicenceCacheModel.accoEmail = null;
		}

		accoNonHotelLicenceCacheModel.accoNoOfEmp = getAccoNoOfEmp();

		String accoNoOfEmp = accoNonHotelLicenceCacheModel.accoNoOfEmp;

		if ((accoNoOfEmp != null) && (accoNoOfEmp.length() == 0)) {
			accoNonHotelLicenceCacheModel.accoNoOfEmp = null;
		}

		accoNonHotelLicenceCacheModel.accoOfferedType = getAccoOfferedType();

		String accoOfferedType = accoNonHotelLicenceCacheModel.accoOfferedType;

		if ((accoOfferedType != null) && (accoOfferedType.length() == 0)) {
			accoNonHotelLicenceCacheModel.accoOfferedType = null;
		}

		accoNonHotelLicenceCacheModel.noOfRooms = getNoOfRooms();

		String noOfRooms = accoNonHotelLicenceCacheModel.noOfRooms;

		if ((noOfRooms != null) && (noOfRooms.length() == 0)) {
			accoNonHotelLicenceCacheModel.noOfRooms = null;
		}

		accoNonHotelLicenceCacheModel.ownerName = getOwnerName();

		String ownerName = accoNonHotelLicenceCacheModel.ownerName;

		if ((ownerName != null) && (ownerName.length() == 0)) {
			accoNonHotelLicenceCacheModel.ownerName = null;
		}

		accoNonHotelLicenceCacheModel.ownerAddress = getOwnerAddress();

		String ownerAddress = accoNonHotelLicenceCacheModel.ownerAddress;

		if ((ownerAddress != null) && (ownerAddress.length() == 0)) {
			accoNonHotelLicenceCacheModel.ownerAddress = null;
		}

		accoNonHotelLicenceCacheModel.ownerTeleNo = getOwnerTeleNo();

		String ownerTeleNo = accoNonHotelLicenceCacheModel.ownerTeleNo;

		if ((ownerTeleNo != null) && (ownerTeleNo.length() == 0)) {
			accoNonHotelLicenceCacheModel.ownerTeleNo = null;
		}

		accoNonHotelLicenceCacheModel.ownerFaxNo = getOwnerFaxNo();

		String ownerFaxNo = accoNonHotelLicenceCacheModel.ownerFaxNo;

		if ((ownerFaxNo != null) && (ownerFaxNo.length() == 0)) {
			accoNonHotelLicenceCacheModel.ownerFaxNo = null;
		}

		accoNonHotelLicenceCacheModel.operCompName = getOperCompName();

		String operCompName = accoNonHotelLicenceCacheModel.operCompName;

		if ((operCompName != null) && (operCompName.length() == 0)) {
			accoNonHotelLicenceCacheModel.operCompName = null;
		}

		accoNonHotelLicenceCacheModel.operAddress = getOperAddress();

		String operAddress = accoNonHotelLicenceCacheModel.operAddress;

		if ((operAddress != null) && (operAddress.length() == 0)) {
			accoNonHotelLicenceCacheModel.operAddress = null;
		}

		accoNonHotelLicenceCacheModel.managerName = getManagerName();

		String managerName = accoNonHotelLicenceCacheModel.managerName;

		if ((managerName != null) && (managerName.length() == 0)) {
			accoNonHotelLicenceCacheModel.managerName = null;
		}

		accoNonHotelLicenceCacheModel.managerAddress = getManagerAddress();

		String managerAddress = accoNonHotelLicenceCacheModel.managerAddress;

		if ((managerAddress != null) && (managerAddress.length() == 0)) {
			accoNonHotelLicenceCacheModel.managerAddress = null;
		}

		accoNonHotelLicenceCacheModel.managerTeleNo = getManagerTeleNo();

		String managerTeleNo = accoNonHotelLicenceCacheModel.managerTeleNo;

		if ((managerTeleNo != null) && (managerTeleNo.length() == 0)) {
			accoNonHotelLicenceCacheModel.managerTeleNo = null;
		}

		accoNonHotelLicenceCacheModel.managerFaxNo = getManagerFaxNo();

		String managerFaxNo = accoNonHotelLicenceCacheModel.managerFaxNo;

		if ((managerFaxNo != null) && (managerFaxNo.length() == 0)) {
			accoNonHotelLicenceCacheModel.managerFaxNo = null;
		}

		accoNonHotelLicenceCacheModel.managerEmail = getManagerEmail();

		String managerEmail = accoNonHotelLicenceCacheModel.managerEmail;

		if ((managerEmail != null) && (managerEmail.length() == 0)) {
			accoNonHotelLicenceCacheModel.managerEmail = null;
		}

		accoNonHotelLicenceCacheModel.jtbApplicationId = getJtbApplicationId();

		return accoNonHotelLicenceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccoNonHotelLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccoNonHotelLicence, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoNonHotelLicence, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccoNonHotelLicence)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccoNonHotelLicence>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccoNonHotelLicence.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accoNonHotelLicenceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _accoName;
	private String _accoAddress;
	private String _accoTeleNo;
	private String _accoFaxNo;
	private String _accoEmail;
	private String _accoNoOfEmp;
	private String _accoOfferedType;
	private String _noOfRooms;
	private String _ownerName;
	private String _ownerAddress;
	private String _ownerTeleNo;
	private String _ownerFaxNo;
	private String _operCompName;
	private String _operAddress;
	private String _managerName;
	private String _managerAddress;
	private String _managerTeleNo;
	private String _managerFaxNo;
	private String _managerEmail;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccoNonHotelLicence, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccoNonHotelLicence)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accoNonHotelLicenceId", _accoNonHotelLicenceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("accoName", _accoName);
		_columnOriginalValues.put("accoAddress", _accoAddress);
		_columnOriginalValues.put("accoTeleNo", _accoTeleNo);
		_columnOriginalValues.put("accoFaxNo", _accoFaxNo);
		_columnOriginalValues.put("accoEmail", _accoEmail);
		_columnOriginalValues.put("accoNoOfEmp", _accoNoOfEmp);
		_columnOriginalValues.put("accoOfferedType", _accoOfferedType);
		_columnOriginalValues.put("noOfRooms", _noOfRooms);
		_columnOriginalValues.put("ownerName", _ownerName);
		_columnOriginalValues.put("ownerAddress", _ownerAddress);
		_columnOriginalValues.put("ownerTeleNo", _ownerTeleNo);
		_columnOriginalValues.put("ownerFaxNo", _ownerFaxNo);
		_columnOriginalValues.put("operCompName", _operCompName);
		_columnOriginalValues.put("operAddress", _operAddress);
		_columnOriginalValues.put("managerName", _managerName);
		_columnOriginalValues.put("managerAddress", _managerAddress);
		_columnOriginalValues.put("managerTeleNo", _managerTeleNo);
		_columnOriginalValues.put("managerFaxNo", _managerFaxNo);
		_columnOriginalValues.put("managerEmail", _managerEmail);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accoNonHotelLicenceId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("accoName", 256L);

		columnBitmasks.put("accoAddress", 512L);

		columnBitmasks.put("accoTeleNo", 1024L);

		columnBitmasks.put("accoFaxNo", 2048L);

		columnBitmasks.put("accoEmail", 4096L);

		columnBitmasks.put("accoNoOfEmp", 8192L);

		columnBitmasks.put("accoOfferedType", 16384L);

		columnBitmasks.put("noOfRooms", 32768L);

		columnBitmasks.put("ownerName", 65536L);

		columnBitmasks.put("ownerAddress", 131072L);

		columnBitmasks.put("ownerTeleNo", 262144L);

		columnBitmasks.put("ownerFaxNo", 524288L);

		columnBitmasks.put("operCompName", 1048576L);

		columnBitmasks.put("operAddress", 2097152L);

		columnBitmasks.put("managerName", 4194304L);

		columnBitmasks.put("managerAddress", 8388608L);

		columnBitmasks.put("managerTeleNo", 16777216L);

		columnBitmasks.put("managerFaxNo", 33554432L);

		columnBitmasks.put("managerEmail", 67108864L);

		columnBitmasks.put("jtbApplicationId", 134217728L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccoNonHotelLicence _escapedModel;

}