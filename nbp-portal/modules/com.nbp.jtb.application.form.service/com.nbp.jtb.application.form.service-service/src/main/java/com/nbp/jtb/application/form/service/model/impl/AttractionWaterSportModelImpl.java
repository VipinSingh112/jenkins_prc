/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionWaterSport;
import com.nbp.jtb.application.form.service.model.AttractionWaterSportModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionWaterSport service. Represents a row in the &quot;nbp_jtb_water_sport_operate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionWaterSportModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionWaterSportImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionWaterSportImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionWaterSportModelImpl
	extends BaseModelImpl<AttractionWaterSport>
	implements AttractionWaterSportModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction water sport model instance should use the <code>AttractionWaterSport</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_water_sport_operate";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionWaterSportId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"waterSportBusinessName", Types.VARCHAR},
		{"waterSportMailingaAdd", Types.VARCHAR},
		{"waterSportOpLocationAddr", Types.VARCHAR},
		{"waterSportOpPhone", Types.VARCHAR},
		{"waterSportOpEmail", Types.VARCHAR},
		{"waterSportOpOwnerName", Types.VARCHAR},
		{"waterSportOpAddressOwner", Types.VARCHAR},
		{"waterSportOpManagerName", Types.VARCHAR},
		{"waterSportOpApplicantName", Types.VARCHAR},
		{"waterSportOpNationality", Types.VARCHAR},
		{"waterSportOpEmployeesNo", Types.VARCHAR},
		{"waterSportOpActivityList", Types.VARCHAR},
		{"occupyLocation", Types.VARCHAR}, {"proposalSubmitted", Types.VARCHAR},
		{"foreignNationalsInvolved", Types.VARCHAR},
		{"workPermitApplied", Types.VARCHAR}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionWaterSportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("waterSportBusinessName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportMailingaAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpLocationAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpOwnerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpAddressOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpManagerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpNationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpEmployeesNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSportOpActivityList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occupyLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proposalSubmitted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foreignNationalsInvolved", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workPermitApplied", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_water_sport_operate (attractionWaterSportId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,waterSportBusinessName VARCHAR(75) null,waterSportMailingaAdd VARCHAR(500) null,waterSportOpLocationAddr VARCHAR(500) null,waterSportOpPhone VARCHAR(75) null,waterSportOpEmail VARCHAR(75) null,waterSportOpOwnerName VARCHAR(75) null,waterSportOpAddressOwner VARCHAR(500) null,waterSportOpManagerName VARCHAR(75) null,waterSportOpApplicantName VARCHAR(75) null,waterSportOpNationality VARCHAR(75) null,waterSportOpEmployeesNo VARCHAR(75) null,waterSportOpActivityList VARCHAR(75) null,occupyLocation VARCHAR(75) null,proposalSubmitted VARCHAR(75) null,foreignNationalsInvolved VARCHAR(75) null,workPermitApplied VARCHAR(75) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_water_sport_operate";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionWaterSport.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_water_sport_operate.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionWaterSportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionWaterSportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionWaterSportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionWaterSportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionWaterSport.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionWaterSport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionWaterSport, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionWaterSport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionWaterSport, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionWaterSport)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionWaterSport, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionWaterSport, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionWaterSport)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionWaterSport, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionWaterSport, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AttractionWaterSport, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionWaterSport, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionWaterSport, Object>>();

			attributeGetterFunctions.put(
				"attractionWaterSportId",
				AttractionWaterSport::getAttractionWaterSportId);
			attributeGetterFunctions.put(
				"groupId", AttractionWaterSport::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionWaterSport::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionWaterSport::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionWaterSport::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionWaterSport::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionWaterSport::getModifiedDate);
			attributeGetterFunctions.put(
				"waterSportBusinessName",
				AttractionWaterSport::getWaterSportBusinessName);
			attributeGetterFunctions.put(
				"waterSportMailingaAdd",
				AttractionWaterSport::getWaterSportMailingaAdd);
			attributeGetterFunctions.put(
				"waterSportOpLocationAddr",
				AttractionWaterSport::getWaterSportOpLocationAddr);
			attributeGetterFunctions.put(
				"waterSportOpPhone",
				AttractionWaterSport::getWaterSportOpPhone);
			attributeGetterFunctions.put(
				"waterSportOpEmail",
				AttractionWaterSport::getWaterSportOpEmail);
			attributeGetterFunctions.put(
				"waterSportOpOwnerName",
				AttractionWaterSport::getWaterSportOpOwnerName);
			attributeGetterFunctions.put(
				"waterSportOpAddressOwner",
				AttractionWaterSport::getWaterSportOpAddressOwner);
			attributeGetterFunctions.put(
				"waterSportOpManagerName",
				AttractionWaterSport::getWaterSportOpManagerName);
			attributeGetterFunctions.put(
				"waterSportOpApplicantName",
				AttractionWaterSport::getWaterSportOpApplicantName);
			attributeGetterFunctions.put(
				"waterSportOpNationality",
				AttractionWaterSport::getWaterSportOpNationality);
			attributeGetterFunctions.put(
				"waterSportOpEmployeesNo",
				AttractionWaterSport::getWaterSportOpEmployeesNo);
			attributeGetterFunctions.put(
				"waterSportOpActivityList",
				AttractionWaterSport::getWaterSportOpActivityList);
			attributeGetterFunctions.put(
				"occupyLocation", AttractionWaterSport::getOccupyLocation);
			attributeGetterFunctions.put(
				"proposalSubmitted",
				AttractionWaterSport::getProposalSubmitted);
			attributeGetterFunctions.put(
				"foreignNationalsInvolved",
				AttractionWaterSport::getForeignNationalsInvolved);
			attributeGetterFunctions.put(
				"workPermitApplied",
				AttractionWaterSport::getWorkPermitApplied);
			attributeGetterFunctions.put(
				"jtbApplicationId", AttractionWaterSport::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionWaterSport, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionWaterSport, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionWaterSport, ?>>();

			attributeSetterBiConsumers.put(
				"attractionWaterSportId",
				(BiConsumer<AttractionWaterSport, Long>)
					AttractionWaterSport::setAttractionWaterSportId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionWaterSport, Long>)
					AttractionWaterSport::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionWaterSport, Long>)
					AttractionWaterSport::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionWaterSport, Long>)
					AttractionWaterSport::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionWaterSport, Date>)
					AttractionWaterSport::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionWaterSport, Date>)
					AttractionWaterSport::setModifiedDate);
			attributeSetterBiConsumers.put(
				"waterSportBusinessName",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportBusinessName);
			attributeSetterBiConsumers.put(
				"waterSportMailingaAdd",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportMailingaAdd);
			attributeSetterBiConsumers.put(
				"waterSportOpLocationAddr",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpLocationAddr);
			attributeSetterBiConsumers.put(
				"waterSportOpPhone",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpPhone);
			attributeSetterBiConsumers.put(
				"waterSportOpEmail",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpEmail);
			attributeSetterBiConsumers.put(
				"waterSportOpOwnerName",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpOwnerName);
			attributeSetterBiConsumers.put(
				"waterSportOpAddressOwner",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpAddressOwner);
			attributeSetterBiConsumers.put(
				"waterSportOpManagerName",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpManagerName);
			attributeSetterBiConsumers.put(
				"waterSportOpApplicantName",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpApplicantName);
			attributeSetterBiConsumers.put(
				"waterSportOpNationality",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpNationality);
			attributeSetterBiConsumers.put(
				"waterSportOpEmployeesNo",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpEmployeesNo);
			attributeSetterBiConsumers.put(
				"waterSportOpActivityList",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWaterSportOpActivityList);
			attributeSetterBiConsumers.put(
				"occupyLocation",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setOccupyLocation);
			attributeSetterBiConsumers.put(
				"proposalSubmitted",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setProposalSubmitted);
			attributeSetterBiConsumers.put(
				"foreignNationalsInvolved",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setForeignNationalsInvolved);
			attributeSetterBiConsumers.put(
				"workPermitApplied",
				(BiConsumer<AttractionWaterSport, String>)
					AttractionWaterSport::setWorkPermitApplied);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionWaterSport, Long>)
					AttractionWaterSport::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionWaterSportId() {
		return _attractionWaterSportId;
	}

	@Override
	public void setAttractionWaterSportId(long attractionWaterSportId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionWaterSportId = attractionWaterSportId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getWaterSportBusinessName() {
		if (_waterSportBusinessName == null) {
			return "";
		}
		else {
			return _waterSportBusinessName;
		}
	}

	@Override
	public void setWaterSportBusinessName(String waterSportBusinessName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportBusinessName = waterSportBusinessName;
	}

	@JSON
	@Override
	public String getWaterSportMailingaAdd() {
		if (_waterSportMailingaAdd == null) {
			return "";
		}
		else {
			return _waterSportMailingaAdd;
		}
	}

	@Override
	public void setWaterSportMailingaAdd(String waterSportMailingaAdd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportMailingaAdd = waterSportMailingaAdd;
	}

	@JSON
	@Override
	public String getWaterSportOpLocationAddr() {
		if (_waterSportOpLocationAddr == null) {
			return "";
		}
		else {
			return _waterSportOpLocationAddr;
		}
	}

	@Override
	public void setWaterSportOpLocationAddr(String waterSportOpLocationAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpLocationAddr = waterSportOpLocationAddr;
	}

	@JSON
	@Override
	public String getWaterSportOpPhone() {
		if (_waterSportOpPhone == null) {
			return "";
		}
		else {
			return _waterSportOpPhone;
		}
	}

	@Override
	public void setWaterSportOpPhone(String waterSportOpPhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpPhone = waterSportOpPhone;
	}

	@JSON
	@Override
	public String getWaterSportOpEmail() {
		if (_waterSportOpEmail == null) {
			return "";
		}
		else {
			return _waterSportOpEmail;
		}
	}

	@Override
	public void setWaterSportOpEmail(String waterSportOpEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpEmail = waterSportOpEmail;
	}

	@JSON
	@Override
	public String getWaterSportOpOwnerName() {
		if (_waterSportOpOwnerName == null) {
			return "";
		}
		else {
			return _waterSportOpOwnerName;
		}
	}

	@Override
	public void setWaterSportOpOwnerName(String waterSportOpOwnerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpOwnerName = waterSportOpOwnerName;
	}

	@JSON
	@Override
	public String getWaterSportOpAddressOwner() {
		if (_waterSportOpAddressOwner == null) {
			return "";
		}
		else {
			return _waterSportOpAddressOwner;
		}
	}

	@Override
	public void setWaterSportOpAddressOwner(String waterSportOpAddressOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpAddressOwner = waterSportOpAddressOwner;
	}

	@JSON
	@Override
	public String getWaterSportOpManagerName() {
		if (_waterSportOpManagerName == null) {
			return "";
		}
		else {
			return _waterSportOpManagerName;
		}
	}

	@Override
	public void setWaterSportOpManagerName(String waterSportOpManagerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpManagerName = waterSportOpManagerName;
	}

	@JSON
	@Override
	public String getWaterSportOpApplicantName() {
		if (_waterSportOpApplicantName == null) {
			return "";
		}
		else {
			return _waterSportOpApplicantName;
		}
	}

	@Override
	public void setWaterSportOpApplicantName(String waterSportOpApplicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpApplicantName = waterSportOpApplicantName;
	}

	@JSON
	@Override
	public String getWaterSportOpNationality() {
		if (_waterSportOpNationality == null) {
			return "";
		}
		else {
			return _waterSportOpNationality;
		}
	}

	@Override
	public void setWaterSportOpNationality(String waterSportOpNationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpNationality = waterSportOpNationality;
	}

	@JSON
	@Override
	public String getWaterSportOpEmployeesNo() {
		if (_waterSportOpEmployeesNo == null) {
			return "";
		}
		else {
			return _waterSportOpEmployeesNo;
		}
	}

	@Override
	public void setWaterSportOpEmployeesNo(String waterSportOpEmployeesNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpEmployeesNo = waterSportOpEmployeesNo;
	}

	@JSON
	@Override
	public String getWaterSportOpActivityList() {
		if (_waterSportOpActivityList == null) {
			return "";
		}
		else {
			return _waterSportOpActivityList;
		}
	}

	@Override
	public void setWaterSportOpActivityList(String waterSportOpActivityList) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSportOpActivityList = waterSportOpActivityList;
	}

	@JSON
	@Override
	public String getOccupyLocation() {
		if (_occupyLocation == null) {
			return "";
		}
		else {
			return _occupyLocation;
		}
	}

	@Override
	public void setOccupyLocation(String occupyLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occupyLocation = occupyLocation;
	}

	@JSON
	@Override
	public String getProposalSubmitted() {
		if (_proposalSubmitted == null) {
			return "";
		}
		else {
			return _proposalSubmitted;
		}
	}

	@Override
	public void setProposalSubmitted(String proposalSubmitted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proposalSubmitted = proposalSubmitted;
	}

	@JSON
	@Override
	public String getForeignNationalsInvolved() {
		if (_foreignNationalsInvolved == null) {
			return "";
		}
		else {
			return _foreignNationalsInvolved;
		}
	}

	@Override
	public void setForeignNationalsInvolved(String foreignNationalsInvolved) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foreignNationalsInvolved = foreignNationalsInvolved;
	}

	@JSON
	@Override
	public String getWorkPermitApplied() {
		if (_workPermitApplied == null) {
			return "";
		}
		else {
			return _workPermitApplied;
		}
	}

	@Override
	public void setWorkPermitApplied(String workPermitApplied) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workPermitApplied = workPermitApplied;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionWaterSport.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionWaterSport toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionWaterSport>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionWaterSportImpl attractionWaterSportImpl =
			new AttractionWaterSportImpl();

		attractionWaterSportImpl.setAttractionWaterSportId(
			getAttractionWaterSportId());
		attractionWaterSportImpl.setGroupId(getGroupId());
		attractionWaterSportImpl.setCompanyId(getCompanyId());
		attractionWaterSportImpl.setUserId(getUserId());
		attractionWaterSportImpl.setUserName(getUserName());
		attractionWaterSportImpl.setCreateDate(getCreateDate());
		attractionWaterSportImpl.setModifiedDate(getModifiedDate());
		attractionWaterSportImpl.setWaterSportBusinessName(
			getWaterSportBusinessName());
		attractionWaterSportImpl.setWaterSportMailingaAdd(
			getWaterSportMailingaAdd());
		attractionWaterSportImpl.setWaterSportOpLocationAddr(
			getWaterSportOpLocationAddr());
		attractionWaterSportImpl.setWaterSportOpPhone(getWaterSportOpPhone());
		attractionWaterSportImpl.setWaterSportOpEmail(getWaterSportOpEmail());
		attractionWaterSportImpl.setWaterSportOpOwnerName(
			getWaterSportOpOwnerName());
		attractionWaterSportImpl.setWaterSportOpAddressOwner(
			getWaterSportOpAddressOwner());
		attractionWaterSportImpl.setWaterSportOpManagerName(
			getWaterSportOpManagerName());
		attractionWaterSportImpl.setWaterSportOpApplicantName(
			getWaterSportOpApplicantName());
		attractionWaterSportImpl.setWaterSportOpNationality(
			getWaterSportOpNationality());
		attractionWaterSportImpl.setWaterSportOpEmployeesNo(
			getWaterSportOpEmployeesNo());
		attractionWaterSportImpl.setWaterSportOpActivityList(
			getWaterSportOpActivityList());
		attractionWaterSportImpl.setOccupyLocation(getOccupyLocation());
		attractionWaterSportImpl.setProposalSubmitted(getProposalSubmitted());
		attractionWaterSportImpl.setForeignNationalsInvolved(
			getForeignNationalsInvolved());
		attractionWaterSportImpl.setWorkPermitApplied(getWorkPermitApplied());
		attractionWaterSportImpl.setJtbApplicationId(getJtbApplicationId());

		attractionWaterSportImpl.resetOriginalValues();

		return attractionWaterSportImpl;
	}

	@Override
	public AttractionWaterSport cloneWithOriginalValues() {
		AttractionWaterSportImpl attractionWaterSportImpl =
			new AttractionWaterSportImpl();

		attractionWaterSportImpl.setAttractionWaterSportId(
			this.<Long>getColumnOriginalValue("attractionWaterSportId"));
		attractionWaterSportImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionWaterSportImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionWaterSportImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionWaterSportImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionWaterSportImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionWaterSportImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionWaterSportImpl.setWaterSportBusinessName(
			this.<String>getColumnOriginalValue("waterSportBusinessName"));
		attractionWaterSportImpl.setWaterSportMailingaAdd(
			this.<String>getColumnOriginalValue("waterSportMailingaAdd"));
		attractionWaterSportImpl.setWaterSportOpLocationAddr(
			this.<String>getColumnOriginalValue("waterSportOpLocationAddr"));
		attractionWaterSportImpl.setWaterSportOpPhone(
			this.<String>getColumnOriginalValue("waterSportOpPhone"));
		attractionWaterSportImpl.setWaterSportOpEmail(
			this.<String>getColumnOriginalValue("waterSportOpEmail"));
		attractionWaterSportImpl.setWaterSportOpOwnerName(
			this.<String>getColumnOriginalValue("waterSportOpOwnerName"));
		attractionWaterSportImpl.setWaterSportOpAddressOwner(
			this.<String>getColumnOriginalValue("waterSportOpAddressOwner"));
		attractionWaterSportImpl.setWaterSportOpManagerName(
			this.<String>getColumnOriginalValue("waterSportOpManagerName"));
		attractionWaterSportImpl.setWaterSportOpApplicantName(
			this.<String>getColumnOriginalValue("waterSportOpApplicantName"));
		attractionWaterSportImpl.setWaterSportOpNationality(
			this.<String>getColumnOriginalValue("waterSportOpNationality"));
		attractionWaterSportImpl.setWaterSportOpEmployeesNo(
			this.<String>getColumnOriginalValue("waterSportOpEmployeesNo"));
		attractionWaterSportImpl.setWaterSportOpActivityList(
			this.<String>getColumnOriginalValue("waterSportOpActivityList"));
		attractionWaterSportImpl.setOccupyLocation(
			this.<String>getColumnOriginalValue("occupyLocation"));
		attractionWaterSportImpl.setProposalSubmitted(
			this.<String>getColumnOriginalValue("proposalSubmitted"));
		attractionWaterSportImpl.setForeignNationalsInvolved(
			this.<String>getColumnOriginalValue("foreignNationalsInvolved"));
		attractionWaterSportImpl.setWorkPermitApplied(
			this.<String>getColumnOriginalValue("workPermitApplied"));
		attractionWaterSportImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionWaterSportImpl;
	}

	@Override
	public int compareTo(AttractionWaterSport attractionWaterSport) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionWaterSport.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionWaterSport)) {
			return false;
		}

		AttractionWaterSport attractionWaterSport =
			(AttractionWaterSport)object;

		long primaryKey = attractionWaterSport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionWaterSport> toCacheModel() {
		AttractionWaterSportCacheModel attractionWaterSportCacheModel =
			new AttractionWaterSportCacheModel();

		attractionWaterSportCacheModel.attractionWaterSportId =
			getAttractionWaterSportId();

		attractionWaterSportCacheModel.groupId = getGroupId();

		attractionWaterSportCacheModel.companyId = getCompanyId();

		attractionWaterSportCacheModel.userId = getUserId();

		attractionWaterSportCacheModel.userName = getUserName();

		String userName = attractionWaterSportCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionWaterSportCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionWaterSportCacheModel.createDate = createDate.getTime();
		}
		else {
			attractionWaterSportCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionWaterSportCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionWaterSportCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionWaterSportCacheModel.waterSportBusinessName =
			getWaterSportBusinessName();

		String waterSportBusinessName =
			attractionWaterSportCacheModel.waterSportBusinessName;

		if ((waterSportBusinessName != null) &&
			(waterSportBusinessName.length() == 0)) {

			attractionWaterSportCacheModel.waterSportBusinessName = null;
		}

		attractionWaterSportCacheModel.waterSportMailingaAdd =
			getWaterSportMailingaAdd();

		String waterSportMailingaAdd =
			attractionWaterSportCacheModel.waterSportMailingaAdd;

		if ((waterSportMailingaAdd != null) &&
			(waterSportMailingaAdd.length() == 0)) {

			attractionWaterSportCacheModel.waterSportMailingaAdd = null;
		}

		attractionWaterSportCacheModel.waterSportOpLocationAddr =
			getWaterSportOpLocationAddr();

		String waterSportOpLocationAddr =
			attractionWaterSportCacheModel.waterSportOpLocationAddr;

		if ((waterSportOpLocationAddr != null) &&
			(waterSportOpLocationAddr.length() == 0)) {

			attractionWaterSportCacheModel.waterSportOpLocationAddr = null;
		}

		attractionWaterSportCacheModel.waterSportOpPhone =
			getWaterSportOpPhone();

		String waterSportOpPhone =
			attractionWaterSportCacheModel.waterSportOpPhone;

		if ((waterSportOpPhone != null) && (waterSportOpPhone.length() == 0)) {
			attractionWaterSportCacheModel.waterSportOpPhone = null;
		}

		attractionWaterSportCacheModel.waterSportOpEmail =
			getWaterSportOpEmail();

		String waterSportOpEmail =
			attractionWaterSportCacheModel.waterSportOpEmail;

		if ((waterSportOpEmail != null) && (waterSportOpEmail.length() == 0)) {
			attractionWaterSportCacheModel.waterSportOpEmail = null;
		}

		attractionWaterSportCacheModel.waterSportOpOwnerName =
			getWaterSportOpOwnerName();

		String waterSportOpOwnerName =
			attractionWaterSportCacheModel.waterSportOpOwnerName;

		if ((waterSportOpOwnerName != null) &&
			(waterSportOpOwnerName.length() == 0)) {

			attractionWaterSportCacheModel.waterSportOpOwnerName = null;
		}

		attractionWaterSportCacheModel.waterSportOpAddressOwner =
			getWaterSportOpAddressOwner();

		String waterSportOpAddressOwner =
			attractionWaterSportCacheModel.waterSportOpAddressOwner;

		if ((waterSportOpAddressOwner != null) &&
			(waterSportOpAddressOwner.length() == 0)) {

			attractionWaterSportCacheModel.waterSportOpAddressOwner = null;
		}

		attractionWaterSportCacheModel.waterSportOpManagerName =
			getWaterSportOpManagerName();

		String waterSportOpManagerName =
			attractionWaterSportCacheModel.waterSportOpManagerName;

		if ((waterSportOpManagerName != null) &&
			(waterSportOpManagerName.length() == 0)) {

			attractionWaterSportCacheModel.waterSportOpManagerName = null;
		}

		attractionWaterSportCacheModel.waterSportOpApplicantName =
			getWaterSportOpApplicantName();

		String waterSportOpApplicantName =
			attractionWaterSportCacheModel.waterSportOpApplicantName;

		if ((waterSportOpApplicantName != null) &&
			(waterSportOpApplicantName.length() == 0)) {

			attractionWaterSportCacheModel.waterSportOpApplicantName = null;
		}

		attractionWaterSportCacheModel.waterSportOpNationality =
			getWaterSportOpNationality();

		String waterSportOpNationality =
			attractionWaterSportCacheModel.waterSportOpNationality;

		if ((waterSportOpNationality != null) &&
			(waterSportOpNationality.length() == 0)) {

			attractionWaterSportCacheModel.waterSportOpNationality = null;
		}

		attractionWaterSportCacheModel.waterSportOpEmployeesNo =
			getWaterSportOpEmployeesNo();

		String waterSportOpEmployeesNo =
			attractionWaterSportCacheModel.waterSportOpEmployeesNo;

		if ((waterSportOpEmployeesNo != null) &&
			(waterSportOpEmployeesNo.length() == 0)) {

			attractionWaterSportCacheModel.waterSportOpEmployeesNo = null;
		}

		attractionWaterSportCacheModel.waterSportOpActivityList =
			getWaterSportOpActivityList();

		String waterSportOpActivityList =
			attractionWaterSportCacheModel.waterSportOpActivityList;

		if ((waterSportOpActivityList != null) &&
			(waterSportOpActivityList.length() == 0)) {

			attractionWaterSportCacheModel.waterSportOpActivityList = null;
		}

		attractionWaterSportCacheModel.occupyLocation = getOccupyLocation();

		String occupyLocation = attractionWaterSportCacheModel.occupyLocation;

		if ((occupyLocation != null) && (occupyLocation.length() == 0)) {
			attractionWaterSportCacheModel.occupyLocation = null;
		}

		attractionWaterSportCacheModel.proposalSubmitted =
			getProposalSubmitted();

		String proposalSubmitted =
			attractionWaterSportCacheModel.proposalSubmitted;

		if ((proposalSubmitted != null) && (proposalSubmitted.length() == 0)) {
			attractionWaterSportCacheModel.proposalSubmitted = null;
		}

		attractionWaterSportCacheModel.foreignNationalsInvolved =
			getForeignNationalsInvolved();

		String foreignNationalsInvolved =
			attractionWaterSportCacheModel.foreignNationalsInvolved;

		if ((foreignNationalsInvolved != null) &&
			(foreignNationalsInvolved.length() == 0)) {

			attractionWaterSportCacheModel.foreignNationalsInvolved = null;
		}

		attractionWaterSportCacheModel.workPermitApplied =
			getWorkPermitApplied();

		String workPermitApplied =
			attractionWaterSportCacheModel.workPermitApplied;

		if ((workPermitApplied != null) && (workPermitApplied.length() == 0)) {
			attractionWaterSportCacheModel.workPermitApplied = null;
		}

		attractionWaterSportCacheModel.jtbApplicationId = getJtbApplicationId();

		return attractionWaterSportCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionWaterSport, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionWaterSport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionWaterSport, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionWaterSport)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AttractionWaterSport>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AttractionWaterSport.class, ModelWrapper.class);

	}

	private long _attractionWaterSportId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _waterSportBusinessName;
	private String _waterSportMailingaAdd;
	private String _waterSportOpLocationAddr;
	private String _waterSportOpPhone;
	private String _waterSportOpEmail;
	private String _waterSportOpOwnerName;
	private String _waterSportOpAddressOwner;
	private String _waterSportOpManagerName;
	private String _waterSportOpApplicantName;
	private String _waterSportOpNationality;
	private String _waterSportOpEmployeesNo;
	private String _waterSportOpActivityList;
	private String _occupyLocation;
	private String _proposalSubmitted;
	private String _foreignNationalsInvolved;
	private String _workPermitApplied;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionWaterSport, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionWaterSport)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionWaterSportId", _attractionWaterSportId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"waterSportBusinessName", _waterSportBusinessName);
		_columnOriginalValues.put(
			"waterSportMailingaAdd", _waterSportMailingaAdd);
		_columnOriginalValues.put(
			"waterSportOpLocationAddr", _waterSportOpLocationAddr);
		_columnOriginalValues.put("waterSportOpPhone", _waterSportOpPhone);
		_columnOriginalValues.put("waterSportOpEmail", _waterSportOpEmail);
		_columnOriginalValues.put(
			"waterSportOpOwnerName", _waterSportOpOwnerName);
		_columnOriginalValues.put(
			"waterSportOpAddressOwner", _waterSportOpAddressOwner);
		_columnOriginalValues.put(
			"waterSportOpManagerName", _waterSportOpManagerName);
		_columnOriginalValues.put(
			"waterSportOpApplicantName", _waterSportOpApplicantName);
		_columnOriginalValues.put(
			"waterSportOpNationality", _waterSportOpNationality);
		_columnOriginalValues.put(
			"waterSportOpEmployeesNo", _waterSportOpEmployeesNo);
		_columnOriginalValues.put(
			"waterSportOpActivityList", _waterSportOpActivityList);
		_columnOriginalValues.put("occupyLocation", _occupyLocation);
		_columnOriginalValues.put("proposalSubmitted", _proposalSubmitted);
		_columnOriginalValues.put(
			"foreignNationalsInvolved", _foreignNationalsInvolved);
		_columnOriginalValues.put("workPermitApplied", _workPermitApplied);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionWaterSportId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("waterSportBusinessName", 128L);

		columnBitmasks.put("waterSportMailingaAdd", 256L);

		columnBitmasks.put("waterSportOpLocationAddr", 512L);

		columnBitmasks.put("waterSportOpPhone", 1024L);

		columnBitmasks.put("waterSportOpEmail", 2048L);

		columnBitmasks.put("waterSportOpOwnerName", 4096L);

		columnBitmasks.put("waterSportOpAddressOwner", 8192L);

		columnBitmasks.put("waterSportOpManagerName", 16384L);

		columnBitmasks.put("waterSportOpApplicantName", 32768L);

		columnBitmasks.put("waterSportOpNationality", 65536L);

		columnBitmasks.put("waterSportOpEmployeesNo", 131072L);

		columnBitmasks.put("waterSportOpActivityList", 262144L);

		columnBitmasks.put("occupyLocation", 524288L);

		columnBitmasks.put("proposalSubmitted", 1048576L);

		columnBitmasks.put("foreignNationalsInvolved", 2097152L);

		columnBitmasks.put("workPermitApplied", 4194304L);

		columnBitmasks.put("jtbApplicationId", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionWaterSport _escapedModel;

}