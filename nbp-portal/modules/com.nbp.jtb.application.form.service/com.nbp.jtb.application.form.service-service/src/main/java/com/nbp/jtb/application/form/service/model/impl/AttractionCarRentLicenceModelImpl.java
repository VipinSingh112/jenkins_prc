/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionCarRentLicence;
import com.nbp.jtb.application.form.service.model.AttractionCarRentLicenceModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionCarRentLicence service. Represents a row in the &quot;nbp_jtb_car_rent_licence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionCarRentLicenceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionCarRentLicenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionCarRentLicenceImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionCarRentLicenceModelImpl
	extends BaseModelImpl<AttractionCarRentLicence>
	implements AttractionCarRentLicenceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction car rent licence model instance should use the <code>AttractionCarRentLicence</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_car_rent_licence";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionCarRentLicenceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"newCarRentApplicantName", Types.VARCHAR},
		{"newCarRentAddress", Types.VARCHAR},
		{"newCarRentCompanyName", Types.VARCHAR},
		{"newCarRentCompanyAddr", Types.VARCHAR},
		{"newCarRentTelephone", Types.VARCHAR},
		{"newCarRentEmail", Types.VARCHAR},
		{"newCarRentManagerName", Types.VARCHAR},
		{"newCarRentDate", Types.TIMESTAMP},
		{"newCarRentVehiclesNo", Types.VARCHAR},
		{"newCarRentEmployeesNo", Types.VARCHAR},
		{"newCarRentOfficeLoc", Types.VARCHAR},
		{"newCarRentPosition", Types.VARCHAR},
		{"newCarRentOfficeLoc", Types.VARCHAR},
		{"newCarRentDate", Types.TIMESTAMP}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionCarRentLicenceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("newCarRentApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentCompanyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentCompanyAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentManagerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("newCarRentVehiclesNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentEmployeesNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentOfficeLoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentOfficeLoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newCarRentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_car_rent_licence (attractionCarRentLicenceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,newCarRentApplicantName VARCHAR(75) null,newCarRentAddress VARCHAR(75) null,newCarRentCompanyName VARCHAR(75) null,newCarRentCompanyAddr VARCHAR(75) null,newCarRentTelephone VARCHAR(75) null,newCarRentEmail VARCHAR(75) null,newCarRentManagerName VARCHAR(75) null,newCarRentDate DATE null,newCarRentVehiclesNo VARCHAR(75) null,newCarRentEmployeesNo VARCHAR(75) null,newCarRentOfficeLoc VARCHAR(75) null,newCarRentPosition VARCHAR(75) null,newCarRentOfficeLoc VARCHAR(75) null,newCarRentDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_car_rent_licence";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionCarRentLicence.attractionCarRentLicenceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_car_rent_licence.attractionCarRentLicenceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ATTRACTIONCARRENTLICENCEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionCarRentLicenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionCarRentLicenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionCarRentLicenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionCarRentLicenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionCarRentLicence.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionCarRentLicence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionCarRentLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionCarRentLicence, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionCarRentLicence, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionCarRentLicence)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionCarRentLicence, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionCarRentLicence, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionCarRentLicence)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionCarRentLicence, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionCarRentLicence, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AttractionCarRentLicence>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AttractionCarRentLicence.class.getClassLoader(),
			AttractionCarRentLicence.class, ModelWrapper.class);

		try {
			Constructor<AttractionCarRentLicence> constructor =
				(Constructor<AttractionCarRentLicence>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AttractionCarRentLicence, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<AttractionCarRentLicence, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<AttractionCarRentLicence, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<AttractionCarRentLicence, Object>>();
		Map<String, BiConsumer<AttractionCarRentLicence, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<AttractionCarRentLicence, ?>>();

		attributeGetterFunctions.put(
			"attractionCarRentLicenceId",
			AttractionCarRentLicence::getAttractionCarRentLicenceId);
		attributeSetterBiConsumers.put(
			"attractionCarRentLicenceId",
			(BiConsumer<AttractionCarRentLicence, Long>)
				AttractionCarRentLicence::setAttractionCarRentLicenceId);
		attributeGetterFunctions.put(
			"groupId", AttractionCarRentLicence::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<AttractionCarRentLicence, Long>)
				AttractionCarRentLicence::setGroupId);
		attributeGetterFunctions.put(
			"companyId", AttractionCarRentLicence::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AttractionCarRentLicence, Long>)
				AttractionCarRentLicence::setCompanyId);
		attributeGetterFunctions.put(
			"userId", AttractionCarRentLicence::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<AttractionCarRentLicence, Long>)
				AttractionCarRentLicence::setUserId);
		attributeGetterFunctions.put(
			"userName", AttractionCarRentLicence::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setUserName);
		attributeGetterFunctions.put(
			"createDate", AttractionCarRentLicence::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AttractionCarRentLicence, Date>)
				AttractionCarRentLicence::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", AttractionCarRentLicence::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AttractionCarRentLicence, Date>)
				AttractionCarRentLicence::setModifiedDate);
		attributeGetterFunctions.put(
			"newCarRentApplicantName",
			AttractionCarRentLicence::getNewCarRentApplicantName);
		attributeSetterBiConsumers.put(
			"newCarRentApplicantName",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentApplicantName);
		attributeGetterFunctions.put(
			"newCarRentAddress",
			AttractionCarRentLicence::getNewCarRentAddress);
		attributeSetterBiConsumers.put(
			"newCarRentAddress",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentAddress);
		attributeGetterFunctions.put(
			"newCarRentCompanyName",
			AttractionCarRentLicence::getNewCarRentCompanyName);
		attributeSetterBiConsumers.put(
			"newCarRentCompanyName",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentCompanyName);
		attributeGetterFunctions.put(
			"newCarRentCompanyAddr",
			AttractionCarRentLicence::getNewCarRentCompanyAddr);
		attributeSetterBiConsumers.put(
			"newCarRentCompanyAddr",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentCompanyAddr);
		attributeGetterFunctions.put(
			"newCarRentTelephone",
			AttractionCarRentLicence::getNewCarRentTelephone);
		attributeSetterBiConsumers.put(
			"newCarRentTelephone",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentTelephone);
		attributeGetterFunctions.put(
			"newCarRentEmail", AttractionCarRentLicence::getNewCarRentEmail);
		attributeSetterBiConsumers.put(
			"newCarRentEmail",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentEmail);
		attributeGetterFunctions.put(
			"newCarRentManagerName",
			AttractionCarRentLicence::getNewCarRentManagerName);
		attributeSetterBiConsumers.put(
			"newCarRentManagerName",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentManagerName);
		attributeGetterFunctions.put(
			"newCarRentDate", AttractionCarRentLicence::getNewCarRentDate);
		attributeSetterBiConsumers.put(
			"newCarRentDate",
			(BiConsumer<AttractionCarRentLicence, Date>)
				AttractionCarRentLicence::setNewCarRentDate);
		attributeGetterFunctions.put(
			"newCarRentVehiclesNo",
			AttractionCarRentLicence::getNewCarRentVehiclesNo);
		attributeSetterBiConsumers.put(
			"newCarRentVehiclesNo",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentVehiclesNo);
		attributeGetterFunctions.put(
			"newCarRentEmployeesNo",
			AttractionCarRentLicence::getNewCarRentEmployeesNo);
		attributeSetterBiConsumers.put(
			"newCarRentEmployeesNo",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentEmployeesNo);
		attributeGetterFunctions.put(
			"newCarRentOfficeLoc",
			AttractionCarRentLicence::getNewCarRentOfficeLoc);
		attributeSetterBiConsumers.put(
			"newCarRentOfficeLoc",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentOfficeLoc);
		attributeGetterFunctions.put(
			"newCarRentPosition",
			AttractionCarRentLicence::getNewCarRentPosition);
		attributeSetterBiConsumers.put(
			"newCarRentPosition",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentPosition);
		attributeGetterFunctions.put(
			"newCarRentOfficeLoc",
			AttractionCarRentLicence::getNewCarRentOfficeLoc);
		attributeSetterBiConsumers.put(
			"newCarRentOfficeLoc",
			(BiConsumer<AttractionCarRentLicence, String>)
				AttractionCarRentLicence::setNewCarRentOfficeLoc);
		attributeGetterFunctions.put(
			"newCarRentDate", AttractionCarRentLicence::getNewCarRentDate);
		attributeSetterBiConsumers.put(
			"newCarRentDate",
			(BiConsumer<AttractionCarRentLicence, Date>)
				AttractionCarRentLicence::setNewCarRentDate);
		attributeGetterFunctions.put(
			"jtbApplicationId", AttractionCarRentLicence::getJtbApplicationId);
		attributeSetterBiConsumers.put(
			"jtbApplicationId",
			(BiConsumer<AttractionCarRentLicence, Long>)
				AttractionCarRentLicence::setJtbApplicationId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAttractionCarRentLicenceId() {
		return _attractionCarRentLicenceId;
	}

	@Override
	public void setAttractionCarRentLicenceId(long attractionCarRentLicenceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionCarRentLicenceId = attractionCarRentLicenceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNewCarRentApplicantName() {
		if (_newCarRentApplicantName == null) {
			return "";
		}
		else {
			return _newCarRentApplicantName;
		}
	}

	@Override
	public void setNewCarRentApplicantName(String newCarRentApplicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentApplicantName = newCarRentApplicantName;
	}

	@JSON
	@Override
	public String getNewCarRentAddress() {
		if (_newCarRentAddress == null) {
			return "";
		}
		else {
			return _newCarRentAddress;
		}
	}

	@Override
	public void setNewCarRentAddress(String newCarRentAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentAddress = newCarRentAddress;
	}

	@JSON
	@Override
	public String getNewCarRentCompanyName() {
		if (_newCarRentCompanyName == null) {
			return "";
		}
		else {
			return _newCarRentCompanyName;
		}
	}

	@Override
	public void setNewCarRentCompanyName(String newCarRentCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentCompanyName = newCarRentCompanyName;
	}

	@JSON
	@Override
	public String getNewCarRentCompanyAddr() {
		if (_newCarRentCompanyAddr == null) {
			return "";
		}
		else {
			return _newCarRentCompanyAddr;
		}
	}

	@Override
	public void setNewCarRentCompanyAddr(String newCarRentCompanyAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentCompanyAddr = newCarRentCompanyAddr;
	}

	@JSON
	@Override
	public String getNewCarRentTelephone() {
		if (_newCarRentTelephone == null) {
			return "";
		}
		else {
			return _newCarRentTelephone;
		}
	}

	@Override
	public void setNewCarRentTelephone(String newCarRentTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentTelephone = newCarRentTelephone;
	}

	@JSON
	@Override
	public String getNewCarRentEmail() {
		if (_newCarRentEmail == null) {
			return "";
		}
		else {
			return _newCarRentEmail;
		}
	}

	@Override
	public void setNewCarRentEmail(String newCarRentEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentEmail = newCarRentEmail;
	}

	@JSON
	@Override
	public String getNewCarRentManagerName() {
		if (_newCarRentManagerName == null) {
			return "";
		}
		else {
			return _newCarRentManagerName;
		}
	}

	@Override
	public void setNewCarRentManagerName(String newCarRentManagerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentManagerName = newCarRentManagerName;
	}

	@JSON
	@Override
	public Date getNewCarRentDate() {
		return _newCarRentDate;
	}

	@Override
	public void setNewCarRentDate(Date newCarRentDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentDate = newCarRentDate;
	}

	@JSON
	@Override
	public String getNewCarRentVehiclesNo() {
		if (_newCarRentVehiclesNo == null) {
			return "";
		}
		else {
			return _newCarRentVehiclesNo;
		}
	}

	@Override
	public void setNewCarRentVehiclesNo(String newCarRentVehiclesNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentVehiclesNo = newCarRentVehiclesNo;
	}

	@JSON
	@Override
	public String getNewCarRentEmployeesNo() {
		if (_newCarRentEmployeesNo == null) {
			return "";
		}
		else {
			return _newCarRentEmployeesNo;
		}
	}

	@Override
	public void setNewCarRentEmployeesNo(String newCarRentEmployeesNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentEmployeesNo = newCarRentEmployeesNo;
	}

	@JSON
	@Override
	public String getNewCarRentOfficeLoc() {
		if (_newCarRentOfficeLoc1 == null) {
			return "";
		}
		else {
			return _newCarRentOfficeLoc1;
		}
	}

	@Override
	public void setNewCarRentOfficeLoc(String newCarRentOfficeLoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentOfficeLoc1 = newCarRentOfficeLoc;
	}

	@JSON
	@Override
	public String getNewCarRentPosition() {
		if (_newCarRentPosition == null) {
			return "";
		}
		else {
			return _newCarRentPosition;
		}
	}

	@Override
	public void setNewCarRentPosition(String newCarRentPosition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentPosition = newCarRentPosition;
	}

	@JSON
	@Override
	public String getNewCarRentOfficeLoc1() {
		if (_newCarRentOfficeLoc1 == null) {
			return "";
		}
		else {
			return _newCarRentOfficeLoc1;
		}
	}

	@Override
	public void setNewCarRentOfficeLoc1(String newCarRentOfficeLoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentOfficeLoc1 = newCarRentOfficeLoc;
	}

	@JSON
	@Override
	public Date getNewCarRentDate1() {
		return _newCarRentDate;
	}

	@Override
	public void setNewCarRentDate1(Date newCarRentDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newCarRentDate = newCarRentDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionCarRentLicence.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionCarRentLicence toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionCarRentLicence>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionCarRentLicenceImpl attractionCarRentLicenceImpl =
			new AttractionCarRentLicenceImpl();

		attractionCarRentLicenceImpl.setAttractionCarRentLicenceId(
			getAttractionCarRentLicenceId());
		attractionCarRentLicenceImpl.setGroupId(getGroupId());
		attractionCarRentLicenceImpl.setCompanyId(getCompanyId());
		attractionCarRentLicenceImpl.setUserId(getUserId());
		attractionCarRentLicenceImpl.setUserName(getUserName());
		attractionCarRentLicenceImpl.setCreateDate(getCreateDate());
		attractionCarRentLicenceImpl.setModifiedDate(getModifiedDate());
		attractionCarRentLicenceImpl.setNewCarRentApplicantName(
			getNewCarRentApplicantName());
		attractionCarRentLicenceImpl.setNewCarRentAddress(
			getNewCarRentAddress());
		attractionCarRentLicenceImpl.setNewCarRentCompanyName(
			getNewCarRentCompanyName());
		attractionCarRentLicenceImpl.setNewCarRentCompanyAddr(
			getNewCarRentCompanyAddr());
		attractionCarRentLicenceImpl.setNewCarRentTelephone(
			getNewCarRentTelephone());
		attractionCarRentLicenceImpl.setNewCarRentEmail(getNewCarRentEmail());
		attractionCarRentLicenceImpl.setNewCarRentManagerName(
			getNewCarRentManagerName());
		attractionCarRentLicenceImpl.setNewCarRentDate(getNewCarRentDate());
		attractionCarRentLicenceImpl.setNewCarRentVehiclesNo(
			getNewCarRentVehiclesNo());
		attractionCarRentLicenceImpl.setNewCarRentEmployeesNo(
			getNewCarRentEmployeesNo());
		attractionCarRentLicenceImpl.setNewCarRentOfficeLoc(
			getNewCarRentOfficeLoc());
		attractionCarRentLicenceImpl.setNewCarRentPosition(
			getNewCarRentPosition());
		attractionCarRentLicenceImpl.setNewCarRentOfficeLoc(
			getNewCarRentOfficeLoc());
		attractionCarRentLicenceImpl.setNewCarRentDate(getNewCarRentDate());
		attractionCarRentLicenceImpl.setJtbApplicationId(getJtbApplicationId());

		attractionCarRentLicenceImpl.resetOriginalValues();

		return attractionCarRentLicenceImpl;
	}

	@Override
	public AttractionCarRentLicence cloneWithOriginalValues() {
		AttractionCarRentLicenceImpl attractionCarRentLicenceImpl =
			new AttractionCarRentLicenceImpl();

		attractionCarRentLicenceImpl.setAttractionCarRentLicenceId(
			this.<Long>getColumnOriginalValue("attractionCarRentLicenceId"));
		attractionCarRentLicenceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionCarRentLicenceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionCarRentLicenceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionCarRentLicenceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionCarRentLicenceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionCarRentLicenceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionCarRentLicenceImpl.setNewCarRentApplicantName(
			this.<String>getColumnOriginalValue("newCarRentApplicantName"));
		attractionCarRentLicenceImpl.setNewCarRentAddress(
			this.<String>getColumnOriginalValue("newCarRentAddress"));
		attractionCarRentLicenceImpl.setNewCarRentCompanyName(
			this.<String>getColumnOriginalValue("newCarRentCompanyName"));
		attractionCarRentLicenceImpl.setNewCarRentCompanyAddr(
			this.<String>getColumnOriginalValue("newCarRentCompanyAddr"));
		attractionCarRentLicenceImpl.setNewCarRentTelephone(
			this.<String>getColumnOriginalValue("newCarRentTelephone"));
		attractionCarRentLicenceImpl.setNewCarRentEmail(
			this.<String>getColumnOriginalValue("newCarRentEmail"));
		attractionCarRentLicenceImpl.setNewCarRentManagerName(
			this.<String>getColumnOriginalValue("newCarRentManagerName"));
		attractionCarRentLicenceImpl.setNewCarRentDate(
			this.<Date>getColumnOriginalValue("newCarRentDate"));
		attractionCarRentLicenceImpl.setNewCarRentVehiclesNo(
			this.<String>getColumnOriginalValue("newCarRentVehiclesNo"));
		attractionCarRentLicenceImpl.setNewCarRentEmployeesNo(
			this.<String>getColumnOriginalValue("newCarRentEmployeesNo"));
		attractionCarRentLicenceImpl.setNewCarRentOfficeLoc(
			this.<String>getColumnOriginalValue("newCarRentOfficeLoc"));
		attractionCarRentLicenceImpl.setNewCarRentPosition(
			this.<String>getColumnOriginalValue("newCarRentPosition"));
		attractionCarRentLicenceImpl.setNewCarRentOfficeLoc(
			this.<String>getColumnOriginalValue("newCarRentOfficeLoc"));
		attractionCarRentLicenceImpl.setNewCarRentDate(
			this.<Date>getColumnOriginalValue("newCarRentDate"));
		attractionCarRentLicenceImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionCarRentLicenceImpl;
	}

	@Override
	public int compareTo(AttractionCarRentLicence attractionCarRentLicence) {
		long primaryKey = attractionCarRentLicence.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionCarRentLicence)) {
			return false;
		}

		AttractionCarRentLicence attractionCarRentLicence =
			(AttractionCarRentLicence)object;

		long primaryKey = attractionCarRentLicence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionCarRentLicence> toCacheModel() {
		AttractionCarRentLicenceCacheModel attractionCarRentLicenceCacheModel =
			new AttractionCarRentLicenceCacheModel();

		attractionCarRentLicenceCacheModel.attractionCarRentLicenceId =
			getAttractionCarRentLicenceId();

		attractionCarRentLicenceCacheModel.groupId = getGroupId();

		attractionCarRentLicenceCacheModel.companyId = getCompanyId();

		attractionCarRentLicenceCacheModel.userId = getUserId();

		attractionCarRentLicenceCacheModel.userName = getUserName();

		String userName = attractionCarRentLicenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionCarRentLicenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionCarRentLicenceCacheModel.createDate =
				createDate.getTime();
		}
		else {
			attractionCarRentLicenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionCarRentLicenceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionCarRentLicenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionCarRentLicenceCacheModel.newCarRentApplicantName =
			getNewCarRentApplicantName();

		String newCarRentApplicantName =
			attractionCarRentLicenceCacheModel.newCarRentApplicantName;

		if ((newCarRentApplicantName != null) &&
			(newCarRentApplicantName.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentApplicantName = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentAddress =
			getNewCarRentAddress();

		String newCarRentAddress =
			attractionCarRentLicenceCacheModel.newCarRentAddress;

		if ((newCarRentAddress != null) && (newCarRentAddress.length() == 0)) {
			attractionCarRentLicenceCacheModel.newCarRentAddress = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentCompanyName =
			getNewCarRentCompanyName();

		String newCarRentCompanyName =
			attractionCarRentLicenceCacheModel.newCarRentCompanyName;

		if ((newCarRentCompanyName != null) &&
			(newCarRentCompanyName.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentCompanyName = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentCompanyAddr =
			getNewCarRentCompanyAddr();

		String newCarRentCompanyAddr =
			attractionCarRentLicenceCacheModel.newCarRentCompanyAddr;

		if ((newCarRentCompanyAddr != null) &&
			(newCarRentCompanyAddr.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentCompanyAddr = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentTelephone =
			getNewCarRentTelephone();

		String newCarRentTelephone =
			attractionCarRentLicenceCacheModel.newCarRentTelephone;

		if ((newCarRentTelephone != null) &&
			(newCarRentTelephone.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentTelephone = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentEmail =
			getNewCarRentEmail();

		String newCarRentEmail =
			attractionCarRentLicenceCacheModel.newCarRentEmail;

		if ((newCarRentEmail != null) && (newCarRentEmail.length() == 0)) {
			attractionCarRentLicenceCacheModel.newCarRentEmail = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentManagerName =
			getNewCarRentManagerName();

		String newCarRentManagerName =
			attractionCarRentLicenceCacheModel.newCarRentManagerName;

		if ((newCarRentManagerName != null) &&
			(newCarRentManagerName.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentManagerName = null;
		}

		Date newCarRentDate = getNewCarRentDate();

		if (newCarRentDate != null) {
			attractionCarRentLicenceCacheModel.newCarRentDate =
				newCarRentDate.getTime();
		}
		else {
			attractionCarRentLicenceCacheModel.newCarRentDate = Long.MIN_VALUE;
		}

		attractionCarRentLicenceCacheModel.newCarRentVehiclesNo =
			getNewCarRentVehiclesNo();

		String newCarRentVehiclesNo =
			attractionCarRentLicenceCacheModel.newCarRentVehiclesNo;

		if ((newCarRentVehiclesNo != null) &&
			(newCarRentVehiclesNo.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentVehiclesNo = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentEmployeesNo =
			getNewCarRentEmployeesNo();

		String newCarRentEmployeesNo =
			attractionCarRentLicenceCacheModel.newCarRentEmployeesNo;

		if ((newCarRentEmployeesNo != null) &&
			(newCarRentEmployeesNo.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentEmployeesNo = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentOfficeLoc =
			getNewCarRentOfficeLoc();

		String newCarRentOfficeLoc =
			attractionCarRentLicenceCacheModel.newCarRentOfficeLoc;

		if ((newCarRentOfficeLoc != null) &&
			(newCarRentOfficeLoc.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentOfficeLoc = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentPosition =
			getNewCarRentPosition();

		String newCarRentPosition =
			attractionCarRentLicenceCacheModel.newCarRentPosition;

		if ((newCarRentPosition != null) &&
			(newCarRentPosition.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentPosition = null;
		}

		attractionCarRentLicenceCacheModel.newCarRentOfficeLoc =
			getNewCarRentOfficeLoc();

		String newCarRentOfficeLoc1 =
			attractionCarRentLicenceCacheModel.newCarRentOfficeLoc;

		if ((newCarRentOfficeLoc1 != null) &&
			(newCarRentOfficeLoc1.length() == 0)) {

			attractionCarRentLicenceCacheModel.newCarRentOfficeLoc = null;
		}

		Date newCarRentDate1 = getNewCarRentDate();

		if (newCarRentDate1 != null) {
			attractionCarRentLicenceCacheModel.newCarRentDate =
				newCarRentDate1.getTime();
		}
		else {
			attractionCarRentLicenceCacheModel.newCarRentDate = Long.MIN_VALUE;
		}

		attractionCarRentLicenceCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionCarRentLicenceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionCarRentLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionCarRentLicence, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionCarRentLicence, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionCarRentLicence)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionCarRentLicence>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _attractionCarRentLicenceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _newCarRentApplicantName;
	private String _newCarRentAddress;
	private String _newCarRentCompanyName;
	private String _newCarRentCompanyAddr;
	private String _newCarRentTelephone;
	private String _newCarRentEmail;
	private String _newCarRentManagerName;
	private Date _newCarRentDate;
	private String _newCarRentVehiclesNo;
	private String _newCarRentEmployeesNo;
	private String _newCarRentOfficeLoc1;
	private String _newCarRentPosition;
	private String _newCarRentOfficeLoc;
	private Date _newCarRentDate1;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionCarRentLicence, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionCarRentLicence)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionCarRentLicenceId", _attractionCarRentLicenceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"newCarRentApplicantName", _newCarRentApplicantName);
		_columnOriginalValues.put("newCarRentAddress", _newCarRentAddress);
		_columnOriginalValues.put(
			"newCarRentCompanyName", _newCarRentCompanyName);
		_columnOriginalValues.put(
			"newCarRentCompanyAddr", _newCarRentCompanyAddr);
		_columnOriginalValues.put("newCarRentTelephone", _newCarRentTelephone);
		_columnOriginalValues.put("newCarRentEmail", _newCarRentEmail);
		_columnOriginalValues.put(
			"newCarRentManagerName", _newCarRentManagerName);
		_columnOriginalValues.put("newCarRentDate", _newCarRentDate);
		_columnOriginalValues.put(
			"newCarRentVehiclesNo", _newCarRentVehiclesNo);
		_columnOriginalValues.put(
			"newCarRentEmployeesNo", _newCarRentEmployeesNo);
		_columnOriginalValues.put("newCarRentOfficeLoc", _newCarRentOfficeLoc1);
		_columnOriginalValues.put("newCarRentPosition", _newCarRentPosition);
		_columnOriginalValues.put("newCarRentOfficeLoc", _newCarRentOfficeLoc1);
		_columnOriginalValues.put("newCarRentDate", _newCarRentDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionCarRentLicenceId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("newCarRentApplicantName", 128L);

		columnBitmasks.put("newCarRentAddress", 256L);

		columnBitmasks.put("newCarRentCompanyName", 512L);

		columnBitmasks.put("newCarRentCompanyAddr", 1024L);

		columnBitmasks.put("newCarRentTelephone", 2048L);

		columnBitmasks.put("newCarRentEmail", 4096L);

		columnBitmasks.put("newCarRentManagerName", 8192L);

		columnBitmasks.put("newCarRentDate", 16384L);

		columnBitmasks.put("newCarRentVehiclesNo", 32768L);

		columnBitmasks.put("newCarRentEmployeesNo", 65536L);

		columnBitmasks.put("newCarRentOfficeLoc", 131072L);

		columnBitmasks.put("newCarRentPosition", 262144L);

		columnBitmasks.put("newCarRentOfficeLoc", 524288L);

		columnBitmasks.put("newCarRentDate", 1048576L);

		columnBitmasks.put("jtbApplicationId", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionCarRentLicence _escapedModel;

}