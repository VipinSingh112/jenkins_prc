/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionCarRentalLicence;
import com.nbp.jtb.application.form.service.model.AttractionCarRentalLicenceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionCarRentalLicence service. Represents a row in the &quot;nbp_jtb_car_rental_licence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionCarRentalLicenceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionCarRentalLicenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionCarRentalLicenceImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionCarRentalLicenceModelImpl
	extends BaseModelImpl<AttractionCarRentalLicence>
	implements AttractionCarRentalLicenceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction car rental licence model instance should use the <code>AttractionCarRentalLicence</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_car_rental_licence";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionCarRentalLicId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"ncrApplicantName", Types.VARCHAR},
		{"ncrAddress", Types.VARCHAR}, {"ncrCompanyName", Types.VARCHAR},
		{"ncrCompanyAddr", Types.VARCHAR}, {"ncrTelephone", Types.VARCHAR},
		{"ncrEmail", Types.VARCHAR}, {"ncrManagerName", Types.VARCHAR},
		{"ncrDate", Types.TIMESTAMP}, {"ncrVehiclesNo", Types.VARCHAR},
		{"ncrEmployeesNo", Types.VARCHAR}, {"ncrOfficeLoc", Types.VARCHAR},
		{"ncrPosition", Types.VARCHAR}, {"ncrSignDate", Types.TIMESTAMP},
		{"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionCarRentalLicId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ncrApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrCompanyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrCompanyAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrManagerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ncrVehiclesNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrEmployeesNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrOfficeLoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncrSignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_car_rental_licence (attractionCarRentalLicId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,ncrApplicantName VARCHAR(75) null,ncrAddress VARCHAR(500) null,ncrCompanyName VARCHAR(75) null,ncrCompanyAddr VARCHAR(500) null,ncrTelephone VARCHAR(75) null,ncrEmail VARCHAR(75) null,ncrManagerName VARCHAR(75) null,ncrDate DATE null,ncrVehiclesNo VARCHAR(75) null,ncrEmployeesNo VARCHAR(75) null,ncrOfficeLoc VARCHAR(75) null,ncrPosition VARCHAR(75) null,ncrSignDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_car_rental_licence";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionCarRentalLicence.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_car_rental_licence.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionCarRentalLicenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionCarRentalLicId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionCarRentalLicId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionCarRentalLicId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionCarRentalLicence.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionCarRentalLicence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionCarRentalLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionCarRentalLicence, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionCarRentalLicence, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(AttractionCarRentalLicence)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionCarRentalLicence, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionCarRentalLicence, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionCarRentalLicence)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionCarRentalLicence, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionCarRentalLicence, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionCarRentalLicence, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionCarRentalLicence, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<AttractionCarRentalLicence, Object>>();

			attributeGetterFunctions.put(
				"attractionCarRentalLicId",
				AttractionCarRentalLicence::getAttractionCarRentalLicId);
			attributeGetterFunctions.put(
				"groupId", AttractionCarRentalLicence::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionCarRentalLicence::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionCarRentalLicence::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionCarRentalLicence::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionCarRentalLicence::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionCarRentalLicence::getModifiedDate);
			attributeGetterFunctions.put(
				"ncrApplicantName",
				AttractionCarRentalLicence::getNcrApplicantName);
			attributeGetterFunctions.put(
				"ncrAddress", AttractionCarRentalLicence::getNcrAddress);
			attributeGetterFunctions.put(
				"ncrCompanyName",
				AttractionCarRentalLicence::getNcrCompanyName);
			attributeGetterFunctions.put(
				"ncrCompanyAddr",
				AttractionCarRentalLicence::getNcrCompanyAddr);
			attributeGetterFunctions.put(
				"ncrTelephone", AttractionCarRentalLicence::getNcrTelephone);
			attributeGetterFunctions.put(
				"ncrEmail", AttractionCarRentalLicence::getNcrEmail);
			attributeGetterFunctions.put(
				"ncrManagerName",
				AttractionCarRentalLicence::getNcrManagerName);
			attributeGetterFunctions.put(
				"ncrDate", AttractionCarRentalLicence::getNcrDate);
			attributeGetterFunctions.put(
				"ncrVehiclesNo", AttractionCarRentalLicence::getNcrVehiclesNo);
			attributeGetterFunctions.put(
				"ncrEmployeesNo",
				AttractionCarRentalLicence::getNcrEmployeesNo);
			attributeGetterFunctions.put(
				"ncrOfficeLoc", AttractionCarRentalLicence::getNcrOfficeLoc);
			attributeGetterFunctions.put(
				"ncrPosition", AttractionCarRentalLicence::getNcrPosition);
			attributeGetterFunctions.put(
				"ncrSignDate", AttractionCarRentalLicence::getNcrSignDate);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionCarRentalLicence::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionCarRentalLicence, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionCarRentalLicence, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionCarRentalLicence, ?>>();

			attributeSetterBiConsumers.put(
				"attractionCarRentalLicId",
				(BiConsumer<AttractionCarRentalLicence, Long>)
					AttractionCarRentalLicence::setAttractionCarRentalLicId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionCarRentalLicence, Long>)
					AttractionCarRentalLicence::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionCarRentalLicence, Long>)
					AttractionCarRentalLicence::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionCarRentalLicence, Long>)
					AttractionCarRentalLicence::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionCarRentalLicence, Date>)
					AttractionCarRentalLicence::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionCarRentalLicence, Date>)
					AttractionCarRentalLicence::setModifiedDate);
			attributeSetterBiConsumers.put(
				"ncrApplicantName",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrApplicantName);
			attributeSetterBiConsumers.put(
				"ncrAddress",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrAddress);
			attributeSetterBiConsumers.put(
				"ncrCompanyName",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrCompanyName);
			attributeSetterBiConsumers.put(
				"ncrCompanyAddr",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrCompanyAddr);
			attributeSetterBiConsumers.put(
				"ncrTelephone",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrTelephone);
			attributeSetterBiConsumers.put(
				"ncrEmail",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrEmail);
			attributeSetterBiConsumers.put(
				"ncrManagerName",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrManagerName);
			attributeSetterBiConsumers.put(
				"ncrDate",
				(BiConsumer<AttractionCarRentalLicence, Date>)
					AttractionCarRentalLicence::setNcrDate);
			attributeSetterBiConsumers.put(
				"ncrVehiclesNo",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrVehiclesNo);
			attributeSetterBiConsumers.put(
				"ncrEmployeesNo",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrEmployeesNo);
			attributeSetterBiConsumers.put(
				"ncrOfficeLoc",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrOfficeLoc);
			attributeSetterBiConsumers.put(
				"ncrPosition",
				(BiConsumer<AttractionCarRentalLicence, String>)
					AttractionCarRentalLicence::setNcrPosition);
			attributeSetterBiConsumers.put(
				"ncrSignDate",
				(BiConsumer<AttractionCarRentalLicence, Date>)
					AttractionCarRentalLicence::setNcrSignDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionCarRentalLicence, Long>)
					AttractionCarRentalLicence::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionCarRentalLicId() {
		return _attractionCarRentalLicId;
	}

	@Override
	public void setAttractionCarRentalLicId(long attractionCarRentalLicId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionCarRentalLicId = attractionCarRentalLicId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNcrApplicantName() {
		if (_ncrApplicantName == null) {
			return "";
		}
		else {
			return _ncrApplicantName;
		}
	}

	@Override
	public void setNcrApplicantName(String ncrApplicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrApplicantName = ncrApplicantName;
	}

	@JSON
	@Override
	public String getNcrAddress() {
		if (_ncrAddress == null) {
			return "";
		}
		else {
			return _ncrAddress;
		}
	}

	@Override
	public void setNcrAddress(String ncrAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrAddress = ncrAddress;
	}

	@JSON
	@Override
	public String getNcrCompanyName() {
		if (_ncrCompanyName == null) {
			return "";
		}
		else {
			return _ncrCompanyName;
		}
	}

	@Override
	public void setNcrCompanyName(String ncrCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrCompanyName = ncrCompanyName;
	}

	@JSON
	@Override
	public String getNcrCompanyAddr() {
		if (_ncrCompanyAddr == null) {
			return "";
		}
		else {
			return _ncrCompanyAddr;
		}
	}

	@Override
	public void setNcrCompanyAddr(String ncrCompanyAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrCompanyAddr = ncrCompanyAddr;
	}

	@JSON
	@Override
	public String getNcrTelephone() {
		if (_ncrTelephone == null) {
			return "";
		}
		else {
			return _ncrTelephone;
		}
	}

	@Override
	public void setNcrTelephone(String ncrTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrTelephone = ncrTelephone;
	}

	@JSON
	@Override
	public String getNcrEmail() {
		if (_ncrEmail == null) {
			return "";
		}
		else {
			return _ncrEmail;
		}
	}

	@Override
	public void setNcrEmail(String ncrEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrEmail = ncrEmail;
	}

	@JSON
	@Override
	public String getNcrManagerName() {
		if (_ncrManagerName == null) {
			return "";
		}
		else {
			return _ncrManagerName;
		}
	}

	@Override
	public void setNcrManagerName(String ncrManagerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrManagerName = ncrManagerName;
	}

	@JSON
	@Override
	public Date getNcrDate() {
		return _ncrDate;
	}

	@Override
	public void setNcrDate(Date ncrDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrDate = ncrDate;
	}

	@JSON
	@Override
	public String getNcrVehiclesNo() {
		if (_ncrVehiclesNo == null) {
			return "";
		}
		else {
			return _ncrVehiclesNo;
		}
	}

	@Override
	public void setNcrVehiclesNo(String ncrVehiclesNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrVehiclesNo = ncrVehiclesNo;
	}

	@JSON
	@Override
	public String getNcrEmployeesNo() {
		if (_ncrEmployeesNo == null) {
			return "";
		}
		else {
			return _ncrEmployeesNo;
		}
	}

	@Override
	public void setNcrEmployeesNo(String ncrEmployeesNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrEmployeesNo = ncrEmployeesNo;
	}

	@JSON
	@Override
	public String getNcrOfficeLoc() {
		if (_ncrOfficeLoc == null) {
			return "";
		}
		else {
			return _ncrOfficeLoc;
		}
	}

	@Override
	public void setNcrOfficeLoc(String ncrOfficeLoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrOfficeLoc = ncrOfficeLoc;
	}

	@JSON
	@Override
	public String getNcrPosition() {
		if (_ncrPosition == null) {
			return "";
		}
		else {
			return _ncrPosition;
		}
	}

	@Override
	public void setNcrPosition(String ncrPosition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrPosition = ncrPosition;
	}

	@JSON
	@Override
	public Date getNcrSignDate() {
		return _ncrSignDate;
	}

	@Override
	public void setNcrSignDate(Date ncrSignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncrSignDate = ncrSignDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionCarRentalLicence.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionCarRentalLicence toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionCarRentalLicence>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionCarRentalLicenceImpl attractionCarRentalLicenceImpl =
			new AttractionCarRentalLicenceImpl();

		attractionCarRentalLicenceImpl.setAttractionCarRentalLicId(
			getAttractionCarRentalLicId());
		attractionCarRentalLicenceImpl.setGroupId(getGroupId());
		attractionCarRentalLicenceImpl.setCompanyId(getCompanyId());
		attractionCarRentalLicenceImpl.setUserId(getUserId());
		attractionCarRentalLicenceImpl.setUserName(getUserName());
		attractionCarRentalLicenceImpl.setCreateDate(getCreateDate());
		attractionCarRentalLicenceImpl.setModifiedDate(getModifiedDate());
		attractionCarRentalLicenceImpl.setNcrApplicantName(
			getNcrApplicantName());
		attractionCarRentalLicenceImpl.setNcrAddress(getNcrAddress());
		attractionCarRentalLicenceImpl.setNcrCompanyName(getNcrCompanyName());
		attractionCarRentalLicenceImpl.setNcrCompanyAddr(getNcrCompanyAddr());
		attractionCarRentalLicenceImpl.setNcrTelephone(getNcrTelephone());
		attractionCarRentalLicenceImpl.setNcrEmail(getNcrEmail());
		attractionCarRentalLicenceImpl.setNcrManagerName(getNcrManagerName());
		attractionCarRentalLicenceImpl.setNcrDate(getNcrDate());
		attractionCarRentalLicenceImpl.setNcrVehiclesNo(getNcrVehiclesNo());
		attractionCarRentalLicenceImpl.setNcrEmployeesNo(getNcrEmployeesNo());
		attractionCarRentalLicenceImpl.setNcrOfficeLoc(getNcrOfficeLoc());
		attractionCarRentalLicenceImpl.setNcrPosition(getNcrPosition());
		attractionCarRentalLicenceImpl.setNcrSignDate(getNcrSignDate());
		attractionCarRentalLicenceImpl.setJtbApplicationId(
			getJtbApplicationId());

		attractionCarRentalLicenceImpl.resetOriginalValues();

		return attractionCarRentalLicenceImpl;
	}

	@Override
	public AttractionCarRentalLicence cloneWithOriginalValues() {
		AttractionCarRentalLicenceImpl attractionCarRentalLicenceImpl =
			new AttractionCarRentalLicenceImpl();

		attractionCarRentalLicenceImpl.setAttractionCarRentalLicId(
			this.<Long>getColumnOriginalValue("attractionCarRentalLicId"));
		attractionCarRentalLicenceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionCarRentalLicenceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionCarRentalLicenceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionCarRentalLicenceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionCarRentalLicenceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionCarRentalLicenceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionCarRentalLicenceImpl.setNcrApplicantName(
			this.<String>getColumnOriginalValue("ncrApplicantName"));
		attractionCarRentalLicenceImpl.setNcrAddress(
			this.<String>getColumnOriginalValue("ncrAddress"));
		attractionCarRentalLicenceImpl.setNcrCompanyName(
			this.<String>getColumnOriginalValue("ncrCompanyName"));
		attractionCarRentalLicenceImpl.setNcrCompanyAddr(
			this.<String>getColumnOriginalValue("ncrCompanyAddr"));
		attractionCarRentalLicenceImpl.setNcrTelephone(
			this.<String>getColumnOriginalValue("ncrTelephone"));
		attractionCarRentalLicenceImpl.setNcrEmail(
			this.<String>getColumnOriginalValue("ncrEmail"));
		attractionCarRentalLicenceImpl.setNcrManagerName(
			this.<String>getColumnOriginalValue("ncrManagerName"));
		attractionCarRentalLicenceImpl.setNcrDate(
			this.<Date>getColumnOriginalValue("ncrDate"));
		attractionCarRentalLicenceImpl.setNcrVehiclesNo(
			this.<String>getColumnOriginalValue("ncrVehiclesNo"));
		attractionCarRentalLicenceImpl.setNcrEmployeesNo(
			this.<String>getColumnOriginalValue("ncrEmployeesNo"));
		attractionCarRentalLicenceImpl.setNcrOfficeLoc(
			this.<String>getColumnOriginalValue("ncrOfficeLoc"));
		attractionCarRentalLicenceImpl.setNcrPosition(
			this.<String>getColumnOriginalValue("ncrPosition"));
		attractionCarRentalLicenceImpl.setNcrSignDate(
			this.<Date>getColumnOriginalValue("ncrSignDate"));
		attractionCarRentalLicenceImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionCarRentalLicenceImpl;
	}

	@Override
	public int compareTo(
		AttractionCarRentalLicence attractionCarRentalLicence) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionCarRentalLicence.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionCarRentalLicence)) {
			return false;
		}

		AttractionCarRentalLicence attractionCarRentalLicence =
			(AttractionCarRentalLicence)object;

		long primaryKey = attractionCarRentalLicence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionCarRentalLicence> toCacheModel() {
		AttractionCarRentalLicenceCacheModel
			attractionCarRentalLicenceCacheModel =
				new AttractionCarRentalLicenceCacheModel();

		attractionCarRentalLicenceCacheModel.attractionCarRentalLicId =
			getAttractionCarRentalLicId();

		attractionCarRentalLicenceCacheModel.groupId = getGroupId();

		attractionCarRentalLicenceCacheModel.companyId = getCompanyId();

		attractionCarRentalLicenceCacheModel.userId = getUserId();

		attractionCarRentalLicenceCacheModel.userName = getUserName();

		String userName = attractionCarRentalLicenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionCarRentalLicenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionCarRentalLicenceCacheModel.createDate =
				createDate.getTime();
		}
		else {
			attractionCarRentalLicenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionCarRentalLicenceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionCarRentalLicenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionCarRentalLicenceCacheModel.ncrApplicantName =
			getNcrApplicantName();

		String ncrApplicantName =
			attractionCarRentalLicenceCacheModel.ncrApplicantName;

		if ((ncrApplicantName != null) && (ncrApplicantName.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrApplicantName = null;
		}

		attractionCarRentalLicenceCacheModel.ncrAddress = getNcrAddress();

		String ncrAddress = attractionCarRentalLicenceCacheModel.ncrAddress;

		if ((ncrAddress != null) && (ncrAddress.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrAddress = null;
		}

		attractionCarRentalLicenceCacheModel.ncrCompanyName =
			getNcrCompanyName();

		String ncrCompanyName =
			attractionCarRentalLicenceCacheModel.ncrCompanyName;

		if ((ncrCompanyName != null) && (ncrCompanyName.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrCompanyName = null;
		}

		attractionCarRentalLicenceCacheModel.ncrCompanyAddr =
			getNcrCompanyAddr();

		String ncrCompanyAddr =
			attractionCarRentalLicenceCacheModel.ncrCompanyAddr;

		if ((ncrCompanyAddr != null) && (ncrCompanyAddr.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrCompanyAddr = null;
		}

		attractionCarRentalLicenceCacheModel.ncrTelephone = getNcrTelephone();

		String ncrTelephone = attractionCarRentalLicenceCacheModel.ncrTelephone;

		if ((ncrTelephone != null) && (ncrTelephone.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrTelephone = null;
		}

		attractionCarRentalLicenceCacheModel.ncrEmail = getNcrEmail();

		String ncrEmail = attractionCarRentalLicenceCacheModel.ncrEmail;

		if ((ncrEmail != null) && (ncrEmail.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrEmail = null;
		}

		attractionCarRentalLicenceCacheModel.ncrManagerName =
			getNcrManagerName();

		String ncrManagerName =
			attractionCarRentalLicenceCacheModel.ncrManagerName;

		if ((ncrManagerName != null) && (ncrManagerName.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrManagerName = null;
		}

		Date ncrDate = getNcrDate();

		if (ncrDate != null) {
			attractionCarRentalLicenceCacheModel.ncrDate = ncrDate.getTime();
		}
		else {
			attractionCarRentalLicenceCacheModel.ncrDate = Long.MIN_VALUE;
		}

		attractionCarRentalLicenceCacheModel.ncrVehiclesNo = getNcrVehiclesNo();

		String ncrVehiclesNo =
			attractionCarRentalLicenceCacheModel.ncrVehiclesNo;

		if ((ncrVehiclesNo != null) && (ncrVehiclesNo.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrVehiclesNo = null;
		}

		attractionCarRentalLicenceCacheModel.ncrEmployeesNo =
			getNcrEmployeesNo();

		String ncrEmployeesNo =
			attractionCarRentalLicenceCacheModel.ncrEmployeesNo;

		if ((ncrEmployeesNo != null) && (ncrEmployeesNo.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrEmployeesNo = null;
		}

		attractionCarRentalLicenceCacheModel.ncrOfficeLoc = getNcrOfficeLoc();

		String ncrOfficeLoc = attractionCarRentalLicenceCacheModel.ncrOfficeLoc;

		if ((ncrOfficeLoc != null) && (ncrOfficeLoc.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrOfficeLoc = null;
		}

		attractionCarRentalLicenceCacheModel.ncrPosition = getNcrPosition();

		String ncrPosition = attractionCarRentalLicenceCacheModel.ncrPosition;

		if ((ncrPosition != null) && (ncrPosition.length() == 0)) {
			attractionCarRentalLicenceCacheModel.ncrPosition = null;
		}

		Date ncrSignDate = getNcrSignDate();

		if (ncrSignDate != null) {
			attractionCarRentalLicenceCacheModel.ncrSignDate =
				ncrSignDate.getTime();
		}
		else {
			attractionCarRentalLicenceCacheModel.ncrSignDate = Long.MIN_VALUE;
		}

		attractionCarRentalLicenceCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionCarRentalLicenceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionCarRentalLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionCarRentalLicence, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionCarRentalLicence, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionCarRentalLicence)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionCarRentalLicence>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AttractionCarRentalLicence.class, ModelWrapper.class);

	}

	private long _attractionCarRentalLicId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _ncrApplicantName;
	private String _ncrAddress;
	private String _ncrCompanyName;
	private String _ncrCompanyAddr;
	private String _ncrTelephone;
	private String _ncrEmail;
	private String _ncrManagerName;
	private Date _ncrDate;
	private String _ncrVehiclesNo;
	private String _ncrEmployeesNo;
	private String _ncrOfficeLoc;
	private String _ncrPosition;
	private Date _ncrSignDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionCarRentalLicence, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionCarRentalLicence)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionCarRentalLicId", _attractionCarRentalLicId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("ncrApplicantName", _ncrApplicantName);
		_columnOriginalValues.put("ncrAddress", _ncrAddress);
		_columnOriginalValues.put("ncrCompanyName", _ncrCompanyName);
		_columnOriginalValues.put("ncrCompanyAddr", _ncrCompanyAddr);
		_columnOriginalValues.put("ncrTelephone", _ncrTelephone);
		_columnOriginalValues.put("ncrEmail", _ncrEmail);
		_columnOriginalValues.put("ncrManagerName", _ncrManagerName);
		_columnOriginalValues.put("ncrDate", _ncrDate);
		_columnOriginalValues.put("ncrVehiclesNo", _ncrVehiclesNo);
		_columnOriginalValues.put("ncrEmployeesNo", _ncrEmployeesNo);
		_columnOriginalValues.put("ncrOfficeLoc", _ncrOfficeLoc);
		_columnOriginalValues.put("ncrPosition", _ncrPosition);
		_columnOriginalValues.put("ncrSignDate", _ncrSignDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionCarRentalLicId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("ncrApplicantName", 128L);

		columnBitmasks.put("ncrAddress", 256L);

		columnBitmasks.put("ncrCompanyName", 512L);

		columnBitmasks.put("ncrCompanyAddr", 1024L);

		columnBitmasks.put("ncrTelephone", 2048L);

		columnBitmasks.put("ncrEmail", 4096L);

		columnBitmasks.put("ncrManagerName", 8192L);

		columnBitmasks.put("ncrDate", 16384L);

		columnBitmasks.put("ncrVehiclesNo", 32768L);

		columnBitmasks.put("ncrEmployeesNo", 65536L);

		columnBitmasks.put("ncrOfficeLoc", 131072L);

		columnBitmasks.put("ncrPosition", 262144L);

		columnBitmasks.put("ncrSignDate", 524288L);

		columnBitmasks.put("jtbApplicationId", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionCarRentalLicence _escapedModel;

}