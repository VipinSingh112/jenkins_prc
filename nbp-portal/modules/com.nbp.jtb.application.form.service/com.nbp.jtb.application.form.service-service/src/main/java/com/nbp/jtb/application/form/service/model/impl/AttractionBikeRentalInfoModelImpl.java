/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionBikeRentalInfo;
import com.nbp.jtb.application.form.service.model.AttractionBikeRentalInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionBikeRentalInfo service. Represents a row in the &quot;nbp_jtb_bike_rental&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionBikeRentalInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionBikeRentalInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionBikeRentalInfoImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionBikeRentalInfoModelImpl
	extends BaseModelImpl<AttractionBikeRentalInfo>
	implements AttractionBikeRentalInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction bike rental info model instance should use the <code>AttractionBikeRentalInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_bike_rental";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionBikeRentalInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"applicantName", Types.VARCHAR},
		{"address", Types.VARCHAR}, {"companyName", Types.VARCHAR},
		{"exactLocation", Types.VARCHAR}, {"telephone", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"registrationDate", Types.TIMESTAMP},
		{"managerName", Types.VARCHAR}, {"numberOfBikes", Types.VARCHAR},
		{"numberOfHelmets", Types.VARCHAR},
		{"numberOfEmployees", Types.VARCHAR},
		{"signatureDate", Types.TIMESTAMP},
		{"motorBikeIndustry", Types.VARCHAR}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionBikeRentalInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exactLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("managerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfBikes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfHelmets", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfEmployees", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatureDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("motorBikeIndustry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_bike_rental (attractionBikeRentalInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicantName VARCHAR(75) null,address VARCHAR(500) null,companyName VARCHAR(75) null,exactLocation VARCHAR(500) null,telephone VARCHAR(75) null,email VARCHAR(75) null,registrationDate DATE null,managerName VARCHAR(75) null,numberOfBikes VARCHAR(75) null,numberOfHelmets VARCHAR(75) null,numberOfEmployees VARCHAR(75) null,signatureDate DATE null,motorBikeIndustry VARCHAR(2000) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_bike_rental";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionBikeRentalInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_bike_rental.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionBikeRentalInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionBikeRentalInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionBikeRentalInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionBikeRentalInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionBikeRentalInfo.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionBikeRentalInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionBikeRentalInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionBikeRentalInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionBikeRentalInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionBikeRentalInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionBikeRentalInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionBikeRentalInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionBikeRentalInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionBikeRentalInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionBikeRentalInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionBikeRentalInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionBikeRentalInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionBikeRentalInfo, Object>>();

			attributeGetterFunctions.put(
				"attractionBikeRentalInfoId",
				AttractionBikeRentalInfo::getAttractionBikeRentalInfoId);
			attributeGetterFunctions.put(
				"groupId", AttractionBikeRentalInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionBikeRentalInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionBikeRentalInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionBikeRentalInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionBikeRentalInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionBikeRentalInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"applicantName", AttractionBikeRentalInfo::getApplicantName);
			attributeGetterFunctions.put(
				"address", AttractionBikeRentalInfo::getAddress);
			attributeGetterFunctions.put(
				"companyName", AttractionBikeRentalInfo::getCompanyName);
			attributeGetterFunctions.put(
				"exactLocation", AttractionBikeRentalInfo::getExactLocation);
			attributeGetterFunctions.put(
				"telephone", AttractionBikeRentalInfo::getTelephone);
			attributeGetterFunctions.put(
				"email", AttractionBikeRentalInfo::getEmail);
			attributeGetterFunctions.put(
				"registrationDate",
				AttractionBikeRentalInfo::getRegistrationDate);
			attributeGetterFunctions.put(
				"managerName", AttractionBikeRentalInfo::getManagerName);
			attributeGetterFunctions.put(
				"numberOfBikes", AttractionBikeRentalInfo::getNumberOfBikes);
			attributeGetterFunctions.put(
				"numberOfHelmets",
				AttractionBikeRentalInfo::getNumberOfHelmets);
			attributeGetterFunctions.put(
				"numberOfEmployees",
				AttractionBikeRentalInfo::getNumberOfEmployees);
			attributeGetterFunctions.put(
				"signatureDate", AttractionBikeRentalInfo::getSignatureDate);
			attributeGetterFunctions.put(
				"motorBikeIndustry",
				AttractionBikeRentalInfo::getMotorBikeIndustry);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionBikeRentalInfo::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionBikeRentalInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionBikeRentalInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionBikeRentalInfo, ?>>();

			attributeSetterBiConsumers.put(
				"attractionBikeRentalInfoId",
				(BiConsumer<AttractionBikeRentalInfo, Long>)
					AttractionBikeRentalInfo::setAttractionBikeRentalInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionBikeRentalInfo, Long>)
					AttractionBikeRentalInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionBikeRentalInfo, Long>)
					AttractionBikeRentalInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionBikeRentalInfo, Long>)
					AttractionBikeRentalInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionBikeRentalInfo, Date>)
					AttractionBikeRentalInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionBikeRentalInfo, Date>)
					AttractionBikeRentalInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicantName",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setApplicantName);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setAddress);
			attributeSetterBiConsumers.put(
				"companyName",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setCompanyName);
			attributeSetterBiConsumers.put(
				"exactLocation",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setExactLocation);
			attributeSetterBiConsumers.put(
				"telephone",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setTelephone);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setEmail);
			attributeSetterBiConsumers.put(
				"registrationDate",
				(BiConsumer<AttractionBikeRentalInfo, Date>)
					AttractionBikeRentalInfo::setRegistrationDate);
			attributeSetterBiConsumers.put(
				"managerName",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setManagerName);
			attributeSetterBiConsumers.put(
				"numberOfBikes",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setNumberOfBikes);
			attributeSetterBiConsumers.put(
				"numberOfHelmets",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setNumberOfHelmets);
			attributeSetterBiConsumers.put(
				"numberOfEmployees",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setNumberOfEmployees);
			attributeSetterBiConsumers.put(
				"signatureDate",
				(BiConsumer<AttractionBikeRentalInfo, Date>)
					AttractionBikeRentalInfo::setSignatureDate);
			attributeSetterBiConsumers.put(
				"motorBikeIndustry",
				(BiConsumer<AttractionBikeRentalInfo, String>)
					AttractionBikeRentalInfo::setMotorBikeIndustry);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionBikeRentalInfo, Long>)
					AttractionBikeRentalInfo::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionBikeRentalInfoId() {
		return _attractionBikeRentalInfoId;
	}

	@Override
	public void setAttractionBikeRentalInfoId(long attractionBikeRentalInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionBikeRentalInfoId = attractionBikeRentalInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	@JSON
	@Override
	public String getExactLocation() {
		if (_exactLocation == null) {
			return "";
		}
		else {
			return _exactLocation;
		}
	}

	@Override
	public void setExactLocation(String exactLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exactLocation = exactLocation;
	}

	@JSON
	@Override
	public String getTelephone() {
		if (_telephone == null) {
			return "";
		}
		else {
			return _telephone;
		}
	}

	@Override
	public void setTelephone(String telephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone = telephone;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public Date getRegistrationDate() {
		return _registrationDate;
	}

	@Override
	public void setRegistrationDate(Date registrationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registrationDate = registrationDate;
	}

	@JSON
	@Override
	public String getManagerName() {
		if (_managerName == null) {
			return "";
		}
		else {
			return _managerName;
		}
	}

	@Override
	public void setManagerName(String managerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerName = managerName;
	}

	@JSON
	@Override
	public String getNumberOfBikes() {
		if (_numberOfBikes == null) {
			return "";
		}
		else {
			return _numberOfBikes;
		}
	}

	@Override
	public void setNumberOfBikes(String numberOfBikes) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfBikes = numberOfBikes;
	}

	@JSON
	@Override
	public String getNumberOfHelmets() {
		if (_numberOfHelmets == null) {
			return "";
		}
		else {
			return _numberOfHelmets;
		}
	}

	@Override
	public void setNumberOfHelmets(String numberOfHelmets) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfHelmets = numberOfHelmets;
	}

	@JSON
	@Override
	public String getNumberOfEmployees() {
		if (_numberOfEmployees == null) {
			return "";
		}
		else {
			return _numberOfEmployees;
		}
	}

	@Override
	public void setNumberOfEmployees(String numberOfEmployees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfEmployees = numberOfEmployees;
	}

	@JSON
	@Override
	public Date getSignatureDate() {
		return _signatureDate;
	}

	@Override
	public void setSignatureDate(Date signatureDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatureDate = signatureDate;
	}

	@JSON
	@Override
	public String getMotorBikeIndustry() {
		if (_motorBikeIndustry == null) {
			return "";
		}
		else {
			return _motorBikeIndustry;
		}
	}

	@Override
	public void setMotorBikeIndustry(String motorBikeIndustry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_motorBikeIndustry = motorBikeIndustry;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionBikeRentalInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionBikeRentalInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionBikeRentalInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionBikeRentalInfoImpl attractionBikeRentalInfoImpl =
			new AttractionBikeRentalInfoImpl();

		attractionBikeRentalInfoImpl.setAttractionBikeRentalInfoId(
			getAttractionBikeRentalInfoId());
		attractionBikeRentalInfoImpl.setGroupId(getGroupId());
		attractionBikeRentalInfoImpl.setCompanyId(getCompanyId());
		attractionBikeRentalInfoImpl.setUserId(getUserId());
		attractionBikeRentalInfoImpl.setUserName(getUserName());
		attractionBikeRentalInfoImpl.setCreateDate(getCreateDate());
		attractionBikeRentalInfoImpl.setModifiedDate(getModifiedDate());
		attractionBikeRentalInfoImpl.setApplicantName(getApplicantName());
		attractionBikeRentalInfoImpl.setAddress(getAddress());
		attractionBikeRentalInfoImpl.setCompanyName(getCompanyName());
		attractionBikeRentalInfoImpl.setExactLocation(getExactLocation());
		attractionBikeRentalInfoImpl.setTelephone(getTelephone());
		attractionBikeRentalInfoImpl.setEmail(getEmail());
		attractionBikeRentalInfoImpl.setRegistrationDate(getRegistrationDate());
		attractionBikeRentalInfoImpl.setManagerName(getManagerName());
		attractionBikeRentalInfoImpl.setNumberOfBikes(getNumberOfBikes());
		attractionBikeRentalInfoImpl.setNumberOfHelmets(getNumberOfHelmets());
		attractionBikeRentalInfoImpl.setNumberOfEmployees(
			getNumberOfEmployees());
		attractionBikeRentalInfoImpl.setSignatureDate(getSignatureDate());
		attractionBikeRentalInfoImpl.setMotorBikeIndustry(
			getMotorBikeIndustry());
		attractionBikeRentalInfoImpl.setJtbApplicationId(getJtbApplicationId());

		attractionBikeRentalInfoImpl.resetOriginalValues();

		return attractionBikeRentalInfoImpl;
	}

	@Override
	public AttractionBikeRentalInfo cloneWithOriginalValues() {
		AttractionBikeRentalInfoImpl attractionBikeRentalInfoImpl =
			new AttractionBikeRentalInfoImpl();

		attractionBikeRentalInfoImpl.setAttractionBikeRentalInfoId(
			this.<Long>getColumnOriginalValue("attractionBikeRentalInfoId"));
		attractionBikeRentalInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionBikeRentalInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionBikeRentalInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionBikeRentalInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionBikeRentalInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionBikeRentalInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionBikeRentalInfoImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		attractionBikeRentalInfoImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		attractionBikeRentalInfoImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		attractionBikeRentalInfoImpl.setExactLocation(
			this.<String>getColumnOriginalValue("exactLocation"));
		attractionBikeRentalInfoImpl.setTelephone(
			this.<String>getColumnOriginalValue("telephone"));
		attractionBikeRentalInfoImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		attractionBikeRentalInfoImpl.setRegistrationDate(
			this.<Date>getColumnOriginalValue("registrationDate"));
		attractionBikeRentalInfoImpl.setManagerName(
			this.<String>getColumnOriginalValue("managerName"));
		attractionBikeRentalInfoImpl.setNumberOfBikes(
			this.<String>getColumnOriginalValue("numberOfBikes"));
		attractionBikeRentalInfoImpl.setNumberOfHelmets(
			this.<String>getColumnOriginalValue("numberOfHelmets"));
		attractionBikeRentalInfoImpl.setNumberOfEmployees(
			this.<String>getColumnOriginalValue("numberOfEmployees"));
		attractionBikeRentalInfoImpl.setSignatureDate(
			this.<Date>getColumnOriginalValue("signatureDate"));
		attractionBikeRentalInfoImpl.setMotorBikeIndustry(
			this.<String>getColumnOriginalValue("motorBikeIndustry"));
		attractionBikeRentalInfoImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionBikeRentalInfoImpl;
	}

	@Override
	public int compareTo(AttractionBikeRentalInfo attractionBikeRentalInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionBikeRentalInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionBikeRentalInfo)) {
			return false;
		}

		AttractionBikeRentalInfo attractionBikeRentalInfo =
			(AttractionBikeRentalInfo)object;

		long primaryKey = attractionBikeRentalInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionBikeRentalInfo> toCacheModel() {
		AttractionBikeRentalInfoCacheModel attractionBikeRentalInfoCacheModel =
			new AttractionBikeRentalInfoCacheModel();

		attractionBikeRentalInfoCacheModel.attractionBikeRentalInfoId =
			getAttractionBikeRentalInfoId();

		attractionBikeRentalInfoCacheModel.groupId = getGroupId();

		attractionBikeRentalInfoCacheModel.companyId = getCompanyId();

		attractionBikeRentalInfoCacheModel.userId = getUserId();

		attractionBikeRentalInfoCacheModel.userName = getUserName();

		String userName = attractionBikeRentalInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionBikeRentalInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionBikeRentalInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			attractionBikeRentalInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionBikeRentalInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionBikeRentalInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionBikeRentalInfoCacheModel.applicantName = getApplicantName();

		String applicantName = attractionBikeRentalInfoCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			attractionBikeRentalInfoCacheModel.applicantName = null;
		}

		attractionBikeRentalInfoCacheModel.address = getAddress();

		String address = attractionBikeRentalInfoCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			attractionBikeRentalInfoCacheModel.address = null;
		}

		attractionBikeRentalInfoCacheModel.companyName = getCompanyName();

		String companyName = attractionBikeRentalInfoCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			attractionBikeRentalInfoCacheModel.companyName = null;
		}

		attractionBikeRentalInfoCacheModel.exactLocation = getExactLocation();

		String exactLocation = attractionBikeRentalInfoCacheModel.exactLocation;

		if ((exactLocation != null) && (exactLocation.length() == 0)) {
			attractionBikeRentalInfoCacheModel.exactLocation = null;
		}

		attractionBikeRentalInfoCacheModel.telephone = getTelephone();

		String telephone = attractionBikeRentalInfoCacheModel.telephone;

		if ((telephone != null) && (telephone.length() == 0)) {
			attractionBikeRentalInfoCacheModel.telephone = null;
		}

		attractionBikeRentalInfoCacheModel.email = getEmail();

		String email = attractionBikeRentalInfoCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			attractionBikeRentalInfoCacheModel.email = null;
		}

		Date registrationDate = getRegistrationDate();

		if (registrationDate != null) {
			attractionBikeRentalInfoCacheModel.registrationDate =
				registrationDate.getTime();
		}
		else {
			attractionBikeRentalInfoCacheModel.registrationDate =
				Long.MIN_VALUE;
		}

		attractionBikeRentalInfoCacheModel.managerName = getManagerName();

		String managerName = attractionBikeRentalInfoCacheModel.managerName;

		if ((managerName != null) && (managerName.length() == 0)) {
			attractionBikeRentalInfoCacheModel.managerName = null;
		}

		attractionBikeRentalInfoCacheModel.numberOfBikes = getNumberOfBikes();

		String numberOfBikes = attractionBikeRentalInfoCacheModel.numberOfBikes;

		if ((numberOfBikes != null) && (numberOfBikes.length() == 0)) {
			attractionBikeRentalInfoCacheModel.numberOfBikes = null;
		}

		attractionBikeRentalInfoCacheModel.numberOfHelmets =
			getNumberOfHelmets();

		String numberOfHelmets =
			attractionBikeRentalInfoCacheModel.numberOfHelmets;

		if ((numberOfHelmets != null) && (numberOfHelmets.length() == 0)) {
			attractionBikeRentalInfoCacheModel.numberOfHelmets = null;
		}

		attractionBikeRentalInfoCacheModel.numberOfEmployees =
			getNumberOfEmployees();

		String numberOfEmployees =
			attractionBikeRentalInfoCacheModel.numberOfEmployees;

		if ((numberOfEmployees != null) && (numberOfEmployees.length() == 0)) {
			attractionBikeRentalInfoCacheModel.numberOfEmployees = null;
		}

		Date signatureDate = getSignatureDate();

		if (signatureDate != null) {
			attractionBikeRentalInfoCacheModel.signatureDate =
				signatureDate.getTime();
		}
		else {
			attractionBikeRentalInfoCacheModel.signatureDate = Long.MIN_VALUE;
		}

		attractionBikeRentalInfoCacheModel.motorBikeIndustry =
			getMotorBikeIndustry();

		String motorBikeIndustry =
			attractionBikeRentalInfoCacheModel.motorBikeIndustry;

		if ((motorBikeIndustry != null) && (motorBikeIndustry.length() == 0)) {
			attractionBikeRentalInfoCacheModel.motorBikeIndustry = null;
		}

		attractionBikeRentalInfoCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionBikeRentalInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionBikeRentalInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionBikeRentalInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionBikeRentalInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionBikeRentalInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionBikeRentalInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AttractionBikeRentalInfo.class, ModelWrapper.class);

	}

	private long _attractionBikeRentalInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicantName;
	private String _address;
	private String _companyName;
	private String _exactLocation;
	private String _telephone;
	private String _email;
	private Date _registrationDate;
	private String _managerName;
	private String _numberOfBikes;
	private String _numberOfHelmets;
	private String _numberOfEmployees;
	private Date _signatureDate;
	private String _motorBikeIndustry;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionBikeRentalInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionBikeRentalInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionBikeRentalInfoId", _attractionBikeRentalInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("exactLocation", _exactLocation);
		_columnOriginalValues.put("telephone", _telephone);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("registrationDate", _registrationDate);
		_columnOriginalValues.put("managerName", _managerName);
		_columnOriginalValues.put("numberOfBikes", _numberOfBikes);
		_columnOriginalValues.put("numberOfHelmets", _numberOfHelmets);
		_columnOriginalValues.put("numberOfEmployees", _numberOfEmployees);
		_columnOriginalValues.put("signatureDate", _signatureDate);
		_columnOriginalValues.put("motorBikeIndustry", _motorBikeIndustry);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionBikeRentalInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("applicantName", 128L);

		columnBitmasks.put("address", 256L);

		columnBitmasks.put("companyName", 512L);

		columnBitmasks.put("exactLocation", 1024L);

		columnBitmasks.put("telephone", 2048L);

		columnBitmasks.put("email", 4096L);

		columnBitmasks.put("registrationDate", 8192L);

		columnBitmasks.put("managerName", 16384L);

		columnBitmasks.put("numberOfBikes", 32768L);

		columnBitmasks.put("numberOfHelmets", 65536L);

		columnBitmasks.put("numberOfEmployees", 131072L);

		columnBitmasks.put("signatureDate", 262144L);

		columnBitmasks.put("motorBikeIndustry", 524288L);

		columnBitmasks.put("jtbApplicationId", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionBikeRentalInfo _escapedModel;

}