/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionConCarriageInfo;
import com.nbp.jtb.application.form.service.model.AttractionConCarriageInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionConCarriageInfo service. Represents a row in the &quot;nbp_jtb_contract_carriage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionConCarriageInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionConCarriageInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionConCarriageInfoImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionConCarriageInfoModelImpl
	extends BaseModelImpl<AttractionConCarriageInfo>
	implements AttractionConCarriageInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction con carriage info model instance should use the <code>AttractionConCarriageInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_contract_carriage";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionConCarriageInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"ownerName", Types.VARCHAR}, {"homeAddress", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"telephone", Types.VARCHAR},
		{"parish", Types.VARCHAR}, {"newContractDate", Types.TIMESTAMP},
		{"newContarctVehiclesNo", Types.VARCHAR},
		{"newContractTrn", Types.VARCHAR},
		{"contractOrganization", Types.VARCHAR},
		{"ownerSignDate", Types.TIMESTAMP}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionConCarriageInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ownerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newContractDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("newContarctVehiclesNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newContractTrn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractOrganization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerSignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_contract_carriage (attractionConCarriageInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,ownerName VARCHAR(75) null,homeAddress VARCHAR(500) null,email VARCHAR(75) null,telephone VARCHAR(75) null,parish VARCHAR(75) null,newContractDate DATE null,newContarctVehiclesNo VARCHAR(75) null,newContractTrn VARCHAR(75) null,contractOrganization VARCHAR(75) null,ownerSignDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_contract_carriage";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionConCarriageInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_contract_carriage.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionConCarriageInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionConCarriageInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionConCarriageInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionConCarriageInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionConCarriageInfo.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionConCarriageInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionConCarriageInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionConCarriageInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionConCarriageInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionConCarriageInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionConCarriageInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionConCarriageInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionConCarriageInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionConCarriageInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionConCarriageInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionConCarriageInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionConCarriageInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionConCarriageInfo, Object>>();

			attributeGetterFunctions.put(
				"attractionConCarriageInfoId",
				AttractionConCarriageInfo::getAttractionConCarriageInfoId);
			attributeGetterFunctions.put(
				"groupId", AttractionConCarriageInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionConCarriageInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionConCarriageInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionConCarriageInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionConCarriageInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionConCarriageInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"ownerName", AttractionConCarriageInfo::getOwnerName);
			attributeGetterFunctions.put(
				"homeAddress", AttractionConCarriageInfo::getHomeAddress);
			attributeGetterFunctions.put(
				"email", AttractionConCarriageInfo::getEmail);
			attributeGetterFunctions.put(
				"telephone", AttractionConCarriageInfo::getTelephone);
			attributeGetterFunctions.put(
				"parish", AttractionConCarriageInfo::getParish);
			attributeGetterFunctions.put(
				"newContractDate",
				AttractionConCarriageInfo::getNewContractDate);
			attributeGetterFunctions.put(
				"newContarctVehiclesNo",
				AttractionConCarriageInfo::getNewContarctVehiclesNo);
			attributeGetterFunctions.put(
				"newContractTrn", AttractionConCarriageInfo::getNewContractTrn);
			attributeGetterFunctions.put(
				"contractOrganization",
				AttractionConCarriageInfo::getContractOrganization);
			attributeGetterFunctions.put(
				"ownerSignDate", AttractionConCarriageInfo::getOwnerSignDate);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionConCarriageInfo::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionConCarriageInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionConCarriageInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionConCarriageInfo, ?>>();

			attributeSetterBiConsumers.put(
				"attractionConCarriageInfoId",
				(BiConsumer<AttractionConCarriageInfo, Long>)
					AttractionConCarriageInfo::setAttractionConCarriageInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionConCarriageInfo, Long>)
					AttractionConCarriageInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionConCarriageInfo, Long>)
					AttractionConCarriageInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionConCarriageInfo, Long>)
					AttractionConCarriageInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionConCarriageInfo, Date>)
					AttractionConCarriageInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionConCarriageInfo, Date>)
					AttractionConCarriageInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"ownerName",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setOwnerName);
			attributeSetterBiConsumers.put(
				"homeAddress",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setHomeAddress);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setEmail);
			attributeSetterBiConsumers.put(
				"telephone",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setTelephone);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setParish);
			attributeSetterBiConsumers.put(
				"newContractDate",
				(BiConsumer<AttractionConCarriageInfo, Date>)
					AttractionConCarriageInfo::setNewContractDate);
			attributeSetterBiConsumers.put(
				"newContarctVehiclesNo",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setNewContarctVehiclesNo);
			attributeSetterBiConsumers.put(
				"newContractTrn",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setNewContractTrn);
			attributeSetterBiConsumers.put(
				"contractOrganization",
				(BiConsumer<AttractionConCarriageInfo, String>)
					AttractionConCarriageInfo::setContractOrganization);
			attributeSetterBiConsumers.put(
				"ownerSignDate",
				(BiConsumer<AttractionConCarriageInfo, Date>)
					AttractionConCarriageInfo::setOwnerSignDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionConCarriageInfo, Long>)
					AttractionConCarriageInfo::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionConCarriageInfoId() {
		return _attractionConCarriageInfoId;
	}

	@Override
	public void setAttractionConCarriageInfoId(
		long attractionConCarriageInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionConCarriageInfoId = attractionConCarriageInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOwnerName() {
		if (_ownerName == null) {
			return "";
		}
		else {
			return _ownerName;
		}
	}

	@Override
	public void setOwnerName(String ownerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerName = ownerName;
	}

	@JSON
	@Override
	public String getHomeAddress() {
		if (_homeAddress == null) {
			return "";
		}
		else {
			return _homeAddress;
		}
	}

	@Override
	public void setHomeAddress(String homeAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeAddress = homeAddress;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getTelephone() {
		if (_telephone == null) {
			return "";
		}
		else {
			return _telephone;
		}
	}

	@Override
	public void setTelephone(String telephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone = telephone;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public Date getNewContractDate() {
		return _newContractDate;
	}

	@Override
	public void setNewContractDate(Date newContractDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newContractDate = newContractDate;
	}

	@JSON
	@Override
	public String getNewContarctVehiclesNo() {
		if (_newContarctVehiclesNo == null) {
			return "";
		}
		else {
			return _newContarctVehiclesNo;
		}
	}

	@Override
	public void setNewContarctVehiclesNo(String newContarctVehiclesNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newContarctVehiclesNo = newContarctVehiclesNo;
	}

	@JSON
	@Override
	public String getNewContractTrn() {
		if (_newContractTrn == null) {
			return "";
		}
		else {
			return _newContractTrn;
		}
	}

	@Override
	public void setNewContractTrn(String newContractTrn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newContractTrn = newContractTrn;
	}

	@JSON
	@Override
	public String getContractOrganization() {
		if (_contractOrganization == null) {
			return "";
		}
		else {
			return _contractOrganization;
		}
	}

	@Override
	public void setContractOrganization(String contractOrganization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contractOrganization = contractOrganization;
	}

	@JSON
	@Override
	public Date getOwnerSignDate() {
		return _ownerSignDate;
	}

	@Override
	public void setOwnerSignDate(Date ownerSignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerSignDate = ownerSignDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionConCarriageInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionConCarriageInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionConCarriageInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionConCarriageInfoImpl attractionConCarriageInfoImpl =
			new AttractionConCarriageInfoImpl();

		attractionConCarriageInfoImpl.setAttractionConCarriageInfoId(
			getAttractionConCarriageInfoId());
		attractionConCarriageInfoImpl.setGroupId(getGroupId());
		attractionConCarriageInfoImpl.setCompanyId(getCompanyId());
		attractionConCarriageInfoImpl.setUserId(getUserId());
		attractionConCarriageInfoImpl.setUserName(getUserName());
		attractionConCarriageInfoImpl.setCreateDate(getCreateDate());
		attractionConCarriageInfoImpl.setModifiedDate(getModifiedDate());
		attractionConCarriageInfoImpl.setOwnerName(getOwnerName());
		attractionConCarriageInfoImpl.setHomeAddress(getHomeAddress());
		attractionConCarriageInfoImpl.setEmail(getEmail());
		attractionConCarriageInfoImpl.setTelephone(getTelephone());
		attractionConCarriageInfoImpl.setParish(getParish());
		attractionConCarriageInfoImpl.setNewContractDate(getNewContractDate());
		attractionConCarriageInfoImpl.setNewContarctVehiclesNo(
			getNewContarctVehiclesNo());
		attractionConCarriageInfoImpl.setNewContractTrn(getNewContractTrn());
		attractionConCarriageInfoImpl.setContractOrganization(
			getContractOrganization());
		attractionConCarriageInfoImpl.setOwnerSignDate(getOwnerSignDate());
		attractionConCarriageInfoImpl.setJtbApplicationId(
			getJtbApplicationId());

		attractionConCarriageInfoImpl.resetOriginalValues();

		return attractionConCarriageInfoImpl;
	}

	@Override
	public AttractionConCarriageInfo cloneWithOriginalValues() {
		AttractionConCarriageInfoImpl attractionConCarriageInfoImpl =
			new AttractionConCarriageInfoImpl();

		attractionConCarriageInfoImpl.setAttractionConCarriageInfoId(
			this.<Long>getColumnOriginalValue("attractionConCarriageInfoId"));
		attractionConCarriageInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionConCarriageInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionConCarriageInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionConCarriageInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionConCarriageInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionConCarriageInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionConCarriageInfoImpl.setOwnerName(
			this.<String>getColumnOriginalValue("ownerName"));
		attractionConCarriageInfoImpl.setHomeAddress(
			this.<String>getColumnOriginalValue("homeAddress"));
		attractionConCarriageInfoImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		attractionConCarriageInfoImpl.setTelephone(
			this.<String>getColumnOriginalValue("telephone"));
		attractionConCarriageInfoImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		attractionConCarriageInfoImpl.setNewContractDate(
			this.<Date>getColumnOriginalValue("newContractDate"));
		attractionConCarriageInfoImpl.setNewContarctVehiclesNo(
			this.<String>getColumnOriginalValue("newContarctVehiclesNo"));
		attractionConCarriageInfoImpl.setNewContractTrn(
			this.<String>getColumnOriginalValue("newContractTrn"));
		attractionConCarriageInfoImpl.setContractOrganization(
			this.<String>getColumnOriginalValue("contractOrganization"));
		attractionConCarriageInfoImpl.setOwnerSignDate(
			this.<Date>getColumnOriginalValue("ownerSignDate"));
		attractionConCarriageInfoImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionConCarriageInfoImpl;
	}

	@Override
	public int compareTo(AttractionConCarriageInfo attractionConCarriageInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionConCarriageInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionConCarriageInfo)) {
			return false;
		}

		AttractionConCarriageInfo attractionConCarriageInfo =
			(AttractionConCarriageInfo)object;

		long primaryKey = attractionConCarriageInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionConCarriageInfo> toCacheModel() {
		AttractionConCarriageInfoCacheModel
			attractionConCarriageInfoCacheModel =
				new AttractionConCarriageInfoCacheModel();

		attractionConCarriageInfoCacheModel.attractionConCarriageInfoId =
			getAttractionConCarriageInfoId();

		attractionConCarriageInfoCacheModel.groupId = getGroupId();

		attractionConCarriageInfoCacheModel.companyId = getCompanyId();

		attractionConCarriageInfoCacheModel.userId = getUserId();

		attractionConCarriageInfoCacheModel.userName = getUserName();

		String userName = attractionConCarriageInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionConCarriageInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionConCarriageInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			attractionConCarriageInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionConCarriageInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionConCarriageInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionConCarriageInfoCacheModel.ownerName = getOwnerName();

		String ownerName = attractionConCarriageInfoCacheModel.ownerName;

		if ((ownerName != null) && (ownerName.length() == 0)) {
			attractionConCarriageInfoCacheModel.ownerName = null;
		}

		attractionConCarriageInfoCacheModel.homeAddress = getHomeAddress();

		String homeAddress = attractionConCarriageInfoCacheModel.homeAddress;

		if ((homeAddress != null) && (homeAddress.length() == 0)) {
			attractionConCarriageInfoCacheModel.homeAddress = null;
		}

		attractionConCarriageInfoCacheModel.email = getEmail();

		String email = attractionConCarriageInfoCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			attractionConCarriageInfoCacheModel.email = null;
		}

		attractionConCarriageInfoCacheModel.telephone = getTelephone();

		String telephone = attractionConCarriageInfoCacheModel.telephone;

		if ((telephone != null) && (telephone.length() == 0)) {
			attractionConCarriageInfoCacheModel.telephone = null;
		}

		attractionConCarriageInfoCacheModel.parish = getParish();

		String parish = attractionConCarriageInfoCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			attractionConCarriageInfoCacheModel.parish = null;
		}

		Date newContractDate = getNewContractDate();

		if (newContractDate != null) {
			attractionConCarriageInfoCacheModel.newContractDate =
				newContractDate.getTime();
		}
		else {
			attractionConCarriageInfoCacheModel.newContractDate =
				Long.MIN_VALUE;
		}

		attractionConCarriageInfoCacheModel.newContarctVehiclesNo =
			getNewContarctVehiclesNo();

		String newContarctVehiclesNo =
			attractionConCarriageInfoCacheModel.newContarctVehiclesNo;

		if ((newContarctVehiclesNo != null) &&
			(newContarctVehiclesNo.length() == 0)) {

			attractionConCarriageInfoCacheModel.newContarctVehiclesNo = null;
		}

		attractionConCarriageInfoCacheModel.newContractTrn =
			getNewContractTrn();

		String newContractTrn =
			attractionConCarriageInfoCacheModel.newContractTrn;

		if ((newContractTrn != null) && (newContractTrn.length() == 0)) {
			attractionConCarriageInfoCacheModel.newContractTrn = null;
		}

		attractionConCarriageInfoCacheModel.contractOrganization =
			getContractOrganization();

		String contractOrganization =
			attractionConCarriageInfoCacheModel.contractOrganization;

		if ((contractOrganization != null) &&
			(contractOrganization.length() == 0)) {

			attractionConCarriageInfoCacheModel.contractOrganization = null;
		}

		Date ownerSignDate = getOwnerSignDate();

		if (ownerSignDate != null) {
			attractionConCarriageInfoCacheModel.ownerSignDate =
				ownerSignDate.getTime();
		}
		else {
			attractionConCarriageInfoCacheModel.ownerSignDate = Long.MIN_VALUE;
		}

		attractionConCarriageInfoCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionConCarriageInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionConCarriageInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionConCarriageInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionConCarriageInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionConCarriageInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionConCarriageInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AttractionConCarriageInfo.class, ModelWrapper.class);

	}

	private long _attractionConCarriageInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _ownerName;
	private String _homeAddress;
	private String _email;
	private String _telephone;
	private String _parish;
	private Date _newContractDate;
	private String _newContarctVehiclesNo;
	private String _newContractTrn;
	private String _contractOrganization;
	private Date _ownerSignDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionConCarriageInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionConCarriageInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionConCarriageInfoId", _attractionConCarriageInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("ownerName", _ownerName);
		_columnOriginalValues.put("homeAddress", _homeAddress);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("telephone", _telephone);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("newContractDate", _newContractDate);
		_columnOriginalValues.put(
			"newContarctVehiclesNo", _newContarctVehiclesNo);
		_columnOriginalValues.put("newContractTrn", _newContractTrn);
		_columnOriginalValues.put(
			"contractOrganization", _contractOrganization);
		_columnOriginalValues.put("ownerSignDate", _ownerSignDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionConCarriageInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("ownerName", 128L);

		columnBitmasks.put("homeAddress", 256L);

		columnBitmasks.put("email", 512L);

		columnBitmasks.put("telephone", 1024L);

		columnBitmasks.put("parish", 2048L);

		columnBitmasks.put("newContractDate", 4096L);

		columnBitmasks.put("newContarctVehiclesNo", 8192L);

		columnBitmasks.put("newContractTrn", 16384L);

		columnBitmasks.put("contractOrganization", 32768L);

		columnBitmasks.put("ownerSignDate", 65536L);

		columnBitmasks.put("jtbApplicationId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionConCarriageInfo _escapedModel;

}