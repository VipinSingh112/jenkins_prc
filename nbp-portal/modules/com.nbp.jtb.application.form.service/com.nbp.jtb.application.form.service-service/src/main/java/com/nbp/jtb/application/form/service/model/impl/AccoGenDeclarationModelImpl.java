/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AccoGenDeclaration;
import com.nbp.jtb.application.form.service.model.AccoGenDeclarationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccoGenDeclaration service. Represents a row in the &quot;nbp_jtb_acco_gen_dec&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccoGenDeclarationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccoGenDeclarationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccoGenDeclarationImpl
 * @generated
 */
@JSON(strict = true)
public class AccoGenDeclarationModelImpl
	extends BaseModelImpl<AccoGenDeclaration>
	implements AccoGenDeclarationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acco gen declaration model instance should use the <code>AccoGenDeclaration</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_acco_gen_dec";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accoGenDeclarationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"noOfBedroom", Types.VARCHAR}, {"ownerOfHotel", Types.VARCHAR},
		{"addressOne", Types.VARCHAR}, {"compIncorporatedOne", Types.VARCHAR},
		{"companyDate", Types.TIMESTAMP}, {"hotelOperator", Types.VARCHAR},
		{"hotelOperatorDateSince", Types.TIMESTAMP},
		{"addressTwo", Types.VARCHAR}, {"compIncorporatedTwo", Types.VARCHAR},
		{"hotelOperatorName", Types.VARCHAR}, {"dateTwo", Types.TIMESTAMP},
		{"hotelIncepDate", Types.TIMESTAMP}, {"financeOfOper", Types.VARCHAR},
		{"noOfEmployee", Types.VARCHAR}, {"signatureDate", Types.TIMESTAMP},
		{"nameOfManager", Types.VARCHAR}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoGenDeclarationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("noOfBedroom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerOfHotel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("compIncorporatedOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hotelOperator", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hotelOperatorDateSince", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("addressTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("compIncorporatedTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hotelOperatorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateTwo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hotelIncepDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("financeOfOper", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noOfEmployee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatureDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nameOfManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_acco_gen_dec (uuid_ VARCHAR(75) null,accoGenDeclarationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,noOfBedroom VARCHAR(75) null,ownerOfHotel VARCHAR(75) null,addressOne VARCHAR(500) null,compIncorporatedOne VARCHAR(75) null,companyDate DATE null,hotelOperator VARCHAR(75) null,hotelOperatorDateSince DATE null,addressTwo VARCHAR(500) null,compIncorporatedTwo VARCHAR(75) null,hotelOperatorName VARCHAR(75) null,dateTwo DATE null,hotelIncepDate DATE null,financeOfOper VARCHAR(75) null,noOfEmployee VARCHAR(75) null,signatureDate DATE null,nameOfManager VARCHAR(75) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_acco_gen_dec";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accoGenDeclaration.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_acco_gen_dec.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccoGenDeclarationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accoGenDeclarationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccoGenDeclarationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accoGenDeclarationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccoGenDeclaration.class;
	}

	@Override
	public String getModelClassName() {
		return AccoGenDeclaration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccoGenDeclaration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccoGenDeclaration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoGenDeclaration, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccoGenDeclaration)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccoGenDeclaration, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccoGenDeclaration, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccoGenDeclaration)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccoGenDeclaration, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccoGenDeclaration, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccoGenDeclaration, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccoGenDeclaration, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccoGenDeclaration, Object>>();

			attributeGetterFunctions.put("uuid", AccoGenDeclaration::getUuid);
			attributeGetterFunctions.put(
				"accoGenDeclarationId",
				AccoGenDeclaration::getAccoGenDeclarationId);
			attributeGetterFunctions.put(
				"groupId", AccoGenDeclaration::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccoGenDeclaration::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccoGenDeclaration::getUserId);
			attributeGetterFunctions.put(
				"userName", AccoGenDeclaration::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccoGenDeclaration::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccoGenDeclaration::getModifiedDate);
			attributeGetterFunctions.put(
				"noOfBedroom", AccoGenDeclaration::getNoOfBedroom);
			attributeGetterFunctions.put(
				"ownerOfHotel", AccoGenDeclaration::getOwnerOfHotel);
			attributeGetterFunctions.put(
				"addressOne", AccoGenDeclaration::getAddressOne);
			attributeGetterFunctions.put(
				"compIncorporatedOne",
				AccoGenDeclaration::getCompIncorporatedOne);
			attributeGetterFunctions.put(
				"companyDate", AccoGenDeclaration::getCompanyDate);
			attributeGetterFunctions.put(
				"hotelOperator", AccoGenDeclaration::getHotelOperator);
			attributeGetterFunctions.put(
				"hotelOperatorDateSince",
				AccoGenDeclaration::getHotelOperatorDateSince);
			attributeGetterFunctions.put(
				"addressTwo", AccoGenDeclaration::getAddressTwo);
			attributeGetterFunctions.put(
				"compIncorporatedTwo",
				AccoGenDeclaration::getCompIncorporatedTwo);
			attributeGetterFunctions.put(
				"hotelOperatorName", AccoGenDeclaration::getHotelOperatorName);
			attributeGetterFunctions.put(
				"dateTwo", AccoGenDeclaration::getDateTwo);
			attributeGetterFunctions.put(
				"hotelIncepDate", AccoGenDeclaration::getHotelIncepDate);
			attributeGetterFunctions.put(
				"financeOfOper", AccoGenDeclaration::getFinanceOfOper);
			attributeGetterFunctions.put(
				"noOfEmployee", AccoGenDeclaration::getNoOfEmployee);
			attributeGetterFunctions.put(
				"signatureDate", AccoGenDeclaration::getSignatureDate);
			attributeGetterFunctions.put(
				"nameOfManager", AccoGenDeclaration::getNameOfManager);
			attributeGetterFunctions.put(
				"jtbApplicationId", AccoGenDeclaration::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AccoGenDeclaration, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccoGenDeclaration, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccoGenDeclaration, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setUuid);
			attributeSetterBiConsumers.put(
				"accoGenDeclarationId",
				(BiConsumer<AccoGenDeclaration, Long>)
					AccoGenDeclaration::setAccoGenDeclarationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccoGenDeclaration, Long>)
					AccoGenDeclaration::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccoGenDeclaration, Long>)
					AccoGenDeclaration::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccoGenDeclaration, Long>)
					AccoGenDeclaration::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccoGenDeclaration, Date>)
					AccoGenDeclaration::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccoGenDeclaration, Date>)
					AccoGenDeclaration::setModifiedDate);
			attributeSetterBiConsumers.put(
				"noOfBedroom",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setNoOfBedroom);
			attributeSetterBiConsumers.put(
				"ownerOfHotel",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setOwnerOfHotel);
			attributeSetterBiConsumers.put(
				"addressOne",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setAddressOne);
			attributeSetterBiConsumers.put(
				"compIncorporatedOne",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setCompIncorporatedOne);
			attributeSetterBiConsumers.put(
				"companyDate",
				(BiConsumer<AccoGenDeclaration, Date>)
					AccoGenDeclaration::setCompanyDate);
			attributeSetterBiConsumers.put(
				"hotelOperator",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setHotelOperator);
			attributeSetterBiConsumers.put(
				"hotelOperatorDateSince",
				(BiConsumer<AccoGenDeclaration, Date>)
					AccoGenDeclaration::setHotelOperatorDateSince);
			attributeSetterBiConsumers.put(
				"addressTwo",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setAddressTwo);
			attributeSetterBiConsumers.put(
				"compIncorporatedTwo",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setCompIncorporatedTwo);
			attributeSetterBiConsumers.put(
				"hotelOperatorName",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setHotelOperatorName);
			attributeSetterBiConsumers.put(
				"dateTwo",
				(BiConsumer<AccoGenDeclaration, Date>)
					AccoGenDeclaration::setDateTwo);
			attributeSetterBiConsumers.put(
				"hotelIncepDate",
				(BiConsumer<AccoGenDeclaration, Date>)
					AccoGenDeclaration::setHotelIncepDate);
			attributeSetterBiConsumers.put(
				"financeOfOper",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setFinanceOfOper);
			attributeSetterBiConsumers.put(
				"noOfEmployee",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setNoOfEmployee);
			attributeSetterBiConsumers.put(
				"signatureDate",
				(BiConsumer<AccoGenDeclaration, Date>)
					AccoGenDeclaration::setSignatureDate);
			attributeSetterBiConsumers.put(
				"nameOfManager",
				(BiConsumer<AccoGenDeclaration, String>)
					AccoGenDeclaration::setNameOfManager);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AccoGenDeclaration, Long>)
					AccoGenDeclaration::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccoGenDeclarationId() {
		return _accoGenDeclarationId;
	}

	@Override
	public void setAccoGenDeclarationId(long accoGenDeclarationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoGenDeclarationId = accoGenDeclarationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNoOfBedroom() {
		if (_noOfBedroom == null) {
			return "";
		}
		else {
			return _noOfBedroom;
		}
	}

	@Override
	public void setNoOfBedroom(String noOfBedroom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noOfBedroom = noOfBedroom;
	}

	@JSON
	@Override
	public String getOwnerOfHotel() {
		if (_ownerOfHotel == null) {
			return "";
		}
		else {
			return _ownerOfHotel;
		}
	}

	@Override
	public void setOwnerOfHotel(String ownerOfHotel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerOfHotel = ownerOfHotel;
	}

	@JSON
	@Override
	public String getAddressOne() {
		if (_addressOne == null) {
			return "";
		}
		else {
			return _addressOne;
		}
	}

	@Override
	public void setAddressOne(String addressOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressOne = addressOne;
	}

	@JSON
	@Override
	public String getCompIncorporatedOne() {
		if (_compIncorporatedOne == null) {
			return "";
		}
		else {
			return _compIncorporatedOne;
		}
	}

	@Override
	public void setCompIncorporatedOne(String compIncorporatedOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_compIncorporatedOne = compIncorporatedOne;
	}

	@JSON
	@Override
	public Date getCompanyDate() {
		return _companyDate;
	}

	@Override
	public void setCompanyDate(Date companyDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyDate = companyDate;
	}

	@JSON
	@Override
	public String getHotelOperator() {
		if (_hotelOperator == null) {
			return "";
		}
		else {
			return _hotelOperator;
		}
	}

	@Override
	public void setHotelOperator(String hotelOperator) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hotelOperator = hotelOperator;
	}

	@JSON
	@Override
	public Date getHotelOperatorDateSince() {
		return _hotelOperatorDateSince;
	}

	@Override
	public void setHotelOperatorDateSince(Date hotelOperatorDateSince) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hotelOperatorDateSince = hotelOperatorDateSince;
	}

	@JSON
	@Override
	public String getAddressTwo() {
		if (_addressTwo == null) {
			return "";
		}
		else {
			return _addressTwo;
		}
	}

	@Override
	public void setAddressTwo(String addressTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressTwo = addressTwo;
	}

	@JSON
	@Override
	public String getCompIncorporatedTwo() {
		if (_compIncorporatedTwo == null) {
			return "";
		}
		else {
			return _compIncorporatedTwo;
		}
	}

	@Override
	public void setCompIncorporatedTwo(String compIncorporatedTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_compIncorporatedTwo = compIncorporatedTwo;
	}

	@JSON
	@Override
	public String getHotelOperatorName() {
		if (_hotelOperatorName == null) {
			return "";
		}
		else {
			return _hotelOperatorName;
		}
	}

	@Override
	public void setHotelOperatorName(String hotelOperatorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hotelOperatorName = hotelOperatorName;
	}

	@JSON
	@Override
	public Date getDateTwo() {
		return _dateTwo;
	}

	@Override
	public void setDateTwo(Date dateTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateTwo = dateTwo;
	}

	@JSON
	@Override
	public Date getHotelIncepDate() {
		return _hotelIncepDate;
	}

	@Override
	public void setHotelIncepDate(Date hotelIncepDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hotelIncepDate = hotelIncepDate;
	}

	@JSON
	@Override
	public String getFinanceOfOper() {
		if (_financeOfOper == null) {
			return "";
		}
		else {
			return _financeOfOper;
		}
	}

	@Override
	public void setFinanceOfOper(String financeOfOper) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_financeOfOper = financeOfOper;
	}

	@JSON
	@Override
	public String getNoOfEmployee() {
		if (_noOfEmployee == null) {
			return "";
		}
		else {
			return _noOfEmployee;
		}
	}

	@Override
	public void setNoOfEmployee(String noOfEmployee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noOfEmployee = noOfEmployee;
	}

	@JSON
	@Override
	public Date getSignatureDate() {
		return _signatureDate;
	}

	@Override
	public void setSignatureDate(Date signatureDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatureDate = signatureDate;
	}

	@JSON
	@Override
	public String getNameOfManager() {
		if (_nameOfManager == null) {
			return "";
		}
		else {
			return _nameOfManager;
		}
	}

	@Override
	public void setNameOfManager(String nameOfManager) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfManager = nameOfManager;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccoGenDeclaration.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccoGenDeclaration.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccoGenDeclaration toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccoGenDeclaration>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccoGenDeclarationImpl accoGenDeclarationImpl =
			new AccoGenDeclarationImpl();

		accoGenDeclarationImpl.setUuid(getUuid());
		accoGenDeclarationImpl.setAccoGenDeclarationId(
			getAccoGenDeclarationId());
		accoGenDeclarationImpl.setGroupId(getGroupId());
		accoGenDeclarationImpl.setCompanyId(getCompanyId());
		accoGenDeclarationImpl.setUserId(getUserId());
		accoGenDeclarationImpl.setUserName(getUserName());
		accoGenDeclarationImpl.setCreateDate(getCreateDate());
		accoGenDeclarationImpl.setModifiedDate(getModifiedDate());
		accoGenDeclarationImpl.setNoOfBedroom(getNoOfBedroom());
		accoGenDeclarationImpl.setOwnerOfHotel(getOwnerOfHotel());
		accoGenDeclarationImpl.setAddressOne(getAddressOne());
		accoGenDeclarationImpl.setCompIncorporatedOne(getCompIncorporatedOne());
		accoGenDeclarationImpl.setCompanyDate(getCompanyDate());
		accoGenDeclarationImpl.setHotelOperator(getHotelOperator());
		accoGenDeclarationImpl.setHotelOperatorDateSince(
			getHotelOperatorDateSince());
		accoGenDeclarationImpl.setAddressTwo(getAddressTwo());
		accoGenDeclarationImpl.setCompIncorporatedTwo(getCompIncorporatedTwo());
		accoGenDeclarationImpl.setHotelOperatorName(getHotelOperatorName());
		accoGenDeclarationImpl.setDateTwo(getDateTwo());
		accoGenDeclarationImpl.setHotelIncepDate(getHotelIncepDate());
		accoGenDeclarationImpl.setFinanceOfOper(getFinanceOfOper());
		accoGenDeclarationImpl.setNoOfEmployee(getNoOfEmployee());
		accoGenDeclarationImpl.setSignatureDate(getSignatureDate());
		accoGenDeclarationImpl.setNameOfManager(getNameOfManager());
		accoGenDeclarationImpl.setJtbApplicationId(getJtbApplicationId());

		accoGenDeclarationImpl.resetOriginalValues();

		return accoGenDeclarationImpl;
	}

	@Override
	public AccoGenDeclaration cloneWithOriginalValues() {
		AccoGenDeclarationImpl accoGenDeclarationImpl =
			new AccoGenDeclarationImpl();

		accoGenDeclarationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accoGenDeclarationImpl.setAccoGenDeclarationId(
			this.<Long>getColumnOriginalValue("accoGenDeclarationId"));
		accoGenDeclarationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accoGenDeclarationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accoGenDeclarationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accoGenDeclarationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accoGenDeclarationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accoGenDeclarationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accoGenDeclarationImpl.setNoOfBedroom(
			this.<String>getColumnOriginalValue("noOfBedroom"));
		accoGenDeclarationImpl.setOwnerOfHotel(
			this.<String>getColumnOriginalValue("ownerOfHotel"));
		accoGenDeclarationImpl.setAddressOne(
			this.<String>getColumnOriginalValue("addressOne"));
		accoGenDeclarationImpl.setCompIncorporatedOne(
			this.<String>getColumnOriginalValue("compIncorporatedOne"));
		accoGenDeclarationImpl.setCompanyDate(
			this.<Date>getColumnOriginalValue("companyDate"));
		accoGenDeclarationImpl.setHotelOperator(
			this.<String>getColumnOriginalValue("hotelOperator"));
		accoGenDeclarationImpl.setHotelOperatorDateSince(
			this.<Date>getColumnOriginalValue("hotelOperatorDateSince"));
		accoGenDeclarationImpl.setAddressTwo(
			this.<String>getColumnOriginalValue("addressTwo"));
		accoGenDeclarationImpl.setCompIncorporatedTwo(
			this.<String>getColumnOriginalValue("compIncorporatedTwo"));
		accoGenDeclarationImpl.setHotelOperatorName(
			this.<String>getColumnOriginalValue("hotelOperatorName"));
		accoGenDeclarationImpl.setDateTwo(
			this.<Date>getColumnOriginalValue("dateTwo"));
		accoGenDeclarationImpl.setHotelIncepDate(
			this.<Date>getColumnOriginalValue("hotelIncepDate"));
		accoGenDeclarationImpl.setFinanceOfOper(
			this.<String>getColumnOriginalValue("financeOfOper"));
		accoGenDeclarationImpl.setNoOfEmployee(
			this.<String>getColumnOriginalValue("noOfEmployee"));
		accoGenDeclarationImpl.setSignatureDate(
			this.<Date>getColumnOriginalValue("signatureDate"));
		accoGenDeclarationImpl.setNameOfManager(
			this.<String>getColumnOriginalValue("nameOfManager"));
		accoGenDeclarationImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return accoGenDeclarationImpl;
	}

	@Override
	public int compareTo(AccoGenDeclaration accoGenDeclaration) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), accoGenDeclaration.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccoGenDeclaration)) {
			return false;
		}

		AccoGenDeclaration accoGenDeclaration = (AccoGenDeclaration)object;

		long primaryKey = accoGenDeclaration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccoGenDeclaration> toCacheModel() {
		AccoGenDeclarationCacheModel accoGenDeclarationCacheModel =
			new AccoGenDeclarationCacheModel();

		accoGenDeclarationCacheModel.uuid = getUuid();

		String uuid = accoGenDeclarationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accoGenDeclarationCacheModel.uuid = null;
		}

		accoGenDeclarationCacheModel.accoGenDeclarationId =
			getAccoGenDeclarationId();

		accoGenDeclarationCacheModel.groupId = getGroupId();

		accoGenDeclarationCacheModel.companyId = getCompanyId();

		accoGenDeclarationCacheModel.userId = getUserId();

		accoGenDeclarationCacheModel.userName = getUserName();

		String userName = accoGenDeclarationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accoGenDeclarationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accoGenDeclarationCacheModel.createDate = createDate.getTime();
		}
		else {
			accoGenDeclarationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accoGenDeclarationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accoGenDeclarationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accoGenDeclarationCacheModel.noOfBedroom = getNoOfBedroom();

		String noOfBedroom = accoGenDeclarationCacheModel.noOfBedroom;

		if ((noOfBedroom != null) && (noOfBedroom.length() == 0)) {
			accoGenDeclarationCacheModel.noOfBedroom = null;
		}

		accoGenDeclarationCacheModel.ownerOfHotel = getOwnerOfHotel();

		String ownerOfHotel = accoGenDeclarationCacheModel.ownerOfHotel;

		if ((ownerOfHotel != null) && (ownerOfHotel.length() == 0)) {
			accoGenDeclarationCacheModel.ownerOfHotel = null;
		}

		accoGenDeclarationCacheModel.addressOne = getAddressOne();

		String addressOne = accoGenDeclarationCacheModel.addressOne;

		if ((addressOne != null) && (addressOne.length() == 0)) {
			accoGenDeclarationCacheModel.addressOne = null;
		}

		accoGenDeclarationCacheModel.compIncorporatedOne =
			getCompIncorporatedOne();

		String compIncorporatedOne =
			accoGenDeclarationCacheModel.compIncorporatedOne;

		if ((compIncorporatedOne != null) &&
			(compIncorporatedOne.length() == 0)) {

			accoGenDeclarationCacheModel.compIncorporatedOne = null;
		}

		Date companyDate = getCompanyDate();

		if (companyDate != null) {
			accoGenDeclarationCacheModel.companyDate = companyDate.getTime();
		}
		else {
			accoGenDeclarationCacheModel.companyDate = Long.MIN_VALUE;
		}

		accoGenDeclarationCacheModel.hotelOperator = getHotelOperator();

		String hotelOperator = accoGenDeclarationCacheModel.hotelOperator;

		if ((hotelOperator != null) && (hotelOperator.length() == 0)) {
			accoGenDeclarationCacheModel.hotelOperator = null;
		}

		Date hotelOperatorDateSince = getHotelOperatorDateSince();

		if (hotelOperatorDateSince != null) {
			accoGenDeclarationCacheModel.hotelOperatorDateSince =
				hotelOperatorDateSince.getTime();
		}
		else {
			accoGenDeclarationCacheModel.hotelOperatorDateSince =
				Long.MIN_VALUE;
		}

		accoGenDeclarationCacheModel.addressTwo = getAddressTwo();

		String addressTwo = accoGenDeclarationCacheModel.addressTwo;

		if ((addressTwo != null) && (addressTwo.length() == 0)) {
			accoGenDeclarationCacheModel.addressTwo = null;
		}

		accoGenDeclarationCacheModel.compIncorporatedTwo =
			getCompIncorporatedTwo();

		String compIncorporatedTwo =
			accoGenDeclarationCacheModel.compIncorporatedTwo;

		if ((compIncorporatedTwo != null) &&
			(compIncorporatedTwo.length() == 0)) {

			accoGenDeclarationCacheModel.compIncorporatedTwo = null;
		}

		accoGenDeclarationCacheModel.hotelOperatorName = getHotelOperatorName();

		String hotelOperatorName =
			accoGenDeclarationCacheModel.hotelOperatorName;

		if ((hotelOperatorName != null) && (hotelOperatorName.length() == 0)) {
			accoGenDeclarationCacheModel.hotelOperatorName = null;
		}

		Date dateTwo = getDateTwo();

		if (dateTwo != null) {
			accoGenDeclarationCacheModel.dateTwo = dateTwo.getTime();
		}
		else {
			accoGenDeclarationCacheModel.dateTwo = Long.MIN_VALUE;
		}

		Date hotelIncepDate = getHotelIncepDate();

		if (hotelIncepDate != null) {
			accoGenDeclarationCacheModel.hotelIncepDate =
				hotelIncepDate.getTime();
		}
		else {
			accoGenDeclarationCacheModel.hotelIncepDate = Long.MIN_VALUE;
		}

		accoGenDeclarationCacheModel.financeOfOper = getFinanceOfOper();

		String financeOfOper = accoGenDeclarationCacheModel.financeOfOper;

		if ((financeOfOper != null) && (financeOfOper.length() == 0)) {
			accoGenDeclarationCacheModel.financeOfOper = null;
		}

		accoGenDeclarationCacheModel.noOfEmployee = getNoOfEmployee();

		String noOfEmployee = accoGenDeclarationCacheModel.noOfEmployee;

		if ((noOfEmployee != null) && (noOfEmployee.length() == 0)) {
			accoGenDeclarationCacheModel.noOfEmployee = null;
		}

		Date signatureDate = getSignatureDate();

		if (signatureDate != null) {
			accoGenDeclarationCacheModel.signatureDate =
				signatureDate.getTime();
		}
		else {
			accoGenDeclarationCacheModel.signatureDate = Long.MIN_VALUE;
		}

		accoGenDeclarationCacheModel.nameOfManager = getNameOfManager();

		String nameOfManager = accoGenDeclarationCacheModel.nameOfManager;

		if ((nameOfManager != null) && (nameOfManager.length() == 0)) {
			accoGenDeclarationCacheModel.nameOfManager = null;
		}

		accoGenDeclarationCacheModel.jtbApplicationId = getJtbApplicationId();

		return accoGenDeclarationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccoGenDeclaration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccoGenDeclaration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoGenDeclaration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccoGenDeclaration)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccoGenDeclaration>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccoGenDeclaration.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accoGenDeclarationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _noOfBedroom;
	private String _ownerOfHotel;
	private String _addressOne;
	private String _compIncorporatedOne;
	private Date _companyDate;
	private String _hotelOperator;
	private Date _hotelOperatorDateSince;
	private String _addressTwo;
	private String _compIncorporatedTwo;
	private String _hotelOperatorName;
	private Date _dateTwo;
	private Date _hotelIncepDate;
	private String _financeOfOper;
	private String _noOfEmployee;
	private Date _signatureDate;
	private String _nameOfManager;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccoGenDeclaration, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccoGenDeclaration)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accoGenDeclarationId", _accoGenDeclarationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("noOfBedroom", _noOfBedroom);
		_columnOriginalValues.put("ownerOfHotel", _ownerOfHotel);
		_columnOriginalValues.put("addressOne", _addressOne);
		_columnOriginalValues.put("compIncorporatedOne", _compIncorporatedOne);
		_columnOriginalValues.put("companyDate", _companyDate);
		_columnOriginalValues.put("hotelOperator", _hotelOperator);
		_columnOriginalValues.put(
			"hotelOperatorDateSince", _hotelOperatorDateSince);
		_columnOriginalValues.put("addressTwo", _addressTwo);
		_columnOriginalValues.put("compIncorporatedTwo", _compIncorporatedTwo);
		_columnOriginalValues.put("hotelOperatorName", _hotelOperatorName);
		_columnOriginalValues.put("dateTwo", _dateTwo);
		_columnOriginalValues.put("hotelIncepDate", _hotelIncepDate);
		_columnOriginalValues.put("financeOfOper", _financeOfOper);
		_columnOriginalValues.put("noOfEmployee", _noOfEmployee);
		_columnOriginalValues.put("signatureDate", _signatureDate);
		_columnOriginalValues.put("nameOfManager", _nameOfManager);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accoGenDeclarationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("noOfBedroom", 256L);

		columnBitmasks.put("ownerOfHotel", 512L);

		columnBitmasks.put("addressOne", 1024L);

		columnBitmasks.put("compIncorporatedOne", 2048L);

		columnBitmasks.put("companyDate", 4096L);

		columnBitmasks.put("hotelOperator", 8192L);

		columnBitmasks.put("hotelOperatorDateSince", 16384L);

		columnBitmasks.put("addressTwo", 32768L);

		columnBitmasks.put("compIncorporatedTwo", 65536L);

		columnBitmasks.put("hotelOperatorName", 131072L);

		columnBitmasks.put("dateTwo", 262144L);

		columnBitmasks.put("hotelIncepDate", 524288L);

		columnBitmasks.put("financeOfOper", 1048576L);

		columnBitmasks.put("noOfEmployee", 2097152L);

		columnBitmasks.put("signatureDate", 4194304L);

		columnBitmasks.put("nameOfManager", 8388608L);

		columnBitmasks.put("jtbApplicationId", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccoGenDeclaration _escapedModel;

}