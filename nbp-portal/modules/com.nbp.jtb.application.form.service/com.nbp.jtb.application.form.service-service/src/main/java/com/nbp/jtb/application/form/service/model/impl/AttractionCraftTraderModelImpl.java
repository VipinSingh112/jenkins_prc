/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionCraftTrader;
import com.nbp.jtb.application.form.service.model.AttractionCraftTraderModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionCraftTrader service. Represents a row in the &quot;nbp_jtb_craft_trader_permit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionCraftTraderModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionCraftTraderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionCraftTraderImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionCraftTraderModelImpl
	extends BaseModelImpl<AttractionCraftTrader>
	implements AttractionCraftTraderModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction craft trader model instance should use the <code>AttractionCraftTrader</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_craft_trader_permit";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionCraftTraderId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"craftTradersAppliOwner", Types.VARCHAR},
		{"craftTradersAppliAddress", Types.VARCHAR},
		{"craftTradersAppliPhoneNo", Types.VARCHAR},
		{"craftTradersAppliEmail", Types.VARCHAR},
		{"occupyLocation", Types.VARCHAR},
		{"craftTraderGoodsType", Types.VARCHAR},
		{"craftTraderName", Types.VARCHAR},
		{"craftTraderPosition", Types.VARCHAR},
		{"craftTraderMinisterAddr", Types.VARCHAR},
		{"craftTraderMinisterName", Types.VARCHAR},
		{"craftTraderMinisterNamePos", Types.VARCHAR},
		{"craftTraderAddressOwner", Types.VARCHAR},
		{"craftTraderSignDate", Types.TIMESTAMP},
		{"craftTraderAssistSiDate", Types.TIMESTAMP},
		{"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionCraftTraderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("craftTradersAppliOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTradersAppliAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTradersAppliPhoneNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTradersAppliEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occupyLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTraderGoodsType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTraderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTraderPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTraderMinisterAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTraderMinisterName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTraderMinisterNamePos", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTraderAddressOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("craftTraderSignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("craftTraderAssistSiDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_craft_trader_permit (attractionCraftTraderId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,craftTradersAppliOwner VARCHAR(75) null,craftTradersAppliAddress VARCHAR(500) null,craftTradersAppliPhoneNo VARCHAR(75) null,craftTradersAppliEmail VARCHAR(75) null,occupyLocation VARCHAR(75) null,craftTraderGoodsType VARCHAR(75) null,craftTraderName VARCHAR(75) null,craftTraderPosition VARCHAR(75) null,craftTraderMinisterAddr VARCHAR(500) null,craftTraderMinisterName VARCHAR(75) null,craftTraderMinisterNamePos VARCHAR(75) null,craftTraderAddressOwner VARCHAR(500) null,craftTraderSignDate DATE null,craftTraderAssistSiDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_craft_trader_permit";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionCraftTrader.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_craft_trader_permit.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionCraftTraderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionCraftTraderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionCraftTraderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionCraftTraderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionCraftTrader.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionCraftTrader.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionCraftTrader, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionCraftTrader, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionCraftTrader, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionCraftTrader)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionCraftTrader, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionCraftTrader, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionCraftTrader)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionCraftTrader, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionCraftTrader, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionCraftTrader, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionCraftTrader, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionCraftTrader, Object>>();

			attributeGetterFunctions.put(
				"attractionCraftTraderId",
				AttractionCraftTrader::getAttractionCraftTraderId);
			attributeGetterFunctions.put(
				"groupId", AttractionCraftTrader::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionCraftTrader::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionCraftTrader::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionCraftTrader::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionCraftTrader::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionCraftTrader::getModifiedDate);
			attributeGetterFunctions.put(
				"craftTradersAppliOwner",
				AttractionCraftTrader::getCraftTradersAppliOwner);
			attributeGetterFunctions.put(
				"craftTradersAppliAddress",
				AttractionCraftTrader::getCraftTradersAppliAddress);
			attributeGetterFunctions.put(
				"craftTradersAppliPhoneNo",
				AttractionCraftTrader::getCraftTradersAppliPhoneNo);
			attributeGetterFunctions.put(
				"craftTradersAppliEmail",
				AttractionCraftTrader::getCraftTradersAppliEmail);
			attributeGetterFunctions.put(
				"occupyLocation", AttractionCraftTrader::getOccupyLocation);
			attributeGetterFunctions.put(
				"craftTraderGoodsType",
				AttractionCraftTrader::getCraftTraderGoodsType);
			attributeGetterFunctions.put(
				"craftTraderName", AttractionCraftTrader::getCraftTraderName);
			attributeGetterFunctions.put(
				"craftTraderPosition",
				AttractionCraftTrader::getCraftTraderPosition);
			attributeGetterFunctions.put(
				"craftTraderMinisterAddr",
				AttractionCraftTrader::getCraftTraderMinisterAddr);
			attributeGetterFunctions.put(
				"craftTraderMinisterName",
				AttractionCraftTrader::getCraftTraderMinisterName);
			attributeGetterFunctions.put(
				"craftTraderMinisterNamePos",
				AttractionCraftTrader::getCraftTraderMinisterNamePos);
			attributeGetterFunctions.put(
				"craftTraderAddressOwner",
				AttractionCraftTrader::getCraftTraderAddressOwner);
			attributeGetterFunctions.put(
				"craftTraderSignDate",
				AttractionCraftTrader::getCraftTraderSignDate);
			attributeGetterFunctions.put(
				"craftTraderAssistSiDate",
				AttractionCraftTrader::getCraftTraderAssistSiDate);
			attributeGetterFunctions.put(
				"jtbApplicationId", AttractionCraftTrader::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionCraftTrader, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionCraftTrader, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionCraftTrader, ?>>();

			attributeSetterBiConsumers.put(
				"attractionCraftTraderId",
				(BiConsumer<AttractionCraftTrader, Long>)
					AttractionCraftTrader::setAttractionCraftTraderId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionCraftTrader, Long>)
					AttractionCraftTrader::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionCraftTrader, Long>)
					AttractionCraftTrader::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionCraftTrader, Long>)
					AttractionCraftTrader::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionCraftTrader, Date>)
					AttractionCraftTrader::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionCraftTrader, Date>)
					AttractionCraftTrader::setModifiedDate);
			attributeSetterBiConsumers.put(
				"craftTradersAppliOwner",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTradersAppliOwner);
			attributeSetterBiConsumers.put(
				"craftTradersAppliAddress",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTradersAppliAddress);
			attributeSetterBiConsumers.put(
				"craftTradersAppliPhoneNo",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTradersAppliPhoneNo);
			attributeSetterBiConsumers.put(
				"craftTradersAppliEmail",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTradersAppliEmail);
			attributeSetterBiConsumers.put(
				"occupyLocation",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setOccupyLocation);
			attributeSetterBiConsumers.put(
				"craftTraderGoodsType",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTraderGoodsType);
			attributeSetterBiConsumers.put(
				"craftTraderName",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTraderName);
			attributeSetterBiConsumers.put(
				"craftTraderPosition",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTraderPosition);
			attributeSetterBiConsumers.put(
				"craftTraderMinisterAddr",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTraderMinisterAddr);
			attributeSetterBiConsumers.put(
				"craftTraderMinisterName",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTraderMinisterName);
			attributeSetterBiConsumers.put(
				"craftTraderMinisterNamePos",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTraderMinisterNamePos);
			attributeSetterBiConsumers.put(
				"craftTraderAddressOwner",
				(BiConsumer<AttractionCraftTrader, String>)
					AttractionCraftTrader::setCraftTraderAddressOwner);
			attributeSetterBiConsumers.put(
				"craftTraderSignDate",
				(BiConsumer<AttractionCraftTrader, Date>)
					AttractionCraftTrader::setCraftTraderSignDate);
			attributeSetterBiConsumers.put(
				"craftTraderAssistSiDate",
				(BiConsumer<AttractionCraftTrader, Date>)
					AttractionCraftTrader::setCraftTraderAssistSiDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionCraftTrader, Long>)
					AttractionCraftTrader::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionCraftTraderId() {
		return _attractionCraftTraderId;
	}

	@Override
	public void setAttractionCraftTraderId(long attractionCraftTraderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionCraftTraderId = attractionCraftTraderId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCraftTradersAppliOwner() {
		if (_craftTradersAppliOwner == null) {
			return "";
		}
		else {
			return _craftTradersAppliOwner;
		}
	}

	@Override
	public void setCraftTradersAppliOwner(String craftTradersAppliOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTradersAppliOwner = craftTradersAppliOwner;
	}

	@JSON
	@Override
	public String getCraftTradersAppliAddress() {
		if (_craftTradersAppliAddress == null) {
			return "";
		}
		else {
			return _craftTradersAppliAddress;
		}
	}

	@Override
	public void setCraftTradersAppliAddress(String craftTradersAppliAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTradersAppliAddress = craftTradersAppliAddress;
	}

	@JSON
	@Override
	public String getCraftTradersAppliPhoneNo() {
		if (_craftTradersAppliPhoneNo == null) {
			return "";
		}
		else {
			return _craftTradersAppliPhoneNo;
		}
	}

	@Override
	public void setCraftTradersAppliPhoneNo(String craftTradersAppliPhoneNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTradersAppliPhoneNo = craftTradersAppliPhoneNo;
	}

	@JSON
	@Override
	public String getCraftTradersAppliEmail() {
		if (_craftTradersAppliEmail == null) {
			return "";
		}
		else {
			return _craftTradersAppliEmail;
		}
	}

	@Override
	public void setCraftTradersAppliEmail(String craftTradersAppliEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTradersAppliEmail = craftTradersAppliEmail;
	}

	@JSON
	@Override
	public String getOccupyLocation() {
		if (_occupyLocation == null) {
			return "";
		}
		else {
			return _occupyLocation;
		}
	}

	@Override
	public void setOccupyLocation(String occupyLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occupyLocation = occupyLocation;
	}

	@JSON
	@Override
	public String getCraftTraderGoodsType() {
		if (_craftTraderGoodsType == null) {
			return "";
		}
		else {
			return _craftTraderGoodsType;
		}
	}

	@Override
	public void setCraftTraderGoodsType(String craftTraderGoodsType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderGoodsType = craftTraderGoodsType;
	}

	@JSON
	@Override
	public String getCraftTraderName() {
		if (_craftTraderName == null) {
			return "";
		}
		else {
			return _craftTraderName;
		}
	}

	@Override
	public void setCraftTraderName(String craftTraderName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderName = craftTraderName;
	}

	@JSON
	@Override
	public String getCraftTraderPosition() {
		if (_craftTraderPosition == null) {
			return "";
		}
		else {
			return _craftTraderPosition;
		}
	}

	@Override
	public void setCraftTraderPosition(String craftTraderPosition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderPosition = craftTraderPosition;
	}

	@JSON
	@Override
	public String getCraftTraderMinisterAddr() {
		if (_craftTraderMinisterAddr == null) {
			return "";
		}
		else {
			return _craftTraderMinisterAddr;
		}
	}

	@Override
	public void setCraftTraderMinisterAddr(String craftTraderMinisterAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderMinisterAddr = craftTraderMinisterAddr;
	}

	@JSON
	@Override
	public String getCraftTraderMinisterName() {
		if (_craftTraderMinisterName == null) {
			return "";
		}
		else {
			return _craftTraderMinisterName;
		}
	}

	@Override
	public void setCraftTraderMinisterName(String craftTraderMinisterName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderMinisterName = craftTraderMinisterName;
	}

	@JSON
	@Override
	public String getCraftTraderMinisterNamePos() {
		if (_craftTraderMinisterNamePos == null) {
			return "";
		}
		else {
			return _craftTraderMinisterNamePos;
		}
	}

	@Override
	public void setCraftTraderMinisterNamePos(
		String craftTraderMinisterNamePos) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderMinisterNamePos = craftTraderMinisterNamePos;
	}

	@JSON
	@Override
	public String getCraftTraderAddressOwner() {
		if (_craftTraderAddressOwner == null) {
			return "";
		}
		else {
			return _craftTraderAddressOwner;
		}
	}

	@Override
	public void setCraftTraderAddressOwner(String craftTraderAddressOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderAddressOwner = craftTraderAddressOwner;
	}

	@JSON
	@Override
	public Date getCraftTraderSignDate() {
		return _craftTraderSignDate;
	}

	@Override
	public void setCraftTraderSignDate(Date craftTraderSignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderSignDate = craftTraderSignDate;
	}

	@JSON
	@Override
	public Date getCraftTraderAssistSiDate() {
		return _craftTraderAssistSiDate;
	}

	@Override
	public void setCraftTraderAssistSiDate(Date craftTraderAssistSiDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_craftTraderAssistSiDate = craftTraderAssistSiDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionCraftTrader.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionCraftTrader toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionCraftTrader>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionCraftTraderImpl attractionCraftTraderImpl =
			new AttractionCraftTraderImpl();

		attractionCraftTraderImpl.setAttractionCraftTraderId(
			getAttractionCraftTraderId());
		attractionCraftTraderImpl.setGroupId(getGroupId());
		attractionCraftTraderImpl.setCompanyId(getCompanyId());
		attractionCraftTraderImpl.setUserId(getUserId());
		attractionCraftTraderImpl.setUserName(getUserName());
		attractionCraftTraderImpl.setCreateDate(getCreateDate());
		attractionCraftTraderImpl.setModifiedDate(getModifiedDate());
		attractionCraftTraderImpl.setCraftTradersAppliOwner(
			getCraftTradersAppliOwner());
		attractionCraftTraderImpl.setCraftTradersAppliAddress(
			getCraftTradersAppliAddress());
		attractionCraftTraderImpl.setCraftTradersAppliPhoneNo(
			getCraftTradersAppliPhoneNo());
		attractionCraftTraderImpl.setCraftTradersAppliEmail(
			getCraftTradersAppliEmail());
		attractionCraftTraderImpl.setOccupyLocation(getOccupyLocation());
		attractionCraftTraderImpl.setCraftTraderGoodsType(
			getCraftTraderGoodsType());
		attractionCraftTraderImpl.setCraftTraderName(getCraftTraderName());
		attractionCraftTraderImpl.setCraftTraderPosition(
			getCraftTraderPosition());
		attractionCraftTraderImpl.setCraftTraderMinisterAddr(
			getCraftTraderMinisterAddr());
		attractionCraftTraderImpl.setCraftTraderMinisterName(
			getCraftTraderMinisterName());
		attractionCraftTraderImpl.setCraftTraderMinisterNamePos(
			getCraftTraderMinisterNamePos());
		attractionCraftTraderImpl.setCraftTraderAddressOwner(
			getCraftTraderAddressOwner());
		attractionCraftTraderImpl.setCraftTraderSignDate(
			getCraftTraderSignDate());
		attractionCraftTraderImpl.setCraftTraderAssistSiDate(
			getCraftTraderAssistSiDate());
		attractionCraftTraderImpl.setJtbApplicationId(getJtbApplicationId());

		attractionCraftTraderImpl.resetOriginalValues();

		return attractionCraftTraderImpl;
	}

	@Override
	public AttractionCraftTrader cloneWithOriginalValues() {
		AttractionCraftTraderImpl attractionCraftTraderImpl =
			new AttractionCraftTraderImpl();

		attractionCraftTraderImpl.setAttractionCraftTraderId(
			this.<Long>getColumnOriginalValue("attractionCraftTraderId"));
		attractionCraftTraderImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionCraftTraderImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionCraftTraderImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionCraftTraderImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionCraftTraderImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionCraftTraderImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionCraftTraderImpl.setCraftTradersAppliOwner(
			this.<String>getColumnOriginalValue("craftTradersAppliOwner"));
		attractionCraftTraderImpl.setCraftTradersAppliAddress(
			this.<String>getColumnOriginalValue("craftTradersAppliAddress"));
		attractionCraftTraderImpl.setCraftTradersAppliPhoneNo(
			this.<String>getColumnOriginalValue("craftTradersAppliPhoneNo"));
		attractionCraftTraderImpl.setCraftTradersAppliEmail(
			this.<String>getColumnOriginalValue("craftTradersAppliEmail"));
		attractionCraftTraderImpl.setOccupyLocation(
			this.<String>getColumnOriginalValue("occupyLocation"));
		attractionCraftTraderImpl.setCraftTraderGoodsType(
			this.<String>getColumnOriginalValue("craftTraderGoodsType"));
		attractionCraftTraderImpl.setCraftTraderName(
			this.<String>getColumnOriginalValue("craftTraderName"));
		attractionCraftTraderImpl.setCraftTraderPosition(
			this.<String>getColumnOriginalValue("craftTraderPosition"));
		attractionCraftTraderImpl.setCraftTraderMinisterAddr(
			this.<String>getColumnOriginalValue("craftTraderMinisterAddr"));
		attractionCraftTraderImpl.setCraftTraderMinisterName(
			this.<String>getColumnOriginalValue("craftTraderMinisterName"));
		attractionCraftTraderImpl.setCraftTraderMinisterNamePos(
			this.<String>getColumnOriginalValue("craftTraderMinisterNamePos"));
		attractionCraftTraderImpl.setCraftTraderAddressOwner(
			this.<String>getColumnOriginalValue("craftTraderAddressOwner"));
		attractionCraftTraderImpl.setCraftTraderSignDate(
			this.<Date>getColumnOriginalValue("craftTraderSignDate"));
		attractionCraftTraderImpl.setCraftTraderAssistSiDate(
			this.<Date>getColumnOriginalValue("craftTraderAssistSiDate"));
		attractionCraftTraderImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionCraftTraderImpl;
	}

	@Override
	public int compareTo(AttractionCraftTrader attractionCraftTrader) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionCraftTrader.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionCraftTrader)) {
			return false;
		}

		AttractionCraftTrader attractionCraftTrader =
			(AttractionCraftTrader)object;

		long primaryKey = attractionCraftTrader.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionCraftTrader> toCacheModel() {
		AttractionCraftTraderCacheModel attractionCraftTraderCacheModel =
			new AttractionCraftTraderCacheModel();

		attractionCraftTraderCacheModel.attractionCraftTraderId =
			getAttractionCraftTraderId();

		attractionCraftTraderCacheModel.groupId = getGroupId();

		attractionCraftTraderCacheModel.companyId = getCompanyId();

		attractionCraftTraderCacheModel.userId = getUserId();

		attractionCraftTraderCacheModel.userName = getUserName();

		String userName = attractionCraftTraderCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionCraftTraderCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionCraftTraderCacheModel.createDate = createDate.getTime();
		}
		else {
			attractionCraftTraderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionCraftTraderCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionCraftTraderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionCraftTraderCacheModel.craftTradersAppliOwner =
			getCraftTradersAppliOwner();

		String craftTradersAppliOwner =
			attractionCraftTraderCacheModel.craftTradersAppliOwner;

		if ((craftTradersAppliOwner != null) &&
			(craftTradersAppliOwner.length() == 0)) {

			attractionCraftTraderCacheModel.craftTradersAppliOwner = null;
		}

		attractionCraftTraderCacheModel.craftTradersAppliAddress =
			getCraftTradersAppliAddress();

		String craftTradersAppliAddress =
			attractionCraftTraderCacheModel.craftTradersAppliAddress;

		if ((craftTradersAppliAddress != null) &&
			(craftTradersAppliAddress.length() == 0)) {

			attractionCraftTraderCacheModel.craftTradersAppliAddress = null;
		}

		attractionCraftTraderCacheModel.craftTradersAppliPhoneNo =
			getCraftTradersAppliPhoneNo();

		String craftTradersAppliPhoneNo =
			attractionCraftTraderCacheModel.craftTradersAppliPhoneNo;

		if ((craftTradersAppliPhoneNo != null) &&
			(craftTradersAppliPhoneNo.length() == 0)) {

			attractionCraftTraderCacheModel.craftTradersAppliPhoneNo = null;
		}

		attractionCraftTraderCacheModel.craftTradersAppliEmail =
			getCraftTradersAppliEmail();

		String craftTradersAppliEmail =
			attractionCraftTraderCacheModel.craftTradersAppliEmail;

		if ((craftTradersAppliEmail != null) &&
			(craftTradersAppliEmail.length() == 0)) {

			attractionCraftTraderCacheModel.craftTradersAppliEmail = null;
		}

		attractionCraftTraderCacheModel.occupyLocation = getOccupyLocation();

		String occupyLocation = attractionCraftTraderCacheModel.occupyLocation;

		if ((occupyLocation != null) && (occupyLocation.length() == 0)) {
			attractionCraftTraderCacheModel.occupyLocation = null;
		}

		attractionCraftTraderCacheModel.craftTraderGoodsType =
			getCraftTraderGoodsType();

		String craftTraderGoodsType =
			attractionCraftTraderCacheModel.craftTraderGoodsType;

		if ((craftTraderGoodsType != null) &&
			(craftTraderGoodsType.length() == 0)) {

			attractionCraftTraderCacheModel.craftTraderGoodsType = null;
		}

		attractionCraftTraderCacheModel.craftTraderName = getCraftTraderName();

		String craftTraderName =
			attractionCraftTraderCacheModel.craftTraderName;

		if ((craftTraderName != null) && (craftTraderName.length() == 0)) {
			attractionCraftTraderCacheModel.craftTraderName = null;
		}

		attractionCraftTraderCacheModel.craftTraderPosition =
			getCraftTraderPosition();

		String craftTraderPosition =
			attractionCraftTraderCacheModel.craftTraderPosition;

		if ((craftTraderPosition != null) &&
			(craftTraderPosition.length() == 0)) {

			attractionCraftTraderCacheModel.craftTraderPosition = null;
		}

		attractionCraftTraderCacheModel.craftTraderMinisterAddr =
			getCraftTraderMinisterAddr();

		String craftTraderMinisterAddr =
			attractionCraftTraderCacheModel.craftTraderMinisterAddr;

		if ((craftTraderMinisterAddr != null) &&
			(craftTraderMinisterAddr.length() == 0)) {

			attractionCraftTraderCacheModel.craftTraderMinisterAddr = null;
		}

		attractionCraftTraderCacheModel.craftTraderMinisterName =
			getCraftTraderMinisterName();

		String craftTraderMinisterName =
			attractionCraftTraderCacheModel.craftTraderMinisterName;

		if ((craftTraderMinisterName != null) &&
			(craftTraderMinisterName.length() == 0)) {

			attractionCraftTraderCacheModel.craftTraderMinisterName = null;
		}

		attractionCraftTraderCacheModel.craftTraderMinisterNamePos =
			getCraftTraderMinisterNamePos();

		String craftTraderMinisterNamePos =
			attractionCraftTraderCacheModel.craftTraderMinisterNamePos;

		if ((craftTraderMinisterNamePos != null) &&
			(craftTraderMinisterNamePos.length() == 0)) {

			attractionCraftTraderCacheModel.craftTraderMinisterNamePos = null;
		}

		attractionCraftTraderCacheModel.craftTraderAddressOwner =
			getCraftTraderAddressOwner();

		String craftTraderAddressOwner =
			attractionCraftTraderCacheModel.craftTraderAddressOwner;

		if ((craftTraderAddressOwner != null) &&
			(craftTraderAddressOwner.length() == 0)) {

			attractionCraftTraderCacheModel.craftTraderAddressOwner = null;
		}

		Date craftTraderSignDate = getCraftTraderSignDate();

		if (craftTraderSignDate != null) {
			attractionCraftTraderCacheModel.craftTraderSignDate =
				craftTraderSignDate.getTime();
		}
		else {
			attractionCraftTraderCacheModel.craftTraderSignDate =
				Long.MIN_VALUE;
		}

		Date craftTraderAssistSiDate = getCraftTraderAssistSiDate();

		if (craftTraderAssistSiDate != null) {
			attractionCraftTraderCacheModel.craftTraderAssistSiDate =
				craftTraderAssistSiDate.getTime();
		}
		else {
			attractionCraftTraderCacheModel.craftTraderAssistSiDate =
				Long.MIN_VALUE;
		}

		attractionCraftTraderCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionCraftTraderCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionCraftTrader, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionCraftTrader, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionCraftTrader, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionCraftTrader)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AttractionCraftTrader>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AttractionCraftTrader.class, ModelWrapper.class);

	}

	private long _attractionCraftTraderId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _craftTradersAppliOwner;
	private String _craftTradersAppliAddress;
	private String _craftTradersAppliPhoneNo;
	private String _craftTradersAppliEmail;
	private String _occupyLocation;
	private String _craftTraderGoodsType;
	private String _craftTraderName;
	private String _craftTraderPosition;
	private String _craftTraderMinisterAddr;
	private String _craftTraderMinisterName;
	private String _craftTraderMinisterNamePos;
	private String _craftTraderAddressOwner;
	private Date _craftTraderSignDate;
	private Date _craftTraderAssistSiDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionCraftTrader, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionCraftTrader)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionCraftTraderId", _attractionCraftTraderId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"craftTradersAppliOwner", _craftTradersAppliOwner);
		_columnOriginalValues.put(
			"craftTradersAppliAddress", _craftTradersAppliAddress);
		_columnOriginalValues.put(
			"craftTradersAppliPhoneNo", _craftTradersAppliPhoneNo);
		_columnOriginalValues.put(
			"craftTradersAppliEmail", _craftTradersAppliEmail);
		_columnOriginalValues.put("occupyLocation", _occupyLocation);
		_columnOriginalValues.put(
			"craftTraderGoodsType", _craftTraderGoodsType);
		_columnOriginalValues.put("craftTraderName", _craftTraderName);
		_columnOriginalValues.put("craftTraderPosition", _craftTraderPosition);
		_columnOriginalValues.put(
			"craftTraderMinisterAddr", _craftTraderMinisterAddr);
		_columnOriginalValues.put(
			"craftTraderMinisterName", _craftTraderMinisterName);
		_columnOriginalValues.put(
			"craftTraderMinisterNamePos", _craftTraderMinisterNamePos);
		_columnOriginalValues.put(
			"craftTraderAddressOwner", _craftTraderAddressOwner);
		_columnOriginalValues.put("craftTraderSignDate", _craftTraderSignDate);
		_columnOriginalValues.put(
			"craftTraderAssistSiDate", _craftTraderAssistSiDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionCraftTraderId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("craftTradersAppliOwner", 128L);

		columnBitmasks.put("craftTradersAppliAddress", 256L);

		columnBitmasks.put("craftTradersAppliPhoneNo", 512L);

		columnBitmasks.put("craftTradersAppliEmail", 1024L);

		columnBitmasks.put("occupyLocation", 2048L);

		columnBitmasks.put("craftTraderGoodsType", 4096L);

		columnBitmasks.put("craftTraderName", 8192L);

		columnBitmasks.put("craftTraderPosition", 16384L);

		columnBitmasks.put("craftTraderMinisterAddr", 32768L);

		columnBitmasks.put("craftTraderMinisterName", 65536L);

		columnBitmasks.put("craftTraderMinisterNamePos", 131072L);

		columnBitmasks.put("craftTraderAddressOwner", 262144L);

		columnBitmasks.put("craftTraderSignDate", 524288L);

		columnBitmasks.put("craftTraderAssistSiDate", 1048576L);

		columnBitmasks.put("jtbApplicationId", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionCraftTrader _escapedModel;

}