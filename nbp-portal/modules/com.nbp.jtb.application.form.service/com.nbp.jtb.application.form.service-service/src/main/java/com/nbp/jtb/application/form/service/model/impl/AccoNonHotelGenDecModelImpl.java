/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AccoNonHotelGenDec;
import com.nbp.jtb.application.form.service.model.AccoNonHotelGenDecModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccoNonHotelGenDec service. Represents a row in the &quot;nbp_jtb_acco_non_hotel_gen&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccoNonHotelGenDecModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccoNonHotelGenDecImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccoNonHotelGenDecImpl
 * @generated
 */
@JSON(strict = true)
public class AccoNonHotelGenDecModelImpl
	extends BaseModelImpl<AccoNonHotelGenDec>
	implements AccoNonHotelGenDecModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acco non hotel gen dec model instance should use the <code>AccoNonHotelGenDec</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_acco_non_hotel_gen";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accoNonHotelGenDecId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nhAccoOperatorName", Types.VARCHAR}, {"dateFrom", Types.TIMESTAMP},
		{"dateTo", Types.TIMESTAMP}, {"nhAccoSince", Types.TIMESTAMP},
		{"nhAccoDate", Types.TIMESTAMP}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoNonHotelGenDecId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nhAccoOperatorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateTo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nhAccoSince", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nhAccoDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_acco_non_hotel_gen (uuid_ VARCHAR(75) null,accoNonHotelGenDecId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nhAccoOperatorName VARCHAR(75) null,dateFrom DATE null,dateTo DATE null,nhAccoSince DATE null,nhAccoDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_acco_non_hotel_gen";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accoNonHotelGenDec.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_acco_non_hotel_gen.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccoNonHotelGenDecModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accoNonHotelGenDecId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccoNonHotelGenDecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accoNonHotelGenDecId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccoNonHotelGenDec.class;
	}

	@Override
	public String getModelClassName() {
		return AccoNonHotelGenDec.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccoNonHotelGenDec, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccoNonHotelGenDec, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoNonHotelGenDec, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccoNonHotelGenDec)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccoNonHotelGenDec, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccoNonHotelGenDec, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccoNonHotelGenDec)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccoNonHotelGenDec, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccoNonHotelGenDec, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccoNonHotelGenDec, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccoNonHotelGenDec, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccoNonHotelGenDec, Object>>();

			attributeGetterFunctions.put("uuid", AccoNonHotelGenDec::getUuid);
			attributeGetterFunctions.put(
				"accoNonHotelGenDecId",
				AccoNonHotelGenDec::getAccoNonHotelGenDecId);
			attributeGetterFunctions.put(
				"groupId", AccoNonHotelGenDec::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccoNonHotelGenDec::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccoNonHotelGenDec::getUserId);
			attributeGetterFunctions.put(
				"userName", AccoNonHotelGenDec::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccoNonHotelGenDec::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccoNonHotelGenDec::getModifiedDate);
			attributeGetterFunctions.put(
				"nhAccoOperatorName",
				AccoNonHotelGenDec::getNhAccoOperatorName);
			attributeGetterFunctions.put(
				"dateFrom", AccoNonHotelGenDec::getDateFrom);
			attributeGetterFunctions.put(
				"dateTo", AccoNonHotelGenDec::getDateTo);
			attributeGetterFunctions.put(
				"nhAccoSince", AccoNonHotelGenDec::getNhAccoSince);
			attributeGetterFunctions.put(
				"nhAccoDate", AccoNonHotelGenDec::getNhAccoDate);
			attributeGetterFunctions.put(
				"jtbApplicationId", AccoNonHotelGenDec::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AccoNonHotelGenDec, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccoNonHotelGenDec, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccoNonHotelGenDec, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccoNonHotelGenDec, String>)
					AccoNonHotelGenDec::setUuid);
			attributeSetterBiConsumers.put(
				"accoNonHotelGenDecId",
				(BiConsumer<AccoNonHotelGenDec, Long>)
					AccoNonHotelGenDec::setAccoNonHotelGenDecId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccoNonHotelGenDec, Long>)
					AccoNonHotelGenDec::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccoNonHotelGenDec, Long>)
					AccoNonHotelGenDec::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccoNonHotelGenDec, Long>)
					AccoNonHotelGenDec::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccoNonHotelGenDec, String>)
					AccoNonHotelGenDec::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccoNonHotelGenDec, Date>)
					AccoNonHotelGenDec::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccoNonHotelGenDec, Date>)
					AccoNonHotelGenDec::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nhAccoOperatorName",
				(BiConsumer<AccoNonHotelGenDec, String>)
					AccoNonHotelGenDec::setNhAccoOperatorName);
			attributeSetterBiConsumers.put(
				"dateFrom",
				(BiConsumer<AccoNonHotelGenDec, Date>)
					AccoNonHotelGenDec::setDateFrom);
			attributeSetterBiConsumers.put(
				"dateTo",
				(BiConsumer<AccoNonHotelGenDec, Date>)
					AccoNonHotelGenDec::setDateTo);
			attributeSetterBiConsumers.put(
				"nhAccoSince",
				(BiConsumer<AccoNonHotelGenDec, Date>)
					AccoNonHotelGenDec::setNhAccoSince);
			attributeSetterBiConsumers.put(
				"nhAccoDate",
				(BiConsumer<AccoNonHotelGenDec, Date>)
					AccoNonHotelGenDec::setNhAccoDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AccoNonHotelGenDec, Long>)
					AccoNonHotelGenDec::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccoNonHotelGenDecId() {
		return _accoNonHotelGenDecId;
	}

	@Override
	public void setAccoNonHotelGenDecId(long accoNonHotelGenDecId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoNonHotelGenDecId = accoNonHotelGenDecId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNhAccoOperatorName() {
		if (_nhAccoOperatorName == null) {
			return "";
		}
		else {
			return _nhAccoOperatorName;
		}
	}

	@Override
	public void setNhAccoOperatorName(String nhAccoOperatorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nhAccoOperatorName = nhAccoOperatorName;
	}

	@JSON
	@Override
	public Date getDateFrom() {
		return _dateFrom;
	}

	@Override
	public void setDateFrom(Date dateFrom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateFrom = dateFrom;
	}

	@JSON
	@Override
	public Date getDateTo() {
		return _dateTo;
	}

	@Override
	public void setDateTo(Date dateTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateTo = dateTo;
	}

	@JSON
	@Override
	public Date getNhAccoSince() {
		return _nhAccoSince;
	}

	@Override
	public void setNhAccoSince(Date nhAccoSince) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nhAccoSince = nhAccoSince;
	}

	@JSON
	@Override
	public Date getNhAccoDate() {
		return _nhAccoDate;
	}

	@Override
	public void setNhAccoDate(Date nhAccoDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nhAccoDate = nhAccoDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccoNonHotelGenDec.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccoNonHotelGenDec.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccoNonHotelGenDec toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccoNonHotelGenDec>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccoNonHotelGenDecImpl accoNonHotelGenDecImpl =
			new AccoNonHotelGenDecImpl();

		accoNonHotelGenDecImpl.setUuid(getUuid());
		accoNonHotelGenDecImpl.setAccoNonHotelGenDecId(
			getAccoNonHotelGenDecId());
		accoNonHotelGenDecImpl.setGroupId(getGroupId());
		accoNonHotelGenDecImpl.setCompanyId(getCompanyId());
		accoNonHotelGenDecImpl.setUserId(getUserId());
		accoNonHotelGenDecImpl.setUserName(getUserName());
		accoNonHotelGenDecImpl.setCreateDate(getCreateDate());
		accoNonHotelGenDecImpl.setModifiedDate(getModifiedDate());
		accoNonHotelGenDecImpl.setNhAccoOperatorName(getNhAccoOperatorName());
		accoNonHotelGenDecImpl.setDateFrom(getDateFrom());
		accoNonHotelGenDecImpl.setDateTo(getDateTo());
		accoNonHotelGenDecImpl.setNhAccoSince(getNhAccoSince());
		accoNonHotelGenDecImpl.setNhAccoDate(getNhAccoDate());
		accoNonHotelGenDecImpl.setJtbApplicationId(getJtbApplicationId());

		accoNonHotelGenDecImpl.resetOriginalValues();

		return accoNonHotelGenDecImpl;
	}

	@Override
	public AccoNonHotelGenDec cloneWithOriginalValues() {
		AccoNonHotelGenDecImpl accoNonHotelGenDecImpl =
			new AccoNonHotelGenDecImpl();

		accoNonHotelGenDecImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accoNonHotelGenDecImpl.setAccoNonHotelGenDecId(
			this.<Long>getColumnOriginalValue("accoNonHotelGenDecId"));
		accoNonHotelGenDecImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accoNonHotelGenDecImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accoNonHotelGenDecImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accoNonHotelGenDecImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accoNonHotelGenDecImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accoNonHotelGenDecImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accoNonHotelGenDecImpl.setNhAccoOperatorName(
			this.<String>getColumnOriginalValue("nhAccoOperatorName"));
		accoNonHotelGenDecImpl.setDateFrom(
			this.<Date>getColumnOriginalValue("dateFrom"));
		accoNonHotelGenDecImpl.setDateTo(
			this.<Date>getColumnOriginalValue("dateTo"));
		accoNonHotelGenDecImpl.setNhAccoSince(
			this.<Date>getColumnOriginalValue("nhAccoSince"));
		accoNonHotelGenDecImpl.setNhAccoDate(
			this.<Date>getColumnOriginalValue("nhAccoDate"));
		accoNonHotelGenDecImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return accoNonHotelGenDecImpl;
	}

	@Override
	public int compareTo(AccoNonHotelGenDec accoNonHotelGenDec) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), accoNonHotelGenDec.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccoNonHotelGenDec)) {
			return false;
		}

		AccoNonHotelGenDec accoNonHotelGenDec = (AccoNonHotelGenDec)object;

		long primaryKey = accoNonHotelGenDec.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccoNonHotelGenDec> toCacheModel() {
		AccoNonHotelGenDecCacheModel accoNonHotelGenDecCacheModel =
			new AccoNonHotelGenDecCacheModel();

		accoNonHotelGenDecCacheModel.uuid = getUuid();

		String uuid = accoNonHotelGenDecCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accoNonHotelGenDecCacheModel.uuid = null;
		}

		accoNonHotelGenDecCacheModel.accoNonHotelGenDecId =
			getAccoNonHotelGenDecId();

		accoNonHotelGenDecCacheModel.groupId = getGroupId();

		accoNonHotelGenDecCacheModel.companyId = getCompanyId();

		accoNonHotelGenDecCacheModel.userId = getUserId();

		accoNonHotelGenDecCacheModel.userName = getUserName();

		String userName = accoNonHotelGenDecCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accoNonHotelGenDecCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accoNonHotelGenDecCacheModel.createDate = createDate.getTime();
		}
		else {
			accoNonHotelGenDecCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accoNonHotelGenDecCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accoNonHotelGenDecCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accoNonHotelGenDecCacheModel.nhAccoOperatorName =
			getNhAccoOperatorName();

		String nhAccoOperatorName =
			accoNonHotelGenDecCacheModel.nhAccoOperatorName;

		if ((nhAccoOperatorName != null) &&
			(nhAccoOperatorName.length() == 0)) {

			accoNonHotelGenDecCacheModel.nhAccoOperatorName = null;
		}

		Date dateFrom = getDateFrom();

		if (dateFrom != null) {
			accoNonHotelGenDecCacheModel.dateFrom = dateFrom.getTime();
		}
		else {
			accoNonHotelGenDecCacheModel.dateFrom = Long.MIN_VALUE;
		}

		Date dateTo = getDateTo();

		if (dateTo != null) {
			accoNonHotelGenDecCacheModel.dateTo = dateTo.getTime();
		}
		else {
			accoNonHotelGenDecCacheModel.dateTo = Long.MIN_VALUE;
		}

		Date nhAccoSince = getNhAccoSince();

		if (nhAccoSince != null) {
			accoNonHotelGenDecCacheModel.nhAccoSince = nhAccoSince.getTime();
		}
		else {
			accoNonHotelGenDecCacheModel.nhAccoSince = Long.MIN_VALUE;
		}

		Date nhAccoDate = getNhAccoDate();

		if (nhAccoDate != null) {
			accoNonHotelGenDecCacheModel.nhAccoDate = nhAccoDate.getTime();
		}
		else {
			accoNonHotelGenDecCacheModel.nhAccoDate = Long.MIN_VALUE;
		}

		accoNonHotelGenDecCacheModel.jtbApplicationId = getJtbApplicationId();

		return accoNonHotelGenDecCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccoNonHotelGenDec, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccoNonHotelGenDec, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoNonHotelGenDec, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccoNonHotelGenDec)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccoNonHotelGenDec>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccoNonHotelGenDec.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accoNonHotelGenDecId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nhAccoOperatorName;
	private Date _dateFrom;
	private Date _dateTo;
	private Date _nhAccoSince;
	private Date _nhAccoDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccoNonHotelGenDec, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccoNonHotelGenDec)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accoNonHotelGenDecId", _accoNonHotelGenDecId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nhAccoOperatorName", _nhAccoOperatorName);
		_columnOriginalValues.put("dateFrom", _dateFrom);
		_columnOriginalValues.put("dateTo", _dateTo);
		_columnOriginalValues.put("nhAccoSince", _nhAccoSince);
		_columnOriginalValues.put("nhAccoDate", _nhAccoDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accoNonHotelGenDecId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("nhAccoOperatorName", 256L);

		columnBitmasks.put("dateFrom", 512L);

		columnBitmasks.put("dateTo", 1024L);

		columnBitmasks.put("nhAccoSince", 2048L);

		columnBitmasks.put("nhAccoDate", 4096L);

		columnBitmasks.put("jtbApplicationId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccoNonHotelGenDec _escapedModel;

}