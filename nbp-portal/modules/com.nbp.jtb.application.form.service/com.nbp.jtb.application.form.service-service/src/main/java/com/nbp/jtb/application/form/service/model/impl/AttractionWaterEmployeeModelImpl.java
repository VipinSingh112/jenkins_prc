/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionWaterEmployee;
import com.nbp.jtb.application.form.service.model.AttractionWaterEmployeeModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionWaterEmployee service. Represents a row in the &quot;nbp_jtb_water_employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionWaterEmployeeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionWaterEmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionWaterEmployeeImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionWaterEmployeeModelImpl
	extends BaseModelImpl<AttractionWaterEmployee>
	implements AttractionWaterEmployeeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction water employee model instance should use the <code>AttractionWaterEmployee</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_water_employee";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionWaterEmpLicId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"applicantName", Types.VARCHAR},
		{"applicantAddress", Types.VARCHAR}, {"applicantAge", Types.VARCHAR},
		{"applicantNationality", Types.VARCHAR},
		{"workPermitApplied", Types.VARCHAR},
		{"workPermitDate", Types.TIMESTAMP}, {"qualification", Types.VARCHAR},
		{"placeOfEmployment", Types.VARCHAR}, {"ownerName", Types.VARCHAR},
		{"cpr", Types.VARCHAR}, {"firstAid", Types.VARCHAR},
		{"medicFirstAid", Types.VARCHAR}, {"lifeguard", Types.VARCHAR},
		{"rescueDiver", Types.VARCHAR}, {"otherRescue", Types.VARCHAR},
		{"employeeSignatureDate", Types.TIMESTAMP},
		{"timePeriod", Types.VARCHAR}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionWaterEmpLicId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAge", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantNationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workPermitApplied", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workPermitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("qualification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfEmployment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cpr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstAid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medicFirstAid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lifeguard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rescueDiver", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRescue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeSignatureDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("timePeriod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_water_employee (attractionWaterEmpLicId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicantName VARCHAR(75) null,applicantAddress VARCHAR(500) null,applicantAge VARCHAR(75) null,applicantNationality VARCHAR(75) null,workPermitApplied VARCHAR(75) null,workPermitDate DATE null,qualification VARCHAR(75) null,placeOfEmployment VARCHAR(75) null,ownerName VARCHAR(75) null,cpr VARCHAR(75) null,firstAid VARCHAR(75) null,medicFirstAid VARCHAR(75) null,lifeguard VARCHAR(75) null,rescueDiver VARCHAR(75) null,otherRescue VARCHAR(75) null,employeeSignatureDate DATE null,timePeriod VARCHAR(75) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_water_employee";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionWaterEmployee.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_water_employee.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionWaterEmployeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionWaterEmpLicId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionWaterEmpLicId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionWaterEmpLicId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionWaterEmployee.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionWaterEmployee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionWaterEmployee, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionWaterEmployee, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionWaterEmployee, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionWaterEmployee)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionWaterEmployee, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionWaterEmployee, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionWaterEmployee)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionWaterEmployee, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionWaterEmployee, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionWaterEmployee, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionWaterEmployee, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionWaterEmployee, Object>>();

			attributeGetterFunctions.put(
				"attractionWaterEmpLicId",
				AttractionWaterEmployee::getAttractionWaterEmpLicId);
			attributeGetterFunctions.put(
				"groupId", AttractionWaterEmployee::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionWaterEmployee::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionWaterEmployee::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionWaterEmployee::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionWaterEmployee::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionWaterEmployee::getModifiedDate);
			attributeGetterFunctions.put(
				"applicantName", AttractionWaterEmployee::getApplicantName);
			attributeGetterFunctions.put(
				"applicantAddress",
				AttractionWaterEmployee::getApplicantAddress);
			attributeGetterFunctions.put(
				"applicantAge", AttractionWaterEmployee::getApplicantAge);
			attributeGetterFunctions.put(
				"applicantNationality",
				AttractionWaterEmployee::getApplicantNationality);
			attributeGetterFunctions.put(
				"workPermitApplied",
				AttractionWaterEmployee::getWorkPermitApplied);
			attributeGetterFunctions.put(
				"workPermitDate", AttractionWaterEmployee::getWorkPermitDate);
			attributeGetterFunctions.put(
				"qualification", AttractionWaterEmployee::getQualification);
			attributeGetterFunctions.put(
				"placeOfEmployment",
				AttractionWaterEmployee::getPlaceOfEmployment);
			attributeGetterFunctions.put(
				"ownerName", AttractionWaterEmployee::getOwnerName);
			attributeGetterFunctions.put(
				"cpr", AttractionWaterEmployee::getCpr);
			attributeGetterFunctions.put(
				"firstAid", AttractionWaterEmployee::getFirstAid);
			attributeGetterFunctions.put(
				"medicFirstAid", AttractionWaterEmployee::getMedicFirstAid);
			attributeGetterFunctions.put(
				"lifeguard", AttractionWaterEmployee::getLifeguard);
			attributeGetterFunctions.put(
				"rescueDiver", AttractionWaterEmployee::getRescueDiver);
			attributeGetterFunctions.put(
				"otherRescue", AttractionWaterEmployee::getOtherRescue);
			attributeGetterFunctions.put(
				"employeeSignatureDate",
				AttractionWaterEmployee::getEmployeeSignatureDate);
			attributeGetterFunctions.put(
				"timePeriod", AttractionWaterEmployee::getTimePeriod);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionWaterEmployee::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionWaterEmployee, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionWaterEmployee, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionWaterEmployee, ?>>();

			attributeSetterBiConsumers.put(
				"attractionWaterEmpLicId",
				(BiConsumer<AttractionWaterEmployee, Long>)
					AttractionWaterEmployee::setAttractionWaterEmpLicId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionWaterEmployee, Long>)
					AttractionWaterEmployee::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionWaterEmployee, Long>)
					AttractionWaterEmployee::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionWaterEmployee, Long>)
					AttractionWaterEmployee::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionWaterEmployee, Date>)
					AttractionWaterEmployee::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionWaterEmployee, Date>)
					AttractionWaterEmployee::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicantName",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setApplicantName);
			attributeSetterBiConsumers.put(
				"applicantAddress",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setApplicantAddress);
			attributeSetterBiConsumers.put(
				"applicantAge",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setApplicantAge);
			attributeSetterBiConsumers.put(
				"applicantNationality",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setApplicantNationality);
			attributeSetterBiConsumers.put(
				"workPermitApplied",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setWorkPermitApplied);
			attributeSetterBiConsumers.put(
				"workPermitDate",
				(BiConsumer<AttractionWaterEmployee, Date>)
					AttractionWaterEmployee::setWorkPermitDate);
			attributeSetterBiConsumers.put(
				"qualification",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setQualification);
			attributeSetterBiConsumers.put(
				"placeOfEmployment",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setPlaceOfEmployment);
			attributeSetterBiConsumers.put(
				"ownerName",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setOwnerName);
			attributeSetterBiConsumers.put(
				"cpr",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setCpr);
			attributeSetterBiConsumers.put(
				"firstAid",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setFirstAid);
			attributeSetterBiConsumers.put(
				"medicFirstAid",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setMedicFirstAid);
			attributeSetterBiConsumers.put(
				"lifeguard",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setLifeguard);
			attributeSetterBiConsumers.put(
				"rescueDiver",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setRescueDiver);
			attributeSetterBiConsumers.put(
				"otherRescue",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setOtherRescue);
			attributeSetterBiConsumers.put(
				"employeeSignatureDate",
				(BiConsumer<AttractionWaterEmployee, Date>)
					AttractionWaterEmployee::setEmployeeSignatureDate);
			attributeSetterBiConsumers.put(
				"timePeriod",
				(BiConsumer<AttractionWaterEmployee, String>)
					AttractionWaterEmployee::setTimePeriod);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionWaterEmployee, Long>)
					AttractionWaterEmployee::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionWaterEmpLicId() {
		return _attractionWaterEmpLicId;
	}

	@Override
	public void setAttractionWaterEmpLicId(long attractionWaterEmpLicId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionWaterEmpLicId = attractionWaterEmpLicId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return "";
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantAddress = applicantAddress;
	}

	@JSON
	@Override
	public String getApplicantAge() {
		if (_applicantAge == null) {
			return "";
		}
		else {
			return _applicantAge;
		}
	}

	@Override
	public void setApplicantAge(String applicantAge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantAge = applicantAge;
	}

	@JSON
	@Override
	public String getApplicantNationality() {
		if (_applicantNationality == null) {
			return "";
		}
		else {
			return _applicantNationality;
		}
	}

	@Override
	public void setApplicantNationality(String applicantNationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantNationality = applicantNationality;
	}

	@JSON
	@Override
	public String getWorkPermitApplied() {
		if (_workPermitApplied == null) {
			return "";
		}
		else {
			return _workPermitApplied;
		}
	}

	@Override
	public void setWorkPermitApplied(String workPermitApplied) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workPermitApplied = workPermitApplied;
	}

	@JSON
	@Override
	public Date getWorkPermitDate() {
		return _workPermitDate;
	}

	@Override
	public void setWorkPermitDate(Date workPermitDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workPermitDate = workPermitDate;
	}

	@JSON
	@Override
	public String getQualification() {
		if (_qualification == null) {
			return "";
		}
		else {
			return _qualification;
		}
	}

	@Override
	public void setQualification(String qualification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualification = qualification;
	}

	@JSON
	@Override
	public String getPlaceOfEmployment() {
		if (_placeOfEmployment == null) {
			return "";
		}
		else {
			return _placeOfEmployment;
		}
	}

	@Override
	public void setPlaceOfEmployment(String placeOfEmployment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfEmployment = placeOfEmployment;
	}

	@JSON
	@Override
	public String getOwnerName() {
		if (_ownerName == null) {
			return "";
		}
		else {
			return _ownerName;
		}
	}

	@Override
	public void setOwnerName(String ownerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerName = ownerName;
	}

	@JSON
	@Override
	public String getCpr() {
		if (_cpr == null) {
			return "";
		}
		else {
			return _cpr;
		}
	}

	@Override
	public void setCpr(String cpr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cpr = cpr;
	}

	@JSON
	@Override
	public String getFirstAid() {
		if (_firstAid == null) {
			return "";
		}
		else {
			return _firstAid;
		}
	}

	@Override
	public void setFirstAid(String firstAid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstAid = firstAid;
	}

	@JSON
	@Override
	public String getMedicFirstAid() {
		if (_medicFirstAid == null) {
			return "";
		}
		else {
			return _medicFirstAid;
		}
	}

	@Override
	public void setMedicFirstAid(String medicFirstAid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_medicFirstAid = medicFirstAid;
	}

	@JSON
	@Override
	public String getLifeguard() {
		if (_lifeguard == null) {
			return "";
		}
		else {
			return _lifeguard;
		}
	}

	@Override
	public void setLifeguard(String lifeguard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lifeguard = lifeguard;
	}

	@JSON
	@Override
	public String getRescueDiver() {
		if (_rescueDiver == null) {
			return "";
		}
		else {
			return _rescueDiver;
		}
	}

	@Override
	public void setRescueDiver(String rescueDiver) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rescueDiver = rescueDiver;
	}

	@JSON
	@Override
	public String getOtherRescue() {
		if (_otherRescue == null) {
			return "";
		}
		else {
			return _otherRescue;
		}
	}

	@Override
	public void setOtherRescue(String otherRescue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRescue = otherRescue;
	}

	@JSON
	@Override
	public Date getEmployeeSignatureDate() {
		return _employeeSignatureDate;
	}

	@Override
	public void setEmployeeSignatureDate(Date employeeSignatureDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeSignatureDate = employeeSignatureDate;
	}

	@JSON
	@Override
	public String getTimePeriod() {
		if (_timePeriod == null) {
			return "";
		}
		else {
			return _timePeriod;
		}
	}

	@Override
	public void setTimePeriod(String timePeriod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_timePeriod = timePeriod;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionWaterEmployee.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionWaterEmployee toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionWaterEmployee>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionWaterEmployeeImpl attractionWaterEmployeeImpl =
			new AttractionWaterEmployeeImpl();

		attractionWaterEmployeeImpl.setAttractionWaterEmpLicId(
			getAttractionWaterEmpLicId());
		attractionWaterEmployeeImpl.setGroupId(getGroupId());
		attractionWaterEmployeeImpl.setCompanyId(getCompanyId());
		attractionWaterEmployeeImpl.setUserId(getUserId());
		attractionWaterEmployeeImpl.setUserName(getUserName());
		attractionWaterEmployeeImpl.setCreateDate(getCreateDate());
		attractionWaterEmployeeImpl.setModifiedDate(getModifiedDate());
		attractionWaterEmployeeImpl.setApplicantName(getApplicantName());
		attractionWaterEmployeeImpl.setApplicantAddress(getApplicantAddress());
		attractionWaterEmployeeImpl.setApplicantAge(getApplicantAge());
		attractionWaterEmployeeImpl.setApplicantNationality(
			getApplicantNationality());
		attractionWaterEmployeeImpl.setWorkPermitApplied(
			getWorkPermitApplied());
		attractionWaterEmployeeImpl.setWorkPermitDate(getWorkPermitDate());
		attractionWaterEmployeeImpl.setQualification(getQualification());
		attractionWaterEmployeeImpl.setPlaceOfEmployment(
			getPlaceOfEmployment());
		attractionWaterEmployeeImpl.setOwnerName(getOwnerName());
		attractionWaterEmployeeImpl.setCpr(getCpr());
		attractionWaterEmployeeImpl.setFirstAid(getFirstAid());
		attractionWaterEmployeeImpl.setMedicFirstAid(getMedicFirstAid());
		attractionWaterEmployeeImpl.setLifeguard(getLifeguard());
		attractionWaterEmployeeImpl.setRescueDiver(getRescueDiver());
		attractionWaterEmployeeImpl.setOtherRescue(getOtherRescue());
		attractionWaterEmployeeImpl.setEmployeeSignatureDate(
			getEmployeeSignatureDate());
		attractionWaterEmployeeImpl.setTimePeriod(getTimePeriod());
		attractionWaterEmployeeImpl.setJtbApplicationId(getJtbApplicationId());

		attractionWaterEmployeeImpl.resetOriginalValues();

		return attractionWaterEmployeeImpl;
	}

	@Override
	public AttractionWaterEmployee cloneWithOriginalValues() {
		AttractionWaterEmployeeImpl attractionWaterEmployeeImpl =
			new AttractionWaterEmployeeImpl();

		attractionWaterEmployeeImpl.setAttractionWaterEmpLicId(
			this.<Long>getColumnOriginalValue("attractionWaterEmpLicId"));
		attractionWaterEmployeeImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionWaterEmployeeImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionWaterEmployeeImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionWaterEmployeeImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionWaterEmployeeImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionWaterEmployeeImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionWaterEmployeeImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		attractionWaterEmployeeImpl.setApplicantAddress(
			this.<String>getColumnOriginalValue("applicantAddress"));
		attractionWaterEmployeeImpl.setApplicantAge(
			this.<String>getColumnOriginalValue("applicantAge"));
		attractionWaterEmployeeImpl.setApplicantNationality(
			this.<String>getColumnOriginalValue("applicantNationality"));
		attractionWaterEmployeeImpl.setWorkPermitApplied(
			this.<String>getColumnOriginalValue("workPermitApplied"));
		attractionWaterEmployeeImpl.setWorkPermitDate(
			this.<Date>getColumnOriginalValue("workPermitDate"));
		attractionWaterEmployeeImpl.setQualification(
			this.<String>getColumnOriginalValue("qualification"));
		attractionWaterEmployeeImpl.setPlaceOfEmployment(
			this.<String>getColumnOriginalValue("placeOfEmployment"));
		attractionWaterEmployeeImpl.setOwnerName(
			this.<String>getColumnOriginalValue("ownerName"));
		attractionWaterEmployeeImpl.setCpr(
			this.<String>getColumnOriginalValue("cpr"));
		attractionWaterEmployeeImpl.setFirstAid(
			this.<String>getColumnOriginalValue("firstAid"));
		attractionWaterEmployeeImpl.setMedicFirstAid(
			this.<String>getColumnOriginalValue("medicFirstAid"));
		attractionWaterEmployeeImpl.setLifeguard(
			this.<String>getColumnOriginalValue("lifeguard"));
		attractionWaterEmployeeImpl.setRescueDiver(
			this.<String>getColumnOriginalValue("rescueDiver"));
		attractionWaterEmployeeImpl.setOtherRescue(
			this.<String>getColumnOriginalValue("otherRescue"));
		attractionWaterEmployeeImpl.setEmployeeSignatureDate(
			this.<Date>getColumnOriginalValue("employeeSignatureDate"));
		attractionWaterEmployeeImpl.setTimePeriod(
			this.<String>getColumnOriginalValue("timePeriod"));
		attractionWaterEmployeeImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionWaterEmployeeImpl;
	}

	@Override
	public int compareTo(AttractionWaterEmployee attractionWaterEmployee) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionWaterEmployee.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionWaterEmployee)) {
			return false;
		}

		AttractionWaterEmployee attractionWaterEmployee =
			(AttractionWaterEmployee)object;

		long primaryKey = attractionWaterEmployee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionWaterEmployee> toCacheModel() {
		AttractionWaterEmployeeCacheModel attractionWaterEmployeeCacheModel =
			new AttractionWaterEmployeeCacheModel();

		attractionWaterEmployeeCacheModel.attractionWaterEmpLicId =
			getAttractionWaterEmpLicId();

		attractionWaterEmployeeCacheModel.groupId = getGroupId();

		attractionWaterEmployeeCacheModel.companyId = getCompanyId();

		attractionWaterEmployeeCacheModel.userId = getUserId();

		attractionWaterEmployeeCacheModel.userName = getUserName();

		String userName = attractionWaterEmployeeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionWaterEmployeeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionWaterEmployeeCacheModel.createDate = createDate.getTime();
		}
		else {
			attractionWaterEmployeeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionWaterEmployeeCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionWaterEmployeeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionWaterEmployeeCacheModel.applicantName = getApplicantName();

		String applicantName = attractionWaterEmployeeCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			attractionWaterEmployeeCacheModel.applicantName = null;
		}

		attractionWaterEmployeeCacheModel.applicantAddress =
			getApplicantAddress();

		String applicantAddress =
			attractionWaterEmployeeCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			attractionWaterEmployeeCacheModel.applicantAddress = null;
		}

		attractionWaterEmployeeCacheModel.applicantAge = getApplicantAge();

		String applicantAge = attractionWaterEmployeeCacheModel.applicantAge;

		if ((applicantAge != null) && (applicantAge.length() == 0)) {
			attractionWaterEmployeeCacheModel.applicantAge = null;
		}

		attractionWaterEmployeeCacheModel.applicantNationality =
			getApplicantNationality();

		String applicantNationality =
			attractionWaterEmployeeCacheModel.applicantNationality;

		if ((applicantNationality != null) &&
			(applicantNationality.length() == 0)) {

			attractionWaterEmployeeCacheModel.applicantNationality = null;
		}

		attractionWaterEmployeeCacheModel.workPermitApplied =
			getWorkPermitApplied();

		String workPermitApplied =
			attractionWaterEmployeeCacheModel.workPermitApplied;

		if ((workPermitApplied != null) && (workPermitApplied.length() == 0)) {
			attractionWaterEmployeeCacheModel.workPermitApplied = null;
		}

		Date workPermitDate = getWorkPermitDate();

		if (workPermitDate != null) {
			attractionWaterEmployeeCacheModel.workPermitDate =
				workPermitDate.getTime();
		}
		else {
			attractionWaterEmployeeCacheModel.workPermitDate = Long.MIN_VALUE;
		}

		attractionWaterEmployeeCacheModel.qualification = getQualification();

		String qualification = attractionWaterEmployeeCacheModel.qualification;

		if ((qualification != null) && (qualification.length() == 0)) {
			attractionWaterEmployeeCacheModel.qualification = null;
		}

		attractionWaterEmployeeCacheModel.placeOfEmployment =
			getPlaceOfEmployment();

		String placeOfEmployment =
			attractionWaterEmployeeCacheModel.placeOfEmployment;

		if ((placeOfEmployment != null) && (placeOfEmployment.length() == 0)) {
			attractionWaterEmployeeCacheModel.placeOfEmployment = null;
		}

		attractionWaterEmployeeCacheModel.ownerName = getOwnerName();

		String ownerName = attractionWaterEmployeeCacheModel.ownerName;

		if ((ownerName != null) && (ownerName.length() == 0)) {
			attractionWaterEmployeeCacheModel.ownerName = null;
		}

		attractionWaterEmployeeCacheModel.cpr = getCpr();

		String cpr = attractionWaterEmployeeCacheModel.cpr;

		if ((cpr != null) && (cpr.length() == 0)) {
			attractionWaterEmployeeCacheModel.cpr = null;
		}

		attractionWaterEmployeeCacheModel.firstAid = getFirstAid();

		String firstAid = attractionWaterEmployeeCacheModel.firstAid;

		if ((firstAid != null) && (firstAid.length() == 0)) {
			attractionWaterEmployeeCacheModel.firstAid = null;
		}

		attractionWaterEmployeeCacheModel.medicFirstAid = getMedicFirstAid();

		String medicFirstAid = attractionWaterEmployeeCacheModel.medicFirstAid;

		if ((medicFirstAid != null) && (medicFirstAid.length() == 0)) {
			attractionWaterEmployeeCacheModel.medicFirstAid = null;
		}

		attractionWaterEmployeeCacheModel.lifeguard = getLifeguard();

		String lifeguard = attractionWaterEmployeeCacheModel.lifeguard;

		if ((lifeguard != null) && (lifeguard.length() == 0)) {
			attractionWaterEmployeeCacheModel.lifeguard = null;
		}

		attractionWaterEmployeeCacheModel.rescueDiver = getRescueDiver();

		String rescueDiver = attractionWaterEmployeeCacheModel.rescueDiver;

		if ((rescueDiver != null) && (rescueDiver.length() == 0)) {
			attractionWaterEmployeeCacheModel.rescueDiver = null;
		}

		attractionWaterEmployeeCacheModel.otherRescue = getOtherRescue();

		String otherRescue = attractionWaterEmployeeCacheModel.otherRescue;

		if ((otherRescue != null) && (otherRescue.length() == 0)) {
			attractionWaterEmployeeCacheModel.otherRescue = null;
		}

		Date employeeSignatureDate = getEmployeeSignatureDate();

		if (employeeSignatureDate != null) {
			attractionWaterEmployeeCacheModel.employeeSignatureDate =
				employeeSignatureDate.getTime();
		}
		else {
			attractionWaterEmployeeCacheModel.employeeSignatureDate =
				Long.MIN_VALUE;
		}

		attractionWaterEmployeeCacheModel.timePeriod = getTimePeriod();

		String timePeriod = attractionWaterEmployeeCacheModel.timePeriod;

		if ((timePeriod != null) && (timePeriod.length() == 0)) {
			attractionWaterEmployeeCacheModel.timePeriod = null;
		}

		attractionWaterEmployeeCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionWaterEmployeeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionWaterEmployee, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionWaterEmployee, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionWaterEmployee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionWaterEmployee)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionWaterEmployee>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AttractionWaterEmployee.class, ModelWrapper.class);

	}

	private long _attractionWaterEmpLicId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicantName;
	private String _applicantAddress;
	private String _applicantAge;
	private String _applicantNationality;
	private String _workPermitApplied;
	private Date _workPermitDate;
	private String _qualification;
	private String _placeOfEmployment;
	private String _ownerName;
	private String _cpr;
	private String _firstAid;
	private String _medicFirstAid;
	private String _lifeguard;
	private String _rescueDiver;
	private String _otherRescue;
	private Date _employeeSignatureDate;
	private String _timePeriod;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionWaterEmployee, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionWaterEmployee)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionWaterEmpLicId", _attractionWaterEmpLicId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("applicantAddress", _applicantAddress);
		_columnOriginalValues.put("applicantAge", _applicantAge);
		_columnOriginalValues.put(
			"applicantNationality", _applicantNationality);
		_columnOriginalValues.put("workPermitApplied", _workPermitApplied);
		_columnOriginalValues.put("workPermitDate", _workPermitDate);
		_columnOriginalValues.put("qualification", _qualification);
		_columnOriginalValues.put("placeOfEmployment", _placeOfEmployment);
		_columnOriginalValues.put("ownerName", _ownerName);
		_columnOriginalValues.put("cpr", _cpr);
		_columnOriginalValues.put("firstAid", _firstAid);
		_columnOriginalValues.put("medicFirstAid", _medicFirstAid);
		_columnOriginalValues.put("lifeguard", _lifeguard);
		_columnOriginalValues.put("rescueDiver", _rescueDiver);
		_columnOriginalValues.put("otherRescue", _otherRescue);
		_columnOriginalValues.put(
			"employeeSignatureDate", _employeeSignatureDate);
		_columnOriginalValues.put("timePeriod", _timePeriod);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionWaterEmpLicId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("applicantName", 128L);

		columnBitmasks.put("applicantAddress", 256L);

		columnBitmasks.put("applicantAge", 512L);

		columnBitmasks.put("applicantNationality", 1024L);

		columnBitmasks.put("workPermitApplied", 2048L);

		columnBitmasks.put("workPermitDate", 4096L);

		columnBitmasks.put("qualification", 8192L);

		columnBitmasks.put("placeOfEmployment", 16384L);

		columnBitmasks.put("ownerName", 32768L);

		columnBitmasks.put("cpr", 65536L);

		columnBitmasks.put("firstAid", 131072L);

		columnBitmasks.put("medicFirstAid", 262144L);

		columnBitmasks.put("lifeguard", 524288L);

		columnBitmasks.put("rescueDiver", 1048576L);

		columnBitmasks.put("otherRescue", 2097152L);

		columnBitmasks.put("employeeSignatureDate", 4194304L);

		columnBitmasks.put("timePeriod", 8388608L);

		columnBitmasks.put("jtbApplicationId", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionWaterEmployee _escapedModel;

}