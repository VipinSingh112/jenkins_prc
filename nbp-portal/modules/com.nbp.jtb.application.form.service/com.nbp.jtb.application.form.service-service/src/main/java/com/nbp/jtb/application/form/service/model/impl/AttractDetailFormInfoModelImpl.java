/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractDetailFormInfo;
import com.nbp.jtb.application.form.service.model.AttractDetailFormInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractDetailFormInfo service. Represents a row in the &quot;nbp_jtb_attract_detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractDetailFormInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractDetailFormInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractDetailFormInfoImpl
 * @generated
 */
@JSON(strict = true)
public class AttractDetailFormInfoModelImpl
	extends BaseModelImpl<AttractDetailFormInfo>
	implements AttractDetailFormInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attract detail form info model instance should use the <code>AttractDetailFormInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_attract_detail";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractDetailFormInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"newAttractionsOwnerName", Types.VARCHAR},
		{"newAttractionsLocation", Types.VARCHAR},
		{"newAttractionsMailing", Types.VARCHAR},
		{"newAttractionsTelephone", Types.VARCHAR},
		{"newAttractionsFaxNum", Types.VARCHAR},
		{"newAttractionsEmailAddr", Types.VARCHAR},
		{"newAttractionsEmpNum", Types.VARCHAR},
		{"newAttractionsParish", Types.VARCHAR},
		{"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractDetailFormInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("newAttractionsOwnerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newAttractionsLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newAttractionsMailing", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newAttractionsTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newAttractionsFaxNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newAttractionsEmailAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newAttractionsEmpNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newAttractionsParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_attract_detail (attractDetailFormInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,newAttractionsOwnerName VARCHAR(75) null,newAttractionsLocation VARCHAR(75) null,newAttractionsMailing VARCHAR(500) null,newAttractionsTelephone VARCHAR(75) null,newAttractionsFaxNum VARCHAR(75) null,newAttractionsEmailAddr VARCHAR(75) null,newAttractionsEmpNum VARCHAR(75) null,newAttractionsParish VARCHAR(75) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_attract_detail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractDetailFormInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_attract_detail.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractDetailFormInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractDetailFormInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractDetailFormInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractDetailFormInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractDetailFormInfo.class;
	}

	@Override
	public String getModelClassName() {
		return AttractDetailFormInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractDetailFormInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractDetailFormInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractDetailFormInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractDetailFormInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractDetailFormInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractDetailFormInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractDetailFormInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractDetailFormInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractDetailFormInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractDetailFormInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractDetailFormInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractDetailFormInfo, Object>>();

			attributeGetterFunctions.put(
				"attractDetailFormInfoId",
				AttractDetailFormInfo::getAttractDetailFormInfoId);
			attributeGetterFunctions.put(
				"groupId", AttractDetailFormInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractDetailFormInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractDetailFormInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractDetailFormInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractDetailFormInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractDetailFormInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"newAttractionsOwnerName",
				AttractDetailFormInfo::getNewAttractionsOwnerName);
			attributeGetterFunctions.put(
				"newAttractionsLocation",
				AttractDetailFormInfo::getNewAttractionsLocation);
			attributeGetterFunctions.put(
				"newAttractionsMailing",
				AttractDetailFormInfo::getNewAttractionsMailing);
			attributeGetterFunctions.put(
				"newAttractionsTelephone",
				AttractDetailFormInfo::getNewAttractionsTelephone);
			attributeGetterFunctions.put(
				"newAttractionsFaxNum",
				AttractDetailFormInfo::getNewAttractionsFaxNum);
			attributeGetterFunctions.put(
				"newAttractionsEmailAddr",
				AttractDetailFormInfo::getNewAttractionsEmailAddr);
			attributeGetterFunctions.put(
				"newAttractionsEmpNum",
				AttractDetailFormInfo::getNewAttractionsEmpNum);
			attributeGetterFunctions.put(
				"newAttractionsParish",
				AttractDetailFormInfo::getNewAttractionsParish);
			attributeGetterFunctions.put(
				"jtbApplicationId", AttractDetailFormInfo::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractDetailFormInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractDetailFormInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractDetailFormInfo, ?>>();

			attributeSetterBiConsumers.put(
				"attractDetailFormInfoId",
				(BiConsumer<AttractDetailFormInfo, Long>)
					AttractDetailFormInfo::setAttractDetailFormInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractDetailFormInfo, Long>)
					AttractDetailFormInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractDetailFormInfo, Long>)
					AttractDetailFormInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractDetailFormInfo, Long>)
					AttractDetailFormInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractDetailFormInfo, Date>)
					AttractDetailFormInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractDetailFormInfo, Date>)
					AttractDetailFormInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"newAttractionsOwnerName",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setNewAttractionsOwnerName);
			attributeSetterBiConsumers.put(
				"newAttractionsLocation",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setNewAttractionsLocation);
			attributeSetterBiConsumers.put(
				"newAttractionsMailing",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setNewAttractionsMailing);
			attributeSetterBiConsumers.put(
				"newAttractionsTelephone",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setNewAttractionsTelephone);
			attributeSetterBiConsumers.put(
				"newAttractionsFaxNum",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setNewAttractionsFaxNum);
			attributeSetterBiConsumers.put(
				"newAttractionsEmailAddr",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setNewAttractionsEmailAddr);
			attributeSetterBiConsumers.put(
				"newAttractionsEmpNum",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setNewAttractionsEmpNum);
			attributeSetterBiConsumers.put(
				"newAttractionsParish",
				(BiConsumer<AttractDetailFormInfo, String>)
					AttractDetailFormInfo::setNewAttractionsParish);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractDetailFormInfo, Long>)
					AttractDetailFormInfo::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractDetailFormInfoId() {
		return _attractDetailFormInfoId;
	}

	@Override
	public void setAttractDetailFormInfoId(long attractDetailFormInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractDetailFormInfoId = attractDetailFormInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNewAttractionsOwnerName() {
		if (_newAttractionsOwnerName == null) {
			return "";
		}
		else {
			return _newAttractionsOwnerName;
		}
	}

	@Override
	public void setNewAttractionsOwnerName(String newAttractionsOwnerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newAttractionsOwnerName = newAttractionsOwnerName;
	}

	@JSON
	@Override
	public String getNewAttractionsLocation() {
		if (_newAttractionsLocation == null) {
			return "";
		}
		else {
			return _newAttractionsLocation;
		}
	}

	@Override
	public void setNewAttractionsLocation(String newAttractionsLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newAttractionsLocation = newAttractionsLocation;
	}

	@JSON
	@Override
	public String getNewAttractionsMailing() {
		if (_newAttractionsMailing == null) {
			return "";
		}
		else {
			return _newAttractionsMailing;
		}
	}

	@Override
	public void setNewAttractionsMailing(String newAttractionsMailing) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newAttractionsMailing = newAttractionsMailing;
	}

	@JSON
	@Override
	public String getNewAttractionsTelephone() {
		if (_newAttractionsTelephone == null) {
			return "";
		}
		else {
			return _newAttractionsTelephone;
		}
	}

	@Override
	public void setNewAttractionsTelephone(String newAttractionsTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newAttractionsTelephone = newAttractionsTelephone;
	}

	@JSON
	@Override
	public String getNewAttractionsFaxNum() {
		if (_newAttractionsFaxNum == null) {
			return "";
		}
		else {
			return _newAttractionsFaxNum;
		}
	}

	@Override
	public void setNewAttractionsFaxNum(String newAttractionsFaxNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newAttractionsFaxNum = newAttractionsFaxNum;
	}

	@JSON
	@Override
	public String getNewAttractionsEmailAddr() {
		if (_newAttractionsEmailAddr == null) {
			return "";
		}
		else {
			return _newAttractionsEmailAddr;
		}
	}

	@Override
	public void setNewAttractionsEmailAddr(String newAttractionsEmailAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newAttractionsEmailAddr = newAttractionsEmailAddr;
	}

	@JSON
	@Override
	public String getNewAttractionsEmpNum() {
		if (_newAttractionsEmpNum == null) {
			return "";
		}
		else {
			return _newAttractionsEmpNum;
		}
	}

	@Override
	public void setNewAttractionsEmpNum(String newAttractionsEmpNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newAttractionsEmpNum = newAttractionsEmpNum;
	}

	@JSON
	@Override
	public String getNewAttractionsParish() {
		if (_newAttractionsParish == null) {
			return "";
		}
		else {
			return _newAttractionsParish;
		}
	}

	@Override
	public void setNewAttractionsParish(String newAttractionsParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newAttractionsParish = newAttractionsParish;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractDetailFormInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractDetailFormInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractDetailFormInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractDetailFormInfoImpl attractDetailFormInfoImpl =
			new AttractDetailFormInfoImpl();

		attractDetailFormInfoImpl.setAttractDetailFormInfoId(
			getAttractDetailFormInfoId());
		attractDetailFormInfoImpl.setGroupId(getGroupId());
		attractDetailFormInfoImpl.setCompanyId(getCompanyId());
		attractDetailFormInfoImpl.setUserId(getUserId());
		attractDetailFormInfoImpl.setUserName(getUserName());
		attractDetailFormInfoImpl.setCreateDate(getCreateDate());
		attractDetailFormInfoImpl.setModifiedDate(getModifiedDate());
		attractDetailFormInfoImpl.setNewAttractionsOwnerName(
			getNewAttractionsOwnerName());
		attractDetailFormInfoImpl.setNewAttractionsLocation(
			getNewAttractionsLocation());
		attractDetailFormInfoImpl.setNewAttractionsMailing(
			getNewAttractionsMailing());
		attractDetailFormInfoImpl.setNewAttractionsTelephone(
			getNewAttractionsTelephone());
		attractDetailFormInfoImpl.setNewAttractionsFaxNum(
			getNewAttractionsFaxNum());
		attractDetailFormInfoImpl.setNewAttractionsEmailAddr(
			getNewAttractionsEmailAddr());
		attractDetailFormInfoImpl.setNewAttractionsEmpNum(
			getNewAttractionsEmpNum());
		attractDetailFormInfoImpl.setNewAttractionsParish(
			getNewAttractionsParish());
		attractDetailFormInfoImpl.setJtbApplicationId(getJtbApplicationId());

		attractDetailFormInfoImpl.resetOriginalValues();

		return attractDetailFormInfoImpl;
	}

	@Override
	public AttractDetailFormInfo cloneWithOriginalValues() {
		AttractDetailFormInfoImpl attractDetailFormInfoImpl =
			new AttractDetailFormInfoImpl();

		attractDetailFormInfoImpl.setAttractDetailFormInfoId(
			this.<Long>getColumnOriginalValue("attractDetailFormInfoId"));
		attractDetailFormInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractDetailFormInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractDetailFormInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractDetailFormInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractDetailFormInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractDetailFormInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractDetailFormInfoImpl.setNewAttractionsOwnerName(
			this.<String>getColumnOriginalValue("newAttractionsOwnerName"));
		attractDetailFormInfoImpl.setNewAttractionsLocation(
			this.<String>getColumnOriginalValue("newAttractionsLocation"));
		attractDetailFormInfoImpl.setNewAttractionsMailing(
			this.<String>getColumnOriginalValue("newAttractionsMailing"));
		attractDetailFormInfoImpl.setNewAttractionsTelephone(
			this.<String>getColumnOriginalValue("newAttractionsTelephone"));
		attractDetailFormInfoImpl.setNewAttractionsFaxNum(
			this.<String>getColumnOriginalValue("newAttractionsFaxNum"));
		attractDetailFormInfoImpl.setNewAttractionsEmailAddr(
			this.<String>getColumnOriginalValue("newAttractionsEmailAddr"));
		attractDetailFormInfoImpl.setNewAttractionsEmpNum(
			this.<String>getColumnOriginalValue("newAttractionsEmpNum"));
		attractDetailFormInfoImpl.setNewAttractionsParish(
			this.<String>getColumnOriginalValue("newAttractionsParish"));
		attractDetailFormInfoImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractDetailFormInfoImpl;
	}

	@Override
	public int compareTo(AttractDetailFormInfo attractDetailFormInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractDetailFormInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractDetailFormInfo)) {
			return false;
		}

		AttractDetailFormInfo attractDetailFormInfo =
			(AttractDetailFormInfo)object;

		long primaryKey = attractDetailFormInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractDetailFormInfo> toCacheModel() {
		AttractDetailFormInfoCacheModel attractDetailFormInfoCacheModel =
			new AttractDetailFormInfoCacheModel();

		attractDetailFormInfoCacheModel.attractDetailFormInfoId =
			getAttractDetailFormInfoId();

		attractDetailFormInfoCacheModel.groupId = getGroupId();

		attractDetailFormInfoCacheModel.companyId = getCompanyId();

		attractDetailFormInfoCacheModel.userId = getUserId();

		attractDetailFormInfoCacheModel.userName = getUserName();

		String userName = attractDetailFormInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractDetailFormInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractDetailFormInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			attractDetailFormInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractDetailFormInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractDetailFormInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractDetailFormInfoCacheModel.newAttractionsOwnerName =
			getNewAttractionsOwnerName();

		String newAttractionsOwnerName =
			attractDetailFormInfoCacheModel.newAttractionsOwnerName;

		if ((newAttractionsOwnerName != null) &&
			(newAttractionsOwnerName.length() == 0)) {

			attractDetailFormInfoCacheModel.newAttractionsOwnerName = null;
		}

		attractDetailFormInfoCacheModel.newAttractionsLocation =
			getNewAttractionsLocation();

		String newAttractionsLocation =
			attractDetailFormInfoCacheModel.newAttractionsLocation;

		if ((newAttractionsLocation != null) &&
			(newAttractionsLocation.length() == 0)) {

			attractDetailFormInfoCacheModel.newAttractionsLocation = null;
		}

		attractDetailFormInfoCacheModel.newAttractionsMailing =
			getNewAttractionsMailing();

		String newAttractionsMailing =
			attractDetailFormInfoCacheModel.newAttractionsMailing;

		if ((newAttractionsMailing != null) &&
			(newAttractionsMailing.length() == 0)) {

			attractDetailFormInfoCacheModel.newAttractionsMailing = null;
		}

		attractDetailFormInfoCacheModel.newAttractionsTelephone =
			getNewAttractionsTelephone();

		String newAttractionsTelephone =
			attractDetailFormInfoCacheModel.newAttractionsTelephone;

		if ((newAttractionsTelephone != null) &&
			(newAttractionsTelephone.length() == 0)) {

			attractDetailFormInfoCacheModel.newAttractionsTelephone = null;
		}

		attractDetailFormInfoCacheModel.newAttractionsFaxNum =
			getNewAttractionsFaxNum();

		String newAttractionsFaxNum =
			attractDetailFormInfoCacheModel.newAttractionsFaxNum;

		if ((newAttractionsFaxNum != null) &&
			(newAttractionsFaxNum.length() == 0)) {

			attractDetailFormInfoCacheModel.newAttractionsFaxNum = null;
		}

		attractDetailFormInfoCacheModel.newAttractionsEmailAddr =
			getNewAttractionsEmailAddr();

		String newAttractionsEmailAddr =
			attractDetailFormInfoCacheModel.newAttractionsEmailAddr;

		if ((newAttractionsEmailAddr != null) &&
			(newAttractionsEmailAddr.length() == 0)) {

			attractDetailFormInfoCacheModel.newAttractionsEmailAddr = null;
		}

		attractDetailFormInfoCacheModel.newAttractionsEmpNum =
			getNewAttractionsEmpNum();

		String newAttractionsEmpNum =
			attractDetailFormInfoCacheModel.newAttractionsEmpNum;

		if ((newAttractionsEmpNum != null) &&
			(newAttractionsEmpNum.length() == 0)) {

			attractDetailFormInfoCacheModel.newAttractionsEmpNum = null;
		}

		attractDetailFormInfoCacheModel.newAttractionsParish =
			getNewAttractionsParish();

		String newAttractionsParish =
			attractDetailFormInfoCacheModel.newAttractionsParish;

		if ((newAttractionsParish != null) &&
			(newAttractionsParish.length() == 0)) {

			attractDetailFormInfoCacheModel.newAttractionsParish = null;
		}

		attractDetailFormInfoCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractDetailFormInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractDetailFormInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractDetailFormInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractDetailFormInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractDetailFormInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AttractDetailFormInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AttractDetailFormInfo.class, ModelWrapper.class);

	}

	private long _attractDetailFormInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _newAttractionsOwnerName;
	private String _newAttractionsLocation;
	private String _newAttractionsMailing;
	private String _newAttractionsTelephone;
	private String _newAttractionsFaxNum;
	private String _newAttractionsEmailAddr;
	private String _newAttractionsEmpNum;
	private String _newAttractionsParish;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractDetailFormInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractDetailFormInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractDetailFormInfoId", _attractDetailFormInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"newAttractionsOwnerName", _newAttractionsOwnerName);
		_columnOriginalValues.put(
			"newAttractionsLocation", _newAttractionsLocation);
		_columnOriginalValues.put(
			"newAttractionsMailing", _newAttractionsMailing);
		_columnOriginalValues.put(
			"newAttractionsTelephone", _newAttractionsTelephone);
		_columnOriginalValues.put(
			"newAttractionsFaxNum", _newAttractionsFaxNum);
		_columnOriginalValues.put(
			"newAttractionsEmailAddr", _newAttractionsEmailAddr);
		_columnOriginalValues.put(
			"newAttractionsEmpNum", _newAttractionsEmpNum);
		_columnOriginalValues.put(
			"newAttractionsParish", _newAttractionsParish);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractDetailFormInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("newAttractionsOwnerName", 128L);

		columnBitmasks.put("newAttractionsLocation", 256L);

		columnBitmasks.put("newAttractionsMailing", 512L);

		columnBitmasks.put("newAttractionsTelephone", 1024L);

		columnBitmasks.put("newAttractionsFaxNum", 2048L);

		columnBitmasks.put("newAttractionsEmailAddr", 4096L);

		columnBitmasks.put("newAttractionsEmpNum", 8192L);

		columnBitmasks.put("newAttractionsParish", 16384L);

		columnBitmasks.put("jtbApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractDetailFormInfo _escapedModel;

}