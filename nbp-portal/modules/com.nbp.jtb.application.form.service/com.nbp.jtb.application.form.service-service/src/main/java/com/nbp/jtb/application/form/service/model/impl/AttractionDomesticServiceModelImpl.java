/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionDomesticService;
import com.nbp.jtb.application.form.service.model.AttractionDomesticServiceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionDomesticService service. Represents a row in the &quot;nbp_jtb_domestic_service&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionDomesticServiceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionDomesticServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionDomesticServiceImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionDomesticServiceModelImpl
	extends BaseModelImpl<AttractionDomesticService>
	implements AttractionDomesticServiceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction domestic service model instance should use the <code>AttractionDomesticService</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_domestic_service";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionDomesticServId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"individualsApartment", Types.VARCHAR},
		{"airportAssistance", Types.VARCHAR}, {"entireTour", Types.VARCHAR},
		{"transfersDeparture", Types.VARCHAR},
		{"individualGroups", Types.VARCHAR},
		{"organizedconJunction", Types.VARCHAR},
		{"dailyTransportation", Types.VARCHAR},
		{"entertainment", Types.VARCHAR},
		{"domesticTourSealDate", Types.TIMESTAMP},
		{"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionDomesticServId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("individualsApartment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("airportAssistance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entireTour", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transfersDeparture", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("individualGroups", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizedconJunction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dailyTransportation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entertainment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourSealDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_domestic_service (attractionDomesticServId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,individualsApartment VARCHAR(75) null,airportAssistance VARCHAR(75) null,entireTour VARCHAR(75) null,transfersDeparture VARCHAR(75) null,individualGroups VARCHAR(75) null,organizedconJunction VARCHAR(75) null,dailyTransportation VARCHAR(75) null,entertainment VARCHAR(75) null,domesticTourSealDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_domestic_service";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionDomesticService.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_domestic_service.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionDomesticServiceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionDomesticServId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionDomesticServId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionDomesticServId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionDomesticService.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionDomesticService.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionDomesticService, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionDomesticService, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionDomesticService, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionDomesticService)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionDomesticService, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionDomesticService, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionDomesticService)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionDomesticService, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionDomesticService, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionDomesticService, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionDomesticService, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionDomesticService, Object>>();

			attributeGetterFunctions.put(
				"attractionDomesticServId",
				AttractionDomesticService::getAttractionDomesticServId);
			attributeGetterFunctions.put(
				"groupId", AttractionDomesticService::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionDomesticService::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionDomesticService::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionDomesticService::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionDomesticService::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionDomesticService::getModifiedDate);
			attributeGetterFunctions.put(
				"individualsApartment",
				AttractionDomesticService::getIndividualsApartment);
			attributeGetterFunctions.put(
				"airportAssistance",
				AttractionDomesticService::getAirportAssistance);
			attributeGetterFunctions.put(
				"entireTour", AttractionDomesticService::getEntireTour);
			attributeGetterFunctions.put(
				"transfersDeparture",
				AttractionDomesticService::getTransfersDeparture);
			attributeGetterFunctions.put(
				"individualGroups",
				AttractionDomesticService::getIndividualGroups);
			attributeGetterFunctions.put(
				"organizedconJunction",
				AttractionDomesticService::getOrganizedconJunction);
			attributeGetterFunctions.put(
				"dailyTransportation",
				AttractionDomesticService::getDailyTransportation);
			attributeGetterFunctions.put(
				"entertainment", AttractionDomesticService::getEntertainment);
			attributeGetterFunctions.put(
				"domesticTourSealDate",
				AttractionDomesticService::getDomesticTourSealDate);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionDomesticService::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionDomesticService, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionDomesticService, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionDomesticService, ?>>();

			attributeSetterBiConsumers.put(
				"attractionDomesticServId",
				(BiConsumer<AttractionDomesticService, Long>)
					AttractionDomesticService::setAttractionDomesticServId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionDomesticService, Long>)
					AttractionDomesticService::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionDomesticService, Long>)
					AttractionDomesticService::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionDomesticService, Long>)
					AttractionDomesticService::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionDomesticService, Date>)
					AttractionDomesticService::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionDomesticService, Date>)
					AttractionDomesticService::setModifiedDate);
			attributeSetterBiConsumers.put(
				"individualsApartment",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setIndividualsApartment);
			attributeSetterBiConsumers.put(
				"airportAssistance",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setAirportAssistance);
			attributeSetterBiConsumers.put(
				"entireTour",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setEntireTour);
			attributeSetterBiConsumers.put(
				"transfersDeparture",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setTransfersDeparture);
			attributeSetterBiConsumers.put(
				"individualGroups",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setIndividualGroups);
			attributeSetterBiConsumers.put(
				"organizedconJunction",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setOrganizedconJunction);
			attributeSetterBiConsumers.put(
				"dailyTransportation",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setDailyTransportation);
			attributeSetterBiConsumers.put(
				"entertainment",
				(BiConsumer<AttractionDomesticService, String>)
					AttractionDomesticService::setEntertainment);
			attributeSetterBiConsumers.put(
				"domesticTourSealDate",
				(BiConsumer<AttractionDomesticService, Date>)
					AttractionDomesticService::setDomesticTourSealDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionDomesticService, Long>)
					AttractionDomesticService::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionDomesticServId() {
		return _attractionDomesticServId;
	}

	@Override
	public void setAttractionDomesticServId(long attractionDomesticServId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionDomesticServId = attractionDomesticServId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getIndividualsApartment() {
		if (_individualsApartment == null) {
			return "";
		}
		else {
			return _individualsApartment;
		}
	}

	@Override
	public void setIndividualsApartment(String individualsApartment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_individualsApartment = individualsApartment;
	}

	@JSON
	@Override
	public String getAirportAssistance() {
		if (_airportAssistance == null) {
			return "";
		}
		else {
			return _airportAssistance;
		}
	}

	@Override
	public void setAirportAssistance(String airportAssistance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_airportAssistance = airportAssistance;
	}

	@JSON
	@Override
	public String getEntireTour() {
		if (_entireTour == null) {
			return "";
		}
		else {
			return _entireTour;
		}
	}

	@Override
	public void setEntireTour(String entireTour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entireTour = entireTour;
	}

	@JSON
	@Override
	public String getTransfersDeparture() {
		if (_transfersDeparture == null) {
			return "";
		}
		else {
			return _transfersDeparture;
		}
	}

	@Override
	public void setTransfersDeparture(String transfersDeparture) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transfersDeparture = transfersDeparture;
	}

	@JSON
	@Override
	public String getIndividualGroups() {
		if (_individualGroups == null) {
			return "";
		}
		else {
			return _individualGroups;
		}
	}

	@Override
	public void setIndividualGroups(String individualGroups) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_individualGroups = individualGroups;
	}

	@JSON
	@Override
	public String getOrganizedconJunction() {
		if (_organizedconJunction == null) {
			return "";
		}
		else {
			return _organizedconJunction;
		}
	}

	@Override
	public void setOrganizedconJunction(String organizedconJunction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizedconJunction = organizedconJunction;
	}

	@JSON
	@Override
	public String getDailyTransportation() {
		if (_dailyTransportation == null) {
			return "";
		}
		else {
			return _dailyTransportation;
		}
	}

	@Override
	public void setDailyTransportation(String dailyTransportation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dailyTransportation = dailyTransportation;
	}

	@JSON
	@Override
	public String getEntertainment() {
		if (_entertainment == null) {
			return "";
		}
		else {
			return _entertainment;
		}
	}

	@Override
	public void setEntertainment(String entertainment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entertainment = entertainment;
	}

	@JSON
	@Override
	public Date getDomesticTourSealDate() {
		return _domesticTourSealDate;
	}

	@Override
	public void setDomesticTourSealDate(Date domesticTourSealDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourSealDate = domesticTourSealDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionDomesticService.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionDomesticService toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionDomesticService>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionDomesticServiceImpl attractionDomesticServiceImpl =
			new AttractionDomesticServiceImpl();

		attractionDomesticServiceImpl.setAttractionDomesticServId(
			getAttractionDomesticServId());
		attractionDomesticServiceImpl.setGroupId(getGroupId());
		attractionDomesticServiceImpl.setCompanyId(getCompanyId());
		attractionDomesticServiceImpl.setUserId(getUserId());
		attractionDomesticServiceImpl.setUserName(getUserName());
		attractionDomesticServiceImpl.setCreateDate(getCreateDate());
		attractionDomesticServiceImpl.setModifiedDate(getModifiedDate());
		attractionDomesticServiceImpl.setIndividualsApartment(
			getIndividualsApartment());
		attractionDomesticServiceImpl.setAirportAssistance(
			getAirportAssistance());
		attractionDomesticServiceImpl.setEntireTour(getEntireTour());
		attractionDomesticServiceImpl.setTransfersDeparture(
			getTransfersDeparture());
		attractionDomesticServiceImpl.setIndividualGroups(
			getIndividualGroups());
		attractionDomesticServiceImpl.setOrganizedconJunction(
			getOrganizedconJunction());
		attractionDomesticServiceImpl.setDailyTransportation(
			getDailyTransportation());
		attractionDomesticServiceImpl.setEntertainment(getEntertainment());
		attractionDomesticServiceImpl.setDomesticTourSealDate(
			getDomesticTourSealDate());
		attractionDomesticServiceImpl.setJtbApplicationId(
			getJtbApplicationId());

		attractionDomesticServiceImpl.resetOriginalValues();

		return attractionDomesticServiceImpl;
	}

	@Override
	public AttractionDomesticService cloneWithOriginalValues() {
		AttractionDomesticServiceImpl attractionDomesticServiceImpl =
			new AttractionDomesticServiceImpl();

		attractionDomesticServiceImpl.setAttractionDomesticServId(
			this.<Long>getColumnOriginalValue("attractionDomesticServId"));
		attractionDomesticServiceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionDomesticServiceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionDomesticServiceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionDomesticServiceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionDomesticServiceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionDomesticServiceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionDomesticServiceImpl.setIndividualsApartment(
			this.<String>getColumnOriginalValue("individualsApartment"));
		attractionDomesticServiceImpl.setAirportAssistance(
			this.<String>getColumnOriginalValue("airportAssistance"));
		attractionDomesticServiceImpl.setEntireTour(
			this.<String>getColumnOriginalValue("entireTour"));
		attractionDomesticServiceImpl.setTransfersDeparture(
			this.<String>getColumnOriginalValue("transfersDeparture"));
		attractionDomesticServiceImpl.setIndividualGroups(
			this.<String>getColumnOriginalValue("individualGroups"));
		attractionDomesticServiceImpl.setOrganizedconJunction(
			this.<String>getColumnOriginalValue("organizedconJunction"));
		attractionDomesticServiceImpl.setDailyTransportation(
			this.<String>getColumnOriginalValue("dailyTransportation"));
		attractionDomesticServiceImpl.setEntertainment(
			this.<String>getColumnOriginalValue("entertainment"));
		attractionDomesticServiceImpl.setDomesticTourSealDate(
			this.<Date>getColumnOriginalValue("domesticTourSealDate"));
		attractionDomesticServiceImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionDomesticServiceImpl;
	}

	@Override
	public int compareTo(AttractionDomesticService attractionDomesticService) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionDomesticService.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionDomesticService)) {
			return false;
		}

		AttractionDomesticService attractionDomesticService =
			(AttractionDomesticService)object;

		long primaryKey = attractionDomesticService.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionDomesticService> toCacheModel() {
		AttractionDomesticServiceCacheModel
			attractionDomesticServiceCacheModel =
				new AttractionDomesticServiceCacheModel();

		attractionDomesticServiceCacheModel.attractionDomesticServId =
			getAttractionDomesticServId();

		attractionDomesticServiceCacheModel.groupId = getGroupId();

		attractionDomesticServiceCacheModel.companyId = getCompanyId();

		attractionDomesticServiceCacheModel.userId = getUserId();

		attractionDomesticServiceCacheModel.userName = getUserName();

		String userName = attractionDomesticServiceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionDomesticServiceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionDomesticServiceCacheModel.createDate =
				createDate.getTime();
		}
		else {
			attractionDomesticServiceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionDomesticServiceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionDomesticServiceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionDomesticServiceCacheModel.individualsApartment =
			getIndividualsApartment();

		String individualsApartment =
			attractionDomesticServiceCacheModel.individualsApartment;

		if ((individualsApartment != null) &&
			(individualsApartment.length() == 0)) {

			attractionDomesticServiceCacheModel.individualsApartment = null;
		}

		attractionDomesticServiceCacheModel.airportAssistance =
			getAirportAssistance();

		String airportAssistance =
			attractionDomesticServiceCacheModel.airportAssistance;

		if ((airportAssistance != null) && (airportAssistance.length() == 0)) {
			attractionDomesticServiceCacheModel.airportAssistance = null;
		}

		attractionDomesticServiceCacheModel.entireTour = getEntireTour();

		String entireTour = attractionDomesticServiceCacheModel.entireTour;

		if ((entireTour != null) && (entireTour.length() == 0)) {
			attractionDomesticServiceCacheModel.entireTour = null;
		}

		attractionDomesticServiceCacheModel.transfersDeparture =
			getTransfersDeparture();

		String transfersDeparture =
			attractionDomesticServiceCacheModel.transfersDeparture;

		if ((transfersDeparture != null) &&
			(transfersDeparture.length() == 0)) {

			attractionDomesticServiceCacheModel.transfersDeparture = null;
		}

		attractionDomesticServiceCacheModel.individualGroups =
			getIndividualGroups();

		String individualGroups =
			attractionDomesticServiceCacheModel.individualGroups;

		if ((individualGroups != null) && (individualGroups.length() == 0)) {
			attractionDomesticServiceCacheModel.individualGroups = null;
		}

		attractionDomesticServiceCacheModel.organizedconJunction =
			getOrganizedconJunction();

		String organizedconJunction =
			attractionDomesticServiceCacheModel.organizedconJunction;

		if ((organizedconJunction != null) &&
			(organizedconJunction.length() == 0)) {

			attractionDomesticServiceCacheModel.organizedconJunction = null;
		}

		attractionDomesticServiceCacheModel.dailyTransportation =
			getDailyTransportation();

		String dailyTransportation =
			attractionDomesticServiceCacheModel.dailyTransportation;

		if ((dailyTransportation != null) &&
			(dailyTransportation.length() == 0)) {

			attractionDomesticServiceCacheModel.dailyTransportation = null;
		}

		attractionDomesticServiceCacheModel.entertainment = getEntertainment();

		String entertainment =
			attractionDomesticServiceCacheModel.entertainment;

		if ((entertainment != null) && (entertainment.length() == 0)) {
			attractionDomesticServiceCacheModel.entertainment = null;
		}

		Date domesticTourSealDate = getDomesticTourSealDate();

		if (domesticTourSealDate != null) {
			attractionDomesticServiceCacheModel.domesticTourSealDate =
				domesticTourSealDate.getTime();
		}
		else {
			attractionDomesticServiceCacheModel.domesticTourSealDate =
				Long.MIN_VALUE;
		}

		attractionDomesticServiceCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionDomesticServiceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionDomesticService, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionDomesticService, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionDomesticService, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionDomesticService)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionDomesticService>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AttractionDomesticService.class, ModelWrapper.class);

	}

	private long _attractionDomesticServId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _individualsApartment;
	private String _airportAssistance;
	private String _entireTour;
	private String _transfersDeparture;
	private String _individualGroups;
	private String _organizedconJunction;
	private String _dailyTransportation;
	private String _entertainment;
	private Date _domesticTourSealDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionDomesticService, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionDomesticService)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionDomesticServId", _attractionDomesticServId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"individualsApartment", _individualsApartment);
		_columnOriginalValues.put("airportAssistance", _airportAssistance);
		_columnOriginalValues.put("entireTour", _entireTour);
		_columnOriginalValues.put("transfersDeparture", _transfersDeparture);
		_columnOriginalValues.put("individualGroups", _individualGroups);
		_columnOriginalValues.put(
			"organizedconJunction", _organizedconJunction);
		_columnOriginalValues.put("dailyTransportation", _dailyTransportation);
		_columnOriginalValues.put("entertainment", _entertainment);
		_columnOriginalValues.put(
			"domesticTourSealDate", _domesticTourSealDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionDomesticServId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("individualsApartment", 128L);

		columnBitmasks.put("airportAssistance", 256L);

		columnBitmasks.put("entireTour", 512L);

		columnBitmasks.put("transfersDeparture", 1024L);

		columnBitmasks.put("individualGroups", 2048L);

		columnBitmasks.put("organizedconJunction", 4096L);

		columnBitmasks.put("dailyTransportation", 8192L);

		columnBitmasks.put("entertainment", 16384L);

		columnBitmasks.put("domesticTourSealDate", 32768L);

		columnBitmasks.put("jtbApplicationId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionDomesticService _escapedModel;

}