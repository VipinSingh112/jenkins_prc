/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionTravelAgency;
import com.nbp.jtb.application.form.service.model.AttractionTravelAgencyModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionTravelAgency service. Represents a row in the &quot;nbp_jtb_tarvel_agency&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionTravelAgencyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionTravelAgencyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionTravelAgencyImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionTravelAgencyModelImpl
	extends BaseModelImpl<AttractionTravelAgency>
	implements AttractionTravelAgencyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction travel agency model instance should use the <code>AttractionTravelAgency</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_tarvel_agency";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionTravelAgencyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"applicantName", Types.VARCHAR},
		{"agencyAddress", Types.VARCHAR}, {"agencyTelephone", Types.VARCHAR},
		{"agencyName", Types.VARCHAR}, {"agencyAddressSec", Types.VARCHAR},
		{"agencyTelephoneNum", Types.VARCHAR}, {"isRegistered", Types.VARCHAR},
		{"regstParticulars", Types.VARCHAR}, {"proprietorName", Types.VARCHAR},
		{"managerName", Types.VARCHAR}, {"managerAddress", Types.VARCHAR},
		{"secretaryName", Types.VARCHAR}, {"secretaryAddress", Types.VARCHAR},
		{"bankerName", Types.VARCHAR}, {"bondingCompanyName", Types.VARCHAR},
		{"bondingCompanyAddress", Types.VARCHAR},
		{"auditorsName", Types.VARCHAR}, {"auditorsAddress", Types.VARCHAR},
		{"numberOfEmployees", Types.VARCHAR}, {"signDate", Types.TIMESTAMP},
		{"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionTravelAgencyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agencyAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agencyTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agencyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agencyAddressSec", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agencyTelephoneNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isRegistered", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("regstParticulars", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proprietorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secretaryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secretaryAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bondingCompanyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bondingCompanyAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditorsName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditorsAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfEmployees", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_tarvel_agency (attractionTravelAgencyId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicantName VARCHAR(75) null,agencyAddress VARCHAR(500) null,agencyTelephone VARCHAR(75) null,agencyName VARCHAR(75) null,agencyAddressSec VARCHAR(500) null,agencyTelephoneNum VARCHAR(75) null,isRegistered VARCHAR(75) null,regstParticulars VARCHAR(500) null,proprietorName VARCHAR(75) null,managerName VARCHAR(75) null,managerAddress VARCHAR(500) null,secretaryName VARCHAR(75) null,secretaryAddress VARCHAR(500) null,bankerName VARCHAR(75) null,bondingCompanyName VARCHAR(75) null,bondingCompanyAddress VARCHAR(500) null,auditorsName VARCHAR(75) null,auditorsAddress VARCHAR(500) null,numberOfEmployees VARCHAR(75) null,signDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_tarvel_agency";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionTravelAgency.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_tarvel_agency.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionTravelAgencyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionTravelAgencyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionTravelAgencyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionTravelAgencyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionTravelAgency.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionTravelAgency.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionTravelAgency, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionTravelAgency, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionTravelAgency, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionTravelAgency)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionTravelAgency, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionTravelAgency, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionTravelAgency)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionTravelAgency, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionTravelAgency, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionTravelAgency, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionTravelAgency, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionTravelAgency, Object>>();

			attributeGetterFunctions.put(
				"attractionTravelAgencyId",
				AttractionTravelAgency::getAttractionTravelAgencyId);
			attributeGetterFunctions.put(
				"groupId", AttractionTravelAgency::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionTravelAgency::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionTravelAgency::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionTravelAgency::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionTravelAgency::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionTravelAgency::getModifiedDate);
			attributeGetterFunctions.put(
				"applicantName", AttractionTravelAgency::getApplicantName);
			attributeGetterFunctions.put(
				"agencyAddress", AttractionTravelAgency::getAgencyAddress);
			attributeGetterFunctions.put(
				"agencyTelephone", AttractionTravelAgency::getAgencyTelephone);
			attributeGetterFunctions.put(
				"agencyName", AttractionTravelAgency::getAgencyName);
			attributeGetterFunctions.put(
				"agencyAddressSec",
				AttractionTravelAgency::getAgencyAddressSec);
			attributeGetterFunctions.put(
				"agencyTelephoneNum",
				AttractionTravelAgency::getAgencyTelephoneNum);
			attributeGetterFunctions.put(
				"isRegistered", AttractionTravelAgency::getIsRegistered);
			attributeGetterFunctions.put(
				"regstParticulars",
				AttractionTravelAgency::getRegstParticulars);
			attributeGetterFunctions.put(
				"proprietorName", AttractionTravelAgency::getProprietorName);
			attributeGetterFunctions.put(
				"managerName", AttractionTravelAgency::getManagerName);
			attributeGetterFunctions.put(
				"managerAddress", AttractionTravelAgency::getManagerAddress);
			attributeGetterFunctions.put(
				"secretaryName", AttractionTravelAgency::getSecretaryName);
			attributeGetterFunctions.put(
				"secretaryAddress",
				AttractionTravelAgency::getSecretaryAddress);
			attributeGetterFunctions.put(
				"bankerName", AttractionTravelAgency::getBankerName);
			attributeGetterFunctions.put(
				"bondingCompanyName",
				AttractionTravelAgency::getBondingCompanyName);
			attributeGetterFunctions.put(
				"bondingCompanyAddress",
				AttractionTravelAgency::getBondingCompanyAddress);
			attributeGetterFunctions.put(
				"auditorsName", AttractionTravelAgency::getAuditorsName);
			attributeGetterFunctions.put(
				"auditorsAddress", AttractionTravelAgency::getAuditorsAddress);
			attributeGetterFunctions.put(
				"numberOfEmployees",
				AttractionTravelAgency::getNumberOfEmployees);
			attributeGetterFunctions.put(
				"signDate", AttractionTravelAgency::getSignDate);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionTravelAgency::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionTravelAgency, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionTravelAgency, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionTravelAgency, ?>>();

			attributeSetterBiConsumers.put(
				"attractionTravelAgencyId",
				(BiConsumer<AttractionTravelAgency, Long>)
					AttractionTravelAgency::setAttractionTravelAgencyId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionTravelAgency, Long>)
					AttractionTravelAgency::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionTravelAgency, Long>)
					AttractionTravelAgency::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionTravelAgency, Long>)
					AttractionTravelAgency::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionTravelAgency, Date>)
					AttractionTravelAgency::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionTravelAgency, Date>)
					AttractionTravelAgency::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicantName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setApplicantName);
			attributeSetterBiConsumers.put(
				"agencyAddress",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setAgencyAddress);
			attributeSetterBiConsumers.put(
				"agencyTelephone",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setAgencyTelephone);
			attributeSetterBiConsumers.put(
				"agencyName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setAgencyName);
			attributeSetterBiConsumers.put(
				"agencyAddressSec",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setAgencyAddressSec);
			attributeSetterBiConsumers.put(
				"agencyTelephoneNum",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setAgencyTelephoneNum);
			attributeSetterBiConsumers.put(
				"isRegistered",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setIsRegistered);
			attributeSetterBiConsumers.put(
				"regstParticulars",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setRegstParticulars);
			attributeSetterBiConsumers.put(
				"proprietorName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setProprietorName);
			attributeSetterBiConsumers.put(
				"managerName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setManagerName);
			attributeSetterBiConsumers.put(
				"managerAddress",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setManagerAddress);
			attributeSetterBiConsumers.put(
				"secretaryName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setSecretaryName);
			attributeSetterBiConsumers.put(
				"secretaryAddress",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setSecretaryAddress);
			attributeSetterBiConsumers.put(
				"bankerName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setBankerName);
			attributeSetterBiConsumers.put(
				"bondingCompanyName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setBondingCompanyName);
			attributeSetterBiConsumers.put(
				"bondingCompanyAddress",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setBondingCompanyAddress);
			attributeSetterBiConsumers.put(
				"auditorsName",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setAuditorsName);
			attributeSetterBiConsumers.put(
				"auditorsAddress",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setAuditorsAddress);
			attributeSetterBiConsumers.put(
				"numberOfEmployees",
				(BiConsumer<AttractionTravelAgency, String>)
					AttractionTravelAgency::setNumberOfEmployees);
			attributeSetterBiConsumers.put(
				"signDate",
				(BiConsumer<AttractionTravelAgency, Date>)
					AttractionTravelAgency::setSignDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionTravelAgency, Long>)
					AttractionTravelAgency::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionTravelAgencyId() {
		return _attractionTravelAgencyId;
	}

	@Override
	public void setAttractionTravelAgencyId(long attractionTravelAgencyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionTravelAgencyId = attractionTravelAgencyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getAgencyAddress() {
		if (_agencyAddress == null) {
			return "";
		}
		else {
			return _agencyAddress;
		}
	}

	@Override
	public void setAgencyAddress(String agencyAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyAddress = agencyAddress;
	}

	@JSON
	@Override
	public String getAgencyTelephone() {
		if (_agencyTelephone == null) {
			return "";
		}
		else {
			return _agencyTelephone;
		}
	}

	@Override
	public void setAgencyTelephone(String agencyTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyTelephone = agencyTelephone;
	}

	@JSON
	@Override
	public String getAgencyName() {
		if (_agencyName == null) {
			return "";
		}
		else {
			return _agencyName;
		}
	}

	@Override
	public void setAgencyName(String agencyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyName = agencyName;
	}

	@JSON
	@Override
	public String getAgencyAddressSec() {
		if (_agencyAddressSec == null) {
			return "";
		}
		else {
			return _agencyAddressSec;
		}
	}

	@Override
	public void setAgencyAddressSec(String agencyAddressSec) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyAddressSec = agencyAddressSec;
	}

	@JSON
	@Override
	public String getAgencyTelephoneNum() {
		if (_agencyTelephoneNum == null) {
			return "";
		}
		else {
			return _agencyTelephoneNum;
		}
	}

	@Override
	public void setAgencyTelephoneNum(String agencyTelephoneNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyTelephoneNum = agencyTelephoneNum;
	}

	@JSON
	@Override
	public String getIsRegistered() {
		if (_isRegistered == null) {
			return "";
		}
		else {
			return _isRegistered;
		}
	}

	@Override
	public void setIsRegistered(String isRegistered) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isRegistered = isRegistered;
	}

	@JSON
	@Override
	public String getRegstParticulars() {
		if (_regstParticulars == null) {
			return "";
		}
		else {
			return _regstParticulars;
		}
	}

	@Override
	public void setRegstParticulars(String regstParticulars) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_regstParticulars = regstParticulars;
	}

	@JSON
	@Override
	public String getProprietorName() {
		if (_proprietorName == null) {
			return "";
		}
		else {
			return _proprietorName;
		}
	}

	@Override
	public void setProprietorName(String proprietorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proprietorName = proprietorName;
	}

	@JSON
	@Override
	public String getManagerName() {
		if (_managerName == null) {
			return "";
		}
		else {
			return _managerName;
		}
	}

	@Override
	public void setManagerName(String managerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerName = managerName;
	}

	@JSON
	@Override
	public String getManagerAddress() {
		if (_managerAddress == null) {
			return "";
		}
		else {
			return _managerAddress;
		}
	}

	@Override
	public void setManagerAddress(String managerAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerAddress = managerAddress;
	}

	@JSON
	@Override
	public String getSecretaryName() {
		if (_secretaryName == null) {
			return "";
		}
		else {
			return _secretaryName;
		}
	}

	@Override
	public void setSecretaryName(String secretaryName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secretaryName = secretaryName;
	}

	@JSON
	@Override
	public String getSecretaryAddress() {
		if (_secretaryAddress == null) {
			return "";
		}
		else {
			return _secretaryAddress;
		}
	}

	@Override
	public void setSecretaryAddress(String secretaryAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secretaryAddress = secretaryAddress;
	}

	@JSON
	@Override
	public String getBankerName() {
		if (_bankerName == null) {
			return "";
		}
		else {
			return _bankerName;
		}
	}

	@Override
	public void setBankerName(String bankerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankerName = bankerName;
	}

	@JSON
	@Override
	public String getBondingCompanyName() {
		if (_bondingCompanyName == null) {
			return "";
		}
		else {
			return _bondingCompanyName;
		}
	}

	@Override
	public void setBondingCompanyName(String bondingCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bondingCompanyName = bondingCompanyName;
	}

	@JSON
	@Override
	public String getBondingCompanyAddress() {
		if (_bondingCompanyAddress == null) {
			return "";
		}
		else {
			return _bondingCompanyAddress;
		}
	}

	@Override
	public void setBondingCompanyAddress(String bondingCompanyAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bondingCompanyAddress = bondingCompanyAddress;
	}

	@JSON
	@Override
	public String getAuditorsName() {
		if (_auditorsName == null) {
			return "";
		}
		else {
			return _auditorsName;
		}
	}

	@Override
	public void setAuditorsName(String auditorsName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditorsName = auditorsName;
	}

	@JSON
	@Override
	public String getAuditorsAddress() {
		if (_auditorsAddress == null) {
			return "";
		}
		else {
			return _auditorsAddress;
		}
	}

	@Override
	public void setAuditorsAddress(String auditorsAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditorsAddress = auditorsAddress;
	}

	@JSON
	@Override
	public String getNumberOfEmployees() {
		if (_numberOfEmployees == null) {
			return "";
		}
		else {
			return _numberOfEmployees;
		}
	}

	@Override
	public void setNumberOfEmployees(String numberOfEmployees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfEmployees = numberOfEmployees;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signDate = signDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionTravelAgency.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionTravelAgency toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionTravelAgency>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionTravelAgencyImpl attractionTravelAgencyImpl =
			new AttractionTravelAgencyImpl();

		attractionTravelAgencyImpl.setAttractionTravelAgencyId(
			getAttractionTravelAgencyId());
		attractionTravelAgencyImpl.setGroupId(getGroupId());
		attractionTravelAgencyImpl.setCompanyId(getCompanyId());
		attractionTravelAgencyImpl.setUserId(getUserId());
		attractionTravelAgencyImpl.setUserName(getUserName());
		attractionTravelAgencyImpl.setCreateDate(getCreateDate());
		attractionTravelAgencyImpl.setModifiedDate(getModifiedDate());
		attractionTravelAgencyImpl.setApplicantName(getApplicantName());
		attractionTravelAgencyImpl.setAgencyAddress(getAgencyAddress());
		attractionTravelAgencyImpl.setAgencyTelephone(getAgencyTelephone());
		attractionTravelAgencyImpl.setAgencyName(getAgencyName());
		attractionTravelAgencyImpl.setAgencyAddressSec(getAgencyAddressSec());
		attractionTravelAgencyImpl.setAgencyTelephoneNum(
			getAgencyTelephoneNum());
		attractionTravelAgencyImpl.setIsRegistered(getIsRegistered());
		attractionTravelAgencyImpl.setRegstParticulars(getRegstParticulars());
		attractionTravelAgencyImpl.setProprietorName(getProprietorName());
		attractionTravelAgencyImpl.setManagerName(getManagerName());
		attractionTravelAgencyImpl.setManagerAddress(getManagerAddress());
		attractionTravelAgencyImpl.setSecretaryName(getSecretaryName());
		attractionTravelAgencyImpl.setSecretaryAddress(getSecretaryAddress());
		attractionTravelAgencyImpl.setBankerName(getBankerName());
		attractionTravelAgencyImpl.setBondingCompanyName(
			getBondingCompanyName());
		attractionTravelAgencyImpl.setBondingCompanyAddress(
			getBondingCompanyAddress());
		attractionTravelAgencyImpl.setAuditorsName(getAuditorsName());
		attractionTravelAgencyImpl.setAuditorsAddress(getAuditorsAddress());
		attractionTravelAgencyImpl.setNumberOfEmployees(getNumberOfEmployees());
		attractionTravelAgencyImpl.setSignDate(getSignDate());
		attractionTravelAgencyImpl.setJtbApplicationId(getJtbApplicationId());

		attractionTravelAgencyImpl.resetOriginalValues();

		return attractionTravelAgencyImpl;
	}

	@Override
	public AttractionTravelAgency cloneWithOriginalValues() {
		AttractionTravelAgencyImpl attractionTravelAgencyImpl =
			new AttractionTravelAgencyImpl();

		attractionTravelAgencyImpl.setAttractionTravelAgencyId(
			this.<Long>getColumnOriginalValue("attractionTravelAgencyId"));
		attractionTravelAgencyImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionTravelAgencyImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionTravelAgencyImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionTravelAgencyImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionTravelAgencyImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionTravelAgencyImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionTravelAgencyImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		attractionTravelAgencyImpl.setAgencyAddress(
			this.<String>getColumnOriginalValue("agencyAddress"));
		attractionTravelAgencyImpl.setAgencyTelephone(
			this.<String>getColumnOriginalValue("agencyTelephone"));
		attractionTravelAgencyImpl.setAgencyName(
			this.<String>getColumnOriginalValue("agencyName"));
		attractionTravelAgencyImpl.setAgencyAddressSec(
			this.<String>getColumnOriginalValue("agencyAddressSec"));
		attractionTravelAgencyImpl.setAgencyTelephoneNum(
			this.<String>getColumnOriginalValue("agencyTelephoneNum"));
		attractionTravelAgencyImpl.setIsRegistered(
			this.<String>getColumnOriginalValue("isRegistered"));
		attractionTravelAgencyImpl.setRegstParticulars(
			this.<String>getColumnOriginalValue("regstParticulars"));
		attractionTravelAgencyImpl.setProprietorName(
			this.<String>getColumnOriginalValue("proprietorName"));
		attractionTravelAgencyImpl.setManagerName(
			this.<String>getColumnOriginalValue("managerName"));
		attractionTravelAgencyImpl.setManagerAddress(
			this.<String>getColumnOriginalValue("managerAddress"));
		attractionTravelAgencyImpl.setSecretaryName(
			this.<String>getColumnOriginalValue("secretaryName"));
		attractionTravelAgencyImpl.setSecretaryAddress(
			this.<String>getColumnOriginalValue("secretaryAddress"));
		attractionTravelAgencyImpl.setBankerName(
			this.<String>getColumnOriginalValue("bankerName"));
		attractionTravelAgencyImpl.setBondingCompanyName(
			this.<String>getColumnOriginalValue("bondingCompanyName"));
		attractionTravelAgencyImpl.setBondingCompanyAddress(
			this.<String>getColumnOriginalValue("bondingCompanyAddress"));
		attractionTravelAgencyImpl.setAuditorsName(
			this.<String>getColumnOriginalValue("auditorsName"));
		attractionTravelAgencyImpl.setAuditorsAddress(
			this.<String>getColumnOriginalValue("auditorsAddress"));
		attractionTravelAgencyImpl.setNumberOfEmployees(
			this.<String>getColumnOriginalValue("numberOfEmployees"));
		attractionTravelAgencyImpl.setSignDate(
			this.<Date>getColumnOriginalValue("signDate"));
		attractionTravelAgencyImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionTravelAgencyImpl;
	}

	@Override
	public int compareTo(AttractionTravelAgency attractionTravelAgency) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionTravelAgency.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionTravelAgency)) {
			return false;
		}

		AttractionTravelAgency attractionTravelAgency =
			(AttractionTravelAgency)object;

		long primaryKey = attractionTravelAgency.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionTravelAgency> toCacheModel() {
		AttractionTravelAgencyCacheModel attractionTravelAgencyCacheModel =
			new AttractionTravelAgencyCacheModel();

		attractionTravelAgencyCacheModel.attractionTravelAgencyId =
			getAttractionTravelAgencyId();

		attractionTravelAgencyCacheModel.groupId = getGroupId();

		attractionTravelAgencyCacheModel.companyId = getCompanyId();

		attractionTravelAgencyCacheModel.userId = getUserId();

		attractionTravelAgencyCacheModel.userName = getUserName();

		String userName = attractionTravelAgencyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionTravelAgencyCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionTravelAgencyCacheModel.createDate = createDate.getTime();
		}
		else {
			attractionTravelAgencyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionTravelAgencyCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionTravelAgencyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionTravelAgencyCacheModel.applicantName = getApplicantName();

		String applicantName = attractionTravelAgencyCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			attractionTravelAgencyCacheModel.applicantName = null;
		}

		attractionTravelAgencyCacheModel.agencyAddress = getAgencyAddress();

		String agencyAddress = attractionTravelAgencyCacheModel.agencyAddress;

		if ((agencyAddress != null) && (agencyAddress.length() == 0)) {
			attractionTravelAgencyCacheModel.agencyAddress = null;
		}

		attractionTravelAgencyCacheModel.agencyTelephone = getAgencyTelephone();

		String agencyTelephone =
			attractionTravelAgencyCacheModel.agencyTelephone;

		if ((agencyTelephone != null) && (agencyTelephone.length() == 0)) {
			attractionTravelAgencyCacheModel.agencyTelephone = null;
		}

		attractionTravelAgencyCacheModel.agencyName = getAgencyName();

		String agencyName = attractionTravelAgencyCacheModel.agencyName;

		if ((agencyName != null) && (agencyName.length() == 0)) {
			attractionTravelAgencyCacheModel.agencyName = null;
		}

		attractionTravelAgencyCacheModel.agencyAddressSec =
			getAgencyAddressSec();

		String agencyAddressSec =
			attractionTravelAgencyCacheModel.agencyAddressSec;

		if ((agencyAddressSec != null) && (agencyAddressSec.length() == 0)) {
			attractionTravelAgencyCacheModel.agencyAddressSec = null;
		}

		attractionTravelAgencyCacheModel.agencyTelephoneNum =
			getAgencyTelephoneNum();

		String agencyTelephoneNum =
			attractionTravelAgencyCacheModel.agencyTelephoneNum;

		if ((agencyTelephoneNum != null) &&
			(agencyTelephoneNum.length() == 0)) {

			attractionTravelAgencyCacheModel.agencyTelephoneNum = null;
		}

		attractionTravelAgencyCacheModel.isRegistered = getIsRegistered();

		String isRegistered = attractionTravelAgencyCacheModel.isRegistered;

		if ((isRegistered != null) && (isRegistered.length() == 0)) {
			attractionTravelAgencyCacheModel.isRegistered = null;
		}

		attractionTravelAgencyCacheModel.regstParticulars =
			getRegstParticulars();

		String regstParticulars =
			attractionTravelAgencyCacheModel.regstParticulars;

		if ((regstParticulars != null) && (regstParticulars.length() == 0)) {
			attractionTravelAgencyCacheModel.regstParticulars = null;
		}

		attractionTravelAgencyCacheModel.proprietorName = getProprietorName();

		String proprietorName = attractionTravelAgencyCacheModel.proprietorName;

		if ((proprietorName != null) && (proprietorName.length() == 0)) {
			attractionTravelAgencyCacheModel.proprietorName = null;
		}

		attractionTravelAgencyCacheModel.managerName = getManagerName();

		String managerName = attractionTravelAgencyCacheModel.managerName;

		if ((managerName != null) && (managerName.length() == 0)) {
			attractionTravelAgencyCacheModel.managerName = null;
		}

		attractionTravelAgencyCacheModel.managerAddress = getManagerAddress();

		String managerAddress = attractionTravelAgencyCacheModel.managerAddress;

		if ((managerAddress != null) && (managerAddress.length() == 0)) {
			attractionTravelAgencyCacheModel.managerAddress = null;
		}

		attractionTravelAgencyCacheModel.secretaryName = getSecretaryName();

		String secretaryName = attractionTravelAgencyCacheModel.secretaryName;

		if ((secretaryName != null) && (secretaryName.length() == 0)) {
			attractionTravelAgencyCacheModel.secretaryName = null;
		}

		attractionTravelAgencyCacheModel.secretaryAddress =
			getSecretaryAddress();

		String secretaryAddress =
			attractionTravelAgencyCacheModel.secretaryAddress;

		if ((secretaryAddress != null) && (secretaryAddress.length() == 0)) {
			attractionTravelAgencyCacheModel.secretaryAddress = null;
		}

		attractionTravelAgencyCacheModel.bankerName = getBankerName();

		String bankerName = attractionTravelAgencyCacheModel.bankerName;

		if ((bankerName != null) && (bankerName.length() == 0)) {
			attractionTravelAgencyCacheModel.bankerName = null;
		}

		attractionTravelAgencyCacheModel.bondingCompanyName =
			getBondingCompanyName();

		String bondingCompanyName =
			attractionTravelAgencyCacheModel.bondingCompanyName;

		if ((bondingCompanyName != null) &&
			(bondingCompanyName.length() == 0)) {

			attractionTravelAgencyCacheModel.bondingCompanyName = null;
		}

		attractionTravelAgencyCacheModel.bondingCompanyAddress =
			getBondingCompanyAddress();

		String bondingCompanyAddress =
			attractionTravelAgencyCacheModel.bondingCompanyAddress;

		if ((bondingCompanyAddress != null) &&
			(bondingCompanyAddress.length() == 0)) {

			attractionTravelAgencyCacheModel.bondingCompanyAddress = null;
		}

		attractionTravelAgencyCacheModel.auditorsName = getAuditorsName();

		String auditorsName = attractionTravelAgencyCacheModel.auditorsName;

		if ((auditorsName != null) && (auditorsName.length() == 0)) {
			attractionTravelAgencyCacheModel.auditorsName = null;
		}

		attractionTravelAgencyCacheModel.auditorsAddress = getAuditorsAddress();

		String auditorsAddress =
			attractionTravelAgencyCacheModel.auditorsAddress;

		if ((auditorsAddress != null) && (auditorsAddress.length() == 0)) {
			attractionTravelAgencyCacheModel.auditorsAddress = null;
		}

		attractionTravelAgencyCacheModel.numberOfEmployees =
			getNumberOfEmployees();

		String numberOfEmployees =
			attractionTravelAgencyCacheModel.numberOfEmployees;

		if ((numberOfEmployees != null) && (numberOfEmployees.length() == 0)) {
			attractionTravelAgencyCacheModel.numberOfEmployees = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			attractionTravelAgencyCacheModel.signDate = signDate.getTime();
		}
		else {
			attractionTravelAgencyCacheModel.signDate = Long.MIN_VALUE;
		}

		attractionTravelAgencyCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionTravelAgencyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionTravelAgency, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionTravelAgency, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionTravelAgency, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionTravelAgency)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AttractionTravelAgency>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AttractionTravelAgency.class, ModelWrapper.class);

	}

	private long _attractionTravelAgencyId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicantName;
	private String _agencyAddress;
	private String _agencyTelephone;
	private String _agencyName;
	private String _agencyAddressSec;
	private String _agencyTelephoneNum;
	private String _isRegistered;
	private String _regstParticulars;
	private String _proprietorName;
	private String _managerName;
	private String _managerAddress;
	private String _secretaryName;
	private String _secretaryAddress;
	private String _bankerName;
	private String _bondingCompanyName;
	private String _bondingCompanyAddress;
	private String _auditorsName;
	private String _auditorsAddress;
	private String _numberOfEmployees;
	private Date _signDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionTravelAgency, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionTravelAgency)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionTravelAgencyId", _attractionTravelAgencyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("agencyAddress", _agencyAddress);
		_columnOriginalValues.put("agencyTelephone", _agencyTelephone);
		_columnOriginalValues.put("agencyName", _agencyName);
		_columnOriginalValues.put("agencyAddressSec", _agencyAddressSec);
		_columnOriginalValues.put("agencyTelephoneNum", _agencyTelephoneNum);
		_columnOriginalValues.put("isRegistered", _isRegistered);
		_columnOriginalValues.put("regstParticulars", _regstParticulars);
		_columnOriginalValues.put("proprietorName", _proprietorName);
		_columnOriginalValues.put("managerName", _managerName);
		_columnOriginalValues.put("managerAddress", _managerAddress);
		_columnOriginalValues.put("secretaryName", _secretaryName);
		_columnOriginalValues.put("secretaryAddress", _secretaryAddress);
		_columnOriginalValues.put("bankerName", _bankerName);
		_columnOriginalValues.put("bondingCompanyName", _bondingCompanyName);
		_columnOriginalValues.put(
			"bondingCompanyAddress", _bondingCompanyAddress);
		_columnOriginalValues.put("auditorsName", _auditorsName);
		_columnOriginalValues.put("auditorsAddress", _auditorsAddress);
		_columnOriginalValues.put("numberOfEmployees", _numberOfEmployees);
		_columnOriginalValues.put("signDate", _signDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionTravelAgencyId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("applicantName", 128L);

		columnBitmasks.put("agencyAddress", 256L);

		columnBitmasks.put("agencyTelephone", 512L);

		columnBitmasks.put("agencyName", 1024L);

		columnBitmasks.put("agencyAddressSec", 2048L);

		columnBitmasks.put("agencyTelephoneNum", 4096L);

		columnBitmasks.put("isRegistered", 8192L);

		columnBitmasks.put("regstParticulars", 16384L);

		columnBitmasks.put("proprietorName", 32768L);

		columnBitmasks.put("managerName", 65536L);

		columnBitmasks.put("managerAddress", 131072L);

		columnBitmasks.put("secretaryName", 262144L);

		columnBitmasks.put("secretaryAddress", 524288L);

		columnBitmasks.put("bankerName", 1048576L);

		columnBitmasks.put("bondingCompanyName", 2097152L);

		columnBitmasks.put("bondingCompanyAddress", 4194304L);

		columnBitmasks.put("auditorsName", 8388608L);

		columnBitmasks.put("auditorsAddress", 16777216L);

		columnBitmasks.put("numberOfEmployees", 33554432L);

		columnBitmasks.put("signDate", 67108864L);

		columnBitmasks.put("jtbApplicationId", 134217728L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionTravelAgency _escapedModel;

}