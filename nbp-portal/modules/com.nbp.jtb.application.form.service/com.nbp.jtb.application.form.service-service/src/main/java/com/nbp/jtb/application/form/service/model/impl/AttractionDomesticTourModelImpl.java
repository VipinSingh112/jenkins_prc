/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionDomesticTour;
import com.nbp.jtb.application.form.service.model.AttractionDomesticTourModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionDomesticTour service. Represents a row in the &quot;nbp_jtb_domestic_tour&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionDomesticTourModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionDomesticTourImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionDomesticTourImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionDomesticTourModelImpl
	extends BaseModelImpl<AttractionDomesticTour>
	implements AttractionDomesticTourModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction domestic tour model instance should use the <code>AttractionDomesticTour</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_domestic_tour";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionDomesticTourId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"domesticTourApplicantName", Types.VARCHAR},
		{"domesticTourAddress", Types.VARCHAR},
		{"domesticTourCompanyName", Types.VARCHAR},
		{"domesticTourExactLocation", Types.VARCHAR},
		{"domesticTourTelephone", Types.VARCHAR},
		{"domesticTourEmail", Types.VARCHAR},
		{"domesticTourDate", Types.TIMESTAMP},
		{"domesticTourManagerName", Types.VARCHAR},
		{"domesticTourVehiclesNum", Types.VARCHAR},
		{"domesticTourEmployeesNo", Types.VARCHAR},
		{"domesticTourOfficeLocation", Types.VARCHAR},
		{"domesticTourSignDate", Types.TIMESTAMP},
		{"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionDomesticTourId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("domesticTourApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourCompanyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourExactLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("domesticTourManagerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourVehiclesNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourEmployeesNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourOfficeLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domesticTourSignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_domestic_tour (attractionDomesticTourId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,domesticTourApplicantName VARCHAR(75) null,domesticTourAddress VARCHAR(500) null,domesticTourCompanyName VARCHAR(75) null,domesticTourExactLocation VARCHAR(500) null,domesticTourTelephone VARCHAR(75) null,domesticTourEmail VARCHAR(75) null,domesticTourDate DATE null,domesticTourManagerName VARCHAR(75) null,domesticTourVehiclesNum VARCHAR(75) null,domesticTourEmployeesNo VARCHAR(75) null,domesticTourOfficeLocation VARCHAR(75) null,domesticTourSignDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_domestic_tour";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionDomesticTour.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_domestic_tour.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionDomesticTourModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionDomesticTourId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionDomesticTourId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionDomesticTourId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionDomesticTour.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionDomesticTour.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionDomesticTour, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionDomesticTour, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionDomesticTour, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionDomesticTour)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionDomesticTour, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionDomesticTour, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionDomesticTour)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionDomesticTour, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionDomesticTour, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionDomesticTour, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionDomesticTour, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionDomesticTour, Object>>();

			attributeGetterFunctions.put(
				"attractionDomesticTourId",
				AttractionDomesticTour::getAttractionDomesticTourId);
			attributeGetterFunctions.put(
				"groupId", AttractionDomesticTour::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionDomesticTour::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionDomesticTour::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionDomesticTour::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionDomesticTour::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionDomesticTour::getModifiedDate);
			attributeGetterFunctions.put(
				"domesticTourApplicantName",
				AttractionDomesticTour::getDomesticTourApplicantName);
			attributeGetterFunctions.put(
				"domesticTourAddress",
				AttractionDomesticTour::getDomesticTourAddress);
			attributeGetterFunctions.put(
				"domesticTourCompanyName",
				AttractionDomesticTour::getDomesticTourCompanyName);
			attributeGetterFunctions.put(
				"domesticTourExactLocation",
				AttractionDomesticTour::getDomesticTourExactLocation);
			attributeGetterFunctions.put(
				"domesticTourTelephone",
				AttractionDomesticTour::getDomesticTourTelephone);
			attributeGetterFunctions.put(
				"domesticTourEmail",
				AttractionDomesticTour::getDomesticTourEmail);
			attributeGetterFunctions.put(
				"domesticTourDate",
				AttractionDomesticTour::getDomesticTourDate);
			attributeGetterFunctions.put(
				"domesticTourManagerName",
				AttractionDomesticTour::getDomesticTourManagerName);
			attributeGetterFunctions.put(
				"domesticTourVehiclesNum",
				AttractionDomesticTour::getDomesticTourVehiclesNum);
			attributeGetterFunctions.put(
				"domesticTourEmployeesNo",
				AttractionDomesticTour::getDomesticTourEmployeesNo);
			attributeGetterFunctions.put(
				"domesticTourOfficeLocation",
				AttractionDomesticTour::getDomesticTourOfficeLocation);
			attributeGetterFunctions.put(
				"domesticTourSignDate",
				AttractionDomesticTour::getDomesticTourSignDate);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionDomesticTour::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionDomesticTour, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionDomesticTour, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionDomesticTour, ?>>();

			attributeSetterBiConsumers.put(
				"attractionDomesticTourId",
				(BiConsumer<AttractionDomesticTour, Long>)
					AttractionDomesticTour::setAttractionDomesticTourId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionDomesticTour, Long>)
					AttractionDomesticTour::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionDomesticTour, Long>)
					AttractionDomesticTour::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionDomesticTour, Long>)
					AttractionDomesticTour::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionDomesticTour, Date>)
					AttractionDomesticTour::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionDomesticTour, Date>)
					AttractionDomesticTour::setModifiedDate);
			attributeSetterBiConsumers.put(
				"domesticTourApplicantName",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourApplicantName);
			attributeSetterBiConsumers.put(
				"domesticTourAddress",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourAddress);
			attributeSetterBiConsumers.put(
				"domesticTourCompanyName",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourCompanyName);
			attributeSetterBiConsumers.put(
				"domesticTourExactLocation",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourExactLocation);
			attributeSetterBiConsumers.put(
				"domesticTourTelephone",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourTelephone);
			attributeSetterBiConsumers.put(
				"domesticTourEmail",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourEmail);
			attributeSetterBiConsumers.put(
				"domesticTourDate",
				(BiConsumer<AttractionDomesticTour, Date>)
					AttractionDomesticTour::setDomesticTourDate);
			attributeSetterBiConsumers.put(
				"domesticTourManagerName",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourManagerName);
			attributeSetterBiConsumers.put(
				"domesticTourVehiclesNum",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourVehiclesNum);
			attributeSetterBiConsumers.put(
				"domesticTourEmployeesNo",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourEmployeesNo);
			attributeSetterBiConsumers.put(
				"domesticTourOfficeLocation",
				(BiConsumer<AttractionDomesticTour, String>)
					AttractionDomesticTour::setDomesticTourOfficeLocation);
			attributeSetterBiConsumers.put(
				"domesticTourSignDate",
				(BiConsumer<AttractionDomesticTour, Date>)
					AttractionDomesticTour::setDomesticTourSignDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionDomesticTour, Long>)
					AttractionDomesticTour::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionDomesticTourId() {
		return _attractionDomesticTourId;
	}

	@Override
	public void setAttractionDomesticTourId(long attractionDomesticTourId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionDomesticTourId = attractionDomesticTourId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDomesticTourApplicantName() {
		if (_domesticTourApplicantName == null) {
			return "";
		}
		else {
			return _domesticTourApplicantName;
		}
	}

	@Override
	public void setDomesticTourApplicantName(String domesticTourApplicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourApplicantName = domesticTourApplicantName;
	}

	@JSON
	@Override
	public String getDomesticTourAddress() {
		if (_domesticTourAddress == null) {
			return "";
		}
		else {
			return _domesticTourAddress;
		}
	}

	@Override
	public void setDomesticTourAddress(String domesticTourAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourAddress = domesticTourAddress;
	}

	@JSON
	@Override
	public String getDomesticTourCompanyName() {
		if (_domesticTourCompanyName == null) {
			return "";
		}
		else {
			return _domesticTourCompanyName;
		}
	}

	@Override
	public void setDomesticTourCompanyName(String domesticTourCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourCompanyName = domesticTourCompanyName;
	}

	@JSON
	@Override
	public String getDomesticTourExactLocation() {
		if (_domesticTourExactLocation == null) {
			return "";
		}
		else {
			return _domesticTourExactLocation;
		}
	}

	@Override
	public void setDomesticTourExactLocation(String domesticTourExactLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourExactLocation = domesticTourExactLocation;
	}

	@JSON
	@Override
	public String getDomesticTourTelephone() {
		if (_domesticTourTelephone == null) {
			return "";
		}
		else {
			return _domesticTourTelephone;
		}
	}

	@Override
	public void setDomesticTourTelephone(String domesticTourTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourTelephone = domesticTourTelephone;
	}

	@JSON
	@Override
	public String getDomesticTourEmail() {
		if (_domesticTourEmail == null) {
			return "";
		}
		else {
			return _domesticTourEmail;
		}
	}

	@Override
	public void setDomesticTourEmail(String domesticTourEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourEmail = domesticTourEmail;
	}

	@JSON
	@Override
	public Date getDomesticTourDate() {
		return _domesticTourDate;
	}

	@Override
	public void setDomesticTourDate(Date domesticTourDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourDate = domesticTourDate;
	}

	@JSON
	@Override
	public String getDomesticTourManagerName() {
		if (_domesticTourManagerName == null) {
			return "";
		}
		else {
			return _domesticTourManagerName;
		}
	}

	@Override
	public void setDomesticTourManagerName(String domesticTourManagerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourManagerName = domesticTourManagerName;
	}

	@JSON
	@Override
	public String getDomesticTourVehiclesNum() {
		if (_domesticTourVehiclesNum == null) {
			return "";
		}
		else {
			return _domesticTourVehiclesNum;
		}
	}

	@Override
	public void setDomesticTourVehiclesNum(String domesticTourVehiclesNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourVehiclesNum = domesticTourVehiclesNum;
	}

	@JSON
	@Override
	public String getDomesticTourEmployeesNo() {
		if (_domesticTourEmployeesNo == null) {
			return "";
		}
		else {
			return _domesticTourEmployeesNo;
		}
	}

	@Override
	public void setDomesticTourEmployeesNo(String domesticTourEmployeesNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourEmployeesNo = domesticTourEmployeesNo;
	}

	@JSON
	@Override
	public String getDomesticTourOfficeLocation() {
		if (_domesticTourOfficeLocation == null) {
			return "";
		}
		else {
			return _domesticTourOfficeLocation;
		}
	}

	@Override
	public void setDomesticTourOfficeLocation(
		String domesticTourOfficeLocation) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourOfficeLocation = domesticTourOfficeLocation;
	}

	@JSON
	@Override
	public Date getDomesticTourSignDate() {
		return _domesticTourSignDate;
	}

	@Override
	public void setDomesticTourSignDate(Date domesticTourSignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domesticTourSignDate = domesticTourSignDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionDomesticTour.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionDomesticTour toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionDomesticTour>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionDomesticTourImpl attractionDomesticTourImpl =
			new AttractionDomesticTourImpl();

		attractionDomesticTourImpl.setAttractionDomesticTourId(
			getAttractionDomesticTourId());
		attractionDomesticTourImpl.setGroupId(getGroupId());
		attractionDomesticTourImpl.setCompanyId(getCompanyId());
		attractionDomesticTourImpl.setUserId(getUserId());
		attractionDomesticTourImpl.setUserName(getUserName());
		attractionDomesticTourImpl.setCreateDate(getCreateDate());
		attractionDomesticTourImpl.setModifiedDate(getModifiedDate());
		attractionDomesticTourImpl.setDomesticTourApplicantName(
			getDomesticTourApplicantName());
		attractionDomesticTourImpl.setDomesticTourAddress(
			getDomesticTourAddress());
		attractionDomesticTourImpl.setDomesticTourCompanyName(
			getDomesticTourCompanyName());
		attractionDomesticTourImpl.setDomesticTourExactLocation(
			getDomesticTourExactLocation());
		attractionDomesticTourImpl.setDomesticTourTelephone(
			getDomesticTourTelephone());
		attractionDomesticTourImpl.setDomesticTourEmail(getDomesticTourEmail());
		attractionDomesticTourImpl.setDomesticTourDate(getDomesticTourDate());
		attractionDomesticTourImpl.setDomesticTourManagerName(
			getDomesticTourManagerName());
		attractionDomesticTourImpl.setDomesticTourVehiclesNum(
			getDomesticTourVehiclesNum());
		attractionDomesticTourImpl.setDomesticTourEmployeesNo(
			getDomesticTourEmployeesNo());
		attractionDomesticTourImpl.setDomesticTourOfficeLocation(
			getDomesticTourOfficeLocation());
		attractionDomesticTourImpl.setDomesticTourSignDate(
			getDomesticTourSignDate());
		attractionDomesticTourImpl.setJtbApplicationId(getJtbApplicationId());

		attractionDomesticTourImpl.resetOriginalValues();

		return attractionDomesticTourImpl;
	}

	@Override
	public AttractionDomesticTour cloneWithOriginalValues() {
		AttractionDomesticTourImpl attractionDomesticTourImpl =
			new AttractionDomesticTourImpl();

		attractionDomesticTourImpl.setAttractionDomesticTourId(
			this.<Long>getColumnOriginalValue("attractionDomesticTourId"));
		attractionDomesticTourImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionDomesticTourImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionDomesticTourImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionDomesticTourImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionDomesticTourImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionDomesticTourImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionDomesticTourImpl.setDomesticTourApplicantName(
			this.<String>getColumnOriginalValue("domesticTourApplicantName"));
		attractionDomesticTourImpl.setDomesticTourAddress(
			this.<String>getColumnOriginalValue("domesticTourAddress"));
		attractionDomesticTourImpl.setDomesticTourCompanyName(
			this.<String>getColumnOriginalValue("domesticTourCompanyName"));
		attractionDomesticTourImpl.setDomesticTourExactLocation(
			this.<String>getColumnOriginalValue("domesticTourExactLocation"));
		attractionDomesticTourImpl.setDomesticTourTelephone(
			this.<String>getColumnOriginalValue("domesticTourTelephone"));
		attractionDomesticTourImpl.setDomesticTourEmail(
			this.<String>getColumnOriginalValue("domesticTourEmail"));
		attractionDomesticTourImpl.setDomesticTourDate(
			this.<Date>getColumnOriginalValue("domesticTourDate"));
		attractionDomesticTourImpl.setDomesticTourManagerName(
			this.<String>getColumnOriginalValue("domesticTourManagerName"));
		attractionDomesticTourImpl.setDomesticTourVehiclesNum(
			this.<String>getColumnOriginalValue("domesticTourVehiclesNum"));
		attractionDomesticTourImpl.setDomesticTourEmployeesNo(
			this.<String>getColumnOriginalValue("domesticTourEmployeesNo"));
		attractionDomesticTourImpl.setDomesticTourOfficeLocation(
			this.<String>getColumnOriginalValue("domesticTourOfficeLocation"));
		attractionDomesticTourImpl.setDomesticTourSignDate(
			this.<Date>getColumnOriginalValue("domesticTourSignDate"));
		attractionDomesticTourImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionDomesticTourImpl;
	}

	@Override
	public int compareTo(AttractionDomesticTour attractionDomesticTour) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionDomesticTour.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionDomesticTour)) {
			return false;
		}

		AttractionDomesticTour attractionDomesticTour =
			(AttractionDomesticTour)object;

		long primaryKey = attractionDomesticTour.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionDomesticTour> toCacheModel() {
		AttractionDomesticTourCacheModel attractionDomesticTourCacheModel =
			new AttractionDomesticTourCacheModel();

		attractionDomesticTourCacheModel.attractionDomesticTourId =
			getAttractionDomesticTourId();

		attractionDomesticTourCacheModel.groupId = getGroupId();

		attractionDomesticTourCacheModel.companyId = getCompanyId();

		attractionDomesticTourCacheModel.userId = getUserId();

		attractionDomesticTourCacheModel.userName = getUserName();

		String userName = attractionDomesticTourCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionDomesticTourCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionDomesticTourCacheModel.createDate = createDate.getTime();
		}
		else {
			attractionDomesticTourCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionDomesticTourCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionDomesticTourCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionDomesticTourCacheModel.domesticTourApplicantName =
			getDomesticTourApplicantName();

		String domesticTourApplicantName =
			attractionDomesticTourCacheModel.domesticTourApplicantName;

		if ((domesticTourApplicantName != null) &&
			(domesticTourApplicantName.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourApplicantName = null;
		}

		attractionDomesticTourCacheModel.domesticTourAddress =
			getDomesticTourAddress();

		String domesticTourAddress =
			attractionDomesticTourCacheModel.domesticTourAddress;

		if ((domesticTourAddress != null) &&
			(domesticTourAddress.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourAddress = null;
		}

		attractionDomesticTourCacheModel.domesticTourCompanyName =
			getDomesticTourCompanyName();

		String domesticTourCompanyName =
			attractionDomesticTourCacheModel.domesticTourCompanyName;

		if ((domesticTourCompanyName != null) &&
			(domesticTourCompanyName.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourCompanyName = null;
		}

		attractionDomesticTourCacheModel.domesticTourExactLocation =
			getDomesticTourExactLocation();

		String domesticTourExactLocation =
			attractionDomesticTourCacheModel.domesticTourExactLocation;

		if ((domesticTourExactLocation != null) &&
			(domesticTourExactLocation.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourExactLocation = null;
		}

		attractionDomesticTourCacheModel.domesticTourTelephone =
			getDomesticTourTelephone();

		String domesticTourTelephone =
			attractionDomesticTourCacheModel.domesticTourTelephone;

		if ((domesticTourTelephone != null) &&
			(domesticTourTelephone.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourTelephone = null;
		}

		attractionDomesticTourCacheModel.domesticTourEmail =
			getDomesticTourEmail();

		String domesticTourEmail =
			attractionDomesticTourCacheModel.domesticTourEmail;

		if ((domesticTourEmail != null) && (domesticTourEmail.length() == 0)) {
			attractionDomesticTourCacheModel.domesticTourEmail = null;
		}

		Date domesticTourDate = getDomesticTourDate();

		if (domesticTourDate != null) {
			attractionDomesticTourCacheModel.domesticTourDate =
				domesticTourDate.getTime();
		}
		else {
			attractionDomesticTourCacheModel.domesticTourDate = Long.MIN_VALUE;
		}

		attractionDomesticTourCacheModel.domesticTourManagerName =
			getDomesticTourManagerName();

		String domesticTourManagerName =
			attractionDomesticTourCacheModel.domesticTourManagerName;

		if ((domesticTourManagerName != null) &&
			(domesticTourManagerName.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourManagerName = null;
		}

		attractionDomesticTourCacheModel.domesticTourVehiclesNum =
			getDomesticTourVehiclesNum();

		String domesticTourVehiclesNum =
			attractionDomesticTourCacheModel.domesticTourVehiclesNum;

		if ((domesticTourVehiclesNum != null) &&
			(domesticTourVehiclesNum.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourVehiclesNum = null;
		}

		attractionDomesticTourCacheModel.domesticTourEmployeesNo =
			getDomesticTourEmployeesNo();

		String domesticTourEmployeesNo =
			attractionDomesticTourCacheModel.domesticTourEmployeesNo;

		if ((domesticTourEmployeesNo != null) &&
			(domesticTourEmployeesNo.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourEmployeesNo = null;
		}

		attractionDomesticTourCacheModel.domesticTourOfficeLocation =
			getDomesticTourOfficeLocation();

		String domesticTourOfficeLocation =
			attractionDomesticTourCacheModel.domesticTourOfficeLocation;

		if ((domesticTourOfficeLocation != null) &&
			(domesticTourOfficeLocation.length() == 0)) {

			attractionDomesticTourCacheModel.domesticTourOfficeLocation = null;
		}

		Date domesticTourSignDate = getDomesticTourSignDate();

		if (domesticTourSignDate != null) {
			attractionDomesticTourCacheModel.domesticTourSignDate =
				domesticTourSignDate.getTime();
		}
		else {
			attractionDomesticTourCacheModel.domesticTourSignDate =
				Long.MIN_VALUE;
		}

		attractionDomesticTourCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionDomesticTourCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionDomesticTour, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionDomesticTour, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionDomesticTour, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionDomesticTour)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AttractionDomesticTour>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AttractionDomesticTour.class, ModelWrapper.class);

	}

	private long _attractionDomesticTourId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _domesticTourApplicantName;
	private String _domesticTourAddress;
	private String _domesticTourCompanyName;
	private String _domesticTourExactLocation;
	private String _domesticTourTelephone;
	private String _domesticTourEmail;
	private Date _domesticTourDate;
	private String _domesticTourManagerName;
	private String _domesticTourVehiclesNum;
	private String _domesticTourEmployeesNo;
	private String _domesticTourOfficeLocation;
	private Date _domesticTourSignDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionDomesticTour, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionDomesticTour)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionDomesticTourId", _attractionDomesticTourId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"domesticTourApplicantName", _domesticTourApplicantName);
		_columnOriginalValues.put("domesticTourAddress", _domesticTourAddress);
		_columnOriginalValues.put(
			"domesticTourCompanyName", _domesticTourCompanyName);
		_columnOriginalValues.put(
			"domesticTourExactLocation", _domesticTourExactLocation);
		_columnOriginalValues.put(
			"domesticTourTelephone", _domesticTourTelephone);
		_columnOriginalValues.put("domesticTourEmail", _domesticTourEmail);
		_columnOriginalValues.put("domesticTourDate", _domesticTourDate);
		_columnOriginalValues.put(
			"domesticTourManagerName", _domesticTourManagerName);
		_columnOriginalValues.put(
			"domesticTourVehiclesNum", _domesticTourVehiclesNum);
		_columnOriginalValues.put(
			"domesticTourEmployeesNo", _domesticTourEmployeesNo);
		_columnOriginalValues.put(
			"domesticTourOfficeLocation", _domesticTourOfficeLocation);
		_columnOriginalValues.put(
			"domesticTourSignDate", _domesticTourSignDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionDomesticTourId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("domesticTourApplicantName", 128L);

		columnBitmasks.put("domesticTourAddress", 256L);

		columnBitmasks.put("domesticTourCompanyName", 512L);

		columnBitmasks.put("domesticTourExactLocation", 1024L);

		columnBitmasks.put("domesticTourTelephone", 2048L);

		columnBitmasks.put("domesticTourEmail", 4096L);

		columnBitmasks.put("domesticTourDate", 8192L);

		columnBitmasks.put("domesticTourManagerName", 16384L);

		columnBitmasks.put("domesticTourVehiclesNum", 32768L);

		columnBitmasks.put("domesticTourEmployeesNo", 65536L);

		columnBitmasks.put("domesticTourOfficeLocation", 131072L);

		columnBitmasks.put("domesticTourSignDate", 262144L);

		columnBitmasks.put("jtbApplicationId", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionDomesticTour _escapedModel;

}