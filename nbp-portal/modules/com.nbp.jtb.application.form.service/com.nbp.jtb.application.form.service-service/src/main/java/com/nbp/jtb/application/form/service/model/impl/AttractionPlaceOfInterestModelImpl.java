/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionPlaceOfInterest;
import com.nbp.jtb.application.form.service.model.AttractionPlaceOfInterestModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionPlaceOfInterest service. Represents a row in the &quot;nbp_jtb_place_interest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionPlaceOfInterestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionPlaceOfInterestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionPlaceOfInterestImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionPlaceOfInterestModelImpl
	extends BaseModelImpl<AttractionPlaceOfInterest>
	implements AttractionPlaceOfInterestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction place of interest model instance should use the <code>AttractionPlaceOfInterest</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_place_interest";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionPlaceOfInterestId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"placeOfInterest", Types.VARCHAR}, {"typeOfRole", Types.VARCHAR},
		{"placeInterestOwnerName", Types.VARCHAR},
		{"nameOfInterestLocation", Types.VARCHAR},
		{"placeOfInterestLocation", Types.VARCHAR},
		{"placeOfInterestMailing", Types.VARCHAR},
		{"placeOfInterestTelephone", Types.VARCHAR},
		{"placeOfInterestEmail", Types.VARCHAR},
		{"placeOfInterestEmployeesNo", Types.VARCHAR},
		{"placeOfInterestParish", Types.VARCHAR},
		{"placeOfInterestOwnerGenDec", Types.VARCHAR},
		{"placeOfInterestHotelLaws", Types.VARCHAR},
		{"placeOfInterestDate", Types.TIMESTAMP},
		{"placeOfInterestName", Types.VARCHAR},
		{"placeOfInterestOperating", Types.TIMESTAMP},
		{"placeOfInterestAcresLand", Types.VARCHAR},
		{"walkingTour", Types.VARCHAR}, {"cemeteryTour", Types.VARCHAR},
		{"gardenTour", Types.VARCHAR}, {"placeOfInterestRooms", Types.VARCHAR},
		{"placeOfInterestTentSpace", Types.VARCHAR},
		{"placeOfInterestShowers", Types.VARCHAR},
		{"placeOfInterestSanitary", Types.VARCHAR},
		{"placeOfInterestSignDate", Types.TIMESTAMP},
		{"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionPlaceOfInterestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("placeOfInterest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfRole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeInterestOwnerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfInterestLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestMailing", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestEmployeesNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestOwnerGenDec", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestHotelLaws", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("placeOfInterestName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestOperating", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("placeOfInterestAcresLand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("walkingTour", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cemeteryTour", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gardenTour", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestRooms", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestTentSpace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestShowers", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestSanitary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeOfInterestSignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_place_interest (attractionPlaceOfInterestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,placeOfInterest VARCHAR(75) null,typeOfRole VARCHAR(75) null,placeInterestOwnerName VARCHAR(75) null,nameOfInterestLocation VARCHAR(75) null,placeOfInterestLocation VARCHAR(75) null,placeOfInterestMailing VARCHAR(75) null,placeOfInterestTelephone VARCHAR(75) null,placeOfInterestEmail VARCHAR(75) null,placeOfInterestEmployeesNo VARCHAR(75) null,placeOfInterestParish VARCHAR(75) null,placeOfInterestOwnerGenDec VARCHAR(75) null,placeOfInterestHotelLaws VARCHAR(75) null,placeOfInterestDate DATE null,placeOfInterestName VARCHAR(75) null,placeOfInterestOperating DATE null,placeOfInterestAcresLand VARCHAR(75) null,walkingTour VARCHAR(75) null,cemeteryTour VARCHAR(75) null,gardenTour VARCHAR(75) null,placeOfInterestRooms VARCHAR(75) null,placeOfInterestTentSpace VARCHAR(75) null,placeOfInterestShowers VARCHAR(75) null,placeOfInterestSanitary VARCHAR(75) null,placeOfInterestSignDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_place_interest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionPlaceOfInterest.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_place_interest.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionPlaceOfInterestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionPlaceOfInterestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionPlaceOfInterestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionPlaceOfInterestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionPlaceOfInterest.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionPlaceOfInterest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionPlaceOfInterest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionPlaceOfInterest, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionPlaceOfInterest, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionPlaceOfInterest)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionPlaceOfInterest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionPlaceOfInterest, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionPlaceOfInterest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionPlaceOfInterest, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionPlaceOfInterest, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionPlaceOfInterest, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionPlaceOfInterest, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionPlaceOfInterest, Object>>();

			attributeGetterFunctions.put(
				"attractionPlaceOfInterestId",
				AttractionPlaceOfInterest::getAttractionPlaceOfInterestId);
			attributeGetterFunctions.put(
				"groupId", AttractionPlaceOfInterest::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionPlaceOfInterest::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionPlaceOfInterest::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionPlaceOfInterest::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionPlaceOfInterest::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionPlaceOfInterest::getModifiedDate);
			attributeGetterFunctions.put(
				"placeOfInterest",
				AttractionPlaceOfInterest::getPlaceOfInterest);
			attributeGetterFunctions.put(
				"typeOfRole", AttractionPlaceOfInterest::getTypeOfRole);
			attributeGetterFunctions.put(
				"placeInterestOwnerName",
				AttractionPlaceOfInterest::getPlaceInterestOwnerName);
			attributeGetterFunctions.put(
				"nameOfInterestLocation",
				AttractionPlaceOfInterest::getNameOfInterestLocation);
			attributeGetterFunctions.put(
				"placeOfInterestLocation",
				AttractionPlaceOfInterest::getPlaceOfInterestLocation);
			attributeGetterFunctions.put(
				"placeOfInterestMailing",
				AttractionPlaceOfInterest::getPlaceOfInterestMailing);
			attributeGetterFunctions.put(
				"placeOfInterestTelephone",
				AttractionPlaceOfInterest::getPlaceOfInterestTelephone);
			attributeGetterFunctions.put(
				"placeOfInterestEmail",
				AttractionPlaceOfInterest::getPlaceOfInterestEmail);
			attributeGetterFunctions.put(
				"placeOfInterestEmployeesNo",
				AttractionPlaceOfInterest::getPlaceOfInterestEmployeesNo);
			attributeGetterFunctions.put(
				"placeOfInterestParish",
				AttractionPlaceOfInterest::getPlaceOfInterestParish);
			attributeGetterFunctions.put(
				"placeOfInterestOwnerGenDec",
				AttractionPlaceOfInterest::getPlaceOfInterestOwnerGenDec);
			attributeGetterFunctions.put(
				"placeOfInterestHotelLaws",
				AttractionPlaceOfInterest::getPlaceOfInterestHotelLaws);
			attributeGetterFunctions.put(
				"placeOfInterestDate",
				AttractionPlaceOfInterest::getPlaceOfInterestDate);
			attributeGetterFunctions.put(
				"placeOfInterestName",
				AttractionPlaceOfInterest::getPlaceOfInterestName);
			attributeGetterFunctions.put(
				"placeOfInterestOperating",
				AttractionPlaceOfInterest::getPlaceOfInterestOperating);
			attributeGetterFunctions.put(
				"placeOfInterestAcresLand",
				AttractionPlaceOfInterest::getPlaceOfInterestAcresLand);
			attributeGetterFunctions.put(
				"walkingTour", AttractionPlaceOfInterest::getWalkingTour);
			attributeGetterFunctions.put(
				"cemeteryTour", AttractionPlaceOfInterest::getCemeteryTour);
			attributeGetterFunctions.put(
				"gardenTour", AttractionPlaceOfInterest::getGardenTour);
			attributeGetterFunctions.put(
				"placeOfInterestRooms",
				AttractionPlaceOfInterest::getPlaceOfInterestRooms);
			attributeGetterFunctions.put(
				"placeOfInterestTentSpace",
				AttractionPlaceOfInterest::getPlaceOfInterestTentSpace);
			attributeGetterFunctions.put(
				"placeOfInterestShowers",
				AttractionPlaceOfInterest::getPlaceOfInterestShowers);
			attributeGetterFunctions.put(
				"placeOfInterestSanitary",
				AttractionPlaceOfInterest::getPlaceOfInterestSanitary);
			attributeGetterFunctions.put(
				"placeOfInterestSignDate",
				AttractionPlaceOfInterest::getPlaceOfInterestSignDate);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionPlaceOfInterest::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionPlaceOfInterest, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionPlaceOfInterest, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionPlaceOfInterest, ?>>();

			attributeSetterBiConsumers.put(
				"attractionPlaceOfInterestId",
				(BiConsumer<AttractionPlaceOfInterest, Long>)
					AttractionPlaceOfInterest::setAttractionPlaceOfInterestId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionPlaceOfInterest, Long>)
					AttractionPlaceOfInterest::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionPlaceOfInterest, Long>)
					AttractionPlaceOfInterest::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionPlaceOfInterest, Long>)
					AttractionPlaceOfInterest::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionPlaceOfInterest, Date>)
					AttractionPlaceOfInterest::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionPlaceOfInterest, Date>)
					AttractionPlaceOfInterest::setModifiedDate);
			attributeSetterBiConsumers.put(
				"placeOfInterest",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterest);
			attributeSetterBiConsumers.put(
				"typeOfRole",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setTypeOfRole);
			attributeSetterBiConsumers.put(
				"placeInterestOwnerName",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceInterestOwnerName);
			attributeSetterBiConsumers.put(
				"nameOfInterestLocation",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setNameOfInterestLocation);
			attributeSetterBiConsumers.put(
				"placeOfInterestLocation",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestLocation);
			attributeSetterBiConsumers.put(
				"placeOfInterestMailing",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestMailing);
			attributeSetterBiConsumers.put(
				"placeOfInterestTelephone",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestTelephone);
			attributeSetterBiConsumers.put(
				"placeOfInterestEmail",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestEmail);
			attributeSetterBiConsumers.put(
				"placeOfInterestEmployeesNo",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestEmployeesNo);
			attributeSetterBiConsumers.put(
				"placeOfInterestParish",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestParish);
			attributeSetterBiConsumers.put(
				"placeOfInterestOwnerGenDec",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestOwnerGenDec);
			attributeSetterBiConsumers.put(
				"placeOfInterestHotelLaws",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestHotelLaws);
			attributeSetterBiConsumers.put(
				"placeOfInterestDate",
				(BiConsumer<AttractionPlaceOfInterest, Date>)
					AttractionPlaceOfInterest::setPlaceOfInterestDate);
			attributeSetterBiConsumers.put(
				"placeOfInterestName",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestName);
			attributeSetterBiConsumers.put(
				"placeOfInterestOperating",
				(BiConsumer<AttractionPlaceOfInterest, Date>)
					AttractionPlaceOfInterest::setPlaceOfInterestOperating);
			attributeSetterBiConsumers.put(
				"placeOfInterestAcresLand",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestAcresLand);
			attributeSetterBiConsumers.put(
				"walkingTour",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setWalkingTour);
			attributeSetterBiConsumers.put(
				"cemeteryTour",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setCemeteryTour);
			attributeSetterBiConsumers.put(
				"gardenTour",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setGardenTour);
			attributeSetterBiConsumers.put(
				"placeOfInterestRooms",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestRooms);
			attributeSetterBiConsumers.put(
				"placeOfInterestTentSpace",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestTentSpace);
			attributeSetterBiConsumers.put(
				"placeOfInterestShowers",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestShowers);
			attributeSetterBiConsumers.put(
				"placeOfInterestSanitary",
				(BiConsumer<AttractionPlaceOfInterest, String>)
					AttractionPlaceOfInterest::setPlaceOfInterestSanitary);
			attributeSetterBiConsumers.put(
				"placeOfInterestSignDate",
				(BiConsumer<AttractionPlaceOfInterest, Date>)
					AttractionPlaceOfInterest::setPlaceOfInterestSignDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionPlaceOfInterest, Long>)
					AttractionPlaceOfInterest::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionPlaceOfInterestId() {
		return _attractionPlaceOfInterestId;
	}

	@Override
	public void setAttractionPlaceOfInterestId(
		long attractionPlaceOfInterestId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionPlaceOfInterestId = attractionPlaceOfInterestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPlaceOfInterest() {
		if (_placeOfInterest == null) {
			return "";
		}
		else {
			return _placeOfInterest;
		}
	}

	@Override
	public void setPlaceOfInterest(String placeOfInterest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterest = placeOfInterest;
	}

	@JSON
	@Override
	public String getTypeOfRole() {
		if (_typeOfRole == null) {
			return "";
		}
		else {
			return _typeOfRole;
		}
	}

	@Override
	public void setTypeOfRole(String typeOfRole) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfRole = typeOfRole;
	}

	@JSON
	@Override
	public String getPlaceInterestOwnerName() {
		if (_placeInterestOwnerName == null) {
			return "";
		}
		else {
			return _placeInterestOwnerName;
		}
	}

	@Override
	public void setPlaceInterestOwnerName(String placeInterestOwnerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeInterestOwnerName = placeInterestOwnerName;
	}

	@JSON
	@Override
	public String getNameOfInterestLocation() {
		if (_nameOfInterestLocation == null) {
			return "";
		}
		else {
			return _nameOfInterestLocation;
		}
	}

	@Override
	public void setNameOfInterestLocation(String nameOfInterestLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfInterestLocation = nameOfInterestLocation;
	}

	@JSON
	@Override
	public String getPlaceOfInterestLocation() {
		if (_placeOfInterestLocation == null) {
			return "";
		}
		else {
			return _placeOfInterestLocation;
		}
	}

	@Override
	public void setPlaceOfInterestLocation(String placeOfInterestLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestLocation = placeOfInterestLocation;
	}

	@JSON
	@Override
	public String getPlaceOfInterestMailing() {
		if (_placeOfInterestMailing == null) {
			return "";
		}
		else {
			return _placeOfInterestMailing;
		}
	}

	@Override
	public void setPlaceOfInterestMailing(String placeOfInterestMailing) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestMailing = placeOfInterestMailing;
	}

	@JSON
	@Override
	public String getPlaceOfInterestTelephone() {
		if (_placeOfInterestTelephone == null) {
			return "";
		}
		else {
			return _placeOfInterestTelephone;
		}
	}

	@Override
	public void setPlaceOfInterestTelephone(String placeOfInterestTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestTelephone = placeOfInterestTelephone;
	}

	@JSON
	@Override
	public String getPlaceOfInterestEmail() {
		if (_placeOfInterestEmail == null) {
			return "";
		}
		else {
			return _placeOfInterestEmail;
		}
	}

	@Override
	public void setPlaceOfInterestEmail(String placeOfInterestEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestEmail = placeOfInterestEmail;
	}

	@JSON
	@Override
	public String getPlaceOfInterestEmployeesNo() {
		if (_placeOfInterestEmployeesNo == null) {
			return "";
		}
		else {
			return _placeOfInterestEmployeesNo;
		}
	}

	@Override
	public void setPlaceOfInterestEmployeesNo(
		String placeOfInterestEmployeesNo) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestEmployeesNo = placeOfInterestEmployeesNo;
	}

	@JSON
	@Override
	public String getPlaceOfInterestParish() {
		if (_placeOfInterestParish == null) {
			return "";
		}
		else {
			return _placeOfInterestParish;
		}
	}

	@Override
	public void setPlaceOfInterestParish(String placeOfInterestParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestParish = placeOfInterestParish;
	}

	@JSON
	@Override
	public String getPlaceOfInterestOwnerGenDec() {
		if (_placeOfInterestOwnerGenDec == null) {
			return "";
		}
		else {
			return _placeOfInterestOwnerGenDec;
		}
	}

	@Override
	public void setPlaceOfInterestOwnerGenDec(
		String placeOfInterestOwnerGenDec) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestOwnerGenDec = placeOfInterestOwnerGenDec;
	}

	@JSON
	@Override
	public String getPlaceOfInterestHotelLaws() {
		if (_placeOfInterestHotelLaws == null) {
			return "";
		}
		else {
			return _placeOfInterestHotelLaws;
		}
	}

	@Override
	public void setPlaceOfInterestHotelLaws(String placeOfInterestHotelLaws) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestHotelLaws = placeOfInterestHotelLaws;
	}

	@JSON
	@Override
	public Date getPlaceOfInterestDate() {
		return _placeOfInterestDate;
	}

	@Override
	public void setPlaceOfInterestDate(Date placeOfInterestDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestDate = placeOfInterestDate;
	}

	@JSON
	@Override
	public String getPlaceOfInterestName() {
		if (_placeOfInterestName == null) {
			return "";
		}
		else {
			return _placeOfInterestName;
		}
	}

	@Override
	public void setPlaceOfInterestName(String placeOfInterestName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestName = placeOfInterestName;
	}

	@JSON
	@Override
	public Date getPlaceOfInterestOperating() {
		return _placeOfInterestOperating;
	}

	@Override
	public void setPlaceOfInterestOperating(Date placeOfInterestOperating) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestOperating = placeOfInterestOperating;
	}

	@JSON
	@Override
	public String getPlaceOfInterestAcresLand() {
		if (_placeOfInterestAcresLand == null) {
			return "";
		}
		else {
			return _placeOfInterestAcresLand;
		}
	}

	@Override
	public void setPlaceOfInterestAcresLand(String placeOfInterestAcresLand) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestAcresLand = placeOfInterestAcresLand;
	}

	@JSON
	@Override
	public String getWalkingTour() {
		if (_walkingTour == null) {
			return "";
		}
		else {
			return _walkingTour;
		}
	}

	@Override
	public void setWalkingTour(String walkingTour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_walkingTour = walkingTour;
	}

	@JSON
	@Override
	public String getCemeteryTour() {
		if (_cemeteryTour == null) {
			return "";
		}
		else {
			return _cemeteryTour;
		}
	}

	@Override
	public void setCemeteryTour(String cemeteryTour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cemeteryTour = cemeteryTour;
	}

	@JSON
	@Override
	public String getGardenTour() {
		if (_gardenTour == null) {
			return "";
		}
		else {
			return _gardenTour;
		}
	}

	@Override
	public void setGardenTour(String gardenTour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gardenTour = gardenTour;
	}

	@JSON
	@Override
	public String getPlaceOfInterestRooms() {
		if (_placeOfInterestRooms == null) {
			return "";
		}
		else {
			return _placeOfInterestRooms;
		}
	}

	@Override
	public void setPlaceOfInterestRooms(String placeOfInterestRooms) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestRooms = placeOfInterestRooms;
	}

	@JSON
	@Override
	public String getPlaceOfInterestTentSpace() {
		if (_placeOfInterestTentSpace == null) {
			return "";
		}
		else {
			return _placeOfInterestTentSpace;
		}
	}

	@Override
	public void setPlaceOfInterestTentSpace(String placeOfInterestTentSpace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestTentSpace = placeOfInterestTentSpace;
	}

	@JSON
	@Override
	public String getPlaceOfInterestShowers() {
		if (_placeOfInterestShowers == null) {
			return "";
		}
		else {
			return _placeOfInterestShowers;
		}
	}

	@Override
	public void setPlaceOfInterestShowers(String placeOfInterestShowers) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestShowers = placeOfInterestShowers;
	}

	@JSON
	@Override
	public String getPlaceOfInterestSanitary() {
		if (_placeOfInterestSanitary == null) {
			return "";
		}
		else {
			return _placeOfInterestSanitary;
		}
	}

	@Override
	public void setPlaceOfInterestSanitary(String placeOfInterestSanitary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestSanitary = placeOfInterestSanitary;
	}

	@JSON
	@Override
	public Date getPlaceOfInterestSignDate() {
		return _placeOfInterestSignDate;
	}

	@Override
	public void setPlaceOfInterestSignDate(Date placeOfInterestSignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeOfInterestSignDate = placeOfInterestSignDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionPlaceOfInterest.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionPlaceOfInterest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionPlaceOfInterest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionPlaceOfInterestImpl attractionPlaceOfInterestImpl =
			new AttractionPlaceOfInterestImpl();

		attractionPlaceOfInterestImpl.setAttractionPlaceOfInterestId(
			getAttractionPlaceOfInterestId());
		attractionPlaceOfInterestImpl.setGroupId(getGroupId());
		attractionPlaceOfInterestImpl.setCompanyId(getCompanyId());
		attractionPlaceOfInterestImpl.setUserId(getUserId());
		attractionPlaceOfInterestImpl.setUserName(getUserName());
		attractionPlaceOfInterestImpl.setCreateDate(getCreateDate());
		attractionPlaceOfInterestImpl.setModifiedDate(getModifiedDate());
		attractionPlaceOfInterestImpl.setPlaceOfInterest(getPlaceOfInterest());
		attractionPlaceOfInterestImpl.setTypeOfRole(getTypeOfRole());
		attractionPlaceOfInterestImpl.setPlaceInterestOwnerName(
			getPlaceInterestOwnerName());
		attractionPlaceOfInterestImpl.setNameOfInterestLocation(
			getNameOfInterestLocation());
		attractionPlaceOfInterestImpl.setPlaceOfInterestLocation(
			getPlaceOfInterestLocation());
		attractionPlaceOfInterestImpl.setPlaceOfInterestMailing(
			getPlaceOfInterestMailing());
		attractionPlaceOfInterestImpl.setPlaceOfInterestTelephone(
			getPlaceOfInterestTelephone());
		attractionPlaceOfInterestImpl.setPlaceOfInterestEmail(
			getPlaceOfInterestEmail());
		attractionPlaceOfInterestImpl.setPlaceOfInterestEmployeesNo(
			getPlaceOfInterestEmployeesNo());
		attractionPlaceOfInterestImpl.setPlaceOfInterestParish(
			getPlaceOfInterestParish());
		attractionPlaceOfInterestImpl.setPlaceOfInterestOwnerGenDec(
			getPlaceOfInterestOwnerGenDec());
		attractionPlaceOfInterestImpl.setPlaceOfInterestHotelLaws(
			getPlaceOfInterestHotelLaws());
		attractionPlaceOfInterestImpl.setPlaceOfInterestDate(
			getPlaceOfInterestDate());
		attractionPlaceOfInterestImpl.setPlaceOfInterestName(
			getPlaceOfInterestName());
		attractionPlaceOfInterestImpl.setPlaceOfInterestOperating(
			getPlaceOfInterestOperating());
		attractionPlaceOfInterestImpl.setPlaceOfInterestAcresLand(
			getPlaceOfInterestAcresLand());
		attractionPlaceOfInterestImpl.setWalkingTour(getWalkingTour());
		attractionPlaceOfInterestImpl.setCemeteryTour(getCemeteryTour());
		attractionPlaceOfInterestImpl.setGardenTour(getGardenTour());
		attractionPlaceOfInterestImpl.setPlaceOfInterestRooms(
			getPlaceOfInterestRooms());
		attractionPlaceOfInterestImpl.setPlaceOfInterestTentSpace(
			getPlaceOfInterestTentSpace());
		attractionPlaceOfInterestImpl.setPlaceOfInterestShowers(
			getPlaceOfInterestShowers());
		attractionPlaceOfInterestImpl.setPlaceOfInterestSanitary(
			getPlaceOfInterestSanitary());
		attractionPlaceOfInterestImpl.setPlaceOfInterestSignDate(
			getPlaceOfInterestSignDate());
		attractionPlaceOfInterestImpl.setJtbApplicationId(
			getJtbApplicationId());

		attractionPlaceOfInterestImpl.resetOriginalValues();

		return attractionPlaceOfInterestImpl;
	}

	@Override
	public AttractionPlaceOfInterest cloneWithOriginalValues() {
		AttractionPlaceOfInterestImpl attractionPlaceOfInterestImpl =
			new AttractionPlaceOfInterestImpl();

		attractionPlaceOfInterestImpl.setAttractionPlaceOfInterestId(
			this.<Long>getColumnOriginalValue("attractionPlaceOfInterestId"));
		attractionPlaceOfInterestImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionPlaceOfInterestImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionPlaceOfInterestImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionPlaceOfInterestImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionPlaceOfInterestImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionPlaceOfInterestImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionPlaceOfInterestImpl.setPlaceOfInterest(
			this.<String>getColumnOriginalValue("placeOfInterest"));
		attractionPlaceOfInterestImpl.setTypeOfRole(
			this.<String>getColumnOriginalValue("typeOfRole"));
		attractionPlaceOfInterestImpl.setPlaceInterestOwnerName(
			this.<String>getColumnOriginalValue("placeInterestOwnerName"));
		attractionPlaceOfInterestImpl.setNameOfInterestLocation(
			this.<String>getColumnOriginalValue("nameOfInterestLocation"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestLocation(
			this.<String>getColumnOriginalValue("placeOfInterestLocation"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestMailing(
			this.<String>getColumnOriginalValue("placeOfInterestMailing"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestTelephone(
			this.<String>getColumnOriginalValue("placeOfInterestTelephone"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestEmail(
			this.<String>getColumnOriginalValue("placeOfInterestEmail"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestEmployeesNo(
			this.<String>getColumnOriginalValue("placeOfInterestEmployeesNo"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestParish(
			this.<String>getColumnOriginalValue("placeOfInterestParish"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestOwnerGenDec(
			this.<String>getColumnOriginalValue("placeOfInterestOwnerGenDec"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestHotelLaws(
			this.<String>getColumnOriginalValue("placeOfInterestHotelLaws"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestDate(
			this.<Date>getColumnOriginalValue("placeOfInterestDate"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestName(
			this.<String>getColumnOriginalValue("placeOfInterestName"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestOperating(
			this.<Date>getColumnOriginalValue("placeOfInterestOperating"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestAcresLand(
			this.<String>getColumnOriginalValue("placeOfInterestAcresLand"));
		attractionPlaceOfInterestImpl.setWalkingTour(
			this.<String>getColumnOriginalValue("walkingTour"));
		attractionPlaceOfInterestImpl.setCemeteryTour(
			this.<String>getColumnOriginalValue("cemeteryTour"));
		attractionPlaceOfInterestImpl.setGardenTour(
			this.<String>getColumnOriginalValue("gardenTour"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestRooms(
			this.<String>getColumnOriginalValue("placeOfInterestRooms"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestTentSpace(
			this.<String>getColumnOriginalValue("placeOfInterestTentSpace"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestShowers(
			this.<String>getColumnOriginalValue("placeOfInterestShowers"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestSanitary(
			this.<String>getColumnOriginalValue("placeOfInterestSanitary"));
		attractionPlaceOfInterestImpl.setPlaceOfInterestSignDate(
			this.<Date>getColumnOriginalValue("placeOfInterestSignDate"));
		attractionPlaceOfInterestImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionPlaceOfInterestImpl;
	}

	@Override
	public int compareTo(AttractionPlaceOfInterest attractionPlaceOfInterest) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionPlaceOfInterest.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionPlaceOfInterest)) {
			return false;
		}

		AttractionPlaceOfInterest attractionPlaceOfInterest =
			(AttractionPlaceOfInterest)object;

		long primaryKey = attractionPlaceOfInterest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionPlaceOfInterest> toCacheModel() {
		AttractionPlaceOfInterestCacheModel
			attractionPlaceOfInterestCacheModel =
				new AttractionPlaceOfInterestCacheModel();

		attractionPlaceOfInterestCacheModel.attractionPlaceOfInterestId =
			getAttractionPlaceOfInterestId();

		attractionPlaceOfInterestCacheModel.groupId = getGroupId();

		attractionPlaceOfInterestCacheModel.companyId = getCompanyId();

		attractionPlaceOfInterestCacheModel.userId = getUserId();

		attractionPlaceOfInterestCacheModel.userName = getUserName();

		String userName = attractionPlaceOfInterestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionPlaceOfInterestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionPlaceOfInterestCacheModel.createDate =
				createDate.getTime();
		}
		else {
			attractionPlaceOfInterestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionPlaceOfInterestCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionPlaceOfInterestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterest =
			getPlaceOfInterest();

		String placeOfInterest =
			attractionPlaceOfInterestCacheModel.placeOfInterest;

		if ((placeOfInterest != null) && (placeOfInterest.length() == 0)) {
			attractionPlaceOfInterestCacheModel.placeOfInterest = null;
		}

		attractionPlaceOfInterestCacheModel.typeOfRole = getTypeOfRole();

		String typeOfRole = attractionPlaceOfInterestCacheModel.typeOfRole;

		if ((typeOfRole != null) && (typeOfRole.length() == 0)) {
			attractionPlaceOfInterestCacheModel.typeOfRole = null;
		}

		attractionPlaceOfInterestCacheModel.placeInterestOwnerName =
			getPlaceInterestOwnerName();

		String placeInterestOwnerName =
			attractionPlaceOfInterestCacheModel.placeInterestOwnerName;

		if ((placeInterestOwnerName != null) &&
			(placeInterestOwnerName.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeInterestOwnerName = null;
		}

		attractionPlaceOfInterestCacheModel.nameOfInterestLocation =
			getNameOfInterestLocation();

		String nameOfInterestLocation =
			attractionPlaceOfInterestCacheModel.nameOfInterestLocation;

		if ((nameOfInterestLocation != null) &&
			(nameOfInterestLocation.length() == 0)) {

			attractionPlaceOfInterestCacheModel.nameOfInterestLocation = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestLocation =
			getPlaceOfInterestLocation();

		String placeOfInterestLocation =
			attractionPlaceOfInterestCacheModel.placeOfInterestLocation;

		if ((placeOfInterestLocation != null) &&
			(placeOfInterestLocation.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestLocation = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestMailing =
			getPlaceOfInterestMailing();

		String placeOfInterestMailing =
			attractionPlaceOfInterestCacheModel.placeOfInterestMailing;

		if ((placeOfInterestMailing != null) &&
			(placeOfInterestMailing.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestMailing = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestTelephone =
			getPlaceOfInterestTelephone();

		String placeOfInterestTelephone =
			attractionPlaceOfInterestCacheModel.placeOfInterestTelephone;

		if ((placeOfInterestTelephone != null) &&
			(placeOfInterestTelephone.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestTelephone = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestEmail =
			getPlaceOfInterestEmail();

		String placeOfInterestEmail =
			attractionPlaceOfInterestCacheModel.placeOfInterestEmail;

		if ((placeOfInterestEmail != null) &&
			(placeOfInterestEmail.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestEmail = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestEmployeesNo =
			getPlaceOfInterestEmployeesNo();

		String placeOfInterestEmployeesNo =
			attractionPlaceOfInterestCacheModel.placeOfInterestEmployeesNo;

		if ((placeOfInterestEmployeesNo != null) &&
			(placeOfInterestEmployeesNo.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestEmployeesNo =
				null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestParish =
			getPlaceOfInterestParish();

		String placeOfInterestParish =
			attractionPlaceOfInterestCacheModel.placeOfInterestParish;

		if ((placeOfInterestParish != null) &&
			(placeOfInterestParish.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestParish = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestOwnerGenDec =
			getPlaceOfInterestOwnerGenDec();

		String placeOfInterestOwnerGenDec =
			attractionPlaceOfInterestCacheModel.placeOfInterestOwnerGenDec;

		if ((placeOfInterestOwnerGenDec != null) &&
			(placeOfInterestOwnerGenDec.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestOwnerGenDec =
				null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestHotelLaws =
			getPlaceOfInterestHotelLaws();

		String placeOfInterestHotelLaws =
			attractionPlaceOfInterestCacheModel.placeOfInterestHotelLaws;

		if ((placeOfInterestHotelLaws != null) &&
			(placeOfInterestHotelLaws.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestHotelLaws = null;
		}

		Date placeOfInterestDate = getPlaceOfInterestDate();

		if (placeOfInterestDate != null) {
			attractionPlaceOfInterestCacheModel.placeOfInterestDate =
				placeOfInterestDate.getTime();
		}
		else {
			attractionPlaceOfInterestCacheModel.placeOfInterestDate =
				Long.MIN_VALUE;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestName =
			getPlaceOfInterestName();

		String placeOfInterestName =
			attractionPlaceOfInterestCacheModel.placeOfInterestName;

		if ((placeOfInterestName != null) &&
			(placeOfInterestName.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestName = null;
		}

		Date placeOfInterestOperating = getPlaceOfInterestOperating();

		if (placeOfInterestOperating != null) {
			attractionPlaceOfInterestCacheModel.placeOfInterestOperating =
				placeOfInterestOperating.getTime();
		}
		else {
			attractionPlaceOfInterestCacheModel.placeOfInterestOperating =
				Long.MIN_VALUE;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestAcresLand =
			getPlaceOfInterestAcresLand();

		String placeOfInterestAcresLand =
			attractionPlaceOfInterestCacheModel.placeOfInterestAcresLand;

		if ((placeOfInterestAcresLand != null) &&
			(placeOfInterestAcresLand.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestAcresLand = null;
		}

		attractionPlaceOfInterestCacheModel.walkingTour = getWalkingTour();

		String walkingTour = attractionPlaceOfInterestCacheModel.walkingTour;

		if ((walkingTour != null) && (walkingTour.length() == 0)) {
			attractionPlaceOfInterestCacheModel.walkingTour = null;
		}

		attractionPlaceOfInterestCacheModel.cemeteryTour = getCemeteryTour();

		String cemeteryTour = attractionPlaceOfInterestCacheModel.cemeteryTour;

		if ((cemeteryTour != null) && (cemeteryTour.length() == 0)) {
			attractionPlaceOfInterestCacheModel.cemeteryTour = null;
		}

		attractionPlaceOfInterestCacheModel.gardenTour = getGardenTour();

		String gardenTour = attractionPlaceOfInterestCacheModel.gardenTour;

		if ((gardenTour != null) && (gardenTour.length() == 0)) {
			attractionPlaceOfInterestCacheModel.gardenTour = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestRooms =
			getPlaceOfInterestRooms();

		String placeOfInterestRooms =
			attractionPlaceOfInterestCacheModel.placeOfInterestRooms;

		if ((placeOfInterestRooms != null) &&
			(placeOfInterestRooms.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestRooms = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestTentSpace =
			getPlaceOfInterestTentSpace();

		String placeOfInterestTentSpace =
			attractionPlaceOfInterestCacheModel.placeOfInterestTentSpace;

		if ((placeOfInterestTentSpace != null) &&
			(placeOfInterestTentSpace.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestTentSpace = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestShowers =
			getPlaceOfInterestShowers();

		String placeOfInterestShowers =
			attractionPlaceOfInterestCacheModel.placeOfInterestShowers;

		if ((placeOfInterestShowers != null) &&
			(placeOfInterestShowers.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestShowers = null;
		}

		attractionPlaceOfInterestCacheModel.placeOfInterestSanitary =
			getPlaceOfInterestSanitary();

		String placeOfInterestSanitary =
			attractionPlaceOfInterestCacheModel.placeOfInterestSanitary;

		if ((placeOfInterestSanitary != null) &&
			(placeOfInterestSanitary.length() == 0)) {

			attractionPlaceOfInterestCacheModel.placeOfInterestSanitary = null;
		}

		Date placeOfInterestSignDate = getPlaceOfInterestSignDate();

		if (placeOfInterestSignDate != null) {
			attractionPlaceOfInterestCacheModel.placeOfInterestSignDate =
				placeOfInterestSignDate.getTime();
		}
		else {
			attractionPlaceOfInterestCacheModel.placeOfInterestSignDate =
				Long.MIN_VALUE;
		}

		attractionPlaceOfInterestCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionPlaceOfInterestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionPlaceOfInterest, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionPlaceOfInterest, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionPlaceOfInterest, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionPlaceOfInterest)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionPlaceOfInterest>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AttractionPlaceOfInterest.class, ModelWrapper.class);

	}

	private long _attractionPlaceOfInterestId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _placeOfInterest;
	private String _typeOfRole;
	private String _placeInterestOwnerName;
	private String _nameOfInterestLocation;
	private String _placeOfInterestLocation;
	private String _placeOfInterestMailing;
	private String _placeOfInterestTelephone;
	private String _placeOfInterestEmail;
	private String _placeOfInterestEmployeesNo;
	private String _placeOfInterestParish;
	private String _placeOfInterestOwnerGenDec;
	private String _placeOfInterestHotelLaws;
	private Date _placeOfInterestDate;
	private String _placeOfInterestName;
	private Date _placeOfInterestOperating;
	private String _placeOfInterestAcresLand;
	private String _walkingTour;
	private String _cemeteryTour;
	private String _gardenTour;
	private String _placeOfInterestRooms;
	private String _placeOfInterestTentSpace;
	private String _placeOfInterestShowers;
	private String _placeOfInterestSanitary;
	private Date _placeOfInterestSignDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionPlaceOfInterest, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionPlaceOfInterest)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionPlaceOfInterestId", _attractionPlaceOfInterestId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("placeOfInterest", _placeOfInterest);
		_columnOriginalValues.put("typeOfRole", _typeOfRole);
		_columnOriginalValues.put(
			"placeInterestOwnerName", _placeInterestOwnerName);
		_columnOriginalValues.put(
			"nameOfInterestLocation", _nameOfInterestLocation);
		_columnOriginalValues.put(
			"placeOfInterestLocation", _placeOfInterestLocation);
		_columnOriginalValues.put(
			"placeOfInterestMailing", _placeOfInterestMailing);
		_columnOriginalValues.put(
			"placeOfInterestTelephone", _placeOfInterestTelephone);
		_columnOriginalValues.put(
			"placeOfInterestEmail", _placeOfInterestEmail);
		_columnOriginalValues.put(
			"placeOfInterestEmployeesNo", _placeOfInterestEmployeesNo);
		_columnOriginalValues.put(
			"placeOfInterestParish", _placeOfInterestParish);
		_columnOriginalValues.put(
			"placeOfInterestOwnerGenDec", _placeOfInterestOwnerGenDec);
		_columnOriginalValues.put(
			"placeOfInterestHotelLaws", _placeOfInterestHotelLaws);
		_columnOriginalValues.put("placeOfInterestDate", _placeOfInterestDate);
		_columnOriginalValues.put("placeOfInterestName", _placeOfInterestName);
		_columnOriginalValues.put(
			"placeOfInterestOperating", _placeOfInterestOperating);
		_columnOriginalValues.put(
			"placeOfInterestAcresLand", _placeOfInterestAcresLand);
		_columnOriginalValues.put("walkingTour", _walkingTour);
		_columnOriginalValues.put("cemeteryTour", _cemeteryTour);
		_columnOriginalValues.put("gardenTour", _gardenTour);
		_columnOriginalValues.put(
			"placeOfInterestRooms", _placeOfInterestRooms);
		_columnOriginalValues.put(
			"placeOfInterestTentSpace", _placeOfInterestTentSpace);
		_columnOriginalValues.put(
			"placeOfInterestShowers", _placeOfInterestShowers);
		_columnOriginalValues.put(
			"placeOfInterestSanitary", _placeOfInterestSanitary);
		_columnOriginalValues.put(
			"placeOfInterestSignDate", _placeOfInterestSignDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionPlaceOfInterestId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("placeOfInterest", 128L);

		columnBitmasks.put("typeOfRole", 256L);

		columnBitmasks.put("placeInterestOwnerName", 512L);

		columnBitmasks.put("nameOfInterestLocation", 1024L);

		columnBitmasks.put("placeOfInterestLocation", 2048L);

		columnBitmasks.put("placeOfInterestMailing", 4096L);

		columnBitmasks.put("placeOfInterestTelephone", 8192L);

		columnBitmasks.put("placeOfInterestEmail", 16384L);

		columnBitmasks.put("placeOfInterestEmployeesNo", 32768L);

		columnBitmasks.put("placeOfInterestParish", 65536L);

		columnBitmasks.put("placeOfInterestOwnerGenDec", 131072L);

		columnBitmasks.put("placeOfInterestHotelLaws", 262144L);

		columnBitmasks.put("placeOfInterestDate", 524288L);

		columnBitmasks.put("placeOfInterestName", 1048576L);

		columnBitmasks.put("placeOfInterestOperating", 2097152L);

		columnBitmasks.put("placeOfInterestAcresLand", 4194304L);

		columnBitmasks.put("walkingTour", 8388608L);

		columnBitmasks.put("cemeteryTour", 16777216L);

		columnBitmasks.put("gardenTour", 33554432L);

		columnBitmasks.put("placeOfInterestRooms", 67108864L);

		columnBitmasks.put("placeOfInterestTentSpace", 134217728L);

		columnBitmasks.put("placeOfInterestShowers", 268435456L);

		columnBitmasks.put("placeOfInterestSanitary", 536870912L);

		columnBitmasks.put("placeOfInterestSignDate", 1073741824L);

		columnBitmasks.put("jtbApplicationId", 2147483648L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionPlaceOfInterest _escapedModel;

}