/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionWaterRequired;
import com.nbp.jtb.application.form.service.model.AttractionWaterRequiredModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionWaterRequired service. Represents a row in the &quot;nbp_jtb_water_required&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionWaterRequiredModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionWaterRequiredImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionWaterRequiredImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionWaterRequiredModelImpl
	extends BaseModelImpl<AttractionWaterRequired>
	implements AttractionWaterRequiredModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction water required model instance should use the <code>AttractionWaterRequired</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_water_required";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionWaterRequiredId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"generalOperator", Types.VARCHAR},
		{"waterCraft", Types.VARCHAR}, {"waterSki", Types.VARCHAR},
		{"sunfishSail", Types.VARCHAR}, {"parasail", Types.VARCHAR},
		{"scubaDiving", Types.VARCHAR}, {"glassBoat", Types.VARCHAR},
		{"bananaBoat", Types.VARCHAR}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionWaterRequiredId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("generalOperator", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterCraft", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterSki", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sunfishSail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parasail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scubaDiving", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("glassBoat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bananaBoat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_water_required (attractionWaterRequiredId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,generalOperator VARCHAR(500) null,waterCraft VARCHAR(500) null,waterSki VARCHAR(500) null,sunfishSail VARCHAR(500) null,parasail VARCHAR(500) null,scubaDiving VARCHAR(500) null,glassBoat VARCHAR(500) null,bananaBoat VARCHAR(500) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_water_required";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionWaterRequired.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_water_required.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionWaterRequiredModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionWaterRequiredId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionWaterRequiredId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionWaterRequiredId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionWaterRequired.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionWaterRequired.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionWaterRequired, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionWaterRequired, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionWaterRequired, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionWaterRequired)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionWaterRequired, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionWaterRequired, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionWaterRequired)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionWaterRequired, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionWaterRequired, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionWaterRequired, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionWaterRequired, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionWaterRequired, Object>>();

			attributeGetterFunctions.put(
				"attractionWaterRequiredId",
				AttractionWaterRequired::getAttractionWaterRequiredId);
			attributeGetterFunctions.put(
				"groupId", AttractionWaterRequired::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionWaterRequired::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionWaterRequired::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionWaterRequired::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionWaterRequired::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionWaterRequired::getModifiedDate);
			attributeGetterFunctions.put(
				"generalOperator", AttractionWaterRequired::getGeneralOperator);
			attributeGetterFunctions.put(
				"waterCraft", AttractionWaterRequired::getWaterCraft);
			attributeGetterFunctions.put(
				"waterSki", AttractionWaterRequired::getWaterSki);
			attributeGetterFunctions.put(
				"sunfishSail", AttractionWaterRequired::getSunfishSail);
			attributeGetterFunctions.put(
				"parasail", AttractionWaterRequired::getParasail);
			attributeGetterFunctions.put(
				"scubaDiving", AttractionWaterRequired::getScubaDiving);
			attributeGetterFunctions.put(
				"glassBoat", AttractionWaterRequired::getGlassBoat);
			attributeGetterFunctions.put(
				"bananaBoat", AttractionWaterRequired::getBananaBoat);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionWaterRequired::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionWaterRequired, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionWaterRequired, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionWaterRequired, ?>>();

			attributeSetterBiConsumers.put(
				"attractionWaterRequiredId",
				(BiConsumer<AttractionWaterRequired, Long>)
					AttractionWaterRequired::setAttractionWaterRequiredId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionWaterRequired, Long>)
					AttractionWaterRequired::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionWaterRequired, Long>)
					AttractionWaterRequired::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionWaterRequired, Long>)
					AttractionWaterRequired::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionWaterRequired, Date>)
					AttractionWaterRequired::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionWaterRequired, Date>)
					AttractionWaterRequired::setModifiedDate);
			attributeSetterBiConsumers.put(
				"generalOperator",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setGeneralOperator);
			attributeSetterBiConsumers.put(
				"waterCraft",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setWaterCraft);
			attributeSetterBiConsumers.put(
				"waterSki",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setWaterSki);
			attributeSetterBiConsumers.put(
				"sunfishSail",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setSunfishSail);
			attributeSetterBiConsumers.put(
				"parasail",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setParasail);
			attributeSetterBiConsumers.put(
				"scubaDiving",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setScubaDiving);
			attributeSetterBiConsumers.put(
				"glassBoat",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setGlassBoat);
			attributeSetterBiConsumers.put(
				"bananaBoat",
				(BiConsumer<AttractionWaterRequired, String>)
					AttractionWaterRequired::setBananaBoat);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionWaterRequired, Long>)
					AttractionWaterRequired::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionWaterRequiredId() {
		return _attractionWaterRequiredId;
	}

	@Override
	public void setAttractionWaterRequiredId(long attractionWaterRequiredId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionWaterRequiredId = attractionWaterRequiredId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getGeneralOperator() {
		if (_generalOperator == null) {
			return "";
		}
		else {
			return _generalOperator;
		}
	}

	@Override
	public void setGeneralOperator(String generalOperator) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_generalOperator = generalOperator;
	}

	@JSON
	@Override
	public String getWaterCraft() {
		if (_waterCraft == null) {
			return "";
		}
		else {
			return _waterCraft;
		}
	}

	@Override
	public void setWaterCraft(String waterCraft) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterCraft = waterCraft;
	}

	@JSON
	@Override
	public String getWaterSki() {
		if (_waterSki == null) {
			return "";
		}
		else {
			return _waterSki;
		}
	}

	@Override
	public void setWaterSki(String waterSki) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterSki = waterSki;
	}

	@JSON
	@Override
	public String getSunfishSail() {
		if (_sunfishSail == null) {
			return "";
		}
		else {
			return _sunfishSail;
		}
	}

	@Override
	public void setSunfishSail(String sunfishSail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sunfishSail = sunfishSail;
	}

	@JSON
	@Override
	public String getParasail() {
		if (_parasail == null) {
			return "";
		}
		else {
			return _parasail;
		}
	}

	@Override
	public void setParasail(String parasail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parasail = parasail;
	}

	@JSON
	@Override
	public String getScubaDiving() {
		if (_scubaDiving == null) {
			return "";
		}
		else {
			return _scubaDiving;
		}
	}

	@Override
	public void setScubaDiving(String scubaDiving) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scubaDiving = scubaDiving;
	}

	@JSON
	@Override
	public String getGlassBoat() {
		if (_glassBoat == null) {
			return "";
		}
		else {
			return _glassBoat;
		}
	}

	@Override
	public void setGlassBoat(String glassBoat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_glassBoat = glassBoat;
	}

	@JSON
	@Override
	public String getBananaBoat() {
		if (_bananaBoat == null) {
			return "";
		}
		else {
			return _bananaBoat;
		}
	}

	@Override
	public void setBananaBoat(String bananaBoat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bananaBoat = bananaBoat;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionWaterRequired.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionWaterRequired toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionWaterRequired>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionWaterRequiredImpl attractionWaterRequiredImpl =
			new AttractionWaterRequiredImpl();

		attractionWaterRequiredImpl.setAttractionWaterRequiredId(
			getAttractionWaterRequiredId());
		attractionWaterRequiredImpl.setGroupId(getGroupId());
		attractionWaterRequiredImpl.setCompanyId(getCompanyId());
		attractionWaterRequiredImpl.setUserId(getUserId());
		attractionWaterRequiredImpl.setUserName(getUserName());
		attractionWaterRequiredImpl.setCreateDate(getCreateDate());
		attractionWaterRequiredImpl.setModifiedDate(getModifiedDate());
		attractionWaterRequiredImpl.setGeneralOperator(getGeneralOperator());
		attractionWaterRequiredImpl.setWaterCraft(getWaterCraft());
		attractionWaterRequiredImpl.setWaterSki(getWaterSki());
		attractionWaterRequiredImpl.setSunfishSail(getSunfishSail());
		attractionWaterRequiredImpl.setParasail(getParasail());
		attractionWaterRequiredImpl.setScubaDiving(getScubaDiving());
		attractionWaterRequiredImpl.setGlassBoat(getGlassBoat());
		attractionWaterRequiredImpl.setBananaBoat(getBananaBoat());
		attractionWaterRequiredImpl.setJtbApplicationId(getJtbApplicationId());

		attractionWaterRequiredImpl.resetOriginalValues();

		return attractionWaterRequiredImpl;
	}

	@Override
	public AttractionWaterRequired cloneWithOriginalValues() {
		AttractionWaterRequiredImpl attractionWaterRequiredImpl =
			new AttractionWaterRequiredImpl();

		attractionWaterRequiredImpl.setAttractionWaterRequiredId(
			this.<Long>getColumnOriginalValue("attractionWaterRequiredId"));
		attractionWaterRequiredImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionWaterRequiredImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionWaterRequiredImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionWaterRequiredImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionWaterRequiredImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionWaterRequiredImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionWaterRequiredImpl.setGeneralOperator(
			this.<String>getColumnOriginalValue("generalOperator"));
		attractionWaterRequiredImpl.setWaterCraft(
			this.<String>getColumnOriginalValue("waterCraft"));
		attractionWaterRequiredImpl.setWaterSki(
			this.<String>getColumnOriginalValue("waterSki"));
		attractionWaterRequiredImpl.setSunfishSail(
			this.<String>getColumnOriginalValue("sunfishSail"));
		attractionWaterRequiredImpl.setParasail(
			this.<String>getColumnOriginalValue("parasail"));
		attractionWaterRequiredImpl.setScubaDiving(
			this.<String>getColumnOriginalValue("scubaDiving"));
		attractionWaterRequiredImpl.setGlassBoat(
			this.<String>getColumnOriginalValue("glassBoat"));
		attractionWaterRequiredImpl.setBananaBoat(
			this.<String>getColumnOriginalValue("bananaBoat"));
		attractionWaterRequiredImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionWaterRequiredImpl;
	}

	@Override
	public int compareTo(AttractionWaterRequired attractionWaterRequired) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionWaterRequired.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionWaterRequired)) {
			return false;
		}

		AttractionWaterRequired attractionWaterRequired =
			(AttractionWaterRequired)object;

		long primaryKey = attractionWaterRequired.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionWaterRequired> toCacheModel() {
		AttractionWaterRequiredCacheModel attractionWaterRequiredCacheModel =
			new AttractionWaterRequiredCacheModel();

		attractionWaterRequiredCacheModel.attractionWaterRequiredId =
			getAttractionWaterRequiredId();

		attractionWaterRequiredCacheModel.groupId = getGroupId();

		attractionWaterRequiredCacheModel.companyId = getCompanyId();

		attractionWaterRequiredCacheModel.userId = getUserId();

		attractionWaterRequiredCacheModel.userName = getUserName();

		String userName = attractionWaterRequiredCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionWaterRequiredCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionWaterRequiredCacheModel.createDate = createDate.getTime();
		}
		else {
			attractionWaterRequiredCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionWaterRequiredCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionWaterRequiredCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionWaterRequiredCacheModel.generalOperator =
			getGeneralOperator();

		String generalOperator =
			attractionWaterRequiredCacheModel.generalOperator;

		if ((generalOperator != null) && (generalOperator.length() == 0)) {
			attractionWaterRequiredCacheModel.generalOperator = null;
		}

		attractionWaterRequiredCacheModel.waterCraft = getWaterCraft();

		String waterCraft = attractionWaterRequiredCacheModel.waterCraft;

		if ((waterCraft != null) && (waterCraft.length() == 0)) {
			attractionWaterRequiredCacheModel.waterCraft = null;
		}

		attractionWaterRequiredCacheModel.waterSki = getWaterSki();

		String waterSki = attractionWaterRequiredCacheModel.waterSki;

		if ((waterSki != null) && (waterSki.length() == 0)) {
			attractionWaterRequiredCacheModel.waterSki = null;
		}

		attractionWaterRequiredCacheModel.sunfishSail = getSunfishSail();

		String sunfishSail = attractionWaterRequiredCacheModel.sunfishSail;

		if ((sunfishSail != null) && (sunfishSail.length() == 0)) {
			attractionWaterRequiredCacheModel.sunfishSail = null;
		}

		attractionWaterRequiredCacheModel.parasail = getParasail();

		String parasail = attractionWaterRequiredCacheModel.parasail;

		if ((parasail != null) && (parasail.length() == 0)) {
			attractionWaterRequiredCacheModel.parasail = null;
		}

		attractionWaterRequiredCacheModel.scubaDiving = getScubaDiving();

		String scubaDiving = attractionWaterRequiredCacheModel.scubaDiving;

		if ((scubaDiving != null) && (scubaDiving.length() == 0)) {
			attractionWaterRequiredCacheModel.scubaDiving = null;
		}

		attractionWaterRequiredCacheModel.glassBoat = getGlassBoat();

		String glassBoat = attractionWaterRequiredCacheModel.glassBoat;

		if ((glassBoat != null) && (glassBoat.length() == 0)) {
			attractionWaterRequiredCacheModel.glassBoat = null;
		}

		attractionWaterRequiredCacheModel.bananaBoat = getBananaBoat();

		String bananaBoat = attractionWaterRequiredCacheModel.bananaBoat;

		if ((bananaBoat != null) && (bananaBoat.length() == 0)) {
			attractionWaterRequiredCacheModel.bananaBoat = null;
		}

		attractionWaterRequiredCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionWaterRequiredCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionWaterRequired, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionWaterRequired, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionWaterRequired, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionWaterRequired)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionWaterRequired>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AttractionWaterRequired.class, ModelWrapper.class);

	}

	private long _attractionWaterRequiredId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _generalOperator;
	private String _waterCraft;
	private String _waterSki;
	private String _sunfishSail;
	private String _parasail;
	private String _scubaDiving;
	private String _glassBoat;
	private String _bananaBoat;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionWaterRequired, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionWaterRequired)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionWaterRequiredId", _attractionWaterRequiredId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("generalOperator", _generalOperator);
		_columnOriginalValues.put("waterCraft", _waterCraft);
		_columnOriginalValues.put("waterSki", _waterSki);
		_columnOriginalValues.put("sunfishSail", _sunfishSail);
		_columnOriginalValues.put("parasail", _parasail);
		_columnOriginalValues.put("scubaDiving", _scubaDiving);
		_columnOriginalValues.put("glassBoat", _glassBoat);
		_columnOriginalValues.put("bananaBoat", _bananaBoat);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionWaterRequiredId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("generalOperator", 128L);

		columnBitmasks.put("waterCraft", 256L);

		columnBitmasks.put("waterSki", 512L);

		columnBitmasks.put("sunfishSail", 1024L);

		columnBitmasks.put("parasail", 2048L);

		columnBitmasks.put("scubaDiving", 4096L);

		columnBitmasks.put("glassBoat", 8192L);

		columnBitmasks.put("bananaBoat", 16384L);

		columnBitmasks.put("jtbApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionWaterRequired _escapedModel;

}