/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AccoHomeStay;
import com.nbp.jtb.application.form.service.model.AccoHomeStayModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccoHomeStay service. Represents a row in the &quot;nbp_jtb_acco_home_stay_lic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccoHomeStayModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccoHomeStayImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccoHomeStayImpl
 * @generated
 */
@JSON(strict = true)
public class AccoHomeStayModelImpl
	extends BaseModelImpl<AccoHomeStay> implements AccoHomeStayModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acco home stay model instance should use the <code>AccoHomeStay</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_acco_home_stay_lic";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accoHomeStayId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"homeAccoName", Types.VARCHAR}, {"homeOwnerName", Types.VARCHAR},
		{"propertyAddress", Types.VARCHAR}, {"homeTeleNo", Types.VARCHAR},
		{"homeMobile", Types.VARCHAR}, {"homeEmail", Types.VARCHAR},
		{"homeEmployeeNo", Types.VARCHAR}, {"website", Types.VARCHAR},
		{"propDirection", Types.VARCHAR}, {"numOfBedrooms", Types.VARCHAR},
		{"numOfGuestBedroom", Types.VARCHAR}, {"withBathroom", Types.VARCHAR},
		{"sharedBathroom", Types.VARCHAR}, {"signDate", Types.TIMESTAMP},
		{"certifiedBy", Types.VARCHAR}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoHomeStayId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("homeAccoName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeOwnerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propertyAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeTeleNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeMobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeEmployeeNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("website", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propDirection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numOfBedrooms", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numOfGuestBedroom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("withBathroom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sharedBathroom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certifiedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_acco_home_stay_lic (uuid_ VARCHAR(75) null,accoHomeStayId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,homeAccoName VARCHAR(75) null,homeOwnerName VARCHAR(75) null,propertyAddress VARCHAR(500) null,homeTeleNo VARCHAR(75) null,homeMobile VARCHAR(75) null,homeEmail VARCHAR(75) null,homeEmployeeNo VARCHAR(75) null,website VARCHAR(75) null,propDirection VARCHAR(500) null,numOfBedrooms VARCHAR(75) null,numOfGuestBedroom VARCHAR(75) null,withBathroom VARCHAR(75) null,sharedBathroom VARCHAR(75) null,signDate DATE null,certifiedBy VARCHAR(75) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_acco_home_stay_lic";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accoHomeStay.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_acco_home_stay_lic.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccoHomeStayModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accoHomeStayId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccoHomeStayId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accoHomeStayId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccoHomeStay.class;
	}

	@Override
	public String getModelClassName() {
		return AccoHomeStay.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccoHomeStay, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccoHomeStay, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoHomeStay, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccoHomeStay)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccoHomeStay, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccoHomeStay, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccoHomeStay)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccoHomeStay, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccoHomeStay, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccoHomeStay, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccoHomeStay, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<AccoHomeStay, Object>>();

			attributeGetterFunctions.put("uuid", AccoHomeStay::getUuid);
			attributeGetterFunctions.put(
				"accoHomeStayId", AccoHomeStay::getAccoHomeStayId);
			attributeGetterFunctions.put("groupId", AccoHomeStay::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccoHomeStay::getCompanyId);
			attributeGetterFunctions.put("userId", AccoHomeStay::getUserId);
			attributeGetterFunctions.put("userName", AccoHomeStay::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccoHomeStay::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccoHomeStay::getModifiedDate);
			attributeGetterFunctions.put(
				"homeAccoName", AccoHomeStay::getHomeAccoName);
			attributeGetterFunctions.put(
				"homeOwnerName", AccoHomeStay::getHomeOwnerName);
			attributeGetterFunctions.put(
				"propertyAddress", AccoHomeStay::getPropertyAddress);
			attributeGetterFunctions.put(
				"homeTeleNo", AccoHomeStay::getHomeTeleNo);
			attributeGetterFunctions.put(
				"homeMobile", AccoHomeStay::getHomeMobile);
			attributeGetterFunctions.put(
				"homeEmail", AccoHomeStay::getHomeEmail);
			attributeGetterFunctions.put(
				"homeEmployeeNo", AccoHomeStay::getHomeEmployeeNo);
			attributeGetterFunctions.put("website", AccoHomeStay::getWebsite);
			attributeGetterFunctions.put(
				"propDirection", AccoHomeStay::getPropDirection);
			attributeGetterFunctions.put(
				"numOfBedrooms", AccoHomeStay::getNumOfBedrooms);
			attributeGetterFunctions.put(
				"numOfGuestBedroom", AccoHomeStay::getNumOfGuestBedroom);
			attributeGetterFunctions.put(
				"withBathroom", AccoHomeStay::getWithBathroom);
			attributeGetterFunctions.put(
				"sharedBathroom", AccoHomeStay::getSharedBathroom);
			attributeGetterFunctions.put("signDate", AccoHomeStay::getSignDate);
			attributeGetterFunctions.put(
				"certifiedBy", AccoHomeStay::getCertifiedBy);
			attributeGetterFunctions.put(
				"jtbApplicationId", AccoHomeStay::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AccoHomeStay, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccoHomeStay, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<AccoHomeStay, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccoHomeStay, String>)AccoHomeStay::setUuid);
			attributeSetterBiConsumers.put(
				"accoHomeStayId",
				(BiConsumer<AccoHomeStay, Long>)
					AccoHomeStay::setAccoHomeStayId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccoHomeStay, Long>)AccoHomeStay::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccoHomeStay, Long>)AccoHomeStay::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccoHomeStay, Long>)AccoHomeStay::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccoHomeStay, String>)AccoHomeStay::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccoHomeStay, Date>)AccoHomeStay::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccoHomeStay, Date>)AccoHomeStay::setModifiedDate);
			attributeSetterBiConsumers.put(
				"homeAccoName",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setHomeAccoName);
			attributeSetterBiConsumers.put(
				"homeOwnerName",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setHomeOwnerName);
			attributeSetterBiConsumers.put(
				"propertyAddress",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setPropertyAddress);
			attributeSetterBiConsumers.put(
				"homeTeleNo",
				(BiConsumer<AccoHomeStay, String>)AccoHomeStay::setHomeTeleNo);
			attributeSetterBiConsumers.put(
				"homeMobile",
				(BiConsumer<AccoHomeStay, String>)AccoHomeStay::setHomeMobile);
			attributeSetterBiConsumers.put(
				"homeEmail",
				(BiConsumer<AccoHomeStay, String>)AccoHomeStay::setHomeEmail);
			attributeSetterBiConsumers.put(
				"homeEmployeeNo",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setHomeEmployeeNo);
			attributeSetterBiConsumers.put(
				"website",
				(BiConsumer<AccoHomeStay, String>)AccoHomeStay::setWebsite);
			attributeSetterBiConsumers.put(
				"propDirection",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setPropDirection);
			attributeSetterBiConsumers.put(
				"numOfBedrooms",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setNumOfBedrooms);
			attributeSetterBiConsumers.put(
				"numOfGuestBedroom",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setNumOfGuestBedroom);
			attributeSetterBiConsumers.put(
				"withBathroom",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setWithBathroom);
			attributeSetterBiConsumers.put(
				"sharedBathroom",
				(BiConsumer<AccoHomeStay, String>)
					AccoHomeStay::setSharedBathroom);
			attributeSetterBiConsumers.put(
				"signDate",
				(BiConsumer<AccoHomeStay, Date>)AccoHomeStay::setSignDate);
			attributeSetterBiConsumers.put(
				"certifiedBy",
				(BiConsumer<AccoHomeStay, String>)AccoHomeStay::setCertifiedBy);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AccoHomeStay, Long>)
					AccoHomeStay::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccoHomeStayId() {
		return _accoHomeStayId;
	}

	@Override
	public void setAccoHomeStayId(long accoHomeStayId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoHomeStayId = accoHomeStayId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getHomeAccoName() {
		if (_homeAccoName == null) {
			return "";
		}
		else {
			return _homeAccoName;
		}
	}

	@Override
	public void setHomeAccoName(String homeAccoName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeAccoName = homeAccoName;
	}

	@JSON
	@Override
	public String getHomeOwnerName() {
		if (_homeOwnerName == null) {
			return "";
		}
		else {
			return _homeOwnerName;
		}
	}

	@Override
	public void setHomeOwnerName(String homeOwnerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeOwnerName = homeOwnerName;
	}

	@JSON
	@Override
	public String getPropertyAddress() {
		if (_propertyAddress == null) {
			return "";
		}
		else {
			return _propertyAddress;
		}
	}

	@Override
	public void setPropertyAddress(String propertyAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propertyAddress = propertyAddress;
	}

	@JSON
	@Override
	public String getHomeTeleNo() {
		if (_homeTeleNo == null) {
			return "";
		}
		else {
			return _homeTeleNo;
		}
	}

	@Override
	public void setHomeTeleNo(String homeTeleNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeTeleNo = homeTeleNo;
	}

	@JSON
	@Override
	public String getHomeMobile() {
		if (_homeMobile == null) {
			return "";
		}
		else {
			return _homeMobile;
		}
	}

	@Override
	public void setHomeMobile(String homeMobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeMobile = homeMobile;
	}

	@JSON
	@Override
	public String getHomeEmail() {
		if (_homeEmail == null) {
			return "";
		}
		else {
			return _homeEmail;
		}
	}

	@Override
	public void setHomeEmail(String homeEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeEmail = homeEmail;
	}

	@JSON
	@Override
	public String getHomeEmployeeNo() {
		if (_homeEmployeeNo == null) {
			return "";
		}
		else {
			return _homeEmployeeNo;
		}
	}

	@Override
	public void setHomeEmployeeNo(String homeEmployeeNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeEmployeeNo = homeEmployeeNo;
	}

	@JSON
	@Override
	public String getWebsite() {
		if (_website == null) {
			return "";
		}
		else {
			return _website;
		}
	}

	@Override
	public void setWebsite(String website) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_website = website;
	}

	@JSON
	@Override
	public String getPropDirection() {
		if (_propDirection == null) {
			return "";
		}
		else {
			return _propDirection;
		}
	}

	@Override
	public void setPropDirection(String propDirection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propDirection = propDirection;
	}

	@JSON
	@Override
	public String getNumOfBedrooms() {
		if (_numOfBedrooms == null) {
			return "";
		}
		else {
			return _numOfBedrooms;
		}
	}

	@Override
	public void setNumOfBedrooms(String numOfBedrooms) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numOfBedrooms = numOfBedrooms;
	}

	@JSON
	@Override
	public String getNumOfGuestBedroom() {
		if (_numOfGuestBedroom == null) {
			return "";
		}
		else {
			return _numOfGuestBedroom;
		}
	}

	@Override
	public void setNumOfGuestBedroom(String numOfGuestBedroom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numOfGuestBedroom = numOfGuestBedroom;
	}

	@JSON
	@Override
	public String getWithBathroom() {
		if (_withBathroom == null) {
			return "";
		}
		else {
			return _withBathroom;
		}
	}

	@Override
	public void setWithBathroom(String withBathroom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_withBathroom = withBathroom;
	}

	@JSON
	@Override
	public String getSharedBathroom() {
		if (_sharedBathroom == null) {
			return "";
		}
		else {
			return _sharedBathroom;
		}
	}

	@Override
	public void setSharedBathroom(String sharedBathroom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sharedBathroom = sharedBathroom;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signDate = signDate;
	}

	@JSON
	@Override
	public String getCertifiedBy() {
		if (_certifiedBy == null) {
			return "";
		}
		else {
			return _certifiedBy;
		}
	}

	@Override
	public void setCertifiedBy(String certifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certifiedBy = certifiedBy;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccoHomeStay.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccoHomeStay.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccoHomeStay toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccoHomeStay>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccoHomeStayImpl accoHomeStayImpl = new AccoHomeStayImpl();

		accoHomeStayImpl.setUuid(getUuid());
		accoHomeStayImpl.setAccoHomeStayId(getAccoHomeStayId());
		accoHomeStayImpl.setGroupId(getGroupId());
		accoHomeStayImpl.setCompanyId(getCompanyId());
		accoHomeStayImpl.setUserId(getUserId());
		accoHomeStayImpl.setUserName(getUserName());
		accoHomeStayImpl.setCreateDate(getCreateDate());
		accoHomeStayImpl.setModifiedDate(getModifiedDate());
		accoHomeStayImpl.setHomeAccoName(getHomeAccoName());
		accoHomeStayImpl.setHomeOwnerName(getHomeOwnerName());
		accoHomeStayImpl.setPropertyAddress(getPropertyAddress());
		accoHomeStayImpl.setHomeTeleNo(getHomeTeleNo());
		accoHomeStayImpl.setHomeMobile(getHomeMobile());
		accoHomeStayImpl.setHomeEmail(getHomeEmail());
		accoHomeStayImpl.setHomeEmployeeNo(getHomeEmployeeNo());
		accoHomeStayImpl.setWebsite(getWebsite());
		accoHomeStayImpl.setPropDirection(getPropDirection());
		accoHomeStayImpl.setNumOfBedrooms(getNumOfBedrooms());
		accoHomeStayImpl.setNumOfGuestBedroom(getNumOfGuestBedroom());
		accoHomeStayImpl.setWithBathroom(getWithBathroom());
		accoHomeStayImpl.setSharedBathroom(getSharedBathroom());
		accoHomeStayImpl.setSignDate(getSignDate());
		accoHomeStayImpl.setCertifiedBy(getCertifiedBy());
		accoHomeStayImpl.setJtbApplicationId(getJtbApplicationId());

		accoHomeStayImpl.resetOriginalValues();

		return accoHomeStayImpl;
	}

	@Override
	public AccoHomeStay cloneWithOriginalValues() {
		AccoHomeStayImpl accoHomeStayImpl = new AccoHomeStayImpl();

		accoHomeStayImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		accoHomeStayImpl.setAccoHomeStayId(
			this.<Long>getColumnOriginalValue("accoHomeStayId"));
		accoHomeStayImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accoHomeStayImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accoHomeStayImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		accoHomeStayImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accoHomeStayImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accoHomeStayImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accoHomeStayImpl.setHomeAccoName(
			this.<String>getColumnOriginalValue("homeAccoName"));
		accoHomeStayImpl.setHomeOwnerName(
			this.<String>getColumnOriginalValue("homeOwnerName"));
		accoHomeStayImpl.setPropertyAddress(
			this.<String>getColumnOriginalValue("propertyAddress"));
		accoHomeStayImpl.setHomeTeleNo(
			this.<String>getColumnOriginalValue("homeTeleNo"));
		accoHomeStayImpl.setHomeMobile(
			this.<String>getColumnOriginalValue("homeMobile"));
		accoHomeStayImpl.setHomeEmail(
			this.<String>getColumnOriginalValue("homeEmail"));
		accoHomeStayImpl.setHomeEmployeeNo(
			this.<String>getColumnOriginalValue("homeEmployeeNo"));
		accoHomeStayImpl.setWebsite(
			this.<String>getColumnOriginalValue("website"));
		accoHomeStayImpl.setPropDirection(
			this.<String>getColumnOriginalValue("propDirection"));
		accoHomeStayImpl.setNumOfBedrooms(
			this.<String>getColumnOriginalValue("numOfBedrooms"));
		accoHomeStayImpl.setNumOfGuestBedroom(
			this.<String>getColumnOriginalValue("numOfGuestBedroom"));
		accoHomeStayImpl.setWithBathroom(
			this.<String>getColumnOriginalValue("withBathroom"));
		accoHomeStayImpl.setSharedBathroom(
			this.<String>getColumnOriginalValue("sharedBathroom"));
		accoHomeStayImpl.setSignDate(
			this.<Date>getColumnOriginalValue("signDate"));
		accoHomeStayImpl.setCertifiedBy(
			this.<String>getColumnOriginalValue("certifiedBy"));
		accoHomeStayImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return accoHomeStayImpl;
	}

	@Override
	public int compareTo(AccoHomeStay accoHomeStay) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), accoHomeStay.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccoHomeStay)) {
			return false;
		}

		AccoHomeStay accoHomeStay = (AccoHomeStay)object;

		long primaryKey = accoHomeStay.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccoHomeStay> toCacheModel() {
		AccoHomeStayCacheModel accoHomeStayCacheModel =
			new AccoHomeStayCacheModel();

		accoHomeStayCacheModel.uuid = getUuid();

		String uuid = accoHomeStayCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accoHomeStayCacheModel.uuid = null;
		}

		accoHomeStayCacheModel.accoHomeStayId = getAccoHomeStayId();

		accoHomeStayCacheModel.groupId = getGroupId();

		accoHomeStayCacheModel.companyId = getCompanyId();

		accoHomeStayCacheModel.userId = getUserId();

		accoHomeStayCacheModel.userName = getUserName();

		String userName = accoHomeStayCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accoHomeStayCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accoHomeStayCacheModel.createDate = createDate.getTime();
		}
		else {
			accoHomeStayCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accoHomeStayCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accoHomeStayCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accoHomeStayCacheModel.homeAccoName = getHomeAccoName();

		String homeAccoName = accoHomeStayCacheModel.homeAccoName;

		if ((homeAccoName != null) && (homeAccoName.length() == 0)) {
			accoHomeStayCacheModel.homeAccoName = null;
		}

		accoHomeStayCacheModel.homeOwnerName = getHomeOwnerName();

		String homeOwnerName = accoHomeStayCacheModel.homeOwnerName;

		if ((homeOwnerName != null) && (homeOwnerName.length() == 0)) {
			accoHomeStayCacheModel.homeOwnerName = null;
		}

		accoHomeStayCacheModel.propertyAddress = getPropertyAddress();

		String propertyAddress = accoHomeStayCacheModel.propertyAddress;

		if ((propertyAddress != null) && (propertyAddress.length() == 0)) {
			accoHomeStayCacheModel.propertyAddress = null;
		}

		accoHomeStayCacheModel.homeTeleNo = getHomeTeleNo();

		String homeTeleNo = accoHomeStayCacheModel.homeTeleNo;

		if ((homeTeleNo != null) && (homeTeleNo.length() == 0)) {
			accoHomeStayCacheModel.homeTeleNo = null;
		}

		accoHomeStayCacheModel.homeMobile = getHomeMobile();

		String homeMobile = accoHomeStayCacheModel.homeMobile;

		if ((homeMobile != null) && (homeMobile.length() == 0)) {
			accoHomeStayCacheModel.homeMobile = null;
		}

		accoHomeStayCacheModel.homeEmail = getHomeEmail();

		String homeEmail = accoHomeStayCacheModel.homeEmail;

		if ((homeEmail != null) && (homeEmail.length() == 0)) {
			accoHomeStayCacheModel.homeEmail = null;
		}

		accoHomeStayCacheModel.homeEmployeeNo = getHomeEmployeeNo();

		String homeEmployeeNo = accoHomeStayCacheModel.homeEmployeeNo;

		if ((homeEmployeeNo != null) && (homeEmployeeNo.length() == 0)) {
			accoHomeStayCacheModel.homeEmployeeNo = null;
		}

		accoHomeStayCacheModel.website = getWebsite();

		String website = accoHomeStayCacheModel.website;

		if ((website != null) && (website.length() == 0)) {
			accoHomeStayCacheModel.website = null;
		}

		accoHomeStayCacheModel.propDirection = getPropDirection();

		String propDirection = accoHomeStayCacheModel.propDirection;

		if ((propDirection != null) && (propDirection.length() == 0)) {
			accoHomeStayCacheModel.propDirection = null;
		}

		accoHomeStayCacheModel.numOfBedrooms = getNumOfBedrooms();

		String numOfBedrooms = accoHomeStayCacheModel.numOfBedrooms;

		if ((numOfBedrooms != null) && (numOfBedrooms.length() == 0)) {
			accoHomeStayCacheModel.numOfBedrooms = null;
		}

		accoHomeStayCacheModel.numOfGuestBedroom = getNumOfGuestBedroom();

		String numOfGuestBedroom = accoHomeStayCacheModel.numOfGuestBedroom;

		if ((numOfGuestBedroom != null) && (numOfGuestBedroom.length() == 0)) {
			accoHomeStayCacheModel.numOfGuestBedroom = null;
		}

		accoHomeStayCacheModel.withBathroom = getWithBathroom();

		String withBathroom = accoHomeStayCacheModel.withBathroom;

		if ((withBathroom != null) && (withBathroom.length() == 0)) {
			accoHomeStayCacheModel.withBathroom = null;
		}

		accoHomeStayCacheModel.sharedBathroom = getSharedBathroom();

		String sharedBathroom = accoHomeStayCacheModel.sharedBathroom;

		if ((sharedBathroom != null) && (sharedBathroom.length() == 0)) {
			accoHomeStayCacheModel.sharedBathroom = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			accoHomeStayCacheModel.signDate = signDate.getTime();
		}
		else {
			accoHomeStayCacheModel.signDate = Long.MIN_VALUE;
		}

		accoHomeStayCacheModel.certifiedBy = getCertifiedBy();

		String certifiedBy = accoHomeStayCacheModel.certifiedBy;

		if ((certifiedBy != null) && (certifiedBy.length() == 0)) {
			accoHomeStayCacheModel.certifiedBy = null;
		}

		accoHomeStayCacheModel.jtbApplicationId = getJtbApplicationId();

		return accoHomeStayCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccoHomeStay, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccoHomeStay, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoHomeStay, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AccoHomeStay)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccoHomeStay>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccoHomeStay.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accoHomeStayId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _homeAccoName;
	private String _homeOwnerName;
	private String _propertyAddress;
	private String _homeTeleNo;
	private String _homeMobile;
	private String _homeEmail;
	private String _homeEmployeeNo;
	private String _website;
	private String _propDirection;
	private String _numOfBedrooms;
	private String _numOfGuestBedroom;
	private String _withBathroom;
	private String _sharedBathroom;
	private Date _signDate;
	private String _certifiedBy;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccoHomeStay, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccoHomeStay)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("accoHomeStayId", _accoHomeStayId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("homeAccoName", _homeAccoName);
		_columnOriginalValues.put("homeOwnerName", _homeOwnerName);
		_columnOriginalValues.put("propertyAddress", _propertyAddress);
		_columnOriginalValues.put("homeTeleNo", _homeTeleNo);
		_columnOriginalValues.put("homeMobile", _homeMobile);
		_columnOriginalValues.put("homeEmail", _homeEmail);
		_columnOriginalValues.put("homeEmployeeNo", _homeEmployeeNo);
		_columnOriginalValues.put("website", _website);
		_columnOriginalValues.put("propDirection", _propDirection);
		_columnOriginalValues.put("numOfBedrooms", _numOfBedrooms);
		_columnOriginalValues.put("numOfGuestBedroom", _numOfGuestBedroom);
		_columnOriginalValues.put("withBathroom", _withBathroom);
		_columnOriginalValues.put("sharedBathroom", _sharedBathroom);
		_columnOriginalValues.put("signDate", _signDate);
		_columnOriginalValues.put("certifiedBy", _certifiedBy);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accoHomeStayId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("homeAccoName", 256L);

		columnBitmasks.put("homeOwnerName", 512L);

		columnBitmasks.put("propertyAddress", 1024L);

		columnBitmasks.put("homeTeleNo", 2048L);

		columnBitmasks.put("homeMobile", 4096L);

		columnBitmasks.put("homeEmail", 8192L);

		columnBitmasks.put("homeEmployeeNo", 16384L);

		columnBitmasks.put("website", 32768L);

		columnBitmasks.put("propDirection", 65536L);

		columnBitmasks.put("numOfBedrooms", 131072L);

		columnBitmasks.put("numOfGuestBedroom", 262144L);

		columnBitmasks.put("withBathroom", 524288L);

		columnBitmasks.put("sharedBathroom", 1048576L);

		columnBitmasks.put("signDate", 2097152L);

		columnBitmasks.put("certifiedBy", 4194304L);

		columnBitmasks.put("jtbApplicationId", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccoHomeStay _escapedModel;

}