/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AttractionWaterGenDeclare;
import com.nbp.jtb.application.form.service.model.AttractionWaterGenDeclareModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttractionWaterGenDeclare service. Represents a row in the &quot;nbp_jtb_water_general&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AttractionWaterGenDeclareModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttractionWaterGenDeclareImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttractionWaterGenDeclareImpl
 * @generated
 */
@JSON(strict = true)
public class AttractionWaterGenDeclareModelImpl
	extends BaseModelImpl<AttractionWaterGenDeclare>
	implements AttractionWaterGenDeclareModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attraction water gen declare model instance should use the <code>AttractionWaterGenDeclare</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_water_general";

	public static final Object[][] TABLE_COLUMNS = {
		{"attractionWaterGenDeclareId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"firstAid", Types.VARCHAR}, {"cpr", Types.VARCHAR},
		{"divingCertificate", Types.VARCHAR}, {"rlss", Types.VARCHAR},
		{"lifeguard", Types.VARCHAR}, {"breathing", Types.VARCHAR},
		{"operationName", Types.VARCHAR}, {"operationAddress", Types.VARCHAR},
		{"insuranceAmount", Types.VARCHAR},
		{"managerSignDate", Types.TIMESTAMP}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("attractionWaterGenDeclareId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstAid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cpr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("divingCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rlss", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lifeguard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("breathing", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operationAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insuranceAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerSignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_water_general (attractionWaterGenDeclareId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstAid VARCHAR(75) null,cpr VARCHAR(75) null,divingCertificate VARCHAR(75) null,rlss VARCHAR(75) null,lifeguard VARCHAR(75) null,breathing VARCHAR(75) null,operationName VARCHAR(75) null,operationAddress VARCHAR(500) null,insuranceAmount VARCHAR(75) null,managerSignDate DATE null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_water_general";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attractionWaterGenDeclare.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_water_general.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AttractionWaterGenDeclareModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attractionWaterGenDeclareId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttractionWaterGenDeclareId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attractionWaterGenDeclareId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttractionWaterGenDeclare.class;
	}

	@Override
	public String getModelClassName() {
		return AttractionWaterGenDeclare.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttractionWaterGenDeclare, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttractionWaterGenDeclare, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionWaterGenDeclare, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttractionWaterGenDeclare)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttractionWaterGenDeclare, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttractionWaterGenDeclare, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttractionWaterGenDeclare)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttractionWaterGenDeclare, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttractionWaterGenDeclare, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AttractionWaterGenDeclare, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AttractionWaterGenDeclare, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AttractionWaterGenDeclare, Object>>();

			attributeGetterFunctions.put(
				"attractionWaterGenDeclareId",
				AttractionWaterGenDeclare::getAttractionWaterGenDeclareId);
			attributeGetterFunctions.put(
				"groupId", AttractionWaterGenDeclare::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AttractionWaterGenDeclare::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AttractionWaterGenDeclare::getUserId);
			attributeGetterFunctions.put(
				"userName", AttractionWaterGenDeclare::getUserName);
			attributeGetterFunctions.put(
				"createDate", AttractionWaterGenDeclare::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AttractionWaterGenDeclare::getModifiedDate);
			attributeGetterFunctions.put(
				"firstAid", AttractionWaterGenDeclare::getFirstAid);
			attributeGetterFunctions.put(
				"cpr", AttractionWaterGenDeclare::getCpr);
			attributeGetterFunctions.put(
				"divingCertificate",
				AttractionWaterGenDeclare::getDivingCertificate);
			attributeGetterFunctions.put(
				"rlss", AttractionWaterGenDeclare::getRlss);
			attributeGetterFunctions.put(
				"lifeguard", AttractionWaterGenDeclare::getLifeguard);
			attributeGetterFunctions.put(
				"breathing", AttractionWaterGenDeclare::getBreathing);
			attributeGetterFunctions.put(
				"operationName", AttractionWaterGenDeclare::getOperationName);
			attributeGetterFunctions.put(
				"operationAddress",
				AttractionWaterGenDeclare::getOperationAddress);
			attributeGetterFunctions.put(
				"insuranceAmount",
				AttractionWaterGenDeclare::getInsuranceAmount);
			attributeGetterFunctions.put(
				"managerSignDate",
				AttractionWaterGenDeclare::getManagerSignDate);
			attributeGetterFunctions.put(
				"jtbApplicationId",
				AttractionWaterGenDeclare::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AttractionWaterGenDeclare, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AttractionWaterGenDeclare, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AttractionWaterGenDeclare, ?>>();

			attributeSetterBiConsumers.put(
				"attractionWaterGenDeclareId",
				(BiConsumer<AttractionWaterGenDeclare, Long>)
					AttractionWaterGenDeclare::setAttractionWaterGenDeclareId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AttractionWaterGenDeclare, Long>)
					AttractionWaterGenDeclare::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AttractionWaterGenDeclare, Long>)
					AttractionWaterGenDeclare::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AttractionWaterGenDeclare, Long>)
					AttractionWaterGenDeclare::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AttractionWaterGenDeclare, Date>)
					AttractionWaterGenDeclare::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AttractionWaterGenDeclare, Date>)
					AttractionWaterGenDeclare::setModifiedDate);
			attributeSetterBiConsumers.put(
				"firstAid",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setFirstAid);
			attributeSetterBiConsumers.put(
				"cpr",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setCpr);
			attributeSetterBiConsumers.put(
				"divingCertificate",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setDivingCertificate);
			attributeSetterBiConsumers.put(
				"rlss",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setRlss);
			attributeSetterBiConsumers.put(
				"lifeguard",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setLifeguard);
			attributeSetterBiConsumers.put(
				"breathing",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setBreathing);
			attributeSetterBiConsumers.put(
				"operationName",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setOperationName);
			attributeSetterBiConsumers.put(
				"operationAddress",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setOperationAddress);
			attributeSetterBiConsumers.put(
				"insuranceAmount",
				(BiConsumer<AttractionWaterGenDeclare, String>)
					AttractionWaterGenDeclare::setInsuranceAmount);
			attributeSetterBiConsumers.put(
				"managerSignDate",
				(BiConsumer<AttractionWaterGenDeclare, Date>)
					AttractionWaterGenDeclare::setManagerSignDate);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AttractionWaterGenDeclare, Long>)
					AttractionWaterGenDeclare::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAttractionWaterGenDeclareId() {
		return _attractionWaterGenDeclareId;
	}

	@Override
	public void setAttractionWaterGenDeclareId(
		long attractionWaterGenDeclareId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attractionWaterGenDeclareId = attractionWaterGenDeclareId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstAid() {
		if (_firstAid == null) {
			return "";
		}
		else {
			return _firstAid;
		}
	}

	@Override
	public void setFirstAid(String firstAid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstAid = firstAid;
	}

	@JSON
	@Override
	public String getCpr() {
		if (_cpr == null) {
			return "";
		}
		else {
			return _cpr;
		}
	}

	@Override
	public void setCpr(String cpr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cpr = cpr;
	}

	@JSON
	@Override
	public String getDivingCertificate() {
		if (_divingCertificate == null) {
			return "";
		}
		else {
			return _divingCertificate;
		}
	}

	@Override
	public void setDivingCertificate(String divingCertificate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_divingCertificate = divingCertificate;
	}

	@JSON
	@Override
	public String getRlss() {
		if (_rlss == null) {
			return "";
		}
		else {
			return _rlss;
		}
	}

	@Override
	public void setRlss(String rlss) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rlss = rlss;
	}

	@JSON
	@Override
	public String getLifeguard() {
		if (_lifeguard == null) {
			return "";
		}
		else {
			return _lifeguard;
		}
	}

	@Override
	public void setLifeguard(String lifeguard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lifeguard = lifeguard;
	}

	@JSON
	@Override
	public String getBreathing() {
		if (_breathing == null) {
			return "";
		}
		else {
			return _breathing;
		}
	}

	@Override
	public void setBreathing(String breathing) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_breathing = breathing;
	}

	@JSON
	@Override
	public String getOperationName() {
		if (_operationName == null) {
			return "";
		}
		else {
			return _operationName;
		}
	}

	@Override
	public void setOperationName(String operationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operationName = operationName;
	}

	@JSON
	@Override
	public String getOperationAddress() {
		if (_operationAddress == null) {
			return "";
		}
		else {
			return _operationAddress;
		}
	}

	@Override
	public void setOperationAddress(String operationAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operationAddress = operationAddress;
	}

	@JSON
	@Override
	public String getInsuranceAmount() {
		if (_insuranceAmount == null) {
			return "";
		}
		else {
			return _insuranceAmount;
		}
	}

	@Override
	public void setInsuranceAmount(String insuranceAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuranceAmount = insuranceAmount;
	}

	@JSON
	@Override
	public Date getManagerSignDate() {
		return _managerSignDate;
	}

	@Override
	public void setManagerSignDate(Date managerSignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerSignDate = managerSignDate;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AttractionWaterGenDeclare.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttractionWaterGenDeclare toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AttractionWaterGenDeclare>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttractionWaterGenDeclareImpl attractionWaterGenDeclareImpl =
			new AttractionWaterGenDeclareImpl();

		attractionWaterGenDeclareImpl.setAttractionWaterGenDeclareId(
			getAttractionWaterGenDeclareId());
		attractionWaterGenDeclareImpl.setGroupId(getGroupId());
		attractionWaterGenDeclareImpl.setCompanyId(getCompanyId());
		attractionWaterGenDeclareImpl.setUserId(getUserId());
		attractionWaterGenDeclareImpl.setUserName(getUserName());
		attractionWaterGenDeclareImpl.setCreateDate(getCreateDate());
		attractionWaterGenDeclareImpl.setModifiedDate(getModifiedDate());
		attractionWaterGenDeclareImpl.setFirstAid(getFirstAid());
		attractionWaterGenDeclareImpl.setCpr(getCpr());
		attractionWaterGenDeclareImpl.setDivingCertificate(
			getDivingCertificate());
		attractionWaterGenDeclareImpl.setRlss(getRlss());
		attractionWaterGenDeclareImpl.setLifeguard(getLifeguard());
		attractionWaterGenDeclareImpl.setBreathing(getBreathing());
		attractionWaterGenDeclareImpl.setOperationName(getOperationName());
		attractionWaterGenDeclareImpl.setOperationAddress(
			getOperationAddress());
		attractionWaterGenDeclareImpl.setInsuranceAmount(getInsuranceAmount());
		attractionWaterGenDeclareImpl.setManagerSignDate(getManagerSignDate());
		attractionWaterGenDeclareImpl.setJtbApplicationId(
			getJtbApplicationId());

		attractionWaterGenDeclareImpl.resetOriginalValues();

		return attractionWaterGenDeclareImpl;
	}

	@Override
	public AttractionWaterGenDeclare cloneWithOriginalValues() {
		AttractionWaterGenDeclareImpl attractionWaterGenDeclareImpl =
			new AttractionWaterGenDeclareImpl();

		attractionWaterGenDeclareImpl.setAttractionWaterGenDeclareId(
			this.<Long>getColumnOriginalValue("attractionWaterGenDeclareId"));
		attractionWaterGenDeclareImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		attractionWaterGenDeclareImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		attractionWaterGenDeclareImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		attractionWaterGenDeclareImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		attractionWaterGenDeclareImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		attractionWaterGenDeclareImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		attractionWaterGenDeclareImpl.setFirstAid(
			this.<String>getColumnOriginalValue("firstAid"));
		attractionWaterGenDeclareImpl.setCpr(
			this.<String>getColumnOriginalValue("cpr"));
		attractionWaterGenDeclareImpl.setDivingCertificate(
			this.<String>getColumnOriginalValue("divingCertificate"));
		attractionWaterGenDeclareImpl.setRlss(
			this.<String>getColumnOriginalValue("rlss"));
		attractionWaterGenDeclareImpl.setLifeguard(
			this.<String>getColumnOriginalValue("lifeguard"));
		attractionWaterGenDeclareImpl.setBreathing(
			this.<String>getColumnOriginalValue("breathing"));
		attractionWaterGenDeclareImpl.setOperationName(
			this.<String>getColumnOriginalValue("operationName"));
		attractionWaterGenDeclareImpl.setOperationAddress(
			this.<String>getColumnOriginalValue("operationAddress"));
		attractionWaterGenDeclareImpl.setInsuranceAmount(
			this.<String>getColumnOriginalValue("insuranceAmount"));
		attractionWaterGenDeclareImpl.setManagerSignDate(
			this.<Date>getColumnOriginalValue("managerSignDate"));
		attractionWaterGenDeclareImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return attractionWaterGenDeclareImpl;
	}

	@Override
	public int compareTo(AttractionWaterGenDeclare attractionWaterGenDeclare) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), attractionWaterGenDeclare.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AttractionWaterGenDeclare)) {
			return false;
		}

		AttractionWaterGenDeclare attractionWaterGenDeclare =
			(AttractionWaterGenDeclare)object;

		long primaryKey = attractionWaterGenDeclare.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AttractionWaterGenDeclare> toCacheModel() {
		AttractionWaterGenDeclareCacheModel
			attractionWaterGenDeclareCacheModel =
				new AttractionWaterGenDeclareCacheModel();

		attractionWaterGenDeclareCacheModel.attractionWaterGenDeclareId =
			getAttractionWaterGenDeclareId();

		attractionWaterGenDeclareCacheModel.groupId = getGroupId();

		attractionWaterGenDeclareCacheModel.companyId = getCompanyId();

		attractionWaterGenDeclareCacheModel.userId = getUserId();

		attractionWaterGenDeclareCacheModel.userName = getUserName();

		String userName = attractionWaterGenDeclareCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			attractionWaterGenDeclareCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			attractionWaterGenDeclareCacheModel.createDate =
				createDate.getTime();
		}
		else {
			attractionWaterGenDeclareCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			attractionWaterGenDeclareCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			attractionWaterGenDeclareCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		attractionWaterGenDeclareCacheModel.firstAid = getFirstAid();

		String firstAid = attractionWaterGenDeclareCacheModel.firstAid;

		if ((firstAid != null) && (firstAid.length() == 0)) {
			attractionWaterGenDeclareCacheModel.firstAid = null;
		}

		attractionWaterGenDeclareCacheModel.cpr = getCpr();

		String cpr = attractionWaterGenDeclareCacheModel.cpr;

		if ((cpr != null) && (cpr.length() == 0)) {
			attractionWaterGenDeclareCacheModel.cpr = null;
		}

		attractionWaterGenDeclareCacheModel.divingCertificate =
			getDivingCertificate();

		String divingCertificate =
			attractionWaterGenDeclareCacheModel.divingCertificate;

		if ((divingCertificate != null) && (divingCertificate.length() == 0)) {
			attractionWaterGenDeclareCacheModel.divingCertificate = null;
		}

		attractionWaterGenDeclareCacheModel.rlss = getRlss();

		String rlss = attractionWaterGenDeclareCacheModel.rlss;

		if ((rlss != null) && (rlss.length() == 0)) {
			attractionWaterGenDeclareCacheModel.rlss = null;
		}

		attractionWaterGenDeclareCacheModel.lifeguard = getLifeguard();

		String lifeguard = attractionWaterGenDeclareCacheModel.lifeguard;

		if ((lifeguard != null) && (lifeguard.length() == 0)) {
			attractionWaterGenDeclareCacheModel.lifeguard = null;
		}

		attractionWaterGenDeclareCacheModel.breathing = getBreathing();

		String breathing = attractionWaterGenDeclareCacheModel.breathing;

		if ((breathing != null) && (breathing.length() == 0)) {
			attractionWaterGenDeclareCacheModel.breathing = null;
		}

		attractionWaterGenDeclareCacheModel.operationName = getOperationName();

		String operationName =
			attractionWaterGenDeclareCacheModel.operationName;

		if ((operationName != null) && (operationName.length() == 0)) {
			attractionWaterGenDeclareCacheModel.operationName = null;
		}

		attractionWaterGenDeclareCacheModel.operationAddress =
			getOperationAddress();

		String operationAddress =
			attractionWaterGenDeclareCacheModel.operationAddress;

		if ((operationAddress != null) && (operationAddress.length() == 0)) {
			attractionWaterGenDeclareCacheModel.operationAddress = null;
		}

		attractionWaterGenDeclareCacheModel.insuranceAmount =
			getInsuranceAmount();

		String insuranceAmount =
			attractionWaterGenDeclareCacheModel.insuranceAmount;

		if ((insuranceAmount != null) && (insuranceAmount.length() == 0)) {
			attractionWaterGenDeclareCacheModel.insuranceAmount = null;
		}

		Date managerSignDate = getManagerSignDate();

		if (managerSignDate != null) {
			attractionWaterGenDeclareCacheModel.managerSignDate =
				managerSignDate.getTime();
		}
		else {
			attractionWaterGenDeclareCacheModel.managerSignDate =
				Long.MIN_VALUE;
		}

		attractionWaterGenDeclareCacheModel.jtbApplicationId =
			getJtbApplicationId();

		return attractionWaterGenDeclareCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttractionWaterGenDeclare, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttractionWaterGenDeclare, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttractionWaterGenDeclare, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AttractionWaterGenDeclare)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AttractionWaterGenDeclare>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AttractionWaterGenDeclare.class, ModelWrapper.class);

	}

	private long _attractionWaterGenDeclareId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstAid;
	private String _cpr;
	private String _divingCertificate;
	private String _rlss;
	private String _lifeguard;
	private String _breathing;
	private String _operationName;
	private String _operationAddress;
	private String _insuranceAmount;
	private Date _managerSignDate;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AttractionWaterGenDeclare, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AttractionWaterGenDeclare)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"attractionWaterGenDeclareId", _attractionWaterGenDeclareId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("firstAid", _firstAid);
		_columnOriginalValues.put("cpr", _cpr);
		_columnOriginalValues.put("divingCertificate", _divingCertificate);
		_columnOriginalValues.put("rlss", _rlss);
		_columnOriginalValues.put("lifeguard", _lifeguard);
		_columnOriginalValues.put("breathing", _breathing);
		_columnOriginalValues.put("operationName", _operationName);
		_columnOriginalValues.put("operationAddress", _operationAddress);
		_columnOriginalValues.put("insuranceAmount", _insuranceAmount);
		_columnOriginalValues.put("managerSignDate", _managerSignDate);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("attractionWaterGenDeclareId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("firstAid", 128L);

		columnBitmasks.put("cpr", 256L);

		columnBitmasks.put("divingCertificate", 512L);

		columnBitmasks.put("rlss", 1024L);

		columnBitmasks.put("lifeguard", 2048L);

		columnBitmasks.put("breathing", 4096L);

		columnBitmasks.put("operationName", 8192L);

		columnBitmasks.put("operationAddress", 16384L);

		columnBitmasks.put("insuranceAmount", 32768L);

		columnBitmasks.put("managerSignDate", 65536L);

		columnBitmasks.put("jtbApplicationId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AttractionWaterGenDeclare _escapedModel;

}