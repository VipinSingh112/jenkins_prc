/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jtb.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jtb.application.form.service.model.AccoHotelLicence;
import com.nbp.jtb.application.form.service.model.AccoHotelLicenceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccoHotelLicence service. Represents a row in the &quot;nbp_jtb_acco_licence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccoHotelLicenceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccoHotelLicenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccoHotelLicenceImpl
 * @generated
 */
@JSON(strict = true)
public class AccoHotelLicenceModelImpl
	extends BaseModelImpl<AccoHotelLicence> implements AccoHotelLicenceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acco hotel licence model instance should use the <code>AccoHotelLicence</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jtb_acco_licence";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accoHotelLicenceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nameOfOwner", Types.VARCHAR}, {"nameOfHotel", Types.VARCHAR},
		{"telephoneNo", Types.VARCHAR}, {"faxNo", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"parish", Types.VARCHAR},
		{"address", Types.VARCHAR}, {"jtbApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accoHotelLicenceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nameOfOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfHotel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephoneNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("faxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jtbApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jtb_acco_licence (uuid_ VARCHAR(75) null,accoHotelLicenceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nameOfOwner VARCHAR(75) null,nameOfHotel VARCHAR(75) null,telephoneNo VARCHAR(75) null,faxNo VARCHAR(75) null,emailAddress VARCHAR(75) null,parish VARCHAR(75) null,address VARCHAR(500) null,jtbApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jtb_acco_licence";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accoHotelLicence.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jtb_acco_licence.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JTBAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccoHotelLicenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accoHotelLicenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccoHotelLicenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accoHotelLicenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccoHotelLicence.class;
	}

	@Override
	public String getModelClassName() {
		return AccoHotelLicence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccoHotelLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccoHotelLicence, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoHotelLicence, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccoHotelLicence)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccoHotelLicence, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccoHotelLicence, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccoHotelLicence)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccoHotelLicence, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccoHotelLicence, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccoHotelLicence, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccoHotelLicence, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccoHotelLicence, Object>>();

			attributeGetterFunctions.put("uuid", AccoHotelLicence::getUuid);
			attributeGetterFunctions.put(
				"accoHotelLicenceId", AccoHotelLicence::getAccoHotelLicenceId);
			attributeGetterFunctions.put(
				"groupId", AccoHotelLicence::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccoHotelLicence::getCompanyId);
			attributeGetterFunctions.put("userId", AccoHotelLicence::getUserId);
			attributeGetterFunctions.put(
				"userName", AccoHotelLicence::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccoHotelLicence::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccoHotelLicence::getModifiedDate);
			attributeGetterFunctions.put(
				"nameOfOwner", AccoHotelLicence::getNameOfOwner);
			attributeGetterFunctions.put(
				"nameOfHotel", AccoHotelLicence::getNameOfHotel);
			attributeGetterFunctions.put(
				"telephoneNo", AccoHotelLicence::getTelephoneNo);
			attributeGetterFunctions.put("faxNo", AccoHotelLicence::getFaxNo);
			attributeGetterFunctions.put(
				"emailAddress", AccoHotelLicence::getEmailAddress);
			attributeGetterFunctions.put("parish", AccoHotelLicence::getParish);
			attributeGetterFunctions.put(
				"address", AccoHotelLicence::getAddress);
			attributeGetterFunctions.put(
				"jtbApplicationId", AccoHotelLicence::getJtbApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AccoHotelLicence, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccoHotelLicence, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccoHotelLicence, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setUuid);
			attributeSetterBiConsumers.put(
				"accoHotelLicenceId",
				(BiConsumer<AccoHotelLicence, Long>)
					AccoHotelLicence::setAccoHotelLicenceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccoHotelLicence, Long>)
					AccoHotelLicence::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccoHotelLicence, Long>)
					AccoHotelLicence::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccoHotelLicence, Long>)
					AccoHotelLicence::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccoHotelLicence, Date>)
					AccoHotelLicence::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccoHotelLicence, Date>)
					AccoHotelLicence::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nameOfOwner",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setNameOfOwner);
			attributeSetterBiConsumers.put(
				"nameOfHotel",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setNameOfHotel);
			attributeSetterBiConsumers.put(
				"telephoneNo",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setTelephoneNo);
			attributeSetterBiConsumers.put(
				"faxNo",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setFaxNo);
			attributeSetterBiConsumers.put(
				"emailAddress",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setEmailAddress);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setParish);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<AccoHotelLicence, String>)
					AccoHotelLicence::setAddress);
			attributeSetterBiConsumers.put(
				"jtbApplicationId",
				(BiConsumer<AccoHotelLicence, Long>)
					AccoHotelLicence::setJtbApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccoHotelLicenceId() {
		return _accoHotelLicenceId;
	}

	@Override
	public void setAccoHotelLicenceId(long accoHotelLicenceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accoHotelLicenceId = accoHotelLicenceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNameOfOwner() {
		if (_nameOfOwner == null) {
			return "";
		}
		else {
			return _nameOfOwner;
		}
	}

	@Override
	public void setNameOfOwner(String nameOfOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfOwner = nameOfOwner;
	}

	@JSON
	@Override
	public String getNameOfHotel() {
		if (_nameOfHotel == null) {
			return "";
		}
		else {
			return _nameOfHotel;
		}
	}

	@Override
	public void setNameOfHotel(String nameOfHotel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfHotel = nameOfHotel;
	}

	@JSON
	@Override
	public String getTelephoneNo() {
		if (_telephoneNo == null) {
			return "";
		}
		else {
			return _telephoneNo;
		}
	}

	@Override
	public void setTelephoneNo(String telephoneNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneNo = telephoneNo;
	}

	@JSON
	@Override
	public String getFaxNo() {
		if (_faxNo == null) {
			return "";
		}
		else {
			return _faxNo;
		}
	}

	@Override
	public void setFaxNo(String faxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_faxNo = faxNo;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public long getJtbApplicationId() {
		return _jtbApplicationId;
	}

	@Override
	public void setJtbApplicationId(long jtbApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jtbApplicationId = jtbApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJtbApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccoHotelLicence.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccoHotelLicence.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccoHotelLicence toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccoHotelLicence>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccoHotelLicenceImpl accoHotelLicenceImpl = new AccoHotelLicenceImpl();

		accoHotelLicenceImpl.setUuid(getUuid());
		accoHotelLicenceImpl.setAccoHotelLicenceId(getAccoHotelLicenceId());
		accoHotelLicenceImpl.setGroupId(getGroupId());
		accoHotelLicenceImpl.setCompanyId(getCompanyId());
		accoHotelLicenceImpl.setUserId(getUserId());
		accoHotelLicenceImpl.setUserName(getUserName());
		accoHotelLicenceImpl.setCreateDate(getCreateDate());
		accoHotelLicenceImpl.setModifiedDate(getModifiedDate());
		accoHotelLicenceImpl.setNameOfOwner(getNameOfOwner());
		accoHotelLicenceImpl.setNameOfHotel(getNameOfHotel());
		accoHotelLicenceImpl.setTelephoneNo(getTelephoneNo());
		accoHotelLicenceImpl.setFaxNo(getFaxNo());
		accoHotelLicenceImpl.setEmailAddress(getEmailAddress());
		accoHotelLicenceImpl.setParish(getParish());
		accoHotelLicenceImpl.setAddress(getAddress());
		accoHotelLicenceImpl.setJtbApplicationId(getJtbApplicationId());

		accoHotelLicenceImpl.resetOriginalValues();

		return accoHotelLicenceImpl;
	}

	@Override
	public AccoHotelLicence cloneWithOriginalValues() {
		AccoHotelLicenceImpl accoHotelLicenceImpl = new AccoHotelLicenceImpl();

		accoHotelLicenceImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accoHotelLicenceImpl.setAccoHotelLicenceId(
			this.<Long>getColumnOriginalValue("accoHotelLicenceId"));
		accoHotelLicenceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accoHotelLicenceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accoHotelLicenceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accoHotelLicenceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accoHotelLicenceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accoHotelLicenceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accoHotelLicenceImpl.setNameOfOwner(
			this.<String>getColumnOriginalValue("nameOfOwner"));
		accoHotelLicenceImpl.setNameOfHotel(
			this.<String>getColumnOriginalValue("nameOfHotel"));
		accoHotelLicenceImpl.setTelephoneNo(
			this.<String>getColumnOriginalValue("telephoneNo"));
		accoHotelLicenceImpl.setFaxNo(
			this.<String>getColumnOriginalValue("faxNo"));
		accoHotelLicenceImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		accoHotelLicenceImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		accoHotelLicenceImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		accoHotelLicenceImpl.setJtbApplicationId(
			this.<Long>getColumnOriginalValue("jtbApplicationId"));

		return accoHotelLicenceImpl;
	}

	@Override
	public int compareTo(AccoHotelLicence accoHotelLicence) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), accoHotelLicence.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccoHotelLicence)) {
			return false;
		}

		AccoHotelLicence accoHotelLicence = (AccoHotelLicence)object;

		long primaryKey = accoHotelLicence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccoHotelLicence> toCacheModel() {
		AccoHotelLicenceCacheModel accoHotelLicenceCacheModel =
			new AccoHotelLicenceCacheModel();

		accoHotelLicenceCacheModel.uuid = getUuid();

		String uuid = accoHotelLicenceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accoHotelLicenceCacheModel.uuid = null;
		}

		accoHotelLicenceCacheModel.accoHotelLicenceId = getAccoHotelLicenceId();

		accoHotelLicenceCacheModel.groupId = getGroupId();

		accoHotelLicenceCacheModel.companyId = getCompanyId();

		accoHotelLicenceCacheModel.userId = getUserId();

		accoHotelLicenceCacheModel.userName = getUserName();

		String userName = accoHotelLicenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accoHotelLicenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accoHotelLicenceCacheModel.createDate = createDate.getTime();
		}
		else {
			accoHotelLicenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accoHotelLicenceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accoHotelLicenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accoHotelLicenceCacheModel.nameOfOwner = getNameOfOwner();

		String nameOfOwner = accoHotelLicenceCacheModel.nameOfOwner;

		if ((nameOfOwner != null) && (nameOfOwner.length() == 0)) {
			accoHotelLicenceCacheModel.nameOfOwner = null;
		}

		accoHotelLicenceCacheModel.nameOfHotel = getNameOfHotel();

		String nameOfHotel = accoHotelLicenceCacheModel.nameOfHotel;

		if ((nameOfHotel != null) && (nameOfHotel.length() == 0)) {
			accoHotelLicenceCacheModel.nameOfHotel = null;
		}

		accoHotelLicenceCacheModel.telephoneNo = getTelephoneNo();

		String telephoneNo = accoHotelLicenceCacheModel.telephoneNo;

		if ((telephoneNo != null) && (telephoneNo.length() == 0)) {
			accoHotelLicenceCacheModel.telephoneNo = null;
		}

		accoHotelLicenceCacheModel.faxNo = getFaxNo();

		String faxNo = accoHotelLicenceCacheModel.faxNo;

		if ((faxNo != null) && (faxNo.length() == 0)) {
			accoHotelLicenceCacheModel.faxNo = null;
		}

		accoHotelLicenceCacheModel.emailAddress = getEmailAddress();

		String emailAddress = accoHotelLicenceCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			accoHotelLicenceCacheModel.emailAddress = null;
		}

		accoHotelLicenceCacheModel.parish = getParish();

		String parish = accoHotelLicenceCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			accoHotelLicenceCacheModel.parish = null;
		}

		accoHotelLicenceCacheModel.address = getAddress();

		String address = accoHotelLicenceCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			accoHotelLicenceCacheModel.address = null;
		}

		accoHotelLicenceCacheModel.jtbApplicationId = getJtbApplicationId();

		return accoHotelLicenceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccoHotelLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccoHotelLicence, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccoHotelLicence, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccoHotelLicence)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccoHotelLicence>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccoHotelLicence.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accoHotelLicenceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nameOfOwner;
	private String _nameOfHotel;
	private String _telephoneNo;
	private String _faxNo;
	private String _emailAddress;
	private String _parish;
	private String _address;
	private long _jtbApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccoHotelLicence, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccoHotelLicence)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("accoHotelLicenceId", _accoHotelLicenceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nameOfOwner", _nameOfOwner);
		_columnOriginalValues.put("nameOfHotel", _nameOfHotel);
		_columnOriginalValues.put("telephoneNo", _telephoneNo);
		_columnOriginalValues.put("faxNo", _faxNo);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("jtbApplicationId", _jtbApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accoHotelLicenceId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("nameOfOwner", 256L);

		columnBitmasks.put("nameOfHotel", 512L);

		columnBitmasks.put("telephoneNo", 1024L);

		columnBitmasks.put("faxNo", 2048L);

		columnBitmasks.put("emailAddress", 4096L);

		columnBitmasks.put("parish", 8192L);

		columnBitmasks.put("address", 16384L);

		columnBitmasks.put("jtbApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccoHotelLicence _escapedModel;

}