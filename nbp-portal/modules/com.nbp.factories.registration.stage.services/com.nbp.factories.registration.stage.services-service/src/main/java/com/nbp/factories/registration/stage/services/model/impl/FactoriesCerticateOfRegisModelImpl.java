/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.factories.registration.stage.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.factories.registration.stage.services.model.FactoriesCerticateOfRegis;
import com.nbp.factories.registration.stage.services.model.FactoriesCerticateOfRegisModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FactoriesCerticateOfRegis service. Represents a row in the &quot;nbp_factories_cert_regis&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FactoriesCerticateOfRegisModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FactoriesCerticateOfRegisImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FactoriesCerticateOfRegisImpl
 * @generated
 */
@JSON(strict = true)
public class FactoriesCerticateOfRegisModelImpl
	extends BaseModelImpl<FactoriesCerticateOfRegis>
	implements FactoriesCerticateOfRegisModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a factories certicate of regis model instance should use the <code>FactoriesCerticateOfRegis</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_factories_cert_regis";

	public static final Object[][] TABLE_COLUMNS = {
		{"factoriesCerticateOfRegisId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"caseId", Types.VARCHAR}, {"nameOfEstablishment", Types.VARCHAR},
		{"parish", Types.VARCHAR}, {"procuctCatAndName", Types.VARCHAR},
		{"certificateIssueDate", Types.TIMESTAMP},
		{"dateOfExpiration", Types.TIMESTAMP}, {"registration", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"docFileEntry", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("factoriesCerticateOfRegisId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfEstablishment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("procuctCatAndName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateIssueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfExpiration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("registration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docFileEntry", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_factories_cert_regis (factoriesCerticateOfRegisId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,nameOfEstablishment VARCHAR(75) null,parish VARCHAR(75) null,procuctCatAndName VARCHAR(75) null,certificateIssueDate DATE null,dateOfExpiration DATE null,registration VARCHAR(75) null,status VARCHAR(75) null,docFileEntry LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_factories_cert_regis";

	public static final String ORDER_BY_JPQL =
		" ORDER BY factoriesCerticateOfRegis.factoriesCerticateOfRegisId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_factories_cert_regis.factoriesCerticateOfRegisId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FACTORIESCERTICATEOFREGISID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FactoriesCerticateOfRegisModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _factoriesCerticateOfRegisId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFactoriesCerticateOfRegisId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _factoriesCerticateOfRegisId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FactoriesCerticateOfRegis.class;
	}

	@Override
	public String getModelClassName() {
		return FactoriesCerticateOfRegis.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FactoriesCerticateOfRegis, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FactoriesCerticateOfRegis, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FactoriesCerticateOfRegis, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FactoriesCerticateOfRegis)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FactoriesCerticateOfRegis, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FactoriesCerticateOfRegis, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FactoriesCerticateOfRegis)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FactoriesCerticateOfRegis, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FactoriesCerticateOfRegis, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<FactoriesCerticateOfRegis, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<FactoriesCerticateOfRegis, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FactoriesCerticateOfRegis, Object>>();

			attributeGetterFunctions.put(
				"factoriesCerticateOfRegisId",
				FactoriesCerticateOfRegis::getFactoriesCerticateOfRegisId);
			attributeGetterFunctions.put(
				"groupId", FactoriesCerticateOfRegis::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FactoriesCerticateOfRegis::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FactoriesCerticateOfRegis::getUserId);
			attributeGetterFunctions.put(
				"userName", FactoriesCerticateOfRegis::getUserName);
			attributeGetterFunctions.put(
				"createDate", FactoriesCerticateOfRegis::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FactoriesCerticateOfRegis::getModifiedDate);
			attributeGetterFunctions.put(
				"caseId", FactoriesCerticateOfRegis::getCaseId);
			attributeGetterFunctions.put(
				"nameOfEstablishment",
				FactoriesCerticateOfRegis::getNameOfEstablishment);
			attributeGetterFunctions.put(
				"parish", FactoriesCerticateOfRegis::getParish);
			attributeGetterFunctions.put(
				"procuctCatAndName",
				FactoriesCerticateOfRegis::getProcuctCatAndName);
			attributeGetterFunctions.put(
				"certificateIssueDate",
				FactoriesCerticateOfRegis::getCertificateIssueDate);
			attributeGetterFunctions.put(
				"dateOfExpiration",
				FactoriesCerticateOfRegis::getDateOfExpiration);
			attributeGetterFunctions.put(
				"registration", FactoriesCerticateOfRegis::getRegistration);
			attributeGetterFunctions.put(
				"status", FactoriesCerticateOfRegis::getStatus);
			attributeGetterFunctions.put(
				"docFileEntry", FactoriesCerticateOfRegis::getDocFileEntry);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FactoriesCerticateOfRegis, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FactoriesCerticateOfRegis, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FactoriesCerticateOfRegis, ?>>();

			attributeSetterBiConsumers.put(
				"factoriesCerticateOfRegisId",
				(BiConsumer<FactoriesCerticateOfRegis, Long>)
					FactoriesCerticateOfRegis::setFactoriesCerticateOfRegisId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FactoriesCerticateOfRegis, Long>)
					FactoriesCerticateOfRegis::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FactoriesCerticateOfRegis, Long>)
					FactoriesCerticateOfRegis::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FactoriesCerticateOfRegis, Long>)
					FactoriesCerticateOfRegis::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FactoriesCerticateOfRegis, String>)
					FactoriesCerticateOfRegis::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FactoriesCerticateOfRegis, Date>)
					FactoriesCerticateOfRegis::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FactoriesCerticateOfRegis, Date>)
					FactoriesCerticateOfRegis::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<FactoriesCerticateOfRegis, String>)
					FactoriesCerticateOfRegis::setCaseId);
			attributeSetterBiConsumers.put(
				"nameOfEstablishment",
				(BiConsumer<FactoriesCerticateOfRegis, String>)
					FactoriesCerticateOfRegis::setNameOfEstablishment);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<FactoriesCerticateOfRegis, String>)
					FactoriesCerticateOfRegis::setParish);
			attributeSetterBiConsumers.put(
				"procuctCatAndName",
				(BiConsumer<FactoriesCerticateOfRegis, String>)
					FactoriesCerticateOfRegis::setProcuctCatAndName);
			attributeSetterBiConsumers.put(
				"certificateIssueDate",
				(BiConsumer<FactoriesCerticateOfRegis, Date>)
					FactoriesCerticateOfRegis::setCertificateIssueDate);
			attributeSetterBiConsumers.put(
				"dateOfExpiration",
				(BiConsumer<FactoriesCerticateOfRegis, Date>)
					FactoriesCerticateOfRegis::setDateOfExpiration);
			attributeSetterBiConsumers.put(
				"registration",
				(BiConsumer<FactoriesCerticateOfRegis, String>)
					FactoriesCerticateOfRegis::setRegistration);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<FactoriesCerticateOfRegis, String>)
					FactoriesCerticateOfRegis::setStatus);
			attributeSetterBiConsumers.put(
				"docFileEntry",
				(BiConsumer<FactoriesCerticateOfRegis, Long>)
					FactoriesCerticateOfRegis::setDocFileEntry);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFactoriesCerticateOfRegisId() {
		return _factoriesCerticateOfRegisId;
	}

	@Override
	public void setFactoriesCerticateOfRegisId(
		long factoriesCerticateOfRegisId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_factoriesCerticateOfRegisId = factoriesCerticateOfRegisId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getNameOfEstablishment() {
		if (_nameOfEstablishment == null) {
			return "";
		}
		else {
			return _nameOfEstablishment;
		}
	}

	@Override
	public void setNameOfEstablishment(String nameOfEstablishment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfEstablishment = nameOfEstablishment;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public String getProcuctCatAndName() {
		if (_procuctCatAndName == null) {
			return "";
		}
		else {
			return _procuctCatAndName;
		}
	}

	@Override
	public void setProcuctCatAndName(String procuctCatAndName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procuctCatAndName = procuctCatAndName;
	}

	@JSON
	@Override
	public Date getCertificateIssueDate() {
		return _certificateIssueDate;
	}

	@Override
	public void setCertificateIssueDate(Date certificateIssueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificateIssueDate = certificateIssueDate;
	}

	@JSON
	@Override
	public Date getDateOfExpiration() {
		return _dateOfExpiration;
	}

	@Override
	public void setDateOfExpiration(Date dateOfExpiration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfExpiration = dateOfExpiration;
	}

	@JSON
	@Override
	public String getRegistration() {
		if (_registration == null) {
			return "";
		}
		else {
			return _registration;
		}
	}

	@Override
	public void setRegistration(String registration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registration = registration;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getDocFileEntry() {
		return _docFileEntry;
	}

	@Override
	public void setDocFileEntry(long docFileEntry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docFileEntry = docFileEntry;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FactoriesCerticateOfRegis.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FactoriesCerticateOfRegis toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FactoriesCerticateOfRegis>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FactoriesCerticateOfRegisImpl factoriesCerticateOfRegisImpl =
			new FactoriesCerticateOfRegisImpl();

		factoriesCerticateOfRegisImpl.setFactoriesCerticateOfRegisId(
			getFactoriesCerticateOfRegisId());
		factoriesCerticateOfRegisImpl.setGroupId(getGroupId());
		factoriesCerticateOfRegisImpl.setCompanyId(getCompanyId());
		factoriesCerticateOfRegisImpl.setUserId(getUserId());
		factoriesCerticateOfRegisImpl.setUserName(getUserName());
		factoriesCerticateOfRegisImpl.setCreateDate(getCreateDate());
		factoriesCerticateOfRegisImpl.setModifiedDate(getModifiedDate());
		factoriesCerticateOfRegisImpl.setCaseId(getCaseId());
		factoriesCerticateOfRegisImpl.setNameOfEstablishment(
			getNameOfEstablishment());
		factoriesCerticateOfRegisImpl.setParish(getParish());
		factoriesCerticateOfRegisImpl.setProcuctCatAndName(
			getProcuctCatAndName());
		factoriesCerticateOfRegisImpl.setCertificateIssueDate(
			getCertificateIssueDate());
		factoriesCerticateOfRegisImpl.setDateOfExpiration(
			getDateOfExpiration());
		factoriesCerticateOfRegisImpl.setRegistration(getRegistration());
		factoriesCerticateOfRegisImpl.setStatus(getStatus());
		factoriesCerticateOfRegisImpl.setDocFileEntry(getDocFileEntry());

		factoriesCerticateOfRegisImpl.resetOriginalValues();

		return factoriesCerticateOfRegisImpl;
	}

	@Override
	public FactoriesCerticateOfRegis cloneWithOriginalValues() {
		FactoriesCerticateOfRegisImpl factoriesCerticateOfRegisImpl =
			new FactoriesCerticateOfRegisImpl();

		factoriesCerticateOfRegisImpl.setFactoriesCerticateOfRegisId(
			this.<Long>getColumnOriginalValue("factoriesCerticateOfRegisId"));
		factoriesCerticateOfRegisImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		factoriesCerticateOfRegisImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		factoriesCerticateOfRegisImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		factoriesCerticateOfRegisImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		factoriesCerticateOfRegisImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		factoriesCerticateOfRegisImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		factoriesCerticateOfRegisImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		factoriesCerticateOfRegisImpl.setNameOfEstablishment(
			this.<String>getColumnOriginalValue("nameOfEstablishment"));
		factoriesCerticateOfRegisImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		factoriesCerticateOfRegisImpl.setProcuctCatAndName(
			this.<String>getColumnOriginalValue("procuctCatAndName"));
		factoriesCerticateOfRegisImpl.setCertificateIssueDate(
			this.<Date>getColumnOriginalValue("certificateIssueDate"));
		factoriesCerticateOfRegisImpl.setDateOfExpiration(
			this.<Date>getColumnOriginalValue("dateOfExpiration"));
		factoriesCerticateOfRegisImpl.setRegistration(
			this.<String>getColumnOriginalValue("registration"));
		factoriesCerticateOfRegisImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		factoriesCerticateOfRegisImpl.setDocFileEntry(
			this.<Long>getColumnOriginalValue("docFileEntry"));

		return factoriesCerticateOfRegisImpl;
	}

	@Override
	public int compareTo(FactoriesCerticateOfRegis factoriesCerticateOfRegis) {
		long primaryKey = factoriesCerticateOfRegis.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FactoriesCerticateOfRegis)) {
			return false;
		}

		FactoriesCerticateOfRegis factoriesCerticateOfRegis =
			(FactoriesCerticateOfRegis)object;

		long primaryKey = factoriesCerticateOfRegis.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FactoriesCerticateOfRegis> toCacheModel() {
		FactoriesCerticateOfRegisCacheModel
			factoriesCerticateOfRegisCacheModel =
				new FactoriesCerticateOfRegisCacheModel();

		factoriesCerticateOfRegisCacheModel.factoriesCerticateOfRegisId =
			getFactoriesCerticateOfRegisId();

		factoriesCerticateOfRegisCacheModel.groupId = getGroupId();

		factoriesCerticateOfRegisCacheModel.companyId = getCompanyId();

		factoriesCerticateOfRegisCacheModel.userId = getUserId();

		factoriesCerticateOfRegisCacheModel.userName = getUserName();

		String userName = factoriesCerticateOfRegisCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			factoriesCerticateOfRegisCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			factoriesCerticateOfRegisCacheModel.createDate =
				createDate.getTime();
		}
		else {
			factoriesCerticateOfRegisCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			factoriesCerticateOfRegisCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			factoriesCerticateOfRegisCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		factoriesCerticateOfRegisCacheModel.caseId = getCaseId();

		String caseId = factoriesCerticateOfRegisCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			factoriesCerticateOfRegisCacheModel.caseId = null;
		}

		factoriesCerticateOfRegisCacheModel.nameOfEstablishment =
			getNameOfEstablishment();

		String nameOfEstablishment =
			factoriesCerticateOfRegisCacheModel.nameOfEstablishment;

		if ((nameOfEstablishment != null) &&
			(nameOfEstablishment.length() == 0)) {

			factoriesCerticateOfRegisCacheModel.nameOfEstablishment = null;
		}

		factoriesCerticateOfRegisCacheModel.parish = getParish();

		String parish = factoriesCerticateOfRegisCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			factoriesCerticateOfRegisCacheModel.parish = null;
		}

		factoriesCerticateOfRegisCacheModel.procuctCatAndName =
			getProcuctCatAndName();

		String procuctCatAndName =
			factoriesCerticateOfRegisCacheModel.procuctCatAndName;

		if ((procuctCatAndName != null) && (procuctCatAndName.length() == 0)) {
			factoriesCerticateOfRegisCacheModel.procuctCatAndName = null;
		}

		Date certificateIssueDate = getCertificateIssueDate();

		if (certificateIssueDate != null) {
			factoriesCerticateOfRegisCacheModel.certificateIssueDate =
				certificateIssueDate.getTime();
		}
		else {
			factoriesCerticateOfRegisCacheModel.certificateIssueDate =
				Long.MIN_VALUE;
		}

		Date dateOfExpiration = getDateOfExpiration();

		if (dateOfExpiration != null) {
			factoriesCerticateOfRegisCacheModel.dateOfExpiration =
				dateOfExpiration.getTime();
		}
		else {
			factoriesCerticateOfRegisCacheModel.dateOfExpiration =
				Long.MIN_VALUE;
		}

		factoriesCerticateOfRegisCacheModel.registration = getRegistration();

		String registration = factoriesCerticateOfRegisCacheModel.registration;

		if ((registration != null) && (registration.length() == 0)) {
			factoriesCerticateOfRegisCacheModel.registration = null;
		}

		factoriesCerticateOfRegisCacheModel.status = getStatus();

		String status = factoriesCerticateOfRegisCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			factoriesCerticateOfRegisCacheModel.status = null;
		}

		factoriesCerticateOfRegisCacheModel.docFileEntry = getDocFileEntry();

		return factoriesCerticateOfRegisCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FactoriesCerticateOfRegis, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FactoriesCerticateOfRegis, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FactoriesCerticateOfRegis, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FactoriesCerticateOfRegis)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FactoriesCerticateOfRegis>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						FactoriesCerticateOfRegis.class, ModelWrapper.class);

	}

	private long _factoriesCerticateOfRegisId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _nameOfEstablishment;
	private String _parish;
	private String _procuctCatAndName;
	private Date _certificateIssueDate;
	private Date _dateOfExpiration;
	private String _registration;
	private String _status;
	private long _docFileEntry;

	public <T> T getColumnValue(String columnName) {
		Function<FactoriesCerticateOfRegis, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FactoriesCerticateOfRegis)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"factoriesCerticateOfRegisId", _factoriesCerticateOfRegisId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("nameOfEstablishment", _nameOfEstablishment);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("procuctCatAndName", _procuctCatAndName);
		_columnOriginalValues.put(
			"certificateIssueDate", _certificateIssueDate);
		_columnOriginalValues.put("dateOfExpiration", _dateOfExpiration);
		_columnOriginalValues.put("registration", _registration);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("docFileEntry", _docFileEntry);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("factoriesCerticateOfRegisId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("nameOfEstablishment", 256L);

		columnBitmasks.put("parish", 512L);

		columnBitmasks.put("procuctCatAndName", 1024L);

		columnBitmasks.put("certificateIssueDate", 2048L);

		columnBitmasks.put("dateOfExpiration", 4096L);

		columnBitmasks.put("registration", 8192L);

		columnBitmasks.put("status", 16384L);

		columnBitmasks.put("docFileEntry", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FactoriesCerticateOfRegis _escapedModel;

}