/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.film.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.film.application.form.service.model.FilmProductionDetails;
import com.nbp.film.application.form.service.model.FilmProductionDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FilmProductionDetails service. Represents a row in the &quot;nbp_film_production_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FilmProductionDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilmProductionDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FilmProductionDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class FilmProductionDetailsModelImpl
	extends BaseModelImpl<FilmProductionDetails>
	implements FilmProductionDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a film production details model instance should use the <code>FilmProductionDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_film_production_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"filmProductionDetailsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"productionTitle", Types.VARCHAR},
		{"totalProductionBudget", Types.VARCHAR},
		{"expenditureInJamaica", Types.VARCHAR},
		{"foreignPersonnel", Types.VARCHAR},
		{"jamaicanPersonnel", Types.VARCHAR}, {"productionType", Types.VARCHAR},
		{"companyName", Types.VARCHAR}, {"fixerName", Types.VARCHAR},
		{"fixerMobile", Types.VARCHAR}, {"fixerEmail", Types.VARCHAR},
		{"preProductionDates", Types.TIMESTAMP},
		{"productionDates", Types.TIMESTAMP},
		{"productionStartDate", Types.TIMESTAMP},
		{"productionEndDate", Types.TIMESTAMP},
		{"proposedProductionLocations", Types.VARCHAR},
		{"productionInternationalCrew", Types.VARCHAR},
		{"productionjamaicanCrew", Types.VARCHAR},
		{"productionExternalPermit", Types.VARCHAR},
		{"filmApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("filmProductionDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalProductionBudget", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expenditureInJamaica", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foreignPersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jamaicanPersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fixerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fixerMobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fixerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("preProductionDates", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionDates", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("proposedProductionLocations", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionInternationalCrew", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionjamaicanCrew", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionExternalPermit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filmApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_film_production_details (filmProductionDetailsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,productionTitle VARCHAR(75) null,totalProductionBudget VARCHAR(75) null,expenditureInJamaica VARCHAR(75) null,foreignPersonnel VARCHAR(75) null,jamaicanPersonnel VARCHAR(75) null,productionType VARCHAR(75) null,companyName VARCHAR(75) null,fixerName VARCHAR(75) null,fixerMobile VARCHAR(75) null,fixerEmail VARCHAR(75) null,preProductionDates DATE null,productionDates DATE null,productionStartDate DATE null,productionEndDate DATE null,proposedProductionLocations VARCHAR(500) null,productionInternationalCrew VARCHAR(75) null,productionjamaicanCrew VARCHAR(75) null,productionExternalPermit VARCHAR(500) null,filmApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_film_production_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY filmProductionDetails.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_film_production_details.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FilmProductionDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _filmProductionDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFilmProductionDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _filmProductionDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FilmProductionDetails.class;
	}

	@Override
	public String getModelClassName() {
		return FilmProductionDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FilmProductionDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FilmProductionDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmProductionDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FilmProductionDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FilmProductionDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FilmProductionDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FilmProductionDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FilmProductionDetails, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FilmProductionDetails, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<FilmProductionDetails, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<FilmProductionDetails, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FilmProductionDetails, Object>>();

			attributeGetterFunctions.put(
				"filmProductionDetailsId",
				FilmProductionDetails::getFilmProductionDetailsId);
			attributeGetterFunctions.put(
				"groupId", FilmProductionDetails::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FilmProductionDetails::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FilmProductionDetails::getUserId);
			attributeGetterFunctions.put(
				"userName", FilmProductionDetails::getUserName);
			attributeGetterFunctions.put(
				"createDate", FilmProductionDetails::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FilmProductionDetails::getModifiedDate);
			attributeGetterFunctions.put(
				"productionTitle", FilmProductionDetails::getProductionTitle);
			attributeGetterFunctions.put(
				"totalProductionBudget",
				FilmProductionDetails::getTotalProductionBudget);
			attributeGetterFunctions.put(
				"expenditureInJamaica",
				FilmProductionDetails::getExpenditureInJamaica);
			attributeGetterFunctions.put(
				"foreignPersonnel", FilmProductionDetails::getForeignPersonnel);
			attributeGetterFunctions.put(
				"jamaicanPersonnel",
				FilmProductionDetails::getJamaicanPersonnel);
			attributeGetterFunctions.put(
				"productionType", FilmProductionDetails::getProductionType);
			attributeGetterFunctions.put(
				"companyName", FilmProductionDetails::getCompanyName);
			attributeGetterFunctions.put(
				"fixerName", FilmProductionDetails::getFixerName);
			attributeGetterFunctions.put(
				"fixerMobile", FilmProductionDetails::getFixerMobile);
			attributeGetterFunctions.put(
				"fixerEmail", FilmProductionDetails::getFixerEmail);
			attributeGetterFunctions.put(
				"preProductionDates",
				FilmProductionDetails::getPreProductionDates);
			attributeGetterFunctions.put(
				"productionDates", FilmProductionDetails::getProductionDates);
			attributeGetterFunctions.put(
				"productionStartDate",
				FilmProductionDetails::getProductionStartDate);
			attributeGetterFunctions.put(
				"productionEndDate",
				FilmProductionDetails::getProductionEndDate);
			attributeGetterFunctions.put(
				"proposedProductionLocations",
				FilmProductionDetails::getProposedProductionLocations);
			attributeGetterFunctions.put(
				"productionInternationalCrew",
				FilmProductionDetails::getProductionInternationalCrew);
			attributeGetterFunctions.put(
				"productionjamaicanCrew",
				FilmProductionDetails::getProductionjamaicanCrew);
			attributeGetterFunctions.put(
				"productionExternalPermit",
				FilmProductionDetails::getProductionExternalPermit);
			attributeGetterFunctions.put(
				"filmApplicationId",
				FilmProductionDetails::getFilmApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FilmProductionDetails, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FilmProductionDetails, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FilmProductionDetails, ?>>();

			attributeSetterBiConsumers.put(
				"filmProductionDetailsId",
				(BiConsumer<FilmProductionDetails, Long>)
					FilmProductionDetails::setFilmProductionDetailsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FilmProductionDetails, Long>)
					FilmProductionDetails::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FilmProductionDetails, Long>)
					FilmProductionDetails::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FilmProductionDetails, Long>)
					FilmProductionDetails::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FilmProductionDetails, Date>)
					FilmProductionDetails::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FilmProductionDetails, Date>)
					FilmProductionDetails::setModifiedDate);
			attributeSetterBiConsumers.put(
				"productionTitle",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setProductionTitle);
			attributeSetterBiConsumers.put(
				"totalProductionBudget",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setTotalProductionBudget);
			attributeSetterBiConsumers.put(
				"expenditureInJamaica",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setExpenditureInJamaica);
			attributeSetterBiConsumers.put(
				"foreignPersonnel",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setForeignPersonnel);
			attributeSetterBiConsumers.put(
				"jamaicanPersonnel",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setJamaicanPersonnel);
			attributeSetterBiConsumers.put(
				"productionType",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setProductionType);
			attributeSetterBiConsumers.put(
				"companyName",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setCompanyName);
			attributeSetterBiConsumers.put(
				"fixerName",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setFixerName);
			attributeSetterBiConsumers.put(
				"fixerMobile",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setFixerMobile);
			attributeSetterBiConsumers.put(
				"fixerEmail",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setFixerEmail);
			attributeSetterBiConsumers.put(
				"preProductionDates",
				(BiConsumer<FilmProductionDetails, Date>)
					FilmProductionDetails::setPreProductionDates);
			attributeSetterBiConsumers.put(
				"productionDates",
				(BiConsumer<FilmProductionDetails, Date>)
					FilmProductionDetails::setProductionDates);
			attributeSetterBiConsumers.put(
				"productionStartDate",
				(BiConsumer<FilmProductionDetails, Date>)
					FilmProductionDetails::setProductionStartDate);
			attributeSetterBiConsumers.put(
				"productionEndDate",
				(BiConsumer<FilmProductionDetails, Date>)
					FilmProductionDetails::setProductionEndDate);
			attributeSetterBiConsumers.put(
				"proposedProductionLocations",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setProposedProductionLocations);
			attributeSetterBiConsumers.put(
				"productionInternationalCrew",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setProductionInternationalCrew);
			attributeSetterBiConsumers.put(
				"productionjamaicanCrew",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setProductionjamaicanCrew);
			attributeSetterBiConsumers.put(
				"productionExternalPermit",
				(BiConsumer<FilmProductionDetails, String>)
					FilmProductionDetails::setProductionExternalPermit);
			attributeSetterBiConsumers.put(
				"filmApplicationId",
				(BiConsumer<FilmProductionDetails, Long>)
					FilmProductionDetails::setFilmApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFilmProductionDetailsId() {
		return _filmProductionDetailsId;
	}

	@Override
	public void setFilmProductionDetailsId(long filmProductionDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmProductionDetailsId = filmProductionDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getProductionTitle() {
		if (_productionTitle == null) {
			return "";
		}
		else {
			return _productionTitle;
		}
	}

	@Override
	public void setProductionTitle(String productionTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionTitle = productionTitle;
	}

	@JSON
	@Override
	public String getTotalProductionBudget() {
		if (_totalProductionBudget == null) {
			return "";
		}
		else {
			return _totalProductionBudget;
		}
	}

	@Override
	public void setTotalProductionBudget(String totalProductionBudget) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalProductionBudget = totalProductionBudget;
	}

	@JSON
	@Override
	public String getExpenditureInJamaica() {
		if (_expenditureInJamaica == null) {
			return "";
		}
		else {
			return _expenditureInJamaica;
		}
	}

	@Override
	public void setExpenditureInJamaica(String expenditureInJamaica) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expenditureInJamaica = expenditureInJamaica;
	}

	@JSON
	@Override
	public String getForeignPersonnel() {
		if (_foreignPersonnel == null) {
			return "";
		}
		else {
			return _foreignPersonnel;
		}
	}

	@Override
	public void setForeignPersonnel(String foreignPersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foreignPersonnel = foreignPersonnel;
	}

	@JSON
	@Override
	public String getJamaicanPersonnel() {
		if (_jamaicanPersonnel == null) {
			return "";
		}
		else {
			return _jamaicanPersonnel;
		}
	}

	@Override
	public void setJamaicanPersonnel(String jamaicanPersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jamaicanPersonnel = jamaicanPersonnel;
	}

	@JSON
	@Override
	public String getProductionType() {
		if (_productionType == null) {
			return "";
		}
		else {
			return _productionType;
		}
	}

	@Override
	public void setProductionType(String productionType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionType = productionType;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	@JSON
	@Override
	public String getFixerName() {
		if (_fixerName == null) {
			return "";
		}
		else {
			return _fixerName;
		}
	}

	@Override
	public void setFixerName(String fixerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fixerName = fixerName;
	}

	@JSON
	@Override
	public String getFixerMobile() {
		if (_fixerMobile == null) {
			return "";
		}
		else {
			return _fixerMobile;
		}
	}

	@Override
	public void setFixerMobile(String fixerMobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fixerMobile = fixerMobile;
	}

	@JSON
	@Override
	public String getFixerEmail() {
		if (_fixerEmail == null) {
			return "";
		}
		else {
			return _fixerEmail;
		}
	}

	@Override
	public void setFixerEmail(String fixerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fixerEmail = fixerEmail;
	}

	@JSON
	@Override
	public Date getPreProductionDates() {
		return _preProductionDates;
	}

	@Override
	public void setPreProductionDates(Date preProductionDates) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preProductionDates = preProductionDates;
	}

	@JSON
	@Override
	public Date getProductionDates() {
		return _productionDates;
	}

	@Override
	public void setProductionDates(Date productionDates) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionDates = productionDates;
	}

	@JSON
	@Override
	public Date getProductionStartDate() {
		return _productionStartDate;
	}

	@Override
	public void setProductionStartDate(Date productionStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionStartDate = productionStartDate;
	}

	@JSON
	@Override
	public Date getProductionEndDate() {
		return _productionEndDate;
	}

	@Override
	public void setProductionEndDate(Date productionEndDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionEndDate = productionEndDate;
	}

	@JSON
	@Override
	public String getProposedProductionLocations() {
		if (_proposedProductionLocations == null) {
			return "";
		}
		else {
			return _proposedProductionLocations;
		}
	}

	@Override
	public void setProposedProductionLocations(
		String proposedProductionLocations) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proposedProductionLocations = proposedProductionLocations;
	}

	@JSON
	@Override
	public String getProductionInternationalCrew() {
		if (_productionInternationalCrew == null) {
			return "";
		}
		else {
			return _productionInternationalCrew;
		}
	}

	@Override
	public void setProductionInternationalCrew(
		String productionInternationalCrew) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionInternationalCrew = productionInternationalCrew;
	}

	@JSON
	@Override
	public String getProductionjamaicanCrew() {
		if (_productionjamaicanCrew == null) {
			return "";
		}
		else {
			return _productionjamaicanCrew;
		}
	}

	@Override
	public void setProductionjamaicanCrew(String productionjamaicanCrew) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionjamaicanCrew = productionjamaicanCrew;
	}

	@JSON
	@Override
	public String getProductionExternalPermit() {
		if (_productionExternalPermit == null) {
			return "";
		}
		else {
			return _productionExternalPermit;
		}
	}

	@Override
	public void setProductionExternalPermit(String productionExternalPermit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionExternalPermit = productionExternalPermit;
	}

	@JSON
	@Override
	public long getFilmApplicationId() {
		return _filmApplicationId;
	}

	@Override
	public void setFilmApplicationId(long filmApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmApplicationId = filmApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFilmApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("filmApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FilmProductionDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FilmProductionDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FilmProductionDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FilmProductionDetailsImpl filmProductionDetailsImpl =
			new FilmProductionDetailsImpl();

		filmProductionDetailsImpl.setFilmProductionDetailsId(
			getFilmProductionDetailsId());
		filmProductionDetailsImpl.setGroupId(getGroupId());
		filmProductionDetailsImpl.setCompanyId(getCompanyId());
		filmProductionDetailsImpl.setUserId(getUserId());
		filmProductionDetailsImpl.setUserName(getUserName());
		filmProductionDetailsImpl.setCreateDate(getCreateDate());
		filmProductionDetailsImpl.setModifiedDate(getModifiedDate());
		filmProductionDetailsImpl.setProductionTitle(getProductionTitle());
		filmProductionDetailsImpl.setTotalProductionBudget(
			getTotalProductionBudget());
		filmProductionDetailsImpl.setExpenditureInJamaica(
			getExpenditureInJamaica());
		filmProductionDetailsImpl.setForeignPersonnel(getForeignPersonnel());
		filmProductionDetailsImpl.setJamaicanPersonnel(getJamaicanPersonnel());
		filmProductionDetailsImpl.setProductionType(getProductionType());
		filmProductionDetailsImpl.setCompanyName(getCompanyName());
		filmProductionDetailsImpl.setFixerName(getFixerName());
		filmProductionDetailsImpl.setFixerMobile(getFixerMobile());
		filmProductionDetailsImpl.setFixerEmail(getFixerEmail());
		filmProductionDetailsImpl.setPreProductionDates(
			getPreProductionDates());
		filmProductionDetailsImpl.setProductionDates(getProductionDates());
		filmProductionDetailsImpl.setProductionStartDate(
			getProductionStartDate());
		filmProductionDetailsImpl.setProductionEndDate(getProductionEndDate());
		filmProductionDetailsImpl.setProposedProductionLocations(
			getProposedProductionLocations());
		filmProductionDetailsImpl.setProductionInternationalCrew(
			getProductionInternationalCrew());
		filmProductionDetailsImpl.setProductionjamaicanCrew(
			getProductionjamaicanCrew());
		filmProductionDetailsImpl.setProductionExternalPermit(
			getProductionExternalPermit());
		filmProductionDetailsImpl.setFilmApplicationId(getFilmApplicationId());

		filmProductionDetailsImpl.resetOriginalValues();

		return filmProductionDetailsImpl;
	}

	@Override
	public FilmProductionDetails cloneWithOriginalValues() {
		FilmProductionDetailsImpl filmProductionDetailsImpl =
			new FilmProductionDetailsImpl();

		filmProductionDetailsImpl.setFilmProductionDetailsId(
			this.<Long>getColumnOriginalValue("filmProductionDetailsId"));
		filmProductionDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		filmProductionDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		filmProductionDetailsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		filmProductionDetailsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		filmProductionDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		filmProductionDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		filmProductionDetailsImpl.setProductionTitle(
			this.<String>getColumnOriginalValue("productionTitle"));
		filmProductionDetailsImpl.setTotalProductionBudget(
			this.<String>getColumnOriginalValue("totalProductionBudget"));
		filmProductionDetailsImpl.setExpenditureInJamaica(
			this.<String>getColumnOriginalValue("expenditureInJamaica"));
		filmProductionDetailsImpl.setForeignPersonnel(
			this.<String>getColumnOriginalValue("foreignPersonnel"));
		filmProductionDetailsImpl.setJamaicanPersonnel(
			this.<String>getColumnOriginalValue("jamaicanPersonnel"));
		filmProductionDetailsImpl.setProductionType(
			this.<String>getColumnOriginalValue("productionType"));
		filmProductionDetailsImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		filmProductionDetailsImpl.setFixerName(
			this.<String>getColumnOriginalValue("fixerName"));
		filmProductionDetailsImpl.setFixerMobile(
			this.<String>getColumnOriginalValue("fixerMobile"));
		filmProductionDetailsImpl.setFixerEmail(
			this.<String>getColumnOriginalValue("fixerEmail"));
		filmProductionDetailsImpl.setPreProductionDates(
			this.<Date>getColumnOriginalValue("preProductionDates"));
		filmProductionDetailsImpl.setProductionDates(
			this.<Date>getColumnOriginalValue("productionDates"));
		filmProductionDetailsImpl.setProductionStartDate(
			this.<Date>getColumnOriginalValue("productionStartDate"));
		filmProductionDetailsImpl.setProductionEndDate(
			this.<Date>getColumnOriginalValue("productionEndDate"));
		filmProductionDetailsImpl.setProposedProductionLocations(
			this.<String>getColumnOriginalValue("proposedProductionLocations"));
		filmProductionDetailsImpl.setProductionInternationalCrew(
			this.<String>getColumnOriginalValue("productionInternationalCrew"));
		filmProductionDetailsImpl.setProductionjamaicanCrew(
			this.<String>getColumnOriginalValue("productionjamaicanCrew"));
		filmProductionDetailsImpl.setProductionExternalPermit(
			this.<String>getColumnOriginalValue("productionExternalPermit"));
		filmProductionDetailsImpl.setFilmApplicationId(
			this.<Long>getColumnOriginalValue("filmApplicationId"));

		return filmProductionDetailsImpl;
	}

	@Override
	public int compareTo(FilmProductionDetails filmProductionDetails) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), filmProductionDetails.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FilmProductionDetails)) {
			return false;
		}

		FilmProductionDetails filmProductionDetails =
			(FilmProductionDetails)object;

		long primaryKey = filmProductionDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FilmProductionDetails> toCacheModel() {
		FilmProductionDetailsCacheModel filmProductionDetailsCacheModel =
			new FilmProductionDetailsCacheModel();

		filmProductionDetailsCacheModel.filmProductionDetailsId =
			getFilmProductionDetailsId();

		filmProductionDetailsCacheModel.groupId = getGroupId();

		filmProductionDetailsCacheModel.companyId = getCompanyId();

		filmProductionDetailsCacheModel.userId = getUserId();

		filmProductionDetailsCacheModel.userName = getUserName();

		String userName = filmProductionDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			filmProductionDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			filmProductionDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			filmProductionDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			filmProductionDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			filmProductionDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		filmProductionDetailsCacheModel.productionTitle = getProductionTitle();

		String productionTitle =
			filmProductionDetailsCacheModel.productionTitle;

		if ((productionTitle != null) && (productionTitle.length() == 0)) {
			filmProductionDetailsCacheModel.productionTitle = null;
		}

		filmProductionDetailsCacheModel.totalProductionBudget =
			getTotalProductionBudget();

		String totalProductionBudget =
			filmProductionDetailsCacheModel.totalProductionBudget;

		if ((totalProductionBudget != null) &&
			(totalProductionBudget.length() == 0)) {

			filmProductionDetailsCacheModel.totalProductionBudget = null;
		}

		filmProductionDetailsCacheModel.expenditureInJamaica =
			getExpenditureInJamaica();

		String expenditureInJamaica =
			filmProductionDetailsCacheModel.expenditureInJamaica;

		if ((expenditureInJamaica != null) &&
			(expenditureInJamaica.length() == 0)) {

			filmProductionDetailsCacheModel.expenditureInJamaica = null;
		}

		filmProductionDetailsCacheModel.foreignPersonnel =
			getForeignPersonnel();

		String foreignPersonnel =
			filmProductionDetailsCacheModel.foreignPersonnel;

		if ((foreignPersonnel != null) && (foreignPersonnel.length() == 0)) {
			filmProductionDetailsCacheModel.foreignPersonnel = null;
		}

		filmProductionDetailsCacheModel.jamaicanPersonnel =
			getJamaicanPersonnel();

		String jamaicanPersonnel =
			filmProductionDetailsCacheModel.jamaicanPersonnel;

		if ((jamaicanPersonnel != null) && (jamaicanPersonnel.length() == 0)) {
			filmProductionDetailsCacheModel.jamaicanPersonnel = null;
		}

		filmProductionDetailsCacheModel.productionType = getProductionType();

		String productionType = filmProductionDetailsCacheModel.productionType;

		if ((productionType != null) && (productionType.length() == 0)) {
			filmProductionDetailsCacheModel.productionType = null;
		}

		filmProductionDetailsCacheModel.companyName = getCompanyName();

		String companyName = filmProductionDetailsCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			filmProductionDetailsCacheModel.companyName = null;
		}

		filmProductionDetailsCacheModel.fixerName = getFixerName();

		String fixerName = filmProductionDetailsCacheModel.fixerName;

		if ((fixerName != null) && (fixerName.length() == 0)) {
			filmProductionDetailsCacheModel.fixerName = null;
		}

		filmProductionDetailsCacheModel.fixerMobile = getFixerMobile();

		String fixerMobile = filmProductionDetailsCacheModel.fixerMobile;

		if ((fixerMobile != null) && (fixerMobile.length() == 0)) {
			filmProductionDetailsCacheModel.fixerMobile = null;
		}

		filmProductionDetailsCacheModel.fixerEmail = getFixerEmail();

		String fixerEmail = filmProductionDetailsCacheModel.fixerEmail;

		if ((fixerEmail != null) && (fixerEmail.length() == 0)) {
			filmProductionDetailsCacheModel.fixerEmail = null;
		}

		Date preProductionDates = getPreProductionDates();

		if (preProductionDates != null) {
			filmProductionDetailsCacheModel.preProductionDates =
				preProductionDates.getTime();
		}
		else {
			filmProductionDetailsCacheModel.preProductionDates = Long.MIN_VALUE;
		}

		Date productionDates = getProductionDates();

		if (productionDates != null) {
			filmProductionDetailsCacheModel.productionDates =
				productionDates.getTime();
		}
		else {
			filmProductionDetailsCacheModel.productionDates = Long.MIN_VALUE;
		}

		Date productionStartDate = getProductionStartDate();

		if (productionStartDate != null) {
			filmProductionDetailsCacheModel.productionStartDate =
				productionStartDate.getTime();
		}
		else {
			filmProductionDetailsCacheModel.productionStartDate =
				Long.MIN_VALUE;
		}

		Date productionEndDate = getProductionEndDate();

		if (productionEndDate != null) {
			filmProductionDetailsCacheModel.productionEndDate =
				productionEndDate.getTime();
		}
		else {
			filmProductionDetailsCacheModel.productionEndDate = Long.MIN_VALUE;
		}

		filmProductionDetailsCacheModel.proposedProductionLocations =
			getProposedProductionLocations();

		String proposedProductionLocations =
			filmProductionDetailsCacheModel.proposedProductionLocations;

		if ((proposedProductionLocations != null) &&
			(proposedProductionLocations.length() == 0)) {

			filmProductionDetailsCacheModel.proposedProductionLocations = null;
		}

		filmProductionDetailsCacheModel.productionInternationalCrew =
			getProductionInternationalCrew();

		String productionInternationalCrew =
			filmProductionDetailsCacheModel.productionInternationalCrew;

		if ((productionInternationalCrew != null) &&
			(productionInternationalCrew.length() == 0)) {

			filmProductionDetailsCacheModel.productionInternationalCrew = null;
		}

		filmProductionDetailsCacheModel.productionjamaicanCrew =
			getProductionjamaicanCrew();

		String productionjamaicanCrew =
			filmProductionDetailsCacheModel.productionjamaicanCrew;

		if ((productionjamaicanCrew != null) &&
			(productionjamaicanCrew.length() == 0)) {

			filmProductionDetailsCacheModel.productionjamaicanCrew = null;
		}

		filmProductionDetailsCacheModel.productionExternalPermit =
			getProductionExternalPermit();

		String productionExternalPermit =
			filmProductionDetailsCacheModel.productionExternalPermit;

		if ((productionExternalPermit != null) &&
			(productionExternalPermit.length() == 0)) {

			filmProductionDetailsCacheModel.productionExternalPermit = null;
		}

		filmProductionDetailsCacheModel.filmApplicationId =
			getFilmApplicationId();

		return filmProductionDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FilmProductionDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FilmProductionDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmProductionDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FilmProductionDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FilmProductionDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FilmProductionDetails.class, ModelWrapper.class);

	}

	private long _filmProductionDetailsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _productionTitle;
	private String _totalProductionBudget;
	private String _expenditureInJamaica;
	private String _foreignPersonnel;
	private String _jamaicanPersonnel;
	private String _productionType;
	private String _companyName;
	private String _fixerName;
	private String _fixerMobile;
	private String _fixerEmail;
	private Date _preProductionDates;
	private Date _productionDates;
	private Date _productionStartDate;
	private Date _productionEndDate;
	private String _proposedProductionLocations;
	private String _productionInternationalCrew;
	private String _productionjamaicanCrew;
	private String _productionExternalPermit;
	private long _filmApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FilmProductionDetails, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FilmProductionDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"filmProductionDetailsId", _filmProductionDetailsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("productionTitle", _productionTitle);
		_columnOriginalValues.put(
			"totalProductionBudget", _totalProductionBudget);
		_columnOriginalValues.put(
			"expenditureInJamaica", _expenditureInJamaica);
		_columnOriginalValues.put("foreignPersonnel", _foreignPersonnel);
		_columnOriginalValues.put("jamaicanPersonnel", _jamaicanPersonnel);
		_columnOriginalValues.put("productionType", _productionType);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("fixerName", _fixerName);
		_columnOriginalValues.put("fixerMobile", _fixerMobile);
		_columnOriginalValues.put("fixerEmail", _fixerEmail);
		_columnOriginalValues.put("preProductionDates", _preProductionDates);
		_columnOriginalValues.put("productionDates", _productionDates);
		_columnOriginalValues.put("productionStartDate", _productionStartDate);
		_columnOriginalValues.put("productionEndDate", _productionEndDate);
		_columnOriginalValues.put(
			"proposedProductionLocations", _proposedProductionLocations);
		_columnOriginalValues.put(
			"productionInternationalCrew", _productionInternationalCrew);
		_columnOriginalValues.put(
			"productionjamaicanCrew", _productionjamaicanCrew);
		_columnOriginalValues.put(
			"productionExternalPermit", _productionExternalPermit);
		_columnOriginalValues.put("filmApplicationId", _filmApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("filmProductionDetailsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("productionTitle", 128L);

		columnBitmasks.put("totalProductionBudget", 256L);

		columnBitmasks.put("expenditureInJamaica", 512L);

		columnBitmasks.put("foreignPersonnel", 1024L);

		columnBitmasks.put("jamaicanPersonnel", 2048L);

		columnBitmasks.put("productionType", 4096L);

		columnBitmasks.put("companyName", 8192L);

		columnBitmasks.put("fixerName", 16384L);

		columnBitmasks.put("fixerMobile", 32768L);

		columnBitmasks.put("fixerEmail", 65536L);

		columnBitmasks.put("preProductionDates", 131072L);

		columnBitmasks.put("productionDates", 262144L);

		columnBitmasks.put("productionStartDate", 524288L);

		columnBitmasks.put("productionEndDate", 1048576L);

		columnBitmasks.put("proposedProductionLocations", 2097152L);

		columnBitmasks.put("productionInternationalCrew", 4194304L);

		columnBitmasks.put("productionjamaicanCrew", 8388608L);

		columnBitmasks.put("productionExternalPermit", 16777216L);

		columnBitmasks.put("filmApplicationId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FilmProductionDetails _escapedModel;

}