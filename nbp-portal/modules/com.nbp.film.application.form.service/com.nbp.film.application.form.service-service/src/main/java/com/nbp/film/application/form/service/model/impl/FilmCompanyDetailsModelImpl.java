/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.film.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.film.application.form.service.model.FilmCompanyDetails;
import com.nbp.film.application.form.service.model.FilmCompanyDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FilmCompanyDetails service. Represents a row in the &quot;nbp_film_company_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FilmCompanyDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilmCompanyDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FilmCompanyDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class FilmCompanyDetailsModelImpl
	extends BaseModelImpl<FilmCompanyDetails>
	implements FilmCompanyDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a film company details model instance should use the <code>FilmCompanyDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_film_company_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"filmCompanyDetailsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"companyName", Types.VARCHAR},
		{"address", Types.VARCHAR}, {"countryOrigin", Types.VARCHAR},
		{"telephoneNumber", Types.VARCHAR}, {"mobile", Types.VARCHAR},
		{"contactPerson", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"position", Types.VARCHAR}, {"filmApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("filmCompanyDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countryOrigin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPerson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filmApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_film_company_details (filmCompanyDetailsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyName VARCHAR(75) null,address VARCHAR(500) null,countryOrigin VARCHAR(75) null,telephoneNumber VARCHAR(75) null,mobile VARCHAR(75) null,contactPerson VARCHAR(75) null,email VARCHAR(75) null,position VARCHAR(75) null,filmApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_film_company_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY filmCompanyDetails.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_film_company_details.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FilmCompanyDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _filmCompanyDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFilmCompanyDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _filmCompanyDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FilmCompanyDetails.class;
	}

	@Override
	public String getModelClassName() {
		return FilmCompanyDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FilmCompanyDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FilmCompanyDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmCompanyDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FilmCompanyDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FilmCompanyDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FilmCompanyDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FilmCompanyDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FilmCompanyDetails, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FilmCompanyDetails, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FilmCompanyDetails, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FilmCompanyDetails, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FilmCompanyDetails, Object>>();

			attributeGetterFunctions.put(
				"filmCompanyDetailsId",
				FilmCompanyDetails::getFilmCompanyDetailsId);
			attributeGetterFunctions.put(
				"groupId", FilmCompanyDetails::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FilmCompanyDetails::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FilmCompanyDetails::getUserId);
			attributeGetterFunctions.put(
				"userName", FilmCompanyDetails::getUserName);
			attributeGetterFunctions.put(
				"createDate", FilmCompanyDetails::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FilmCompanyDetails::getModifiedDate);
			attributeGetterFunctions.put(
				"companyName", FilmCompanyDetails::getCompanyName);
			attributeGetterFunctions.put(
				"address", FilmCompanyDetails::getAddress);
			attributeGetterFunctions.put(
				"countryOrigin", FilmCompanyDetails::getCountryOrigin);
			attributeGetterFunctions.put(
				"telephoneNumber", FilmCompanyDetails::getTelephoneNumber);
			attributeGetterFunctions.put(
				"mobile", FilmCompanyDetails::getMobile);
			attributeGetterFunctions.put(
				"contactPerson", FilmCompanyDetails::getContactPerson);
			attributeGetterFunctions.put("email", FilmCompanyDetails::getEmail);
			attributeGetterFunctions.put(
				"position", FilmCompanyDetails::getPosition);
			attributeGetterFunctions.put(
				"filmApplicationId", FilmCompanyDetails::getFilmApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<FilmCompanyDetails, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FilmCompanyDetails, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FilmCompanyDetails, ?>>();

			attributeSetterBiConsumers.put(
				"filmCompanyDetailsId",
				(BiConsumer<FilmCompanyDetails, Long>)
					FilmCompanyDetails::setFilmCompanyDetailsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FilmCompanyDetails, Long>)
					FilmCompanyDetails::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FilmCompanyDetails, Long>)
					FilmCompanyDetails::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FilmCompanyDetails, Long>)
					FilmCompanyDetails::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FilmCompanyDetails, Date>)
					FilmCompanyDetails::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FilmCompanyDetails, Date>)
					FilmCompanyDetails::setModifiedDate);
			attributeSetterBiConsumers.put(
				"companyName",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setCompanyName);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setAddress);
			attributeSetterBiConsumers.put(
				"countryOrigin",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setCountryOrigin);
			attributeSetterBiConsumers.put(
				"telephoneNumber",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setTelephoneNumber);
			attributeSetterBiConsumers.put(
				"mobile",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setMobile);
			attributeSetterBiConsumers.put(
				"contactPerson",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setContactPerson);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setEmail);
			attributeSetterBiConsumers.put(
				"position",
				(BiConsumer<FilmCompanyDetails, String>)
					FilmCompanyDetails::setPosition);
			attributeSetterBiConsumers.put(
				"filmApplicationId",
				(BiConsumer<FilmCompanyDetails, Long>)
					FilmCompanyDetails::setFilmApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFilmCompanyDetailsId() {
		return _filmCompanyDetailsId;
	}

	@Override
	public void setFilmCompanyDetailsId(long filmCompanyDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmCompanyDetailsId = filmCompanyDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getCountryOrigin() {
		if (_countryOrigin == null) {
			return "";
		}
		else {
			return _countryOrigin;
		}
	}

	@Override
	public void setCountryOrigin(String countryOrigin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countryOrigin = countryOrigin;
	}

	@JSON
	@Override
	public String getTelephoneNumber() {
		if (_telephoneNumber == null) {
			return "";
		}
		else {
			return _telephoneNumber;
		}
	}

	@Override
	public void setTelephoneNumber(String telephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneNumber = telephoneNumber;
	}

	@JSON
	@Override
	public String getMobile() {
		if (_mobile == null) {
			return "";
		}
		else {
			return _mobile;
		}
	}

	@Override
	public void setMobile(String mobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobile = mobile;
	}

	@JSON
	@Override
	public String getContactPerson() {
		if (_contactPerson == null) {
			return "";
		}
		else {
			return _contactPerson;
		}
	}

	@Override
	public void setContactPerson(String contactPerson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactPerson = contactPerson;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getPosition() {
		if (_position == null) {
			return "";
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_position = position;
	}

	@JSON
	@Override
	public long getFilmApplicationId() {
		return _filmApplicationId;
	}

	@Override
	public void setFilmApplicationId(long filmApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmApplicationId = filmApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFilmApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("filmApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FilmCompanyDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FilmCompanyDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FilmCompanyDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FilmCompanyDetailsImpl filmCompanyDetailsImpl =
			new FilmCompanyDetailsImpl();

		filmCompanyDetailsImpl.setFilmCompanyDetailsId(
			getFilmCompanyDetailsId());
		filmCompanyDetailsImpl.setGroupId(getGroupId());
		filmCompanyDetailsImpl.setCompanyId(getCompanyId());
		filmCompanyDetailsImpl.setUserId(getUserId());
		filmCompanyDetailsImpl.setUserName(getUserName());
		filmCompanyDetailsImpl.setCreateDate(getCreateDate());
		filmCompanyDetailsImpl.setModifiedDate(getModifiedDate());
		filmCompanyDetailsImpl.setCompanyName(getCompanyName());
		filmCompanyDetailsImpl.setAddress(getAddress());
		filmCompanyDetailsImpl.setCountryOrigin(getCountryOrigin());
		filmCompanyDetailsImpl.setTelephoneNumber(getTelephoneNumber());
		filmCompanyDetailsImpl.setMobile(getMobile());
		filmCompanyDetailsImpl.setContactPerson(getContactPerson());
		filmCompanyDetailsImpl.setEmail(getEmail());
		filmCompanyDetailsImpl.setPosition(getPosition());
		filmCompanyDetailsImpl.setFilmApplicationId(getFilmApplicationId());

		filmCompanyDetailsImpl.resetOriginalValues();

		return filmCompanyDetailsImpl;
	}

	@Override
	public FilmCompanyDetails cloneWithOriginalValues() {
		FilmCompanyDetailsImpl filmCompanyDetailsImpl =
			new FilmCompanyDetailsImpl();

		filmCompanyDetailsImpl.setFilmCompanyDetailsId(
			this.<Long>getColumnOriginalValue("filmCompanyDetailsId"));
		filmCompanyDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		filmCompanyDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		filmCompanyDetailsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		filmCompanyDetailsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		filmCompanyDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		filmCompanyDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		filmCompanyDetailsImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		filmCompanyDetailsImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		filmCompanyDetailsImpl.setCountryOrigin(
			this.<String>getColumnOriginalValue("countryOrigin"));
		filmCompanyDetailsImpl.setTelephoneNumber(
			this.<String>getColumnOriginalValue("telephoneNumber"));
		filmCompanyDetailsImpl.setMobile(
			this.<String>getColumnOriginalValue("mobile"));
		filmCompanyDetailsImpl.setContactPerson(
			this.<String>getColumnOriginalValue("contactPerson"));
		filmCompanyDetailsImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		filmCompanyDetailsImpl.setPosition(
			this.<String>getColumnOriginalValue("position"));
		filmCompanyDetailsImpl.setFilmApplicationId(
			this.<Long>getColumnOriginalValue("filmApplicationId"));

		return filmCompanyDetailsImpl;
	}

	@Override
	public int compareTo(FilmCompanyDetails filmCompanyDetails) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), filmCompanyDetails.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FilmCompanyDetails)) {
			return false;
		}

		FilmCompanyDetails filmCompanyDetails = (FilmCompanyDetails)object;

		long primaryKey = filmCompanyDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FilmCompanyDetails> toCacheModel() {
		FilmCompanyDetailsCacheModel filmCompanyDetailsCacheModel =
			new FilmCompanyDetailsCacheModel();

		filmCompanyDetailsCacheModel.filmCompanyDetailsId =
			getFilmCompanyDetailsId();

		filmCompanyDetailsCacheModel.groupId = getGroupId();

		filmCompanyDetailsCacheModel.companyId = getCompanyId();

		filmCompanyDetailsCacheModel.userId = getUserId();

		filmCompanyDetailsCacheModel.userName = getUserName();

		String userName = filmCompanyDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			filmCompanyDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			filmCompanyDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			filmCompanyDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			filmCompanyDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			filmCompanyDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		filmCompanyDetailsCacheModel.companyName = getCompanyName();

		String companyName = filmCompanyDetailsCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			filmCompanyDetailsCacheModel.companyName = null;
		}

		filmCompanyDetailsCacheModel.address = getAddress();

		String address = filmCompanyDetailsCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			filmCompanyDetailsCacheModel.address = null;
		}

		filmCompanyDetailsCacheModel.countryOrigin = getCountryOrigin();

		String countryOrigin = filmCompanyDetailsCacheModel.countryOrigin;

		if ((countryOrigin != null) && (countryOrigin.length() == 0)) {
			filmCompanyDetailsCacheModel.countryOrigin = null;
		}

		filmCompanyDetailsCacheModel.telephoneNumber = getTelephoneNumber();

		String telephoneNumber = filmCompanyDetailsCacheModel.telephoneNumber;

		if ((telephoneNumber != null) && (telephoneNumber.length() == 0)) {
			filmCompanyDetailsCacheModel.telephoneNumber = null;
		}

		filmCompanyDetailsCacheModel.mobile = getMobile();

		String mobile = filmCompanyDetailsCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			filmCompanyDetailsCacheModel.mobile = null;
		}

		filmCompanyDetailsCacheModel.contactPerson = getContactPerson();

		String contactPerson = filmCompanyDetailsCacheModel.contactPerson;

		if ((contactPerson != null) && (contactPerson.length() == 0)) {
			filmCompanyDetailsCacheModel.contactPerson = null;
		}

		filmCompanyDetailsCacheModel.email = getEmail();

		String email = filmCompanyDetailsCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			filmCompanyDetailsCacheModel.email = null;
		}

		filmCompanyDetailsCacheModel.position = getPosition();

		String position = filmCompanyDetailsCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			filmCompanyDetailsCacheModel.position = null;
		}

		filmCompanyDetailsCacheModel.filmApplicationId = getFilmApplicationId();

		return filmCompanyDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FilmCompanyDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FilmCompanyDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmCompanyDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FilmCompanyDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FilmCompanyDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FilmCompanyDetails.class, ModelWrapper.class);

	}

	private long _filmCompanyDetailsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _companyName;
	private String _address;
	private String _countryOrigin;
	private String _telephoneNumber;
	private String _mobile;
	private String _contactPerson;
	private String _email;
	private String _position;
	private long _filmApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FilmCompanyDetails, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FilmCompanyDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"filmCompanyDetailsId", _filmCompanyDetailsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("countryOrigin", _countryOrigin);
		_columnOriginalValues.put("telephoneNumber", _telephoneNumber);
		_columnOriginalValues.put("mobile", _mobile);
		_columnOriginalValues.put("contactPerson", _contactPerson);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("position", _position);
		_columnOriginalValues.put("filmApplicationId", _filmApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("filmCompanyDetailsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("companyName", 128L);

		columnBitmasks.put("address", 256L);

		columnBitmasks.put("countryOrigin", 512L);

		columnBitmasks.put("telephoneNumber", 1024L);

		columnBitmasks.put("mobile", 2048L);

		columnBitmasks.put("contactPerson", 4096L);

		columnBitmasks.put("email", 8192L);

		columnBitmasks.put("position", 16384L);

		columnBitmasks.put("filmApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FilmCompanyDetails _escapedModel;

}