/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.film.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.film.application.form.service.model.FilmOtherDetails;
import com.nbp.film.application.form.service.model.FilmOtherDetailsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FilmOtherDetails service. Represents a row in the &quot;nbp_film_other_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FilmOtherDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilmOtherDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FilmOtherDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class FilmOtherDetailsModelImpl
	extends BaseModelImpl<FilmOtherDetails> implements FilmOtherDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a film other details model instance should use the <code>FilmOtherDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_film_other_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"filmOtherDetailsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"additionalPermits", Types.VARCHAR},
		{"additionalOtherPermits", Types.VARCHAR}, {"insurance", Types.VARCHAR},
		{"copyOfInsurance", Types.VARCHAR},
		{"temporaryImportEquipment", Types.VARCHAR},
		{"personnelTravellingEquipment", Types.VARCHAR},
		{"portOfEntry", Types.VARCHAR}, {"arrivalDate", Types.TIMESTAMP},
		{"departureDate", Types.TIMESTAMP}, {"flightDetails", Types.VARCHAR},
		{"shippingCompany", Types.VARCHAR}, {"shippingVesselNo", Types.VARCHAR},
		{"customsBroker", Types.VARCHAR}, {"brokerEmail", Types.VARCHAR},
		{"brokerMobile", Types.VARCHAR},
		{"typeOfEquipmentJamaica", Types.VARCHAR},
		{"rentalArrangedThrough", Types.VARCHAR},
		{"filmApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("filmOtherDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("additionalPermits", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalOtherPermits", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insurance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copyOfInsurance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("temporaryImportEquipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelTravellingEquipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portOfEntry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arrivalDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("departureDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("flightDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingVesselNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customsBroker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brokerEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brokerMobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfEquipmentJamaica", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rentalArrangedThrough", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filmApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_film_other_details (filmOtherDetailsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,additionalPermits VARCHAR(500) null,additionalOtherPermits VARCHAR(75) null,insurance VARCHAR(75) null,copyOfInsurance VARCHAR(75) null,temporaryImportEquipment VARCHAR(75) null,personnelTravellingEquipment VARCHAR(75) null,portOfEntry VARCHAR(500) null,arrivalDate DATE null,departureDate DATE null,flightDetails VARCHAR(75) null,shippingCompany VARCHAR(75) null,shippingVesselNo VARCHAR(75) null,customsBroker VARCHAR(75) null,brokerEmail VARCHAR(75) null,brokerMobile VARCHAR(75) null,typeOfEquipmentJamaica VARCHAR(75) null,rentalArrangedThrough VARCHAR(75) null,filmApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_film_other_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY filmOtherDetails.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_film_other_details.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FilmOtherDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _filmOtherDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFilmOtherDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _filmOtherDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FilmOtherDetails.class;
	}

	@Override
	public String getModelClassName() {
		return FilmOtherDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FilmOtherDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FilmOtherDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmOtherDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FilmOtherDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FilmOtherDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FilmOtherDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FilmOtherDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FilmOtherDetails, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FilmOtherDetails, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FilmOtherDetails, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FilmOtherDetails, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FilmOtherDetails, Object>>();

			attributeGetterFunctions.put(
				"filmOtherDetailsId", FilmOtherDetails::getFilmOtherDetailsId);
			attributeGetterFunctions.put(
				"groupId", FilmOtherDetails::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FilmOtherDetails::getCompanyId);
			attributeGetterFunctions.put("userId", FilmOtherDetails::getUserId);
			attributeGetterFunctions.put(
				"userName", FilmOtherDetails::getUserName);
			attributeGetterFunctions.put(
				"createDate", FilmOtherDetails::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FilmOtherDetails::getModifiedDate);
			attributeGetterFunctions.put(
				"additionalPermits", FilmOtherDetails::getAdditionalPermits);
			attributeGetterFunctions.put(
				"additionalOtherPermits",
				FilmOtherDetails::getAdditionalOtherPermits);
			attributeGetterFunctions.put(
				"insurance", FilmOtherDetails::getInsurance);
			attributeGetterFunctions.put(
				"copyOfInsurance", FilmOtherDetails::getCopyOfInsurance);
			attributeGetterFunctions.put(
				"temporaryImportEquipment",
				FilmOtherDetails::getTemporaryImportEquipment);
			attributeGetterFunctions.put(
				"personnelTravellingEquipment",
				FilmOtherDetails::getPersonnelTravellingEquipment);
			attributeGetterFunctions.put(
				"portOfEntry", FilmOtherDetails::getPortOfEntry);
			attributeGetterFunctions.put(
				"arrivalDate", FilmOtherDetails::getArrivalDate);
			attributeGetterFunctions.put(
				"departureDate", FilmOtherDetails::getDepartureDate);
			attributeGetterFunctions.put(
				"flightDetails", FilmOtherDetails::getFlightDetails);
			attributeGetterFunctions.put(
				"shippingCompany", FilmOtherDetails::getShippingCompany);
			attributeGetterFunctions.put(
				"shippingVesselNo", FilmOtherDetails::getShippingVesselNo);
			attributeGetterFunctions.put(
				"customsBroker", FilmOtherDetails::getCustomsBroker);
			attributeGetterFunctions.put(
				"brokerEmail", FilmOtherDetails::getBrokerEmail);
			attributeGetterFunctions.put(
				"brokerMobile", FilmOtherDetails::getBrokerMobile);
			attributeGetterFunctions.put(
				"typeOfEquipmentJamaica",
				FilmOtherDetails::getTypeOfEquipmentJamaica);
			attributeGetterFunctions.put(
				"rentalArrangedThrough",
				FilmOtherDetails::getRentalArrangedThrough);
			attributeGetterFunctions.put(
				"filmApplicationId", FilmOtherDetails::getFilmApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<FilmOtherDetails, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FilmOtherDetails, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FilmOtherDetails, ?>>();

			attributeSetterBiConsumers.put(
				"filmOtherDetailsId",
				(BiConsumer<FilmOtherDetails, Long>)
					FilmOtherDetails::setFilmOtherDetailsId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FilmOtherDetails, Long>)
					FilmOtherDetails::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FilmOtherDetails, Long>)
					FilmOtherDetails::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FilmOtherDetails, Long>)
					FilmOtherDetails::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FilmOtherDetails, Date>)
					FilmOtherDetails::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FilmOtherDetails, Date>)
					FilmOtherDetails::setModifiedDate);
			attributeSetterBiConsumers.put(
				"additionalPermits",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setAdditionalPermits);
			attributeSetterBiConsumers.put(
				"additionalOtherPermits",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setAdditionalOtherPermits);
			attributeSetterBiConsumers.put(
				"insurance",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setInsurance);
			attributeSetterBiConsumers.put(
				"copyOfInsurance",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setCopyOfInsurance);
			attributeSetterBiConsumers.put(
				"temporaryImportEquipment",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setTemporaryImportEquipment);
			attributeSetterBiConsumers.put(
				"personnelTravellingEquipment",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setPersonnelTravellingEquipment);
			attributeSetterBiConsumers.put(
				"portOfEntry",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setPortOfEntry);
			attributeSetterBiConsumers.put(
				"arrivalDate",
				(BiConsumer<FilmOtherDetails, Date>)
					FilmOtherDetails::setArrivalDate);
			attributeSetterBiConsumers.put(
				"departureDate",
				(BiConsumer<FilmOtherDetails, Date>)
					FilmOtherDetails::setDepartureDate);
			attributeSetterBiConsumers.put(
				"flightDetails",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setFlightDetails);
			attributeSetterBiConsumers.put(
				"shippingCompany",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setShippingCompany);
			attributeSetterBiConsumers.put(
				"shippingVesselNo",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setShippingVesselNo);
			attributeSetterBiConsumers.put(
				"customsBroker",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setCustomsBroker);
			attributeSetterBiConsumers.put(
				"brokerEmail",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setBrokerEmail);
			attributeSetterBiConsumers.put(
				"brokerMobile",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setBrokerMobile);
			attributeSetterBiConsumers.put(
				"typeOfEquipmentJamaica",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setTypeOfEquipmentJamaica);
			attributeSetterBiConsumers.put(
				"rentalArrangedThrough",
				(BiConsumer<FilmOtherDetails, String>)
					FilmOtherDetails::setRentalArrangedThrough);
			attributeSetterBiConsumers.put(
				"filmApplicationId",
				(BiConsumer<FilmOtherDetails, Long>)
					FilmOtherDetails::setFilmApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFilmOtherDetailsId() {
		return _filmOtherDetailsId;
	}

	@Override
	public void setFilmOtherDetailsId(long filmOtherDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmOtherDetailsId = filmOtherDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAdditionalPermits() {
		if (_additionalPermits == null) {
			return "";
		}
		else {
			return _additionalPermits;
		}
	}

	@Override
	public void setAdditionalPermits(String additionalPermits) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_additionalPermits = additionalPermits;
	}

	@JSON
	@Override
	public String getAdditionalOtherPermits() {
		if (_additionalOtherPermits == null) {
			return "";
		}
		else {
			return _additionalOtherPermits;
		}
	}

	@Override
	public void setAdditionalOtherPermits(String additionalOtherPermits) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_additionalOtherPermits = additionalOtherPermits;
	}

	@JSON
	@Override
	public String getInsurance() {
		if (_insurance == null) {
			return "";
		}
		else {
			return _insurance;
		}
	}

	@Override
	public void setInsurance(String insurance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insurance = insurance;
	}

	@JSON
	@Override
	public String getCopyOfInsurance() {
		if (_copyOfInsurance == null) {
			return "";
		}
		else {
			return _copyOfInsurance;
		}
	}

	@Override
	public void setCopyOfInsurance(String copyOfInsurance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_copyOfInsurance = copyOfInsurance;
	}

	@JSON
	@Override
	public String getTemporaryImportEquipment() {
		if (_temporaryImportEquipment == null) {
			return "";
		}
		else {
			return _temporaryImportEquipment;
		}
	}

	@Override
	public void setTemporaryImportEquipment(String temporaryImportEquipment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_temporaryImportEquipment = temporaryImportEquipment;
	}

	@JSON
	@Override
	public String getPersonnelTravellingEquipment() {
		if (_personnelTravellingEquipment == null) {
			return "";
		}
		else {
			return _personnelTravellingEquipment;
		}
	}

	@Override
	public void setPersonnelTravellingEquipment(
		String personnelTravellingEquipment) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelTravellingEquipment = personnelTravellingEquipment;
	}

	@JSON
	@Override
	public String getPortOfEntry() {
		if (_portOfEntry == null) {
			return "";
		}
		else {
			return _portOfEntry;
		}
	}

	@Override
	public void setPortOfEntry(String portOfEntry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_portOfEntry = portOfEntry;
	}

	@JSON
	@Override
	public Date getArrivalDate() {
		return _arrivalDate;
	}

	@Override
	public void setArrivalDate(Date arrivalDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_arrivalDate = arrivalDate;
	}

	@JSON
	@Override
	public Date getDepartureDate() {
		return _departureDate;
	}

	@Override
	public void setDepartureDate(Date departureDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_departureDate = departureDate;
	}

	@JSON
	@Override
	public String getFlightDetails() {
		if (_flightDetails == null) {
			return "";
		}
		else {
			return _flightDetails;
		}
	}

	@Override
	public void setFlightDetails(String flightDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_flightDetails = flightDetails;
	}

	@JSON
	@Override
	public String getShippingCompany() {
		if (_shippingCompany == null) {
			return "";
		}
		else {
			return _shippingCompany;
		}
	}

	@Override
	public void setShippingCompany(String shippingCompany) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shippingCompany = shippingCompany;
	}

	@JSON
	@Override
	public String getShippingVesselNo() {
		if (_shippingVesselNo == null) {
			return "";
		}
		else {
			return _shippingVesselNo;
		}
	}

	@Override
	public void setShippingVesselNo(String shippingVesselNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shippingVesselNo = shippingVesselNo;
	}

	@JSON
	@Override
	public String getCustomsBroker() {
		if (_customsBroker == null) {
			return "";
		}
		else {
			return _customsBroker;
		}
	}

	@Override
	public void setCustomsBroker(String customsBroker) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customsBroker = customsBroker;
	}

	@JSON
	@Override
	public String getBrokerEmail() {
		if (_brokerEmail == null) {
			return "";
		}
		else {
			return _brokerEmail;
		}
	}

	@Override
	public void setBrokerEmail(String brokerEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brokerEmail = brokerEmail;
	}

	@JSON
	@Override
	public String getBrokerMobile() {
		if (_brokerMobile == null) {
			return "";
		}
		else {
			return _brokerMobile;
		}
	}

	@Override
	public void setBrokerMobile(String brokerMobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brokerMobile = brokerMobile;
	}

	@JSON
	@Override
	public String getTypeOfEquipmentJamaica() {
		if (_typeOfEquipmentJamaica == null) {
			return "";
		}
		else {
			return _typeOfEquipmentJamaica;
		}
	}

	@Override
	public void setTypeOfEquipmentJamaica(String typeOfEquipmentJamaica) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfEquipmentJamaica = typeOfEquipmentJamaica;
	}

	@JSON
	@Override
	public String getRentalArrangedThrough() {
		if (_rentalArrangedThrough == null) {
			return "";
		}
		else {
			return _rentalArrangedThrough;
		}
	}

	@Override
	public void setRentalArrangedThrough(String rentalArrangedThrough) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rentalArrangedThrough = rentalArrangedThrough;
	}

	@JSON
	@Override
	public long getFilmApplicationId() {
		return _filmApplicationId;
	}

	@Override
	public void setFilmApplicationId(long filmApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmApplicationId = filmApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFilmApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("filmApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FilmOtherDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FilmOtherDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FilmOtherDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FilmOtherDetailsImpl filmOtherDetailsImpl = new FilmOtherDetailsImpl();

		filmOtherDetailsImpl.setFilmOtherDetailsId(getFilmOtherDetailsId());
		filmOtherDetailsImpl.setGroupId(getGroupId());
		filmOtherDetailsImpl.setCompanyId(getCompanyId());
		filmOtherDetailsImpl.setUserId(getUserId());
		filmOtherDetailsImpl.setUserName(getUserName());
		filmOtherDetailsImpl.setCreateDate(getCreateDate());
		filmOtherDetailsImpl.setModifiedDate(getModifiedDate());
		filmOtherDetailsImpl.setAdditionalPermits(getAdditionalPermits());
		filmOtherDetailsImpl.setAdditionalOtherPermits(
			getAdditionalOtherPermits());
		filmOtherDetailsImpl.setInsurance(getInsurance());
		filmOtherDetailsImpl.setCopyOfInsurance(getCopyOfInsurance());
		filmOtherDetailsImpl.setTemporaryImportEquipment(
			getTemporaryImportEquipment());
		filmOtherDetailsImpl.setPersonnelTravellingEquipment(
			getPersonnelTravellingEquipment());
		filmOtherDetailsImpl.setPortOfEntry(getPortOfEntry());
		filmOtherDetailsImpl.setArrivalDate(getArrivalDate());
		filmOtherDetailsImpl.setDepartureDate(getDepartureDate());
		filmOtherDetailsImpl.setFlightDetails(getFlightDetails());
		filmOtherDetailsImpl.setShippingCompany(getShippingCompany());
		filmOtherDetailsImpl.setShippingVesselNo(getShippingVesselNo());
		filmOtherDetailsImpl.setCustomsBroker(getCustomsBroker());
		filmOtherDetailsImpl.setBrokerEmail(getBrokerEmail());
		filmOtherDetailsImpl.setBrokerMobile(getBrokerMobile());
		filmOtherDetailsImpl.setTypeOfEquipmentJamaica(
			getTypeOfEquipmentJamaica());
		filmOtherDetailsImpl.setRentalArrangedThrough(
			getRentalArrangedThrough());
		filmOtherDetailsImpl.setFilmApplicationId(getFilmApplicationId());

		filmOtherDetailsImpl.resetOriginalValues();

		return filmOtherDetailsImpl;
	}

	@Override
	public FilmOtherDetails cloneWithOriginalValues() {
		FilmOtherDetailsImpl filmOtherDetailsImpl = new FilmOtherDetailsImpl();

		filmOtherDetailsImpl.setFilmOtherDetailsId(
			this.<Long>getColumnOriginalValue("filmOtherDetailsId"));
		filmOtherDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		filmOtherDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		filmOtherDetailsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		filmOtherDetailsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		filmOtherDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		filmOtherDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		filmOtherDetailsImpl.setAdditionalPermits(
			this.<String>getColumnOriginalValue("additionalPermits"));
		filmOtherDetailsImpl.setAdditionalOtherPermits(
			this.<String>getColumnOriginalValue("additionalOtherPermits"));
		filmOtherDetailsImpl.setInsurance(
			this.<String>getColumnOriginalValue("insurance"));
		filmOtherDetailsImpl.setCopyOfInsurance(
			this.<String>getColumnOriginalValue("copyOfInsurance"));
		filmOtherDetailsImpl.setTemporaryImportEquipment(
			this.<String>getColumnOriginalValue("temporaryImportEquipment"));
		filmOtherDetailsImpl.setPersonnelTravellingEquipment(
			this.<String>getColumnOriginalValue(
				"personnelTravellingEquipment"));
		filmOtherDetailsImpl.setPortOfEntry(
			this.<String>getColumnOriginalValue("portOfEntry"));
		filmOtherDetailsImpl.setArrivalDate(
			this.<Date>getColumnOriginalValue("arrivalDate"));
		filmOtherDetailsImpl.setDepartureDate(
			this.<Date>getColumnOriginalValue("departureDate"));
		filmOtherDetailsImpl.setFlightDetails(
			this.<String>getColumnOriginalValue("flightDetails"));
		filmOtherDetailsImpl.setShippingCompany(
			this.<String>getColumnOriginalValue("shippingCompany"));
		filmOtherDetailsImpl.setShippingVesselNo(
			this.<String>getColumnOriginalValue("shippingVesselNo"));
		filmOtherDetailsImpl.setCustomsBroker(
			this.<String>getColumnOriginalValue("customsBroker"));
		filmOtherDetailsImpl.setBrokerEmail(
			this.<String>getColumnOriginalValue("brokerEmail"));
		filmOtherDetailsImpl.setBrokerMobile(
			this.<String>getColumnOriginalValue("brokerMobile"));
		filmOtherDetailsImpl.setTypeOfEquipmentJamaica(
			this.<String>getColumnOriginalValue("typeOfEquipmentJamaica"));
		filmOtherDetailsImpl.setRentalArrangedThrough(
			this.<String>getColumnOriginalValue("rentalArrangedThrough"));
		filmOtherDetailsImpl.setFilmApplicationId(
			this.<Long>getColumnOriginalValue("filmApplicationId"));

		return filmOtherDetailsImpl;
	}

	@Override
	public int compareTo(FilmOtherDetails filmOtherDetails) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), filmOtherDetails.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FilmOtherDetails)) {
			return false;
		}

		FilmOtherDetails filmOtherDetails = (FilmOtherDetails)object;

		long primaryKey = filmOtherDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FilmOtherDetails> toCacheModel() {
		FilmOtherDetailsCacheModel filmOtherDetailsCacheModel =
			new FilmOtherDetailsCacheModel();

		filmOtherDetailsCacheModel.filmOtherDetailsId = getFilmOtherDetailsId();

		filmOtherDetailsCacheModel.groupId = getGroupId();

		filmOtherDetailsCacheModel.companyId = getCompanyId();

		filmOtherDetailsCacheModel.userId = getUserId();

		filmOtherDetailsCacheModel.userName = getUserName();

		String userName = filmOtherDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			filmOtherDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			filmOtherDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			filmOtherDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			filmOtherDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			filmOtherDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		filmOtherDetailsCacheModel.additionalPermits = getAdditionalPermits();

		String additionalPermits = filmOtherDetailsCacheModel.additionalPermits;

		if ((additionalPermits != null) && (additionalPermits.length() == 0)) {
			filmOtherDetailsCacheModel.additionalPermits = null;
		}

		filmOtherDetailsCacheModel.additionalOtherPermits =
			getAdditionalOtherPermits();

		String additionalOtherPermits =
			filmOtherDetailsCacheModel.additionalOtherPermits;

		if ((additionalOtherPermits != null) &&
			(additionalOtherPermits.length() == 0)) {

			filmOtherDetailsCacheModel.additionalOtherPermits = null;
		}

		filmOtherDetailsCacheModel.insurance = getInsurance();

		String insurance = filmOtherDetailsCacheModel.insurance;

		if ((insurance != null) && (insurance.length() == 0)) {
			filmOtherDetailsCacheModel.insurance = null;
		}

		filmOtherDetailsCacheModel.copyOfInsurance = getCopyOfInsurance();

		String copyOfInsurance = filmOtherDetailsCacheModel.copyOfInsurance;

		if ((copyOfInsurance != null) && (copyOfInsurance.length() == 0)) {
			filmOtherDetailsCacheModel.copyOfInsurance = null;
		}

		filmOtherDetailsCacheModel.temporaryImportEquipment =
			getTemporaryImportEquipment();

		String temporaryImportEquipment =
			filmOtherDetailsCacheModel.temporaryImportEquipment;

		if ((temporaryImportEquipment != null) &&
			(temporaryImportEquipment.length() == 0)) {

			filmOtherDetailsCacheModel.temporaryImportEquipment = null;
		}

		filmOtherDetailsCacheModel.personnelTravellingEquipment =
			getPersonnelTravellingEquipment();

		String personnelTravellingEquipment =
			filmOtherDetailsCacheModel.personnelTravellingEquipment;

		if ((personnelTravellingEquipment != null) &&
			(personnelTravellingEquipment.length() == 0)) {

			filmOtherDetailsCacheModel.personnelTravellingEquipment = null;
		}

		filmOtherDetailsCacheModel.portOfEntry = getPortOfEntry();

		String portOfEntry = filmOtherDetailsCacheModel.portOfEntry;

		if ((portOfEntry != null) && (portOfEntry.length() == 0)) {
			filmOtherDetailsCacheModel.portOfEntry = null;
		}

		Date arrivalDate = getArrivalDate();

		if (arrivalDate != null) {
			filmOtherDetailsCacheModel.arrivalDate = arrivalDate.getTime();
		}
		else {
			filmOtherDetailsCacheModel.arrivalDate = Long.MIN_VALUE;
		}

		Date departureDate = getDepartureDate();

		if (departureDate != null) {
			filmOtherDetailsCacheModel.departureDate = departureDate.getTime();
		}
		else {
			filmOtherDetailsCacheModel.departureDate = Long.MIN_VALUE;
		}

		filmOtherDetailsCacheModel.flightDetails = getFlightDetails();

		String flightDetails = filmOtherDetailsCacheModel.flightDetails;

		if ((flightDetails != null) && (flightDetails.length() == 0)) {
			filmOtherDetailsCacheModel.flightDetails = null;
		}

		filmOtherDetailsCacheModel.shippingCompany = getShippingCompany();

		String shippingCompany = filmOtherDetailsCacheModel.shippingCompany;

		if ((shippingCompany != null) && (shippingCompany.length() == 0)) {
			filmOtherDetailsCacheModel.shippingCompany = null;
		}

		filmOtherDetailsCacheModel.shippingVesselNo = getShippingVesselNo();

		String shippingVesselNo = filmOtherDetailsCacheModel.shippingVesselNo;

		if ((shippingVesselNo != null) && (shippingVesselNo.length() == 0)) {
			filmOtherDetailsCacheModel.shippingVesselNo = null;
		}

		filmOtherDetailsCacheModel.customsBroker = getCustomsBroker();

		String customsBroker = filmOtherDetailsCacheModel.customsBroker;

		if ((customsBroker != null) && (customsBroker.length() == 0)) {
			filmOtherDetailsCacheModel.customsBroker = null;
		}

		filmOtherDetailsCacheModel.brokerEmail = getBrokerEmail();

		String brokerEmail = filmOtherDetailsCacheModel.brokerEmail;

		if ((brokerEmail != null) && (brokerEmail.length() == 0)) {
			filmOtherDetailsCacheModel.brokerEmail = null;
		}

		filmOtherDetailsCacheModel.brokerMobile = getBrokerMobile();

		String brokerMobile = filmOtherDetailsCacheModel.brokerMobile;

		if ((brokerMobile != null) && (brokerMobile.length() == 0)) {
			filmOtherDetailsCacheModel.brokerMobile = null;
		}

		filmOtherDetailsCacheModel.typeOfEquipmentJamaica =
			getTypeOfEquipmentJamaica();

		String typeOfEquipmentJamaica =
			filmOtherDetailsCacheModel.typeOfEquipmentJamaica;

		if ((typeOfEquipmentJamaica != null) &&
			(typeOfEquipmentJamaica.length() == 0)) {

			filmOtherDetailsCacheModel.typeOfEquipmentJamaica = null;
		}

		filmOtherDetailsCacheModel.rentalArrangedThrough =
			getRentalArrangedThrough();

		String rentalArrangedThrough =
			filmOtherDetailsCacheModel.rentalArrangedThrough;

		if ((rentalArrangedThrough != null) &&
			(rentalArrangedThrough.length() == 0)) {

			filmOtherDetailsCacheModel.rentalArrangedThrough = null;
		}

		filmOtherDetailsCacheModel.filmApplicationId = getFilmApplicationId();

		return filmOtherDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FilmOtherDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FilmOtherDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmOtherDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FilmOtherDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FilmOtherDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FilmOtherDetails.class, ModelWrapper.class);

	}

	private long _filmOtherDetailsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _additionalPermits;
	private String _additionalOtherPermits;
	private String _insurance;
	private String _copyOfInsurance;
	private String _temporaryImportEquipment;
	private String _personnelTravellingEquipment;
	private String _portOfEntry;
	private Date _arrivalDate;
	private Date _departureDate;
	private String _flightDetails;
	private String _shippingCompany;
	private String _shippingVesselNo;
	private String _customsBroker;
	private String _brokerEmail;
	private String _brokerMobile;
	private String _typeOfEquipmentJamaica;
	private String _rentalArrangedThrough;
	private long _filmApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FilmOtherDetails, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FilmOtherDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("filmOtherDetailsId", _filmOtherDetailsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("additionalPermits", _additionalPermits);
		_columnOriginalValues.put(
			"additionalOtherPermits", _additionalOtherPermits);
		_columnOriginalValues.put("insurance", _insurance);
		_columnOriginalValues.put("copyOfInsurance", _copyOfInsurance);
		_columnOriginalValues.put(
			"temporaryImportEquipment", _temporaryImportEquipment);
		_columnOriginalValues.put(
			"personnelTravellingEquipment", _personnelTravellingEquipment);
		_columnOriginalValues.put("portOfEntry", _portOfEntry);
		_columnOriginalValues.put("arrivalDate", _arrivalDate);
		_columnOriginalValues.put("departureDate", _departureDate);
		_columnOriginalValues.put("flightDetails", _flightDetails);
		_columnOriginalValues.put("shippingCompany", _shippingCompany);
		_columnOriginalValues.put("shippingVesselNo", _shippingVesselNo);
		_columnOriginalValues.put("customsBroker", _customsBroker);
		_columnOriginalValues.put("brokerEmail", _brokerEmail);
		_columnOriginalValues.put("brokerMobile", _brokerMobile);
		_columnOriginalValues.put(
			"typeOfEquipmentJamaica", _typeOfEquipmentJamaica);
		_columnOriginalValues.put(
			"rentalArrangedThrough", _rentalArrangedThrough);
		_columnOriginalValues.put("filmApplicationId", _filmApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("filmOtherDetailsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("additionalPermits", 128L);

		columnBitmasks.put("additionalOtherPermits", 256L);

		columnBitmasks.put("insurance", 512L);

		columnBitmasks.put("copyOfInsurance", 1024L);

		columnBitmasks.put("temporaryImportEquipment", 2048L);

		columnBitmasks.put("personnelTravellingEquipment", 4096L);

		columnBitmasks.put("portOfEntry", 8192L);

		columnBitmasks.put("arrivalDate", 16384L);

		columnBitmasks.put("departureDate", 32768L);

		columnBitmasks.put("flightDetails", 65536L);

		columnBitmasks.put("shippingCompany", 131072L);

		columnBitmasks.put("shippingVesselNo", 262144L);

		columnBitmasks.put("customsBroker", 524288L);

		columnBitmasks.put("brokerEmail", 1048576L);

		columnBitmasks.put("brokerMobile", 2097152L);

		columnBitmasks.put("typeOfEquipmentJamaica", 4194304L);

		columnBitmasks.put("rentalArrangedThrough", 8388608L);

		columnBitmasks.put("filmApplicationId", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FilmOtherDetails _escapedModel;

}