/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.film.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.film.application.form.service.model.FilmEquipmentList;
import com.nbp.film.application.form.service.model.FilmEquipmentListModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FilmEquipmentList service. Represents a row in the &quot;nbp_film_equipment_list&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FilmEquipmentListModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilmEquipmentListImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FilmEquipmentListImpl
 * @generated
 */
@JSON(strict = true)
public class FilmEquipmentListModelImpl
	extends BaseModelImpl<FilmEquipmentList> implements FilmEquipmentListModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a film equipment list model instance should use the <code>FilmEquipmentList</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_film_equipment_list";

	public static final Object[][] TABLE_COLUMNS = {
		{"filmEquipmentListId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"item", Types.VARCHAR},
		{"serialNumber", Types.VARCHAR}, {"weight", Types.VARCHAR},
		{"quantity", Types.VARCHAR}, {"unitPrice", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"total", Types.VARCHAR},
		{"counter", Types.VARCHAR}, {"equipmentList", Types.VARCHAR},
		{"flightNumber", Types.VARCHAR}, {"filmApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("filmEquipmentListId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("item", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serialNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("weight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unitPrice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("total", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flightNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filmApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_film_equipment_list (filmEquipmentListId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,item VARCHAR(75) null,serialNumber VARCHAR(75) null,weight VARCHAR(75) null,quantity VARCHAR(75) null,unitPrice VARCHAR(75) null,description VARCHAR(500) null,total VARCHAR(75) null,counter VARCHAR(75) null,equipmentList VARCHAR(75) null,flightNumber VARCHAR(75) null,filmApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_film_equipment_list";

	public static final String ORDER_BY_JPQL =
		" ORDER BY filmEquipmentList.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_film_equipment_list.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FilmEquipmentListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _filmEquipmentListId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFilmEquipmentListId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _filmEquipmentListId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FilmEquipmentList.class;
	}

	@Override
	public String getModelClassName() {
		return FilmEquipmentList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FilmEquipmentList, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FilmEquipmentList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmEquipmentList, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FilmEquipmentList)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FilmEquipmentList, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FilmEquipmentList, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FilmEquipmentList)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FilmEquipmentList, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FilmEquipmentList, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FilmEquipmentList, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FilmEquipmentList, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FilmEquipmentList, Object>>();

			attributeGetterFunctions.put(
				"filmEquipmentListId",
				FilmEquipmentList::getFilmEquipmentListId);
			attributeGetterFunctions.put(
				"groupId", FilmEquipmentList::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FilmEquipmentList::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FilmEquipmentList::getUserId);
			attributeGetterFunctions.put(
				"userName", FilmEquipmentList::getUserName);
			attributeGetterFunctions.put(
				"createDate", FilmEquipmentList::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FilmEquipmentList::getModifiedDate);
			attributeGetterFunctions.put("item", FilmEquipmentList::getItem);
			attributeGetterFunctions.put(
				"serialNumber", FilmEquipmentList::getSerialNumber);
			attributeGetterFunctions.put(
				"weight", FilmEquipmentList::getWeight);
			attributeGetterFunctions.put(
				"quantity", FilmEquipmentList::getQuantity);
			attributeGetterFunctions.put(
				"unitPrice", FilmEquipmentList::getUnitPrice);
			attributeGetterFunctions.put(
				"description", FilmEquipmentList::getDescription);
			attributeGetterFunctions.put("total", FilmEquipmentList::getTotal);
			attributeGetterFunctions.put(
				"counter", FilmEquipmentList::getCounter);
			attributeGetterFunctions.put(
				"equipmentList", FilmEquipmentList::getEquipmentList);
			attributeGetterFunctions.put(
				"flightNumber", FilmEquipmentList::getFlightNumber);
			attributeGetterFunctions.put(
				"filmApplicationId", FilmEquipmentList::getFilmApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<FilmEquipmentList, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FilmEquipmentList, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FilmEquipmentList, ?>>();

			attributeSetterBiConsumers.put(
				"filmEquipmentListId",
				(BiConsumer<FilmEquipmentList, Long>)
					FilmEquipmentList::setFilmEquipmentListId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FilmEquipmentList, Long>)
					FilmEquipmentList::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FilmEquipmentList, Long>)
					FilmEquipmentList::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FilmEquipmentList, Long>)
					FilmEquipmentList::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FilmEquipmentList, Date>)
					FilmEquipmentList::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FilmEquipmentList, Date>)
					FilmEquipmentList::setModifiedDate);
			attributeSetterBiConsumers.put(
				"item",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setItem);
			attributeSetterBiConsumers.put(
				"serialNumber",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setSerialNumber);
			attributeSetterBiConsumers.put(
				"weight",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setWeight);
			attributeSetterBiConsumers.put(
				"quantity",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setQuantity);
			attributeSetterBiConsumers.put(
				"unitPrice",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setUnitPrice);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setDescription);
			attributeSetterBiConsumers.put(
				"total",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setTotal);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setCounter);
			attributeSetterBiConsumers.put(
				"equipmentList",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setEquipmentList);
			attributeSetterBiConsumers.put(
				"flightNumber",
				(BiConsumer<FilmEquipmentList, String>)
					FilmEquipmentList::setFlightNumber);
			attributeSetterBiConsumers.put(
				"filmApplicationId",
				(BiConsumer<FilmEquipmentList, Long>)
					FilmEquipmentList::setFilmApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFilmEquipmentListId() {
		return _filmEquipmentListId;
	}

	@Override
	public void setFilmEquipmentListId(long filmEquipmentListId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmEquipmentListId = filmEquipmentListId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getItem() {
		if (_item == null) {
			return "";
		}
		else {
			return _item;
		}
	}

	@Override
	public void setItem(String item) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_item = item;
	}

	@JSON
	@Override
	public String getSerialNumber() {
		if (_serialNumber == null) {
			return "";
		}
		else {
			return _serialNumber;
		}
	}

	@Override
	public void setSerialNumber(String serialNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serialNumber = serialNumber;
	}

	@JSON
	@Override
	public String getWeight() {
		if (_weight == null) {
			return "";
		}
		else {
			return _weight;
		}
	}

	@Override
	public void setWeight(String weight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_weight = weight;
	}

	@JSON
	@Override
	public String getQuantity() {
		if (_quantity == null) {
			return "";
		}
		else {
			return _quantity;
		}
	}

	@Override
	public void setQuantity(String quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@JSON
	@Override
	public String getUnitPrice() {
		if (_unitPrice == null) {
			return "";
		}
		else {
			return _unitPrice;
		}
	}

	@Override
	public void setUnitPrice(String unitPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unitPrice = unitPrice;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getTotal() {
		if (_total == null) {
			return "";
		}
		else {
			return _total;
		}
	}

	@Override
	public void setTotal(String total) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_total = total;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	@JSON
	@Override
	public String getEquipmentList() {
		if (_equipmentList == null) {
			return "";
		}
		else {
			return _equipmentList;
		}
	}

	@Override
	public void setEquipmentList(String equipmentList) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentList = equipmentList;
	}

	@JSON
	@Override
	public String getFlightNumber() {
		if (_flightNumber == null) {
			return "";
		}
		else {
			return _flightNumber;
		}
	}

	@Override
	public void setFlightNumber(String flightNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_flightNumber = flightNumber;
	}

	@JSON
	@Override
	public long getFilmApplicationId() {
		return _filmApplicationId;
	}

	@Override
	public void setFilmApplicationId(long filmApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmApplicationId = filmApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFilmApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("filmApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FilmEquipmentList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FilmEquipmentList toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FilmEquipmentList>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FilmEquipmentListImpl filmEquipmentListImpl =
			new FilmEquipmentListImpl();

		filmEquipmentListImpl.setFilmEquipmentListId(getFilmEquipmentListId());
		filmEquipmentListImpl.setGroupId(getGroupId());
		filmEquipmentListImpl.setCompanyId(getCompanyId());
		filmEquipmentListImpl.setUserId(getUserId());
		filmEquipmentListImpl.setUserName(getUserName());
		filmEquipmentListImpl.setCreateDate(getCreateDate());
		filmEquipmentListImpl.setModifiedDate(getModifiedDate());
		filmEquipmentListImpl.setItem(getItem());
		filmEquipmentListImpl.setSerialNumber(getSerialNumber());
		filmEquipmentListImpl.setWeight(getWeight());
		filmEquipmentListImpl.setQuantity(getQuantity());
		filmEquipmentListImpl.setUnitPrice(getUnitPrice());
		filmEquipmentListImpl.setDescription(getDescription());
		filmEquipmentListImpl.setTotal(getTotal());
		filmEquipmentListImpl.setCounter(getCounter());
		filmEquipmentListImpl.setEquipmentList(getEquipmentList());
		filmEquipmentListImpl.setFlightNumber(getFlightNumber());
		filmEquipmentListImpl.setFilmApplicationId(getFilmApplicationId());

		filmEquipmentListImpl.resetOriginalValues();

		return filmEquipmentListImpl;
	}

	@Override
	public FilmEquipmentList cloneWithOriginalValues() {
		FilmEquipmentListImpl filmEquipmentListImpl =
			new FilmEquipmentListImpl();

		filmEquipmentListImpl.setFilmEquipmentListId(
			this.<Long>getColumnOriginalValue("filmEquipmentListId"));
		filmEquipmentListImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		filmEquipmentListImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		filmEquipmentListImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		filmEquipmentListImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		filmEquipmentListImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		filmEquipmentListImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		filmEquipmentListImpl.setItem(
			this.<String>getColumnOriginalValue("item"));
		filmEquipmentListImpl.setSerialNumber(
			this.<String>getColumnOriginalValue("serialNumber"));
		filmEquipmentListImpl.setWeight(
			this.<String>getColumnOriginalValue("weight"));
		filmEquipmentListImpl.setQuantity(
			this.<String>getColumnOriginalValue("quantity"));
		filmEquipmentListImpl.setUnitPrice(
			this.<String>getColumnOriginalValue("unitPrice"));
		filmEquipmentListImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		filmEquipmentListImpl.setTotal(
			this.<String>getColumnOriginalValue("total"));
		filmEquipmentListImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));
		filmEquipmentListImpl.setEquipmentList(
			this.<String>getColumnOriginalValue("equipmentList"));
		filmEquipmentListImpl.setFlightNumber(
			this.<String>getColumnOriginalValue("flightNumber"));
		filmEquipmentListImpl.setFilmApplicationId(
			this.<Long>getColumnOriginalValue("filmApplicationId"));

		return filmEquipmentListImpl;
	}

	@Override
	public int compareTo(FilmEquipmentList filmEquipmentList) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), filmEquipmentList.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FilmEquipmentList)) {
			return false;
		}

		FilmEquipmentList filmEquipmentList = (FilmEquipmentList)object;

		long primaryKey = filmEquipmentList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FilmEquipmentList> toCacheModel() {
		FilmEquipmentListCacheModel filmEquipmentListCacheModel =
			new FilmEquipmentListCacheModel();

		filmEquipmentListCacheModel.filmEquipmentListId =
			getFilmEquipmentListId();

		filmEquipmentListCacheModel.groupId = getGroupId();

		filmEquipmentListCacheModel.companyId = getCompanyId();

		filmEquipmentListCacheModel.userId = getUserId();

		filmEquipmentListCacheModel.userName = getUserName();

		String userName = filmEquipmentListCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			filmEquipmentListCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			filmEquipmentListCacheModel.createDate = createDate.getTime();
		}
		else {
			filmEquipmentListCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			filmEquipmentListCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			filmEquipmentListCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		filmEquipmentListCacheModel.item = getItem();

		String item = filmEquipmentListCacheModel.item;

		if ((item != null) && (item.length() == 0)) {
			filmEquipmentListCacheModel.item = null;
		}

		filmEquipmentListCacheModel.serialNumber = getSerialNumber();

		String serialNumber = filmEquipmentListCacheModel.serialNumber;

		if ((serialNumber != null) && (serialNumber.length() == 0)) {
			filmEquipmentListCacheModel.serialNumber = null;
		}

		filmEquipmentListCacheModel.weight = getWeight();

		String weight = filmEquipmentListCacheModel.weight;

		if ((weight != null) && (weight.length() == 0)) {
			filmEquipmentListCacheModel.weight = null;
		}

		filmEquipmentListCacheModel.quantity = getQuantity();

		String quantity = filmEquipmentListCacheModel.quantity;

		if ((quantity != null) && (quantity.length() == 0)) {
			filmEquipmentListCacheModel.quantity = null;
		}

		filmEquipmentListCacheModel.unitPrice = getUnitPrice();

		String unitPrice = filmEquipmentListCacheModel.unitPrice;

		if ((unitPrice != null) && (unitPrice.length() == 0)) {
			filmEquipmentListCacheModel.unitPrice = null;
		}

		filmEquipmentListCacheModel.description = getDescription();

		String description = filmEquipmentListCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			filmEquipmentListCacheModel.description = null;
		}

		filmEquipmentListCacheModel.total = getTotal();

		String total = filmEquipmentListCacheModel.total;

		if ((total != null) && (total.length() == 0)) {
			filmEquipmentListCacheModel.total = null;
		}

		filmEquipmentListCacheModel.counter = getCounter();

		String counter = filmEquipmentListCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			filmEquipmentListCacheModel.counter = null;
		}

		filmEquipmentListCacheModel.equipmentList = getEquipmentList();

		String equipmentList = filmEquipmentListCacheModel.equipmentList;

		if ((equipmentList != null) && (equipmentList.length() == 0)) {
			filmEquipmentListCacheModel.equipmentList = null;
		}

		filmEquipmentListCacheModel.flightNumber = getFlightNumber();

		String flightNumber = filmEquipmentListCacheModel.flightNumber;

		if ((flightNumber != null) && (flightNumber.length() == 0)) {
			filmEquipmentListCacheModel.flightNumber = null;
		}

		filmEquipmentListCacheModel.filmApplicationId = getFilmApplicationId();

		return filmEquipmentListCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FilmEquipmentList, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FilmEquipmentList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmEquipmentList, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FilmEquipmentList)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FilmEquipmentList>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FilmEquipmentList.class, ModelWrapper.class);

	}

	private long _filmEquipmentListId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _item;
	private String _serialNumber;
	private String _weight;
	private String _quantity;
	private String _unitPrice;
	private String _description;
	private String _total;
	private String _counter;
	private String _equipmentList;
	private String _flightNumber;
	private long _filmApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FilmEquipmentList, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FilmEquipmentList)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("filmEquipmentListId", _filmEquipmentListId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("item", _item);
		_columnOriginalValues.put("serialNumber", _serialNumber);
		_columnOriginalValues.put("weight", _weight);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("unitPrice", _unitPrice);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("total", _total);
		_columnOriginalValues.put("counter", _counter);
		_columnOriginalValues.put("equipmentList", _equipmentList);
		_columnOriginalValues.put("flightNumber", _flightNumber);
		_columnOriginalValues.put("filmApplicationId", _filmApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("filmEquipmentListId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("item", 128L);

		columnBitmasks.put("serialNumber", 256L);

		columnBitmasks.put("weight", 512L);

		columnBitmasks.put("quantity", 1024L);

		columnBitmasks.put("unitPrice", 2048L);

		columnBitmasks.put("description", 4096L);

		columnBitmasks.put("total", 8192L);

		columnBitmasks.put("counter", 16384L);

		columnBitmasks.put("equipmentList", 32768L);

		columnBitmasks.put("flightNumber", 65536L);

		columnBitmasks.put("filmApplicationId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FilmEquipmentList _escapedModel;

}