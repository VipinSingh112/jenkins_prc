/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.agriculture.application.form.service.model.impl;

import com.agriculture.application.form.service.model.AgricultureFarm;
import com.agriculture.application.form.service.model.AgricultureFarmModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AgricultureFarm service. Represents a row in the &quot;agriculture_farm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AgricultureFarmModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AgricultureFarmImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AgricultureFarmImpl
 * @generated
 */
@JSON(strict = true)
public class AgricultureFarmModelImpl
	extends BaseModelImpl<AgricultureFarm> implements AgricultureFarmModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a agriculture farm model instance should use the <code>AgricultureFarm</code> interface instead.
	 */
	public static final String TABLE_NAME = "agriculture_farm";

	public static final Object[][] TABLE_COLUMNS = {
		{"agricultureFarmId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"locationOfFarm", Types.VARCHAR},
		{"landTenure", Types.VARCHAR}, {"numberOfHectares", Types.VARCHAR},
		{"numberOfYears", Types.VARCHAR}, {"numberOfParcels", Types.VARCHAR},
		{"sizeOfParcel", Types.VARCHAR}, {"topography", Types.VARCHAR},
		{"numberOF", Types.VARCHAR}, {"farmCounter", Types.VARCHAR},
		{"agricultureApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("agricultureFarmId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("locationOfFarm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landTenure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfHectares", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfYears", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfParcels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sizeOfParcel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("topography", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOF", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agricultureApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agriculture_farm (agricultureFarmId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,locationOfFarm VARCHAR(75) null,landTenure VARCHAR(75) null,numberOfHectares VARCHAR(75) null,numberOfYears VARCHAR(75) null,numberOfParcels VARCHAR(75) null,sizeOfParcel VARCHAR(75) null,topography VARCHAR(75) null,numberOF VARCHAR(75) null,farmCounter VARCHAR(75) null,agricultureApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table agriculture_farm";

	public static final String ORDER_BY_JPQL =
		" ORDER BY agricultureFarm.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agriculture_farm.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AGRICULTUREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AgricultureFarmModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _agricultureFarmId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAgricultureFarmId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _agricultureFarmId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AgricultureFarm.class;
	}

	@Override
	public String getModelClassName() {
		return AgricultureFarm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AgricultureFarm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AgricultureFarm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AgricultureFarm, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AgricultureFarm)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AgricultureFarm, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AgricultureFarm, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AgricultureFarm)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AgricultureFarm, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AgricultureFarm, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AgricultureFarm, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AgricultureFarm, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AgricultureFarm, Object>>();

			attributeGetterFunctions.put(
				"agricultureFarmId", AgricultureFarm::getAgricultureFarmId);
			attributeGetterFunctions.put(
				"groupId", AgricultureFarm::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AgricultureFarm::getCompanyId);
			attributeGetterFunctions.put("userId", AgricultureFarm::getUserId);
			attributeGetterFunctions.put(
				"userName", AgricultureFarm::getUserName);
			attributeGetterFunctions.put(
				"createDate", AgricultureFarm::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AgricultureFarm::getModifiedDate);
			attributeGetterFunctions.put(
				"locationOfFarm", AgricultureFarm::getLocationOfFarm);
			attributeGetterFunctions.put(
				"landTenure", AgricultureFarm::getLandTenure);
			attributeGetterFunctions.put(
				"numberOfHectares", AgricultureFarm::getNumberOfHectares);
			attributeGetterFunctions.put(
				"numberOfYears", AgricultureFarm::getNumberOfYears);
			attributeGetterFunctions.put(
				"numberOfParcels", AgricultureFarm::getNumberOfParcels);
			attributeGetterFunctions.put(
				"sizeOfParcel", AgricultureFarm::getSizeOfParcel);
			attributeGetterFunctions.put(
				"topography", AgricultureFarm::getTopography);
			attributeGetterFunctions.put(
				"numberOF", AgricultureFarm::getNumberOF);
			attributeGetterFunctions.put(
				"farmCounter", AgricultureFarm::getFarmCounter);
			attributeGetterFunctions.put(
				"agricultureApplicationId",
				AgricultureFarm::getAgricultureApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AgricultureFarm, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AgricultureFarm, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<AgricultureFarm, ?>>();

			attributeSetterBiConsumers.put(
				"agricultureFarmId",
				(BiConsumer<AgricultureFarm, Long>)
					AgricultureFarm::setAgricultureFarmId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AgricultureFarm, Long>)AgricultureFarm::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AgricultureFarm, Long>)
					AgricultureFarm::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AgricultureFarm, Long>)AgricultureFarm::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AgricultureFarm, Date>)
					AgricultureFarm::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AgricultureFarm, Date>)
					AgricultureFarm::setModifiedDate);
			attributeSetterBiConsumers.put(
				"locationOfFarm",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setLocationOfFarm);
			attributeSetterBiConsumers.put(
				"landTenure",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setLandTenure);
			attributeSetterBiConsumers.put(
				"numberOfHectares",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setNumberOfHectares);
			attributeSetterBiConsumers.put(
				"numberOfYears",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setNumberOfYears);
			attributeSetterBiConsumers.put(
				"numberOfParcels",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setNumberOfParcels);
			attributeSetterBiConsumers.put(
				"sizeOfParcel",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setSizeOfParcel);
			attributeSetterBiConsumers.put(
				"topography",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setTopography);
			attributeSetterBiConsumers.put(
				"numberOF",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setNumberOF);
			attributeSetterBiConsumers.put(
				"farmCounter",
				(BiConsumer<AgricultureFarm, String>)
					AgricultureFarm::setFarmCounter);
			attributeSetterBiConsumers.put(
				"agricultureApplicationId",
				(BiConsumer<AgricultureFarm, Long>)
					AgricultureFarm::setAgricultureApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAgricultureFarmId() {
		return _agricultureFarmId;
	}

	@Override
	public void setAgricultureFarmId(long agricultureFarmId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agricultureFarmId = agricultureFarmId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLocationOfFarm() {
		if (_locationOfFarm == null) {
			return "";
		}
		else {
			return _locationOfFarm;
		}
	}

	@Override
	public void setLocationOfFarm(String locationOfFarm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locationOfFarm = locationOfFarm;
	}

	@JSON
	@Override
	public String getLandTenure() {
		if (_landTenure == null) {
			return "";
		}
		else {
			return _landTenure;
		}
	}

	@Override
	public void setLandTenure(String landTenure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landTenure = landTenure;
	}

	@JSON
	@Override
	public String getNumberOfHectares() {
		if (_numberOfHectares == null) {
			return "";
		}
		else {
			return _numberOfHectares;
		}
	}

	@Override
	public void setNumberOfHectares(String numberOfHectares) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfHectares = numberOfHectares;
	}

	@JSON
	@Override
	public String getNumberOfYears() {
		if (_numberOfYears == null) {
			return "";
		}
		else {
			return _numberOfYears;
		}
	}

	@Override
	public void setNumberOfYears(String numberOfYears) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfYears = numberOfYears;
	}

	@JSON
	@Override
	public String getNumberOfParcels() {
		if (_numberOfParcels == null) {
			return "";
		}
		else {
			return _numberOfParcels;
		}
	}

	@Override
	public void setNumberOfParcels(String numberOfParcels) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfParcels = numberOfParcels;
	}

	@JSON
	@Override
	public String getSizeOfParcel() {
		if (_sizeOfParcel == null) {
			return "";
		}
		else {
			return _sizeOfParcel;
		}
	}

	@Override
	public void setSizeOfParcel(String sizeOfParcel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sizeOfParcel = sizeOfParcel;
	}

	@JSON
	@Override
	public String getTopography() {
		if (_topography == null) {
			return "";
		}
		else {
			return _topography;
		}
	}

	@Override
	public void setTopography(String topography) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_topography = topography;
	}

	@JSON
	@Override
	public String getNumberOF() {
		if (_numberOF == null) {
			return "";
		}
		else {
			return _numberOF;
		}
	}

	@Override
	public void setNumberOF(String numberOF) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOF = numberOF;
	}

	@JSON
	@Override
	public String getFarmCounter() {
		if (_farmCounter == null) {
			return "";
		}
		else {
			return _farmCounter;
		}
	}

	@Override
	public void setFarmCounter(String farmCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmCounter = farmCounter;
	}

	@JSON
	@Override
	public long getAgricultureApplicationId() {
		return _agricultureApplicationId;
	}

	@Override
	public void setAgricultureApplicationId(long agricultureApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agricultureApplicationId = agricultureApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAgricultureApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("agricultureApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AgricultureFarm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AgricultureFarm toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AgricultureFarm>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AgricultureFarmImpl agricultureFarmImpl = new AgricultureFarmImpl();

		agricultureFarmImpl.setAgricultureFarmId(getAgricultureFarmId());
		agricultureFarmImpl.setGroupId(getGroupId());
		agricultureFarmImpl.setCompanyId(getCompanyId());
		agricultureFarmImpl.setUserId(getUserId());
		agricultureFarmImpl.setUserName(getUserName());
		agricultureFarmImpl.setCreateDate(getCreateDate());
		agricultureFarmImpl.setModifiedDate(getModifiedDate());
		agricultureFarmImpl.setLocationOfFarm(getLocationOfFarm());
		agricultureFarmImpl.setLandTenure(getLandTenure());
		agricultureFarmImpl.setNumberOfHectares(getNumberOfHectares());
		agricultureFarmImpl.setNumberOfYears(getNumberOfYears());
		agricultureFarmImpl.setNumberOfParcels(getNumberOfParcels());
		agricultureFarmImpl.setSizeOfParcel(getSizeOfParcel());
		agricultureFarmImpl.setTopography(getTopography());
		agricultureFarmImpl.setNumberOF(getNumberOF());
		agricultureFarmImpl.setFarmCounter(getFarmCounter());
		agricultureFarmImpl.setAgricultureApplicationId(
			getAgricultureApplicationId());

		agricultureFarmImpl.resetOriginalValues();

		return agricultureFarmImpl;
	}

	@Override
	public AgricultureFarm cloneWithOriginalValues() {
		AgricultureFarmImpl agricultureFarmImpl = new AgricultureFarmImpl();

		agricultureFarmImpl.setAgricultureFarmId(
			this.<Long>getColumnOriginalValue("agricultureFarmId"));
		agricultureFarmImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		agricultureFarmImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		agricultureFarmImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		agricultureFarmImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		agricultureFarmImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		agricultureFarmImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		agricultureFarmImpl.setLocationOfFarm(
			this.<String>getColumnOriginalValue("locationOfFarm"));
		agricultureFarmImpl.setLandTenure(
			this.<String>getColumnOriginalValue("landTenure"));
		agricultureFarmImpl.setNumberOfHectares(
			this.<String>getColumnOriginalValue("numberOfHectares"));
		agricultureFarmImpl.setNumberOfYears(
			this.<String>getColumnOriginalValue("numberOfYears"));
		agricultureFarmImpl.setNumberOfParcels(
			this.<String>getColumnOriginalValue("numberOfParcels"));
		agricultureFarmImpl.setSizeOfParcel(
			this.<String>getColumnOriginalValue("sizeOfParcel"));
		agricultureFarmImpl.setTopography(
			this.<String>getColumnOriginalValue("topography"));
		agricultureFarmImpl.setNumberOF(
			this.<String>getColumnOriginalValue("numberOF"));
		agricultureFarmImpl.setFarmCounter(
			this.<String>getColumnOriginalValue("farmCounter"));
		agricultureFarmImpl.setAgricultureApplicationId(
			this.<Long>getColumnOriginalValue("agricultureApplicationId"));

		return agricultureFarmImpl;
	}

	@Override
	public int compareTo(AgricultureFarm agricultureFarm) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), agricultureFarm.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AgricultureFarm)) {
			return false;
		}

		AgricultureFarm agricultureFarm = (AgricultureFarm)object;

		long primaryKey = agricultureFarm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AgricultureFarm> toCacheModel() {
		AgricultureFarmCacheModel agricultureFarmCacheModel =
			new AgricultureFarmCacheModel();

		agricultureFarmCacheModel.agricultureFarmId = getAgricultureFarmId();

		agricultureFarmCacheModel.groupId = getGroupId();

		agricultureFarmCacheModel.companyId = getCompanyId();

		agricultureFarmCacheModel.userId = getUserId();

		agricultureFarmCacheModel.userName = getUserName();

		String userName = agricultureFarmCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			agricultureFarmCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			agricultureFarmCacheModel.createDate = createDate.getTime();
		}
		else {
			agricultureFarmCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			agricultureFarmCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			agricultureFarmCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		agricultureFarmCacheModel.locationOfFarm = getLocationOfFarm();

		String locationOfFarm = agricultureFarmCacheModel.locationOfFarm;

		if ((locationOfFarm != null) && (locationOfFarm.length() == 0)) {
			agricultureFarmCacheModel.locationOfFarm = null;
		}

		agricultureFarmCacheModel.landTenure = getLandTenure();

		String landTenure = agricultureFarmCacheModel.landTenure;

		if ((landTenure != null) && (landTenure.length() == 0)) {
			agricultureFarmCacheModel.landTenure = null;
		}

		agricultureFarmCacheModel.numberOfHectares = getNumberOfHectares();

		String numberOfHectares = agricultureFarmCacheModel.numberOfHectares;

		if ((numberOfHectares != null) && (numberOfHectares.length() == 0)) {
			agricultureFarmCacheModel.numberOfHectares = null;
		}

		agricultureFarmCacheModel.numberOfYears = getNumberOfYears();

		String numberOfYears = agricultureFarmCacheModel.numberOfYears;

		if ((numberOfYears != null) && (numberOfYears.length() == 0)) {
			agricultureFarmCacheModel.numberOfYears = null;
		}

		agricultureFarmCacheModel.numberOfParcels = getNumberOfParcels();

		String numberOfParcels = agricultureFarmCacheModel.numberOfParcels;

		if ((numberOfParcels != null) && (numberOfParcels.length() == 0)) {
			agricultureFarmCacheModel.numberOfParcels = null;
		}

		agricultureFarmCacheModel.sizeOfParcel = getSizeOfParcel();

		String sizeOfParcel = agricultureFarmCacheModel.sizeOfParcel;

		if ((sizeOfParcel != null) && (sizeOfParcel.length() == 0)) {
			agricultureFarmCacheModel.sizeOfParcel = null;
		}

		agricultureFarmCacheModel.topography = getTopography();

		String topography = agricultureFarmCacheModel.topography;

		if ((topography != null) && (topography.length() == 0)) {
			agricultureFarmCacheModel.topography = null;
		}

		agricultureFarmCacheModel.numberOF = getNumberOF();

		String numberOF = agricultureFarmCacheModel.numberOF;

		if ((numberOF != null) && (numberOF.length() == 0)) {
			agricultureFarmCacheModel.numberOF = null;
		}

		agricultureFarmCacheModel.farmCounter = getFarmCounter();

		String farmCounter = agricultureFarmCacheModel.farmCounter;

		if ((farmCounter != null) && (farmCounter.length() == 0)) {
			agricultureFarmCacheModel.farmCounter = null;
		}

		agricultureFarmCacheModel.agricultureApplicationId =
			getAgricultureApplicationId();

		return agricultureFarmCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AgricultureFarm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AgricultureFarm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AgricultureFarm, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AgricultureFarm)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AgricultureFarm>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AgricultureFarm.class, ModelWrapper.class);

	}

	private long _agricultureFarmId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _locationOfFarm;
	private String _landTenure;
	private String _numberOfHectares;
	private String _numberOfYears;
	private String _numberOfParcels;
	private String _sizeOfParcel;
	private String _topography;
	private String _numberOF;
	private String _farmCounter;
	private long _agricultureApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AgricultureFarm, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AgricultureFarm)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("agricultureFarmId", _agricultureFarmId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("locationOfFarm", _locationOfFarm);
		_columnOriginalValues.put("landTenure", _landTenure);
		_columnOriginalValues.put("numberOfHectares", _numberOfHectares);
		_columnOriginalValues.put("numberOfYears", _numberOfYears);
		_columnOriginalValues.put("numberOfParcels", _numberOfParcels);
		_columnOriginalValues.put("sizeOfParcel", _sizeOfParcel);
		_columnOriginalValues.put("topography", _topography);
		_columnOriginalValues.put("numberOF", _numberOF);
		_columnOriginalValues.put("farmCounter", _farmCounter);
		_columnOriginalValues.put(
			"agricultureApplicationId", _agricultureApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("agricultureFarmId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("locationOfFarm", 128L);

		columnBitmasks.put("landTenure", 256L);

		columnBitmasks.put("numberOfHectares", 512L);

		columnBitmasks.put("numberOfYears", 1024L);

		columnBitmasks.put("numberOfParcels", 2048L);

		columnBitmasks.put("sizeOfParcel", 4096L);

		columnBitmasks.put("topography", 8192L);

		columnBitmasks.put("numberOF", 16384L);

		columnBitmasks.put("farmCounter", 32768L);

		columnBitmasks.put("agricultureApplicationId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AgricultureFarm _escapedModel;

}