/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.agriculture.application.form.service.model.impl;

import com.agriculture.application.form.service.model.AgricultueFarmer;
import com.agriculture.application.form.service.model.AgricultueFarmerModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AgricultueFarmer service. Represents a row in the &quot;agriculture_farmer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AgricultueFarmerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AgricultueFarmerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AgricultueFarmerImpl
 * @generated
 */
@JSON(strict = true)
public class AgricultueFarmerModelImpl
	extends BaseModelImpl<AgricultueFarmer> implements AgricultueFarmerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a agricultue farmer model instance should use the <code>AgricultueFarmer</code> interface instead.
	 */
	public static final String TABLE_NAME = "agriculture_farmer";

	public static final Object[][] TABLE_COLUMNS = {
		{"agricultueFarmerId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"farmerDetail", Types.VARCHAR},
		{"nameOfApplicant", Types.VARCHAR}, {"nameOfFarm", Types.VARCHAR},
		{"nameOfProprietor", Types.VARCHAR}, {"parishAddress", Types.VARCHAR},
		{"localAddress", Types.VARCHAR},
		{"taxpayerRegistrationNumber", Types.VARCHAR},
		{"farmerRegistrationNumber", Types.VARCHAR},
		{"dateOfIncorporation", Types.TIMESTAMP},
		{"telephoneNumber", Types.VARCHAR}, {"emailAddress", Types.VARCHAR},
		{"agricultureApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("agricultueFarmerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("farmerDetail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfFarm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfProprietor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parishAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taxpayerRegistrationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerRegistrationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfIncorporation", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("telephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agricultureApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agriculture_farmer (agricultueFarmerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,farmerDetail VARCHAR(75) null,nameOfApplicant VARCHAR(75) null,nameOfFarm VARCHAR(75) null,nameOfProprietor VARCHAR(75) null,parishAddress VARCHAR(500) null,localAddress VARCHAR(500) null,taxpayerRegistrationNumber VARCHAR(75) null,farmerRegistrationNumber VARCHAR(75) null,dateOfIncorporation DATE null,telephoneNumber VARCHAR(75) null,emailAddress VARCHAR(75) null,agricultureApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table agriculture_farmer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY agricultueFarmer.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agriculture_farmer.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AGRICULTUREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AgricultueFarmerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _agricultueFarmerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAgricultueFarmerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _agricultueFarmerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AgricultueFarmer.class;
	}

	@Override
	public String getModelClassName() {
		return AgricultueFarmer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AgricultueFarmer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AgricultueFarmer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AgricultueFarmer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AgricultueFarmer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AgricultueFarmer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AgricultueFarmer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AgricultueFarmer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AgricultueFarmer, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AgricultueFarmer, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AgricultueFarmer, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AgricultueFarmer, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AgricultueFarmer, Object>>();

			attributeGetterFunctions.put(
				"agricultueFarmerId", AgricultueFarmer::getAgricultueFarmerId);
			attributeGetterFunctions.put(
				"groupId", AgricultueFarmer::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AgricultueFarmer::getCompanyId);
			attributeGetterFunctions.put("userId", AgricultueFarmer::getUserId);
			attributeGetterFunctions.put(
				"userName", AgricultueFarmer::getUserName);
			attributeGetterFunctions.put(
				"createDate", AgricultueFarmer::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AgricultueFarmer::getModifiedDate);
			attributeGetterFunctions.put(
				"farmerDetail", AgricultueFarmer::getFarmerDetail);
			attributeGetterFunctions.put(
				"nameOfApplicant", AgricultueFarmer::getNameOfApplicant);
			attributeGetterFunctions.put(
				"nameOfFarm", AgricultueFarmer::getNameOfFarm);
			attributeGetterFunctions.put(
				"nameOfProprietor", AgricultueFarmer::getNameOfProprietor);
			attributeGetterFunctions.put(
				"parishAddress", AgricultueFarmer::getParishAddress);
			attributeGetterFunctions.put(
				"localAddress", AgricultueFarmer::getLocalAddress);
			attributeGetterFunctions.put(
				"taxpayerRegistrationNumber",
				AgricultueFarmer::getTaxpayerRegistrationNumber);
			attributeGetterFunctions.put(
				"farmerRegistrationNumber",
				AgricultueFarmer::getFarmerRegistrationNumber);
			attributeGetterFunctions.put(
				"dateOfIncorporation",
				AgricultueFarmer::getDateOfIncorporation);
			attributeGetterFunctions.put(
				"telephoneNumber", AgricultueFarmer::getTelephoneNumber);
			attributeGetterFunctions.put(
				"emailAddress", AgricultueFarmer::getEmailAddress);
			attributeGetterFunctions.put(
				"agricultureApplicationId",
				AgricultueFarmer::getAgricultureApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AgricultueFarmer, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AgricultueFarmer, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AgricultueFarmer, ?>>();

			attributeSetterBiConsumers.put(
				"agricultueFarmerId",
				(BiConsumer<AgricultueFarmer, Long>)
					AgricultueFarmer::setAgricultueFarmerId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AgricultueFarmer, Long>)
					AgricultueFarmer::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AgricultueFarmer, Long>)
					AgricultueFarmer::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AgricultueFarmer, Long>)
					AgricultueFarmer::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AgricultueFarmer, Date>)
					AgricultueFarmer::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AgricultueFarmer, Date>)
					AgricultueFarmer::setModifiedDate);
			attributeSetterBiConsumers.put(
				"farmerDetail",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setFarmerDetail);
			attributeSetterBiConsumers.put(
				"nameOfApplicant",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setNameOfApplicant);
			attributeSetterBiConsumers.put(
				"nameOfFarm",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setNameOfFarm);
			attributeSetterBiConsumers.put(
				"nameOfProprietor",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setNameOfProprietor);
			attributeSetterBiConsumers.put(
				"parishAddress",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setParishAddress);
			attributeSetterBiConsumers.put(
				"localAddress",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setLocalAddress);
			attributeSetterBiConsumers.put(
				"taxpayerRegistrationNumber",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setTaxpayerRegistrationNumber);
			attributeSetterBiConsumers.put(
				"farmerRegistrationNumber",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setFarmerRegistrationNumber);
			attributeSetterBiConsumers.put(
				"dateOfIncorporation",
				(BiConsumer<AgricultueFarmer, Date>)
					AgricultueFarmer::setDateOfIncorporation);
			attributeSetterBiConsumers.put(
				"telephoneNumber",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setTelephoneNumber);
			attributeSetterBiConsumers.put(
				"emailAddress",
				(BiConsumer<AgricultueFarmer, String>)
					AgricultueFarmer::setEmailAddress);
			attributeSetterBiConsumers.put(
				"agricultureApplicationId",
				(BiConsumer<AgricultueFarmer, Long>)
					AgricultueFarmer::setAgricultureApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAgricultueFarmerId() {
		return _agricultueFarmerId;
	}

	@Override
	public void setAgricultueFarmerId(long agricultueFarmerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agricultueFarmerId = agricultueFarmerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFarmerDetail() {
		if (_farmerDetail == null) {
			return "";
		}
		else {
			return _farmerDetail;
		}
	}

	@Override
	public void setFarmerDetail(String farmerDetail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerDetail = farmerDetail;
	}

	@JSON
	@Override
	public String getNameOfApplicant() {
		if (_nameOfApplicant == null) {
			return "";
		}
		else {
			return _nameOfApplicant;
		}
	}

	@Override
	public void setNameOfApplicant(String nameOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfApplicant = nameOfApplicant;
	}

	@JSON
	@Override
	public String getNameOfFarm() {
		if (_nameOfFarm == null) {
			return "";
		}
		else {
			return _nameOfFarm;
		}
	}

	@Override
	public void setNameOfFarm(String nameOfFarm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfFarm = nameOfFarm;
	}

	@JSON
	@Override
	public String getNameOfProprietor() {
		if (_nameOfProprietor == null) {
			return "";
		}
		else {
			return _nameOfProprietor;
		}
	}

	@Override
	public void setNameOfProprietor(String nameOfProprietor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfProprietor = nameOfProprietor;
	}

	@JSON
	@Override
	public String getParishAddress() {
		if (_parishAddress == null) {
			return "";
		}
		else {
			return _parishAddress;
		}
	}

	@Override
	public void setParishAddress(String parishAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parishAddress = parishAddress;
	}

	@JSON
	@Override
	public String getLocalAddress() {
		if (_localAddress == null) {
			return "";
		}
		else {
			return _localAddress;
		}
	}

	@Override
	public void setLocalAddress(String localAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localAddress = localAddress;
	}

	@JSON
	@Override
	public String getTaxpayerRegistrationNumber() {
		if (_taxpayerRegistrationNumber == null) {
			return "";
		}
		else {
			return _taxpayerRegistrationNumber;
		}
	}

	@Override
	public void setTaxpayerRegistrationNumber(
		String taxpayerRegistrationNumber) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taxpayerRegistrationNumber = taxpayerRegistrationNumber;
	}

	@JSON
	@Override
	public String getFarmerRegistrationNumber() {
		if (_farmerRegistrationNumber == null) {
			return "";
		}
		else {
			return _farmerRegistrationNumber;
		}
	}

	@Override
	public void setFarmerRegistrationNumber(String farmerRegistrationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerRegistrationNumber = farmerRegistrationNumber;
	}

	@JSON
	@Override
	public Date getDateOfIncorporation() {
		return _dateOfIncorporation;
	}

	@Override
	public void setDateOfIncorporation(Date dateOfIncorporation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfIncorporation = dateOfIncorporation;
	}

	@JSON
	@Override
	public String getTelephoneNumber() {
		if (_telephoneNumber == null) {
			return "";
		}
		else {
			return _telephoneNumber;
		}
	}

	@Override
	public void setTelephoneNumber(String telephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneNumber = telephoneNumber;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public long getAgricultureApplicationId() {
		return _agricultureApplicationId;
	}

	@Override
	public void setAgricultureApplicationId(long agricultureApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agricultureApplicationId = agricultureApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAgricultureApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("agricultureApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AgricultueFarmer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AgricultueFarmer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AgricultueFarmer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AgricultueFarmerImpl agricultueFarmerImpl = new AgricultueFarmerImpl();

		agricultueFarmerImpl.setAgricultueFarmerId(getAgricultueFarmerId());
		agricultueFarmerImpl.setGroupId(getGroupId());
		agricultueFarmerImpl.setCompanyId(getCompanyId());
		agricultueFarmerImpl.setUserId(getUserId());
		agricultueFarmerImpl.setUserName(getUserName());
		agricultueFarmerImpl.setCreateDate(getCreateDate());
		agricultueFarmerImpl.setModifiedDate(getModifiedDate());
		agricultueFarmerImpl.setFarmerDetail(getFarmerDetail());
		agricultueFarmerImpl.setNameOfApplicant(getNameOfApplicant());
		agricultueFarmerImpl.setNameOfFarm(getNameOfFarm());
		agricultueFarmerImpl.setNameOfProprietor(getNameOfProprietor());
		agricultueFarmerImpl.setParishAddress(getParishAddress());
		agricultueFarmerImpl.setLocalAddress(getLocalAddress());
		agricultueFarmerImpl.setTaxpayerRegistrationNumber(
			getTaxpayerRegistrationNumber());
		agricultueFarmerImpl.setFarmerRegistrationNumber(
			getFarmerRegistrationNumber());
		agricultueFarmerImpl.setDateOfIncorporation(getDateOfIncorporation());
		agricultueFarmerImpl.setTelephoneNumber(getTelephoneNumber());
		agricultueFarmerImpl.setEmailAddress(getEmailAddress());
		agricultueFarmerImpl.setAgricultureApplicationId(
			getAgricultureApplicationId());

		agricultueFarmerImpl.resetOriginalValues();

		return agricultueFarmerImpl;
	}

	@Override
	public AgricultueFarmer cloneWithOriginalValues() {
		AgricultueFarmerImpl agricultueFarmerImpl = new AgricultueFarmerImpl();

		agricultueFarmerImpl.setAgricultueFarmerId(
			this.<Long>getColumnOriginalValue("agricultueFarmerId"));
		agricultueFarmerImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		agricultueFarmerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		agricultueFarmerImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		agricultueFarmerImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		agricultueFarmerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		agricultueFarmerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		agricultueFarmerImpl.setFarmerDetail(
			this.<String>getColumnOriginalValue("farmerDetail"));
		agricultueFarmerImpl.setNameOfApplicant(
			this.<String>getColumnOriginalValue("nameOfApplicant"));
		agricultueFarmerImpl.setNameOfFarm(
			this.<String>getColumnOriginalValue("nameOfFarm"));
		agricultueFarmerImpl.setNameOfProprietor(
			this.<String>getColumnOriginalValue("nameOfProprietor"));
		agricultueFarmerImpl.setParishAddress(
			this.<String>getColumnOriginalValue("parishAddress"));
		agricultueFarmerImpl.setLocalAddress(
			this.<String>getColumnOriginalValue("localAddress"));
		agricultueFarmerImpl.setTaxpayerRegistrationNumber(
			this.<String>getColumnOriginalValue("taxpayerRegistrationNumber"));
		agricultueFarmerImpl.setFarmerRegistrationNumber(
			this.<String>getColumnOriginalValue("farmerRegistrationNumber"));
		agricultueFarmerImpl.setDateOfIncorporation(
			this.<Date>getColumnOriginalValue("dateOfIncorporation"));
		agricultueFarmerImpl.setTelephoneNumber(
			this.<String>getColumnOriginalValue("telephoneNumber"));
		agricultueFarmerImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		agricultueFarmerImpl.setAgricultureApplicationId(
			this.<Long>getColumnOriginalValue("agricultureApplicationId"));

		return agricultueFarmerImpl;
	}

	@Override
	public int compareTo(AgricultueFarmer agricultueFarmer) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), agricultueFarmer.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AgricultueFarmer)) {
			return false;
		}

		AgricultueFarmer agricultueFarmer = (AgricultueFarmer)object;

		long primaryKey = agricultueFarmer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AgricultueFarmer> toCacheModel() {
		AgricultueFarmerCacheModel agricultueFarmerCacheModel =
			new AgricultueFarmerCacheModel();

		agricultueFarmerCacheModel.agricultueFarmerId = getAgricultueFarmerId();

		agricultueFarmerCacheModel.groupId = getGroupId();

		agricultueFarmerCacheModel.companyId = getCompanyId();

		agricultueFarmerCacheModel.userId = getUserId();

		agricultueFarmerCacheModel.userName = getUserName();

		String userName = agricultueFarmerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			agricultueFarmerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			agricultueFarmerCacheModel.createDate = createDate.getTime();
		}
		else {
			agricultueFarmerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			agricultueFarmerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			agricultueFarmerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		agricultueFarmerCacheModel.farmerDetail = getFarmerDetail();

		String farmerDetail = agricultueFarmerCacheModel.farmerDetail;

		if ((farmerDetail != null) && (farmerDetail.length() == 0)) {
			agricultueFarmerCacheModel.farmerDetail = null;
		}

		agricultueFarmerCacheModel.nameOfApplicant = getNameOfApplicant();

		String nameOfApplicant = agricultueFarmerCacheModel.nameOfApplicant;

		if ((nameOfApplicant != null) && (nameOfApplicant.length() == 0)) {
			agricultueFarmerCacheModel.nameOfApplicant = null;
		}

		agricultueFarmerCacheModel.nameOfFarm = getNameOfFarm();

		String nameOfFarm = agricultueFarmerCacheModel.nameOfFarm;

		if ((nameOfFarm != null) && (nameOfFarm.length() == 0)) {
			agricultueFarmerCacheModel.nameOfFarm = null;
		}

		agricultueFarmerCacheModel.nameOfProprietor = getNameOfProprietor();

		String nameOfProprietor = agricultueFarmerCacheModel.nameOfProprietor;

		if ((nameOfProprietor != null) && (nameOfProprietor.length() == 0)) {
			agricultueFarmerCacheModel.nameOfProprietor = null;
		}

		agricultueFarmerCacheModel.parishAddress = getParishAddress();

		String parishAddress = agricultueFarmerCacheModel.parishAddress;

		if ((parishAddress != null) && (parishAddress.length() == 0)) {
			agricultueFarmerCacheModel.parishAddress = null;
		}

		agricultueFarmerCacheModel.localAddress = getLocalAddress();

		String localAddress = agricultueFarmerCacheModel.localAddress;

		if ((localAddress != null) && (localAddress.length() == 0)) {
			agricultueFarmerCacheModel.localAddress = null;
		}

		agricultueFarmerCacheModel.taxpayerRegistrationNumber =
			getTaxpayerRegistrationNumber();

		String taxpayerRegistrationNumber =
			agricultueFarmerCacheModel.taxpayerRegistrationNumber;

		if ((taxpayerRegistrationNumber != null) &&
			(taxpayerRegistrationNumber.length() == 0)) {

			agricultueFarmerCacheModel.taxpayerRegistrationNumber = null;
		}

		agricultueFarmerCacheModel.farmerRegistrationNumber =
			getFarmerRegistrationNumber();

		String farmerRegistrationNumber =
			agricultueFarmerCacheModel.farmerRegistrationNumber;

		if ((farmerRegistrationNumber != null) &&
			(farmerRegistrationNumber.length() == 0)) {

			agricultueFarmerCacheModel.farmerRegistrationNumber = null;
		}

		Date dateOfIncorporation = getDateOfIncorporation();

		if (dateOfIncorporation != null) {
			agricultueFarmerCacheModel.dateOfIncorporation =
				dateOfIncorporation.getTime();
		}
		else {
			agricultueFarmerCacheModel.dateOfIncorporation = Long.MIN_VALUE;
		}

		agricultueFarmerCacheModel.telephoneNumber = getTelephoneNumber();

		String telephoneNumber = agricultueFarmerCacheModel.telephoneNumber;

		if ((telephoneNumber != null) && (telephoneNumber.length() == 0)) {
			agricultueFarmerCacheModel.telephoneNumber = null;
		}

		agricultueFarmerCacheModel.emailAddress = getEmailAddress();

		String emailAddress = agricultueFarmerCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			agricultueFarmerCacheModel.emailAddress = null;
		}

		agricultueFarmerCacheModel.agricultureApplicationId =
			getAgricultureApplicationId();

		return agricultueFarmerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AgricultueFarmer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AgricultueFarmer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AgricultueFarmer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AgricultueFarmer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AgricultueFarmer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AgricultueFarmer.class, ModelWrapper.class);

	}

	private long _agricultueFarmerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _farmerDetail;
	private String _nameOfApplicant;
	private String _nameOfFarm;
	private String _nameOfProprietor;
	private String _parishAddress;
	private String _localAddress;
	private String _taxpayerRegistrationNumber;
	private String _farmerRegistrationNumber;
	private Date _dateOfIncorporation;
	private String _telephoneNumber;
	private String _emailAddress;
	private long _agricultureApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AgricultueFarmer, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AgricultueFarmer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("agricultueFarmerId", _agricultueFarmerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("farmerDetail", _farmerDetail);
		_columnOriginalValues.put("nameOfApplicant", _nameOfApplicant);
		_columnOriginalValues.put("nameOfFarm", _nameOfFarm);
		_columnOriginalValues.put("nameOfProprietor", _nameOfProprietor);
		_columnOriginalValues.put("parishAddress", _parishAddress);
		_columnOriginalValues.put("localAddress", _localAddress);
		_columnOriginalValues.put(
			"taxpayerRegistrationNumber", _taxpayerRegistrationNumber);
		_columnOriginalValues.put(
			"farmerRegistrationNumber", _farmerRegistrationNumber);
		_columnOriginalValues.put("dateOfIncorporation", _dateOfIncorporation);
		_columnOriginalValues.put("telephoneNumber", _telephoneNumber);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put(
			"agricultureApplicationId", _agricultureApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("agricultueFarmerId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("farmerDetail", 128L);

		columnBitmasks.put("nameOfApplicant", 256L);

		columnBitmasks.put("nameOfFarm", 512L);

		columnBitmasks.put("nameOfProprietor", 1024L);

		columnBitmasks.put("parishAddress", 2048L);

		columnBitmasks.put("localAddress", 4096L);

		columnBitmasks.put("taxpayerRegistrationNumber", 8192L);

		columnBitmasks.put("farmerRegistrationNumber", 16384L);

		columnBitmasks.put("dateOfIncorporation", 32768L);

		columnBitmasks.put("telephoneNumber", 65536L);

		columnBitmasks.put("emailAddress", 131072L);

		columnBitmasks.put("agricultureApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AgricultueFarmer _escapedModel;

}