/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.manufacturing.application.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.manufacturing.application.stages.services.model.ManufacturingRecommendationToJCA;
import com.nbp.manufacturing.application.stages.services.model.ManufacturingRecommendationToJCAModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ManufacturingRecommendationToJCA service. Represents a row in the &quot;nbp_manufacturing_rec_jca&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ManufacturingRecommendationToJCAModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManufacturingRecommendationToJCAImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ManufacturingRecommendationToJCAImpl
 * @generated
 */
@JSON(strict = true)
public class ManufacturingRecommendationToJCAModelImpl
	extends BaseModelImpl<ManufacturingRecommendationToJCA>
	implements ManufacturingRecommendationToJCAModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manufacturing recommendation to jca model instance should use the <code>ManufacturingRecommendationToJCA</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_manufacturing_rec_jca";

	public static final Object[][] TABLE_COLUMNS = {
		{"manufacturingJCAId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"date_", Types.TIMESTAMP}, {"recommendationToJCA", Types.VARCHAR},
		{"recommendation", Types.VARCHAR},
		{"numberOfMIICInspectors", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("manufacturingJCAId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("recommendationToJCA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recommendation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfMIICInspectors", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_manufacturing_rec_jca (manufacturingJCAId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,date_ DATE null,recommendationToJCA VARCHAR(75) null,recommendation VARCHAR(75) null,numberOfMIICInspectors VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_manufacturing_rec_jca";

	public static final String ORDER_BY_JPQL =
		" ORDER BY manufacturingRecommendationToJCA.manufacturingJCAId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_manufacturing_rec_jca.manufacturingJCAId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANUFACTURINGJCAID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ManufacturingRecommendationToJCAModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _manufacturingJCAId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setManufacturingJCAId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _manufacturingJCAId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ManufacturingRecommendationToJCA.class;
	}

	@Override
	public String getModelClassName() {
		return ManufacturingRecommendationToJCA.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ManufacturingRecommendationToJCA, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<ManufacturingRecommendationToJCA, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManufacturingRecommendationToJCA, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(ManufacturingRecommendationToJCA)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ManufacturingRecommendationToJCA, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ManufacturingRecommendationToJCA, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ManufacturingRecommendationToJCA)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ManufacturingRecommendationToJCA, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ManufacturingRecommendationToJCA, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<ManufacturingRecommendationToJCA, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<ManufacturingRecommendationToJCA, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<ManufacturingRecommendationToJCA, Object>>();

			attributeGetterFunctions.put(
				"manufacturingJCAId",
				ManufacturingRecommendationToJCA::getManufacturingJCAId);
			attributeGetterFunctions.put(
				"groupId", ManufacturingRecommendationToJCA::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ManufacturingRecommendationToJCA::getCompanyId);
			attributeGetterFunctions.put(
				"userId", ManufacturingRecommendationToJCA::getUserId);
			attributeGetterFunctions.put(
				"userName", ManufacturingRecommendationToJCA::getUserName);
			attributeGetterFunctions.put(
				"createDate", ManufacturingRecommendationToJCA::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				ManufacturingRecommendationToJCA::getModifiedDate);
			attributeGetterFunctions.put(
				"caseId", ManufacturingRecommendationToJCA::getCaseId);
			attributeGetterFunctions.put(
				"date", ManufacturingRecommendationToJCA::getDate);
			attributeGetterFunctions.put(
				"recommendationToJCA",
				ManufacturingRecommendationToJCA::getRecommendationToJCA);
			attributeGetterFunctions.put(
				"recommendation",
				ManufacturingRecommendationToJCA::getRecommendation);
			attributeGetterFunctions.put(
				"numberOfMIICInspectors",
				ManufacturingRecommendationToJCA::getNumberOfMIICInspectors);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ManufacturingRecommendationToJCA, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ManufacturingRecommendationToJCA, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<ManufacturingRecommendationToJCA, ?>>();

			attributeSetterBiConsumers.put(
				"manufacturingJCAId",
				(BiConsumer<ManufacturingRecommendationToJCA, Long>)
					ManufacturingRecommendationToJCA::setManufacturingJCAId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ManufacturingRecommendationToJCA, Long>)
					ManufacturingRecommendationToJCA::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ManufacturingRecommendationToJCA, Long>)
					ManufacturingRecommendationToJCA::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ManufacturingRecommendationToJCA, Long>)
					ManufacturingRecommendationToJCA::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ManufacturingRecommendationToJCA, String>)
					ManufacturingRecommendationToJCA::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ManufacturingRecommendationToJCA, Date>)
					ManufacturingRecommendationToJCA::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ManufacturingRecommendationToJCA, Date>)
					ManufacturingRecommendationToJCA::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<ManufacturingRecommendationToJCA, String>)
					ManufacturingRecommendationToJCA::setCaseId);
			attributeSetterBiConsumers.put(
				"date",
				(BiConsumer<ManufacturingRecommendationToJCA, Date>)
					ManufacturingRecommendationToJCA::setDate);
			attributeSetterBiConsumers.put(
				"recommendationToJCA",
				(BiConsumer<ManufacturingRecommendationToJCA, String>)
					ManufacturingRecommendationToJCA::setRecommendationToJCA);
			attributeSetterBiConsumers.put(
				"recommendation",
				(BiConsumer<ManufacturingRecommendationToJCA, String>)
					ManufacturingRecommendationToJCA::setRecommendation);
			attributeSetterBiConsumers.put(
				"numberOfMIICInspectors",
				(BiConsumer<ManufacturingRecommendationToJCA, String>)
					ManufacturingRecommendationToJCA::
						setNumberOfMIICInspectors);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getManufacturingJCAId() {
		return _manufacturingJCAId;
	}

	@Override
	public void setManufacturingJCAId(long manufacturingJCAId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturingJCAId = manufacturingJCAId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	@JSON
	@Override
	public String getRecommendationToJCA() {
		if (_recommendationToJCA == null) {
			return "";
		}
		else {
			return _recommendationToJCA;
		}
	}

	@Override
	public void setRecommendationToJCA(String recommendationToJCA) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recommendationToJCA = recommendationToJCA;
	}

	@JSON
	@Override
	public String getRecommendation() {
		if (_recommendation == null) {
			return "";
		}
		else {
			return _recommendation;
		}
	}

	@Override
	public void setRecommendation(String recommendation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recommendation = recommendation;
	}

	@JSON
	@Override
	public String getNumberOfMIICInspectors() {
		if (_numberOfMIICInspectors == null) {
			return "";
		}
		else {
			return _numberOfMIICInspectors;
		}
	}

	@Override
	public void setNumberOfMIICInspectors(String numberOfMIICInspectors) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfMIICInspectors = numberOfMIICInspectors;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ManufacturingRecommendationToJCA.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ManufacturingRecommendationToJCA toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ManufacturingRecommendationToJCA>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManufacturingRecommendationToJCAImpl
			manufacturingRecommendationToJCAImpl =
				new ManufacturingRecommendationToJCAImpl();

		manufacturingRecommendationToJCAImpl.setManufacturingJCAId(
			getManufacturingJCAId());
		manufacturingRecommendationToJCAImpl.setGroupId(getGroupId());
		manufacturingRecommendationToJCAImpl.setCompanyId(getCompanyId());
		manufacturingRecommendationToJCAImpl.setUserId(getUserId());
		manufacturingRecommendationToJCAImpl.setUserName(getUserName());
		manufacturingRecommendationToJCAImpl.setCreateDate(getCreateDate());
		manufacturingRecommendationToJCAImpl.setModifiedDate(getModifiedDate());
		manufacturingRecommendationToJCAImpl.setCaseId(getCaseId());
		manufacturingRecommendationToJCAImpl.setDate(getDate());
		manufacturingRecommendationToJCAImpl.setRecommendationToJCA(
			getRecommendationToJCA());
		manufacturingRecommendationToJCAImpl.setRecommendation(
			getRecommendation());
		manufacturingRecommendationToJCAImpl.setNumberOfMIICInspectors(
			getNumberOfMIICInspectors());

		manufacturingRecommendationToJCAImpl.resetOriginalValues();

		return manufacturingRecommendationToJCAImpl;
	}

	@Override
	public ManufacturingRecommendationToJCA cloneWithOriginalValues() {
		ManufacturingRecommendationToJCAImpl
			manufacturingRecommendationToJCAImpl =
				new ManufacturingRecommendationToJCAImpl();

		manufacturingRecommendationToJCAImpl.setManufacturingJCAId(
			this.<Long>getColumnOriginalValue("manufacturingJCAId"));
		manufacturingRecommendationToJCAImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		manufacturingRecommendationToJCAImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		manufacturingRecommendationToJCAImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		manufacturingRecommendationToJCAImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		manufacturingRecommendationToJCAImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		manufacturingRecommendationToJCAImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		manufacturingRecommendationToJCAImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		manufacturingRecommendationToJCAImpl.setDate(
			this.<Date>getColumnOriginalValue("date_"));
		manufacturingRecommendationToJCAImpl.setRecommendationToJCA(
			this.<String>getColumnOriginalValue("recommendationToJCA"));
		manufacturingRecommendationToJCAImpl.setRecommendation(
			this.<String>getColumnOriginalValue("recommendation"));
		manufacturingRecommendationToJCAImpl.setNumberOfMIICInspectors(
			this.<String>getColumnOriginalValue("numberOfMIICInspectors"));

		return manufacturingRecommendationToJCAImpl;
	}

	@Override
	public int compareTo(
		ManufacturingRecommendationToJCA manufacturingRecommendationToJCA) {

		long primaryKey = manufacturingRecommendationToJCA.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ManufacturingRecommendationToJCA)) {
			return false;
		}

		ManufacturingRecommendationToJCA manufacturingRecommendationToJCA =
			(ManufacturingRecommendationToJCA)object;

		long primaryKey = manufacturingRecommendationToJCA.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ManufacturingRecommendationToJCA> toCacheModel() {
		ManufacturingRecommendationToJCACacheModel
			manufacturingRecommendationToJCACacheModel =
				new ManufacturingRecommendationToJCACacheModel();

		manufacturingRecommendationToJCACacheModel.manufacturingJCAId =
			getManufacturingJCAId();

		manufacturingRecommendationToJCACacheModel.groupId = getGroupId();

		manufacturingRecommendationToJCACacheModel.companyId = getCompanyId();

		manufacturingRecommendationToJCACacheModel.userId = getUserId();

		manufacturingRecommendationToJCACacheModel.userName = getUserName();

		String userName = manufacturingRecommendationToJCACacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			manufacturingRecommendationToJCACacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			manufacturingRecommendationToJCACacheModel.createDate =
				createDate.getTime();
		}
		else {
			manufacturingRecommendationToJCACacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			manufacturingRecommendationToJCACacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			manufacturingRecommendationToJCACacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		manufacturingRecommendationToJCACacheModel.caseId = getCaseId();

		String caseId = manufacturingRecommendationToJCACacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			manufacturingRecommendationToJCACacheModel.caseId = null;
		}

		Date date = getDate();

		if (date != null) {
			manufacturingRecommendationToJCACacheModel.date = date.getTime();
		}
		else {
			manufacturingRecommendationToJCACacheModel.date = Long.MIN_VALUE;
		}

		manufacturingRecommendationToJCACacheModel.recommendationToJCA =
			getRecommendationToJCA();

		String recommendationToJCA =
			manufacturingRecommendationToJCACacheModel.recommendationToJCA;

		if ((recommendationToJCA != null) &&
			(recommendationToJCA.length() == 0)) {

			manufacturingRecommendationToJCACacheModel.recommendationToJCA =
				null;
		}

		manufacturingRecommendationToJCACacheModel.recommendation =
			getRecommendation();

		String recommendation =
			manufacturingRecommendationToJCACacheModel.recommendation;

		if ((recommendation != null) && (recommendation.length() == 0)) {
			manufacturingRecommendationToJCACacheModel.recommendation = null;
		}

		manufacturingRecommendationToJCACacheModel.numberOfMIICInspectors =
			getNumberOfMIICInspectors();

		String numberOfMIICInspectors =
			manufacturingRecommendationToJCACacheModel.numberOfMIICInspectors;

		if ((numberOfMIICInspectors != null) &&
			(numberOfMIICInspectors.length() == 0)) {

			manufacturingRecommendationToJCACacheModel.numberOfMIICInspectors =
				null;
		}

		return manufacturingRecommendationToJCACacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ManufacturingRecommendationToJCA, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<ManufacturingRecommendationToJCA, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManufacturingRecommendationToJCA, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ManufacturingRecommendationToJCA)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, ManufacturingRecommendationToJCA>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						ManufacturingRecommendationToJCA.class,
						ModelWrapper.class);

	}

	private long _manufacturingJCAId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private Date _date;
	private String _recommendationToJCA;
	private String _recommendation;
	private String _numberOfMIICInspectors;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ManufacturingRecommendationToJCA, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ManufacturingRecommendationToJCA)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("manufacturingJCAId", _manufacturingJCAId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("date_", _date);
		_columnOriginalValues.put("recommendationToJCA", _recommendationToJCA);
		_columnOriginalValues.put("recommendation", _recommendation);
		_columnOriginalValues.put(
			"numberOfMIICInspectors", _numberOfMIICInspectors);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("date_", "date");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("manufacturingJCAId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("date_", 256L);

		columnBitmasks.put("recommendationToJCA", 512L);

		columnBitmasks.put("recommendation", 1024L);

		columnBitmasks.put("numberOfMIICInspectors", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ManufacturingRecommendationToJCA _escapedModel;

}