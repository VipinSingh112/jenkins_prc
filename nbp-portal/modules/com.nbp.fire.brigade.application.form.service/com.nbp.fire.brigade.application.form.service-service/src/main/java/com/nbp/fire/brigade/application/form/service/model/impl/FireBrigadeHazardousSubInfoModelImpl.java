/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.fire.brigade.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.fire.brigade.application.form.service.model.FireBrigadeHazardousSubInfo;
import com.nbp.fire.brigade.application.form.service.model.FireBrigadeHazardousSubInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FireBrigadeHazardousSubInfo service. Represents a row in the &quot;nbp_fire_hazar_sub_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FireBrigadeHazardousSubInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FireBrigadeHazardousSubInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FireBrigadeHazardousSubInfoImpl
 * @generated
 */
@JSON(strict = true)
public class FireBrigadeHazardousSubInfoModelImpl
	extends BaseModelImpl<FireBrigadeHazardousSubInfo>
	implements FireBrigadeHazardousSubInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fire brigade hazardous sub info model instance should use the <code>FireBrigadeHazardousSubInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_fire_hazar_sub_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"fireBrigadeHazardousSubInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lpgCylinder", Types.VARCHAR}, {"flammableGases", Types.VARCHAR},
		{"flammableCombustibleLiquid", Types.VARCHAR},
		{"chemicalsLiquid", Types.VARCHAR}, {"chemicalsPowder", Types.VARCHAR},
		{"explosives", Types.VARCHAR},
		{"otherHazardousSubstance", Types.VARCHAR},
		{"fireBrigadeApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fireBrigadeHazardousSubInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lpgCylinder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flammableGases", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flammableCombustibleLiquid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("chemicalsLiquid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("chemicalsPowder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("explosives", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherHazardousSubstance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fireBrigadeApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_fire_hazar_sub_info (fireBrigadeHazardousSubInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lpgCylinder VARCHAR(75) null,flammableGases VARCHAR(75) null,flammableCombustibleLiquid VARCHAR(75) null,chemicalsLiquid VARCHAR(75) null,chemicalsPowder VARCHAR(75) null,explosives VARCHAR(75) null,otherHazardousSubstance VARCHAR(75) null,fireBrigadeApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_fire_hazar_sub_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fireBrigadeHazardousSubInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_fire_hazar_sub_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIREBRIGADEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FireBrigadeHazardousSubInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fireBrigadeHazardousSubInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFireBrigadeHazardousSubInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fireBrigadeHazardousSubInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FireBrigadeHazardousSubInfo.class;
	}

	@Override
	public String getModelClassName() {
		return FireBrigadeHazardousSubInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FireBrigadeHazardousSubInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FireBrigadeHazardousSubInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FireBrigadeHazardousSubInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(FireBrigadeHazardousSubInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FireBrigadeHazardousSubInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FireBrigadeHazardousSubInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FireBrigadeHazardousSubInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FireBrigadeHazardousSubInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FireBrigadeHazardousSubInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<FireBrigadeHazardousSubInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<FireBrigadeHazardousSubInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<FireBrigadeHazardousSubInfo, Object>>();

			attributeGetterFunctions.put(
				"fireBrigadeHazardousSubInfoId",
				FireBrigadeHazardousSubInfo::getFireBrigadeHazardousSubInfoId);
			attributeGetterFunctions.put(
				"groupId", FireBrigadeHazardousSubInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FireBrigadeHazardousSubInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FireBrigadeHazardousSubInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", FireBrigadeHazardousSubInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", FireBrigadeHazardousSubInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FireBrigadeHazardousSubInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"lpgCylinder", FireBrigadeHazardousSubInfo::getLpgCylinder);
			attributeGetterFunctions.put(
				"flammableGases",
				FireBrigadeHazardousSubInfo::getFlammableGases);
			attributeGetterFunctions.put(
				"flammableCombustibleLiquid",
				FireBrigadeHazardousSubInfo::getFlammableCombustibleLiquid);
			attributeGetterFunctions.put(
				"chemicalsLiquid",
				FireBrigadeHazardousSubInfo::getChemicalsLiquid);
			attributeGetterFunctions.put(
				"chemicalsPowder",
				FireBrigadeHazardousSubInfo::getChemicalsPowder);
			attributeGetterFunctions.put(
				"explosives", FireBrigadeHazardousSubInfo::getExplosives);
			attributeGetterFunctions.put(
				"otherHazardousSubstance",
				FireBrigadeHazardousSubInfo::getOtherHazardousSubstance);
			attributeGetterFunctions.put(
				"fireBrigadeApplicationId",
				FireBrigadeHazardousSubInfo::getFireBrigadeApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FireBrigadeHazardousSubInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FireBrigadeHazardousSubInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FireBrigadeHazardousSubInfo, ?>>();

			attributeSetterBiConsumers.put(
				"fireBrigadeHazardousSubInfoId",
				(BiConsumer<FireBrigadeHazardousSubInfo, Long>)
					FireBrigadeHazardousSubInfo::
						setFireBrigadeHazardousSubInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FireBrigadeHazardousSubInfo, Long>)
					FireBrigadeHazardousSubInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FireBrigadeHazardousSubInfo, Long>)
					FireBrigadeHazardousSubInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FireBrigadeHazardousSubInfo, Long>)
					FireBrigadeHazardousSubInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FireBrigadeHazardousSubInfo, String>)
					FireBrigadeHazardousSubInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FireBrigadeHazardousSubInfo, Date>)
					FireBrigadeHazardousSubInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FireBrigadeHazardousSubInfo, Date>)
					FireBrigadeHazardousSubInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"lpgCylinder",
				(BiConsumer<FireBrigadeHazardousSubInfo, String>)
					FireBrigadeHazardousSubInfo::setLpgCylinder);
			attributeSetterBiConsumers.put(
				"flammableGases",
				(BiConsumer<FireBrigadeHazardousSubInfo, String>)
					FireBrigadeHazardousSubInfo::setFlammableGases);
			attributeSetterBiConsumers.put(
				"flammableCombustibleLiquid",
				(BiConsumer<FireBrigadeHazardousSubInfo, String>)
					FireBrigadeHazardousSubInfo::setFlammableCombustibleLiquid);
			attributeSetterBiConsumers.put(
				"chemicalsLiquid",
				(BiConsumer<FireBrigadeHazardousSubInfo, String>)
					FireBrigadeHazardousSubInfo::setChemicalsLiquid);
			attributeSetterBiConsumers.put(
				"chemicalsPowder",
				(BiConsumer<FireBrigadeHazardousSubInfo, String>)
					FireBrigadeHazardousSubInfo::setChemicalsPowder);
			attributeSetterBiConsumers.put(
				"explosives",
				(BiConsumer<FireBrigadeHazardousSubInfo, String>)
					FireBrigadeHazardousSubInfo::setExplosives);
			attributeSetterBiConsumers.put(
				"otherHazardousSubstance",
				(BiConsumer<FireBrigadeHazardousSubInfo, String>)
					FireBrigadeHazardousSubInfo::setOtherHazardousSubstance);
			attributeSetterBiConsumers.put(
				"fireBrigadeApplicationId",
				(BiConsumer<FireBrigadeHazardousSubInfo, Long>)
					FireBrigadeHazardousSubInfo::setFireBrigadeApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFireBrigadeHazardousSubInfoId() {
		return _fireBrigadeHazardousSubInfoId;
	}

	@Override
	public void setFireBrigadeHazardousSubInfoId(
		long fireBrigadeHazardousSubInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fireBrigadeHazardousSubInfoId = fireBrigadeHazardousSubInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLpgCylinder() {
		if (_lpgCylinder == null) {
			return "";
		}
		else {
			return _lpgCylinder;
		}
	}

	@Override
	public void setLpgCylinder(String lpgCylinder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lpgCylinder = lpgCylinder;
	}

	@JSON
	@Override
	public String getFlammableGases() {
		if (_flammableGases == null) {
			return "";
		}
		else {
			return _flammableGases;
		}
	}

	@Override
	public void setFlammableGases(String flammableGases) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_flammableGases = flammableGases;
	}

	@JSON
	@Override
	public String getFlammableCombustibleLiquid() {
		if (_flammableCombustibleLiquid == null) {
			return "";
		}
		else {
			return _flammableCombustibleLiquid;
		}
	}

	@Override
	public void setFlammableCombustibleLiquid(
		String flammableCombustibleLiquid) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_flammableCombustibleLiquid = flammableCombustibleLiquid;
	}

	@JSON
	@Override
	public String getChemicalsLiquid() {
		if (_chemicalsLiquid == null) {
			return "";
		}
		else {
			return _chemicalsLiquid;
		}
	}

	@Override
	public void setChemicalsLiquid(String chemicalsLiquid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_chemicalsLiquid = chemicalsLiquid;
	}

	@JSON
	@Override
	public String getChemicalsPowder() {
		if (_chemicalsPowder == null) {
			return "";
		}
		else {
			return _chemicalsPowder;
		}
	}

	@Override
	public void setChemicalsPowder(String chemicalsPowder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_chemicalsPowder = chemicalsPowder;
	}

	@JSON
	@Override
	public String getExplosives() {
		if (_explosives == null) {
			return "";
		}
		else {
			return _explosives;
		}
	}

	@Override
	public void setExplosives(String explosives) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_explosives = explosives;
	}

	@JSON
	@Override
	public String getOtherHazardousSubstance() {
		if (_otherHazardousSubstance == null) {
			return "";
		}
		else {
			return _otherHazardousSubstance;
		}
	}

	@Override
	public void setOtherHazardousSubstance(String otherHazardousSubstance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherHazardousSubstance = otherHazardousSubstance;
	}

	@JSON
	@Override
	public long getFireBrigadeApplicationId() {
		return _fireBrigadeApplicationId;
	}

	@Override
	public void setFireBrigadeApplicationId(long fireBrigadeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fireBrigadeApplicationId = fireBrigadeApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFireBrigadeApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("fireBrigadeApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FireBrigadeHazardousSubInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FireBrigadeHazardousSubInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FireBrigadeHazardousSubInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FireBrigadeHazardousSubInfoImpl fireBrigadeHazardousSubInfoImpl =
			new FireBrigadeHazardousSubInfoImpl();

		fireBrigadeHazardousSubInfoImpl.setFireBrigadeHazardousSubInfoId(
			getFireBrigadeHazardousSubInfoId());
		fireBrigadeHazardousSubInfoImpl.setGroupId(getGroupId());
		fireBrigadeHazardousSubInfoImpl.setCompanyId(getCompanyId());
		fireBrigadeHazardousSubInfoImpl.setUserId(getUserId());
		fireBrigadeHazardousSubInfoImpl.setUserName(getUserName());
		fireBrigadeHazardousSubInfoImpl.setCreateDate(getCreateDate());
		fireBrigadeHazardousSubInfoImpl.setModifiedDate(getModifiedDate());
		fireBrigadeHazardousSubInfoImpl.setLpgCylinder(getLpgCylinder());
		fireBrigadeHazardousSubInfoImpl.setFlammableGases(getFlammableGases());
		fireBrigadeHazardousSubInfoImpl.setFlammableCombustibleLiquid(
			getFlammableCombustibleLiquid());
		fireBrigadeHazardousSubInfoImpl.setChemicalsLiquid(
			getChemicalsLiquid());
		fireBrigadeHazardousSubInfoImpl.setChemicalsPowder(
			getChemicalsPowder());
		fireBrigadeHazardousSubInfoImpl.setExplosives(getExplosives());
		fireBrigadeHazardousSubInfoImpl.setOtherHazardousSubstance(
			getOtherHazardousSubstance());
		fireBrigadeHazardousSubInfoImpl.setFireBrigadeApplicationId(
			getFireBrigadeApplicationId());

		fireBrigadeHazardousSubInfoImpl.resetOriginalValues();

		return fireBrigadeHazardousSubInfoImpl;
	}

	@Override
	public FireBrigadeHazardousSubInfo cloneWithOriginalValues() {
		FireBrigadeHazardousSubInfoImpl fireBrigadeHazardousSubInfoImpl =
			new FireBrigadeHazardousSubInfoImpl();

		fireBrigadeHazardousSubInfoImpl.setFireBrigadeHazardousSubInfoId(
			this.<Long>getColumnOriginalValue("fireBrigadeHazardousSubInfoId"));
		fireBrigadeHazardousSubInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		fireBrigadeHazardousSubInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		fireBrigadeHazardousSubInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		fireBrigadeHazardousSubInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		fireBrigadeHazardousSubInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		fireBrigadeHazardousSubInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		fireBrigadeHazardousSubInfoImpl.setLpgCylinder(
			this.<String>getColumnOriginalValue("lpgCylinder"));
		fireBrigadeHazardousSubInfoImpl.setFlammableGases(
			this.<String>getColumnOriginalValue("flammableGases"));
		fireBrigadeHazardousSubInfoImpl.setFlammableCombustibleLiquid(
			this.<String>getColumnOriginalValue("flammableCombustibleLiquid"));
		fireBrigadeHazardousSubInfoImpl.setChemicalsLiquid(
			this.<String>getColumnOriginalValue("chemicalsLiquid"));
		fireBrigadeHazardousSubInfoImpl.setChemicalsPowder(
			this.<String>getColumnOriginalValue("chemicalsPowder"));
		fireBrigadeHazardousSubInfoImpl.setExplosives(
			this.<String>getColumnOriginalValue("explosives"));
		fireBrigadeHazardousSubInfoImpl.setOtherHazardousSubstance(
			this.<String>getColumnOriginalValue("otherHazardousSubstance"));
		fireBrigadeHazardousSubInfoImpl.setFireBrigadeApplicationId(
			this.<Long>getColumnOriginalValue("fireBrigadeApplicationId"));

		return fireBrigadeHazardousSubInfoImpl;
	}

	@Override
	public int compareTo(
		FireBrigadeHazardousSubInfo fireBrigadeHazardousSubInfo) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), fireBrigadeHazardousSubInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FireBrigadeHazardousSubInfo)) {
			return false;
		}

		FireBrigadeHazardousSubInfo fireBrigadeHazardousSubInfo =
			(FireBrigadeHazardousSubInfo)object;

		long primaryKey = fireBrigadeHazardousSubInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FireBrigadeHazardousSubInfo> toCacheModel() {
		FireBrigadeHazardousSubInfoCacheModel
			fireBrigadeHazardousSubInfoCacheModel =
				new FireBrigadeHazardousSubInfoCacheModel();

		fireBrigadeHazardousSubInfoCacheModel.fireBrigadeHazardousSubInfoId =
			getFireBrigadeHazardousSubInfoId();

		fireBrigadeHazardousSubInfoCacheModel.groupId = getGroupId();

		fireBrigadeHazardousSubInfoCacheModel.companyId = getCompanyId();

		fireBrigadeHazardousSubInfoCacheModel.userId = getUserId();

		fireBrigadeHazardousSubInfoCacheModel.userName = getUserName();

		String userName = fireBrigadeHazardousSubInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fireBrigadeHazardousSubInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fireBrigadeHazardousSubInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			fireBrigadeHazardousSubInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fireBrigadeHazardousSubInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			fireBrigadeHazardousSubInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fireBrigadeHazardousSubInfoCacheModel.lpgCylinder = getLpgCylinder();

		String lpgCylinder = fireBrigadeHazardousSubInfoCacheModel.lpgCylinder;

		if ((lpgCylinder != null) && (lpgCylinder.length() == 0)) {
			fireBrigadeHazardousSubInfoCacheModel.lpgCylinder = null;
		}

		fireBrigadeHazardousSubInfoCacheModel.flammableGases =
			getFlammableGases();

		String flammableGases =
			fireBrigadeHazardousSubInfoCacheModel.flammableGases;

		if ((flammableGases != null) && (flammableGases.length() == 0)) {
			fireBrigadeHazardousSubInfoCacheModel.flammableGases = null;
		}

		fireBrigadeHazardousSubInfoCacheModel.flammableCombustibleLiquid =
			getFlammableCombustibleLiquid();

		String flammableCombustibleLiquid =
			fireBrigadeHazardousSubInfoCacheModel.flammableCombustibleLiquid;

		if ((flammableCombustibleLiquid != null) &&
			(flammableCombustibleLiquid.length() == 0)) {

			fireBrigadeHazardousSubInfoCacheModel.flammableCombustibleLiquid =
				null;
		}

		fireBrigadeHazardousSubInfoCacheModel.chemicalsLiquid =
			getChemicalsLiquid();

		String chemicalsLiquid =
			fireBrigadeHazardousSubInfoCacheModel.chemicalsLiquid;

		if ((chemicalsLiquid != null) && (chemicalsLiquid.length() == 0)) {
			fireBrigadeHazardousSubInfoCacheModel.chemicalsLiquid = null;
		}

		fireBrigadeHazardousSubInfoCacheModel.chemicalsPowder =
			getChemicalsPowder();

		String chemicalsPowder =
			fireBrigadeHazardousSubInfoCacheModel.chemicalsPowder;

		if ((chemicalsPowder != null) && (chemicalsPowder.length() == 0)) {
			fireBrigadeHazardousSubInfoCacheModel.chemicalsPowder = null;
		}

		fireBrigadeHazardousSubInfoCacheModel.explosives = getExplosives();

		String explosives = fireBrigadeHazardousSubInfoCacheModel.explosives;

		if ((explosives != null) && (explosives.length() == 0)) {
			fireBrigadeHazardousSubInfoCacheModel.explosives = null;
		}

		fireBrigadeHazardousSubInfoCacheModel.otherHazardousSubstance =
			getOtherHazardousSubstance();

		String otherHazardousSubstance =
			fireBrigadeHazardousSubInfoCacheModel.otherHazardousSubstance;

		if ((otherHazardousSubstance != null) &&
			(otherHazardousSubstance.length() == 0)) {

			fireBrigadeHazardousSubInfoCacheModel.otherHazardousSubstance =
				null;
		}

		fireBrigadeHazardousSubInfoCacheModel.fireBrigadeApplicationId =
			getFireBrigadeApplicationId();

		return fireBrigadeHazardousSubInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FireBrigadeHazardousSubInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FireBrigadeHazardousSubInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FireBrigadeHazardousSubInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FireBrigadeHazardousSubInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FireBrigadeHazardousSubInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						FireBrigadeHazardousSubInfo.class, ModelWrapper.class);

	}

	private long _fireBrigadeHazardousSubInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _lpgCylinder;
	private String _flammableGases;
	private String _flammableCombustibleLiquid;
	private String _chemicalsLiquid;
	private String _chemicalsPowder;
	private String _explosives;
	private String _otherHazardousSubstance;
	private long _fireBrigadeApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FireBrigadeHazardousSubInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FireBrigadeHazardousSubInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"fireBrigadeHazardousSubInfoId", _fireBrigadeHazardousSubInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("lpgCylinder", _lpgCylinder);
		_columnOriginalValues.put("flammableGases", _flammableGases);
		_columnOriginalValues.put(
			"flammableCombustibleLiquid", _flammableCombustibleLiquid);
		_columnOriginalValues.put("chemicalsLiquid", _chemicalsLiquid);
		_columnOriginalValues.put("chemicalsPowder", _chemicalsPowder);
		_columnOriginalValues.put("explosives", _explosives);
		_columnOriginalValues.put(
			"otherHazardousSubstance", _otherHazardousSubstance);
		_columnOriginalValues.put(
			"fireBrigadeApplicationId", _fireBrigadeApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fireBrigadeHazardousSubInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("lpgCylinder", 128L);

		columnBitmasks.put("flammableGases", 256L);

		columnBitmasks.put("flammableCombustibleLiquid", 512L);

		columnBitmasks.put("chemicalsLiquid", 1024L);

		columnBitmasks.put("chemicalsPowder", 2048L);

		columnBitmasks.put("explosives", 4096L);

		columnBitmasks.put("otherHazardousSubstance", 8192L);

		columnBitmasks.put("fireBrigadeApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FireBrigadeHazardousSubInfo _escapedModel;

}