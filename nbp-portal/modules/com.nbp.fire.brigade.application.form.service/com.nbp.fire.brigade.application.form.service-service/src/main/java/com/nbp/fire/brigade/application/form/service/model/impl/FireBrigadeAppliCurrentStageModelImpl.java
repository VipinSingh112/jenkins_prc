/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.fire.brigade.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.fire.brigade.application.form.service.model.FireBrigadeAppliCurrentStage;
import com.nbp.fire.brigade.application.form.service.model.FireBrigadeAppliCurrentStageModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FireBrigadeAppliCurrentStage service. Represents a row in the &quot;nbp_fire_app_stage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FireBrigadeAppliCurrentStageModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FireBrigadeAppliCurrentStageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FireBrigadeAppliCurrentStageImpl
 * @generated
 */
@JSON(strict = true)
public class FireBrigadeAppliCurrentStageModelImpl
	extends BaseModelImpl<FireBrigadeAppliCurrentStage>
	implements FireBrigadeAppliCurrentStageModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fire brigade appli current stage model instance should use the <code>FireBrigadeAppliCurrentStage</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_fire_app_stage";

	public static final Object[][] TABLE_COLUMNS = {
		{"fireBrigadeAppliCurrentStageId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"currentStage", Types.VARCHAR}, {"lastFormStep", Types.VARCHAR},
		{"fireBrigadeApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fireBrigadeAppliCurrentStageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("currentStage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastFormStep", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fireBrigadeApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_fire_app_stage (fireBrigadeAppliCurrentStageId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,currentStage VARCHAR(75) null,lastFormStep VARCHAR(75) null,fireBrigadeApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table nbp_fire_app_stage";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fireBrigadeAppliCurrentStage.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_fire_app_stage.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIREBRIGADEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FireBrigadeAppliCurrentStageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fireBrigadeAppliCurrentStageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFireBrigadeAppliCurrentStageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fireBrigadeAppliCurrentStageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FireBrigadeAppliCurrentStage.class;
	}

	@Override
	public String getModelClassName() {
		return FireBrigadeAppliCurrentStage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FireBrigadeAppliCurrentStage, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FireBrigadeAppliCurrentStage, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FireBrigadeAppliCurrentStage, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(FireBrigadeAppliCurrentStage)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FireBrigadeAppliCurrentStage, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FireBrigadeAppliCurrentStage, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FireBrigadeAppliCurrentStage)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FireBrigadeAppliCurrentStage, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FireBrigadeAppliCurrentStage, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<FireBrigadeAppliCurrentStage, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<FireBrigadeAppliCurrentStage, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<FireBrigadeAppliCurrentStage, Object>>();

			attributeGetterFunctions.put(
				"fireBrigadeAppliCurrentStageId",
				FireBrigadeAppliCurrentStage::
					getFireBrigadeAppliCurrentStageId);
			attributeGetterFunctions.put(
				"groupId", FireBrigadeAppliCurrentStage::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FireBrigadeAppliCurrentStage::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FireBrigadeAppliCurrentStage::getUserId);
			attributeGetterFunctions.put(
				"userName", FireBrigadeAppliCurrentStage::getUserName);
			attributeGetterFunctions.put(
				"createDate", FireBrigadeAppliCurrentStage::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FireBrigadeAppliCurrentStage::getModifiedDate);
			attributeGetterFunctions.put(
				"currentStage", FireBrigadeAppliCurrentStage::getCurrentStage);
			attributeGetterFunctions.put(
				"lastFormStep", FireBrigadeAppliCurrentStage::getLastFormStep);
			attributeGetterFunctions.put(
				"fireBrigadeApplicationId",
				FireBrigadeAppliCurrentStage::getFireBrigadeApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FireBrigadeAppliCurrentStage, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FireBrigadeAppliCurrentStage, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FireBrigadeAppliCurrentStage, ?>>();

			attributeSetterBiConsumers.put(
				"fireBrigadeAppliCurrentStageId",
				(BiConsumer<FireBrigadeAppliCurrentStage, Long>)
					FireBrigadeAppliCurrentStage::
						setFireBrigadeAppliCurrentStageId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FireBrigadeAppliCurrentStage, Long>)
					FireBrigadeAppliCurrentStage::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FireBrigadeAppliCurrentStage, Long>)
					FireBrigadeAppliCurrentStage::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FireBrigadeAppliCurrentStage, Long>)
					FireBrigadeAppliCurrentStage::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FireBrigadeAppliCurrentStage, String>)
					FireBrigadeAppliCurrentStage::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FireBrigadeAppliCurrentStage, Date>)
					FireBrigadeAppliCurrentStage::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FireBrigadeAppliCurrentStage, Date>)
					FireBrigadeAppliCurrentStage::setModifiedDate);
			attributeSetterBiConsumers.put(
				"currentStage",
				(BiConsumer<FireBrigadeAppliCurrentStage, String>)
					FireBrigadeAppliCurrentStage::setCurrentStage);
			attributeSetterBiConsumers.put(
				"lastFormStep",
				(BiConsumer<FireBrigadeAppliCurrentStage, String>)
					FireBrigadeAppliCurrentStage::setLastFormStep);
			attributeSetterBiConsumers.put(
				"fireBrigadeApplicationId",
				(BiConsumer<FireBrigadeAppliCurrentStage, Long>)
					FireBrigadeAppliCurrentStage::setFireBrigadeApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFireBrigadeAppliCurrentStageId() {
		return _fireBrigadeAppliCurrentStageId;
	}

	@Override
	public void setFireBrigadeAppliCurrentStageId(
		long fireBrigadeAppliCurrentStageId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fireBrigadeAppliCurrentStageId = fireBrigadeAppliCurrentStageId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCurrentStage() {
		if (_currentStage == null) {
			return "";
		}
		else {
			return _currentStage;
		}
	}

	@Override
	public void setCurrentStage(String currentStage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentStage = currentStage;
	}

	@JSON
	@Override
	public String getLastFormStep() {
		if (_lastFormStep == null) {
			return "";
		}
		else {
			return _lastFormStep;
		}
	}

	@Override
	public void setLastFormStep(String lastFormStep) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastFormStep = lastFormStep;
	}

	@JSON
	@Override
	public long getFireBrigadeApplicationId() {
		return _fireBrigadeApplicationId;
	}

	@Override
	public void setFireBrigadeApplicationId(long fireBrigadeApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fireBrigadeApplicationId = fireBrigadeApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFireBrigadeApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("fireBrigadeApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FireBrigadeAppliCurrentStage.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FireBrigadeAppliCurrentStage toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FireBrigadeAppliCurrentStage>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FireBrigadeAppliCurrentStageImpl fireBrigadeAppliCurrentStageImpl =
			new FireBrigadeAppliCurrentStageImpl();

		fireBrigadeAppliCurrentStageImpl.setFireBrigadeAppliCurrentStageId(
			getFireBrigadeAppliCurrentStageId());
		fireBrigadeAppliCurrentStageImpl.setGroupId(getGroupId());
		fireBrigadeAppliCurrentStageImpl.setCompanyId(getCompanyId());
		fireBrigadeAppliCurrentStageImpl.setUserId(getUserId());
		fireBrigadeAppliCurrentStageImpl.setUserName(getUserName());
		fireBrigadeAppliCurrentStageImpl.setCreateDate(getCreateDate());
		fireBrigadeAppliCurrentStageImpl.setModifiedDate(getModifiedDate());
		fireBrigadeAppliCurrentStageImpl.setCurrentStage(getCurrentStage());
		fireBrigadeAppliCurrentStageImpl.setLastFormStep(getLastFormStep());
		fireBrigadeAppliCurrentStageImpl.setFireBrigadeApplicationId(
			getFireBrigadeApplicationId());

		fireBrigadeAppliCurrentStageImpl.resetOriginalValues();

		return fireBrigadeAppliCurrentStageImpl;
	}

	@Override
	public FireBrigadeAppliCurrentStage cloneWithOriginalValues() {
		FireBrigadeAppliCurrentStageImpl fireBrigadeAppliCurrentStageImpl =
			new FireBrigadeAppliCurrentStageImpl();

		fireBrigadeAppliCurrentStageImpl.setFireBrigadeAppliCurrentStageId(
			this.<Long>getColumnOriginalValue(
				"fireBrigadeAppliCurrentStageId"));
		fireBrigadeAppliCurrentStageImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		fireBrigadeAppliCurrentStageImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		fireBrigadeAppliCurrentStageImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		fireBrigadeAppliCurrentStageImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		fireBrigadeAppliCurrentStageImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		fireBrigadeAppliCurrentStageImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		fireBrigadeAppliCurrentStageImpl.setCurrentStage(
			this.<String>getColumnOriginalValue("currentStage"));
		fireBrigadeAppliCurrentStageImpl.setLastFormStep(
			this.<String>getColumnOriginalValue("lastFormStep"));
		fireBrigadeAppliCurrentStageImpl.setFireBrigadeApplicationId(
			this.<Long>getColumnOriginalValue("fireBrigadeApplicationId"));

		return fireBrigadeAppliCurrentStageImpl;
	}

	@Override
	public int compareTo(
		FireBrigadeAppliCurrentStage fireBrigadeAppliCurrentStage) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), fireBrigadeAppliCurrentStage.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FireBrigadeAppliCurrentStage)) {
			return false;
		}

		FireBrigadeAppliCurrentStage fireBrigadeAppliCurrentStage =
			(FireBrigadeAppliCurrentStage)object;

		long primaryKey = fireBrigadeAppliCurrentStage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FireBrigadeAppliCurrentStage> toCacheModel() {
		FireBrigadeAppliCurrentStageCacheModel
			fireBrigadeAppliCurrentStageCacheModel =
				new FireBrigadeAppliCurrentStageCacheModel();

		fireBrigadeAppliCurrentStageCacheModel.fireBrigadeAppliCurrentStageId =
			getFireBrigadeAppliCurrentStageId();

		fireBrigadeAppliCurrentStageCacheModel.groupId = getGroupId();

		fireBrigadeAppliCurrentStageCacheModel.companyId = getCompanyId();

		fireBrigadeAppliCurrentStageCacheModel.userId = getUserId();

		fireBrigadeAppliCurrentStageCacheModel.userName = getUserName();

		String userName = fireBrigadeAppliCurrentStageCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fireBrigadeAppliCurrentStageCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fireBrigadeAppliCurrentStageCacheModel.createDate =
				createDate.getTime();
		}
		else {
			fireBrigadeAppliCurrentStageCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fireBrigadeAppliCurrentStageCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			fireBrigadeAppliCurrentStageCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		fireBrigadeAppliCurrentStageCacheModel.currentStage = getCurrentStage();

		String currentStage =
			fireBrigadeAppliCurrentStageCacheModel.currentStage;

		if ((currentStage != null) && (currentStage.length() == 0)) {
			fireBrigadeAppliCurrentStageCacheModel.currentStage = null;
		}

		fireBrigadeAppliCurrentStageCacheModel.lastFormStep = getLastFormStep();

		String lastFormStep =
			fireBrigadeAppliCurrentStageCacheModel.lastFormStep;

		if ((lastFormStep != null) && (lastFormStep.length() == 0)) {
			fireBrigadeAppliCurrentStageCacheModel.lastFormStep = null;
		}

		fireBrigadeAppliCurrentStageCacheModel.fireBrigadeApplicationId =
			getFireBrigadeApplicationId();

		return fireBrigadeAppliCurrentStageCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FireBrigadeAppliCurrentStage, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FireBrigadeAppliCurrentStage, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FireBrigadeAppliCurrentStage, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FireBrigadeAppliCurrentStage)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FireBrigadeAppliCurrentStage>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						FireBrigadeAppliCurrentStage.class, ModelWrapper.class);

	}

	private long _fireBrigadeAppliCurrentStageId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _currentStage;
	private String _lastFormStep;
	private long _fireBrigadeApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FireBrigadeAppliCurrentStage, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FireBrigadeAppliCurrentStage)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"fireBrigadeAppliCurrentStageId", _fireBrigadeAppliCurrentStageId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("currentStage", _currentStage);
		_columnOriginalValues.put("lastFormStep", _lastFormStep);
		_columnOriginalValues.put(
			"fireBrigadeApplicationId", _fireBrigadeApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fireBrigadeAppliCurrentStageId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("currentStage", 128L);

		columnBitmasks.put("lastFormStep", 256L);

		columnBitmasks.put("fireBrigadeApplicationId", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FireBrigadeAppliCurrentStage _escapedModel;

}