/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.stage.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.stage.services.model.HsraInspection;
import com.nbp.hsra.stage.services.model.HsraInspectionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HsraInspection service. Represents a row in the &quot;nbp_hsra_inspection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HsraInspectionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HsraInspectionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HsraInspectionImpl
 * @generated
 */
@JSON(strict = true)
public class HsraInspectionModelImpl
	extends BaseModelImpl<HsraInspection> implements HsraInspectionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hsra inspection model instance should use the <code>HsraInspection</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_inspection";

	public static final Object[][] TABLE_COLUMNS = {
		{"hsraInspectionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"dateOfInspection", Types.TIMESTAMP},
		{"timeOfInspection", Types.VARCHAR}, {"location", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"hsraApplicationId", Types.BIGINT},
		{"slotBookedByUser", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("hsraInspectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfInspection", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("timeOfInspection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("slotBookedByUser", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_inspection (hsraInspectionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,dateOfInspection DATE null,timeOfInspection VARCHAR(75) null,location VARCHAR(75) null,status VARCHAR(75) null,hsraApplicationId LONG,slotBookedByUser LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_inspection";

	public static final String ORDER_BY_JPQL =
		" ORDER BY hsraInspection.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_inspection.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SLOTBOOKEDBYUSER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HsraInspectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _hsraInspectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHsraInspectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _hsraInspectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HsraInspection.class;
	}

	@Override
	public String getModelClassName() {
		return HsraInspection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HsraInspection, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HsraInspection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HsraInspection, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((HsraInspection)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HsraInspection, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HsraInspection, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HsraInspection)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HsraInspection, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HsraInspection, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<HsraInspection, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<HsraInspection, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<HsraInspection, Object>>();

			attributeGetterFunctions.put(
				"hsraInspectionId", HsraInspection::getHsraInspectionId);
			attributeGetterFunctions.put("groupId", HsraInspection::getGroupId);
			attributeGetterFunctions.put(
				"companyId", HsraInspection::getCompanyId);
			attributeGetterFunctions.put("userId", HsraInspection::getUserId);
			attributeGetterFunctions.put(
				"userName", HsraInspection::getUserName);
			attributeGetterFunctions.put(
				"createDate", HsraInspection::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", HsraInspection::getModifiedDate);
			attributeGetterFunctions.put("caseId", HsraInspection::getCaseId);
			attributeGetterFunctions.put(
				"dateOfInspection", HsraInspection::getDateOfInspection);
			attributeGetterFunctions.put(
				"timeOfInspection", HsraInspection::getTimeOfInspection);
			attributeGetterFunctions.put(
				"location", HsraInspection::getLocation);
			attributeGetterFunctions.put("status", HsraInspection::getStatus);
			attributeGetterFunctions.put(
				"hsraApplicationId", HsraInspection::getHsraApplicationId);
			attributeGetterFunctions.put(
				"slotBookedByUser", HsraInspection::getSlotBookedByUser);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<HsraInspection, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<HsraInspection, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<HsraInspection, ?>>();

			attributeSetterBiConsumers.put(
				"hsraInspectionId",
				(BiConsumer<HsraInspection, Long>)
					HsraInspection::setHsraInspectionId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<HsraInspection, Long>)HsraInspection::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<HsraInspection, Long>)HsraInspection::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<HsraInspection, Long>)HsraInspection::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<HsraInspection, String>)
					HsraInspection::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<HsraInspection, Date>)
					HsraInspection::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<HsraInspection, Date>)
					HsraInspection::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<HsraInspection, String>)HsraInspection::setCaseId);
			attributeSetterBiConsumers.put(
				"dateOfInspection",
				(BiConsumer<HsraInspection, Date>)
					HsraInspection::setDateOfInspection);
			attributeSetterBiConsumers.put(
				"timeOfInspection",
				(BiConsumer<HsraInspection, String>)
					HsraInspection::setTimeOfInspection);
			attributeSetterBiConsumers.put(
				"location",
				(BiConsumer<HsraInspection, String>)
					HsraInspection::setLocation);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<HsraInspection, String>)HsraInspection::setStatus);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<HsraInspection, Long>)
					HsraInspection::setHsraApplicationId);
			attributeSetterBiConsumers.put(
				"slotBookedByUser",
				(BiConsumer<HsraInspection, Long>)
					HsraInspection::setSlotBookedByUser);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getHsraInspectionId() {
		return _hsraInspectionId;
	}

	@Override
	public void setHsraInspectionId(long hsraInspectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraInspectionId = hsraInspectionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public Date getDateOfInspection() {
		return _dateOfInspection;
	}

	@Override
	public void setDateOfInspection(Date dateOfInspection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfInspection = dateOfInspection;
	}

	@JSON
	@Override
	public String getTimeOfInspection() {
		if (_timeOfInspection == null) {
			return "";
		}
		else {
			return _timeOfInspection;
		}
	}

	@Override
	public void setTimeOfInspection(String timeOfInspection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_timeOfInspection = timeOfInspection;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("status");
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	@JSON
	@Override
	public long getSlotBookedByUser() {
		return _slotBookedByUser;
	}

	@Override
	public void setSlotBookedByUser(long slotBookedByUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_slotBookedByUser = slotBookedByUser;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSlotBookedByUser() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("slotBookedByUser"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), HsraInspection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HsraInspection toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HsraInspection>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HsraInspectionImpl hsraInspectionImpl = new HsraInspectionImpl();

		hsraInspectionImpl.setHsraInspectionId(getHsraInspectionId());
		hsraInspectionImpl.setGroupId(getGroupId());
		hsraInspectionImpl.setCompanyId(getCompanyId());
		hsraInspectionImpl.setUserId(getUserId());
		hsraInspectionImpl.setUserName(getUserName());
		hsraInspectionImpl.setCreateDate(getCreateDate());
		hsraInspectionImpl.setModifiedDate(getModifiedDate());
		hsraInspectionImpl.setCaseId(getCaseId());
		hsraInspectionImpl.setDateOfInspection(getDateOfInspection());
		hsraInspectionImpl.setTimeOfInspection(getTimeOfInspection());
		hsraInspectionImpl.setLocation(getLocation());
		hsraInspectionImpl.setStatus(getStatus());
		hsraInspectionImpl.setHsraApplicationId(getHsraApplicationId());
		hsraInspectionImpl.setSlotBookedByUser(getSlotBookedByUser());

		hsraInspectionImpl.resetOriginalValues();

		return hsraInspectionImpl;
	}

	@Override
	public HsraInspection cloneWithOriginalValues() {
		HsraInspectionImpl hsraInspectionImpl = new HsraInspectionImpl();

		hsraInspectionImpl.setHsraInspectionId(
			this.<Long>getColumnOriginalValue("hsraInspectionId"));
		hsraInspectionImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		hsraInspectionImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		hsraInspectionImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		hsraInspectionImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		hsraInspectionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		hsraInspectionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		hsraInspectionImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		hsraInspectionImpl.setDateOfInspection(
			this.<Date>getColumnOriginalValue("dateOfInspection"));
		hsraInspectionImpl.setTimeOfInspection(
			this.<String>getColumnOriginalValue("timeOfInspection"));
		hsraInspectionImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		hsraInspectionImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		hsraInspectionImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
		hsraInspectionImpl.setSlotBookedByUser(
			this.<Long>getColumnOriginalValue("slotBookedByUser"));

		return hsraInspectionImpl;
	}

	@Override
	public int compareTo(HsraInspection hsraInspection) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), hsraInspection.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof HsraInspection)) {
			return false;
		}

		HsraInspection hsraInspection = (HsraInspection)object;

		long primaryKey = hsraInspection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<HsraInspection> toCacheModel() {
		HsraInspectionCacheModel hsraInspectionCacheModel =
			new HsraInspectionCacheModel();

		hsraInspectionCacheModel.hsraInspectionId = getHsraInspectionId();

		hsraInspectionCacheModel.groupId = getGroupId();

		hsraInspectionCacheModel.companyId = getCompanyId();

		hsraInspectionCacheModel.userId = getUserId();

		hsraInspectionCacheModel.userName = getUserName();

		String userName = hsraInspectionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			hsraInspectionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			hsraInspectionCacheModel.createDate = createDate.getTime();
		}
		else {
			hsraInspectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			hsraInspectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			hsraInspectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		hsraInspectionCacheModel.caseId = getCaseId();

		String caseId = hsraInspectionCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			hsraInspectionCacheModel.caseId = null;
		}

		Date dateOfInspection = getDateOfInspection();

		if (dateOfInspection != null) {
			hsraInspectionCacheModel.dateOfInspection =
				dateOfInspection.getTime();
		}
		else {
			hsraInspectionCacheModel.dateOfInspection = Long.MIN_VALUE;
		}

		hsraInspectionCacheModel.timeOfInspection = getTimeOfInspection();

		String timeOfInspection = hsraInspectionCacheModel.timeOfInspection;

		if ((timeOfInspection != null) && (timeOfInspection.length() == 0)) {
			hsraInspectionCacheModel.timeOfInspection = null;
		}

		hsraInspectionCacheModel.location = getLocation();

		String location = hsraInspectionCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			hsraInspectionCacheModel.location = null;
		}

		hsraInspectionCacheModel.status = getStatus();

		String status = hsraInspectionCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			hsraInspectionCacheModel.status = null;
		}

		hsraInspectionCacheModel.hsraApplicationId = getHsraApplicationId();

		hsraInspectionCacheModel.slotBookedByUser = getSlotBookedByUser();

		return hsraInspectionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HsraInspection, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HsraInspection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HsraInspection, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((HsraInspection)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, HsraInspection>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					HsraInspection.class, ModelWrapper.class);

	}

	private long _hsraInspectionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private Date _dateOfInspection;
	private String _timeOfInspection;
	private String _location;
	private String _status;
	private long _hsraApplicationId;
	private long _slotBookedByUser;

	public <T> T getColumnValue(String columnName) {
		Function<HsraInspection, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((HsraInspection)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("hsraInspectionId", _hsraInspectionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("dateOfInspection", _dateOfInspection);
		_columnOriginalValues.put("timeOfInspection", _timeOfInspection);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
		_columnOriginalValues.put("slotBookedByUser", _slotBookedByUser);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("hsraInspectionId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("dateOfInspection", 256L);

		columnBitmasks.put("timeOfInspection", 512L);

		columnBitmasks.put("location", 1024L);

		columnBitmasks.put("status", 2048L);

		columnBitmasks.put("hsraApplicationId", 4096L);

		columnBitmasks.put("slotBookedByUser", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private HsraInspection _escapedModel;

}