/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.wra.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.wra.application.form.service.model.PermitToDrillAWell;
import com.nbp.wra.application.form.service.model.PermitToDrillAWellModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PermitToDrillAWell service. Represents a row in the &quot;nbp_wra_drill_well_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PermitToDrillAWellModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PermitToDrillAWellImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PermitToDrillAWellImpl
 * @generated
 */
@JSON(strict = true)
public class PermitToDrillAWellModelImpl
	extends BaseModelImpl<PermitToDrillAWell>
	implements PermitToDrillAWellModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a permit to drill a well model instance should use the <code>PermitToDrillAWell</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_wra_drill_well_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"drillAWellApplicationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"permitDrillApplicationNum", Types.VARCHAR},
		{"permitDrillingApplicantName", Types.VARCHAR},
		{"permitDrillingMailingAddParish", Types.VARCHAR},
		{"permitDrillingMailingAddress", Types.VARCHAR},
		{"permitDrillingEmailAddress", Types.VARCHAR},
		{"permitDrillingOfficePhone", Types.VARCHAR},
		{"permitDrillingMobilePhone", Types.VARCHAR},
		{"wellDrillingHomePhone", Types.VARCHAR},
		{"permitDrillingWorkLocation", Types.VARCHAR},
		{"permitDrillingLocation", Types.VARCHAR},
		{"permitDrillingNature", Types.VARCHAR},
		{"permitDrillingContractorName", Types.VARCHAR},
		{"permitDrillContractAddress", Types.VARCHAR},
		{"permitDrillingContractorAdd", Types.VARCHAR},
		{"permitDrillingPurpose", Types.VARCHAR},
		{"permitDrillingBoreholeDepth", Types.VARCHAR},
		{"permitDrillingDiameterBorehole", Types.VARCHAR},
		{"permitDrillingMethod", Types.VARCHAR},
		{"permitDrillingConstMethod", Types.VARCHAR},
		{"permitDrillingSupplies", Types.VARCHAR},
		{"permitDrillingTechnicalInfo", Types.VARCHAR},
		{"permitDrillingCubic", Types.VARCHAR},
		{"permitDrillingAuthority", Types.VARCHAR},
		{"applicantSignaturePermitBtn", Types.VARCHAR},
		{"permitDrillingSignDate", Types.TIMESTAMP},
		{"wraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("drillAWellApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("permitDrillApplicationNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingMailingAddParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingMailingAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingEmailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingOfficePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingMobilePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wellDrillingHomePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingWorkLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingNature", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingContractorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillContractAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingContractorAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingPurpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingBoreholeDepth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingDiameterBorehole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingConstMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSupplies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingTechnicalInfo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingCubic", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingAuthority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantSignaturePermitBtn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("wraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_wra_drill_well_info (drillAWellApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,permitDrillApplicationNum VARCHAR(75) null,permitDrillingApplicantName VARCHAR(75) null,permitDrillingMailingAddParish VARCHAR(75) null,permitDrillingMailingAddress VARCHAR(500) null,permitDrillingEmailAddress VARCHAR(75) null,permitDrillingOfficePhone VARCHAR(75) null,permitDrillingMobilePhone VARCHAR(75) null,wellDrillingHomePhone VARCHAR(75) null,permitDrillingWorkLocation VARCHAR(500) null,permitDrillingLocation VARCHAR(500) null,permitDrillingNature VARCHAR(500) null,permitDrillingContractorName VARCHAR(75) null,permitDrillContractAddress VARCHAR(500) null,permitDrillingContractorAdd VARCHAR(500) null,permitDrillingPurpose VARCHAR(500) null,permitDrillingBoreholeDepth VARCHAR(75) null,permitDrillingDiameterBorehole VARCHAR(75) null,permitDrillingMethod VARCHAR(500) null,permitDrillingConstMethod VARCHAR(500) null,permitDrillingSupplies VARCHAR(75) null,permitDrillingTechnicalInfo VARCHAR(75) null,permitDrillingCubic VARCHAR(75) null,permitDrillingAuthority VARCHAR(500) null,applicantSignaturePermitBtn VARCHAR(75) null,permitDrillingSignDate DATE null,wraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_wra_drill_well_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY permitToDrillAWell.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_wra_drill_well_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PermitToDrillAWellModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _drillAWellApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDrillAWellApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _drillAWellApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PermitToDrillAWell.class;
	}

	@Override
	public String getModelClassName() {
		return PermitToDrillAWell.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PermitToDrillAWell, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PermitToDrillAWell, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PermitToDrillAWell, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PermitToDrillAWell)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PermitToDrillAWell, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PermitToDrillAWell, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PermitToDrillAWell)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PermitToDrillAWell, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PermitToDrillAWell, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<PermitToDrillAWell, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<PermitToDrillAWell, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<PermitToDrillAWell, Object>>();

			attributeGetterFunctions.put(
				"drillAWellApplicationId",
				PermitToDrillAWell::getDrillAWellApplicationId);
			attributeGetterFunctions.put(
				"groupId", PermitToDrillAWell::getGroupId);
			attributeGetterFunctions.put(
				"companyId", PermitToDrillAWell::getCompanyId);
			attributeGetterFunctions.put(
				"userId", PermitToDrillAWell::getUserId);
			attributeGetterFunctions.put(
				"userName", PermitToDrillAWell::getUserName);
			attributeGetterFunctions.put(
				"createDate", PermitToDrillAWell::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", PermitToDrillAWell::getModifiedDate);
			attributeGetterFunctions.put(
				"permitDrillApplicationNum",
				PermitToDrillAWell::getPermitDrillApplicationNum);
			attributeGetterFunctions.put(
				"permitDrillingApplicantName",
				PermitToDrillAWell::getPermitDrillingApplicantName);
			attributeGetterFunctions.put(
				"permitDrillingMailingAddParish",
				PermitToDrillAWell::getPermitDrillingMailingAddParish);
			attributeGetterFunctions.put(
				"permitDrillingMailingAddress",
				PermitToDrillAWell::getPermitDrillingMailingAddress);
			attributeGetterFunctions.put(
				"permitDrillingEmailAddress",
				PermitToDrillAWell::getPermitDrillingEmailAddress);
			attributeGetterFunctions.put(
				"permitDrillingOfficePhone",
				PermitToDrillAWell::getPermitDrillingOfficePhone);
			attributeGetterFunctions.put(
				"permitDrillingMobilePhone",
				PermitToDrillAWell::getPermitDrillingMobilePhone);
			attributeGetterFunctions.put(
				"wellDrillingHomePhone",
				PermitToDrillAWell::getWellDrillingHomePhone);
			attributeGetterFunctions.put(
				"permitDrillingWorkLocation",
				PermitToDrillAWell::getPermitDrillingWorkLocation);
			attributeGetterFunctions.put(
				"permitDrillingLocation",
				PermitToDrillAWell::getPermitDrillingLocation);
			attributeGetterFunctions.put(
				"permitDrillingNature",
				PermitToDrillAWell::getPermitDrillingNature);
			attributeGetterFunctions.put(
				"permitDrillingContractorName",
				PermitToDrillAWell::getPermitDrillingContractorName);
			attributeGetterFunctions.put(
				"permitDrillContractAddress",
				PermitToDrillAWell::getPermitDrillContractAddress);
			attributeGetterFunctions.put(
				"permitDrillingContractorAdd",
				PermitToDrillAWell::getPermitDrillingContractorAdd);
			attributeGetterFunctions.put(
				"permitDrillingPurpose",
				PermitToDrillAWell::getPermitDrillingPurpose);
			attributeGetterFunctions.put(
				"permitDrillingBoreholeDepth",
				PermitToDrillAWell::getPermitDrillingBoreholeDepth);
			attributeGetterFunctions.put(
				"permitDrillingDiameterBorehole",
				PermitToDrillAWell::getPermitDrillingDiameterBorehole);
			attributeGetterFunctions.put(
				"permitDrillingMethod",
				PermitToDrillAWell::getPermitDrillingMethod);
			attributeGetterFunctions.put(
				"permitDrillingConstMethod",
				PermitToDrillAWell::getPermitDrillingConstMethod);
			attributeGetterFunctions.put(
				"permitDrillingSupplies",
				PermitToDrillAWell::getPermitDrillingSupplies);
			attributeGetterFunctions.put(
				"permitDrillingTechnicalInfo",
				PermitToDrillAWell::getPermitDrillingTechnicalInfo);
			attributeGetterFunctions.put(
				"permitDrillingCubic",
				PermitToDrillAWell::getPermitDrillingCubic);
			attributeGetterFunctions.put(
				"permitDrillingAuthority",
				PermitToDrillAWell::getPermitDrillingAuthority);
			attributeGetterFunctions.put(
				"applicantSignaturePermitBtn",
				PermitToDrillAWell::getApplicantSignaturePermitBtn);
			attributeGetterFunctions.put(
				"permitDrillingSignDate",
				PermitToDrillAWell::getPermitDrillingSignDate);
			attributeGetterFunctions.put(
				"wraApplicationId", PermitToDrillAWell::getWraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<PermitToDrillAWell, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PermitToDrillAWell, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<PermitToDrillAWell, ?>>();

			attributeSetterBiConsumers.put(
				"drillAWellApplicationId",
				(BiConsumer<PermitToDrillAWell, Long>)
					PermitToDrillAWell::setDrillAWellApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<PermitToDrillAWell, Long>)
					PermitToDrillAWell::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<PermitToDrillAWell, Long>)
					PermitToDrillAWell::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<PermitToDrillAWell, Long>)
					PermitToDrillAWell::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<PermitToDrillAWell, Date>)
					PermitToDrillAWell::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<PermitToDrillAWell, Date>)
					PermitToDrillAWell::setModifiedDate);
			attributeSetterBiConsumers.put(
				"permitDrillApplicationNum",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillApplicationNum);
			attributeSetterBiConsumers.put(
				"permitDrillingApplicantName",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingApplicantName);
			attributeSetterBiConsumers.put(
				"permitDrillingMailingAddParish",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingMailingAddParish);
			attributeSetterBiConsumers.put(
				"permitDrillingMailingAddress",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingMailingAddress);
			attributeSetterBiConsumers.put(
				"permitDrillingEmailAddress",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingEmailAddress);
			attributeSetterBiConsumers.put(
				"permitDrillingOfficePhone",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingOfficePhone);
			attributeSetterBiConsumers.put(
				"permitDrillingMobilePhone",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingMobilePhone);
			attributeSetterBiConsumers.put(
				"wellDrillingHomePhone",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setWellDrillingHomePhone);
			attributeSetterBiConsumers.put(
				"permitDrillingWorkLocation",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingWorkLocation);
			attributeSetterBiConsumers.put(
				"permitDrillingLocation",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingLocation);
			attributeSetterBiConsumers.put(
				"permitDrillingNature",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingNature);
			attributeSetterBiConsumers.put(
				"permitDrillingContractorName",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingContractorName);
			attributeSetterBiConsumers.put(
				"permitDrillContractAddress",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillContractAddress);
			attributeSetterBiConsumers.put(
				"permitDrillingContractorAdd",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingContractorAdd);
			attributeSetterBiConsumers.put(
				"permitDrillingPurpose",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingPurpose);
			attributeSetterBiConsumers.put(
				"permitDrillingBoreholeDepth",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingBoreholeDepth);
			attributeSetterBiConsumers.put(
				"permitDrillingDiameterBorehole",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingDiameterBorehole);
			attributeSetterBiConsumers.put(
				"permitDrillingMethod",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingMethod);
			attributeSetterBiConsumers.put(
				"permitDrillingConstMethod",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingConstMethod);
			attributeSetterBiConsumers.put(
				"permitDrillingSupplies",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingSupplies);
			attributeSetterBiConsumers.put(
				"permitDrillingTechnicalInfo",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingTechnicalInfo);
			attributeSetterBiConsumers.put(
				"permitDrillingCubic",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingCubic);
			attributeSetterBiConsumers.put(
				"permitDrillingAuthority",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setPermitDrillingAuthority);
			attributeSetterBiConsumers.put(
				"applicantSignaturePermitBtn",
				(BiConsumer<PermitToDrillAWell, String>)
					PermitToDrillAWell::setApplicantSignaturePermitBtn);
			attributeSetterBiConsumers.put(
				"permitDrillingSignDate",
				(BiConsumer<PermitToDrillAWell, Date>)
					PermitToDrillAWell::setPermitDrillingSignDate);
			attributeSetterBiConsumers.put(
				"wraApplicationId",
				(BiConsumer<PermitToDrillAWell, Long>)
					PermitToDrillAWell::setWraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getDrillAWellApplicationId() {
		return _drillAWellApplicationId;
	}

	@Override
	public void setDrillAWellApplicationId(long drillAWellApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drillAWellApplicationId = drillAWellApplicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPermitDrillApplicationNum() {
		if (_permitDrillApplicationNum == null) {
			return "";
		}
		else {
			return _permitDrillApplicationNum;
		}
	}

	@Override
	public void setPermitDrillApplicationNum(String permitDrillApplicationNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillApplicationNum = permitDrillApplicationNum;
	}

	@JSON
	@Override
	public String getPermitDrillingApplicantName() {
		if (_permitDrillingApplicantName == null) {
			return "";
		}
		else {
			return _permitDrillingApplicantName;
		}
	}

	@Override
	public void setPermitDrillingApplicantName(
		String permitDrillingApplicantName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingApplicantName = permitDrillingApplicantName;
	}

	@JSON
	@Override
	public String getPermitDrillingMailingAddParish() {
		if (_permitDrillingMailingAddParish == null) {
			return "";
		}
		else {
			return _permitDrillingMailingAddParish;
		}
	}

	@Override
	public void setPermitDrillingMailingAddParish(
		String permitDrillingMailingAddParish) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingMailingAddParish = permitDrillingMailingAddParish;
	}

	@JSON
	@Override
	public String getPermitDrillingMailingAddress() {
		if (_permitDrillingMailingAddress == null) {
			return "";
		}
		else {
			return _permitDrillingMailingAddress;
		}
	}

	@Override
	public void setPermitDrillingMailingAddress(
		String permitDrillingMailingAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingMailingAddress = permitDrillingMailingAddress;
	}

	@JSON
	@Override
	public String getPermitDrillingEmailAddress() {
		if (_permitDrillingEmailAddress == null) {
			return "";
		}
		else {
			return _permitDrillingEmailAddress;
		}
	}

	@Override
	public void setPermitDrillingEmailAddress(
		String permitDrillingEmailAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingEmailAddress = permitDrillingEmailAddress;
	}

	@JSON
	@Override
	public String getPermitDrillingOfficePhone() {
		if (_permitDrillingOfficePhone == null) {
			return "";
		}
		else {
			return _permitDrillingOfficePhone;
		}
	}

	@Override
	public void setPermitDrillingOfficePhone(String permitDrillingOfficePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingOfficePhone = permitDrillingOfficePhone;
	}

	@JSON
	@Override
	public String getPermitDrillingMobilePhone() {
		if (_permitDrillingMobilePhone == null) {
			return "";
		}
		else {
			return _permitDrillingMobilePhone;
		}
	}

	@Override
	public void setPermitDrillingMobilePhone(String permitDrillingMobilePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingMobilePhone = permitDrillingMobilePhone;
	}

	@JSON
	@Override
	public String getWellDrillingHomePhone() {
		if (_wellDrillingHomePhone == null) {
			return "";
		}
		else {
			return _wellDrillingHomePhone;
		}
	}

	@Override
	public void setWellDrillingHomePhone(String wellDrillingHomePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wellDrillingHomePhone = wellDrillingHomePhone;
	}

	@JSON
	@Override
	public String getPermitDrillingWorkLocation() {
		if (_permitDrillingWorkLocation == null) {
			return "";
		}
		else {
			return _permitDrillingWorkLocation;
		}
	}

	@Override
	public void setPermitDrillingWorkLocation(
		String permitDrillingWorkLocation) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingWorkLocation = permitDrillingWorkLocation;
	}

	@JSON
	@Override
	public String getPermitDrillingLocation() {
		if (_permitDrillingLocation == null) {
			return "";
		}
		else {
			return _permitDrillingLocation;
		}
	}

	@Override
	public void setPermitDrillingLocation(String permitDrillingLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingLocation = permitDrillingLocation;
	}

	@JSON
	@Override
	public String getPermitDrillingNature() {
		if (_permitDrillingNature == null) {
			return "";
		}
		else {
			return _permitDrillingNature;
		}
	}

	@Override
	public void setPermitDrillingNature(String permitDrillingNature) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingNature = permitDrillingNature;
	}

	@JSON
	@Override
	public String getPermitDrillingContractorName() {
		if (_permitDrillingContractorName == null) {
			return "";
		}
		else {
			return _permitDrillingContractorName;
		}
	}

	@Override
	public void setPermitDrillingContractorName(
		String permitDrillingContractorName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingContractorName = permitDrillingContractorName;
	}

	@JSON
	@Override
	public String getPermitDrillContractAddress() {
		if (_permitDrillContractAddress == null) {
			return "";
		}
		else {
			return _permitDrillContractAddress;
		}
	}

	@Override
	public void setPermitDrillContractAddress(
		String permitDrillContractAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillContractAddress = permitDrillContractAddress;
	}

	@JSON
	@Override
	public String getPermitDrillingContractorAdd() {
		if (_permitDrillingContractorAdd == null) {
			return "";
		}
		else {
			return _permitDrillingContractorAdd;
		}
	}

	@Override
	public void setPermitDrillingContractorAdd(
		String permitDrillingContractorAdd) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingContractorAdd = permitDrillingContractorAdd;
	}

	@JSON
	@Override
	public String getPermitDrillingPurpose() {
		if (_permitDrillingPurpose == null) {
			return "";
		}
		else {
			return _permitDrillingPurpose;
		}
	}

	@Override
	public void setPermitDrillingPurpose(String permitDrillingPurpose) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingPurpose = permitDrillingPurpose;
	}

	@JSON
	@Override
	public String getPermitDrillingBoreholeDepth() {
		if (_permitDrillingBoreholeDepth == null) {
			return "";
		}
		else {
			return _permitDrillingBoreholeDepth;
		}
	}

	@Override
	public void setPermitDrillingBoreholeDepth(
		String permitDrillingBoreholeDepth) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingBoreholeDepth = permitDrillingBoreholeDepth;
	}

	@JSON
	@Override
	public String getPermitDrillingDiameterBorehole() {
		if (_permitDrillingDiameterBorehole == null) {
			return "";
		}
		else {
			return _permitDrillingDiameterBorehole;
		}
	}

	@Override
	public void setPermitDrillingDiameterBorehole(
		String permitDrillingDiameterBorehole) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingDiameterBorehole = permitDrillingDiameterBorehole;
	}

	@JSON
	@Override
	public String getPermitDrillingMethod() {
		if (_permitDrillingMethod == null) {
			return "";
		}
		else {
			return _permitDrillingMethod;
		}
	}

	@Override
	public void setPermitDrillingMethod(String permitDrillingMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingMethod = permitDrillingMethod;
	}

	@JSON
	@Override
	public String getPermitDrillingConstMethod() {
		if (_permitDrillingConstMethod == null) {
			return "";
		}
		else {
			return _permitDrillingConstMethod;
		}
	}

	@Override
	public void setPermitDrillingConstMethod(String permitDrillingConstMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingConstMethod = permitDrillingConstMethod;
	}

	@JSON
	@Override
	public String getPermitDrillingSupplies() {
		if (_permitDrillingSupplies == null) {
			return "";
		}
		else {
			return _permitDrillingSupplies;
		}
	}

	@Override
	public void setPermitDrillingSupplies(String permitDrillingSupplies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSupplies = permitDrillingSupplies;
	}

	@JSON
	@Override
	public String getPermitDrillingTechnicalInfo() {
		if (_permitDrillingTechnicalInfo == null) {
			return "";
		}
		else {
			return _permitDrillingTechnicalInfo;
		}
	}

	@Override
	public void setPermitDrillingTechnicalInfo(
		String permitDrillingTechnicalInfo) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingTechnicalInfo = permitDrillingTechnicalInfo;
	}

	@JSON
	@Override
	public String getPermitDrillingCubic() {
		if (_permitDrillingCubic == null) {
			return "";
		}
		else {
			return _permitDrillingCubic;
		}
	}

	@Override
	public void setPermitDrillingCubic(String permitDrillingCubic) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingCubic = permitDrillingCubic;
	}

	@JSON
	@Override
	public String getPermitDrillingAuthority() {
		if (_permitDrillingAuthority == null) {
			return "";
		}
		else {
			return _permitDrillingAuthority;
		}
	}

	@Override
	public void setPermitDrillingAuthority(String permitDrillingAuthority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingAuthority = permitDrillingAuthority;
	}

	@JSON
	@Override
	public String getApplicantSignaturePermitBtn() {
		if (_applicantSignaturePermitBtn == null) {
			return "";
		}
		else {
			return _applicantSignaturePermitBtn;
		}
	}

	@Override
	public void setApplicantSignaturePermitBtn(
		String applicantSignaturePermitBtn) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantSignaturePermitBtn = applicantSignaturePermitBtn;
	}

	@JSON
	@Override
	public Date getPermitDrillingSignDate() {
		return _permitDrillingSignDate;
	}

	@Override
	public void setPermitDrillingSignDate(Date permitDrillingSignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSignDate = permitDrillingSignDate;
	}

	@JSON
	@Override
	public long getWraApplicationId() {
		return _wraApplicationId;
	}

	@Override
	public void setWraApplicationId(long wraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wraApplicationId = wraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalWraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("wraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PermitToDrillAWell.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PermitToDrillAWell toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PermitToDrillAWell>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PermitToDrillAWellImpl permitToDrillAWellImpl =
			new PermitToDrillAWellImpl();

		permitToDrillAWellImpl.setDrillAWellApplicationId(
			getDrillAWellApplicationId());
		permitToDrillAWellImpl.setGroupId(getGroupId());
		permitToDrillAWellImpl.setCompanyId(getCompanyId());
		permitToDrillAWellImpl.setUserId(getUserId());
		permitToDrillAWellImpl.setUserName(getUserName());
		permitToDrillAWellImpl.setCreateDate(getCreateDate());
		permitToDrillAWellImpl.setModifiedDate(getModifiedDate());
		permitToDrillAWellImpl.setPermitDrillApplicationNum(
			getPermitDrillApplicationNum());
		permitToDrillAWellImpl.setPermitDrillingApplicantName(
			getPermitDrillingApplicantName());
		permitToDrillAWellImpl.setPermitDrillingMailingAddParish(
			getPermitDrillingMailingAddParish());
		permitToDrillAWellImpl.setPermitDrillingMailingAddress(
			getPermitDrillingMailingAddress());
		permitToDrillAWellImpl.setPermitDrillingEmailAddress(
			getPermitDrillingEmailAddress());
		permitToDrillAWellImpl.setPermitDrillingOfficePhone(
			getPermitDrillingOfficePhone());
		permitToDrillAWellImpl.setPermitDrillingMobilePhone(
			getPermitDrillingMobilePhone());
		permitToDrillAWellImpl.setWellDrillingHomePhone(
			getWellDrillingHomePhone());
		permitToDrillAWellImpl.setPermitDrillingWorkLocation(
			getPermitDrillingWorkLocation());
		permitToDrillAWellImpl.setPermitDrillingLocation(
			getPermitDrillingLocation());
		permitToDrillAWellImpl.setPermitDrillingNature(
			getPermitDrillingNature());
		permitToDrillAWellImpl.setPermitDrillingContractorName(
			getPermitDrillingContractorName());
		permitToDrillAWellImpl.setPermitDrillContractAddress(
			getPermitDrillContractAddress());
		permitToDrillAWellImpl.setPermitDrillingContractorAdd(
			getPermitDrillingContractorAdd());
		permitToDrillAWellImpl.setPermitDrillingPurpose(
			getPermitDrillingPurpose());
		permitToDrillAWellImpl.setPermitDrillingBoreholeDepth(
			getPermitDrillingBoreholeDepth());
		permitToDrillAWellImpl.setPermitDrillingDiameterBorehole(
			getPermitDrillingDiameterBorehole());
		permitToDrillAWellImpl.setPermitDrillingMethod(
			getPermitDrillingMethod());
		permitToDrillAWellImpl.setPermitDrillingConstMethod(
			getPermitDrillingConstMethod());
		permitToDrillAWellImpl.setPermitDrillingSupplies(
			getPermitDrillingSupplies());
		permitToDrillAWellImpl.setPermitDrillingTechnicalInfo(
			getPermitDrillingTechnicalInfo());
		permitToDrillAWellImpl.setPermitDrillingCubic(getPermitDrillingCubic());
		permitToDrillAWellImpl.setPermitDrillingAuthority(
			getPermitDrillingAuthority());
		permitToDrillAWellImpl.setApplicantSignaturePermitBtn(
			getApplicantSignaturePermitBtn());
		permitToDrillAWellImpl.setPermitDrillingSignDate(
			getPermitDrillingSignDate());
		permitToDrillAWellImpl.setWraApplicationId(getWraApplicationId());

		permitToDrillAWellImpl.resetOriginalValues();

		return permitToDrillAWellImpl;
	}

	@Override
	public PermitToDrillAWell cloneWithOriginalValues() {
		PermitToDrillAWellImpl permitToDrillAWellImpl =
			new PermitToDrillAWellImpl();

		permitToDrillAWellImpl.setDrillAWellApplicationId(
			this.<Long>getColumnOriginalValue("drillAWellApplicationId"));
		permitToDrillAWellImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		permitToDrillAWellImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		permitToDrillAWellImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		permitToDrillAWellImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		permitToDrillAWellImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		permitToDrillAWellImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		permitToDrillAWellImpl.setPermitDrillApplicationNum(
			this.<String>getColumnOriginalValue("permitDrillApplicationNum"));
		permitToDrillAWellImpl.setPermitDrillingApplicantName(
			this.<String>getColumnOriginalValue("permitDrillingApplicantName"));
		permitToDrillAWellImpl.setPermitDrillingMailingAddParish(
			this.<String>getColumnOriginalValue(
				"permitDrillingMailingAddParish"));
		permitToDrillAWellImpl.setPermitDrillingMailingAddress(
			this.<String>getColumnOriginalValue(
				"permitDrillingMailingAddress"));
		permitToDrillAWellImpl.setPermitDrillingEmailAddress(
			this.<String>getColumnOriginalValue("permitDrillingEmailAddress"));
		permitToDrillAWellImpl.setPermitDrillingOfficePhone(
			this.<String>getColumnOriginalValue("permitDrillingOfficePhone"));
		permitToDrillAWellImpl.setPermitDrillingMobilePhone(
			this.<String>getColumnOriginalValue("permitDrillingMobilePhone"));
		permitToDrillAWellImpl.setWellDrillingHomePhone(
			this.<String>getColumnOriginalValue("wellDrillingHomePhone"));
		permitToDrillAWellImpl.setPermitDrillingWorkLocation(
			this.<String>getColumnOriginalValue("permitDrillingWorkLocation"));
		permitToDrillAWellImpl.setPermitDrillingLocation(
			this.<String>getColumnOriginalValue("permitDrillingLocation"));
		permitToDrillAWellImpl.setPermitDrillingNature(
			this.<String>getColumnOriginalValue("permitDrillingNature"));
		permitToDrillAWellImpl.setPermitDrillingContractorName(
			this.<String>getColumnOriginalValue(
				"permitDrillingContractorName"));
		permitToDrillAWellImpl.setPermitDrillContractAddress(
			this.<String>getColumnOriginalValue("permitDrillContractAddress"));
		permitToDrillAWellImpl.setPermitDrillingContractorAdd(
			this.<String>getColumnOriginalValue("permitDrillingContractorAdd"));
		permitToDrillAWellImpl.setPermitDrillingPurpose(
			this.<String>getColumnOriginalValue("permitDrillingPurpose"));
		permitToDrillAWellImpl.setPermitDrillingBoreholeDepth(
			this.<String>getColumnOriginalValue("permitDrillingBoreholeDepth"));
		permitToDrillAWellImpl.setPermitDrillingDiameterBorehole(
			this.<String>getColumnOriginalValue(
				"permitDrillingDiameterBorehole"));
		permitToDrillAWellImpl.setPermitDrillingMethod(
			this.<String>getColumnOriginalValue("permitDrillingMethod"));
		permitToDrillAWellImpl.setPermitDrillingConstMethod(
			this.<String>getColumnOriginalValue("permitDrillingConstMethod"));
		permitToDrillAWellImpl.setPermitDrillingSupplies(
			this.<String>getColumnOriginalValue("permitDrillingSupplies"));
		permitToDrillAWellImpl.setPermitDrillingTechnicalInfo(
			this.<String>getColumnOriginalValue("permitDrillingTechnicalInfo"));
		permitToDrillAWellImpl.setPermitDrillingCubic(
			this.<String>getColumnOriginalValue("permitDrillingCubic"));
		permitToDrillAWellImpl.setPermitDrillingAuthority(
			this.<String>getColumnOriginalValue("permitDrillingAuthority"));
		permitToDrillAWellImpl.setApplicantSignaturePermitBtn(
			this.<String>getColumnOriginalValue("applicantSignaturePermitBtn"));
		permitToDrillAWellImpl.setPermitDrillingSignDate(
			this.<Date>getColumnOriginalValue("permitDrillingSignDate"));
		permitToDrillAWellImpl.setWraApplicationId(
			this.<Long>getColumnOriginalValue("wraApplicationId"));

		return permitToDrillAWellImpl;
	}

	@Override
	public int compareTo(PermitToDrillAWell permitToDrillAWell) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), permitToDrillAWell.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PermitToDrillAWell)) {
			return false;
		}

		PermitToDrillAWell permitToDrillAWell = (PermitToDrillAWell)object;

		long primaryKey = permitToDrillAWell.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PermitToDrillAWell> toCacheModel() {
		PermitToDrillAWellCacheModel permitToDrillAWellCacheModel =
			new PermitToDrillAWellCacheModel();

		permitToDrillAWellCacheModel.drillAWellApplicationId =
			getDrillAWellApplicationId();

		permitToDrillAWellCacheModel.groupId = getGroupId();

		permitToDrillAWellCacheModel.companyId = getCompanyId();

		permitToDrillAWellCacheModel.userId = getUserId();

		permitToDrillAWellCacheModel.userName = getUserName();

		String userName = permitToDrillAWellCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			permitToDrillAWellCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			permitToDrillAWellCacheModel.createDate = createDate.getTime();
		}
		else {
			permitToDrillAWellCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			permitToDrillAWellCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			permitToDrillAWellCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		permitToDrillAWellCacheModel.permitDrillApplicationNum =
			getPermitDrillApplicationNum();

		String permitDrillApplicationNum =
			permitToDrillAWellCacheModel.permitDrillApplicationNum;

		if ((permitDrillApplicationNum != null) &&
			(permitDrillApplicationNum.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillApplicationNum = null;
		}

		permitToDrillAWellCacheModel.permitDrillingApplicantName =
			getPermitDrillingApplicantName();

		String permitDrillingApplicantName =
			permitToDrillAWellCacheModel.permitDrillingApplicantName;

		if ((permitDrillingApplicantName != null) &&
			(permitDrillingApplicantName.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingApplicantName = null;
		}

		permitToDrillAWellCacheModel.permitDrillingMailingAddParish =
			getPermitDrillingMailingAddParish();

		String permitDrillingMailingAddParish =
			permitToDrillAWellCacheModel.permitDrillingMailingAddParish;

		if ((permitDrillingMailingAddParish != null) &&
			(permitDrillingMailingAddParish.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingMailingAddParish = null;
		}

		permitToDrillAWellCacheModel.permitDrillingMailingAddress =
			getPermitDrillingMailingAddress();

		String permitDrillingMailingAddress =
			permitToDrillAWellCacheModel.permitDrillingMailingAddress;

		if ((permitDrillingMailingAddress != null) &&
			(permitDrillingMailingAddress.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingMailingAddress = null;
		}

		permitToDrillAWellCacheModel.permitDrillingEmailAddress =
			getPermitDrillingEmailAddress();

		String permitDrillingEmailAddress =
			permitToDrillAWellCacheModel.permitDrillingEmailAddress;

		if ((permitDrillingEmailAddress != null) &&
			(permitDrillingEmailAddress.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingEmailAddress = null;
		}

		permitToDrillAWellCacheModel.permitDrillingOfficePhone =
			getPermitDrillingOfficePhone();

		String permitDrillingOfficePhone =
			permitToDrillAWellCacheModel.permitDrillingOfficePhone;

		if ((permitDrillingOfficePhone != null) &&
			(permitDrillingOfficePhone.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingOfficePhone = null;
		}

		permitToDrillAWellCacheModel.permitDrillingMobilePhone =
			getPermitDrillingMobilePhone();

		String permitDrillingMobilePhone =
			permitToDrillAWellCacheModel.permitDrillingMobilePhone;

		if ((permitDrillingMobilePhone != null) &&
			(permitDrillingMobilePhone.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingMobilePhone = null;
		}

		permitToDrillAWellCacheModel.wellDrillingHomePhone =
			getWellDrillingHomePhone();

		String wellDrillingHomePhone =
			permitToDrillAWellCacheModel.wellDrillingHomePhone;

		if ((wellDrillingHomePhone != null) &&
			(wellDrillingHomePhone.length() == 0)) {

			permitToDrillAWellCacheModel.wellDrillingHomePhone = null;
		}

		permitToDrillAWellCacheModel.permitDrillingWorkLocation =
			getPermitDrillingWorkLocation();

		String permitDrillingWorkLocation =
			permitToDrillAWellCacheModel.permitDrillingWorkLocation;

		if ((permitDrillingWorkLocation != null) &&
			(permitDrillingWorkLocation.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingWorkLocation = null;
		}

		permitToDrillAWellCacheModel.permitDrillingLocation =
			getPermitDrillingLocation();

		String permitDrillingLocation =
			permitToDrillAWellCacheModel.permitDrillingLocation;

		if ((permitDrillingLocation != null) &&
			(permitDrillingLocation.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingLocation = null;
		}

		permitToDrillAWellCacheModel.permitDrillingNature =
			getPermitDrillingNature();

		String permitDrillingNature =
			permitToDrillAWellCacheModel.permitDrillingNature;

		if ((permitDrillingNature != null) &&
			(permitDrillingNature.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingNature = null;
		}

		permitToDrillAWellCacheModel.permitDrillingContractorName =
			getPermitDrillingContractorName();

		String permitDrillingContractorName =
			permitToDrillAWellCacheModel.permitDrillingContractorName;

		if ((permitDrillingContractorName != null) &&
			(permitDrillingContractorName.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingContractorName = null;
		}

		permitToDrillAWellCacheModel.permitDrillContractAddress =
			getPermitDrillContractAddress();

		String permitDrillContractAddress =
			permitToDrillAWellCacheModel.permitDrillContractAddress;

		if ((permitDrillContractAddress != null) &&
			(permitDrillContractAddress.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillContractAddress = null;
		}

		permitToDrillAWellCacheModel.permitDrillingContractorAdd =
			getPermitDrillingContractorAdd();

		String permitDrillingContractorAdd =
			permitToDrillAWellCacheModel.permitDrillingContractorAdd;

		if ((permitDrillingContractorAdd != null) &&
			(permitDrillingContractorAdd.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingContractorAdd = null;
		}

		permitToDrillAWellCacheModel.permitDrillingPurpose =
			getPermitDrillingPurpose();

		String permitDrillingPurpose =
			permitToDrillAWellCacheModel.permitDrillingPurpose;

		if ((permitDrillingPurpose != null) &&
			(permitDrillingPurpose.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingPurpose = null;
		}

		permitToDrillAWellCacheModel.permitDrillingBoreholeDepth =
			getPermitDrillingBoreholeDepth();

		String permitDrillingBoreholeDepth =
			permitToDrillAWellCacheModel.permitDrillingBoreholeDepth;

		if ((permitDrillingBoreholeDepth != null) &&
			(permitDrillingBoreholeDepth.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingBoreholeDepth = null;
		}

		permitToDrillAWellCacheModel.permitDrillingDiameterBorehole =
			getPermitDrillingDiameterBorehole();

		String permitDrillingDiameterBorehole =
			permitToDrillAWellCacheModel.permitDrillingDiameterBorehole;

		if ((permitDrillingDiameterBorehole != null) &&
			(permitDrillingDiameterBorehole.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingDiameterBorehole = null;
		}

		permitToDrillAWellCacheModel.permitDrillingMethod =
			getPermitDrillingMethod();

		String permitDrillingMethod =
			permitToDrillAWellCacheModel.permitDrillingMethod;

		if ((permitDrillingMethod != null) &&
			(permitDrillingMethod.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingMethod = null;
		}

		permitToDrillAWellCacheModel.permitDrillingConstMethod =
			getPermitDrillingConstMethod();

		String permitDrillingConstMethod =
			permitToDrillAWellCacheModel.permitDrillingConstMethod;

		if ((permitDrillingConstMethod != null) &&
			(permitDrillingConstMethod.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingConstMethod = null;
		}

		permitToDrillAWellCacheModel.permitDrillingSupplies =
			getPermitDrillingSupplies();

		String permitDrillingSupplies =
			permitToDrillAWellCacheModel.permitDrillingSupplies;

		if ((permitDrillingSupplies != null) &&
			(permitDrillingSupplies.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingSupplies = null;
		}

		permitToDrillAWellCacheModel.permitDrillingTechnicalInfo =
			getPermitDrillingTechnicalInfo();

		String permitDrillingTechnicalInfo =
			permitToDrillAWellCacheModel.permitDrillingTechnicalInfo;

		if ((permitDrillingTechnicalInfo != null) &&
			(permitDrillingTechnicalInfo.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingTechnicalInfo = null;
		}

		permitToDrillAWellCacheModel.permitDrillingCubic =
			getPermitDrillingCubic();

		String permitDrillingCubic =
			permitToDrillAWellCacheModel.permitDrillingCubic;

		if ((permitDrillingCubic != null) &&
			(permitDrillingCubic.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingCubic = null;
		}

		permitToDrillAWellCacheModel.permitDrillingAuthority =
			getPermitDrillingAuthority();

		String permitDrillingAuthority =
			permitToDrillAWellCacheModel.permitDrillingAuthority;

		if ((permitDrillingAuthority != null) &&
			(permitDrillingAuthority.length() == 0)) {

			permitToDrillAWellCacheModel.permitDrillingAuthority = null;
		}

		permitToDrillAWellCacheModel.applicantSignaturePermitBtn =
			getApplicantSignaturePermitBtn();

		String applicantSignaturePermitBtn =
			permitToDrillAWellCacheModel.applicantSignaturePermitBtn;

		if ((applicantSignaturePermitBtn != null) &&
			(applicantSignaturePermitBtn.length() == 0)) {

			permitToDrillAWellCacheModel.applicantSignaturePermitBtn = null;
		}

		Date permitDrillingSignDate = getPermitDrillingSignDate();

		if (permitDrillingSignDate != null) {
			permitToDrillAWellCacheModel.permitDrillingSignDate =
				permitDrillingSignDate.getTime();
		}
		else {
			permitToDrillAWellCacheModel.permitDrillingSignDate =
				Long.MIN_VALUE;
		}

		permitToDrillAWellCacheModel.wraApplicationId = getWraApplicationId();

		return permitToDrillAWellCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PermitToDrillAWell, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PermitToDrillAWell, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PermitToDrillAWell, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PermitToDrillAWell)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PermitToDrillAWell>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PermitToDrillAWell.class, ModelWrapper.class);

	}

	private long _drillAWellApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _permitDrillApplicationNum;
	private String _permitDrillingApplicantName;
	private String _permitDrillingMailingAddParish;
	private String _permitDrillingMailingAddress;
	private String _permitDrillingEmailAddress;
	private String _permitDrillingOfficePhone;
	private String _permitDrillingMobilePhone;
	private String _wellDrillingHomePhone;
	private String _permitDrillingWorkLocation;
	private String _permitDrillingLocation;
	private String _permitDrillingNature;
	private String _permitDrillingContractorName;
	private String _permitDrillContractAddress;
	private String _permitDrillingContractorAdd;
	private String _permitDrillingPurpose;
	private String _permitDrillingBoreholeDepth;
	private String _permitDrillingDiameterBorehole;
	private String _permitDrillingMethod;
	private String _permitDrillingConstMethod;
	private String _permitDrillingSupplies;
	private String _permitDrillingTechnicalInfo;
	private String _permitDrillingCubic;
	private String _permitDrillingAuthority;
	private String _applicantSignaturePermitBtn;
	private Date _permitDrillingSignDate;
	private long _wraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<PermitToDrillAWell, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PermitToDrillAWell)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"drillAWellApplicationId", _drillAWellApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"permitDrillApplicationNum", _permitDrillApplicationNum);
		_columnOriginalValues.put(
			"permitDrillingApplicantName", _permitDrillingApplicantName);
		_columnOriginalValues.put(
			"permitDrillingMailingAddParish", _permitDrillingMailingAddParish);
		_columnOriginalValues.put(
			"permitDrillingMailingAddress", _permitDrillingMailingAddress);
		_columnOriginalValues.put(
			"permitDrillingEmailAddress", _permitDrillingEmailAddress);
		_columnOriginalValues.put(
			"permitDrillingOfficePhone", _permitDrillingOfficePhone);
		_columnOriginalValues.put(
			"permitDrillingMobilePhone", _permitDrillingMobilePhone);
		_columnOriginalValues.put(
			"wellDrillingHomePhone", _wellDrillingHomePhone);
		_columnOriginalValues.put(
			"permitDrillingWorkLocation", _permitDrillingWorkLocation);
		_columnOriginalValues.put(
			"permitDrillingLocation", _permitDrillingLocation);
		_columnOriginalValues.put(
			"permitDrillingNature", _permitDrillingNature);
		_columnOriginalValues.put(
			"permitDrillingContractorName", _permitDrillingContractorName);
		_columnOriginalValues.put(
			"permitDrillContractAddress", _permitDrillContractAddress);
		_columnOriginalValues.put(
			"permitDrillingContractorAdd", _permitDrillingContractorAdd);
		_columnOriginalValues.put(
			"permitDrillingPurpose", _permitDrillingPurpose);
		_columnOriginalValues.put(
			"permitDrillingBoreholeDepth", _permitDrillingBoreholeDepth);
		_columnOriginalValues.put(
			"permitDrillingDiameterBorehole", _permitDrillingDiameterBorehole);
		_columnOriginalValues.put(
			"permitDrillingMethod", _permitDrillingMethod);
		_columnOriginalValues.put(
			"permitDrillingConstMethod", _permitDrillingConstMethod);
		_columnOriginalValues.put(
			"permitDrillingSupplies", _permitDrillingSupplies);
		_columnOriginalValues.put(
			"permitDrillingTechnicalInfo", _permitDrillingTechnicalInfo);
		_columnOriginalValues.put("permitDrillingCubic", _permitDrillingCubic);
		_columnOriginalValues.put(
			"permitDrillingAuthority", _permitDrillingAuthority);
		_columnOriginalValues.put(
			"applicantSignaturePermitBtn", _applicantSignaturePermitBtn);
		_columnOriginalValues.put(
			"permitDrillingSignDate", _permitDrillingSignDate);
		_columnOriginalValues.put("wraApplicationId", _wraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("drillAWellApplicationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("permitDrillApplicationNum", 128L);

		columnBitmasks.put("permitDrillingApplicantName", 256L);

		columnBitmasks.put("permitDrillingMailingAddParish", 512L);

		columnBitmasks.put("permitDrillingMailingAddress", 1024L);

		columnBitmasks.put("permitDrillingEmailAddress", 2048L);

		columnBitmasks.put("permitDrillingOfficePhone", 4096L);

		columnBitmasks.put("permitDrillingMobilePhone", 8192L);

		columnBitmasks.put("wellDrillingHomePhone", 16384L);

		columnBitmasks.put("permitDrillingWorkLocation", 32768L);

		columnBitmasks.put("permitDrillingLocation", 65536L);

		columnBitmasks.put("permitDrillingNature", 131072L);

		columnBitmasks.put("permitDrillingContractorName", 262144L);

		columnBitmasks.put("permitDrillContractAddress", 524288L);

		columnBitmasks.put("permitDrillingContractorAdd", 1048576L);

		columnBitmasks.put("permitDrillingPurpose", 2097152L);

		columnBitmasks.put("permitDrillingBoreholeDepth", 4194304L);

		columnBitmasks.put("permitDrillingDiameterBorehole", 8388608L);

		columnBitmasks.put("permitDrillingMethod", 16777216L);

		columnBitmasks.put("permitDrillingConstMethod", 33554432L);

		columnBitmasks.put("permitDrillingSupplies", 67108864L);

		columnBitmasks.put("permitDrillingTechnicalInfo", 134217728L);

		columnBitmasks.put("permitDrillingCubic", 268435456L);

		columnBitmasks.put("permitDrillingAuthority", 536870912L);

		columnBitmasks.put("applicantSignaturePermitBtn", 1073741824L);

		columnBitmasks.put("permitDrillingSignDate", 2147483648L);

		columnBitmasks.put("wraApplicationId", 4294967296L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PermitToDrillAWell _escapedModel;

}