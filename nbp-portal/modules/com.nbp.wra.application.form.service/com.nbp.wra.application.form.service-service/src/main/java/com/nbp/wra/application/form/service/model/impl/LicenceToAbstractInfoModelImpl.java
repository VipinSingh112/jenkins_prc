/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.wra.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.wra.application.form.service.model.LicenceToAbstractInfo;
import com.nbp.wra.application.form.service.model.LicenceToAbstractInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LicenceToAbstractInfo service. Represents a row in the &quot;nbp_wra_abstract_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LicenceToAbstractInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LicenceToAbstractInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LicenceToAbstractInfoImpl
 * @generated
 */
@JSON(strict = true)
public class LicenceToAbstractInfoModelImpl
	extends BaseModelImpl<LicenceToAbstractInfo>
	implements LicenceToAbstractInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a licence to abstract info model instance should use the <code>LicenceToAbstractInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_wra_abstract_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"abstractLicenceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"applicationNum", Types.VARCHAR},
		{"nameOfApplicant", Types.VARCHAR}, {"parishApplicant", Types.VARCHAR},
		{"mailingAddOfApplicant", Types.VARCHAR},
		{"emailOfApplicant", Types.VARCHAR}, {"officePhone", Types.VARCHAR},
		{"mobilePhone", Types.VARCHAR}, {"homePhone", Types.VARCHAR},
		{"locationOfProposedParish", Types.VARCHAR},
		{"locationOfProParishWork", Types.VARCHAR},
		{"nameOfContractor", Types.VARCHAR},
		{"parishContractor", Types.VARCHAR},
		{"addressOfContractor", Types.VARCHAR},
		{"sourceOfWater", Types.VARCHAR}, {"purposeWaterUse", Types.VARCHAR},
		{"areaAndCropType", Types.VARCHAR},
		{"systemOfIrrigation", Types.VARCHAR},
		{"meansOfDisposal", Types.VARCHAR},
		{"estimateDepthOfBorewell", Types.VARCHAR},
		{"diameterOfBorewell", Types.VARCHAR},
		{"artesianSupply", Types.VARCHAR}, {"geologicalStrait", Types.VARCHAR},
		{"methodOfAbstractingWater", Types.VARCHAR},
		{"maxDailyQuant", Types.VARCHAR},
		{"typeOfAppratusProposed", Types.VARCHAR},
		{"otherInformation", Types.VARCHAR},
		{"requestToSupplyWater", Types.VARCHAR},
		{"authorityInformation", Types.VARCHAR},
		{"dateOfSign", Types.TIMESTAMP}, {"wraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("abstractLicenceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicationNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parishApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mailingAddOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobilePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationOfProposedParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationOfProParishWork", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfContractor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parishContractor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressOfContractor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sourceOfWater", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("purposeWaterUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areaAndCropType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("systemOfIrrigation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meansOfDisposal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estimateDepthOfBorewell", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("diameterOfBorewell", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("artesianSupply", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("geologicalStrait", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("methodOfAbstractingWater", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maxDailyQuant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfAppratusProposed", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherInformation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestToSupplyWater", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorityInformation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfSign", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("wraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_wra_abstract_info (abstractLicenceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicationNum VARCHAR(75) null,nameOfApplicant VARCHAR(75) null,parishApplicant VARCHAR(75) null,mailingAddOfApplicant VARCHAR(1000) null,emailOfApplicant VARCHAR(75) null,officePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null,homePhone VARCHAR(75) null,locationOfProposedParish VARCHAR(75) null,locationOfProParishWork VARCHAR(500) null,nameOfContractor VARCHAR(75) null,parishContractor VARCHAR(75) null,addressOfContractor VARCHAR(500) null,sourceOfWater VARCHAR(500) null,purposeWaterUse VARCHAR(500) null,areaAndCropType VARCHAR(75) null,systemOfIrrigation VARCHAR(75) null,meansOfDisposal VARCHAR(75) null,estimateDepthOfBorewell VARCHAR(75) null,diameterOfBorewell VARCHAR(75) null,artesianSupply VARCHAR(75) null,geologicalStrait VARCHAR(75) null,methodOfAbstractingWater VARCHAR(75) null,maxDailyQuant VARCHAR(75) null,typeOfAppratusProposed VARCHAR(75) null,otherInformation VARCHAR(75) null,requestToSupplyWater VARCHAR(500) null,authorityInformation VARCHAR(500) null,dateOfSign DATE null,wraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_wra_abstract_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY licenceToAbstractInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_wra_abstract_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LicenceToAbstractInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _abstractLicenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAbstractLicenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _abstractLicenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LicenceToAbstractInfo.class;
	}

	@Override
	public String getModelClassName() {
		return LicenceToAbstractInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LicenceToAbstractInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LicenceToAbstractInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LicenceToAbstractInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LicenceToAbstractInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LicenceToAbstractInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LicenceToAbstractInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LicenceToAbstractInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LicenceToAbstractInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LicenceToAbstractInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<LicenceToAbstractInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<LicenceToAbstractInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<LicenceToAbstractInfo, Object>>();

			attributeGetterFunctions.put(
				"abstractLicenceId",
				LicenceToAbstractInfo::getAbstractLicenceId);
			attributeGetterFunctions.put(
				"groupId", LicenceToAbstractInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", LicenceToAbstractInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", LicenceToAbstractInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", LicenceToAbstractInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", LicenceToAbstractInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", LicenceToAbstractInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"applicationNum", LicenceToAbstractInfo::getApplicationNum);
			attributeGetterFunctions.put(
				"nameOfApplicant", LicenceToAbstractInfo::getNameOfApplicant);
			attributeGetterFunctions.put(
				"parishApplicant", LicenceToAbstractInfo::getParishApplicant);
			attributeGetterFunctions.put(
				"mailingAddOfApplicant",
				LicenceToAbstractInfo::getMailingAddOfApplicant);
			attributeGetterFunctions.put(
				"emailOfApplicant", LicenceToAbstractInfo::getEmailOfApplicant);
			attributeGetterFunctions.put(
				"officePhone", LicenceToAbstractInfo::getOfficePhone);
			attributeGetterFunctions.put(
				"mobilePhone", LicenceToAbstractInfo::getMobilePhone);
			attributeGetterFunctions.put(
				"homePhone", LicenceToAbstractInfo::getHomePhone);
			attributeGetterFunctions.put(
				"locationOfProposedParish",
				LicenceToAbstractInfo::getLocationOfProposedParish);
			attributeGetterFunctions.put(
				"locationOfProParishWork",
				LicenceToAbstractInfo::getLocationOfProParishWork);
			attributeGetterFunctions.put(
				"nameOfContractor", LicenceToAbstractInfo::getNameOfContractor);
			attributeGetterFunctions.put(
				"parishContractor", LicenceToAbstractInfo::getParishContractor);
			attributeGetterFunctions.put(
				"addressOfContractor",
				LicenceToAbstractInfo::getAddressOfContractor);
			attributeGetterFunctions.put(
				"sourceOfWater", LicenceToAbstractInfo::getSourceOfWater);
			attributeGetterFunctions.put(
				"purposeWaterUse", LicenceToAbstractInfo::getPurposeWaterUse);
			attributeGetterFunctions.put(
				"areaAndCropType", LicenceToAbstractInfo::getAreaAndCropType);
			attributeGetterFunctions.put(
				"systemOfIrrigation",
				LicenceToAbstractInfo::getSystemOfIrrigation);
			attributeGetterFunctions.put(
				"meansOfDisposal", LicenceToAbstractInfo::getMeansOfDisposal);
			attributeGetterFunctions.put(
				"estimateDepthOfBorewell",
				LicenceToAbstractInfo::getEstimateDepthOfBorewell);
			attributeGetterFunctions.put(
				"diameterOfBorewell",
				LicenceToAbstractInfo::getDiameterOfBorewell);
			attributeGetterFunctions.put(
				"artesianSupply", LicenceToAbstractInfo::getArtesianSupply);
			attributeGetterFunctions.put(
				"geologicalStrait", LicenceToAbstractInfo::getGeologicalStrait);
			attributeGetterFunctions.put(
				"methodOfAbstractingWater",
				LicenceToAbstractInfo::getMethodOfAbstractingWater);
			attributeGetterFunctions.put(
				"maxDailyQuant", LicenceToAbstractInfo::getMaxDailyQuant);
			attributeGetterFunctions.put(
				"typeOfAppratusProposed",
				LicenceToAbstractInfo::getTypeOfAppratusProposed);
			attributeGetterFunctions.put(
				"otherInformation", LicenceToAbstractInfo::getOtherInformation);
			attributeGetterFunctions.put(
				"requestToSupplyWater",
				LicenceToAbstractInfo::getRequestToSupplyWater);
			attributeGetterFunctions.put(
				"authorityInformation",
				LicenceToAbstractInfo::getAuthorityInformation);
			attributeGetterFunctions.put(
				"dateOfSign", LicenceToAbstractInfo::getDateOfSign);
			attributeGetterFunctions.put(
				"wraApplicationId", LicenceToAbstractInfo::getWraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<LicenceToAbstractInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<LicenceToAbstractInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<LicenceToAbstractInfo, ?>>();

			attributeSetterBiConsumers.put(
				"abstractLicenceId",
				(BiConsumer<LicenceToAbstractInfo, Long>)
					LicenceToAbstractInfo::setAbstractLicenceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<LicenceToAbstractInfo, Long>)
					LicenceToAbstractInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<LicenceToAbstractInfo, Long>)
					LicenceToAbstractInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<LicenceToAbstractInfo, Long>)
					LicenceToAbstractInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<LicenceToAbstractInfo, Date>)
					LicenceToAbstractInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<LicenceToAbstractInfo, Date>)
					LicenceToAbstractInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicationNum",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setApplicationNum);
			attributeSetterBiConsumers.put(
				"nameOfApplicant",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setNameOfApplicant);
			attributeSetterBiConsumers.put(
				"parishApplicant",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setParishApplicant);
			attributeSetterBiConsumers.put(
				"mailingAddOfApplicant",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setMailingAddOfApplicant);
			attributeSetterBiConsumers.put(
				"emailOfApplicant",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setEmailOfApplicant);
			attributeSetterBiConsumers.put(
				"officePhone",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setOfficePhone);
			attributeSetterBiConsumers.put(
				"mobilePhone",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setMobilePhone);
			attributeSetterBiConsumers.put(
				"homePhone",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setHomePhone);
			attributeSetterBiConsumers.put(
				"locationOfProposedParish",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setLocationOfProposedParish);
			attributeSetterBiConsumers.put(
				"locationOfProParishWork",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setLocationOfProParishWork);
			attributeSetterBiConsumers.put(
				"nameOfContractor",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setNameOfContractor);
			attributeSetterBiConsumers.put(
				"parishContractor",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setParishContractor);
			attributeSetterBiConsumers.put(
				"addressOfContractor",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setAddressOfContractor);
			attributeSetterBiConsumers.put(
				"sourceOfWater",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setSourceOfWater);
			attributeSetterBiConsumers.put(
				"purposeWaterUse",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setPurposeWaterUse);
			attributeSetterBiConsumers.put(
				"areaAndCropType",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setAreaAndCropType);
			attributeSetterBiConsumers.put(
				"systemOfIrrigation",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setSystemOfIrrigation);
			attributeSetterBiConsumers.put(
				"meansOfDisposal",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setMeansOfDisposal);
			attributeSetterBiConsumers.put(
				"estimateDepthOfBorewell",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setEstimateDepthOfBorewell);
			attributeSetterBiConsumers.put(
				"diameterOfBorewell",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setDiameterOfBorewell);
			attributeSetterBiConsumers.put(
				"artesianSupply",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setArtesianSupply);
			attributeSetterBiConsumers.put(
				"geologicalStrait",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setGeologicalStrait);
			attributeSetterBiConsumers.put(
				"methodOfAbstractingWater",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setMethodOfAbstractingWater);
			attributeSetterBiConsumers.put(
				"maxDailyQuant",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setMaxDailyQuant);
			attributeSetterBiConsumers.put(
				"typeOfAppratusProposed",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setTypeOfAppratusProposed);
			attributeSetterBiConsumers.put(
				"otherInformation",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setOtherInformation);
			attributeSetterBiConsumers.put(
				"requestToSupplyWater",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setRequestToSupplyWater);
			attributeSetterBiConsumers.put(
				"authorityInformation",
				(BiConsumer<LicenceToAbstractInfo, String>)
					LicenceToAbstractInfo::setAuthorityInformation);
			attributeSetterBiConsumers.put(
				"dateOfSign",
				(BiConsumer<LicenceToAbstractInfo, Date>)
					LicenceToAbstractInfo::setDateOfSign);
			attributeSetterBiConsumers.put(
				"wraApplicationId",
				(BiConsumer<LicenceToAbstractInfo, Long>)
					LicenceToAbstractInfo::setWraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAbstractLicenceId() {
		return _abstractLicenceId;
	}

	@Override
	public void setAbstractLicenceId(long abstractLicenceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_abstractLicenceId = abstractLicenceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicationNum() {
		if (_applicationNum == null) {
			return "";
		}
		else {
			return _applicationNum;
		}
	}

	@Override
	public void setApplicationNum(String applicationNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNum = applicationNum;
	}

	@JSON
	@Override
	public String getNameOfApplicant() {
		if (_nameOfApplicant == null) {
			return "";
		}
		else {
			return _nameOfApplicant;
		}
	}

	@Override
	public void setNameOfApplicant(String nameOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfApplicant = nameOfApplicant;
	}

	@JSON
	@Override
	public String getParishApplicant() {
		if (_parishApplicant == null) {
			return "";
		}
		else {
			return _parishApplicant;
		}
	}

	@Override
	public void setParishApplicant(String parishApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parishApplicant = parishApplicant;
	}

	@JSON
	@Override
	public String getMailingAddOfApplicant() {
		if (_mailingAddOfApplicant == null) {
			return "";
		}
		else {
			return _mailingAddOfApplicant;
		}
	}

	@Override
	public void setMailingAddOfApplicant(String mailingAddOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mailingAddOfApplicant = mailingAddOfApplicant;
	}

	@JSON
	@Override
	public String getEmailOfApplicant() {
		if (_emailOfApplicant == null) {
			return "";
		}
		else {
			return _emailOfApplicant;
		}
	}

	@Override
	public void setEmailOfApplicant(String emailOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailOfApplicant = emailOfApplicant;
	}

	@JSON
	@Override
	public String getOfficePhone() {
		if (_officePhone == null) {
			return "";
		}
		else {
			return _officePhone;
		}
	}

	@Override
	public void setOfficePhone(String officePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officePhone = officePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return "";
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobilePhone = mobilePhone;
	}

	@JSON
	@Override
	public String getHomePhone() {
		if (_homePhone == null) {
			return "";
		}
		else {
			return _homePhone;
		}
	}

	@Override
	public void setHomePhone(String homePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homePhone = homePhone;
	}

	@JSON
	@Override
	public String getLocationOfProposedParish() {
		if (_locationOfProposedParish == null) {
			return "";
		}
		else {
			return _locationOfProposedParish;
		}
	}

	@Override
	public void setLocationOfProposedParish(String locationOfProposedParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locationOfProposedParish = locationOfProposedParish;
	}

	@JSON
	@Override
	public String getLocationOfProParishWork() {
		if (_locationOfProParishWork == null) {
			return "";
		}
		else {
			return _locationOfProParishWork;
		}
	}

	@Override
	public void setLocationOfProParishWork(String locationOfProParishWork) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locationOfProParishWork = locationOfProParishWork;
	}

	@JSON
	@Override
	public String getNameOfContractor() {
		if (_nameOfContractor == null) {
			return "";
		}
		else {
			return _nameOfContractor;
		}
	}

	@Override
	public void setNameOfContractor(String nameOfContractor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfContractor = nameOfContractor;
	}

	@JSON
	@Override
	public String getParishContractor() {
		if (_parishContractor == null) {
			return "";
		}
		else {
			return _parishContractor;
		}
	}

	@Override
	public void setParishContractor(String parishContractor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parishContractor = parishContractor;
	}

	@JSON
	@Override
	public String getAddressOfContractor() {
		if (_addressOfContractor == null) {
			return "";
		}
		else {
			return _addressOfContractor;
		}
	}

	@Override
	public void setAddressOfContractor(String addressOfContractor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressOfContractor = addressOfContractor;
	}

	@JSON
	@Override
	public String getSourceOfWater() {
		if (_sourceOfWater == null) {
			return "";
		}
		else {
			return _sourceOfWater;
		}
	}

	@Override
	public void setSourceOfWater(String sourceOfWater) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourceOfWater = sourceOfWater;
	}

	@JSON
	@Override
	public String getPurposeWaterUse() {
		if (_purposeWaterUse == null) {
			return "";
		}
		else {
			return _purposeWaterUse;
		}
	}

	@Override
	public void setPurposeWaterUse(String purposeWaterUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_purposeWaterUse = purposeWaterUse;
	}

	@JSON
	@Override
	public String getAreaAndCropType() {
		if (_areaAndCropType == null) {
			return "";
		}
		else {
			return _areaAndCropType;
		}
	}

	@Override
	public void setAreaAndCropType(String areaAndCropType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_areaAndCropType = areaAndCropType;
	}

	@JSON
	@Override
	public String getSystemOfIrrigation() {
		if (_systemOfIrrigation == null) {
			return "";
		}
		else {
			return _systemOfIrrigation;
		}
	}

	@Override
	public void setSystemOfIrrigation(String systemOfIrrigation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_systemOfIrrigation = systemOfIrrigation;
	}

	@JSON
	@Override
	public String getMeansOfDisposal() {
		if (_meansOfDisposal == null) {
			return "";
		}
		else {
			return _meansOfDisposal;
		}
	}

	@Override
	public void setMeansOfDisposal(String meansOfDisposal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_meansOfDisposal = meansOfDisposal;
	}

	@JSON
	@Override
	public String getEstimateDepthOfBorewell() {
		if (_estimateDepthOfBorewell == null) {
			return "";
		}
		else {
			return _estimateDepthOfBorewell;
		}
	}

	@Override
	public void setEstimateDepthOfBorewell(String estimateDepthOfBorewell) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estimateDepthOfBorewell = estimateDepthOfBorewell;
	}

	@JSON
	@Override
	public String getDiameterOfBorewell() {
		if (_diameterOfBorewell == null) {
			return "";
		}
		else {
			return _diameterOfBorewell;
		}
	}

	@Override
	public void setDiameterOfBorewell(String diameterOfBorewell) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_diameterOfBorewell = diameterOfBorewell;
	}

	@JSON
	@Override
	public String getArtesianSupply() {
		if (_artesianSupply == null) {
			return "";
		}
		else {
			return _artesianSupply;
		}
	}

	@Override
	public void setArtesianSupply(String artesianSupply) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_artesianSupply = artesianSupply;
	}

	@JSON
	@Override
	public String getGeologicalStrait() {
		if (_geologicalStrait == null) {
			return "";
		}
		else {
			return _geologicalStrait;
		}
	}

	@Override
	public void setGeologicalStrait(String geologicalStrait) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_geologicalStrait = geologicalStrait;
	}

	@JSON
	@Override
	public String getMethodOfAbstractingWater() {
		if (_methodOfAbstractingWater == null) {
			return "";
		}
		else {
			return _methodOfAbstractingWater;
		}
	}

	@Override
	public void setMethodOfAbstractingWater(String methodOfAbstractingWater) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_methodOfAbstractingWater = methodOfAbstractingWater;
	}

	@JSON
	@Override
	public String getMaxDailyQuant() {
		if (_maxDailyQuant == null) {
			return "";
		}
		else {
			return _maxDailyQuant;
		}
	}

	@Override
	public void setMaxDailyQuant(String maxDailyQuant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maxDailyQuant = maxDailyQuant;
	}

	@JSON
	@Override
	public String getTypeOfAppratusProposed() {
		if (_typeOfAppratusProposed == null) {
			return "";
		}
		else {
			return _typeOfAppratusProposed;
		}
	}

	@Override
	public void setTypeOfAppratusProposed(String typeOfAppratusProposed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfAppratusProposed = typeOfAppratusProposed;
	}

	@JSON
	@Override
	public String getOtherInformation() {
		if (_otherInformation == null) {
			return "";
		}
		else {
			return _otherInformation;
		}
	}

	@Override
	public void setOtherInformation(String otherInformation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherInformation = otherInformation;
	}

	@JSON
	@Override
	public String getRequestToSupplyWater() {
		if (_requestToSupplyWater == null) {
			return "";
		}
		else {
			return _requestToSupplyWater;
		}
	}

	@Override
	public void setRequestToSupplyWater(String requestToSupplyWater) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestToSupplyWater = requestToSupplyWater;
	}

	@JSON
	@Override
	public String getAuthorityInformation() {
		if (_authorityInformation == null) {
			return "";
		}
		else {
			return _authorityInformation;
		}
	}

	@Override
	public void setAuthorityInformation(String authorityInformation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorityInformation = authorityInformation;
	}

	@JSON
	@Override
	public Date getDateOfSign() {
		return _dateOfSign;
	}

	@Override
	public void setDateOfSign(Date dateOfSign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfSign = dateOfSign;
	}

	@JSON
	@Override
	public long getWraApplicationId() {
		return _wraApplicationId;
	}

	@Override
	public void setWraApplicationId(long wraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wraApplicationId = wraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalWraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("wraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LicenceToAbstractInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LicenceToAbstractInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LicenceToAbstractInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LicenceToAbstractInfoImpl licenceToAbstractInfoImpl =
			new LicenceToAbstractInfoImpl();

		licenceToAbstractInfoImpl.setAbstractLicenceId(getAbstractLicenceId());
		licenceToAbstractInfoImpl.setGroupId(getGroupId());
		licenceToAbstractInfoImpl.setCompanyId(getCompanyId());
		licenceToAbstractInfoImpl.setUserId(getUserId());
		licenceToAbstractInfoImpl.setUserName(getUserName());
		licenceToAbstractInfoImpl.setCreateDate(getCreateDate());
		licenceToAbstractInfoImpl.setModifiedDate(getModifiedDate());
		licenceToAbstractInfoImpl.setApplicationNum(getApplicationNum());
		licenceToAbstractInfoImpl.setNameOfApplicant(getNameOfApplicant());
		licenceToAbstractInfoImpl.setParishApplicant(getParishApplicant());
		licenceToAbstractInfoImpl.setMailingAddOfApplicant(
			getMailingAddOfApplicant());
		licenceToAbstractInfoImpl.setEmailOfApplicant(getEmailOfApplicant());
		licenceToAbstractInfoImpl.setOfficePhone(getOfficePhone());
		licenceToAbstractInfoImpl.setMobilePhone(getMobilePhone());
		licenceToAbstractInfoImpl.setHomePhone(getHomePhone());
		licenceToAbstractInfoImpl.setLocationOfProposedParish(
			getLocationOfProposedParish());
		licenceToAbstractInfoImpl.setLocationOfProParishWork(
			getLocationOfProParishWork());
		licenceToAbstractInfoImpl.setNameOfContractor(getNameOfContractor());
		licenceToAbstractInfoImpl.setParishContractor(getParishContractor());
		licenceToAbstractInfoImpl.setAddressOfContractor(
			getAddressOfContractor());
		licenceToAbstractInfoImpl.setSourceOfWater(getSourceOfWater());
		licenceToAbstractInfoImpl.setPurposeWaterUse(getPurposeWaterUse());
		licenceToAbstractInfoImpl.setAreaAndCropType(getAreaAndCropType());
		licenceToAbstractInfoImpl.setSystemOfIrrigation(
			getSystemOfIrrigation());
		licenceToAbstractInfoImpl.setMeansOfDisposal(getMeansOfDisposal());
		licenceToAbstractInfoImpl.setEstimateDepthOfBorewell(
			getEstimateDepthOfBorewell());
		licenceToAbstractInfoImpl.setDiameterOfBorewell(
			getDiameterOfBorewell());
		licenceToAbstractInfoImpl.setArtesianSupply(getArtesianSupply());
		licenceToAbstractInfoImpl.setGeologicalStrait(getGeologicalStrait());
		licenceToAbstractInfoImpl.setMethodOfAbstractingWater(
			getMethodOfAbstractingWater());
		licenceToAbstractInfoImpl.setMaxDailyQuant(getMaxDailyQuant());
		licenceToAbstractInfoImpl.setTypeOfAppratusProposed(
			getTypeOfAppratusProposed());
		licenceToAbstractInfoImpl.setOtherInformation(getOtherInformation());
		licenceToAbstractInfoImpl.setRequestToSupplyWater(
			getRequestToSupplyWater());
		licenceToAbstractInfoImpl.setAuthorityInformation(
			getAuthorityInformation());
		licenceToAbstractInfoImpl.setDateOfSign(getDateOfSign());
		licenceToAbstractInfoImpl.setWraApplicationId(getWraApplicationId());

		licenceToAbstractInfoImpl.resetOriginalValues();

		return licenceToAbstractInfoImpl;
	}

	@Override
	public LicenceToAbstractInfo cloneWithOriginalValues() {
		LicenceToAbstractInfoImpl licenceToAbstractInfoImpl =
			new LicenceToAbstractInfoImpl();

		licenceToAbstractInfoImpl.setAbstractLicenceId(
			this.<Long>getColumnOriginalValue("abstractLicenceId"));
		licenceToAbstractInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		licenceToAbstractInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		licenceToAbstractInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		licenceToAbstractInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		licenceToAbstractInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		licenceToAbstractInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		licenceToAbstractInfoImpl.setApplicationNum(
			this.<String>getColumnOriginalValue("applicationNum"));
		licenceToAbstractInfoImpl.setNameOfApplicant(
			this.<String>getColumnOriginalValue("nameOfApplicant"));
		licenceToAbstractInfoImpl.setParishApplicant(
			this.<String>getColumnOriginalValue("parishApplicant"));
		licenceToAbstractInfoImpl.setMailingAddOfApplicant(
			this.<String>getColumnOriginalValue("mailingAddOfApplicant"));
		licenceToAbstractInfoImpl.setEmailOfApplicant(
			this.<String>getColumnOriginalValue("emailOfApplicant"));
		licenceToAbstractInfoImpl.setOfficePhone(
			this.<String>getColumnOriginalValue("officePhone"));
		licenceToAbstractInfoImpl.setMobilePhone(
			this.<String>getColumnOriginalValue("mobilePhone"));
		licenceToAbstractInfoImpl.setHomePhone(
			this.<String>getColumnOriginalValue("homePhone"));
		licenceToAbstractInfoImpl.setLocationOfProposedParish(
			this.<String>getColumnOriginalValue("locationOfProposedParish"));
		licenceToAbstractInfoImpl.setLocationOfProParishWork(
			this.<String>getColumnOriginalValue("locationOfProParishWork"));
		licenceToAbstractInfoImpl.setNameOfContractor(
			this.<String>getColumnOriginalValue("nameOfContractor"));
		licenceToAbstractInfoImpl.setParishContractor(
			this.<String>getColumnOriginalValue("parishContractor"));
		licenceToAbstractInfoImpl.setAddressOfContractor(
			this.<String>getColumnOriginalValue("addressOfContractor"));
		licenceToAbstractInfoImpl.setSourceOfWater(
			this.<String>getColumnOriginalValue("sourceOfWater"));
		licenceToAbstractInfoImpl.setPurposeWaterUse(
			this.<String>getColumnOriginalValue("purposeWaterUse"));
		licenceToAbstractInfoImpl.setAreaAndCropType(
			this.<String>getColumnOriginalValue("areaAndCropType"));
		licenceToAbstractInfoImpl.setSystemOfIrrigation(
			this.<String>getColumnOriginalValue("systemOfIrrigation"));
		licenceToAbstractInfoImpl.setMeansOfDisposal(
			this.<String>getColumnOriginalValue("meansOfDisposal"));
		licenceToAbstractInfoImpl.setEstimateDepthOfBorewell(
			this.<String>getColumnOriginalValue("estimateDepthOfBorewell"));
		licenceToAbstractInfoImpl.setDiameterOfBorewell(
			this.<String>getColumnOriginalValue("diameterOfBorewell"));
		licenceToAbstractInfoImpl.setArtesianSupply(
			this.<String>getColumnOriginalValue("artesianSupply"));
		licenceToAbstractInfoImpl.setGeologicalStrait(
			this.<String>getColumnOriginalValue("geologicalStrait"));
		licenceToAbstractInfoImpl.setMethodOfAbstractingWater(
			this.<String>getColumnOriginalValue("methodOfAbstractingWater"));
		licenceToAbstractInfoImpl.setMaxDailyQuant(
			this.<String>getColumnOriginalValue("maxDailyQuant"));
		licenceToAbstractInfoImpl.setTypeOfAppratusProposed(
			this.<String>getColumnOriginalValue("typeOfAppratusProposed"));
		licenceToAbstractInfoImpl.setOtherInformation(
			this.<String>getColumnOriginalValue("otherInformation"));
		licenceToAbstractInfoImpl.setRequestToSupplyWater(
			this.<String>getColumnOriginalValue("requestToSupplyWater"));
		licenceToAbstractInfoImpl.setAuthorityInformation(
			this.<String>getColumnOriginalValue("authorityInformation"));
		licenceToAbstractInfoImpl.setDateOfSign(
			this.<Date>getColumnOriginalValue("dateOfSign"));
		licenceToAbstractInfoImpl.setWraApplicationId(
			this.<Long>getColumnOriginalValue("wraApplicationId"));

		return licenceToAbstractInfoImpl;
	}

	@Override
	public int compareTo(LicenceToAbstractInfo licenceToAbstractInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), licenceToAbstractInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LicenceToAbstractInfo)) {
			return false;
		}

		LicenceToAbstractInfo licenceToAbstractInfo =
			(LicenceToAbstractInfo)object;

		long primaryKey = licenceToAbstractInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LicenceToAbstractInfo> toCacheModel() {
		LicenceToAbstractInfoCacheModel licenceToAbstractInfoCacheModel =
			new LicenceToAbstractInfoCacheModel();

		licenceToAbstractInfoCacheModel.abstractLicenceId =
			getAbstractLicenceId();

		licenceToAbstractInfoCacheModel.groupId = getGroupId();

		licenceToAbstractInfoCacheModel.companyId = getCompanyId();

		licenceToAbstractInfoCacheModel.userId = getUserId();

		licenceToAbstractInfoCacheModel.userName = getUserName();

		String userName = licenceToAbstractInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			licenceToAbstractInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			licenceToAbstractInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			licenceToAbstractInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			licenceToAbstractInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			licenceToAbstractInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		licenceToAbstractInfoCacheModel.applicationNum = getApplicationNum();

		String applicationNum = licenceToAbstractInfoCacheModel.applicationNum;

		if ((applicationNum != null) && (applicationNum.length() == 0)) {
			licenceToAbstractInfoCacheModel.applicationNum = null;
		}

		licenceToAbstractInfoCacheModel.nameOfApplicant = getNameOfApplicant();

		String nameOfApplicant =
			licenceToAbstractInfoCacheModel.nameOfApplicant;

		if ((nameOfApplicant != null) && (nameOfApplicant.length() == 0)) {
			licenceToAbstractInfoCacheModel.nameOfApplicant = null;
		}

		licenceToAbstractInfoCacheModel.parishApplicant = getParishApplicant();

		String parishApplicant =
			licenceToAbstractInfoCacheModel.parishApplicant;

		if ((parishApplicant != null) && (parishApplicant.length() == 0)) {
			licenceToAbstractInfoCacheModel.parishApplicant = null;
		}

		licenceToAbstractInfoCacheModel.mailingAddOfApplicant =
			getMailingAddOfApplicant();

		String mailingAddOfApplicant =
			licenceToAbstractInfoCacheModel.mailingAddOfApplicant;

		if ((mailingAddOfApplicant != null) &&
			(mailingAddOfApplicant.length() == 0)) {

			licenceToAbstractInfoCacheModel.mailingAddOfApplicant = null;
		}

		licenceToAbstractInfoCacheModel.emailOfApplicant =
			getEmailOfApplicant();

		String emailOfApplicant =
			licenceToAbstractInfoCacheModel.emailOfApplicant;

		if ((emailOfApplicant != null) && (emailOfApplicant.length() == 0)) {
			licenceToAbstractInfoCacheModel.emailOfApplicant = null;
		}

		licenceToAbstractInfoCacheModel.officePhone = getOfficePhone();

		String officePhone = licenceToAbstractInfoCacheModel.officePhone;

		if ((officePhone != null) && (officePhone.length() == 0)) {
			licenceToAbstractInfoCacheModel.officePhone = null;
		}

		licenceToAbstractInfoCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = licenceToAbstractInfoCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			licenceToAbstractInfoCacheModel.mobilePhone = null;
		}

		licenceToAbstractInfoCacheModel.homePhone = getHomePhone();

		String homePhone = licenceToAbstractInfoCacheModel.homePhone;

		if ((homePhone != null) && (homePhone.length() == 0)) {
			licenceToAbstractInfoCacheModel.homePhone = null;
		}

		licenceToAbstractInfoCacheModel.locationOfProposedParish =
			getLocationOfProposedParish();

		String locationOfProposedParish =
			licenceToAbstractInfoCacheModel.locationOfProposedParish;

		if ((locationOfProposedParish != null) &&
			(locationOfProposedParish.length() == 0)) {

			licenceToAbstractInfoCacheModel.locationOfProposedParish = null;
		}

		licenceToAbstractInfoCacheModel.locationOfProParishWork =
			getLocationOfProParishWork();

		String locationOfProParishWork =
			licenceToAbstractInfoCacheModel.locationOfProParishWork;

		if ((locationOfProParishWork != null) &&
			(locationOfProParishWork.length() == 0)) {

			licenceToAbstractInfoCacheModel.locationOfProParishWork = null;
		}

		licenceToAbstractInfoCacheModel.nameOfContractor =
			getNameOfContractor();

		String nameOfContractor =
			licenceToAbstractInfoCacheModel.nameOfContractor;

		if ((nameOfContractor != null) && (nameOfContractor.length() == 0)) {
			licenceToAbstractInfoCacheModel.nameOfContractor = null;
		}

		licenceToAbstractInfoCacheModel.parishContractor =
			getParishContractor();

		String parishContractor =
			licenceToAbstractInfoCacheModel.parishContractor;

		if ((parishContractor != null) && (parishContractor.length() == 0)) {
			licenceToAbstractInfoCacheModel.parishContractor = null;
		}

		licenceToAbstractInfoCacheModel.addressOfContractor =
			getAddressOfContractor();

		String addressOfContractor =
			licenceToAbstractInfoCacheModel.addressOfContractor;

		if ((addressOfContractor != null) &&
			(addressOfContractor.length() == 0)) {

			licenceToAbstractInfoCacheModel.addressOfContractor = null;
		}

		licenceToAbstractInfoCacheModel.sourceOfWater = getSourceOfWater();

		String sourceOfWater = licenceToAbstractInfoCacheModel.sourceOfWater;

		if ((sourceOfWater != null) && (sourceOfWater.length() == 0)) {
			licenceToAbstractInfoCacheModel.sourceOfWater = null;
		}

		licenceToAbstractInfoCacheModel.purposeWaterUse = getPurposeWaterUse();

		String purposeWaterUse =
			licenceToAbstractInfoCacheModel.purposeWaterUse;

		if ((purposeWaterUse != null) && (purposeWaterUse.length() == 0)) {
			licenceToAbstractInfoCacheModel.purposeWaterUse = null;
		}

		licenceToAbstractInfoCacheModel.areaAndCropType = getAreaAndCropType();

		String areaAndCropType =
			licenceToAbstractInfoCacheModel.areaAndCropType;

		if ((areaAndCropType != null) && (areaAndCropType.length() == 0)) {
			licenceToAbstractInfoCacheModel.areaAndCropType = null;
		}

		licenceToAbstractInfoCacheModel.systemOfIrrigation =
			getSystemOfIrrigation();

		String systemOfIrrigation =
			licenceToAbstractInfoCacheModel.systemOfIrrigation;

		if ((systemOfIrrigation != null) &&
			(systemOfIrrigation.length() == 0)) {

			licenceToAbstractInfoCacheModel.systemOfIrrigation = null;
		}

		licenceToAbstractInfoCacheModel.meansOfDisposal = getMeansOfDisposal();

		String meansOfDisposal =
			licenceToAbstractInfoCacheModel.meansOfDisposal;

		if ((meansOfDisposal != null) && (meansOfDisposal.length() == 0)) {
			licenceToAbstractInfoCacheModel.meansOfDisposal = null;
		}

		licenceToAbstractInfoCacheModel.estimateDepthOfBorewell =
			getEstimateDepthOfBorewell();

		String estimateDepthOfBorewell =
			licenceToAbstractInfoCacheModel.estimateDepthOfBorewell;

		if ((estimateDepthOfBorewell != null) &&
			(estimateDepthOfBorewell.length() == 0)) {

			licenceToAbstractInfoCacheModel.estimateDepthOfBorewell = null;
		}

		licenceToAbstractInfoCacheModel.diameterOfBorewell =
			getDiameterOfBorewell();

		String diameterOfBorewell =
			licenceToAbstractInfoCacheModel.diameterOfBorewell;

		if ((diameterOfBorewell != null) &&
			(diameterOfBorewell.length() == 0)) {

			licenceToAbstractInfoCacheModel.diameterOfBorewell = null;
		}

		licenceToAbstractInfoCacheModel.artesianSupply = getArtesianSupply();

		String artesianSupply = licenceToAbstractInfoCacheModel.artesianSupply;

		if ((artesianSupply != null) && (artesianSupply.length() == 0)) {
			licenceToAbstractInfoCacheModel.artesianSupply = null;
		}

		licenceToAbstractInfoCacheModel.geologicalStrait =
			getGeologicalStrait();

		String geologicalStrait =
			licenceToAbstractInfoCacheModel.geologicalStrait;

		if ((geologicalStrait != null) && (geologicalStrait.length() == 0)) {
			licenceToAbstractInfoCacheModel.geologicalStrait = null;
		}

		licenceToAbstractInfoCacheModel.methodOfAbstractingWater =
			getMethodOfAbstractingWater();

		String methodOfAbstractingWater =
			licenceToAbstractInfoCacheModel.methodOfAbstractingWater;

		if ((methodOfAbstractingWater != null) &&
			(methodOfAbstractingWater.length() == 0)) {

			licenceToAbstractInfoCacheModel.methodOfAbstractingWater = null;
		}

		licenceToAbstractInfoCacheModel.maxDailyQuant = getMaxDailyQuant();

		String maxDailyQuant = licenceToAbstractInfoCacheModel.maxDailyQuant;

		if ((maxDailyQuant != null) && (maxDailyQuant.length() == 0)) {
			licenceToAbstractInfoCacheModel.maxDailyQuant = null;
		}

		licenceToAbstractInfoCacheModel.typeOfAppratusProposed =
			getTypeOfAppratusProposed();

		String typeOfAppratusProposed =
			licenceToAbstractInfoCacheModel.typeOfAppratusProposed;

		if ((typeOfAppratusProposed != null) &&
			(typeOfAppratusProposed.length() == 0)) {

			licenceToAbstractInfoCacheModel.typeOfAppratusProposed = null;
		}

		licenceToAbstractInfoCacheModel.otherInformation =
			getOtherInformation();

		String otherInformation =
			licenceToAbstractInfoCacheModel.otherInformation;

		if ((otherInformation != null) && (otherInformation.length() == 0)) {
			licenceToAbstractInfoCacheModel.otherInformation = null;
		}

		licenceToAbstractInfoCacheModel.requestToSupplyWater =
			getRequestToSupplyWater();

		String requestToSupplyWater =
			licenceToAbstractInfoCacheModel.requestToSupplyWater;

		if ((requestToSupplyWater != null) &&
			(requestToSupplyWater.length() == 0)) {

			licenceToAbstractInfoCacheModel.requestToSupplyWater = null;
		}

		licenceToAbstractInfoCacheModel.authorityInformation =
			getAuthorityInformation();

		String authorityInformation =
			licenceToAbstractInfoCacheModel.authorityInformation;

		if ((authorityInformation != null) &&
			(authorityInformation.length() == 0)) {

			licenceToAbstractInfoCacheModel.authorityInformation = null;
		}

		Date dateOfSign = getDateOfSign();

		if (dateOfSign != null) {
			licenceToAbstractInfoCacheModel.dateOfSign = dateOfSign.getTime();
		}
		else {
			licenceToAbstractInfoCacheModel.dateOfSign = Long.MIN_VALUE;
		}

		licenceToAbstractInfoCacheModel.wraApplicationId =
			getWraApplicationId();

		return licenceToAbstractInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LicenceToAbstractInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LicenceToAbstractInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LicenceToAbstractInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(LicenceToAbstractInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LicenceToAbstractInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					LicenceToAbstractInfo.class, ModelWrapper.class);

	}

	private long _abstractLicenceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicationNum;
	private String _nameOfApplicant;
	private String _parishApplicant;
	private String _mailingAddOfApplicant;
	private String _emailOfApplicant;
	private String _officePhone;
	private String _mobilePhone;
	private String _homePhone;
	private String _locationOfProposedParish;
	private String _locationOfProParishWork;
	private String _nameOfContractor;
	private String _parishContractor;
	private String _addressOfContractor;
	private String _sourceOfWater;
	private String _purposeWaterUse;
	private String _areaAndCropType;
	private String _systemOfIrrigation;
	private String _meansOfDisposal;
	private String _estimateDepthOfBorewell;
	private String _diameterOfBorewell;
	private String _artesianSupply;
	private String _geologicalStrait;
	private String _methodOfAbstractingWater;
	private String _maxDailyQuant;
	private String _typeOfAppratusProposed;
	private String _otherInformation;
	private String _requestToSupplyWater;
	private String _authorityInformation;
	private Date _dateOfSign;
	private long _wraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<LicenceToAbstractInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LicenceToAbstractInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("abstractLicenceId", _abstractLicenceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("applicationNum", _applicationNum);
		_columnOriginalValues.put("nameOfApplicant", _nameOfApplicant);
		_columnOriginalValues.put("parishApplicant", _parishApplicant);
		_columnOriginalValues.put(
			"mailingAddOfApplicant", _mailingAddOfApplicant);
		_columnOriginalValues.put("emailOfApplicant", _emailOfApplicant);
		_columnOriginalValues.put("officePhone", _officePhone);
		_columnOriginalValues.put("mobilePhone", _mobilePhone);
		_columnOriginalValues.put("homePhone", _homePhone);
		_columnOriginalValues.put(
			"locationOfProposedParish", _locationOfProposedParish);
		_columnOriginalValues.put(
			"locationOfProParishWork", _locationOfProParishWork);
		_columnOriginalValues.put("nameOfContractor", _nameOfContractor);
		_columnOriginalValues.put("parishContractor", _parishContractor);
		_columnOriginalValues.put("addressOfContractor", _addressOfContractor);
		_columnOriginalValues.put("sourceOfWater", _sourceOfWater);
		_columnOriginalValues.put("purposeWaterUse", _purposeWaterUse);
		_columnOriginalValues.put("areaAndCropType", _areaAndCropType);
		_columnOriginalValues.put("systemOfIrrigation", _systemOfIrrigation);
		_columnOriginalValues.put("meansOfDisposal", _meansOfDisposal);
		_columnOriginalValues.put(
			"estimateDepthOfBorewell", _estimateDepthOfBorewell);
		_columnOriginalValues.put("diameterOfBorewell", _diameterOfBorewell);
		_columnOriginalValues.put("artesianSupply", _artesianSupply);
		_columnOriginalValues.put("geologicalStrait", _geologicalStrait);
		_columnOriginalValues.put(
			"methodOfAbstractingWater", _methodOfAbstractingWater);
		_columnOriginalValues.put("maxDailyQuant", _maxDailyQuant);
		_columnOriginalValues.put(
			"typeOfAppratusProposed", _typeOfAppratusProposed);
		_columnOriginalValues.put("otherInformation", _otherInformation);
		_columnOriginalValues.put(
			"requestToSupplyWater", _requestToSupplyWater);
		_columnOriginalValues.put(
			"authorityInformation", _authorityInformation);
		_columnOriginalValues.put("dateOfSign", _dateOfSign);
		_columnOriginalValues.put("wraApplicationId", _wraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("abstractLicenceId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("applicationNum", 128L);

		columnBitmasks.put("nameOfApplicant", 256L);

		columnBitmasks.put("parishApplicant", 512L);

		columnBitmasks.put("mailingAddOfApplicant", 1024L);

		columnBitmasks.put("emailOfApplicant", 2048L);

		columnBitmasks.put("officePhone", 4096L);

		columnBitmasks.put("mobilePhone", 8192L);

		columnBitmasks.put("homePhone", 16384L);

		columnBitmasks.put("locationOfProposedParish", 32768L);

		columnBitmasks.put("locationOfProParishWork", 65536L);

		columnBitmasks.put("nameOfContractor", 131072L);

		columnBitmasks.put("parishContractor", 262144L);

		columnBitmasks.put("addressOfContractor", 524288L);

		columnBitmasks.put("sourceOfWater", 1048576L);

		columnBitmasks.put("purposeWaterUse", 2097152L);

		columnBitmasks.put("areaAndCropType", 4194304L);

		columnBitmasks.put("systemOfIrrigation", 8388608L);

		columnBitmasks.put("meansOfDisposal", 16777216L);

		columnBitmasks.put("estimateDepthOfBorewell", 33554432L);

		columnBitmasks.put("diameterOfBorewell", 67108864L);

		columnBitmasks.put("artesianSupply", 134217728L);

		columnBitmasks.put("geologicalStrait", 268435456L);

		columnBitmasks.put("methodOfAbstractingWater", 536870912L);

		columnBitmasks.put("maxDailyQuant", 1073741824L);

		columnBitmasks.put("typeOfAppratusProposed", 2147483648L);

		columnBitmasks.put("otherInformation", 4294967296L);

		columnBitmasks.put("requestToSupplyWater", 8589934592L);

		columnBitmasks.put("authorityInformation", 17179869184L);

		columnBitmasks.put("dateOfSign", 34359738368L);

		columnBitmasks.put("wraApplicationId", 68719476736L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LicenceToAbstractInfo _escapedModel;

}