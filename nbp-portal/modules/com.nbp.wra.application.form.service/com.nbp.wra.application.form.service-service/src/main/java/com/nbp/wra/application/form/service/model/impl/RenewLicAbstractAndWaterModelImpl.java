/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.wra.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.wra.application.form.service.model.RenewLicAbstractAndWater;
import com.nbp.wra.application.form.service.model.RenewLicAbstractAndWaterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RenewLicAbstractAndWater service. Represents a row in the &quot;nbp_wra_renew_abstract&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RenewLicAbstractAndWaterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RenewLicAbstractAndWaterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RenewLicAbstractAndWaterImpl
 * @generated
 */
@JSON(strict = true)
public class RenewLicAbstractAndWaterModelImpl
	extends BaseModelImpl<RenewLicAbstractAndWater>
	implements RenewLicAbstractAndWaterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a renew lic abstract and water model instance should use the <code>RenewLicAbstractAndWater</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_wra_renew_abstract";

	public static final Object[][] TABLE_COLUMNS = {
		{"renewLicAbstractAndWaterId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"renewName", Types.VARCHAR},
		{"renewContact", Types.VARCHAR}, {"renewJobTitle", Types.VARCHAR},
		{"renewTelephoneNum", Types.VARCHAR}, {"renewFaxNum", Types.VARCHAR},
		{"renewParishLocation", Types.VARCHAR}, {"renewAddress", Types.VARCHAR},
		{"renewSourceName", Types.VARCHAR},
		{"renewDetailsParishAdd", Types.VARCHAR},
		{"renewDetailsLocation", Types.VARCHAR},
		{"renewAbstractionRate", Types.VARCHAR},
		{"renewDetailsUse", Types.VARCHAR},
		{"renewAbstractionMethod", Types.VARCHAR},
		{"attachedDevice", Types.VARCHAR}, {"renewStateDevice", Types.VARCHAR},
		{"abstractionData", Types.VARCHAR}, {"renewSignName", Types.VARCHAR},
		{"renewDate", Types.TIMESTAMP}, {"wraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("renewLicAbstractAndWaterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("renewName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewContact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewJobTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewTelephoneNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewFaxNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewParishLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewSourceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewDetailsParishAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewDetailsLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewAbstractionRate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewDetailsUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewAbstractionMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attachedDevice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewStateDevice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("abstractionData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewSignName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("wraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_wra_renew_abstract (renewLicAbstractAndWaterId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,renewName VARCHAR(75) null,renewContact VARCHAR(75) null,renewJobTitle VARCHAR(75) null,renewTelephoneNum VARCHAR(75) null,renewFaxNum VARCHAR(75) null,renewParishLocation VARCHAR(75) null,renewAddress VARCHAR(500) null,renewSourceName VARCHAR(75) null,renewDetailsParishAdd VARCHAR(500) null,renewDetailsLocation VARCHAR(500) null,renewAbstractionRate VARCHAR(75) null,renewDetailsUse VARCHAR(75) null,renewAbstractionMethod VARCHAR(75) null,attachedDevice VARCHAR(75) null,renewStateDevice VARCHAR(75) null,abstractionData VARCHAR(75) null,renewSignName VARCHAR(75) null,renewDate DATE null,wraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_wra_renew_abstract";

	public static final String ORDER_BY_JPQL =
		" ORDER BY renewLicAbstractAndWater.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_wra_renew_abstract.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RenewLicAbstractAndWaterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _renewLicAbstractAndWaterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRenewLicAbstractAndWaterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _renewLicAbstractAndWaterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RenewLicAbstractAndWater.class;
	}

	@Override
	public String getModelClassName() {
		return RenewLicAbstractAndWater.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RenewLicAbstractAndWater, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RenewLicAbstractAndWater, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RenewLicAbstractAndWater, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RenewLicAbstractAndWater)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RenewLicAbstractAndWater, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RenewLicAbstractAndWater, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RenewLicAbstractAndWater)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RenewLicAbstractAndWater, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RenewLicAbstractAndWater, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<RenewLicAbstractAndWater, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<RenewLicAbstractAndWater, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<RenewLicAbstractAndWater, Object>>();

			attributeGetterFunctions.put(
				"renewLicAbstractAndWaterId",
				RenewLicAbstractAndWater::getRenewLicAbstractAndWaterId);
			attributeGetterFunctions.put(
				"groupId", RenewLicAbstractAndWater::getGroupId);
			attributeGetterFunctions.put(
				"companyId", RenewLicAbstractAndWater::getCompanyId);
			attributeGetterFunctions.put(
				"userId", RenewLicAbstractAndWater::getUserId);
			attributeGetterFunctions.put(
				"userName", RenewLicAbstractAndWater::getUserName);
			attributeGetterFunctions.put(
				"createDate", RenewLicAbstractAndWater::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", RenewLicAbstractAndWater::getModifiedDate);
			attributeGetterFunctions.put(
				"renewName", RenewLicAbstractAndWater::getRenewName);
			attributeGetterFunctions.put(
				"renewContact", RenewLicAbstractAndWater::getRenewContact);
			attributeGetterFunctions.put(
				"renewJobTitle", RenewLicAbstractAndWater::getRenewJobTitle);
			attributeGetterFunctions.put(
				"renewTelephoneNum",
				RenewLicAbstractAndWater::getRenewTelephoneNum);
			attributeGetterFunctions.put(
				"renewFaxNum", RenewLicAbstractAndWater::getRenewFaxNum);
			attributeGetterFunctions.put(
				"renewParishLocation",
				RenewLicAbstractAndWater::getRenewParishLocation);
			attributeGetterFunctions.put(
				"renewAddress", RenewLicAbstractAndWater::getRenewAddress);
			attributeGetterFunctions.put(
				"renewSourceName",
				RenewLicAbstractAndWater::getRenewSourceName);
			attributeGetterFunctions.put(
				"renewDetailsParishAdd",
				RenewLicAbstractAndWater::getRenewDetailsParishAdd);
			attributeGetterFunctions.put(
				"renewDetailsLocation",
				RenewLicAbstractAndWater::getRenewDetailsLocation);
			attributeGetterFunctions.put(
				"renewAbstractionRate",
				RenewLicAbstractAndWater::getRenewAbstractionRate);
			attributeGetterFunctions.put(
				"renewDetailsUse",
				RenewLicAbstractAndWater::getRenewDetailsUse);
			attributeGetterFunctions.put(
				"renewAbstractionMethod",
				RenewLicAbstractAndWater::getRenewAbstractionMethod);
			attributeGetterFunctions.put(
				"attachedDevice", RenewLicAbstractAndWater::getAttachedDevice);
			attributeGetterFunctions.put(
				"renewStateDevice",
				RenewLicAbstractAndWater::getRenewStateDevice);
			attributeGetterFunctions.put(
				"abstractionData",
				RenewLicAbstractAndWater::getAbstractionData);
			attributeGetterFunctions.put(
				"renewSignName", RenewLicAbstractAndWater::getRenewSignName);
			attributeGetterFunctions.put(
				"renewDate", RenewLicAbstractAndWater::getRenewDate);
			attributeGetterFunctions.put(
				"wraApplicationId",
				RenewLicAbstractAndWater::getWraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<RenewLicAbstractAndWater, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<RenewLicAbstractAndWater, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<RenewLicAbstractAndWater, ?>>();

			attributeSetterBiConsumers.put(
				"renewLicAbstractAndWaterId",
				(BiConsumer<RenewLicAbstractAndWater, Long>)
					RenewLicAbstractAndWater::setRenewLicAbstractAndWaterId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<RenewLicAbstractAndWater, Long>)
					RenewLicAbstractAndWater::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<RenewLicAbstractAndWater, Long>)
					RenewLicAbstractAndWater::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<RenewLicAbstractAndWater, Long>)
					RenewLicAbstractAndWater::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<RenewLicAbstractAndWater, Date>)
					RenewLicAbstractAndWater::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<RenewLicAbstractAndWater, Date>)
					RenewLicAbstractAndWater::setModifiedDate);
			attributeSetterBiConsumers.put(
				"renewName",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewName);
			attributeSetterBiConsumers.put(
				"renewContact",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewContact);
			attributeSetterBiConsumers.put(
				"renewJobTitle",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewJobTitle);
			attributeSetterBiConsumers.put(
				"renewTelephoneNum",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewTelephoneNum);
			attributeSetterBiConsumers.put(
				"renewFaxNum",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewFaxNum);
			attributeSetterBiConsumers.put(
				"renewParishLocation",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewParishLocation);
			attributeSetterBiConsumers.put(
				"renewAddress",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewAddress);
			attributeSetterBiConsumers.put(
				"renewSourceName",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewSourceName);
			attributeSetterBiConsumers.put(
				"renewDetailsParishAdd",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewDetailsParishAdd);
			attributeSetterBiConsumers.put(
				"renewDetailsLocation",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewDetailsLocation);
			attributeSetterBiConsumers.put(
				"renewAbstractionRate",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewAbstractionRate);
			attributeSetterBiConsumers.put(
				"renewDetailsUse",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewDetailsUse);
			attributeSetterBiConsumers.put(
				"renewAbstractionMethod",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewAbstractionMethod);
			attributeSetterBiConsumers.put(
				"attachedDevice",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setAttachedDevice);
			attributeSetterBiConsumers.put(
				"renewStateDevice",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewStateDevice);
			attributeSetterBiConsumers.put(
				"abstractionData",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setAbstractionData);
			attributeSetterBiConsumers.put(
				"renewSignName",
				(BiConsumer<RenewLicAbstractAndWater, String>)
					RenewLicAbstractAndWater::setRenewSignName);
			attributeSetterBiConsumers.put(
				"renewDate",
				(BiConsumer<RenewLicAbstractAndWater, Date>)
					RenewLicAbstractAndWater::setRenewDate);
			attributeSetterBiConsumers.put(
				"wraApplicationId",
				(BiConsumer<RenewLicAbstractAndWater, Long>)
					RenewLicAbstractAndWater::setWraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getRenewLicAbstractAndWaterId() {
		return _renewLicAbstractAndWaterId;
	}

	@Override
	public void setRenewLicAbstractAndWaterId(long renewLicAbstractAndWaterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewLicAbstractAndWaterId = renewLicAbstractAndWaterId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRenewName() {
		if (_renewName == null) {
			return "";
		}
		else {
			return _renewName;
		}
	}

	@Override
	public void setRenewName(String renewName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewName = renewName;
	}

	@JSON
	@Override
	public String getRenewContact() {
		if (_renewContact == null) {
			return "";
		}
		else {
			return _renewContact;
		}
	}

	@Override
	public void setRenewContact(String renewContact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewContact = renewContact;
	}

	@JSON
	@Override
	public String getRenewJobTitle() {
		if (_renewJobTitle == null) {
			return "";
		}
		else {
			return _renewJobTitle;
		}
	}

	@Override
	public void setRenewJobTitle(String renewJobTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewJobTitle = renewJobTitle;
	}

	@JSON
	@Override
	public String getRenewTelephoneNum() {
		if (_renewTelephoneNum == null) {
			return "";
		}
		else {
			return _renewTelephoneNum;
		}
	}

	@Override
	public void setRenewTelephoneNum(String renewTelephoneNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewTelephoneNum = renewTelephoneNum;
	}

	@JSON
	@Override
	public String getRenewFaxNum() {
		if (_renewFaxNum == null) {
			return "";
		}
		else {
			return _renewFaxNum;
		}
	}

	@Override
	public void setRenewFaxNum(String renewFaxNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewFaxNum = renewFaxNum;
	}

	@JSON
	@Override
	public String getRenewParishLocation() {
		if (_renewParishLocation == null) {
			return "";
		}
		else {
			return _renewParishLocation;
		}
	}

	@Override
	public void setRenewParishLocation(String renewParishLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewParishLocation = renewParishLocation;
	}

	@JSON
	@Override
	public String getRenewAddress() {
		if (_renewAddress == null) {
			return "";
		}
		else {
			return _renewAddress;
		}
	}

	@Override
	public void setRenewAddress(String renewAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewAddress = renewAddress;
	}

	@JSON
	@Override
	public String getRenewSourceName() {
		if (_renewSourceName == null) {
			return "";
		}
		else {
			return _renewSourceName;
		}
	}

	@Override
	public void setRenewSourceName(String renewSourceName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewSourceName = renewSourceName;
	}

	@JSON
	@Override
	public String getRenewDetailsParishAdd() {
		if (_renewDetailsParishAdd == null) {
			return "";
		}
		else {
			return _renewDetailsParishAdd;
		}
	}

	@Override
	public void setRenewDetailsParishAdd(String renewDetailsParishAdd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewDetailsParishAdd = renewDetailsParishAdd;
	}

	@JSON
	@Override
	public String getRenewDetailsLocation() {
		if (_renewDetailsLocation == null) {
			return "";
		}
		else {
			return _renewDetailsLocation;
		}
	}

	@Override
	public void setRenewDetailsLocation(String renewDetailsLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewDetailsLocation = renewDetailsLocation;
	}

	@JSON
	@Override
	public String getRenewAbstractionRate() {
		if (_renewAbstractionRate == null) {
			return "";
		}
		else {
			return _renewAbstractionRate;
		}
	}

	@Override
	public void setRenewAbstractionRate(String renewAbstractionRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewAbstractionRate = renewAbstractionRate;
	}

	@JSON
	@Override
	public String getRenewDetailsUse() {
		if (_renewDetailsUse == null) {
			return "";
		}
		else {
			return _renewDetailsUse;
		}
	}

	@Override
	public void setRenewDetailsUse(String renewDetailsUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewDetailsUse = renewDetailsUse;
	}

	@JSON
	@Override
	public String getRenewAbstractionMethod() {
		if (_renewAbstractionMethod == null) {
			return "";
		}
		else {
			return _renewAbstractionMethod;
		}
	}

	@Override
	public void setRenewAbstractionMethod(String renewAbstractionMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewAbstractionMethod = renewAbstractionMethod;
	}

	@JSON
	@Override
	public String getAttachedDevice() {
		if (_attachedDevice == null) {
			return "";
		}
		else {
			return _attachedDevice;
		}
	}

	@Override
	public void setAttachedDevice(String attachedDevice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attachedDevice = attachedDevice;
	}

	@JSON
	@Override
	public String getRenewStateDevice() {
		if (_renewStateDevice == null) {
			return "";
		}
		else {
			return _renewStateDevice;
		}
	}

	@Override
	public void setRenewStateDevice(String renewStateDevice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewStateDevice = renewStateDevice;
	}

	@JSON
	@Override
	public String getAbstractionData() {
		if (_abstractionData == null) {
			return "";
		}
		else {
			return _abstractionData;
		}
	}

	@Override
	public void setAbstractionData(String abstractionData) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_abstractionData = abstractionData;
	}

	@JSON
	@Override
	public String getRenewSignName() {
		if (_renewSignName == null) {
			return "";
		}
		else {
			return _renewSignName;
		}
	}

	@Override
	public void setRenewSignName(String renewSignName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewSignName = renewSignName;
	}

	@JSON
	@Override
	public Date getRenewDate() {
		return _renewDate;
	}

	@Override
	public void setRenewDate(Date renewDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewDate = renewDate;
	}

	@JSON
	@Override
	public long getWraApplicationId() {
		return _wraApplicationId;
	}

	@Override
	public void setWraApplicationId(long wraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wraApplicationId = wraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalWraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("wraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RenewLicAbstractAndWater.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RenewLicAbstractAndWater toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RenewLicAbstractAndWater>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RenewLicAbstractAndWaterImpl renewLicAbstractAndWaterImpl =
			new RenewLicAbstractAndWaterImpl();

		renewLicAbstractAndWaterImpl.setRenewLicAbstractAndWaterId(
			getRenewLicAbstractAndWaterId());
		renewLicAbstractAndWaterImpl.setGroupId(getGroupId());
		renewLicAbstractAndWaterImpl.setCompanyId(getCompanyId());
		renewLicAbstractAndWaterImpl.setUserId(getUserId());
		renewLicAbstractAndWaterImpl.setUserName(getUserName());
		renewLicAbstractAndWaterImpl.setCreateDate(getCreateDate());
		renewLicAbstractAndWaterImpl.setModifiedDate(getModifiedDate());
		renewLicAbstractAndWaterImpl.setRenewName(getRenewName());
		renewLicAbstractAndWaterImpl.setRenewContact(getRenewContact());
		renewLicAbstractAndWaterImpl.setRenewJobTitle(getRenewJobTitle());
		renewLicAbstractAndWaterImpl.setRenewTelephoneNum(
			getRenewTelephoneNum());
		renewLicAbstractAndWaterImpl.setRenewFaxNum(getRenewFaxNum());
		renewLicAbstractAndWaterImpl.setRenewParishLocation(
			getRenewParishLocation());
		renewLicAbstractAndWaterImpl.setRenewAddress(getRenewAddress());
		renewLicAbstractAndWaterImpl.setRenewSourceName(getRenewSourceName());
		renewLicAbstractAndWaterImpl.setRenewDetailsParishAdd(
			getRenewDetailsParishAdd());
		renewLicAbstractAndWaterImpl.setRenewDetailsLocation(
			getRenewDetailsLocation());
		renewLicAbstractAndWaterImpl.setRenewAbstractionRate(
			getRenewAbstractionRate());
		renewLicAbstractAndWaterImpl.setRenewDetailsUse(getRenewDetailsUse());
		renewLicAbstractAndWaterImpl.setRenewAbstractionMethod(
			getRenewAbstractionMethod());
		renewLicAbstractAndWaterImpl.setAttachedDevice(getAttachedDevice());
		renewLicAbstractAndWaterImpl.setRenewStateDevice(getRenewStateDevice());
		renewLicAbstractAndWaterImpl.setAbstractionData(getAbstractionData());
		renewLicAbstractAndWaterImpl.setRenewSignName(getRenewSignName());
		renewLicAbstractAndWaterImpl.setRenewDate(getRenewDate());
		renewLicAbstractAndWaterImpl.setWraApplicationId(getWraApplicationId());

		renewLicAbstractAndWaterImpl.resetOriginalValues();

		return renewLicAbstractAndWaterImpl;
	}

	@Override
	public RenewLicAbstractAndWater cloneWithOriginalValues() {
		RenewLicAbstractAndWaterImpl renewLicAbstractAndWaterImpl =
			new RenewLicAbstractAndWaterImpl();

		renewLicAbstractAndWaterImpl.setRenewLicAbstractAndWaterId(
			this.<Long>getColumnOriginalValue("renewLicAbstractAndWaterId"));
		renewLicAbstractAndWaterImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		renewLicAbstractAndWaterImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		renewLicAbstractAndWaterImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		renewLicAbstractAndWaterImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		renewLicAbstractAndWaterImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		renewLicAbstractAndWaterImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		renewLicAbstractAndWaterImpl.setRenewName(
			this.<String>getColumnOriginalValue("renewName"));
		renewLicAbstractAndWaterImpl.setRenewContact(
			this.<String>getColumnOriginalValue("renewContact"));
		renewLicAbstractAndWaterImpl.setRenewJobTitle(
			this.<String>getColumnOriginalValue("renewJobTitle"));
		renewLicAbstractAndWaterImpl.setRenewTelephoneNum(
			this.<String>getColumnOriginalValue("renewTelephoneNum"));
		renewLicAbstractAndWaterImpl.setRenewFaxNum(
			this.<String>getColumnOriginalValue("renewFaxNum"));
		renewLicAbstractAndWaterImpl.setRenewParishLocation(
			this.<String>getColumnOriginalValue("renewParishLocation"));
		renewLicAbstractAndWaterImpl.setRenewAddress(
			this.<String>getColumnOriginalValue("renewAddress"));
		renewLicAbstractAndWaterImpl.setRenewSourceName(
			this.<String>getColumnOriginalValue("renewSourceName"));
		renewLicAbstractAndWaterImpl.setRenewDetailsParishAdd(
			this.<String>getColumnOriginalValue("renewDetailsParishAdd"));
		renewLicAbstractAndWaterImpl.setRenewDetailsLocation(
			this.<String>getColumnOriginalValue("renewDetailsLocation"));
		renewLicAbstractAndWaterImpl.setRenewAbstractionRate(
			this.<String>getColumnOriginalValue("renewAbstractionRate"));
		renewLicAbstractAndWaterImpl.setRenewDetailsUse(
			this.<String>getColumnOriginalValue("renewDetailsUse"));
		renewLicAbstractAndWaterImpl.setRenewAbstractionMethod(
			this.<String>getColumnOriginalValue("renewAbstractionMethod"));
		renewLicAbstractAndWaterImpl.setAttachedDevice(
			this.<String>getColumnOriginalValue("attachedDevice"));
		renewLicAbstractAndWaterImpl.setRenewStateDevice(
			this.<String>getColumnOriginalValue("renewStateDevice"));
		renewLicAbstractAndWaterImpl.setAbstractionData(
			this.<String>getColumnOriginalValue("abstractionData"));
		renewLicAbstractAndWaterImpl.setRenewSignName(
			this.<String>getColumnOriginalValue("renewSignName"));
		renewLicAbstractAndWaterImpl.setRenewDate(
			this.<Date>getColumnOriginalValue("renewDate"));
		renewLicAbstractAndWaterImpl.setWraApplicationId(
			this.<Long>getColumnOriginalValue("wraApplicationId"));

		return renewLicAbstractAndWaterImpl;
	}

	@Override
	public int compareTo(RenewLicAbstractAndWater renewLicAbstractAndWater) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), renewLicAbstractAndWater.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RenewLicAbstractAndWater)) {
			return false;
		}

		RenewLicAbstractAndWater renewLicAbstractAndWater =
			(RenewLicAbstractAndWater)object;

		long primaryKey = renewLicAbstractAndWater.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RenewLicAbstractAndWater> toCacheModel() {
		RenewLicAbstractAndWaterCacheModel renewLicAbstractAndWaterCacheModel =
			new RenewLicAbstractAndWaterCacheModel();

		renewLicAbstractAndWaterCacheModel.renewLicAbstractAndWaterId =
			getRenewLicAbstractAndWaterId();

		renewLicAbstractAndWaterCacheModel.groupId = getGroupId();

		renewLicAbstractAndWaterCacheModel.companyId = getCompanyId();

		renewLicAbstractAndWaterCacheModel.userId = getUserId();

		renewLicAbstractAndWaterCacheModel.userName = getUserName();

		String userName = renewLicAbstractAndWaterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			renewLicAbstractAndWaterCacheModel.createDate =
				createDate.getTime();
		}
		else {
			renewLicAbstractAndWaterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			renewLicAbstractAndWaterCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			renewLicAbstractAndWaterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		renewLicAbstractAndWaterCacheModel.renewName = getRenewName();

		String renewName = renewLicAbstractAndWaterCacheModel.renewName;

		if ((renewName != null) && (renewName.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewName = null;
		}

		renewLicAbstractAndWaterCacheModel.renewContact = getRenewContact();

		String renewContact = renewLicAbstractAndWaterCacheModel.renewContact;

		if ((renewContact != null) && (renewContact.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewContact = null;
		}

		renewLicAbstractAndWaterCacheModel.renewJobTitle = getRenewJobTitle();

		String renewJobTitle = renewLicAbstractAndWaterCacheModel.renewJobTitle;

		if ((renewJobTitle != null) && (renewJobTitle.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewJobTitle = null;
		}

		renewLicAbstractAndWaterCacheModel.renewTelephoneNum =
			getRenewTelephoneNum();

		String renewTelephoneNum =
			renewLicAbstractAndWaterCacheModel.renewTelephoneNum;

		if ((renewTelephoneNum != null) && (renewTelephoneNum.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewTelephoneNum = null;
		}

		renewLicAbstractAndWaterCacheModel.renewFaxNum = getRenewFaxNum();

		String renewFaxNum = renewLicAbstractAndWaterCacheModel.renewFaxNum;

		if ((renewFaxNum != null) && (renewFaxNum.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewFaxNum = null;
		}

		renewLicAbstractAndWaterCacheModel.renewParishLocation =
			getRenewParishLocation();

		String renewParishLocation =
			renewLicAbstractAndWaterCacheModel.renewParishLocation;

		if ((renewParishLocation != null) &&
			(renewParishLocation.length() == 0)) {

			renewLicAbstractAndWaterCacheModel.renewParishLocation = null;
		}

		renewLicAbstractAndWaterCacheModel.renewAddress = getRenewAddress();

		String renewAddress = renewLicAbstractAndWaterCacheModel.renewAddress;

		if ((renewAddress != null) && (renewAddress.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewAddress = null;
		}

		renewLicAbstractAndWaterCacheModel.renewSourceName =
			getRenewSourceName();

		String renewSourceName =
			renewLicAbstractAndWaterCacheModel.renewSourceName;

		if ((renewSourceName != null) && (renewSourceName.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewSourceName = null;
		}

		renewLicAbstractAndWaterCacheModel.renewDetailsParishAdd =
			getRenewDetailsParishAdd();

		String renewDetailsParishAdd =
			renewLicAbstractAndWaterCacheModel.renewDetailsParishAdd;

		if ((renewDetailsParishAdd != null) &&
			(renewDetailsParishAdd.length() == 0)) {

			renewLicAbstractAndWaterCacheModel.renewDetailsParishAdd = null;
		}

		renewLicAbstractAndWaterCacheModel.renewDetailsLocation =
			getRenewDetailsLocation();

		String renewDetailsLocation =
			renewLicAbstractAndWaterCacheModel.renewDetailsLocation;

		if ((renewDetailsLocation != null) &&
			(renewDetailsLocation.length() == 0)) {

			renewLicAbstractAndWaterCacheModel.renewDetailsLocation = null;
		}

		renewLicAbstractAndWaterCacheModel.renewAbstractionRate =
			getRenewAbstractionRate();

		String renewAbstractionRate =
			renewLicAbstractAndWaterCacheModel.renewAbstractionRate;

		if ((renewAbstractionRate != null) &&
			(renewAbstractionRate.length() == 0)) {

			renewLicAbstractAndWaterCacheModel.renewAbstractionRate = null;
		}

		renewLicAbstractAndWaterCacheModel.renewDetailsUse =
			getRenewDetailsUse();

		String renewDetailsUse =
			renewLicAbstractAndWaterCacheModel.renewDetailsUse;

		if ((renewDetailsUse != null) && (renewDetailsUse.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewDetailsUse = null;
		}

		renewLicAbstractAndWaterCacheModel.renewAbstractionMethod =
			getRenewAbstractionMethod();

		String renewAbstractionMethod =
			renewLicAbstractAndWaterCacheModel.renewAbstractionMethod;

		if ((renewAbstractionMethod != null) &&
			(renewAbstractionMethod.length() == 0)) {

			renewLicAbstractAndWaterCacheModel.renewAbstractionMethod = null;
		}

		renewLicAbstractAndWaterCacheModel.attachedDevice = getAttachedDevice();

		String attachedDevice =
			renewLicAbstractAndWaterCacheModel.attachedDevice;

		if ((attachedDevice != null) && (attachedDevice.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.attachedDevice = null;
		}

		renewLicAbstractAndWaterCacheModel.renewStateDevice =
			getRenewStateDevice();

		String renewStateDevice =
			renewLicAbstractAndWaterCacheModel.renewStateDevice;

		if ((renewStateDevice != null) && (renewStateDevice.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewStateDevice = null;
		}

		renewLicAbstractAndWaterCacheModel.abstractionData =
			getAbstractionData();

		String abstractionData =
			renewLicAbstractAndWaterCacheModel.abstractionData;

		if ((abstractionData != null) && (abstractionData.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.abstractionData = null;
		}

		renewLicAbstractAndWaterCacheModel.renewSignName = getRenewSignName();

		String renewSignName = renewLicAbstractAndWaterCacheModel.renewSignName;

		if ((renewSignName != null) && (renewSignName.length() == 0)) {
			renewLicAbstractAndWaterCacheModel.renewSignName = null;
		}

		Date renewDate = getRenewDate();

		if (renewDate != null) {
			renewLicAbstractAndWaterCacheModel.renewDate = renewDate.getTime();
		}
		else {
			renewLicAbstractAndWaterCacheModel.renewDate = Long.MIN_VALUE;
		}

		renewLicAbstractAndWaterCacheModel.wraApplicationId =
			getWraApplicationId();

		return renewLicAbstractAndWaterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RenewLicAbstractAndWater, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RenewLicAbstractAndWater, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RenewLicAbstractAndWater, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RenewLicAbstractAndWater)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, RenewLicAbstractAndWater>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						RenewLicAbstractAndWater.class, ModelWrapper.class);

	}

	private long _renewLicAbstractAndWaterId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _renewName;
	private String _renewContact;
	private String _renewJobTitle;
	private String _renewTelephoneNum;
	private String _renewFaxNum;
	private String _renewParishLocation;
	private String _renewAddress;
	private String _renewSourceName;
	private String _renewDetailsParishAdd;
	private String _renewDetailsLocation;
	private String _renewAbstractionRate;
	private String _renewDetailsUse;
	private String _renewAbstractionMethod;
	private String _attachedDevice;
	private String _renewStateDevice;
	private String _abstractionData;
	private String _renewSignName;
	private Date _renewDate;
	private long _wraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<RenewLicAbstractAndWater, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RenewLicAbstractAndWater)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"renewLicAbstractAndWaterId", _renewLicAbstractAndWaterId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("renewName", _renewName);
		_columnOriginalValues.put("renewContact", _renewContact);
		_columnOriginalValues.put("renewJobTitle", _renewJobTitle);
		_columnOriginalValues.put("renewTelephoneNum", _renewTelephoneNum);
		_columnOriginalValues.put("renewFaxNum", _renewFaxNum);
		_columnOriginalValues.put("renewParishLocation", _renewParishLocation);
		_columnOriginalValues.put("renewAddress", _renewAddress);
		_columnOriginalValues.put("renewSourceName", _renewSourceName);
		_columnOriginalValues.put(
			"renewDetailsParishAdd", _renewDetailsParishAdd);
		_columnOriginalValues.put(
			"renewDetailsLocation", _renewDetailsLocation);
		_columnOriginalValues.put(
			"renewAbstractionRate", _renewAbstractionRate);
		_columnOriginalValues.put("renewDetailsUse", _renewDetailsUse);
		_columnOriginalValues.put(
			"renewAbstractionMethod", _renewAbstractionMethod);
		_columnOriginalValues.put("attachedDevice", _attachedDevice);
		_columnOriginalValues.put("renewStateDevice", _renewStateDevice);
		_columnOriginalValues.put("abstractionData", _abstractionData);
		_columnOriginalValues.put("renewSignName", _renewSignName);
		_columnOriginalValues.put("renewDate", _renewDate);
		_columnOriginalValues.put("wraApplicationId", _wraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("renewLicAbstractAndWaterId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("renewName", 128L);

		columnBitmasks.put("renewContact", 256L);

		columnBitmasks.put("renewJobTitle", 512L);

		columnBitmasks.put("renewTelephoneNum", 1024L);

		columnBitmasks.put("renewFaxNum", 2048L);

		columnBitmasks.put("renewParishLocation", 4096L);

		columnBitmasks.put("renewAddress", 8192L);

		columnBitmasks.put("renewSourceName", 16384L);

		columnBitmasks.put("renewDetailsParishAdd", 32768L);

		columnBitmasks.put("renewDetailsLocation", 65536L);

		columnBitmasks.put("renewAbstractionRate", 131072L);

		columnBitmasks.put("renewDetailsUse", 262144L);

		columnBitmasks.put("renewAbstractionMethod", 524288L);

		columnBitmasks.put("attachedDevice", 1048576L);

		columnBitmasks.put("renewStateDevice", 2097152L);

		columnBitmasks.put("abstractionData", 4194304L);

		columnBitmasks.put("renewSignName", 8388608L);

		columnBitmasks.put("renewDate", 16777216L);

		columnBitmasks.put("wraApplicationId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RenewLicAbstractAndWater _escapedModel;

}