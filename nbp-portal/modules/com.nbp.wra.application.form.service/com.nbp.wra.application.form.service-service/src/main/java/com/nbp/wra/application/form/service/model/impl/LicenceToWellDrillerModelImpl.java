/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.wra.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.wra.application.form.service.model.LicenceToWellDriller;
import com.nbp.wra.application.form.service.model.LicenceToWellDrillerModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LicenceToWellDriller service. Represents a row in the &quot;nbp_wra_lic_well_drill_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LicenceToWellDrillerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LicenceToWellDrillerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LicenceToWellDrillerImpl
 * @generated
 */
@JSON(strict = true)
public class LicenceToWellDrillerModelImpl
	extends BaseModelImpl<LicenceToWellDriller>
	implements LicenceToWellDrillerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a licence to well driller model instance should use the <code>LicenceToWellDriller</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_wra_lic_well_drill_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"licenceToWellDrillerId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"wellDrillingApplicationNo", Types.VARCHAR},
		{"permitDrillingApplicantName", Types.VARCHAR},
		{"permitDrillingAddressParish", Types.VARCHAR},
		{"permitDrillingApplicantAddress", Types.VARCHAR},
		{"permitDrillingDOBDate", Types.TIMESTAMP},
		{"permitDrillingEducational", Types.VARCHAR},
		{"permitDrillingSpecificTraining", Types.VARCHAR},
		{"permitDrillingSpecificExp", Types.VARCHAR},
		{"permitDrillingSelfEmployed", Types.VARCHAR},
		{"permitDrillingName", Types.VARCHAR},
		{"permitDrillingPresentEmployer", Types.VARCHAR},
		{"permitDrillingEmployerAddress", Types.VARCHAR},
		{"permitDrillingFirstRefName", Types.VARCHAR},
		{"permitDrillingFirstRefAdd", Types.VARCHAR},
		{"permitDrillingSecondRefName", Types.VARCHAR},
		{"permitDrillingSecondRefAdd", Types.VARCHAR},
		{"permitDrillingSignature", Types.VARCHAR},
		{"permitDrillingSignatureDate", Types.TIMESTAMP},
		{"wraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("licenceToWellDrillerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("wellDrillingApplicationNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingAddressParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingApplicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingDOBDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("permitDrillingEducational", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSpecificTraining", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSpecificExp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSelfEmployed", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingPresentEmployer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingEmployerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingFirstRefName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingFirstRefAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSecondRefName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSecondRefAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSignature", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitDrillingSignatureDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("wraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_wra_lic_well_drill_info (licenceToWellDrillerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,wellDrillingApplicationNo VARCHAR(75) null,permitDrillingApplicantName VARCHAR(75) null,permitDrillingAddressParish VARCHAR(75) null,permitDrillingApplicantAddress VARCHAR(500) null,permitDrillingDOBDate DATE null,permitDrillingEducational VARCHAR(500) null,permitDrillingSpecificTraining VARCHAR(75) null,permitDrillingSpecificExp VARCHAR(75) null,permitDrillingSelfEmployed VARCHAR(75) null,permitDrillingName VARCHAR(75) null,permitDrillingPresentEmployer VARCHAR(75) null,permitDrillingEmployerAddress VARCHAR(500) null,permitDrillingFirstRefName VARCHAR(75) null,permitDrillingFirstRefAdd VARCHAR(500) null,permitDrillingSecondRefName VARCHAR(75) null,permitDrillingSecondRefAdd VARCHAR(500) null,permitDrillingSignature VARCHAR(75) null,permitDrillingSignatureDate DATE null,wraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_wra_lic_well_drill_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY licenceToWellDriller.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_wra_lic_well_drill_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LicenceToWellDrillerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _licenceToWellDrillerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLicenceToWellDrillerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _licenceToWellDrillerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LicenceToWellDriller.class;
	}

	@Override
	public String getModelClassName() {
		return LicenceToWellDriller.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LicenceToWellDriller, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LicenceToWellDriller, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LicenceToWellDriller, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LicenceToWellDriller)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LicenceToWellDriller, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LicenceToWellDriller, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LicenceToWellDriller)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LicenceToWellDriller, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LicenceToWellDriller, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<LicenceToWellDriller, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<LicenceToWellDriller, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<LicenceToWellDriller, Object>>();

			attributeGetterFunctions.put(
				"licenceToWellDrillerId",
				LicenceToWellDriller::getLicenceToWellDrillerId);
			attributeGetterFunctions.put(
				"groupId", LicenceToWellDriller::getGroupId);
			attributeGetterFunctions.put(
				"companyId", LicenceToWellDriller::getCompanyId);
			attributeGetterFunctions.put(
				"userId", LicenceToWellDriller::getUserId);
			attributeGetterFunctions.put(
				"userName", LicenceToWellDriller::getUserName);
			attributeGetterFunctions.put(
				"createDate", LicenceToWellDriller::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", LicenceToWellDriller::getModifiedDate);
			attributeGetterFunctions.put(
				"wellDrillingApplicationNo",
				LicenceToWellDriller::getWellDrillingApplicationNo);
			attributeGetterFunctions.put(
				"permitDrillingApplicantName",
				LicenceToWellDriller::getPermitDrillingApplicantName);
			attributeGetterFunctions.put(
				"permitDrillingAddressParish",
				LicenceToWellDriller::getPermitDrillingAddressParish);
			attributeGetterFunctions.put(
				"permitDrillingApplicantAddress",
				LicenceToWellDriller::getPermitDrillingApplicantAddress);
			attributeGetterFunctions.put(
				"permitDrillingDOBDate",
				LicenceToWellDriller::getPermitDrillingDOBDate);
			attributeGetterFunctions.put(
				"permitDrillingEducational",
				LicenceToWellDriller::getPermitDrillingEducational);
			attributeGetterFunctions.put(
				"permitDrillingSpecificTraining",
				LicenceToWellDriller::getPermitDrillingSpecificTraining);
			attributeGetterFunctions.put(
				"permitDrillingSpecificExp",
				LicenceToWellDriller::getPermitDrillingSpecificExp);
			attributeGetterFunctions.put(
				"permitDrillingSelfEmployed",
				LicenceToWellDriller::getPermitDrillingSelfEmployed);
			attributeGetterFunctions.put(
				"permitDrillingName",
				LicenceToWellDriller::getPermitDrillingName);
			attributeGetterFunctions.put(
				"permitDrillingPresentEmployer",
				LicenceToWellDriller::getPermitDrillingPresentEmployer);
			attributeGetterFunctions.put(
				"permitDrillingEmployerAddress",
				LicenceToWellDriller::getPermitDrillingEmployerAddress);
			attributeGetterFunctions.put(
				"permitDrillingFirstRefName",
				LicenceToWellDriller::getPermitDrillingFirstRefName);
			attributeGetterFunctions.put(
				"permitDrillingFirstRefAdd",
				LicenceToWellDriller::getPermitDrillingFirstRefAdd);
			attributeGetterFunctions.put(
				"permitDrillingSecondRefName",
				LicenceToWellDriller::getPermitDrillingSecondRefName);
			attributeGetterFunctions.put(
				"permitDrillingSecondRefAdd",
				LicenceToWellDriller::getPermitDrillingSecondRefAdd);
			attributeGetterFunctions.put(
				"permitDrillingSignature",
				LicenceToWellDriller::getPermitDrillingSignature);
			attributeGetterFunctions.put(
				"permitDrillingSignatureDate",
				LicenceToWellDriller::getPermitDrillingSignatureDate);
			attributeGetterFunctions.put(
				"wraApplicationId", LicenceToWellDriller::getWraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<LicenceToWellDriller, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<LicenceToWellDriller, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<LicenceToWellDriller, ?>>();

			attributeSetterBiConsumers.put(
				"licenceToWellDrillerId",
				(BiConsumer<LicenceToWellDriller, Long>)
					LicenceToWellDriller::setLicenceToWellDrillerId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<LicenceToWellDriller, Long>)
					LicenceToWellDriller::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<LicenceToWellDriller, Long>)
					LicenceToWellDriller::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<LicenceToWellDriller, Long>)
					LicenceToWellDriller::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<LicenceToWellDriller, Date>)
					LicenceToWellDriller::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<LicenceToWellDriller, Date>)
					LicenceToWellDriller::setModifiedDate);
			attributeSetterBiConsumers.put(
				"wellDrillingApplicationNo",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setWellDrillingApplicationNo);
			attributeSetterBiConsumers.put(
				"permitDrillingApplicantName",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingApplicantName);
			attributeSetterBiConsumers.put(
				"permitDrillingAddressParish",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingAddressParish);
			attributeSetterBiConsumers.put(
				"permitDrillingApplicantAddress",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingApplicantAddress);
			attributeSetterBiConsumers.put(
				"permitDrillingDOBDate",
				(BiConsumer<LicenceToWellDriller, Date>)
					LicenceToWellDriller::setPermitDrillingDOBDate);
			attributeSetterBiConsumers.put(
				"permitDrillingEducational",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingEducational);
			attributeSetterBiConsumers.put(
				"permitDrillingSpecificTraining",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingSpecificTraining);
			attributeSetterBiConsumers.put(
				"permitDrillingSpecificExp",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingSpecificExp);
			attributeSetterBiConsumers.put(
				"permitDrillingSelfEmployed",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingSelfEmployed);
			attributeSetterBiConsumers.put(
				"permitDrillingName",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingName);
			attributeSetterBiConsumers.put(
				"permitDrillingPresentEmployer",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingPresentEmployer);
			attributeSetterBiConsumers.put(
				"permitDrillingEmployerAddress",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingEmployerAddress);
			attributeSetterBiConsumers.put(
				"permitDrillingFirstRefName",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingFirstRefName);
			attributeSetterBiConsumers.put(
				"permitDrillingFirstRefAdd",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingFirstRefAdd);
			attributeSetterBiConsumers.put(
				"permitDrillingSecondRefName",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingSecondRefName);
			attributeSetterBiConsumers.put(
				"permitDrillingSecondRefAdd",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingSecondRefAdd);
			attributeSetterBiConsumers.put(
				"permitDrillingSignature",
				(BiConsumer<LicenceToWellDriller, String>)
					LicenceToWellDriller::setPermitDrillingSignature);
			attributeSetterBiConsumers.put(
				"permitDrillingSignatureDate",
				(BiConsumer<LicenceToWellDriller, Date>)
					LicenceToWellDriller::setPermitDrillingSignatureDate);
			attributeSetterBiConsumers.put(
				"wraApplicationId",
				(BiConsumer<LicenceToWellDriller, Long>)
					LicenceToWellDriller::setWraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getLicenceToWellDrillerId() {
		return _licenceToWellDrillerId;
	}

	@Override
	public void setLicenceToWellDrillerId(long licenceToWellDrillerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenceToWellDrillerId = licenceToWellDrillerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getWellDrillingApplicationNo() {
		if (_wellDrillingApplicationNo == null) {
			return "";
		}
		else {
			return _wellDrillingApplicationNo;
		}
	}

	@Override
	public void setWellDrillingApplicationNo(String wellDrillingApplicationNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wellDrillingApplicationNo = wellDrillingApplicationNo;
	}

	@JSON
	@Override
	public String getPermitDrillingApplicantName() {
		if (_permitDrillingApplicantName == null) {
			return "";
		}
		else {
			return _permitDrillingApplicantName;
		}
	}

	@Override
	public void setPermitDrillingApplicantName(
		String permitDrillingApplicantName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingApplicantName = permitDrillingApplicantName;
	}

	@JSON
	@Override
	public String getPermitDrillingAddressParish() {
		if (_permitDrillingAddressParish == null) {
			return "";
		}
		else {
			return _permitDrillingAddressParish;
		}
	}

	@Override
	public void setPermitDrillingAddressParish(
		String permitDrillingAddressParish) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingAddressParish = permitDrillingAddressParish;
	}

	@JSON
	@Override
	public String getPermitDrillingApplicantAddress() {
		if (_permitDrillingApplicantAddress == null) {
			return "";
		}
		else {
			return _permitDrillingApplicantAddress;
		}
	}

	@Override
	public void setPermitDrillingApplicantAddress(
		String permitDrillingApplicantAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingApplicantAddress = permitDrillingApplicantAddress;
	}

	@JSON
	@Override
	public Date getPermitDrillingDOBDate() {
		return _permitDrillingDOBDate;
	}

	@Override
	public void setPermitDrillingDOBDate(Date permitDrillingDOBDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingDOBDate = permitDrillingDOBDate;
	}

	@JSON
	@Override
	public String getPermitDrillingEducational() {
		if (_permitDrillingEducational == null) {
			return "";
		}
		else {
			return _permitDrillingEducational;
		}
	}

	@Override
	public void setPermitDrillingEducational(String permitDrillingEducational) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingEducational = permitDrillingEducational;
	}

	@JSON
	@Override
	public String getPermitDrillingSpecificTraining() {
		if (_permitDrillingSpecificTraining == null) {
			return "";
		}
		else {
			return _permitDrillingSpecificTraining;
		}
	}

	@Override
	public void setPermitDrillingSpecificTraining(
		String permitDrillingSpecificTraining) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSpecificTraining = permitDrillingSpecificTraining;
	}

	@JSON
	@Override
	public String getPermitDrillingSpecificExp() {
		if (_permitDrillingSpecificExp == null) {
			return "";
		}
		else {
			return _permitDrillingSpecificExp;
		}
	}

	@Override
	public void setPermitDrillingSpecificExp(String permitDrillingSpecificExp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSpecificExp = permitDrillingSpecificExp;
	}

	@JSON
	@Override
	public String getPermitDrillingSelfEmployed() {
		if (_permitDrillingSelfEmployed == null) {
			return "";
		}
		else {
			return _permitDrillingSelfEmployed;
		}
	}

	@Override
	public void setPermitDrillingSelfEmployed(
		String permitDrillingSelfEmployed) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSelfEmployed = permitDrillingSelfEmployed;
	}

	@JSON
	@Override
	public String getPermitDrillingName() {
		if (_permitDrillingName == null) {
			return "";
		}
		else {
			return _permitDrillingName;
		}
	}

	@Override
	public void setPermitDrillingName(String permitDrillingName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingName = permitDrillingName;
	}

	@JSON
	@Override
	public String getPermitDrillingPresentEmployer() {
		if (_permitDrillingPresentEmployer == null) {
			return "";
		}
		else {
			return _permitDrillingPresentEmployer;
		}
	}

	@Override
	public void setPermitDrillingPresentEmployer(
		String permitDrillingPresentEmployer) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingPresentEmployer = permitDrillingPresentEmployer;
	}

	@JSON
	@Override
	public String getPermitDrillingEmployerAddress() {
		if (_permitDrillingEmployerAddress == null) {
			return "";
		}
		else {
			return _permitDrillingEmployerAddress;
		}
	}

	@Override
	public void setPermitDrillingEmployerAddress(
		String permitDrillingEmployerAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingEmployerAddress = permitDrillingEmployerAddress;
	}

	@JSON
	@Override
	public String getPermitDrillingFirstRefName() {
		if (_permitDrillingFirstRefName == null) {
			return "";
		}
		else {
			return _permitDrillingFirstRefName;
		}
	}

	@Override
	public void setPermitDrillingFirstRefName(
		String permitDrillingFirstRefName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingFirstRefName = permitDrillingFirstRefName;
	}

	@JSON
	@Override
	public String getPermitDrillingFirstRefAdd() {
		if (_permitDrillingFirstRefAdd == null) {
			return "";
		}
		else {
			return _permitDrillingFirstRefAdd;
		}
	}

	@Override
	public void setPermitDrillingFirstRefAdd(String permitDrillingFirstRefAdd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingFirstRefAdd = permitDrillingFirstRefAdd;
	}

	@JSON
	@Override
	public String getPermitDrillingSecondRefName() {
		if (_permitDrillingSecondRefName == null) {
			return "";
		}
		else {
			return _permitDrillingSecondRefName;
		}
	}

	@Override
	public void setPermitDrillingSecondRefName(
		String permitDrillingSecondRefName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSecondRefName = permitDrillingSecondRefName;
	}

	@JSON
	@Override
	public String getPermitDrillingSecondRefAdd() {
		if (_permitDrillingSecondRefAdd == null) {
			return "";
		}
		else {
			return _permitDrillingSecondRefAdd;
		}
	}

	@Override
	public void setPermitDrillingSecondRefAdd(
		String permitDrillingSecondRefAdd) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSecondRefAdd = permitDrillingSecondRefAdd;
	}

	@JSON
	@Override
	public String getPermitDrillingSignature() {
		if (_permitDrillingSignature == null) {
			return "";
		}
		else {
			return _permitDrillingSignature;
		}
	}

	@Override
	public void setPermitDrillingSignature(String permitDrillingSignature) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSignature = permitDrillingSignature;
	}

	@JSON
	@Override
	public Date getPermitDrillingSignatureDate() {
		return _permitDrillingSignatureDate;
	}

	@Override
	public void setPermitDrillingSignatureDate(
		Date permitDrillingSignatureDate) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitDrillingSignatureDate = permitDrillingSignatureDate;
	}

	@JSON
	@Override
	public long getWraApplicationId() {
		return _wraApplicationId;
	}

	@Override
	public void setWraApplicationId(long wraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wraApplicationId = wraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalWraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("wraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LicenceToWellDriller.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LicenceToWellDriller toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LicenceToWellDriller>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LicenceToWellDrillerImpl licenceToWellDrillerImpl =
			new LicenceToWellDrillerImpl();

		licenceToWellDrillerImpl.setLicenceToWellDrillerId(
			getLicenceToWellDrillerId());
		licenceToWellDrillerImpl.setGroupId(getGroupId());
		licenceToWellDrillerImpl.setCompanyId(getCompanyId());
		licenceToWellDrillerImpl.setUserId(getUserId());
		licenceToWellDrillerImpl.setUserName(getUserName());
		licenceToWellDrillerImpl.setCreateDate(getCreateDate());
		licenceToWellDrillerImpl.setModifiedDate(getModifiedDate());
		licenceToWellDrillerImpl.setWellDrillingApplicationNo(
			getWellDrillingApplicationNo());
		licenceToWellDrillerImpl.setPermitDrillingApplicantName(
			getPermitDrillingApplicantName());
		licenceToWellDrillerImpl.setPermitDrillingAddressParish(
			getPermitDrillingAddressParish());
		licenceToWellDrillerImpl.setPermitDrillingApplicantAddress(
			getPermitDrillingApplicantAddress());
		licenceToWellDrillerImpl.setPermitDrillingDOBDate(
			getPermitDrillingDOBDate());
		licenceToWellDrillerImpl.setPermitDrillingEducational(
			getPermitDrillingEducational());
		licenceToWellDrillerImpl.setPermitDrillingSpecificTraining(
			getPermitDrillingSpecificTraining());
		licenceToWellDrillerImpl.setPermitDrillingSpecificExp(
			getPermitDrillingSpecificExp());
		licenceToWellDrillerImpl.setPermitDrillingSelfEmployed(
			getPermitDrillingSelfEmployed());
		licenceToWellDrillerImpl.setPermitDrillingName(getPermitDrillingName());
		licenceToWellDrillerImpl.setPermitDrillingPresentEmployer(
			getPermitDrillingPresentEmployer());
		licenceToWellDrillerImpl.setPermitDrillingEmployerAddress(
			getPermitDrillingEmployerAddress());
		licenceToWellDrillerImpl.setPermitDrillingFirstRefName(
			getPermitDrillingFirstRefName());
		licenceToWellDrillerImpl.setPermitDrillingFirstRefAdd(
			getPermitDrillingFirstRefAdd());
		licenceToWellDrillerImpl.setPermitDrillingSecondRefName(
			getPermitDrillingSecondRefName());
		licenceToWellDrillerImpl.setPermitDrillingSecondRefAdd(
			getPermitDrillingSecondRefAdd());
		licenceToWellDrillerImpl.setPermitDrillingSignature(
			getPermitDrillingSignature());
		licenceToWellDrillerImpl.setPermitDrillingSignatureDate(
			getPermitDrillingSignatureDate());
		licenceToWellDrillerImpl.setWraApplicationId(getWraApplicationId());

		licenceToWellDrillerImpl.resetOriginalValues();

		return licenceToWellDrillerImpl;
	}

	@Override
	public LicenceToWellDriller cloneWithOriginalValues() {
		LicenceToWellDrillerImpl licenceToWellDrillerImpl =
			new LicenceToWellDrillerImpl();

		licenceToWellDrillerImpl.setLicenceToWellDrillerId(
			this.<Long>getColumnOriginalValue("licenceToWellDrillerId"));
		licenceToWellDrillerImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		licenceToWellDrillerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		licenceToWellDrillerImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		licenceToWellDrillerImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		licenceToWellDrillerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		licenceToWellDrillerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		licenceToWellDrillerImpl.setWellDrillingApplicationNo(
			this.<String>getColumnOriginalValue("wellDrillingApplicationNo"));
		licenceToWellDrillerImpl.setPermitDrillingApplicantName(
			this.<String>getColumnOriginalValue("permitDrillingApplicantName"));
		licenceToWellDrillerImpl.setPermitDrillingAddressParish(
			this.<String>getColumnOriginalValue("permitDrillingAddressParish"));
		licenceToWellDrillerImpl.setPermitDrillingApplicantAddress(
			this.<String>getColumnOriginalValue(
				"permitDrillingApplicantAddress"));
		licenceToWellDrillerImpl.setPermitDrillingDOBDate(
			this.<Date>getColumnOriginalValue("permitDrillingDOBDate"));
		licenceToWellDrillerImpl.setPermitDrillingEducational(
			this.<String>getColumnOriginalValue("permitDrillingEducational"));
		licenceToWellDrillerImpl.setPermitDrillingSpecificTraining(
			this.<String>getColumnOriginalValue(
				"permitDrillingSpecificTraining"));
		licenceToWellDrillerImpl.setPermitDrillingSpecificExp(
			this.<String>getColumnOriginalValue("permitDrillingSpecificExp"));
		licenceToWellDrillerImpl.setPermitDrillingSelfEmployed(
			this.<String>getColumnOriginalValue("permitDrillingSelfEmployed"));
		licenceToWellDrillerImpl.setPermitDrillingName(
			this.<String>getColumnOriginalValue("permitDrillingName"));
		licenceToWellDrillerImpl.setPermitDrillingPresentEmployer(
			this.<String>getColumnOriginalValue(
				"permitDrillingPresentEmployer"));
		licenceToWellDrillerImpl.setPermitDrillingEmployerAddress(
			this.<String>getColumnOriginalValue(
				"permitDrillingEmployerAddress"));
		licenceToWellDrillerImpl.setPermitDrillingFirstRefName(
			this.<String>getColumnOriginalValue("permitDrillingFirstRefName"));
		licenceToWellDrillerImpl.setPermitDrillingFirstRefAdd(
			this.<String>getColumnOriginalValue("permitDrillingFirstRefAdd"));
		licenceToWellDrillerImpl.setPermitDrillingSecondRefName(
			this.<String>getColumnOriginalValue("permitDrillingSecondRefName"));
		licenceToWellDrillerImpl.setPermitDrillingSecondRefAdd(
			this.<String>getColumnOriginalValue("permitDrillingSecondRefAdd"));
		licenceToWellDrillerImpl.setPermitDrillingSignature(
			this.<String>getColumnOriginalValue("permitDrillingSignature"));
		licenceToWellDrillerImpl.setPermitDrillingSignatureDate(
			this.<Date>getColumnOriginalValue("permitDrillingSignatureDate"));
		licenceToWellDrillerImpl.setWraApplicationId(
			this.<Long>getColumnOriginalValue("wraApplicationId"));

		return licenceToWellDrillerImpl;
	}

	@Override
	public int compareTo(LicenceToWellDriller licenceToWellDriller) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), licenceToWellDriller.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LicenceToWellDriller)) {
			return false;
		}

		LicenceToWellDriller licenceToWellDriller =
			(LicenceToWellDriller)object;

		long primaryKey = licenceToWellDriller.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LicenceToWellDriller> toCacheModel() {
		LicenceToWellDrillerCacheModel licenceToWellDrillerCacheModel =
			new LicenceToWellDrillerCacheModel();

		licenceToWellDrillerCacheModel.licenceToWellDrillerId =
			getLicenceToWellDrillerId();

		licenceToWellDrillerCacheModel.groupId = getGroupId();

		licenceToWellDrillerCacheModel.companyId = getCompanyId();

		licenceToWellDrillerCacheModel.userId = getUserId();

		licenceToWellDrillerCacheModel.userName = getUserName();

		String userName = licenceToWellDrillerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			licenceToWellDrillerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			licenceToWellDrillerCacheModel.createDate = createDate.getTime();
		}
		else {
			licenceToWellDrillerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			licenceToWellDrillerCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			licenceToWellDrillerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		licenceToWellDrillerCacheModel.wellDrillingApplicationNo =
			getWellDrillingApplicationNo();

		String wellDrillingApplicationNo =
			licenceToWellDrillerCacheModel.wellDrillingApplicationNo;

		if ((wellDrillingApplicationNo != null) &&
			(wellDrillingApplicationNo.length() == 0)) {

			licenceToWellDrillerCacheModel.wellDrillingApplicationNo = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingApplicantName =
			getPermitDrillingApplicantName();

		String permitDrillingApplicantName =
			licenceToWellDrillerCacheModel.permitDrillingApplicantName;

		if ((permitDrillingApplicantName != null) &&
			(permitDrillingApplicantName.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingApplicantName = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingAddressParish =
			getPermitDrillingAddressParish();

		String permitDrillingAddressParish =
			licenceToWellDrillerCacheModel.permitDrillingAddressParish;

		if ((permitDrillingAddressParish != null) &&
			(permitDrillingAddressParish.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingAddressParish = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingApplicantAddress =
			getPermitDrillingApplicantAddress();

		String permitDrillingApplicantAddress =
			licenceToWellDrillerCacheModel.permitDrillingApplicantAddress;

		if ((permitDrillingApplicantAddress != null) &&
			(permitDrillingApplicantAddress.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingApplicantAddress =
				null;
		}

		Date permitDrillingDOBDate = getPermitDrillingDOBDate();

		if (permitDrillingDOBDate != null) {
			licenceToWellDrillerCacheModel.permitDrillingDOBDate =
				permitDrillingDOBDate.getTime();
		}
		else {
			licenceToWellDrillerCacheModel.permitDrillingDOBDate =
				Long.MIN_VALUE;
		}

		licenceToWellDrillerCacheModel.permitDrillingEducational =
			getPermitDrillingEducational();

		String permitDrillingEducational =
			licenceToWellDrillerCacheModel.permitDrillingEducational;

		if ((permitDrillingEducational != null) &&
			(permitDrillingEducational.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingEducational = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingSpecificTraining =
			getPermitDrillingSpecificTraining();

		String permitDrillingSpecificTraining =
			licenceToWellDrillerCacheModel.permitDrillingSpecificTraining;

		if ((permitDrillingSpecificTraining != null) &&
			(permitDrillingSpecificTraining.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingSpecificTraining =
				null;
		}

		licenceToWellDrillerCacheModel.permitDrillingSpecificExp =
			getPermitDrillingSpecificExp();

		String permitDrillingSpecificExp =
			licenceToWellDrillerCacheModel.permitDrillingSpecificExp;

		if ((permitDrillingSpecificExp != null) &&
			(permitDrillingSpecificExp.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingSpecificExp = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingSelfEmployed =
			getPermitDrillingSelfEmployed();

		String permitDrillingSelfEmployed =
			licenceToWellDrillerCacheModel.permitDrillingSelfEmployed;

		if ((permitDrillingSelfEmployed != null) &&
			(permitDrillingSelfEmployed.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingSelfEmployed = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingName =
			getPermitDrillingName();

		String permitDrillingName =
			licenceToWellDrillerCacheModel.permitDrillingName;

		if ((permitDrillingName != null) &&
			(permitDrillingName.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingName = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingPresentEmployer =
			getPermitDrillingPresentEmployer();

		String permitDrillingPresentEmployer =
			licenceToWellDrillerCacheModel.permitDrillingPresentEmployer;

		if ((permitDrillingPresentEmployer != null) &&
			(permitDrillingPresentEmployer.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingPresentEmployer = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingEmployerAddress =
			getPermitDrillingEmployerAddress();

		String permitDrillingEmployerAddress =
			licenceToWellDrillerCacheModel.permitDrillingEmployerAddress;

		if ((permitDrillingEmployerAddress != null) &&
			(permitDrillingEmployerAddress.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingEmployerAddress = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingFirstRefName =
			getPermitDrillingFirstRefName();

		String permitDrillingFirstRefName =
			licenceToWellDrillerCacheModel.permitDrillingFirstRefName;

		if ((permitDrillingFirstRefName != null) &&
			(permitDrillingFirstRefName.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingFirstRefName = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingFirstRefAdd =
			getPermitDrillingFirstRefAdd();

		String permitDrillingFirstRefAdd =
			licenceToWellDrillerCacheModel.permitDrillingFirstRefAdd;

		if ((permitDrillingFirstRefAdd != null) &&
			(permitDrillingFirstRefAdd.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingFirstRefAdd = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingSecondRefName =
			getPermitDrillingSecondRefName();

		String permitDrillingSecondRefName =
			licenceToWellDrillerCacheModel.permitDrillingSecondRefName;

		if ((permitDrillingSecondRefName != null) &&
			(permitDrillingSecondRefName.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingSecondRefName = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingSecondRefAdd =
			getPermitDrillingSecondRefAdd();

		String permitDrillingSecondRefAdd =
			licenceToWellDrillerCacheModel.permitDrillingSecondRefAdd;

		if ((permitDrillingSecondRefAdd != null) &&
			(permitDrillingSecondRefAdd.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingSecondRefAdd = null;
		}

		licenceToWellDrillerCacheModel.permitDrillingSignature =
			getPermitDrillingSignature();

		String permitDrillingSignature =
			licenceToWellDrillerCacheModel.permitDrillingSignature;

		if ((permitDrillingSignature != null) &&
			(permitDrillingSignature.length() == 0)) {

			licenceToWellDrillerCacheModel.permitDrillingSignature = null;
		}

		Date permitDrillingSignatureDate = getPermitDrillingSignatureDate();

		if (permitDrillingSignatureDate != null) {
			licenceToWellDrillerCacheModel.permitDrillingSignatureDate =
				permitDrillingSignatureDate.getTime();
		}
		else {
			licenceToWellDrillerCacheModel.permitDrillingSignatureDate =
				Long.MIN_VALUE;
		}

		licenceToWellDrillerCacheModel.wraApplicationId = getWraApplicationId();

		return licenceToWellDrillerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LicenceToWellDriller, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LicenceToWellDriller, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LicenceToWellDriller, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(LicenceToWellDriller)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LicenceToWellDriller>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					LicenceToWellDriller.class, ModelWrapper.class);

	}

	private long _licenceToWellDrillerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _wellDrillingApplicationNo;
	private String _permitDrillingApplicantName;
	private String _permitDrillingAddressParish;
	private String _permitDrillingApplicantAddress;
	private Date _permitDrillingDOBDate;
	private String _permitDrillingEducational;
	private String _permitDrillingSpecificTraining;
	private String _permitDrillingSpecificExp;
	private String _permitDrillingSelfEmployed;
	private String _permitDrillingName;
	private String _permitDrillingPresentEmployer;
	private String _permitDrillingEmployerAddress;
	private String _permitDrillingFirstRefName;
	private String _permitDrillingFirstRefAdd;
	private String _permitDrillingSecondRefName;
	private String _permitDrillingSecondRefAdd;
	private String _permitDrillingSignature;
	private Date _permitDrillingSignatureDate;
	private long _wraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<LicenceToWellDriller, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LicenceToWellDriller)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"licenceToWellDrillerId", _licenceToWellDrillerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"wellDrillingApplicationNo", _wellDrillingApplicationNo);
		_columnOriginalValues.put(
			"permitDrillingApplicantName", _permitDrillingApplicantName);
		_columnOriginalValues.put(
			"permitDrillingAddressParish", _permitDrillingAddressParish);
		_columnOriginalValues.put(
			"permitDrillingApplicantAddress", _permitDrillingApplicantAddress);
		_columnOriginalValues.put(
			"permitDrillingDOBDate", _permitDrillingDOBDate);
		_columnOriginalValues.put(
			"permitDrillingEducational", _permitDrillingEducational);
		_columnOriginalValues.put(
			"permitDrillingSpecificTraining", _permitDrillingSpecificTraining);
		_columnOriginalValues.put(
			"permitDrillingSpecificExp", _permitDrillingSpecificExp);
		_columnOriginalValues.put(
			"permitDrillingSelfEmployed", _permitDrillingSelfEmployed);
		_columnOriginalValues.put("permitDrillingName", _permitDrillingName);
		_columnOriginalValues.put(
			"permitDrillingPresentEmployer", _permitDrillingPresentEmployer);
		_columnOriginalValues.put(
			"permitDrillingEmployerAddress", _permitDrillingEmployerAddress);
		_columnOriginalValues.put(
			"permitDrillingFirstRefName", _permitDrillingFirstRefName);
		_columnOriginalValues.put(
			"permitDrillingFirstRefAdd", _permitDrillingFirstRefAdd);
		_columnOriginalValues.put(
			"permitDrillingSecondRefName", _permitDrillingSecondRefName);
		_columnOriginalValues.put(
			"permitDrillingSecondRefAdd", _permitDrillingSecondRefAdd);
		_columnOriginalValues.put(
			"permitDrillingSignature", _permitDrillingSignature);
		_columnOriginalValues.put(
			"permitDrillingSignatureDate", _permitDrillingSignatureDate);
		_columnOriginalValues.put("wraApplicationId", _wraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("licenceToWellDrillerId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("wellDrillingApplicationNo", 128L);

		columnBitmasks.put("permitDrillingApplicantName", 256L);

		columnBitmasks.put("permitDrillingAddressParish", 512L);

		columnBitmasks.put("permitDrillingApplicantAddress", 1024L);

		columnBitmasks.put("permitDrillingDOBDate", 2048L);

		columnBitmasks.put("permitDrillingEducational", 4096L);

		columnBitmasks.put("permitDrillingSpecificTraining", 8192L);

		columnBitmasks.put("permitDrillingSpecificExp", 16384L);

		columnBitmasks.put("permitDrillingSelfEmployed", 32768L);

		columnBitmasks.put("permitDrillingName", 65536L);

		columnBitmasks.put("permitDrillingPresentEmployer", 131072L);

		columnBitmasks.put("permitDrillingEmployerAddress", 262144L);

		columnBitmasks.put("permitDrillingFirstRefName", 524288L);

		columnBitmasks.put("permitDrillingFirstRefAdd", 1048576L);

		columnBitmasks.put("permitDrillingSecondRefName", 2097152L);

		columnBitmasks.put("permitDrillingSecondRefAdd", 4194304L);

		columnBitmasks.put("permitDrillingSignature", 8388608L);

		columnBitmasks.put("permitDrillingSignatureDate", 16777216L);

		columnBitmasks.put("wraApplicationId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LicenceToWellDriller _escapedModel;

}