/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.wra.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.wra.application.form.service.model.WRAApplication;
import com.nbp.wra.application.form.service.model.WRAApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the WRAApplication service. Represents a row in the &quot;nbp_wra_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>WRAApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WRAApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WRAApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class WRAApplicationModelImpl
	extends BaseModelImpl<WRAApplication> implements WRAApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wra application model instance should use the <code>WRAApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_wra_application";

	public static final Object[][] TABLE_COLUMNS = {
		{"wraApplicationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"entityId", Types.TIMESTAMP},
		{"typeOfApplication", Types.VARCHAR},
		{"typeOfTransaction", Types.VARCHAR}, {"typeOfPermit", Types.VARCHAR},
		{"typeOfTransacPermit", Types.VARCHAR},
		{"userWaterTypeCat", Types.VARCHAR},
		{"consumptiveSubCat", Types.VARCHAR},
		{"nonConsumptiveSubCat", Types.VARCHAR},
		{"industrialTypeSubCat", Types.VARCHAR},
		{"icmDocumentPath", Types.VARCHAR}, {"status", Types.INTEGER},
		{"caseId", Types.VARCHAR}, {"applicationNumber", Types.VARCHAR},
		{"pdfFileEntryId", Types.BIGINT},
		{"expiredLicenseAppNumber", Types.VARCHAR},
		{"appCurrentStageName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("wraApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityId", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeOfApplication", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfTransaction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfPermit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfTransacPermit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userWaterTypeCat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consumptiveSubCat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nonConsumptiveSubCat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("industrialTypeSubCat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("expiredLicenseAppNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_wra_application (wraApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityId DATE null,typeOfApplication VARCHAR(75) null,typeOfTransaction VARCHAR(75) null,typeOfPermit VARCHAR(75) null,typeOfTransacPermit VARCHAR(75) null,userWaterTypeCat VARCHAR(75) null,consumptiveSubCat VARCHAR(75) null,nonConsumptiveSubCat VARCHAR(75) null,industrialTypeSubCat VARCHAR(75) null,icmDocumentPath VARCHAR(500) null,status INTEGER,caseId VARCHAR(75) null,applicationNumber VARCHAR(75) null,pdfFileEntryId LONG,expiredLicenseAppNumber VARCHAR(75) null,appCurrentStageName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_wra_application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY wraApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_wra_application.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENTITYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPIREDLICENSEAPPNUMBER_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPEOFTRANSACTION_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public WRAApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _wraApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWraApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _wraApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WRAApplication.class;
	}

	@Override
	public String getModelClassName() {
		return WRAApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<WRAApplication, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<WRAApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<WRAApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((WRAApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<WRAApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<WRAApplication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(WRAApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<WRAApplication, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<WRAApplication, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<WRAApplication, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<WRAApplication, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<WRAApplication, Object>>();

			attributeGetterFunctions.put(
				"wraApplicationId", WRAApplication::getWraApplicationId);
			attributeGetterFunctions.put("groupId", WRAApplication::getGroupId);
			attributeGetterFunctions.put(
				"companyId", WRAApplication::getCompanyId);
			attributeGetterFunctions.put("userId", WRAApplication::getUserId);
			attributeGetterFunctions.put(
				"userName", WRAApplication::getUserName);
			attributeGetterFunctions.put(
				"createDate", WRAApplication::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", WRAApplication::getModifiedDate);
			attributeGetterFunctions.put(
				"entityId", WRAApplication::getEntityId);
			attributeGetterFunctions.put(
				"typeOfApplication", WRAApplication::getTypeOfApplication);
			attributeGetterFunctions.put(
				"typeOfTransaction", WRAApplication::getTypeOfTransaction);
			attributeGetterFunctions.put(
				"typeOfPermit", WRAApplication::getTypeOfPermit);
			attributeGetterFunctions.put(
				"typeOfTransacPermit", WRAApplication::getTypeOfTransacPermit);
			attributeGetterFunctions.put(
				"userWaterTypeCat", WRAApplication::getUserWaterTypeCat);
			attributeGetterFunctions.put(
				"consumptiveSubCat", WRAApplication::getConsumptiveSubCat);
			attributeGetterFunctions.put(
				"nonConsumptiveSubCat",
				WRAApplication::getNonConsumptiveSubCat);
			attributeGetterFunctions.put(
				"industrialTypeSubCat",
				WRAApplication::getIndustrialTypeSubCat);
			attributeGetterFunctions.put(
				"icmDocumentPath", WRAApplication::getIcmDocumentPath);
			attributeGetterFunctions.put("status", WRAApplication::getStatus);
			attributeGetterFunctions.put("caseId", WRAApplication::getCaseId);
			attributeGetterFunctions.put(
				"applicationNumber", WRAApplication::getApplicationNumber);
			attributeGetterFunctions.put(
				"pdfFileEntryId", WRAApplication::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"expiredLicenseAppNumber",
				WRAApplication::getExpiredLicenseAppNumber);
			attributeGetterFunctions.put(
				"appCurrentStageName", WRAApplication::getAppCurrentStageName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<WRAApplication, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<WRAApplication, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<WRAApplication, ?>>();

			attributeSetterBiConsumers.put(
				"wraApplicationId",
				(BiConsumer<WRAApplication, Long>)
					WRAApplication::setWraApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<WRAApplication, Long>)WRAApplication::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<WRAApplication, Long>)WRAApplication::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<WRAApplication, Long>)WRAApplication::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<WRAApplication, Date>)
					WRAApplication::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<WRAApplication, Date>)
					WRAApplication::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<WRAApplication, Date>)WRAApplication::setEntityId);
			attributeSetterBiConsumers.put(
				"typeOfApplication",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setTypeOfApplication);
			attributeSetterBiConsumers.put(
				"typeOfTransaction",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setTypeOfTransaction);
			attributeSetterBiConsumers.put(
				"typeOfPermit",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setTypeOfPermit);
			attributeSetterBiConsumers.put(
				"typeOfTransacPermit",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setTypeOfTransacPermit);
			attributeSetterBiConsumers.put(
				"userWaterTypeCat",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setUserWaterTypeCat);
			attributeSetterBiConsumers.put(
				"consumptiveSubCat",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setConsumptiveSubCat);
			attributeSetterBiConsumers.put(
				"nonConsumptiveSubCat",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setNonConsumptiveSubCat);
			attributeSetterBiConsumers.put(
				"industrialTypeSubCat",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setIndustrialTypeSubCat);
			attributeSetterBiConsumers.put(
				"icmDocumentPath",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setIcmDocumentPath);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<WRAApplication, Integer>)WRAApplication::setStatus);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<WRAApplication, String>)WRAApplication::setCaseId);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"pdfFileEntryId",
				(BiConsumer<WRAApplication, Long>)
					WRAApplication::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"expiredLicenseAppNumber",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setExpiredLicenseAppNumber);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<WRAApplication, String>)
					WRAApplication::setAppCurrentStageName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getWraApplicationId() {
		return _wraApplicationId;
	}

	@Override
	public void setWraApplicationId(long wraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wraApplicationId = wraApplicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(Date entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalEntityId() {
		return getColumnOriginalValue("entityId");
	}

	@JSON
	@Override
	public String getTypeOfApplication() {
		if (_typeOfApplication == null) {
			return "";
		}
		else {
			return _typeOfApplication;
		}
	}

	@Override
	public void setTypeOfApplication(String typeOfApplication) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfApplication = typeOfApplication;
	}

	@JSON
	@Override
	public String getTypeOfTransaction() {
		if (_typeOfTransaction == null) {
			return "";
		}
		else {
			return _typeOfTransaction;
		}
	}

	@Override
	public void setTypeOfTransaction(String typeOfTransaction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfTransaction = typeOfTransaction;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTypeOfTransaction() {
		return getColumnOriginalValue("typeOfTransaction");
	}

	@JSON
	@Override
	public String getTypeOfPermit() {
		if (_typeOfPermit == null) {
			return "";
		}
		else {
			return _typeOfPermit;
		}
	}

	@Override
	public void setTypeOfPermit(String typeOfPermit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfPermit = typeOfPermit;
	}

	@JSON
	@Override
	public String getTypeOfTransacPermit() {
		if (_typeOfTransacPermit == null) {
			return "";
		}
		else {
			return _typeOfTransacPermit;
		}
	}

	@Override
	public void setTypeOfTransacPermit(String typeOfTransacPermit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfTransacPermit = typeOfTransacPermit;
	}

	@JSON
	@Override
	public String getUserWaterTypeCat() {
		if (_userWaterTypeCat == null) {
			return "";
		}
		else {
			return _userWaterTypeCat;
		}
	}

	@Override
	public void setUserWaterTypeCat(String userWaterTypeCat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userWaterTypeCat = userWaterTypeCat;
	}

	@JSON
	@Override
	public String getConsumptiveSubCat() {
		if (_consumptiveSubCat == null) {
			return "";
		}
		else {
			return _consumptiveSubCat;
		}
	}

	@Override
	public void setConsumptiveSubCat(String consumptiveSubCat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_consumptiveSubCat = consumptiveSubCat;
	}

	@JSON
	@Override
	public String getNonConsumptiveSubCat() {
		if (_nonConsumptiveSubCat == null) {
			return "";
		}
		else {
			return _nonConsumptiveSubCat;
		}
	}

	@Override
	public void setNonConsumptiveSubCat(String nonConsumptiveSubCat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonConsumptiveSubCat = nonConsumptiveSubCat;
	}

	@JSON
	@Override
	public String getIndustrialTypeSubCat() {
		if (_industrialTypeSubCat == null) {
			return "";
		}
		else {
			return _industrialTypeSubCat;
		}
	}

	@Override
	public void setIndustrialTypeSubCat(String industrialTypeSubCat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_industrialTypeSubCat = industrialTypeSubCat;
	}

	@JSON
	@Override
	public String getIcmDocumentPath() {
		if (_icmDocumentPath == null) {
			return "";
		}
		else {
			return _icmDocumentPath;
		}
	}

	@Override
	public void setIcmDocumentPath(String icmDocumentPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentPath = icmDocumentPath;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _pdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long pdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pdfFileEntryId = pdfFileEntryId;
	}

	@JSON
	@Override
	public String getExpiredLicenseAppNumber() {
		if (_expiredLicenseAppNumber == null) {
			return "";
		}
		else {
			return _expiredLicenseAppNumber;
		}
	}

	@Override
	public void setExpiredLicenseAppNumber(String expiredLicenseAppNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredLicenseAppNumber = expiredLicenseAppNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExpiredLicenseAppNumber() {
		return getColumnOriginalValue("expiredLicenseAppNumber");
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), WRAApplication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WRAApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, WRAApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WRAApplicationImpl wraApplicationImpl = new WRAApplicationImpl();

		wraApplicationImpl.setWraApplicationId(getWraApplicationId());
		wraApplicationImpl.setGroupId(getGroupId());
		wraApplicationImpl.setCompanyId(getCompanyId());
		wraApplicationImpl.setUserId(getUserId());
		wraApplicationImpl.setUserName(getUserName());
		wraApplicationImpl.setCreateDate(getCreateDate());
		wraApplicationImpl.setModifiedDate(getModifiedDate());
		wraApplicationImpl.setEntityId(getEntityId());
		wraApplicationImpl.setTypeOfApplication(getTypeOfApplication());
		wraApplicationImpl.setTypeOfTransaction(getTypeOfTransaction());
		wraApplicationImpl.setTypeOfPermit(getTypeOfPermit());
		wraApplicationImpl.setTypeOfTransacPermit(getTypeOfTransacPermit());
		wraApplicationImpl.setUserWaterTypeCat(getUserWaterTypeCat());
		wraApplicationImpl.setConsumptiveSubCat(getConsumptiveSubCat());
		wraApplicationImpl.setNonConsumptiveSubCat(getNonConsumptiveSubCat());
		wraApplicationImpl.setIndustrialTypeSubCat(getIndustrialTypeSubCat());
		wraApplicationImpl.setIcmDocumentPath(getIcmDocumentPath());
		wraApplicationImpl.setStatus(getStatus());
		wraApplicationImpl.setCaseId(getCaseId());
		wraApplicationImpl.setApplicationNumber(getApplicationNumber());
		wraApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		wraApplicationImpl.setExpiredLicenseAppNumber(
			getExpiredLicenseAppNumber());
		wraApplicationImpl.setAppCurrentStageName(getAppCurrentStageName());

		wraApplicationImpl.resetOriginalValues();

		return wraApplicationImpl;
	}

	@Override
	public WRAApplication cloneWithOriginalValues() {
		WRAApplicationImpl wraApplicationImpl = new WRAApplicationImpl();

		wraApplicationImpl.setWraApplicationId(
			this.<Long>getColumnOriginalValue("wraApplicationId"));
		wraApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		wraApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		wraApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		wraApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		wraApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		wraApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		wraApplicationImpl.setEntityId(
			this.<Date>getColumnOriginalValue("entityId"));
		wraApplicationImpl.setTypeOfApplication(
			this.<String>getColumnOriginalValue("typeOfApplication"));
		wraApplicationImpl.setTypeOfTransaction(
			this.<String>getColumnOriginalValue("typeOfTransaction"));
		wraApplicationImpl.setTypeOfPermit(
			this.<String>getColumnOriginalValue("typeOfPermit"));
		wraApplicationImpl.setTypeOfTransacPermit(
			this.<String>getColumnOriginalValue("typeOfTransacPermit"));
		wraApplicationImpl.setUserWaterTypeCat(
			this.<String>getColumnOriginalValue("userWaterTypeCat"));
		wraApplicationImpl.setConsumptiveSubCat(
			this.<String>getColumnOriginalValue("consumptiveSubCat"));
		wraApplicationImpl.setNonConsumptiveSubCat(
			this.<String>getColumnOriginalValue("nonConsumptiveSubCat"));
		wraApplicationImpl.setIndustrialTypeSubCat(
			this.<String>getColumnOriginalValue("industrialTypeSubCat"));
		wraApplicationImpl.setIcmDocumentPath(
			this.<String>getColumnOriginalValue("icmDocumentPath"));
		wraApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		wraApplicationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		wraApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		wraApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("pdfFileEntryId"));
		wraApplicationImpl.setExpiredLicenseAppNumber(
			this.<String>getColumnOriginalValue("expiredLicenseAppNumber"));
		wraApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));

		return wraApplicationImpl;
	}

	@Override
	public int compareTo(WRAApplication wraApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), wraApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof WRAApplication)) {
			return false;
		}

		WRAApplication wraApplication = (WRAApplication)object;

		long primaryKey = wraApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<WRAApplication> toCacheModel() {
		WRAApplicationCacheModel wraApplicationCacheModel =
			new WRAApplicationCacheModel();

		wraApplicationCacheModel.wraApplicationId = getWraApplicationId();

		wraApplicationCacheModel.groupId = getGroupId();

		wraApplicationCacheModel.companyId = getCompanyId();

		wraApplicationCacheModel.userId = getUserId();

		wraApplicationCacheModel.userName = getUserName();

		String userName = wraApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			wraApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			wraApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			wraApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			wraApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			wraApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date entityId = getEntityId();

		if (entityId != null) {
			wraApplicationCacheModel.entityId = entityId.getTime();
		}
		else {
			wraApplicationCacheModel.entityId = Long.MIN_VALUE;
		}

		wraApplicationCacheModel.typeOfApplication = getTypeOfApplication();

		String typeOfApplication = wraApplicationCacheModel.typeOfApplication;

		if ((typeOfApplication != null) && (typeOfApplication.length() == 0)) {
			wraApplicationCacheModel.typeOfApplication = null;
		}

		wraApplicationCacheModel.typeOfTransaction = getTypeOfTransaction();

		String typeOfTransaction = wraApplicationCacheModel.typeOfTransaction;

		if ((typeOfTransaction != null) && (typeOfTransaction.length() == 0)) {
			wraApplicationCacheModel.typeOfTransaction = null;
		}

		wraApplicationCacheModel.typeOfPermit = getTypeOfPermit();

		String typeOfPermit = wraApplicationCacheModel.typeOfPermit;

		if ((typeOfPermit != null) && (typeOfPermit.length() == 0)) {
			wraApplicationCacheModel.typeOfPermit = null;
		}

		wraApplicationCacheModel.typeOfTransacPermit = getTypeOfTransacPermit();

		String typeOfTransacPermit =
			wraApplicationCacheModel.typeOfTransacPermit;

		if ((typeOfTransacPermit != null) &&
			(typeOfTransacPermit.length() == 0)) {

			wraApplicationCacheModel.typeOfTransacPermit = null;
		}

		wraApplicationCacheModel.userWaterTypeCat = getUserWaterTypeCat();

		String userWaterTypeCat = wraApplicationCacheModel.userWaterTypeCat;

		if ((userWaterTypeCat != null) && (userWaterTypeCat.length() == 0)) {
			wraApplicationCacheModel.userWaterTypeCat = null;
		}

		wraApplicationCacheModel.consumptiveSubCat = getConsumptiveSubCat();

		String consumptiveSubCat = wraApplicationCacheModel.consumptiveSubCat;

		if ((consumptiveSubCat != null) && (consumptiveSubCat.length() == 0)) {
			wraApplicationCacheModel.consumptiveSubCat = null;
		}

		wraApplicationCacheModel.nonConsumptiveSubCat =
			getNonConsumptiveSubCat();

		String nonConsumptiveSubCat =
			wraApplicationCacheModel.nonConsumptiveSubCat;

		if ((nonConsumptiveSubCat != null) &&
			(nonConsumptiveSubCat.length() == 0)) {

			wraApplicationCacheModel.nonConsumptiveSubCat = null;
		}

		wraApplicationCacheModel.industrialTypeSubCat =
			getIndustrialTypeSubCat();

		String industrialTypeSubCat =
			wraApplicationCacheModel.industrialTypeSubCat;

		if ((industrialTypeSubCat != null) &&
			(industrialTypeSubCat.length() == 0)) {

			wraApplicationCacheModel.industrialTypeSubCat = null;
		}

		wraApplicationCacheModel.icmDocumentPath = getIcmDocumentPath();

		String icmDocumentPath = wraApplicationCacheModel.icmDocumentPath;

		if ((icmDocumentPath != null) && (icmDocumentPath.length() == 0)) {
			wraApplicationCacheModel.icmDocumentPath = null;
		}

		wraApplicationCacheModel.status = getStatus();

		wraApplicationCacheModel.caseId = getCaseId();

		String caseId = wraApplicationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			wraApplicationCacheModel.caseId = null;
		}

		wraApplicationCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber = wraApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			wraApplicationCacheModel.applicationNumber = null;
		}

		wraApplicationCacheModel.pdfFileEntryId = getPdfFileEntryId();

		wraApplicationCacheModel.expiredLicenseAppNumber =
			getExpiredLicenseAppNumber();

		String expiredLicenseAppNumber =
			wraApplicationCacheModel.expiredLicenseAppNumber;

		if ((expiredLicenseAppNumber != null) &&
			(expiredLicenseAppNumber.length() == 0)) {

			wraApplicationCacheModel.expiredLicenseAppNumber = null;
		}

		wraApplicationCacheModel.appCurrentStageName = getAppCurrentStageName();

		String appCurrentStageName =
			wraApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			wraApplicationCacheModel.appCurrentStageName = null;
		}

		return wraApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<WRAApplication, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<WRAApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<WRAApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((WRAApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, WRAApplication>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					WRAApplication.class, ModelWrapper.class);

	}

	private long _wraApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _entityId;
	private String _typeOfApplication;
	private String _typeOfTransaction;
	private String _typeOfPermit;
	private String _typeOfTransacPermit;
	private String _userWaterTypeCat;
	private String _consumptiveSubCat;
	private String _nonConsumptiveSubCat;
	private String _industrialTypeSubCat;
	private String _icmDocumentPath;
	private int _status;
	private String _caseId;
	private String _applicationNumber;
	private long _pdfFileEntryId;
	private String _expiredLicenseAppNumber;
	private String _appCurrentStageName;

	public <T> T getColumnValue(String columnName) {
		Function<WRAApplication, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((WRAApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("wraApplicationId", _wraApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("typeOfApplication", _typeOfApplication);
		_columnOriginalValues.put("typeOfTransaction", _typeOfTransaction);
		_columnOriginalValues.put("typeOfPermit", _typeOfPermit);
		_columnOriginalValues.put("typeOfTransacPermit", _typeOfTransacPermit);
		_columnOriginalValues.put("userWaterTypeCat", _userWaterTypeCat);
		_columnOriginalValues.put("consumptiveSubCat", _consumptiveSubCat);
		_columnOriginalValues.put(
			"nonConsumptiveSubCat", _nonConsumptiveSubCat);
		_columnOriginalValues.put(
			"industrialTypeSubCat", _industrialTypeSubCat);
		_columnOriginalValues.put("icmDocumentPath", _icmDocumentPath);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("pdfFileEntryId", _pdfFileEntryId);
		_columnOriginalValues.put(
			"expiredLicenseAppNumber", _expiredLicenseAppNumber);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("wraApplicationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("entityId", 128L);

		columnBitmasks.put("typeOfApplication", 256L);

		columnBitmasks.put("typeOfTransaction", 512L);

		columnBitmasks.put("typeOfPermit", 1024L);

		columnBitmasks.put("typeOfTransacPermit", 2048L);

		columnBitmasks.put("userWaterTypeCat", 4096L);

		columnBitmasks.put("consumptiveSubCat", 8192L);

		columnBitmasks.put("nonConsumptiveSubCat", 16384L);

		columnBitmasks.put("industrialTypeSubCat", 32768L);

		columnBitmasks.put("icmDocumentPath", 65536L);

		columnBitmasks.put("status", 131072L);

		columnBitmasks.put("caseId", 262144L);

		columnBitmasks.put("applicationNumber", 524288L);

		columnBitmasks.put("pdfFileEntryId", 1048576L);

		columnBitmasks.put("expiredLicenseAppNumber", 2097152L);

		columnBitmasks.put("appCurrentStageName", 4194304L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private WRAApplication _escapedModel;

}