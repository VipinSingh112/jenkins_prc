/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.manufacturing.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.manufacturing.application.form.service.model.ProductiveInputsForm;
import com.nbp.manufacturing.application.form.service.model.ProductiveInputsFormModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductiveInputsForm service. Represents a row in the &quot;nbp_manu_productive_Inputsform&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductiveInputsFormModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductiveInputsFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductiveInputsFormImpl
 * @generated
 */
@JSON(strict = true)
public class ProductiveInputsFormModelImpl
	extends BaseModelImpl<ProductiveInputsForm>
	implements ProductiveInputsFormModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a productive inputs form model instance should use the <code>ProductiveInputsForm</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_manu_productive_Inputsform";

	public static final Object[][] TABLE_COLUMNS = {
		{"productiveInputsFormId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"categoryOfGoods", Types.VARCHAR},
		{"manufactureProducts", Types.VARCHAR},
		{"proposedProducts", Types.VARCHAR}, {"processType", Types.VARCHAR},
		{"tariffCode", Types.VARCHAR}, {"manufactureItem", Types.VARCHAR},
		{"importedCaricom", Types.VARCHAR},
		{"rawMaterialPurchased", Types.VARCHAR},
		{"manufacturingApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("productiveInputsFormId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("categoryOfGoods", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufactureProducts", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proposedProducts", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tariffCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufactureItem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importedCaricom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rawMaterialPurchased", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturingApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_manu_productive_Inputsform (productiveInputsFormId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,categoryOfGoods VARCHAR(75) null,manufactureProducts VARCHAR(500) null,proposedProducts VARCHAR(500) null,processType VARCHAR(75) null,tariffCode VARCHAR(75) null,manufactureItem VARCHAR(75) null,importedCaricom VARCHAR(75) null,rawMaterialPurchased VARCHAR(500) null,manufacturingApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_manu_productive_Inputsform";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productiveInputsForm.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_manu_productive_Inputsform.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANUFACTURINGAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProductiveInputsFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _productiveInputsFormId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProductiveInputsFormId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _productiveInputsFormId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductiveInputsForm.class;
	}

	@Override
	public String getModelClassName() {
		return ProductiveInputsForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductiveInputsForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductiveInputsForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductiveInputsForm, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductiveInputsForm)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductiveInputsForm, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductiveInputsForm, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductiveInputsForm)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductiveInputsForm, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductiveInputsForm, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<ProductiveInputsForm, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<ProductiveInputsForm, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ProductiveInputsForm, Object>>();

			attributeGetterFunctions.put(
				"productiveInputsFormId",
				ProductiveInputsForm::getProductiveInputsFormId);
			attributeGetterFunctions.put(
				"groupId", ProductiveInputsForm::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ProductiveInputsForm::getCompanyId);
			attributeGetterFunctions.put(
				"userId", ProductiveInputsForm::getUserId);
			attributeGetterFunctions.put(
				"userName", ProductiveInputsForm::getUserName);
			attributeGetterFunctions.put(
				"createDate", ProductiveInputsForm::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", ProductiveInputsForm::getModifiedDate);
			attributeGetterFunctions.put(
				"categoryOfGoods", ProductiveInputsForm::getCategoryOfGoods);
			attributeGetterFunctions.put(
				"manufactureProducts",
				ProductiveInputsForm::getManufactureProducts);
			attributeGetterFunctions.put(
				"proposedProducts", ProductiveInputsForm::getProposedProducts);
			attributeGetterFunctions.put(
				"processType", ProductiveInputsForm::getProcessType);
			attributeGetterFunctions.put(
				"tariffCode", ProductiveInputsForm::getTariffCode);
			attributeGetterFunctions.put(
				"manufactureItem", ProductiveInputsForm::getManufactureItem);
			attributeGetterFunctions.put(
				"importedCaricom", ProductiveInputsForm::getImportedCaricom);
			attributeGetterFunctions.put(
				"rawMaterialPurchased",
				ProductiveInputsForm::getRawMaterialPurchased);
			attributeGetterFunctions.put(
				"manufacturingApplicationId",
				ProductiveInputsForm::getManufacturingApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ProductiveInputsForm, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ProductiveInputsForm, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<ProductiveInputsForm, ?>>();

			attributeSetterBiConsumers.put(
				"productiveInputsFormId",
				(BiConsumer<ProductiveInputsForm, Long>)
					ProductiveInputsForm::setProductiveInputsFormId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ProductiveInputsForm, Long>)
					ProductiveInputsForm::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ProductiveInputsForm, Long>)
					ProductiveInputsForm::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ProductiveInputsForm, Long>)
					ProductiveInputsForm::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ProductiveInputsForm, Date>)
					ProductiveInputsForm::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ProductiveInputsForm, Date>)
					ProductiveInputsForm::setModifiedDate);
			attributeSetterBiConsumers.put(
				"categoryOfGoods",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setCategoryOfGoods);
			attributeSetterBiConsumers.put(
				"manufactureProducts",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setManufactureProducts);
			attributeSetterBiConsumers.put(
				"proposedProducts",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setProposedProducts);
			attributeSetterBiConsumers.put(
				"processType",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setProcessType);
			attributeSetterBiConsumers.put(
				"tariffCode",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setTariffCode);
			attributeSetterBiConsumers.put(
				"manufactureItem",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setManufactureItem);
			attributeSetterBiConsumers.put(
				"importedCaricom",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setImportedCaricom);
			attributeSetterBiConsumers.put(
				"rawMaterialPurchased",
				(BiConsumer<ProductiveInputsForm, String>)
					ProductiveInputsForm::setRawMaterialPurchased);
			attributeSetterBiConsumers.put(
				"manufacturingApplicationId",
				(BiConsumer<ProductiveInputsForm, Long>)
					ProductiveInputsForm::setManufacturingApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getProductiveInputsFormId() {
		return _productiveInputsFormId;
	}

	@Override
	public void setProductiveInputsFormId(long productiveInputsFormId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productiveInputsFormId = productiveInputsFormId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCategoryOfGoods() {
		if (_categoryOfGoods == null) {
			return "";
		}
		else {
			return _categoryOfGoods;
		}
	}

	@Override
	public void setCategoryOfGoods(String categoryOfGoods) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryOfGoods = categoryOfGoods;
	}

	@JSON
	@Override
	public String getManufactureProducts() {
		if (_manufactureProducts == null) {
			return "";
		}
		else {
			return _manufactureProducts;
		}
	}

	@Override
	public void setManufactureProducts(String manufactureProducts) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufactureProducts = manufactureProducts;
	}

	@JSON
	@Override
	public String getProposedProducts() {
		if (_proposedProducts == null) {
			return "";
		}
		else {
			return _proposedProducts;
		}
	}

	@Override
	public void setProposedProducts(String proposedProducts) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proposedProducts = proposedProducts;
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return "";
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processType = processType;
	}

	@JSON
	@Override
	public String getTariffCode() {
		if (_tariffCode == null) {
			return "";
		}
		else {
			return _tariffCode;
		}
	}

	@Override
	public void setTariffCode(String tariffCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tariffCode = tariffCode;
	}

	@JSON
	@Override
	public String getManufactureItem() {
		if (_manufactureItem == null) {
			return "";
		}
		else {
			return _manufactureItem;
		}
	}

	@Override
	public void setManufactureItem(String manufactureItem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufactureItem = manufactureItem;
	}

	@JSON
	@Override
	public String getImportedCaricom() {
		if (_importedCaricom == null) {
			return "";
		}
		else {
			return _importedCaricom;
		}
	}

	@Override
	public void setImportedCaricom(String importedCaricom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_importedCaricom = importedCaricom;
	}

	@JSON
	@Override
	public String getRawMaterialPurchased() {
		if (_rawMaterialPurchased == null) {
			return "";
		}
		else {
			return _rawMaterialPurchased;
		}
	}

	@Override
	public void setRawMaterialPurchased(String rawMaterialPurchased) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rawMaterialPurchased = rawMaterialPurchased;
	}

	@JSON
	@Override
	public long getManufacturingApplicationId() {
		return _manufacturingApplicationId;
	}

	@Override
	public void setManufacturingApplicationId(long manufacturingApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturingApplicationId = manufacturingApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalManufacturingApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ProductiveInputsForm.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductiveInputsForm toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductiveInputsForm>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductiveInputsFormImpl productiveInputsFormImpl =
			new ProductiveInputsFormImpl();

		productiveInputsFormImpl.setProductiveInputsFormId(
			getProductiveInputsFormId());
		productiveInputsFormImpl.setGroupId(getGroupId());
		productiveInputsFormImpl.setCompanyId(getCompanyId());
		productiveInputsFormImpl.setUserId(getUserId());
		productiveInputsFormImpl.setUserName(getUserName());
		productiveInputsFormImpl.setCreateDate(getCreateDate());
		productiveInputsFormImpl.setModifiedDate(getModifiedDate());
		productiveInputsFormImpl.setCategoryOfGoods(getCategoryOfGoods());
		productiveInputsFormImpl.setManufactureProducts(
			getManufactureProducts());
		productiveInputsFormImpl.setProposedProducts(getProposedProducts());
		productiveInputsFormImpl.setProcessType(getProcessType());
		productiveInputsFormImpl.setTariffCode(getTariffCode());
		productiveInputsFormImpl.setManufactureItem(getManufactureItem());
		productiveInputsFormImpl.setImportedCaricom(getImportedCaricom());
		productiveInputsFormImpl.setRawMaterialPurchased(
			getRawMaterialPurchased());
		productiveInputsFormImpl.setManufacturingApplicationId(
			getManufacturingApplicationId());

		productiveInputsFormImpl.resetOriginalValues();

		return productiveInputsFormImpl;
	}

	@Override
	public ProductiveInputsForm cloneWithOriginalValues() {
		ProductiveInputsFormImpl productiveInputsFormImpl =
			new ProductiveInputsFormImpl();

		productiveInputsFormImpl.setProductiveInputsFormId(
			this.<Long>getColumnOriginalValue("productiveInputsFormId"));
		productiveInputsFormImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		productiveInputsFormImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		productiveInputsFormImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		productiveInputsFormImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		productiveInputsFormImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		productiveInputsFormImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		productiveInputsFormImpl.setCategoryOfGoods(
			this.<String>getColumnOriginalValue("categoryOfGoods"));
		productiveInputsFormImpl.setManufactureProducts(
			this.<String>getColumnOriginalValue("manufactureProducts"));
		productiveInputsFormImpl.setProposedProducts(
			this.<String>getColumnOriginalValue("proposedProducts"));
		productiveInputsFormImpl.setProcessType(
			this.<String>getColumnOriginalValue("processType"));
		productiveInputsFormImpl.setTariffCode(
			this.<String>getColumnOriginalValue("tariffCode"));
		productiveInputsFormImpl.setManufactureItem(
			this.<String>getColumnOriginalValue("manufactureItem"));
		productiveInputsFormImpl.setImportedCaricom(
			this.<String>getColumnOriginalValue("importedCaricom"));
		productiveInputsFormImpl.setRawMaterialPurchased(
			this.<String>getColumnOriginalValue("rawMaterialPurchased"));
		productiveInputsFormImpl.setManufacturingApplicationId(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));

		return productiveInputsFormImpl;
	}

	@Override
	public int compareTo(ProductiveInputsForm productiveInputsForm) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), productiveInputsForm.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProductiveInputsForm)) {
			return false;
		}

		ProductiveInputsForm productiveInputsForm =
			(ProductiveInputsForm)object;

		long primaryKey = productiveInputsForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductiveInputsForm> toCacheModel() {
		ProductiveInputsFormCacheModel productiveInputsFormCacheModel =
			new ProductiveInputsFormCacheModel();

		productiveInputsFormCacheModel.productiveInputsFormId =
			getProductiveInputsFormId();

		productiveInputsFormCacheModel.groupId = getGroupId();

		productiveInputsFormCacheModel.companyId = getCompanyId();

		productiveInputsFormCacheModel.userId = getUserId();

		productiveInputsFormCacheModel.userName = getUserName();

		String userName = productiveInputsFormCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			productiveInputsFormCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			productiveInputsFormCacheModel.createDate = createDate.getTime();
		}
		else {
			productiveInputsFormCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productiveInputsFormCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			productiveInputsFormCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		productiveInputsFormCacheModel.categoryOfGoods = getCategoryOfGoods();

		String categoryOfGoods = productiveInputsFormCacheModel.categoryOfGoods;

		if ((categoryOfGoods != null) && (categoryOfGoods.length() == 0)) {
			productiveInputsFormCacheModel.categoryOfGoods = null;
		}

		productiveInputsFormCacheModel.manufactureProducts =
			getManufactureProducts();

		String manufactureProducts =
			productiveInputsFormCacheModel.manufactureProducts;

		if ((manufactureProducts != null) &&
			(manufactureProducts.length() == 0)) {

			productiveInputsFormCacheModel.manufactureProducts = null;
		}

		productiveInputsFormCacheModel.proposedProducts = getProposedProducts();

		String proposedProducts =
			productiveInputsFormCacheModel.proposedProducts;

		if ((proposedProducts != null) && (proposedProducts.length() == 0)) {
			productiveInputsFormCacheModel.proposedProducts = null;
		}

		productiveInputsFormCacheModel.processType = getProcessType();

		String processType = productiveInputsFormCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			productiveInputsFormCacheModel.processType = null;
		}

		productiveInputsFormCacheModel.tariffCode = getTariffCode();

		String tariffCode = productiveInputsFormCacheModel.tariffCode;

		if ((tariffCode != null) && (tariffCode.length() == 0)) {
			productiveInputsFormCacheModel.tariffCode = null;
		}

		productiveInputsFormCacheModel.manufactureItem = getManufactureItem();

		String manufactureItem = productiveInputsFormCacheModel.manufactureItem;

		if ((manufactureItem != null) && (manufactureItem.length() == 0)) {
			productiveInputsFormCacheModel.manufactureItem = null;
		}

		productiveInputsFormCacheModel.importedCaricom = getImportedCaricom();

		String importedCaricom = productiveInputsFormCacheModel.importedCaricom;

		if ((importedCaricom != null) && (importedCaricom.length() == 0)) {
			productiveInputsFormCacheModel.importedCaricom = null;
		}

		productiveInputsFormCacheModel.rawMaterialPurchased =
			getRawMaterialPurchased();

		String rawMaterialPurchased =
			productiveInputsFormCacheModel.rawMaterialPurchased;

		if ((rawMaterialPurchased != null) &&
			(rawMaterialPurchased.length() == 0)) {

			productiveInputsFormCacheModel.rawMaterialPurchased = null;
		}

		productiveInputsFormCacheModel.manufacturingApplicationId =
			getManufacturingApplicationId();

		return productiveInputsFormCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductiveInputsForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductiveInputsForm, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductiveInputsForm, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ProductiveInputsForm)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductiveInputsForm>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ProductiveInputsForm.class, ModelWrapper.class);

	}

	private long _productiveInputsFormId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _categoryOfGoods;
	private String _manufactureProducts;
	private String _proposedProducts;
	private String _processType;
	private String _tariffCode;
	private String _manufactureItem;
	private String _importedCaricom;
	private String _rawMaterialPurchased;
	private long _manufacturingApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<ProductiveInputsForm, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProductiveInputsForm)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"productiveInputsFormId", _productiveInputsFormId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("categoryOfGoods", _categoryOfGoods);
		_columnOriginalValues.put("manufactureProducts", _manufactureProducts);
		_columnOriginalValues.put("proposedProducts", _proposedProducts);
		_columnOriginalValues.put("processType", _processType);
		_columnOriginalValues.put("tariffCode", _tariffCode);
		_columnOriginalValues.put("manufactureItem", _manufactureItem);
		_columnOriginalValues.put("importedCaricom", _importedCaricom);
		_columnOriginalValues.put(
			"rawMaterialPurchased", _rawMaterialPurchased);
		_columnOriginalValues.put(
			"manufacturingApplicationId", _manufacturingApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("productiveInputsFormId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("categoryOfGoods", 128L);

		columnBitmasks.put("manufactureProducts", 256L);

		columnBitmasks.put("proposedProducts", 512L);

		columnBitmasks.put("processType", 1024L);

		columnBitmasks.put("tariffCode", 2048L);

		columnBitmasks.put("manufactureItem", 4096L);

		columnBitmasks.put("importedCaricom", 8192L);

		columnBitmasks.put("rawMaterialPurchased", 16384L);

		columnBitmasks.put("manufacturingApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProductiveInputsForm _escapedModel;

}