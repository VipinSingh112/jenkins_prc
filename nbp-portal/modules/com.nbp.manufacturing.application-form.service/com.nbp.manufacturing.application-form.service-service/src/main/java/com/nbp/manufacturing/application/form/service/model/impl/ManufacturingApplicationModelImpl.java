/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.manufacturing.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.manufacturing.application.form.service.model.ManufacturingApplication;
import com.nbp.manufacturing.application.form.service.model.ManufacturingApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ManufacturingApplication service. Represents a row in the &quot;nbp_manufacture_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ManufacturingApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManufacturingApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ManufacturingApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class ManufacturingApplicationModelImpl
	extends BaseModelImpl<ManufacturingApplication>
	implements ManufacturingApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manufacturing application model instance should use the <code>ManufacturingApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_manufacture_application";

	public static final Object[][] TABLE_COLUMNS = {
		{"manufacturingApplicationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"entityId", Types.VARCHAR},
		{"requestType", Types.VARCHAR}, {"licenseRequest", Types.VARCHAR},
		{"licenseCategory", Types.VARCHAR},
		{"licenseSubCategory", Types.VARCHAR}, {"parish", Types.VARCHAR},
		{"status", Types.INTEGER}, {"applicationNumber", Types.VARCHAR},
		{"expiredLicenseAppNumber", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"icmDocumentsPath", Types.VARCHAR}, {"pdfFileEntryId", Types.BIGINT},
		{"dateOfExpiration", Types.TIMESTAMP},
		{"appCurrentStageName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("manufacturingApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseSubCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredLicenseAppNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentsPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateOfExpiration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_manufacture_application (manufacturingApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityId VARCHAR(75) null,requestType VARCHAR(75) null,licenseRequest VARCHAR(75) null,licenseCategory VARCHAR(500) null,licenseSubCategory VARCHAR(800) null,parish VARCHAR(75) null,status INTEGER,applicationNumber VARCHAR(75) null,expiredLicenseAppNumber VARCHAR(75) null,caseId VARCHAR(500) null,icmDocumentsPath VARCHAR(500) null,pdfFileEntryId LONG,dateOfExpiration DATE null,appCurrentStageName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_manufacture_application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY manufacturingApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_manufacture_application.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPIREDLICENSEAPPNUMBER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LICENSEREQUEST_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ManufacturingApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _manufacturingApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setManufacturingApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _manufacturingApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ManufacturingApplication.class;
	}

	@Override
	public String getModelClassName() {
		return ManufacturingApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ManufacturingApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ManufacturingApplication, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManufacturingApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ManufacturingApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ManufacturingApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ManufacturingApplication, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ManufacturingApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ManufacturingApplication, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ManufacturingApplication, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<ManufacturingApplication, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<ManufacturingApplication, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ManufacturingApplication, Object>>();

			attributeGetterFunctions.put(
				"manufacturingApplicationId",
				ManufacturingApplication::getManufacturingApplicationId);
			attributeGetterFunctions.put(
				"groupId", ManufacturingApplication::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ManufacturingApplication::getCompanyId);
			attributeGetterFunctions.put(
				"userId", ManufacturingApplication::getUserId);
			attributeGetterFunctions.put(
				"userName", ManufacturingApplication::getUserName);
			attributeGetterFunctions.put(
				"createDate", ManufacturingApplication::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", ManufacturingApplication::getModifiedDate);
			attributeGetterFunctions.put(
				"entityId", ManufacturingApplication::getEntityId);
			attributeGetterFunctions.put(
				"requestType", ManufacturingApplication::getRequestType);
			attributeGetterFunctions.put(
				"licenseRequest", ManufacturingApplication::getLicenseRequest);
			attributeGetterFunctions.put(
				"licenseCategory",
				ManufacturingApplication::getLicenseCategory);
			attributeGetterFunctions.put(
				"licenseSubCategory",
				ManufacturingApplication::getLicenseSubCategory);
			attributeGetterFunctions.put(
				"parish", ManufacturingApplication::getParish);
			attributeGetterFunctions.put(
				"status", ManufacturingApplication::getStatus);
			attributeGetterFunctions.put(
				"applicationNumber",
				ManufacturingApplication::getApplicationNumber);
			attributeGetterFunctions.put(
				"expiredLicenseAppNumber",
				ManufacturingApplication::getExpiredLicenseAppNumber);
			attributeGetterFunctions.put(
				"caseId", ManufacturingApplication::getCaseId);
			attributeGetterFunctions.put(
				"icmDocumentsPath",
				ManufacturingApplication::getIcmDocumentsPath);
			attributeGetterFunctions.put(
				"pdfFileEntryId", ManufacturingApplication::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"dateOfExpiration",
				ManufacturingApplication::getDateOfExpiration);
			attributeGetterFunctions.put(
				"appCurrentStageName",
				ManufacturingApplication::getAppCurrentStageName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ManufacturingApplication, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ManufacturingApplication, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<ManufacturingApplication, ?>>();

			attributeSetterBiConsumers.put(
				"manufacturingApplicationId",
				(BiConsumer<ManufacturingApplication, Long>)
					ManufacturingApplication::setManufacturingApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ManufacturingApplication, Long>)
					ManufacturingApplication::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ManufacturingApplication, Long>)
					ManufacturingApplication::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ManufacturingApplication, Long>)
					ManufacturingApplication::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ManufacturingApplication, Date>)
					ManufacturingApplication::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ManufacturingApplication, Date>)
					ManufacturingApplication::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setEntityId);
			attributeSetterBiConsumers.put(
				"requestType",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setRequestType);
			attributeSetterBiConsumers.put(
				"licenseRequest",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setLicenseRequest);
			attributeSetterBiConsumers.put(
				"licenseCategory",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setLicenseCategory);
			attributeSetterBiConsumers.put(
				"licenseSubCategory",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setLicenseSubCategory);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setParish);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<ManufacturingApplication, Integer>)
					ManufacturingApplication::setStatus);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"expiredLicenseAppNumber",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setExpiredLicenseAppNumber);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setCaseId);
			attributeSetterBiConsumers.put(
				"icmDocumentsPath",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setIcmDocumentsPath);
			attributeSetterBiConsumers.put(
				"pdfFileEntryId",
				(BiConsumer<ManufacturingApplication, Long>)
					ManufacturingApplication::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"dateOfExpiration",
				(BiConsumer<ManufacturingApplication, Date>)
					ManufacturingApplication::setDateOfExpiration);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<ManufacturingApplication, String>)
					ManufacturingApplication::setAppCurrentStageName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getManufacturingApplicationId() {
		return _manufacturingApplicationId;
	}

	@Override
	public void setManufacturingApplicationId(long manufacturingApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturingApplicationId = manufacturingApplicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	@JSON
	@Override
	public String getRequestType() {
		if (_requestType == null) {
			return "";
		}
		else {
			return _requestType;
		}
	}

	@Override
	public void setRequestType(String requestType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestType = requestType;
	}

	@JSON
	@Override
	public String getLicenseRequest() {
		if (_licenseRequest == null) {
			return "";
		}
		else {
			return _licenseRequest;
		}
	}

	@Override
	public void setLicenseRequest(String licenseRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseRequest = licenseRequest;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLicenseRequest() {
		return getColumnOriginalValue("licenseRequest");
	}

	@JSON
	@Override
	public String getLicenseCategory() {
		if (_licenseCategory == null) {
			return "";
		}
		else {
			return _licenseCategory;
		}
	}

	@Override
	public void setLicenseCategory(String licenseCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseCategory = licenseCategory;
	}

	@JSON
	@Override
	public String getLicenseSubCategory() {
		if (_licenseSubCategory == null) {
			return "";
		}
		else {
			return _licenseSubCategory;
		}
	}

	@Override
	public void setLicenseSubCategory(String licenseSubCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseSubCategory = licenseSubCategory;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getExpiredLicenseAppNumber() {
		if (_expiredLicenseAppNumber == null) {
			return "";
		}
		else {
			return _expiredLicenseAppNumber;
		}
	}

	@Override
	public void setExpiredLicenseAppNumber(String expiredLicenseAppNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredLicenseAppNumber = expiredLicenseAppNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExpiredLicenseAppNumber() {
		return getColumnOriginalValue("expiredLicenseAppNumber");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getIcmDocumentsPath() {
		if (_icmDocumentsPath == null) {
			return "";
		}
		else {
			return _icmDocumentsPath;
		}
	}

	@Override
	public void setIcmDocumentsPath(String icmDocumentsPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentsPath = icmDocumentsPath;
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _pdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long pdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pdfFileEntryId = pdfFileEntryId;
	}

	@JSON
	@Override
	public Date getDateOfExpiration() {
		return _dateOfExpiration;
	}

	@Override
	public void setDateOfExpiration(Date dateOfExpiration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfExpiration = dateOfExpiration;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ManufacturingApplication.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ManufacturingApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ManufacturingApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManufacturingApplicationImpl manufacturingApplicationImpl =
			new ManufacturingApplicationImpl();

		manufacturingApplicationImpl.setManufacturingApplicationId(
			getManufacturingApplicationId());
		manufacturingApplicationImpl.setGroupId(getGroupId());
		manufacturingApplicationImpl.setCompanyId(getCompanyId());
		manufacturingApplicationImpl.setUserId(getUserId());
		manufacturingApplicationImpl.setUserName(getUserName());
		manufacturingApplicationImpl.setCreateDate(getCreateDate());
		manufacturingApplicationImpl.setModifiedDate(getModifiedDate());
		manufacturingApplicationImpl.setEntityId(getEntityId());
		manufacturingApplicationImpl.setRequestType(getRequestType());
		manufacturingApplicationImpl.setLicenseRequest(getLicenseRequest());
		manufacturingApplicationImpl.setLicenseCategory(getLicenseCategory());
		manufacturingApplicationImpl.setLicenseSubCategory(
			getLicenseSubCategory());
		manufacturingApplicationImpl.setParish(getParish());
		manufacturingApplicationImpl.setStatus(getStatus());
		manufacturingApplicationImpl.setApplicationNumber(
			getApplicationNumber());
		manufacturingApplicationImpl.setExpiredLicenseAppNumber(
			getExpiredLicenseAppNumber());
		manufacturingApplicationImpl.setCaseId(getCaseId());
		manufacturingApplicationImpl.setIcmDocumentsPath(getIcmDocumentsPath());
		manufacturingApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		manufacturingApplicationImpl.setDateOfExpiration(getDateOfExpiration());
		manufacturingApplicationImpl.setAppCurrentStageName(
			getAppCurrentStageName());

		manufacturingApplicationImpl.resetOriginalValues();

		return manufacturingApplicationImpl;
	}

	@Override
	public ManufacturingApplication cloneWithOriginalValues() {
		ManufacturingApplicationImpl manufacturingApplicationImpl =
			new ManufacturingApplicationImpl();

		manufacturingApplicationImpl.setManufacturingApplicationId(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));
		manufacturingApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		manufacturingApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		manufacturingApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		manufacturingApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		manufacturingApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		manufacturingApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		manufacturingApplicationImpl.setEntityId(
			this.<String>getColumnOriginalValue("entityId"));
		manufacturingApplicationImpl.setRequestType(
			this.<String>getColumnOriginalValue("requestType"));
		manufacturingApplicationImpl.setLicenseRequest(
			this.<String>getColumnOriginalValue("licenseRequest"));
		manufacturingApplicationImpl.setLicenseCategory(
			this.<String>getColumnOriginalValue("licenseCategory"));
		manufacturingApplicationImpl.setLicenseSubCategory(
			this.<String>getColumnOriginalValue("licenseSubCategory"));
		manufacturingApplicationImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		manufacturingApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		manufacturingApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		manufacturingApplicationImpl.setExpiredLicenseAppNumber(
			this.<String>getColumnOriginalValue("expiredLicenseAppNumber"));
		manufacturingApplicationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		manufacturingApplicationImpl.setIcmDocumentsPath(
			this.<String>getColumnOriginalValue("icmDocumentsPath"));
		manufacturingApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("pdfFileEntryId"));
		manufacturingApplicationImpl.setDateOfExpiration(
			this.<Date>getColumnOriginalValue("dateOfExpiration"));
		manufacturingApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));

		return manufacturingApplicationImpl;
	}

	@Override
	public int compareTo(ManufacturingApplication manufacturingApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), manufacturingApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ManufacturingApplication)) {
			return false;
		}

		ManufacturingApplication manufacturingApplication =
			(ManufacturingApplication)object;

		long primaryKey = manufacturingApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ManufacturingApplication> toCacheModel() {
		ManufacturingApplicationCacheModel manufacturingApplicationCacheModel =
			new ManufacturingApplicationCacheModel();

		manufacturingApplicationCacheModel.manufacturingApplicationId =
			getManufacturingApplicationId();

		manufacturingApplicationCacheModel.groupId = getGroupId();

		manufacturingApplicationCacheModel.companyId = getCompanyId();

		manufacturingApplicationCacheModel.userId = getUserId();

		manufacturingApplicationCacheModel.userName = getUserName();

		String userName = manufacturingApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			manufacturingApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			manufacturingApplicationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			manufacturingApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			manufacturingApplicationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			manufacturingApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		manufacturingApplicationCacheModel.entityId = getEntityId();

		String entityId = manufacturingApplicationCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			manufacturingApplicationCacheModel.entityId = null;
		}

		manufacturingApplicationCacheModel.requestType = getRequestType();

		String requestType = manufacturingApplicationCacheModel.requestType;

		if ((requestType != null) && (requestType.length() == 0)) {
			manufacturingApplicationCacheModel.requestType = null;
		}

		manufacturingApplicationCacheModel.licenseRequest = getLicenseRequest();

		String licenseRequest =
			manufacturingApplicationCacheModel.licenseRequest;

		if ((licenseRequest != null) && (licenseRequest.length() == 0)) {
			manufacturingApplicationCacheModel.licenseRequest = null;
		}

		manufacturingApplicationCacheModel.licenseCategory =
			getLicenseCategory();

		String licenseCategory =
			manufacturingApplicationCacheModel.licenseCategory;

		if ((licenseCategory != null) && (licenseCategory.length() == 0)) {
			manufacturingApplicationCacheModel.licenseCategory = null;
		}

		manufacturingApplicationCacheModel.licenseSubCategory =
			getLicenseSubCategory();

		String licenseSubCategory =
			manufacturingApplicationCacheModel.licenseSubCategory;

		if ((licenseSubCategory != null) &&
			(licenseSubCategory.length() == 0)) {

			manufacturingApplicationCacheModel.licenseSubCategory = null;
		}

		manufacturingApplicationCacheModel.parish = getParish();

		String parish = manufacturingApplicationCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			manufacturingApplicationCacheModel.parish = null;
		}

		manufacturingApplicationCacheModel.status = getStatus();

		manufacturingApplicationCacheModel.applicationNumber =
			getApplicationNumber();

		String applicationNumber =
			manufacturingApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			manufacturingApplicationCacheModel.applicationNumber = null;
		}

		manufacturingApplicationCacheModel.expiredLicenseAppNumber =
			getExpiredLicenseAppNumber();

		String expiredLicenseAppNumber =
			manufacturingApplicationCacheModel.expiredLicenseAppNumber;

		if ((expiredLicenseAppNumber != null) &&
			(expiredLicenseAppNumber.length() == 0)) {

			manufacturingApplicationCacheModel.expiredLicenseAppNumber = null;
		}

		manufacturingApplicationCacheModel.caseId = getCaseId();

		String caseId = manufacturingApplicationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			manufacturingApplicationCacheModel.caseId = null;
		}

		manufacturingApplicationCacheModel.icmDocumentsPath =
			getIcmDocumentsPath();

		String icmDocumentsPath =
			manufacturingApplicationCacheModel.icmDocumentsPath;

		if ((icmDocumentsPath != null) && (icmDocumentsPath.length() == 0)) {
			manufacturingApplicationCacheModel.icmDocumentsPath = null;
		}

		manufacturingApplicationCacheModel.pdfFileEntryId = getPdfFileEntryId();

		Date dateOfExpiration = getDateOfExpiration();

		if (dateOfExpiration != null) {
			manufacturingApplicationCacheModel.dateOfExpiration =
				dateOfExpiration.getTime();
		}
		else {
			manufacturingApplicationCacheModel.dateOfExpiration =
				Long.MIN_VALUE;
		}

		manufacturingApplicationCacheModel.appCurrentStageName =
			getAppCurrentStageName();

		String appCurrentStageName =
			manufacturingApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			manufacturingApplicationCacheModel.appCurrentStageName = null;
		}

		return manufacturingApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ManufacturingApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ManufacturingApplication, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManufacturingApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ManufacturingApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, ManufacturingApplication>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						ManufacturingApplication.class, ModelWrapper.class);

	}

	private long _manufacturingApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityId;
	private String _requestType;
	private String _licenseRequest;
	private String _licenseCategory;
	private String _licenseSubCategory;
	private String _parish;
	private int _status;
	private String _applicationNumber;
	private String _expiredLicenseAppNumber;
	private String _caseId;
	private String _icmDocumentsPath;
	private long _pdfFileEntryId;
	private Date _dateOfExpiration;
	private String _appCurrentStageName;

	public <T> T getColumnValue(String columnName) {
		Function<ManufacturingApplication, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ManufacturingApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"manufacturingApplicationId", _manufacturingApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("requestType", _requestType);
		_columnOriginalValues.put("licenseRequest", _licenseRequest);
		_columnOriginalValues.put("licenseCategory", _licenseCategory);
		_columnOriginalValues.put("licenseSubCategory", _licenseSubCategory);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"expiredLicenseAppNumber", _expiredLicenseAppNumber);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("icmDocumentsPath", _icmDocumentsPath);
		_columnOriginalValues.put("pdfFileEntryId", _pdfFileEntryId);
		_columnOriginalValues.put("dateOfExpiration", _dateOfExpiration);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("manufacturingApplicationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("entityId", 128L);

		columnBitmasks.put("requestType", 256L);

		columnBitmasks.put("licenseRequest", 512L);

		columnBitmasks.put("licenseCategory", 1024L);

		columnBitmasks.put("licenseSubCategory", 2048L);

		columnBitmasks.put("parish", 4096L);

		columnBitmasks.put("status", 8192L);

		columnBitmasks.put("applicationNumber", 16384L);

		columnBitmasks.put("expiredLicenseAppNumber", 32768L);

		columnBitmasks.put("caseId", 65536L);

		columnBitmasks.put("icmDocumentsPath", 131072L);

		columnBitmasks.put("pdfFileEntryId", 262144L);

		columnBitmasks.put("dateOfExpiration", 524288L);

		columnBitmasks.put("appCurrentStageName", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ManufacturingApplication _escapedModel;

}