/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.manufacturing.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.manufacturing.application.form.service.model.ProductiveInputsFormAdd;
import com.nbp.manufacturing.application.form.service.model.ProductiveInputsFormAddModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductiveInputsFormAdd service. Represents a row in the &quot;nbp_manu_pro_input_add&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductiveInputsFormAddModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductiveInputsFormAddImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductiveInputsFormAddImpl
 * @generated
 */
@JSON(strict = true)
public class ProductiveInputsFormAddModelImpl
	extends BaseModelImpl<ProductiveInputsFormAdd>
	implements ProductiveInputsFormAddModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a productive inputs form add model instance should use the <code>ProductiveInputsFormAdd</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_manu_pro_input_add";

	public static final Object[][] TABLE_COLUMNS = {
		{"productiveInputsFormAddId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"processType", Types.VARCHAR},
		{"tariffCode", Types.VARCHAR}, {"manufactureItem", Types.VARCHAR},
		{"importedCaricom", Types.VARCHAR}, {"counter", Types.VARCHAR},
		{"manufacturingApplicationId", Types.BIGINT},
		{"productiveInputsFormId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("productiveInputsFormAddId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("processType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tariffCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufactureItem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importedCaricom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturingApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productiveInputsFormId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_manu_pro_input_add (productiveInputsFormAddId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,processType VARCHAR(75) null,tariffCode VARCHAR(75) null,manufactureItem VARCHAR(75) null,importedCaricom VARCHAR(75) null,counter VARCHAR(75) null,manufacturingApplicationId LONG,productiveInputsFormId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_manu_pro_input_add";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productiveInputsFormAdd.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_manu_pro_input_add.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANUFACTURINGAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRODUCTIVEINPUTSFORMID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProductiveInputsFormAddModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _productiveInputsFormAddId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProductiveInputsFormAddId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _productiveInputsFormAddId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductiveInputsFormAdd.class;
	}

	@Override
	public String getModelClassName() {
		return ProductiveInputsFormAdd.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductiveInputsFormAdd, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductiveInputsFormAdd, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductiveInputsFormAdd, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductiveInputsFormAdd)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductiveInputsFormAdd, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductiveInputsFormAdd, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductiveInputsFormAdd)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductiveInputsFormAdd, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductiveInputsFormAdd, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<ProductiveInputsFormAdd, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<ProductiveInputsFormAdd, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ProductiveInputsFormAdd, Object>>();

			attributeGetterFunctions.put(
				"productiveInputsFormAddId",
				ProductiveInputsFormAdd::getProductiveInputsFormAddId);
			attributeGetterFunctions.put(
				"groupId", ProductiveInputsFormAdd::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ProductiveInputsFormAdd::getCompanyId);
			attributeGetterFunctions.put(
				"userId", ProductiveInputsFormAdd::getUserId);
			attributeGetterFunctions.put(
				"userName", ProductiveInputsFormAdd::getUserName);
			attributeGetterFunctions.put(
				"createDate", ProductiveInputsFormAdd::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", ProductiveInputsFormAdd::getModifiedDate);
			attributeGetterFunctions.put(
				"processType", ProductiveInputsFormAdd::getProcessType);
			attributeGetterFunctions.put(
				"tariffCode", ProductiveInputsFormAdd::getTariffCode);
			attributeGetterFunctions.put(
				"manufactureItem", ProductiveInputsFormAdd::getManufactureItem);
			attributeGetterFunctions.put(
				"importedCaricom", ProductiveInputsFormAdd::getImportedCaricom);
			attributeGetterFunctions.put(
				"counter", ProductiveInputsFormAdd::getCounter);
			attributeGetterFunctions.put(
				"manufacturingApplicationId",
				ProductiveInputsFormAdd::getManufacturingApplicationId);
			attributeGetterFunctions.put(
				"productiveInputsFormId",
				ProductiveInputsFormAdd::getProductiveInputsFormId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ProductiveInputsFormAdd, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ProductiveInputsFormAdd, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<ProductiveInputsFormAdd, ?>>();

			attributeSetterBiConsumers.put(
				"productiveInputsFormAddId",
				(BiConsumer<ProductiveInputsFormAdd, Long>)
					ProductiveInputsFormAdd::setProductiveInputsFormAddId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ProductiveInputsFormAdd, Long>)
					ProductiveInputsFormAdd::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ProductiveInputsFormAdd, Long>)
					ProductiveInputsFormAdd::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ProductiveInputsFormAdd, Long>)
					ProductiveInputsFormAdd::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ProductiveInputsFormAdd, String>)
					ProductiveInputsFormAdd::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ProductiveInputsFormAdd, Date>)
					ProductiveInputsFormAdd::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ProductiveInputsFormAdd, Date>)
					ProductiveInputsFormAdd::setModifiedDate);
			attributeSetterBiConsumers.put(
				"processType",
				(BiConsumer<ProductiveInputsFormAdd, String>)
					ProductiveInputsFormAdd::setProcessType);
			attributeSetterBiConsumers.put(
				"tariffCode",
				(BiConsumer<ProductiveInputsFormAdd, String>)
					ProductiveInputsFormAdd::setTariffCode);
			attributeSetterBiConsumers.put(
				"manufactureItem",
				(BiConsumer<ProductiveInputsFormAdd, String>)
					ProductiveInputsFormAdd::setManufactureItem);
			attributeSetterBiConsumers.put(
				"importedCaricom",
				(BiConsumer<ProductiveInputsFormAdd, String>)
					ProductiveInputsFormAdd::setImportedCaricom);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<ProductiveInputsFormAdd, String>)
					ProductiveInputsFormAdd::setCounter);
			attributeSetterBiConsumers.put(
				"manufacturingApplicationId",
				(BiConsumer<ProductiveInputsFormAdd, Long>)
					ProductiveInputsFormAdd::setManufacturingApplicationId);
			attributeSetterBiConsumers.put(
				"productiveInputsFormId",
				(BiConsumer<ProductiveInputsFormAdd, Long>)
					ProductiveInputsFormAdd::setProductiveInputsFormId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getProductiveInputsFormAddId() {
		return _productiveInputsFormAddId;
	}

	@Override
	public void setProductiveInputsFormAddId(long productiveInputsFormAddId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productiveInputsFormAddId = productiveInputsFormAddId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return "";
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processType = processType;
	}

	@JSON
	@Override
	public String getTariffCode() {
		if (_tariffCode == null) {
			return "";
		}
		else {
			return _tariffCode;
		}
	}

	@Override
	public void setTariffCode(String tariffCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tariffCode = tariffCode;
	}

	@JSON
	@Override
	public String getManufactureItem() {
		if (_manufactureItem == null) {
			return "";
		}
		else {
			return _manufactureItem;
		}
	}

	@Override
	public void setManufactureItem(String manufactureItem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufactureItem = manufactureItem;
	}

	@JSON
	@Override
	public String getImportedCaricom() {
		if (_importedCaricom == null) {
			return "";
		}
		else {
			return _importedCaricom;
		}
	}

	@Override
	public void setImportedCaricom(String importedCaricom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_importedCaricom = importedCaricom;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	@JSON
	@Override
	public long getManufacturingApplicationId() {
		return _manufacturingApplicationId;
	}

	@Override
	public void setManufacturingApplicationId(long manufacturingApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturingApplicationId = manufacturingApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalManufacturingApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));
	}

	@JSON
	@Override
	public long getProductiveInputsFormId() {
		return _productiveInputsFormId;
	}

	@Override
	public void setProductiveInputsFormId(long productiveInputsFormId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productiveInputsFormId = productiveInputsFormId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProductiveInputsFormId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("productiveInputsFormId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ProductiveInputsFormAdd.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductiveInputsFormAdd toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductiveInputsFormAdd>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductiveInputsFormAddImpl productiveInputsFormAddImpl =
			new ProductiveInputsFormAddImpl();

		productiveInputsFormAddImpl.setProductiveInputsFormAddId(
			getProductiveInputsFormAddId());
		productiveInputsFormAddImpl.setGroupId(getGroupId());
		productiveInputsFormAddImpl.setCompanyId(getCompanyId());
		productiveInputsFormAddImpl.setUserId(getUserId());
		productiveInputsFormAddImpl.setUserName(getUserName());
		productiveInputsFormAddImpl.setCreateDate(getCreateDate());
		productiveInputsFormAddImpl.setModifiedDate(getModifiedDate());
		productiveInputsFormAddImpl.setProcessType(getProcessType());
		productiveInputsFormAddImpl.setTariffCode(getTariffCode());
		productiveInputsFormAddImpl.setManufactureItem(getManufactureItem());
		productiveInputsFormAddImpl.setImportedCaricom(getImportedCaricom());
		productiveInputsFormAddImpl.setCounter(getCounter());
		productiveInputsFormAddImpl.setManufacturingApplicationId(
			getManufacturingApplicationId());
		productiveInputsFormAddImpl.setProductiveInputsFormId(
			getProductiveInputsFormId());

		productiveInputsFormAddImpl.resetOriginalValues();

		return productiveInputsFormAddImpl;
	}

	@Override
	public ProductiveInputsFormAdd cloneWithOriginalValues() {
		ProductiveInputsFormAddImpl productiveInputsFormAddImpl =
			new ProductiveInputsFormAddImpl();

		productiveInputsFormAddImpl.setProductiveInputsFormAddId(
			this.<Long>getColumnOriginalValue("productiveInputsFormAddId"));
		productiveInputsFormAddImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		productiveInputsFormAddImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		productiveInputsFormAddImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		productiveInputsFormAddImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		productiveInputsFormAddImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		productiveInputsFormAddImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		productiveInputsFormAddImpl.setProcessType(
			this.<String>getColumnOriginalValue("processType"));
		productiveInputsFormAddImpl.setTariffCode(
			this.<String>getColumnOriginalValue("tariffCode"));
		productiveInputsFormAddImpl.setManufactureItem(
			this.<String>getColumnOriginalValue("manufactureItem"));
		productiveInputsFormAddImpl.setImportedCaricom(
			this.<String>getColumnOriginalValue("importedCaricom"));
		productiveInputsFormAddImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));
		productiveInputsFormAddImpl.setManufacturingApplicationId(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));
		productiveInputsFormAddImpl.setProductiveInputsFormId(
			this.<Long>getColumnOriginalValue("productiveInputsFormId"));

		return productiveInputsFormAddImpl;
	}

	@Override
	public int compareTo(ProductiveInputsFormAdd productiveInputsFormAdd) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), productiveInputsFormAdd.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProductiveInputsFormAdd)) {
			return false;
		}

		ProductiveInputsFormAdd productiveInputsFormAdd =
			(ProductiveInputsFormAdd)object;

		long primaryKey = productiveInputsFormAdd.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductiveInputsFormAdd> toCacheModel() {
		ProductiveInputsFormAddCacheModel productiveInputsFormAddCacheModel =
			new ProductiveInputsFormAddCacheModel();

		productiveInputsFormAddCacheModel.productiveInputsFormAddId =
			getProductiveInputsFormAddId();

		productiveInputsFormAddCacheModel.groupId = getGroupId();

		productiveInputsFormAddCacheModel.companyId = getCompanyId();

		productiveInputsFormAddCacheModel.userId = getUserId();

		productiveInputsFormAddCacheModel.userName = getUserName();

		String userName = productiveInputsFormAddCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			productiveInputsFormAddCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			productiveInputsFormAddCacheModel.createDate = createDate.getTime();
		}
		else {
			productiveInputsFormAddCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productiveInputsFormAddCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			productiveInputsFormAddCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		productiveInputsFormAddCacheModel.processType = getProcessType();

		String processType = productiveInputsFormAddCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			productiveInputsFormAddCacheModel.processType = null;
		}

		productiveInputsFormAddCacheModel.tariffCode = getTariffCode();

		String tariffCode = productiveInputsFormAddCacheModel.tariffCode;

		if ((tariffCode != null) && (tariffCode.length() == 0)) {
			productiveInputsFormAddCacheModel.tariffCode = null;
		}

		productiveInputsFormAddCacheModel.manufactureItem =
			getManufactureItem();

		String manufactureItem =
			productiveInputsFormAddCacheModel.manufactureItem;

		if ((manufactureItem != null) && (manufactureItem.length() == 0)) {
			productiveInputsFormAddCacheModel.manufactureItem = null;
		}

		productiveInputsFormAddCacheModel.importedCaricom =
			getImportedCaricom();

		String importedCaricom =
			productiveInputsFormAddCacheModel.importedCaricom;

		if ((importedCaricom != null) && (importedCaricom.length() == 0)) {
			productiveInputsFormAddCacheModel.importedCaricom = null;
		}

		productiveInputsFormAddCacheModel.counter = getCounter();

		String counter = productiveInputsFormAddCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			productiveInputsFormAddCacheModel.counter = null;
		}

		productiveInputsFormAddCacheModel.manufacturingApplicationId =
			getManufacturingApplicationId();

		productiveInputsFormAddCacheModel.productiveInputsFormId =
			getProductiveInputsFormId();

		return productiveInputsFormAddCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductiveInputsFormAdd, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductiveInputsFormAdd, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductiveInputsFormAdd, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ProductiveInputsFormAdd)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, ProductiveInputsFormAdd>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						ProductiveInputsFormAdd.class, ModelWrapper.class);

	}

	private long _productiveInputsFormAddId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _processType;
	private String _tariffCode;
	private String _manufactureItem;
	private String _importedCaricom;
	private String _counter;
	private long _manufacturingApplicationId;
	private long _productiveInputsFormId;

	public <T> T getColumnValue(String columnName) {
		Function<ProductiveInputsFormAdd, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProductiveInputsFormAdd)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"productiveInputsFormAddId", _productiveInputsFormAddId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("processType", _processType);
		_columnOriginalValues.put("tariffCode", _tariffCode);
		_columnOriginalValues.put("manufactureItem", _manufactureItem);
		_columnOriginalValues.put("importedCaricom", _importedCaricom);
		_columnOriginalValues.put("counter", _counter);
		_columnOriginalValues.put(
			"manufacturingApplicationId", _manufacturingApplicationId);
		_columnOriginalValues.put(
			"productiveInputsFormId", _productiveInputsFormId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("productiveInputsFormAddId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("processType", 128L);

		columnBitmasks.put("tariffCode", 256L);

		columnBitmasks.put("manufactureItem", 512L);

		columnBitmasks.put("importedCaricom", 1024L);

		columnBitmasks.put("counter", 2048L);

		columnBitmasks.put("manufacturingApplicationId", 4096L);

		columnBitmasks.put("productiveInputsFormId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProductiveInputsFormAdd _escapedModel;

}