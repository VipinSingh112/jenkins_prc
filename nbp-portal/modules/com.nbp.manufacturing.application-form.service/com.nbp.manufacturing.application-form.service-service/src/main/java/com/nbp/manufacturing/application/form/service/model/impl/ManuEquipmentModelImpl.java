/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.manufacturing.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.manufacturing.application.form.service.model.ManuEquipment;
import com.nbp.manufacturing.application.form.service.model.ManuEquipmentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ManuEquipment service. Represents a row in the &quot;nbp_manufacture_equipment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ManuEquipmentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManuEquipmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ManuEquipmentImpl
 * @generated
 */
@JSON(strict = true)
public class ManuEquipmentModelImpl
	extends BaseModelImpl<ManuEquipment> implements ManuEquipmentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manu equipment model instance should use the <code>ManuEquipment</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_manufacture_equipment";

	public static final Object[][] TABLE_COLUMNS = {
		{"manuEquipmentId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"equipmentImported", Types.VARCHAR},
		{"land", Types.VARCHAR}, {"equipment", Types.VARCHAR},
		{"building", Types.VARCHAR}, {"Other", Types.VARCHAR},
		{"equipmentName", Types.VARCHAR}, {"jamaicanDollor", Types.VARCHAR},
		{"capitalExpenditure", Types.VARCHAR}, {"nameOFPurpose", Types.VARCHAR},
		{"equipmentMaintained", Types.VARCHAR},
		{"equipmentCreated", Types.VARCHAR}, {"skilledEmp", Types.VARCHAR},
		{"clericalEmp", Types.VARCHAR}, {"otherEmp", Types.VARCHAR},
		{"totalEmp", Types.VARCHAR},
		{"manufacturingApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("manuEquipmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("equipmentImported", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("land", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("building", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Other", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jamaicanDollor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capitalExpenditure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOFPurpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentMaintained", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentCreated", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skilledEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clericalEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalEmp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturingApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_manufacture_equipment (manuEquipmentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,equipmentImported VARCHAR(500) null,land VARCHAR(75) null,equipment VARCHAR(75) null,building VARCHAR(75) null,Other VARCHAR(75) null,equipmentName VARCHAR(500) null,jamaicanDollor VARCHAR(75) null,capitalExpenditure VARCHAR(75) null,nameOFPurpose VARCHAR(75) null,equipmentMaintained VARCHAR(75) null,equipmentCreated VARCHAR(75) null,skilledEmp VARCHAR(75) null,clericalEmp VARCHAR(75) null,otherEmp VARCHAR(75) null,totalEmp VARCHAR(75) null,manufacturingApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_manufacture_equipment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY manuEquipment.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_manufacture_equipment.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANUFACTURINGAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ManuEquipmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _manuEquipmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setManuEquipmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _manuEquipmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ManuEquipment.class;
	}

	@Override
	public String getModelClassName() {
		return ManuEquipment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ManuEquipment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ManuEquipment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManuEquipment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ManuEquipment)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ManuEquipment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ManuEquipment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ManuEquipment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ManuEquipment, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ManuEquipment, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<ManuEquipment, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<ManuEquipment, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ManuEquipment, Object>>();

			attributeGetterFunctions.put(
				"manuEquipmentId", ManuEquipment::getManuEquipmentId);
			attributeGetterFunctions.put("groupId", ManuEquipment::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ManuEquipment::getCompanyId);
			attributeGetterFunctions.put("userId", ManuEquipment::getUserId);
			attributeGetterFunctions.put(
				"userName", ManuEquipment::getUserName);
			attributeGetterFunctions.put(
				"createDate", ManuEquipment::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", ManuEquipment::getModifiedDate);
			attributeGetterFunctions.put(
				"equipmentImported", ManuEquipment::getEquipmentImported);
			attributeGetterFunctions.put("land", ManuEquipment::getLand);
			attributeGetterFunctions.put(
				"equipment", ManuEquipment::getEquipment);
			attributeGetterFunctions.put(
				"building", ManuEquipment::getBuilding);
			attributeGetterFunctions.put("Other", ManuEquipment::getOther);
			attributeGetterFunctions.put(
				"equipmentName", ManuEquipment::getEquipmentName);
			attributeGetterFunctions.put(
				"jamaicanDollor", ManuEquipment::getJamaicanDollor);
			attributeGetterFunctions.put(
				"capitalExpenditure", ManuEquipment::getCapitalExpenditure);
			attributeGetterFunctions.put(
				"nameOFPurpose", ManuEquipment::getNameOFPurpose);
			attributeGetterFunctions.put(
				"equipmentMaintained", ManuEquipment::getEquipmentMaintained);
			attributeGetterFunctions.put(
				"equipmentCreated", ManuEquipment::getEquipmentCreated);
			attributeGetterFunctions.put(
				"skilledEmp", ManuEquipment::getSkilledEmp);
			attributeGetterFunctions.put(
				"clericalEmp", ManuEquipment::getClericalEmp);
			attributeGetterFunctions.put(
				"otherEmp", ManuEquipment::getOtherEmp);
			attributeGetterFunctions.put(
				"totalEmp", ManuEquipment::getTotalEmp);
			attributeGetterFunctions.put(
				"manufacturingApplicationId",
				ManuEquipment::getManufacturingApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<ManuEquipment, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ManuEquipment, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<ManuEquipment, ?>>();

			attributeSetterBiConsumers.put(
				"manuEquipmentId",
				(BiConsumer<ManuEquipment, Long>)
					ManuEquipment::setManuEquipmentId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ManuEquipment, Long>)ManuEquipment::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ManuEquipment, Long>)ManuEquipment::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ManuEquipment, Long>)ManuEquipment::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ManuEquipment, String>)ManuEquipment::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ManuEquipment, Date>)ManuEquipment::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ManuEquipment, Date>)
					ManuEquipment::setModifiedDate);
			attributeSetterBiConsumers.put(
				"equipmentImported",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setEquipmentImported);
			attributeSetterBiConsumers.put(
				"land",
				(BiConsumer<ManuEquipment, String>)ManuEquipment::setLand);
			attributeSetterBiConsumers.put(
				"equipment",
				(BiConsumer<ManuEquipment, String>)ManuEquipment::setEquipment);
			attributeSetterBiConsumers.put(
				"building",
				(BiConsumer<ManuEquipment, String>)ManuEquipment::setBuilding);
			attributeSetterBiConsumers.put(
				"Other",
				(BiConsumer<ManuEquipment, String>)ManuEquipment::setOther);
			attributeSetterBiConsumers.put(
				"equipmentName",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setEquipmentName);
			attributeSetterBiConsumers.put(
				"jamaicanDollor",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setJamaicanDollor);
			attributeSetterBiConsumers.put(
				"capitalExpenditure",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setCapitalExpenditure);
			attributeSetterBiConsumers.put(
				"nameOFPurpose",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setNameOFPurpose);
			attributeSetterBiConsumers.put(
				"equipmentMaintained",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setEquipmentMaintained);
			attributeSetterBiConsumers.put(
				"equipmentCreated",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setEquipmentCreated);
			attributeSetterBiConsumers.put(
				"skilledEmp",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setSkilledEmp);
			attributeSetterBiConsumers.put(
				"clericalEmp",
				(BiConsumer<ManuEquipment, String>)
					ManuEquipment::setClericalEmp);
			attributeSetterBiConsumers.put(
				"otherEmp",
				(BiConsumer<ManuEquipment, String>)ManuEquipment::setOtherEmp);
			attributeSetterBiConsumers.put(
				"totalEmp",
				(BiConsumer<ManuEquipment, String>)ManuEquipment::setTotalEmp);
			attributeSetterBiConsumers.put(
				"manufacturingApplicationId",
				(BiConsumer<ManuEquipment, Long>)
					ManuEquipment::setManufacturingApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getManuEquipmentId() {
		return _manuEquipmentId;
	}

	@Override
	public void setManuEquipmentId(long manuEquipmentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manuEquipmentId = manuEquipmentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEquipmentImported() {
		if (_equipmentImported == null) {
			return "";
		}
		else {
			return _equipmentImported;
		}
	}

	@Override
	public void setEquipmentImported(String equipmentImported) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentImported = equipmentImported;
	}

	@JSON
	@Override
	public String getLand() {
		if (_land == null) {
			return "";
		}
		else {
			return _land;
		}
	}

	@Override
	public void setLand(String land) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_land = land;
	}

	@JSON
	@Override
	public String getEquipment() {
		if (_equipment == null) {
			return "";
		}
		else {
			return _equipment;
		}
	}

	@Override
	public void setEquipment(String equipment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipment = equipment;
	}

	@JSON
	@Override
	public String getBuilding() {
		if (_building == null) {
			return "";
		}
		else {
			return _building;
		}
	}

	@Override
	public void setBuilding(String building) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_building = building;
	}

	@JSON
	@Override
	public String getOther() {
		if (_Other == null) {
			return "";
		}
		else {
			return _Other;
		}
	}

	@Override
	public void setOther(String Other) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Other = Other;
	}

	@JSON
	@Override
	public String getEquipmentName() {
		if (_equipmentName == null) {
			return "";
		}
		else {
			return _equipmentName;
		}
	}

	@Override
	public void setEquipmentName(String equipmentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentName = equipmentName;
	}

	@JSON
	@Override
	public String getJamaicanDollor() {
		if (_jamaicanDollor == null) {
			return "";
		}
		else {
			return _jamaicanDollor;
		}
	}

	@Override
	public void setJamaicanDollor(String jamaicanDollor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jamaicanDollor = jamaicanDollor;
	}

	@JSON
	@Override
	public String getCapitalExpenditure() {
		if (_capitalExpenditure == null) {
			return "";
		}
		else {
			return _capitalExpenditure;
		}
	}

	@Override
	public void setCapitalExpenditure(String capitalExpenditure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capitalExpenditure = capitalExpenditure;
	}

	@JSON
	@Override
	public String getNameOFPurpose() {
		if (_nameOFPurpose == null) {
			return "";
		}
		else {
			return _nameOFPurpose;
		}
	}

	@Override
	public void setNameOFPurpose(String nameOFPurpose) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOFPurpose = nameOFPurpose;
	}

	@JSON
	@Override
	public String getEquipmentMaintained() {
		if (_equipmentMaintained == null) {
			return "";
		}
		else {
			return _equipmentMaintained;
		}
	}

	@Override
	public void setEquipmentMaintained(String equipmentMaintained) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentMaintained = equipmentMaintained;
	}

	@JSON
	@Override
	public String getEquipmentCreated() {
		if (_equipmentCreated == null) {
			return "";
		}
		else {
			return _equipmentCreated;
		}
	}

	@Override
	public void setEquipmentCreated(String equipmentCreated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentCreated = equipmentCreated;
	}

	@JSON
	@Override
	public String getSkilledEmp() {
		if (_skilledEmp == null) {
			return "";
		}
		else {
			return _skilledEmp;
		}
	}

	@Override
	public void setSkilledEmp(String skilledEmp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skilledEmp = skilledEmp;
	}

	@JSON
	@Override
	public String getClericalEmp() {
		if (_clericalEmp == null) {
			return "";
		}
		else {
			return _clericalEmp;
		}
	}

	@Override
	public void setClericalEmp(String clericalEmp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_clericalEmp = clericalEmp;
	}

	@JSON
	@Override
	public String getOtherEmp() {
		if (_otherEmp == null) {
			return "";
		}
		else {
			return _otherEmp;
		}
	}

	@Override
	public void setOtherEmp(String otherEmp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherEmp = otherEmp;
	}

	@JSON
	@Override
	public String getTotalEmp() {
		if (_totalEmp == null) {
			return "";
		}
		else {
			return _totalEmp;
		}
	}

	@Override
	public void setTotalEmp(String totalEmp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalEmp = totalEmp;
	}

	@JSON
	@Override
	public long getManufacturingApplicationId() {
		return _manufacturingApplicationId;
	}

	@Override
	public void setManufacturingApplicationId(long manufacturingApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturingApplicationId = manufacturingApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalManufacturingApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ManuEquipment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ManuEquipment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ManuEquipment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManuEquipmentImpl manuEquipmentImpl = new ManuEquipmentImpl();

		manuEquipmentImpl.setManuEquipmentId(getManuEquipmentId());
		manuEquipmentImpl.setGroupId(getGroupId());
		manuEquipmentImpl.setCompanyId(getCompanyId());
		manuEquipmentImpl.setUserId(getUserId());
		manuEquipmentImpl.setUserName(getUserName());
		manuEquipmentImpl.setCreateDate(getCreateDate());
		manuEquipmentImpl.setModifiedDate(getModifiedDate());
		manuEquipmentImpl.setEquipmentImported(getEquipmentImported());
		manuEquipmentImpl.setLand(getLand());
		manuEquipmentImpl.setEquipment(getEquipment());
		manuEquipmentImpl.setBuilding(getBuilding());
		manuEquipmentImpl.setOther(getOther());
		manuEquipmentImpl.setEquipmentName(getEquipmentName());
		manuEquipmentImpl.setJamaicanDollor(getJamaicanDollor());
		manuEquipmentImpl.setCapitalExpenditure(getCapitalExpenditure());
		manuEquipmentImpl.setNameOFPurpose(getNameOFPurpose());
		manuEquipmentImpl.setEquipmentMaintained(getEquipmentMaintained());
		manuEquipmentImpl.setEquipmentCreated(getEquipmentCreated());
		manuEquipmentImpl.setSkilledEmp(getSkilledEmp());
		manuEquipmentImpl.setClericalEmp(getClericalEmp());
		manuEquipmentImpl.setOtherEmp(getOtherEmp());
		manuEquipmentImpl.setTotalEmp(getTotalEmp());
		manuEquipmentImpl.setManufacturingApplicationId(
			getManufacturingApplicationId());

		manuEquipmentImpl.resetOriginalValues();

		return manuEquipmentImpl;
	}

	@Override
	public ManuEquipment cloneWithOriginalValues() {
		ManuEquipmentImpl manuEquipmentImpl = new ManuEquipmentImpl();

		manuEquipmentImpl.setManuEquipmentId(
			this.<Long>getColumnOriginalValue("manuEquipmentId"));
		manuEquipmentImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		manuEquipmentImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		manuEquipmentImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		manuEquipmentImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		manuEquipmentImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		manuEquipmentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		manuEquipmentImpl.setEquipmentImported(
			this.<String>getColumnOriginalValue("equipmentImported"));
		manuEquipmentImpl.setLand(this.<String>getColumnOriginalValue("land"));
		manuEquipmentImpl.setEquipment(
			this.<String>getColumnOriginalValue("equipment"));
		manuEquipmentImpl.setBuilding(
			this.<String>getColumnOriginalValue("building"));
		manuEquipmentImpl.setOther(
			this.<String>getColumnOriginalValue("Other"));
		manuEquipmentImpl.setEquipmentName(
			this.<String>getColumnOriginalValue("equipmentName"));
		manuEquipmentImpl.setJamaicanDollor(
			this.<String>getColumnOriginalValue("jamaicanDollor"));
		manuEquipmentImpl.setCapitalExpenditure(
			this.<String>getColumnOriginalValue("capitalExpenditure"));
		manuEquipmentImpl.setNameOFPurpose(
			this.<String>getColumnOriginalValue("nameOFPurpose"));
		manuEquipmentImpl.setEquipmentMaintained(
			this.<String>getColumnOriginalValue("equipmentMaintained"));
		manuEquipmentImpl.setEquipmentCreated(
			this.<String>getColumnOriginalValue("equipmentCreated"));
		manuEquipmentImpl.setSkilledEmp(
			this.<String>getColumnOriginalValue("skilledEmp"));
		manuEquipmentImpl.setClericalEmp(
			this.<String>getColumnOriginalValue("clericalEmp"));
		manuEquipmentImpl.setOtherEmp(
			this.<String>getColumnOriginalValue("otherEmp"));
		manuEquipmentImpl.setTotalEmp(
			this.<String>getColumnOriginalValue("totalEmp"));
		manuEquipmentImpl.setManufacturingApplicationId(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));

		return manuEquipmentImpl;
	}

	@Override
	public int compareTo(ManuEquipment manuEquipment) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), manuEquipment.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ManuEquipment)) {
			return false;
		}

		ManuEquipment manuEquipment = (ManuEquipment)object;

		long primaryKey = manuEquipment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ManuEquipment> toCacheModel() {
		ManuEquipmentCacheModel manuEquipmentCacheModel =
			new ManuEquipmentCacheModel();

		manuEquipmentCacheModel.manuEquipmentId = getManuEquipmentId();

		manuEquipmentCacheModel.groupId = getGroupId();

		manuEquipmentCacheModel.companyId = getCompanyId();

		manuEquipmentCacheModel.userId = getUserId();

		manuEquipmentCacheModel.userName = getUserName();

		String userName = manuEquipmentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			manuEquipmentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			manuEquipmentCacheModel.createDate = createDate.getTime();
		}
		else {
			manuEquipmentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			manuEquipmentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			manuEquipmentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		manuEquipmentCacheModel.equipmentImported = getEquipmentImported();

		String equipmentImported = manuEquipmentCacheModel.equipmentImported;

		if ((equipmentImported != null) && (equipmentImported.length() == 0)) {
			manuEquipmentCacheModel.equipmentImported = null;
		}

		manuEquipmentCacheModel.land = getLand();

		String land = manuEquipmentCacheModel.land;

		if ((land != null) && (land.length() == 0)) {
			manuEquipmentCacheModel.land = null;
		}

		manuEquipmentCacheModel.equipment = getEquipment();

		String equipment = manuEquipmentCacheModel.equipment;

		if ((equipment != null) && (equipment.length() == 0)) {
			manuEquipmentCacheModel.equipment = null;
		}

		manuEquipmentCacheModel.building = getBuilding();

		String building = manuEquipmentCacheModel.building;

		if ((building != null) && (building.length() == 0)) {
			manuEquipmentCacheModel.building = null;
		}

		manuEquipmentCacheModel.Other = getOther();

		String Other = manuEquipmentCacheModel.Other;

		if ((Other != null) && (Other.length() == 0)) {
			manuEquipmentCacheModel.Other = null;
		}

		manuEquipmentCacheModel.equipmentName = getEquipmentName();

		String equipmentName = manuEquipmentCacheModel.equipmentName;

		if ((equipmentName != null) && (equipmentName.length() == 0)) {
			manuEquipmentCacheModel.equipmentName = null;
		}

		manuEquipmentCacheModel.jamaicanDollor = getJamaicanDollor();

		String jamaicanDollor = manuEquipmentCacheModel.jamaicanDollor;

		if ((jamaicanDollor != null) && (jamaicanDollor.length() == 0)) {
			manuEquipmentCacheModel.jamaicanDollor = null;
		}

		manuEquipmentCacheModel.capitalExpenditure = getCapitalExpenditure();

		String capitalExpenditure = manuEquipmentCacheModel.capitalExpenditure;

		if ((capitalExpenditure != null) &&
			(capitalExpenditure.length() == 0)) {

			manuEquipmentCacheModel.capitalExpenditure = null;
		}

		manuEquipmentCacheModel.nameOFPurpose = getNameOFPurpose();

		String nameOFPurpose = manuEquipmentCacheModel.nameOFPurpose;

		if ((nameOFPurpose != null) && (nameOFPurpose.length() == 0)) {
			manuEquipmentCacheModel.nameOFPurpose = null;
		}

		manuEquipmentCacheModel.equipmentMaintained = getEquipmentMaintained();

		String equipmentMaintained =
			manuEquipmentCacheModel.equipmentMaintained;

		if ((equipmentMaintained != null) &&
			(equipmentMaintained.length() == 0)) {

			manuEquipmentCacheModel.equipmentMaintained = null;
		}

		manuEquipmentCacheModel.equipmentCreated = getEquipmentCreated();

		String equipmentCreated = manuEquipmentCacheModel.equipmentCreated;

		if ((equipmentCreated != null) && (equipmentCreated.length() == 0)) {
			manuEquipmentCacheModel.equipmentCreated = null;
		}

		manuEquipmentCacheModel.skilledEmp = getSkilledEmp();

		String skilledEmp = manuEquipmentCacheModel.skilledEmp;

		if ((skilledEmp != null) && (skilledEmp.length() == 0)) {
			manuEquipmentCacheModel.skilledEmp = null;
		}

		manuEquipmentCacheModel.clericalEmp = getClericalEmp();

		String clericalEmp = manuEquipmentCacheModel.clericalEmp;

		if ((clericalEmp != null) && (clericalEmp.length() == 0)) {
			manuEquipmentCacheModel.clericalEmp = null;
		}

		manuEquipmentCacheModel.otherEmp = getOtherEmp();

		String otherEmp = manuEquipmentCacheModel.otherEmp;

		if ((otherEmp != null) && (otherEmp.length() == 0)) {
			manuEquipmentCacheModel.otherEmp = null;
		}

		manuEquipmentCacheModel.totalEmp = getTotalEmp();

		String totalEmp = manuEquipmentCacheModel.totalEmp;

		if ((totalEmp != null) && (totalEmp.length() == 0)) {
			manuEquipmentCacheModel.totalEmp = null;
		}

		manuEquipmentCacheModel.manufacturingApplicationId =
			getManufacturingApplicationId();

		return manuEquipmentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ManuEquipment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ManuEquipment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManuEquipment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ManuEquipment)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ManuEquipment>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ManuEquipment.class, ModelWrapper.class);

	}

	private long _manuEquipmentId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _equipmentImported;
	private String _land;
	private String _equipment;
	private String _building;
	private String _Other;
	private String _equipmentName;
	private String _jamaicanDollor;
	private String _capitalExpenditure;
	private String _nameOFPurpose;
	private String _equipmentMaintained;
	private String _equipmentCreated;
	private String _skilledEmp;
	private String _clericalEmp;
	private String _otherEmp;
	private String _totalEmp;
	private long _manufacturingApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<ManuEquipment, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ManuEquipment)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("manuEquipmentId", _manuEquipmentId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("equipmentImported", _equipmentImported);
		_columnOriginalValues.put("land", _land);
		_columnOriginalValues.put("equipment", _equipment);
		_columnOriginalValues.put("building", _building);
		_columnOriginalValues.put("Other", _Other);
		_columnOriginalValues.put("equipmentName", _equipmentName);
		_columnOriginalValues.put("jamaicanDollor", _jamaicanDollor);
		_columnOriginalValues.put("capitalExpenditure", _capitalExpenditure);
		_columnOriginalValues.put("nameOFPurpose", _nameOFPurpose);
		_columnOriginalValues.put("equipmentMaintained", _equipmentMaintained);
		_columnOriginalValues.put("equipmentCreated", _equipmentCreated);
		_columnOriginalValues.put("skilledEmp", _skilledEmp);
		_columnOriginalValues.put("clericalEmp", _clericalEmp);
		_columnOriginalValues.put("otherEmp", _otherEmp);
		_columnOriginalValues.put("totalEmp", _totalEmp);
		_columnOriginalValues.put(
			"manufacturingApplicationId", _manufacturingApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("manuEquipmentId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("equipmentImported", 128L);

		columnBitmasks.put("land", 256L);

		columnBitmasks.put("equipment", 512L);

		columnBitmasks.put("building", 1024L);

		columnBitmasks.put("Other", 2048L);

		columnBitmasks.put("equipmentName", 4096L);

		columnBitmasks.put("jamaicanDollor", 8192L);

		columnBitmasks.put("capitalExpenditure", 16384L);

		columnBitmasks.put("nameOFPurpose", 32768L);

		columnBitmasks.put("equipmentMaintained", 65536L);

		columnBitmasks.put("equipmentCreated", 131072L);

		columnBitmasks.put("skilledEmp", 262144L);

		columnBitmasks.put("clericalEmp", 524288L);

		columnBitmasks.put("otherEmp", 1048576L);

		columnBitmasks.put("totalEmp", 2097152L);

		columnBitmasks.put("manufacturingApplicationId", 4194304L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ManuEquipment _escapedModel;

}