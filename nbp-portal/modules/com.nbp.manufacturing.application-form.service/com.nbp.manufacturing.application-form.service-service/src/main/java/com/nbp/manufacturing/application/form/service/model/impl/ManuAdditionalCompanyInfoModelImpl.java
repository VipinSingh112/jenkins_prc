/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.manufacturing.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.manufacturing.application.form.service.model.ManuAdditionalCompanyInfo;
import com.nbp.manufacturing.application.form.service.model.ManuAdditionalCompanyInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ManuAdditionalCompanyInfo service. Represents a row in the &quot;nbp_manufacture_add_comp_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ManuAdditionalCompanyInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManuAdditionalCompanyInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ManuAdditionalCompanyInfoImpl
 * @generated
 */
@JSON(strict = true)
public class ManuAdditionalCompanyInfoModelImpl
	extends BaseModelImpl<ManuAdditionalCompanyInfo>
	implements ManuAdditionalCompanyInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manu additional company info model instance should use the <code>ManuAdditionalCompanyInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_manufacture_add_comp_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"manuAdditionalCompanyInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"companyNameRepresentative", Types.VARCHAR},
		{"companySignatureRepresentative", Types.VARCHAR},
		{"signatureDate", Types.TIMESTAMP}, {"customBrokerName", Types.VARCHAR},
		{"customBrokerAddress", Types.VARCHAR},
		{"telephoneNumber", Types.VARCHAR}, {"brokerId", Types.VARCHAR},
		{"manufacturingApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("manuAdditionalCompanyInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("companyNameRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companySignatureRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatureDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("customBrokerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customBrokerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brokerId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturingApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_manufacture_add_comp_info (manuAdditionalCompanyInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyNameRepresentative VARCHAR(75) null,companySignatureRepresentative VARCHAR(75) null,signatureDate DATE null,customBrokerName VARCHAR(75) null,customBrokerAddress VARCHAR(500) null,telephoneNumber VARCHAR(75) null,brokerId VARCHAR(75) null,manufacturingApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_manufacture_add_comp_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY manuAdditionalCompanyInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_manufacture_add_comp_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANUFACTURINGAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ManuAdditionalCompanyInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _manuAdditionalCompanyInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setManuAdditionalCompanyInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _manuAdditionalCompanyInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ManuAdditionalCompanyInfo.class;
	}

	@Override
	public String getModelClassName() {
		return ManuAdditionalCompanyInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ManuAdditionalCompanyInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ManuAdditionalCompanyInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManuAdditionalCompanyInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ManuAdditionalCompanyInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ManuAdditionalCompanyInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ManuAdditionalCompanyInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ManuAdditionalCompanyInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ManuAdditionalCompanyInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ManuAdditionalCompanyInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<ManuAdditionalCompanyInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<ManuAdditionalCompanyInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ManuAdditionalCompanyInfo, Object>>();

			attributeGetterFunctions.put(
				"manuAdditionalCompanyInfoId",
				ManuAdditionalCompanyInfo::getManuAdditionalCompanyInfoId);
			attributeGetterFunctions.put(
				"groupId", ManuAdditionalCompanyInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ManuAdditionalCompanyInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", ManuAdditionalCompanyInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", ManuAdditionalCompanyInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", ManuAdditionalCompanyInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", ManuAdditionalCompanyInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"companyNameRepresentative",
				ManuAdditionalCompanyInfo::getCompanyNameRepresentative);
			attributeGetterFunctions.put(
				"companySignatureRepresentative",
				ManuAdditionalCompanyInfo::getCompanySignatureRepresentative);
			attributeGetterFunctions.put(
				"signatureDate", ManuAdditionalCompanyInfo::getSignatureDate);
			attributeGetterFunctions.put(
				"customBrokerName",
				ManuAdditionalCompanyInfo::getCustomBrokerName);
			attributeGetterFunctions.put(
				"customBrokerAddress",
				ManuAdditionalCompanyInfo::getCustomBrokerAddress);
			attributeGetterFunctions.put(
				"telephoneNumber",
				ManuAdditionalCompanyInfo::getTelephoneNumber);
			attributeGetterFunctions.put(
				"brokerId", ManuAdditionalCompanyInfo::getBrokerId);
			attributeGetterFunctions.put(
				"manufacturingApplicationId",
				ManuAdditionalCompanyInfo::getManufacturingApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ManuAdditionalCompanyInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ManuAdditionalCompanyInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<ManuAdditionalCompanyInfo, ?>>();

			attributeSetterBiConsumers.put(
				"manuAdditionalCompanyInfoId",
				(BiConsumer<ManuAdditionalCompanyInfo, Long>)
					ManuAdditionalCompanyInfo::setManuAdditionalCompanyInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ManuAdditionalCompanyInfo, Long>)
					ManuAdditionalCompanyInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ManuAdditionalCompanyInfo, Long>)
					ManuAdditionalCompanyInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ManuAdditionalCompanyInfo, Long>)
					ManuAdditionalCompanyInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ManuAdditionalCompanyInfo, String>)
					ManuAdditionalCompanyInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ManuAdditionalCompanyInfo, Date>)
					ManuAdditionalCompanyInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ManuAdditionalCompanyInfo, Date>)
					ManuAdditionalCompanyInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"companyNameRepresentative",
				(BiConsumer<ManuAdditionalCompanyInfo, String>)
					ManuAdditionalCompanyInfo::setCompanyNameRepresentative);
			attributeSetterBiConsumers.put(
				"companySignatureRepresentative",
				(BiConsumer<ManuAdditionalCompanyInfo, String>)
					ManuAdditionalCompanyInfo::
						setCompanySignatureRepresentative);
			attributeSetterBiConsumers.put(
				"signatureDate",
				(BiConsumer<ManuAdditionalCompanyInfo, Date>)
					ManuAdditionalCompanyInfo::setSignatureDate);
			attributeSetterBiConsumers.put(
				"customBrokerName",
				(BiConsumer<ManuAdditionalCompanyInfo, String>)
					ManuAdditionalCompanyInfo::setCustomBrokerName);
			attributeSetterBiConsumers.put(
				"customBrokerAddress",
				(BiConsumer<ManuAdditionalCompanyInfo, String>)
					ManuAdditionalCompanyInfo::setCustomBrokerAddress);
			attributeSetterBiConsumers.put(
				"telephoneNumber",
				(BiConsumer<ManuAdditionalCompanyInfo, String>)
					ManuAdditionalCompanyInfo::setTelephoneNumber);
			attributeSetterBiConsumers.put(
				"brokerId",
				(BiConsumer<ManuAdditionalCompanyInfo, String>)
					ManuAdditionalCompanyInfo::setBrokerId);
			attributeSetterBiConsumers.put(
				"manufacturingApplicationId",
				(BiConsumer<ManuAdditionalCompanyInfo, Long>)
					ManuAdditionalCompanyInfo::setManufacturingApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getManuAdditionalCompanyInfoId() {
		return _manuAdditionalCompanyInfoId;
	}

	@Override
	public void setManuAdditionalCompanyInfoId(
		long manuAdditionalCompanyInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manuAdditionalCompanyInfoId = manuAdditionalCompanyInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCompanyNameRepresentative() {
		if (_companyNameRepresentative == null) {
			return "";
		}
		else {
			return _companyNameRepresentative;
		}
	}

	@Override
	public void setCompanyNameRepresentative(String companyNameRepresentative) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyNameRepresentative = companyNameRepresentative;
	}

	@JSON
	@Override
	public String getCompanySignatureRepresentative() {
		if (_companySignatureRepresentative == null) {
			return "";
		}
		else {
			return _companySignatureRepresentative;
		}
	}

	@Override
	public void setCompanySignatureRepresentative(
		String companySignatureRepresentative) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companySignatureRepresentative = companySignatureRepresentative;
	}

	@JSON
	@Override
	public Date getSignatureDate() {
		return _signatureDate;
	}

	@Override
	public void setSignatureDate(Date signatureDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatureDate = signatureDate;
	}

	@JSON
	@Override
	public String getCustomBrokerName() {
		if (_customBrokerName == null) {
			return "";
		}
		else {
			return _customBrokerName;
		}
	}

	@Override
	public void setCustomBrokerName(String customBrokerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customBrokerName = customBrokerName;
	}

	@JSON
	@Override
	public String getCustomBrokerAddress() {
		if (_customBrokerAddress == null) {
			return "";
		}
		else {
			return _customBrokerAddress;
		}
	}

	@Override
	public void setCustomBrokerAddress(String customBrokerAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customBrokerAddress = customBrokerAddress;
	}

	@JSON
	@Override
	public String getTelephoneNumber() {
		if (_telephoneNumber == null) {
			return "";
		}
		else {
			return _telephoneNumber;
		}
	}

	@Override
	public void setTelephoneNumber(String telephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneNumber = telephoneNumber;
	}

	@JSON
	@Override
	public String getBrokerId() {
		if (_brokerId == null) {
			return "";
		}
		else {
			return _brokerId;
		}
	}

	@Override
	public void setBrokerId(String brokerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brokerId = brokerId;
	}

	@JSON
	@Override
	public long getManufacturingApplicationId() {
		return _manufacturingApplicationId;
	}

	@Override
	public void setManufacturingApplicationId(long manufacturingApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturingApplicationId = manufacturingApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalManufacturingApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ManuAdditionalCompanyInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ManuAdditionalCompanyInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ManuAdditionalCompanyInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManuAdditionalCompanyInfoImpl manuAdditionalCompanyInfoImpl =
			new ManuAdditionalCompanyInfoImpl();

		manuAdditionalCompanyInfoImpl.setManuAdditionalCompanyInfoId(
			getManuAdditionalCompanyInfoId());
		manuAdditionalCompanyInfoImpl.setGroupId(getGroupId());
		manuAdditionalCompanyInfoImpl.setCompanyId(getCompanyId());
		manuAdditionalCompanyInfoImpl.setUserId(getUserId());
		manuAdditionalCompanyInfoImpl.setUserName(getUserName());
		manuAdditionalCompanyInfoImpl.setCreateDate(getCreateDate());
		manuAdditionalCompanyInfoImpl.setModifiedDate(getModifiedDate());
		manuAdditionalCompanyInfoImpl.setCompanyNameRepresentative(
			getCompanyNameRepresentative());
		manuAdditionalCompanyInfoImpl.setCompanySignatureRepresentative(
			getCompanySignatureRepresentative());
		manuAdditionalCompanyInfoImpl.setSignatureDate(getSignatureDate());
		manuAdditionalCompanyInfoImpl.setCustomBrokerName(
			getCustomBrokerName());
		manuAdditionalCompanyInfoImpl.setCustomBrokerAddress(
			getCustomBrokerAddress());
		manuAdditionalCompanyInfoImpl.setTelephoneNumber(getTelephoneNumber());
		manuAdditionalCompanyInfoImpl.setBrokerId(getBrokerId());
		manuAdditionalCompanyInfoImpl.setManufacturingApplicationId(
			getManufacturingApplicationId());

		manuAdditionalCompanyInfoImpl.resetOriginalValues();

		return manuAdditionalCompanyInfoImpl;
	}

	@Override
	public ManuAdditionalCompanyInfo cloneWithOriginalValues() {
		ManuAdditionalCompanyInfoImpl manuAdditionalCompanyInfoImpl =
			new ManuAdditionalCompanyInfoImpl();

		manuAdditionalCompanyInfoImpl.setManuAdditionalCompanyInfoId(
			this.<Long>getColumnOriginalValue("manuAdditionalCompanyInfoId"));
		manuAdditionalCompanyInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		manuAdditionalCompanyInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		manuAdditionalCompanyInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		manuAdditionalCompanyInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		manuAdditionalCompanyInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		manuAdditionalCompanyInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		manuAdditionalCompanyInfoImpl.setCompanyNameRepresentative(
			this.<String>getColumnOriginalValue("companyNameRepresentative"));
		manuAdditionalCompanyInfoImpl.setCompanySignatureRepresentative(
			this.<String>getColumnOriginalValue(
				"companySignatureRepresentative"));
		manuAdditionalCompanyInfoImpl.setSignatureDate(
			this.<Date>getColumnOriginalValue("signatureDate"));
		manuAdditionalCompanyInfoImpl.setCustomBrokerName(
			this.<String>getColumnOriginalValue("customBrokerName"));
		manuAdditionalCompanyInfoImpl.setCustomBrokerAddress(
			this.<String>getColumnOriginalValue("customBrokerAddress"));
		manuAdditionalCompanyInfoImpl.setTelephoneNumber(
			this.<String>getColumnOriginalValue("telephoneNumber"));
		manuAdditionalCompanyInfoImpl.setBrokerId(
			this.<String>getColumnOriginalValue("brokerId"));
		manuAdditionalCompanyInfoImpl.setManufacturingApplicationId(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));

		return manuAdditionalCompanyInfoImpl;
	}

	@Override
	public int compareTo(ManuAdditionalCompanyInfo manuAdditionalCompanyInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), manuAdditionalCompanyInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ManuAdditionalCompanyInfo)) {
			return false;
		}

		ManuAdditionalCompanyInfo manuAdditionalCompanyInfo =
			(ManuAdditionalCompanyInfo)object;

		long primaryKey = manuAdditionalCompanyInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ManuAdditionalCompanyInfo> toCacheModel() {
		ManuAdditionalCompanyInfoCacheModel
			manuAdditionalCompanyInfoCacheModel =
				new ManuAdditionalCompanyInfoCacheModel();

		manuAdditionalCompanyInfoCacheModel.manuAdditionalCompanyInfoId =
			getManuAdditionalCompanyInfoId();

		manuAdditionalCompanyInfoCacheModel.groupId = getGroupId();

		manuAdditionalCompanyInfoCacheModel.companyId = getCompanyId();

		manuAdditionalCompanyInfoCacheModel.userId = getUserId();

		manuAdditionalCompanyInfoCacheModel.userName = getUserName();

		String userName = manuAdditionalCompanyInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			manuAdditionalCompanyInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			manuAdditionalCompanyInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			manuAdditionalCompanyInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			manuAdditionalCompanyInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			manuAdditionalCompanyInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		manuAdditionalCompanyInfoCacheModel.companyNameRepresentative =
			getCompanyNameRepresentative();

		String companyNameRepresentative =
			manuAdditionalCompanyInfoCacheModel.companyNameRepresentative;

		if ((companyNameRepresentative != null) &&
			(companyNameRepresentative.length() == 0)) {

			manuAdditionalCompanyInfoCacheModel.companyNameRepresentative =
				null;
		}

		manuAdditionalCompanyInfoCacheModel.companySignatureRepresentative =
			getCompanySignatureRepresentative();

		String companySignatureRepresentative =
			manuAdditionalCompanyInfoCacheModel.companySignatureRepresentative;

		if ((companySignatureRepresentative != null) &&
			(companySignatureRepresentative.length() == 0)) {

			manuAdditionalCompanyInfoCacheModel.companySignatureRepresentative =
				null;
		}

		Date signatureDate = getSignatureDate();

		if (signatureDate != null) {
			manuAdditionalCompanyInfoCacheModel.signatureDate =
				signatureDate.getTime();
		}
		else {
			manuAdditionalCompanyInfoCacheModel.signatureDate = Long.MIN_VALUE;
		}

		manuAdditionalCompanyInfoCacheModel.customBrokerName =
			getCustomBrokerName();

		String customBrokerName =
			manuAdditionalCompanyInfoCacheModel.customBrokerName;

		if ((customBrokerName != null) && (customBrokerName.length() == 0)) {
			manuAdditionalCompanyInfoCacheModel.customBrokerName = null;
		}

		manuAdditionalCompanyInfoCacheModel.customBrokerAddress =
			getCustomBrokerAddress();

		String customBrokerAddress =
			manuAdditionalCompanyInfoCacheModel.customBrokerAddress;

		if ((customBrokerAddress != null) &&
			(customBrokerAddress.length() == 0)) {

			manuAdditionalCompanyInfoCacheModel.customBrokerAddress = null;
		}

		manuAdditionalCompanyInfoCacheModel.telephoneNumber =
			getTelephoneNumber();

		String telephoneNumber =
			manuAdditionalCompanyInfoCacheModel.telephoneNumber;

		if ((telephoneNumber != null) && (telephoneNumber.length() == 0)) {
			manuAdditionalCompanyInfoCacheModel.telephoneNumber = null;
		}

		manuAdditionalCompanyInfoCacheModel.brokerId = getBrokerId();

		String brokerId = manuAdditionalCompanyInfoCacheModel.brokerId;

		if ((brokerId != null) && (brokerId.length() == 0)) {
			manuAdditionalCompanyInfoCacheModel.brokerId = null;
		}

		manuAdditionalCompanyInfoCacheModel.manufacturingApplicationId =
			getManufacturingApplicationId();

		return manuAdditionalCompanyInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ManuAdditionalCompanyInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ManuAdditionalCompanyInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManuAdditionalCompanyInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ManuAdditionalCompanyInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, ManuAdditionalCompanyInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						ManuAdditionalCompanyInfo.class, ModelWrapper.class);

	}

	private long _manuAdditionalCompanyInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _companyNameRepresentative;
	private String _companySignatureRepresentative;
	private Date _signatureDate;
	private String _customBrokerName;
	private String _customBrokerAddress;
	private String _telephoneNumber;
	private String _brokerId;
	private long _manufacturingApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<ManuAdditionalCompanyInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ManuAdditionalCompanyInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"manuAdditionalCompanyInfoId", _manuAdditionalCompanyInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"companyNameRepresentative", _companyNameRepresentative);
		_columnOriginalValues.put(
			"companySignatureRepresentative", _companySignatureRepresentative);
		_columnOriginalValues.put("signatureDate", _signatureDate);
		_columnOriginalValues.put("customBrokerName", _customBrokerName);
		_columnOriginalValues.put("customBrokerAddress", _customBrokerAddress);
		_columnOriginalValues.put("telephoneNumber", _telephoneNumber);
		_columnOriginalValues.put("brokerId", _brokerId);
		_columnOriginalValues.put(
			"manufacturingApplicationId", _manufacturingApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("manuAdditionalCompanyInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("companyNameRepresentative", 128L);

		columnBitmasks.put("companySignatureRepresentative", 256L);

		columnBitmasks.put("signatureDate", 512L);

		columnBitmasks.put("customBrokerName", 1024L);

		columnBitmasks.put("customBrokerAddress", 2048L);

		columnBitmasks.put("telephoneNumber", 4096L);

		columnBitmasks.put("brokerId", 8192L);

		columnBitmasks.put("manufacturingApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ManuAdditionalCompanyInfo _escapedModel;

}