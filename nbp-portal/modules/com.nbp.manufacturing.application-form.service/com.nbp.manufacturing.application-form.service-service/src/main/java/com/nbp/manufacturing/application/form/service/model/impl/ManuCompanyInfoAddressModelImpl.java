/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.manufacturing.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.manufacturing.application.form.service.model.ManuCompanyInfoAddress;
import com.nbp.manufacturing.application.form.service.model.ManuCompanyInfoAddressModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ManuCompanyInfoAddress service. Represents a row in the &quot;nbp_manu_com_Info_Address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ManuCompanyInfoAddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManuCompanyInfoAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ManuCompanyInfoAddressImpl
 * @generated
 */
@JSON(strict = true)
public class ManuCompanyInfoAddressModelImpl
	extends BaseModelImpl<ManuCompanyInfoAddress>
	implements ManuCompanyInfoAddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manu company info address model instance should use the <code>ManuCompanyInfoAddress</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_manu_com_Info_Address";

	public static final Object[][] TABLE_COLUMNS = {
		{"manuCompanyInfoAddressId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"factoryAddress", Types.VARCHAR},
		{"telephoneNumber", Types.VARCHAR}, {"emailAddress", Types.VARCHAR},
		{"companyWebsite", Types.VARCHAR}, {"parish", Types.VARCHAR},
		{"counter", Types.VARCHAR},
		{"manufacturingApplicationId", Types.BIGINT},
		{"manuCompanyInfoId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("manuCompanyInfoAddressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("factoryAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyWebsite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturingApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("manuCompanyInfoId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_manu_com_Info_Address (manuCompanyInfoAddressId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,factoryAddress VARCHAR(500) null,telephoneNumber VARCHAR(75) null,emailAddress VARCHAR(75) null,companyWebsite VARCHAR(75) null,parish VARCHAR(75) null,counter VARCHAR(75) null,manufacturingApplicationId LONG,manuCompanyInfoId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_manu_com_Info_Address";

	public static final String ORDER_BY_JPQL =
		" ORDER BY manuCompanyInfoAddress.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_manu_com_Info_Address.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANUCOMPANYINFOID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANUFACTURINGAPPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ManuCompanyInfoAddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _manuCompanyInfoAddressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setManuCompanyInfoAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _manuCompanyInfoAddressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ManuCompanyInfoAddress.class;
	}

	@Override
	public String getModelClassName() {
		return ManuCompanyInfoAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ManuCompanyInfoAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ManuCompanyInfoAddress, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManuCompanyInfoAddress, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ManuCompanyInfoAddress)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ManuCompanyInfoAddress, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ManuCompanyInfoAddress, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ManuCompanyInfoAddress)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ManuCompanyInfoAddress, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ManuCompanyInfoAddress, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<ManuCompanyInfoAddress, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<ManuCompanyInfoAddress, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ManuCompanyInfoAddress, Object>>();

			attributeGetterFunctions.put(
				"manuCompanyInfoAddressId",
				ManuCompanyInfoAddress::getManuCompanyInfoAddressId);
			attributeGetterFunctions.put(
				"groupId", ManuCompanyInfoAddress::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ManuCompanyInfoAddress::getCompanyId);
			attributeGetterFunctions.put(
				"userId", ManuCompanyInfoAddress::getUserId);
			attributeGetterFunctions.put(
				"userName", ManuCompanyInfoAddress::getUserName);
			attributeGetterFunctions.put(
				"createDate", ManuCompanyInfoAddress::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", ManuCompanyInfoAddress::getModifiedDate);
			attributeGetterFunctions.put(
				"factoryAddress", ManuCompanyInfoAddress::getFactoryAddress);
			attributeGetterFunctions.put(
				"telephoneNumber", ManuCompanyInfoAddress::getTelephoneNumber);
			attributeGetterFunctions.put(
				"emailAddress", ManuCompanyInfoAddress::getEmailAddress);
			attributeGetterFunctions.put(
				"companyWebsite", ManuCompanyInfoAddress::getCompanyWebsite);
			attributeGetterFunctions.put(
				"parish", ManuCompanyInfoAddress::getParish);
			attributeGetterFunctions.put(
				"counter", ManuCompanyInfoAddress::getCounter);
			attributeGetterFunctions.put(
				"manufacturingApplicationId",
				ManuCompanyInfoAddress::getManufacturingApplicationId);
			attributeGetterFunctions.put(
				"manuCompanyInfoId",
				ManuCompanyInfoAddress::getManuCompanyInfoId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ManuCompanyInfoAddress, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ManuCompanyInfoAddress, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<ManuCompanyInfoAddress, ?>>();

			attributeSetterBiConsumers.put(
				"manuCompanyInfoAddressId",
				(BiConsumer<ManuCompanyInfoAddress, Long>)
					ManuCompanyInfoAddress::setManuCompanyInfoAddressId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ManuCompanyInfoAddress, Long>)
					ManuCompanyInfoAddress::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ManuCompanyInfoAddress, Long>)
					ManuCompanyInfoAddress::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ManuCompanyInfoAddress, Long>)
					ManuCompanyInfoAddress::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ManuCompanyInfoAddress, String>)
					ManuCompanyInfoAddress::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ManuCompanyInfoAddress, Date>)
					ManuCompanyInfoAddress::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ManuCompanyInfoAddress, Date>)
					ManuCompanyInfoAddress::setModifiedDate);
			attributeSetterBiConsumers.put(
				"factoryAddress",
				(BiConsumer<ManuCompanyInfoAddress, String>)
					ManuCompanyInfoAddress::setFactoryAddress);
			attributeSetterBiConsumers.put(
				"telephoneNumber",
				(BiConsumer<ManuCompanyInfoAddress, String>)
					ManuCompanyInfoAddress::setTelephoneNumber);
			attributeSetterBiConsumers.put(
				"emailAddress",
				(BiConsumer<ManuCompanyInfoAddress, String>)
					ManuCompanyInfoAddress::setEmailAddress);
			attributeSetterBiConsumers.put(
				"companyWebsite",
				(BiConsumer<ManuCompanyInfoAddress, String>)
					ManuCompanyInfoAddress::setCompanyWebsite);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<ManuCompanyInfoAddress, String>)
					ManuCompanyInfoAddress::setParish);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<ManuCompanyInfoAddress, String>)
					ManuCompanyInfoAddress::setCounter);
			attributeSetterBiConsumers.put(
				"manufacturingApplicationId",
				(BiConsumer<ManuCompanyInfoAddress, Long>)
					ManuCompanyInfoAddress::setManufacturingApplicationId);
			attributeSetterBiConsumers.put(
				"manuCompanyInfoId",
				(BiConsumer<ManuCompanyInfoAddress, Long>)
					ManuCompanyInfoAddress::setManuCompanyInfoId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getManuCompanyInfoAddressId() {
		return _manuCompanyInfoAddressId;
	}

	@Override
	public void setManuCompanyInfoAddressId(long manuCompanyInfoAddressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manuCompanyInfoAddressId = manuCompanyInfoAddressId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFactoryAddress() {
		if (_factoryAddress == null) {
			return "";
		}
		else {
			return _factoryAddress;
		}
	}

	@Override
	public void setFactoryAddress(String factoryAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_factoryAddress = factoryAddress;
	}

	@JSON
	@Override
	public String getTelephoneNumber() {
		if (_telephoneNumber == null) {
			return "";
		}
		else {
			return _telephoneNumber;
		}
	}

	@Override
	public void setTelephoneNumber(String telephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneNumber = telephoneNumber;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getCompanyWebsite() {
		if (_companyWebsite == null) {
			return "";
		}
		else {
			return _companyWebsite;
		}
	}

	@Override
	public void setCompanyWebsite(String companyWebsite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyWebsite = companyWebsite;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	@JSON
	@Override
	public long getManufacturingApplicationId() {
		return _manufacturingApplicationId;
	}

	@Override
	public void setManufacturingApplicationId(long manufacturingApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturingApplicationId = manufacturingApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalManufacturingApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));
	}

	@JSON
	@Override
	public long getManuCompanyInfoId() {
		return _manuCompanyInfoId;
	}

	@Override
	public void setManuCompanyInfoId(long manuCompanyInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manuCompanyInfoId = manuCompanyInfoId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalManuCompanyInfoId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("manuCompanyInfoId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ManuCompanyInfoAddress.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ManuCompanyInfoAddress toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ManuCompanyInfoAddress>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManuCompanyInfoAddressImpl manuCompanyInfoAddressImpl =
			new ManuCompanyInfoAddressImpl();

		manuCompanyInfoAddressImpl.setManuCompanyInfoAddressId(
			getManuCompanyInfoAddressId());
		manuCompanyInfoAddressImpl.setGroupId(getGroupId());
		manuCompanyInfoAddressImpl.setCompanyId(getCompanyId());
		manuCompanyInfoAddressImpl.setUserId(getUserId());
		manuCompanyInfoAddressImpl.setUserName(getUserName());
		manuCompanyInfoAddressImpl.setCreateDate(getCreateDate());
		manuCompanyInfoAddressImpl.setModifiedDate(getModifiedDate());
		manuCompanyInfoAddressImpl.setFactoryAddress(getFactoryAddress());
		manuCompanyInfoAddressImpl.setTelephoneNumber(getTelephoneNumber());
		manuCompanyInfoAddressImpl.setEmailAddress(getEmailAddress());
		manuCompanyInfoAddressImpl.setCompanyWebsite(getCompanyWebsite());
		manuCompanyInfoAddressImpl.setParish(getParish());
		manuCompanyInfoAddressImpl.setCounter(getCounter());
		manuCompanyInfoAddressImpl.setManufacturingApplicationId(
			getManufacturingApplicationId());
		manuCompanyInfoAddressImpl.setManuCompanyInfoId(getManuCompanyInfoId());

		manuCompanyInfoAddressImpl.resetOriginalValues();

		return manuCompanyInfoAddressImpl;
	}

	@Override
	public ManuCompanyInfoAddress cloneWithOriginalValues() {
		ManuCompanyInfoAddressImpl manuCompanyInfoAddressImpl =
			new ManuCompanyInfoAddressImpl();

		manuCompanyInfoAddressImpl.setManuCompanyInfoAddressId(
			this.<Long>getColumnOriginalValue("manuCompanyInfoAddressId"));
		manuCompanyInfoAddressImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		manuCompanyInfoAddressImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		manuCompanyInfoAddressImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		manuCompanyInfoAddressImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		manuCompanyInfoAddressImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		manuCompanyInfoAddressImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		manuCompanyInfoAddressImpl.setFactoryAddress(
			this.<String>getColumnOriginalValue("factoryAddress"));
		manuCompanyInfoAddressImpl.setTelephoneNumber(
			this.<String>getColumnOriginalValue("telephoneNumber"));
		manuCompanyInfoAddressImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		manuCompanyInfoAddressImpl.setCompanyWebsite(
			this.<String>getColumnOriginalValue("companyWebsite"));
		manuCompanyInfoAddressImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		manuCompanyInfoAddressImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));
		manuCompanyInfoAddressImpl.setManufacturingApplicationId(
			this.<Long>getColumnOriginalValue("manufacturingApplicationId"));
		manuCompanyInfoAddressImpl.setManuCompanyInfoId(
			this.<Long>getColumnOriginalValue("manuCompanyInfoId"));

		return manuCompanyInfoAddressImpl;
	}

	@Override
	public int compareTo(ManuCompanyInfoAddress manuCompanyInfoAddress) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), manuCompanyInfoAddress.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ManuCompanyInfoAddress)) {
			return false;
		}

		ManuCompanyInfoAddress manuCompanyInfoAddress =
			(ManuCompanyInfoAddress)object;

		long primaryKey = manuCompanyInfoAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ManuCompanyInfoAddress> toCacheModel() {
		ManuCompanyInfoAddressCacheModel manuCompanyInfoAddressCacheModel =
			new ManuCompanyInfoAddressCacheModel();

		manuCompanyInfoAddressCacheModel.manuCompanyInfoAddressId =
			getManuCompanyInfoAddressId();

		manuCompanyInfoAddressCacheModel.groupId = getGroupId();

		manuCompanyInfoAddressCacheModel.companyId = getCompanyId();

		manuCompanyInfoAddressCacheModel.userId = getUserId();

		manuCompanyInfoAddressCacheModel.userName = getUserName();

		String userName = manuCompanyInfoAddressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			manuCompanyInfoAddressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			manuCompanyInfoAddressCacheModel.createDate = createDate.getTime();
		}
		else {
			manuCompanyInfoAddressCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			manuCompanyInfoAddressCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			manuCompanyInfoAddressCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		manuCompanyInfoAddressCacheModel.factoryAddress = getFactoryAddress();

		String factoryAddress = manuCompanyInfoAddressCacheModel.factoryAddress;

		if ((factoryAddress != null) && (factoryAddress.length() == 0)) {
			manuCompanyInfoAddressCacheModel.factoryAddress = null;
		}

		manuCompanyInfoAddressCacheModel.telephoneNumber = getTelephoneNumber();

		String telephoneNumber =
			manuCompanyInfoAddressCacheModel.telephoneNumber;

		if ((telephoneNumber != null) && (telephoneNumber.length() == 0)) {
			manuCompanyInfoAddressCacheModel.telephoneNumber = null;
		}

		manuCompanyInfoAddressCacheModel.emailAddress = getEmailAddress();

		String emailAddress = manuCompanyInfoAddressCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			manuCompanyInfoAddressCacheModel.emailAddress = null;
		}

		manuCompanyInfoAddressCacheModel.companyWebsite = getCompanyWebsite();

		String companyWebsite = manuCompanyInfoAddressCacheModel.companyWebsite;

		if ((companyWebsite != null) && (companyWebsite.length() == 0)) {
			manuCompanyInfoAddressCacheModel.companyWebsite = null;
		}

		manuCompanyInfoAddressCacheModel.parish = getParish();

		String parish = manuCompanyInfoAddressCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			manuCompanyInfoAddressCacheModel.parish = null;
		}

		manuCompanyInfoAddressCacheModel.counter = getCounter();

		String counter = manuCompanyInfoAddressCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			manuCompanyInfoAddressCacheModel.counter = null;
		}

		manuCompanyInfoAddressCacheModel.manufacturingApplicationId =
			getManufacturingApplicationId();

		manuCompanyInfoAddressCacheModel.manuCompanyInfoId =
			getManuCompanyInfoId();

		return manuCompanyInfoAddressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ManuCompanyInfoAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ManuCompanyInfoAddress, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ManuCompanyInfoAddress, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ManuCompanyInfoAddress)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ManuCompanyInfoAddress>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ManuCompanyInfoAddress.class, ModelWrapper.class);

	}

	private long _manuCompanyInfoAddressId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _factoryAddress;
	private String _telephoneNumber;
	private String _emailAddress;
	private String _companyWebsite;
	private String _parish;
	private String _counter;
	private long _manufacturingApplicationId;
	private long _manuCompanyInfoId;

	public <T> T getColumnValue(String columnName) {
		Function<ManuCompanyInfoAddress, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ManuCompanyInfoAddress)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"manuCompanyInfoAddressId", _manuCompanyInfoAddressId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("factoryAddress", _factoryAddress);
		_columnOriginalValues.put("telephoneNumber", _telephoneNumber);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("companyWebsite", _companyWebsite);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("counter", _counter);
		_columnOriginalValues.put(
			"manufacturingApplicationId", _manufacturingApplicationId);
		_columnOriginalValues.put("manuCompanyInfoId", _manuCompanyInfoId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("manuCompanyInfoAddressId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("factoryAddress", 128L);

		columnBitmasks.put("telephoneNumber", 256L);

		columnBitmasks.put("emailAddress", 512L);

		columnBitmasks.put("companyWebsite", 1024L);

		columnBitmasks.put("parish", 2048L);

		columnBitmasks.put("counter", 4096L);

		columnBitmasks.put("manufacturingApplicationId", 8192L);

		columnBitmasks.put("manuCompanyInfoId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ManuCompanyInfoAddress _escapedModel;

}