/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.mining.lease.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.mining.lease.application.service.model.MiningRenewalLicence;
import com.nbp.mining.lease.application.service.model.MiningRenewalLicenceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MiningRenewalLicence service. Represents a row in the &quot;nbp_mining_renew_licence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MiningRenewalLicenceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MiningRenewalLicenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MiningRenewalLicenceImpl
 * @generated
 */
@JSON(strict = true)
public class MiningRenewalLicenceModelImpl
	extends BaseModelImpl<MiningRenewalLicence>
	implements MiningRenewalLicenceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mining renewal licence model instance should use the <code>MiningRenewalLicence</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_mining_renew_licence";

	public static final Object[][] TABLE_COLUMNS = {
		{"miningRenewalLicenceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"renewApplicantName", Types.VARCHAR}, {"renewTrnNum", Types.VARCHAR},
		{"renewApplicantLicNum", Types.VARCHAR},
		{"stateWhetherRenewIs", Types.VARCHAR},
		{"renewTelephone", Types.VARCHAR}, {"renewEmailAddr", Types.VARCHAR},
		{"renewNumOfApplicantLease", Types.VARCHAR},
		{"renApplicantDesireToMine", Types.VARCHAR},
		{"renewTermDesired", Types.VARCHAR}, {"renewFeeCheck", Types.VARCHAR},
		{"renewDate", Types.TIMESTAMP},
		{"miningLeaseApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("miningRenewalLicenceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("renewApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewTrnNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewApplicantLicNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateWhetherRenewIs", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewEmailAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewNumOfApplicantLease", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renApplicantDesireToMine", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewTermDesired", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewFeeCheck", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("miningLeaseApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_mining_renew_licence (miningRenewalLicenceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,renewApplicantName VARCHAR(75) null,renewTrnNum VARCHAR(75) null,renewApplicantLicNum VARCHAR(75) null,stateWhetherRenewIs VARCHAR(75) null,renewTelephone VARCHAR(75) null,renewEmailAddr VARCHAR(75) null,renewNumOfApplicantLease VARCHAR(75) null,renApplicantDesireToMine VARCHAR(75) null,renewTermDesired VARCHAR(75) null,renewFeeCheck VARCHAR(75) null,renewDate DATE null,miningLeaseApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_mining_renew_licence";

	public static final String ORDER_BY_JPQL =
		" ORDER BY miningRenewalLicence.miningRenewalLicenceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_mining_renew_licence.miningRenewalLicenceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MININGLEASEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MININGRENEWALLICENCEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MiningRenewalLicenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _miningRenewalLicenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMiningRenewalLicenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _miningRenewalLicenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MiningRenewalLicence.class;
	}

	@Override
	public String getModelClassName() {
		return MiningRenewalLicence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MiningRenewalLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MiningRenewalLicence, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiningRenewalLicence, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MiningRenewalLicence)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MiningRenewalLicence, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MiningRenewalLicence, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MiningRenewalLicence)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MiningRenewalLicence, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MiningRenewalLicence, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<MiningRenewalLicence, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<MiningRenewalLicence, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<MiningRenewalLicence, Object>>();

			attributeGetterFunctions.put(
				"miningRenewalLicenceId",
				MiningRenewalLicence::getMiningRenewalLicenceId);
			attributeGetterFunctions.put(
				"groupId", MiningRenewalLicence::getGroupId);
			attributeGetterFunctions.put(
				"companyId", MiningRenewalLicence::getCompanyId);
			attributeGetterFunctions.put(
				"userId", MiningRenewalLicence::getUserId);
			attributeGetterFunctions.put(
				"userName", MiningRenewalLicence::getUserName);
			attributeGetterFunctions.put(
				"createDate", MiningRenewalLicence::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", MiningRenewalLicence::getModifiedDate);
			attributeGetterFunctions.put(
				"renewApplicantName",
				MiningRenewalLicence::getRenewApplicantName);
			attributeGetterFunctions.put(
				"renewTrnNum", MiningRenewalLicence::getRenewTrnNum);
			attributeGetterFunctions.put(
				"renewApplicantLicNum",
				MiningRenewalLicence::getRenewApplicantLicNum);
			attributeGetterFunctions.put(
				"stateWhetherRenewIs",
				MiningRenewalLicence::getStateWhetherRenewIs);
			attributeGetterFunctions.put(
				"renewTelephone", MiningRenewalLicence::getRenewTelephone);
			attributeGetterFunctions.put(
				"renewEmailAddr", MiningRenewalLicence::getRenewEmailAddr);
			attributeGetterFunctions.put(
				"renewNumOfApplicantLease",
				MiningRenewalLicence::getRenewNumOfApplicantLease);
			attributeGetterFunctions.put(
				"renApplicantDesireToMine",
				MiningRenewalLicence::getRenApplicantDesireToMine);
			attributeGetterFunctions.put(
				"renewTermDesired", MiningRenewalLicence::getRenewTermDesired);
			attributeGetterFunctions.put(
				"renewFeeCheck", MiningRenewalLicence::getRenewFeeCheck);
			attributeGetterFunctions.put(
				"renewDate", MiningRenewalLicence::getRenewDate);
			attributeGetterFunctions.put(
				"miningLeaseApplicationId",
				MiningRenewalLicence::getMiningLeaseApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<MiningRenewalLicence, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<MiningRenewalLicence, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<MiningRenewalLicence, ?>>();

			attributeSetterBiConsumers.put(
				"miningRenewalLicenceId",
				(BiConsumer<MiningRenewalLicence, Long>)
					MiningRenewalLicence::setMiningRenewalLicenceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<MiningRenewalLicence, Long>)
					MiningRenewalLicence::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<MiningRenewalLicence, Long>)
					MiningRenewalLicence::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<MiningRenewalLicence, Long>)
					MiningRenewalLicence::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<MiningRenewalLicence, Date>)
					MiningRenewalLicence::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<MiningRenewalLicence, Date>)
					MiningRenewalLicence::setModifiedDate);
			attributeSetterBiConsumers.put(
				"renewApplicantName",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenewApplicantName);
			attributeSetterBiConsumers.put(
				"renewTrnNum",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenewTrnNum);
			attributeSetterBiConsumers.put(
				"renewApplicantLicNum",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenewApplicantLicNum);
			attributeSetterBiConsumers.put(
				"stateWhetherRenewIs",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setStateWhetherRenewIs);
			attributeSetterBiConsumers.put(
				"renewTelephone",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenewTelephone);
			attributeSetterBiConsumers.put(
				"renewEmailAddr",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenewEmailAddr);
			attributeSetterBiConsumers.put(
				"renewNumOfApplicantLease",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenewNumOfApplicantLease);
			attributeSetterBiConsumers.put(
				"renApplicantDesireToMine",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenApplicantDesireToMine);
			attributeSetterBiConsumers.put(
				"renewTermDesired",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenewTermDesired);
			attributeSetterBiConsumers.put(
				"renewFeeCheck",
				(BiConsumer<MiningRenewalLicence, String>)
					MiningRenewalLicence::setRenewFeeCheck);
			attributeSetterBiConsumers.put(
				"renewDate",
				(BiConsumer<MiningRenewalLicence, Date>)
					MiningRenewalLicence::setRenewDate);
			attributeSetterBiConsumers.put(
				"miningLeaseApplicationId",
				(BiConsumer<MiningRenewalLicence, Long>)
					MiningRenewalLicence::setMiningLeaseApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMiningRenewalLicenceId() {
		return _miningRenewalLicenceId;
	}

	@Override
	public void setMiningRenewalLicenceId(long miningRenewalLicenceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miningRenewalLicenceId = miningRenewalLicenceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRenewApplicantName() {
		if (_renewApplicantName == null) {
			return "";
		}
		else {
			return _renewApplicantName;
		}
	}

	@Override
	public void setRenewApplicantName(String renewApplicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewApplicantName = renewApplicantName;
	}

	@JSON
	@Override
	public String getRenewTrnNum() {
		if (_renewTrnNum == null) {
			return "";
		}
		else {
			return _renewTrnNum;
		}
	}

	@Override
	public void setRenewTrnNum(String renewTrnNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewTrnNum = renewTrnNum;
	}

	@JSON
	@Override
	public String getRenewApplicantLicNum() {
		if (_renewApplicantLicNum == null) {
			return "";
		}
		else {
			return _renewApplicantLicNum;
		}
	}

	@Override
	public void setRenewApplicantLicNum(String renewApplicantLicNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewApplicantLicNum = renewApplicantLicNum;
	}

	@JSON
	@Override
	public String getStateWhetherRenewIs() {
		if (_stateWhetherRenewIs == null) {
			return "";
		}
		else {
			return _stateWhetherRenewIs;
		}
	}

	@Override
	public void setStateWhetherRenewIs(String stateWhetherRenewIs) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateWhetherRenewIs = stateWhetherRenewIs;
	}

	@JSON
	@Override
	public String getRenewTelephone() {
		if (_renewTelephone == null) {
			return "";
		}
		else {
			return _renewTelephone;
		}
	}

	@Override
	public void setRenewTelephone(String renewTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewTelephone = renewTelephone;
	}

	@JSON
	@Override
	public String getRenewEmailAddr() {
		if (_renewEmailAddr == null) {
			return "";
		}
		else {
			return _renewEmailAddr;
		}
	}

	@Override
	public void setRenewEmailAddr(String renewEmailAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewEmailAddr = renewEmailAddr;
	}

	@JSON
	@Override
	public String getRenewNumOfApplicantLease() {
		if (_renewNumOfApplicantLease == null) {
			return "";
		}
		else {
			return _renewNumOfApplicantLease;
		}
	}

	@Override
	public void setRenewNumOfApplicantLease(String renewNumOfApplicantLease) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewNumOfApplicantLease = renewNumOfApplicantLease;
	}

	@JSON
	@Override
	public String getRenApplicantDesireToMine() {
		if (_renApplicantDesireToMine == null) {
			return "";
		}
		else {
			return _renApplicantDesireToMine;
		}
	}

	@Override
	public void setRenApplicantDesireToMine(String renApplicantDesireToMine) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renApplicantDesireToMine = renApplicantDesireToMine;
	}

	@JSON
	@Override
	public String getRenewTermDesired() {
		if (_renewTermDesired == null) {
			return "";
		}
		else {
			return _renewTermDesired;
		}
	}

	@Override
	public void setRenewTermDesired(String renewTermDesired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewTermDesired = renewTermDesired;
	}

	@JSON
	@Override
	public String getRenewFeeCheck() {
		if (_renewFeeCheck == null) {
			return "";
		}
		else {
			return _renewFeeCheck;
		}
	}

	@Override
	public void setRenewFeeCheck(String renewFeeCheck) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewFeeCheck = renewFeeCheck;
	}

	@JSON
	@Override
	public Date getRenewDate() {
		return _renewDate;
	}

	@Override
	public void setRenewDate(Date renewDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewDate = renewDate;
	}

	@JSON
	@Override
	public long getMiningLeaseApplicationId() {
		return _miningLeaseApplicationId;
	}

	@Override
	public void setMiningLeaseApplicationId(long miningLeaseApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miningLeaseApplicationId = miningLeaseApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMiningLeaseApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("miningLeaseApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MiningRenewalLicence.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MiningRenewalLicence toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MiningRenewalLicence>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MiningRenewalLicenceImpl miningRenewalLicenceImpl =
			new MiningRenewalLicenceImpl();

		miningRenewalLicenceImpl.setMiningRenewalLicenceId(
			getMiningRenewalLicenceId());
		miningRenewalLicenceImpl.setGroupId(getGroupId());
		miningRenewalLicenceImpl.setCompanyId(getCompanyId());
		miningRenewalLicenceImpl.setUserId(getUserId());
		miningRenewalLicenceImpl.setUserName(getUserName());
		miningRenewalLicenceImpl.setCreateDate(getCreateDate());
		miningRenewalLicenceImpl.setModifiedDate(getModifiedDate());
		miningRenewalLicenceImpl.setRenewApplicantName(getRenewApplicantName());
		miningRenewalLicenceImpl.setRenewTrnNum(getRenewTrnNum());
		miningRenewalLicenceImpl.setRenewApplicantLicNum(
			getRenewApplicantLicNum());
		miningRenewalLicenceImpl.setStateWhetherRenewIs(
			getStateWhetherRenewIs());
		miningRenewalLicenceImpl.setRenewTelephone(getRenewTelephone());
		miningRenewalLicenceImpl.setRenewEmailAddr(getRenewEmailAddr());
		miningRenewalLicenceImpl.setRenewNumOfApplicantLease(
			getRenewNumOfApplicantLease());
		miningRenewalLicenceImpl.setRenApplicantDesireToMine(
			getRenApplicantDesireToMine());
		miningRenewalLicenceImpl.setRenewTermDesired(getRenewTermDesired());
		miningRenewalLicenceImpl.setRenewFeeCheck(getRenewFeeCheck());
		miningRenewalLicenceImpl.setRenewDate(getRenewDate());
		miningRenewalLicenceImpl.setMiningLeaseApplicationId(
			getMiningLeaseApplicationId());

		miningRenewalLicenceImpl.resetOriginalValues();

		return miningRenewalLicenceImpl;
	}

	@Override
	public MiningRenewalLicence cloneWithOriginalValues() {
		MiningRenewalLicenceImpl miningRenewalLicenceImpl =
			new MiningRenewalLicenceImpl();

		miningRenewalLicenceImpl.setMiningRenewalLicenceId(
			this.<Long>getColumnOriginalValue("miningRenewalLicenceId"));
		miningRenewalLicenceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		miningRenewalLicenceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		miningRenewalLicenceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		miningRenewalLicenceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		miningRenewalLicenceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		miningRenewalLicenceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		miningRenewalLicenceImpl.setRenewApplicantName(
			this.<String>getColumnOriginalValue("renewApplicantName"));
		miningRenewalLicenceImpl.setRenewTrnNum(
			this.<String>getColumnOriginalValue("renewTrnNum"));
		miningRenewalLicenceImpl.setRenewApplicantLicNum(
			this.<String>getColumnOriginalValue("renewApplicantLicNum"));
		miningRenewalLicenceImpl.setStateWhetherRenewIs(
			this.<String>getColumnOriginalValue("stateWhetherRenewIs"));
		miningRenewalLicenceImpl.setRenewTelephone(
			this.<String>getColumnOriginalValue("renewTelephone"));
		miningRenewalLicenceImpl.setRenewEmailAddr(
			this.<String>getColumnOriginalValue("renewEmailAddr"));
		miningRenewalLicenceImpl.setRenewNumOfApplicantLease(
			this.<String>getColumnOriginalValue("renewNumOfApplicantLease"));
		miningRenewalLicenceImpl.setRenApplicantDesireToMine(
			this.<String>getColumnOriginalValue("renApplicantDesireToMine"));
		miningRenewalLicenceImpl.setRenewTermDesired(
			this.<String>getColumnOriginalValue("renewTermDesired"));
		miningRenewalLicenceImpl.setRenewFeeCheck(
			this.<String>getColumnOriginalValue("renewFeeCheck"));
		miningRenewalLicenceImpl.setRenewDate(
			this.<Date>getColumnOriginalValue("renewDate"));
		miningRenewalLicenceImpl.setMiningLeaseApplicationId(
			this.<Long>getColumnOriginalValue("miningLeaseApplicationId"));

		return miningRenewalLicenceImpl;
	}

	@Override
	public int compareTo(MiningRenewalLicence miningRenewalLicence) {
		long primaryKey = miningRenewalLicence.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MiningRenewalLicence)) {
			return false;
		}

		MiningRenewalLicence miningRenewalLicence =
			(MiningRenewalLicence)object;

		long primaryKey = miningRenewalLicence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MiningRenewalLicence> toCacheModel() {
		MiningRenewalLicenceCacheModel miningRenewalLicenceCacheModel =
			new MiningRenewalLicenceCacheModel();

		miningRenewalLicenceCacheModel.miningRenewalLicenceId =
			getMiningRenewalLicenceId();

		miningRenewalLicenceCacheModel.groupId = getGroupId();

		miningRenewalLicenceCacheModel.companyId = getCompanyId();

		miningRenewalLicenceCacheModel.userId = getUserId();

		miningRenewalLicenceCacheModel.userName = getUserName();

		String userName = miningRenewalLicenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			miningRenewalLicenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			miningRenewalLicenceCacheModel.createDate = createDate.getTime();
		}
		else {
			miningRenewalLicenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			miningRenewalLicenceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			miningRenewalLicenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		miningRenewalLicenceCacheModel.renewApplicantName =
			getRenewApplicantName();

		String renewApplicantName =
			miningRenewalLicenceCacheModel.renewApplicantName;

		if ((renewApplicantName != null) &&
			(renewApplicantName.length() == 0)) {

			miningRenewalLicenceCacheModel.renewApplicantName = null;
		}

		miningRenewalLicenceCacheModel.renewTrnNum = getRenewTrnNum();

		String renewTrnNum = miningRenewalLicenceCacheModel.renewTrnNum;

		if ((renewTrnNum != null) && (renewTrnNum.length() == 0)) {
			miningRenewalLicenceCacheModel.renewTrnNum = null;
		}

		miningRenewalLicenceCacheModel.renewApplicantLicNum =
			getRenewApplicantLicNum();

		String renewApplicantLicNum =
			miningRenewalLicenceCacheModel.renewApplicantLicNum;

		if ((renewApplicantLicNum != null) &&
			(renewApplicantLicNum.length() == 0)) {

			miningRenewalLicenceCacheModel.renewApplicantLicNum = null;
		}

		miningRenewalLicenceCacheModel.stateWhetherRenewIs =
			getStateWhetherRenewIs();

		String stateWhetherRenewIs =
			miningRenewalLicenceCacheModel.stateWhetherRenewIs;

		if ((stateWhetherRenewIs != null) &&
			(stateWhetherRenewIs.length() == 0)) {

			miningRenewalLicenceCacheModel.stateWhetherRenewIs = null;
		}

		miningRenewalLicenceCacheModel.renewTelephone = getRenewTelephone();

		String renewTelephone = miningRenewalLicenceCacheModel.renewTelephone;

		if ((renewTelephone != null) && (renewTelephone.length() == 0)) {
			miningRenewalLicenceCacheModel.renewTelephone = null;
		}

		miningRenewalLicenceCacheModel.renewEmailAddr = getRenewEmailAddr();

		String renewEmailAddr = miningRenewalLicenceCacheModel.renewEmailAddr;

		if ((renewEmailAddr != null) && (renewEmailAddr.length() == 0)) {
			miningRenewalLicenceCacheModel.renewEmailAddr = null;
		}

		miningRenewalLicenceCacheModel.renewNumOfApplicantLease =
			getRenewNumOfApplicantLease();

		String renewNumOfApplicantLease =
			miningRenewalLicenceCacheModel.renewNumOfApplicantLease;

		if ((renewNumOfApplicantLease != null) &&
			(renewNumOfApplicantLease.length() == 0)) {

			miningRenewalLicenceCacheModel.renewNumOfApplicantLease = null;
		}

		miningRenewalLicenceCacheModel.renApplicantDesireToMine =
			getRenApplicantDesireToMine();

		String renApplicantDesireToMine =
			miningRenewalLicenceCacheModel.renApplicantDesireToMine;

		if ((renApplicantDesireToMine != null) &&
			(renApplicantDesireToMine.length() == 0)) {

			miningRenewalLicenceCacheModel.renApplicantDesireToMine = null;
		}

		miningRenewalLicenceCacheModel.renewTermDesired = getRenewTermDesired();

		String renewTermDesired =
			miningRenewalLicenceCacheModel.renewTermDesired;

		if ((renewTermDesired != null) && (renewTermDesired.length() == 0)) {
			miningRenewalLicenceCacheModel.renewTermDesired = null;
		}

		miningRenewalLicenceCacheModel.renewFeeCheck = getRenewFeeCheck();

		String renewFeeCheck = miningRenewalLicenceCacheModel.renewFeeCheck;

		if ((renewFeeCheck != null) && (renewFeeCheck.length() == 0)) {
			miningRenewalLicenceCacheModel.renewFeeCheck = null;
		}

		Date renewDate = getRenewDate();

		if (renewDate != null) {
			miningRenewalLicenceCacheModel.renewDate = renewDate.getTime();
		}
		else {
			miningRenewalLicenceCacheModel.renewDate = Long.MIN_VALUE;
		}

		miningRenewalLicenceCacheModel.miningLeaseApplicationId =
			getMiningLeaseApplicationId();

		return miningRenewalLicenceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MiningRenewalLicence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MiningRenewalLicence, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiningRenewalLicence, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(MiningRenewalLicence)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MiningRenewalLicence>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MiningRenewalLicence.class, ModelWrapper.class);

	}

	private long _miningRenewalLicenceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _renewApplicantName;
	private String _renewTrnNum;
	private String _renewApplicantLicNum;
	private String _stateWhetherRenewIs;
	private String _renewTelephone;
	private String _renewEmailAddr;
	private String _renewNumOfApplicantLease;
	private String _renApplicantDesireToMine;
	private String _renewTermDesired;
	private String _renewFeeCheck;
	private Date _renewDate;
	private long _miningLeaseApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<MiningRenewalLicence, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MiningRenewalLicence)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"miningRenewalLicenceId", _miningRenewalLicenceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("renewApplicantName", _renewApplicantName);
		_columnOriginalValues.put("renewTrnNum", _renewTrnNum);
		_columnOriginalValues.put(
			"renewApplicantLicNum", _renewApplicantLicNum);
		_columnOriginalValues.put("stateWhetherRenewIs", _stateWhetherRenewIs);
		_columnOriginalValues.put("renewTelephone", _renewTelephone);
		_columnOriginalValues.put("renewEmailAddr", _renewEmailAddr);
		_columnOriginalValues.put(
			"renewNumOfApplicantLease", _renewNumOfApplicantLease);
		_columnOriginalValues.put(
			"renApplicantDesireToMine", _renApplicantDesireToMine);
		_columnOriginalValues.put("renewTermDesired", _renewTermDesired);
		_columnOriginalValues.put("renewFeeCheck", _renewFeeCheck);
		_columnOriginalValues.put("renewDate", _renewDate);
		_columnOriginalValues.put(
			"miningLeaseApplicationId", _miningLeaseApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("miningRenewalLicenceId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("renewApplicantName", 128L);

		columnBitmasks.put("renewTrnNum", 256L);

		columnBitmasks.put("renewApplicantLicNum", 512L);

		columnBitmasks.put("stateWhetherRenewIs", 1024L);

		columnBitmasks.put("renewTelephone", 2048L);

		columnBitmasks.put("renewEmailAddr", 4096L);

		columnBitmasks.put("renewNumOfApplicantLease", 8192L);

		columnBitmasks.put("renApplicantDesireToMine", 16384L);

		columnBitmasks.put("renewTermDesired", 32768L);

		columnBitmasks.put("renewFeeCheck", 65536L);

		columnBitmasks.put("renewDate", 131072L);

		columnBitmasks.put("miningLeaseApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MiningRenewalLicence _escapedModel;

}