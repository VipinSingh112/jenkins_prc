/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.mining.lease.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.mining.lease.application.service.model.MiningAppPayment;
import com.nbp.mining.lease.application.service.model.MiningAppPaymentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MiningAppPayment service. Represents a row in the &quot;nbp_mining_app_payment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MiningAppPaymentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MiningAppPaymentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MiningAppPaymentImpl
 * @generated
 */
@JSON(strict = true)
public class MiningAppPaymentModelImpl
	extends BaseModelImpl<MiningAppPayment> implements MiningAppPaymentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mining app payment model instance should use the <code>MiningAppPayment</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_mining_app_payment";

	public static final Object[][] TABLE_COLUMNS = {
		{"miningAppPaymentId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"paymentMethod", Types.VARCHAR},
		{"paymentDocId", Types.VARCHAR}, {"paymentStatus", Types.VARCHAR},
		{"paymentFee", Types.VARCHAR}, {"amountPaid", Types.VARCHAR},
		{"amountCurrency", Types.VARCHAR}, {"transactionNumber", Types.VARCHAR},
		{"miningLeaseApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("miningAppPaymentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("paymentMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentDocId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentFee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amountPaid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amountCurrency", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transactionNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("miningLeaseApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_mining_app_payment (miningAppPaymentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,paymentMethod VARCHAR(75) null,paymentDocId VARCHAR(75) null,paymentStatus VARCHAR(75) null,paymentFee VARCHAR(75) null,amountPaid VARCHAR(75) null,amountCurrency VARCHAR(75) null,transactionNumber VARCHAR(75) null,miningLeaseApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_mining_app_payment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY miningAppPayment.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_mining_app_payment.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MININGLEASEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MiningAppPaymentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _miningAppPaymentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMiningAppPaymentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _miningAppPaymentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MiningAppPayment.class;
	}

	@Override
	public String getModelClassName() {
		return MiningAppPayment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MiningAppPayment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MiningAppPayment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiningAppPayment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MiningAppPayment)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MiningAppPayment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MiningAppPayment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MiningAppPayment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MiningAppPayment, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MiningAppPayment, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<MiningAppPayment, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<MiningAppPayment, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<MiningAppPayment, Object>>();

			attributeGetterFunctions.put(
				"miningAppPaymentId", MiningAppPayment::getMiningAppPaymentId);
			attributeGetterFunctions.put(
				"groupId", MiningAppPayment::getGroupId);
			attributeGetterFunctions.put(
				"companyId", MiningAppPayment::getCompanyId);
			attributeGetterFunctions.put("userId", MiningAppPayment::getUserId);
			attributeGetterFunctions.put(
				"userName", MiningAppPayment::getUserName);
			attributeGetterFunctions.put(
				"createDate", MiningAppPayment::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", MiningAppPayment::getModifiedDate);
			attributeGetterFunctions.put(
				"paymentMethod", MiningAppPayment::getPaymentMethod);
			attributeGetterFunctions.put(
				"paymentDocId", MiningAppPayment::getPaymentDocId);
			attributeGetterFunctions.put(
				"paymentStatus", MiningAppPayment::getPaymentStatus);
			attributeGetterFunctions.put(
				"paymentFee", MiningAppPayment::getPaymentFee);
			attributeGetterFunctions.put(
				"amountPaid", MiningAppPayment::getAmountPaid);
			attributeGetterFunctions.put(
				"amountCurrency", MiningAppPayment::getAmountCurrency);
			attributeGetterFunctions.put(
				"transactionNumber", MiningAppPayment::getTransactionNumber);
			attributeGetterFunctions.put(
				"miningLeaseApplicationId",
				MiningAppPayment::getMiningLeaseApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<MiningAppPayment, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<MiningAppPayment, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<MiningAppPayment, ?>>();

			attributeSetterBiConsumers.put(
				"miningAppPaymentId",
				(BiConsumer<MiningAppPayment, Long>)
					MiningAppPayment::setMiningAppPaymentId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<MiningAppPayment, Long>)
					MiningAppPayment::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<MiningAppPayment, Long>)
					MiningAppPayment::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<MiningAppPayment, Long>)
					MiningAppPayment::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<MiningAppPayment, String>)
					MiningAppPayment::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<MiningAppPayment, Date>)
					MiningAppPayment::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<MiningAppPayment, Date>)
					MiningAppPayment::setModifiedDate);
			attributeSetterBiConsumers.put(
				"paymentMethod",
				(BiConsumer<MiningAppPayment, String>)
					MiningAppPayment::setPaymentMethod);
			attributeSetterBiConsumers.put(
				"paymentDocId",
				(BiConsumer<MiningAppPayment, String>)
					MiningAppPayment::setPaymentDocId);
			attributeSetterBiConsumers.put(
				"paymentStatus",
				(BiConsumer<MiningAppPayment, String>)
					MiningAppPayment::setPaymentStatus);
			attributeSetterBiConsumers.put(
				"paymentFee",
				(BiConsumer<MiningAppPayment, String>)
					MiningAppPayment::setPaymentFee);
			attributeSetterBiConsumers.put(
				"amountPaid",
				(BiConsumer<MiningAppPayment, String>)
					MiningAppPayment::setAmountPaid);
			attributeSetterBiConsumers.put(
				"amountCurrency",
				(BiConsumer<MiningAppPayment, String>)
					MiningAppPayment::setAmountCurrency);
			attributeSetterBiConsumers.put(
				"transactionNumber",
				(BiConsumer<MiningAppPayment, String>)
					MiningAppPayment::setTransactionNumber);
			attributeSetterBiConsumers.put(
				"miningLeaseApplicationId",
				(BiConsumer<MiningAppPayment, Long>)
					MiningAppPayment::setMiningLeaseApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMiningAppPaymentId() {
		return _miningAppPaymentId;
	}

	@Override
	public void setMiningAppPaymentId(long miningAppPaymentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miningAppPaymentId = miningAppPaymentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPaymentMethod() {
		if (_paymentMethod == null) {
			return "";
		}
		else {
			return _paymentMethod;
		}
	}

	@Override
	public void setPaymentMethod(String paymentMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentMethod = paymentMethod;
	}

	@JSON
	@Override
	public String getPaymentDocId() {
		if (_paymentDocId == null) {
			return "";
		}
		else {
			return _paymentDocId;
		}
	}

	@Override
	public void setPaymentDocId(String paymentDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentDocId = paymentDocId;
	}

	@JSON
	@Override
	public String getPaymentStatus() {
		if (_paymentStatus == null) {
			return "";
		}
		else {
			return _paymentStatus;
		}
	}

	@Override
	public void setPaymentStatus(String paymentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentStatus = paymentStatus;
	}

	@JSON
	@Override
	public String getPaymentFee() {
		if (_paymentFee == null) {
			return "";
		}
		else {
			return _paymentFee;
		}
	}

	@Override
	public void setPaymentFee(String paymentFee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentFee = paymentFee;
	}

	@JSON
	@Override
	public String getAmountPaid() {
		if (_amountPaid == null) {
			return "";
		}
		else {
			return _amountPaid;
		}
	}

	@Override
	public void setAmountPaid(String amountPaid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amountPaid = amountPaid;
	}

	@JSON
	@Override
	public String getAmountCurrency() {
		if (_amountCurrency == null) {
			return "";
		}
		else {
			return _amountCurrency;
		}
	}

	@Override
	public void setAmountCurrency(String amountCurrency) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amountCurrency = amountCurrency;
	}

	@JSON
	@Override
	public String getTransactionNumber() {
		if (_transactionNumber == null) {
			return "";
		}
		else {
			return _transactionNumber;
		}
	}

	@Override
	public void setTransactionNumber(String transactionNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transactionNumber = transactionNumber;
	}

	@JSON
	@Override
	public long getMiningLeaseApplicationId() {
		return _miningLeaseApplicationId;
	}

	@Override
	public void setMiningLeaseApplicationId(long miningLeaseApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miningLeaseApplicationId = miningLeaseApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMiningLeaseApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("miningLeaseApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MiningAppPayment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MiningAppPayment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MiningAppPayment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MiningAppPaymentImpl miningAppPaymentImpl = new MiningAppPaymentImpl();

		miningAppPaymentImpl.setMiningAppPaymentId(getMiningAppPaymentId());
		miningAppPaymentImpl.setGroupId(getGroupId());
		miningAppPaymentImpl.setCompanyId(getCompanyId());
		miningAppPaymentImpl.setUserId(getUserId());
		miningAppPaymentImpl.setUserName(getUserName());
		miningAppPaymentImpl.setCreateDate(getCreateDate());
		miningAppPaymentImpl.setModifiedDate(getModifiedDate());
		miningAppPaymentImpl.setPaymentMethod(getPaymentMethod());
		miningAppPaymentImpl.setPaymentDocId(getPaymentDocId());
		miningAppPaymentImpl.setPaymentStatus(getPaymentStatus());
		miningAppPaymentImpl.setPaymentFee(getPaymentFee());
		miningAppPaymentImpl.setAmountPaid(getAmountPaid());
		miningAppPaymentImpl.setAmountCurrency(getAmountCurrency());
		miningAppPaymentImpl.setTransactionNumber(getTransactionNumber());
		miningAppPaymentImpl.setMiningLeaseApplicationId(
			getMiningLeaseApplicationId());

		miningAppPaymentImpl.resetOriginalValues();

		return miningAppPaymentImpl;
	}

	@Override
	public MiningAppPayment cloneWithOriginalValues() {
		MiningAppPaymentImpl miningAppPaymentImpl = new MiningAppPaymentImpl();

		miningAppPaymentImpl.setMiningAppPaymentId(
			this.<Long>getColumnOriginalValue("miningAppPaymentId"));
		miningAppPaymentImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		miningAppPaymentImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		miningAppPaymentImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		miningAppPaymentImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		miningAppPaymentImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		miningAppPaymentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		miningAppPaymentImpl.setPaymentMethod(
			this.<String>getColumnOriginalValue("paymentMethod"));
		miningAppPaymentImpl.setPaymentDocId(
			this.<String>getColumnOriginalValue("paymentDocId"));
		miningAppPaymentImpl.setPaymentStatus(
			this.<String>getColumnOriginalValue("paymentStatus"));
		miningAppPaymentImpl.setPaymentFee(
			this.<String>getColumnOriginalValue("paymentFee"));
		miningAppPaymentImpl.setAmountPaid(
			this.<String>getColumnOriginalValue("amountPaid"));
		miningAppPaymentImpl.setAmountCurrency(
			this.<String>getColumnOriginalValue("amountCurrency"));
		miningAppPaymentImpl.setTransactionNumber(
			this.<String>getColumnOriginalValue("transactionNumber"));
		miningAppPaymentImpl.setMiningLeaseApplicationId(
			this.<Long>getColumnOriginalValue("miningLeaseApplicationId"));

		return miningAppPaymentImpl;
	}

	@Override
	public int compareTo(MiningAppPayment miningAppPayment) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), miningAppPayment.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MiningAppPayment)) {
			return false;
		}

		MiningAppPayment miningAppPayment = (MiningAppPayment)object;

		long primaryKey = miningAppPayment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MiningAppPayment> toCacheModel() {
		MiningAppPaymentCacheModel miningAppPaymentCacheModel =
			new MiningAppPaymentCacheModel();

		miningAppPaymentCacheModel.miningAppPaymentId = getMiningAppPaymentId();

		miningAppPaymentCacheModel.groupId = getGroupId();

		miningAppPaymentCacheModel.companyId = getCompanyId();

		miningAppPaymentCacheModel.userId = getUserId();

		miningAppPaymentCacheModel.userName = getUserName();

		String userName = miningAppPaymentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			miningAppPaymentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			miningAppPaymentCacheModel.createDate = createDate.getTime();
		}
		else {
			miningAppPaymentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			miningAppPaymentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			miningAppPaymentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		miningAppPaymentCacheModel.paymentMethod = getPaymentMethod();

		String paymentMethod = miningAppPaymentCacheModel.paymentMethod;

		if ((paymentMethod != null) && (paymentMethod.length() == 0)) {
			miningAppPaymentCacheModel.paymentMethod = null;
		}

		miningAppPaymentCacheModel.paymentDocId = getPaymentDocId();

		String paymentDocId = miningAppPaymentCacheModel.paymentDocId;

		if ((paymentDocId != null) && (paymentDocId.length() == 0)) {
			miningAppPaymentCacheModel.paymentDocId = null;
		}

		miningAppPaymentCacheModel.paymentStatus = getPaymentStatus();

		String paymentStatus = miningAppPaymentCacheModel.paymentStatus;

		if ((paymentStatus != null) && (paymentStatus.length() == 0)) {
			miningAppPaymentCacheModel.paymentStatus = null;
		}

		miningAppPaymentCacheModel.paymentFee = getPaymentFee();

		String paymentFee = miningAppPaymentCacheModel.paymentFee;

		if ((paymentFee != null) && (paymentFee.length() == 0)) {
			miningAppPaymentCacheModel.paymentFee = null;
		}

		miningAppPaymentCacheModel.amountPaid = getAmountPaid();

		String amountPaid = miningAppPaymentCacheModel.amountPaid;

		if ((amountPaid != null) && (amountPaid.length() == 0)) {
			miningAppPaymentCacheModel.amountPaid = null;
		}

		miningAppPaymentCacheModel.amountCurrency = getAmountCurrency();

		String amountCurrency = miningAppPaymentCacheModel.amountCurrency;

		if ((amountCurrency != null) && (amountCurrency.length() == 0)) {
			miningAppPaymentCacheModel.amountCurrency = null;
		}

		miningAppPaymentCacheModel.transactionNumber = getTransactionNumber();

		String transactionNumber = miningAppPaymentCacheModel.transactionNumber;

		if ((transactionNumber != null) && (transactionNumber.length() == 0)) {
			miningAppPaymentCacheModel.transactionNumber = null;
		}

		miningAppPaymentCacheModel.miningLeaseApplicationId =
			getMiningLeaseApplicationId();

		return miningAppPaymentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MiningAppPayment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MiningAppPayment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiningAppPayment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(MiningAppPayment)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MiningAppPayment>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MiningAppPayment.class, ModelWrapper.class);

	}

	private long _miningAppPaymentId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _paymentMethod;
	private String _paymentDocId;
	private String _paymentStatus;
	private String _paymentFee;
	private String _amountPaid;
	private String _amountCurrency;
	private String _transactionNumber;
	private long _miningLeaseApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<MiningAppPayment, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MiningAppPayment)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("miningAppPaymentId", _miningAppPaymentId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("paymentMethod", _paymentMethod);
		_columnOriginalValues.put("paymentDocId", _paymentDocId);
		_columnOriginalValues.put("paymentStatus", _paymentStatus);
		_columnOriginalValues.put("paymentFee", _paymentFee);
		_columnOriginalValues.put("amountPaid", _amountPaid);
		_columnOriginalValues.put("amountCurrency", _amountCurrency);
		_columnOriginalValues.put("transactionNumber", _transactionNumber);
		_columnOriginalValues.put(
			"miningLeaseApplicationId", _miningLeaseApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("miningAppPaymentId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("paymentMethod", 128L);

		columnBitmasks.put("paymentDocId", 256L);

		columnBitmasks.put("paymentStatus", 512L);

		columnBitmasks.put("paymentFee", 1024L);

		columnBitmasks.put("amountPaid", 2048L);

		columnBitmasks.put("amountCurrency", 4096L);

		columnBitmasks.put("transactionNumber", 8192L);

		columnBitmasks.put("miningLeaseApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MiningAppPayment _escapedModel;

}