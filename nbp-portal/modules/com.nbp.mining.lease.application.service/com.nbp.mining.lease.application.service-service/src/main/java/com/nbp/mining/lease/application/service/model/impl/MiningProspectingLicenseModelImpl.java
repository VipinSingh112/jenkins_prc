/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.mining.lease.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.mining.lease.application.service.model.MiningProspectingLicense;
import com.nbp.mining.lease.application.service.model.MiningProspectingLicenseModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MiningProspectingLicense service. Represents a row in the &quot;nbp_mining_prospect_license&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MiningProspectingLicenseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MiningProspectingLicenseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MiningProspectingLicenseImpl
 * @generated
 */
@JSON(strict = true)
public class MiningProspectingLicenseModelImpl
	extends BaseModelImpl<MiningProspectingLicense>
	implements MiningProspectingLicenseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mining prospecting license model instance should use the <code>MiningProspectingLicense</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_mining_prospect_license";

	public static final Object[][] TABLE_COLUMNS = {
		{"miningProspectingLicenseId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"nameOfApplicant", Types.VARCHAR},
		{"trnNumber", Types.VARCHAR}, {"nationalityOfApplicant", Types.VARCHAR},
		{"addressInJamaica", Types.VARCHAR}, {"telephoneNumber", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"numberOfApplicant", Types.VARCHAR},
		{"nameOfTheAgent", Types.VARCHAR},
		{"numberOfThisProspecting", Types.VARCHAR},
		{"prospectingRight", Types.VARCHAR}, {"parish", Types.VARCHAR},
		{"licence", Types.VARCHAR}, {"stateTheNearestLandmark", Types.VARCHAR},
		{"approximateArea", Types.VARCHAR},
		{"mineralForWhichApplicant", Types.VARCHAR},
		{"copyOfArticle", Types.VARCHAR},
		{"dateUponTheLocation", Types.TIMESTAMP},
		{"proslicenceFeeCheck", Types.VARCHAR},
		{"dateSurrender", Types.TIMESTAMP},
		{"areaOfApproximately", Types.VARCHAR},
		{"locationBeacon", Types.VARCHAR},
		{"intersectionCoordinates", Types.VARCHAR},
		{"northTopographical", Types.VARCHAR},
		{"eastTopographical", Types.VARCHAR},
		{"firstCornerOfNorth", Types.VARCHAR},
		{"firstCornerOfEast", Types.VARCHAR},
		{"firstCornerApproximateMeter", Types.VARCHAR},
		{"firstCornerApproximateDegree", Types.VARCHAR},
		{"secondCornerOfNorth", Types.VARCHAR},
		{"secondCornerOfEast", Types.VARCHAR},
		{"secondCornerApproximateMeter", Types.VARCHAR},
		{"secondCornerApproximateDegree", Types.VARCHAR},
		{"thirdCornerOfNorth", Types.VARCHAR},
		{"thirdCornerOfEast", Types.VARCHAR},
		{"thirdCornerApproximateMeter", Types.VARCHAR},
		{"thirdCornerApproximateDegree", Types.VARCHAR},
		{"fourthCornerOfNorth", Types.VARCHAR},
		{"fourthCornerOfEast", Types.VARCHAR},
		{"fourthCornerApproximateMeter", Types.VARCHAR},
		{"fourthCornerApproximateDegree", Types.VARCHAR},
		{"fifthCornerOfNorth", Types.VARCHAR},
		{"fifthCornerOfEast", Types.VARCHAR},
		{"fifthCornerApproximateMeter", Types.VARCHAR},
		{"fifthCornerApproximateDegree", Types.VARCHAR},
		{"miningLeaseApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("miningProspectingLicenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nameOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trnNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalityOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressInJamaica", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfTheAgent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfThisProspecting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prospectingRight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateTheNearestLandmark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approximateArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mineralForWhichApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copyOfArticle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateUponTheLocation", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("proslicenceFeeCheck", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateSurrender", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("areaOfApproximately", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationBeacon", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("intersectionCoordinates", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("northTopographical", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eastTopographical", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstCornerOfNorth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstCornerOfEast", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstCornerApproximateMeter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstCornerApproximateDegree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondCornerOfNorth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondCornerOfEast", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondCornerApproximateMeter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondCornerApproximateDegree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thirdCornerOfNorth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thirdCornerOfEast", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thirdCornerApproximateMeter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thirdCornerApproximateDegree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fourthCornerOfNorth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fourthCornerOfEast", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fourthCornerApproximateMeter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fourthCornerApproximateDegree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fifthCornerOfNorth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fifthCornerOfEast", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fifthCornerApproximateMeter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fifthCornerApproximateDegree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("miningLeaseApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_mining_prospect_license (miningProspectingLicenseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nameOfApplicant VARCHAR(75) null,trnNumber VARCHAR(75) null,nationalityOfApplicant VARCHAR(75) null,addressInJamaica VARCHAR(1000) null,telephoneNumber VARCHAR(75) null,emailAddress VARCHAR(75) null,numberOfApplicant VARCHAR(75) null,nameOfTheAgent VARCHAR(75) null,numberOfThisProspecting VARCHAR(75) null,prospectingRight VARCHAR(75) null,parish VARCHAR(75) null,licence VARCHAR(75) null,stateTheNearestLandmark VARCHAR(75) null,approximateArea VARCHAR(75) null,mineralForWhichApplicant VARCHAR(75) null,copyOfArticle VARCHAR(75) null,dateUponTheLocation DATE null,proslicenceFeeCheck VARCHAR(75) null,dateSurrender DATE null,areaOfApproximately VARCHAR(75) null,locationBeacon VARCHAR(75) null,intersectionCoordinates VARCHAR(75) null,northTopographical VARCHAR(75) null,eastTopographical VARCHAR(75) null,firstCornerOfNorth VARCHAR(75) null,firstCornerOfEast VARCHAR(75) null,firstCornerApproximateMeter VARCHAR(75) null,firstCornerApproximateDegree VARCHAR(75) null,secondCornerOfNorth VARCHAR(75) null,secondCornerOfEast VARCHAR(75) null,secondCornerApproximateMeter VARCHAR(75) null,secondCornerApproximateDegree VARCHAR(75) null,thirdCornerOfNorth VARCHAR(75) null,thirdCornerOfEast VARCHAR(75) null,thirdCornerApproximateMeter VARCHAR(75) null,thirdCornerApproximateDegree VARCHAR(75) null,fourthCornerOfNorth VARCHAR(75) null,fourthCornerOfEast VARCHAR(75) null,fourthCornerApproximateMeter VARCHAR(75) null,fourthCornerApproximateDegree VARCHAR(75) null,fifthCornerOfNorth VARCHAR(75) null,fifthCornerOfEast VARCHAR(75) null,fifthCornerApproximateMeter VARCHAR(75) null,fifthCornerApproximateDegree VARCHAR(75) null,miningLeaseApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_mining_prospect_license";

	public static final String ORDER_BY_JPQL =
		" ORDER BY miningProspectingLicense.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_mining_prospect_license.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MININGLEASEAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MiningProspectingLicenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _miningProspectingLicenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMiningProspectingLicenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _miningProspectingLicenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MiningProspectingLicense.class;
	}

	@Override
	public String getModelClassName() {
		return MiningProspectingLicense.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MiningProspectingLicense, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MiningProspectingLicense, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiningProspectingLicense, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MiningProspectingLicense)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MiningProspectingLicense, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MiningProspectingLicense, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MiningProspectingLicense)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MiningProspectingLicense, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MiningProspectingLicense, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<MiningProspectingLicense, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<MiningProspectingLicense, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<MiningProspectingLicense, Object>>();

			attributeGetterFunctions.put(
				"miningProspectingLicenseId",
				MiningProspectingLicense::getMiningProspectingLicenseId);
			attributeGetterFunctions.put(
				"groupId", MiningProspectingLicense::getGroupId);
			attributeGetterFunctions.put(
				"companyId", MiningProspectingLicense::getCompanyId);
			attributeGetterFunctions.put(
				"userId", MiningProspectingLicense::getUserId);
			attributeGetterFunctions.put(
				"userName", MiningProspectingLicense::getUserName);
			attributeGetterFunctions.put(
				"createDate", MiningProspectingLicense::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", MiningProspectingLicense::getModifiedDate);
			attributeGetterFunctions.put(
				"nameOfApplicant",
				MiningProspectingLicense::getNameOfApplicant);
			attributeGetterFunctions.put(
				"trnNumber", MiningProspectingLicense::getTrnNumber);
			attributeGetterFunctions.put(
				"nationalityOfApplicant",
				MiningProspectingLicense::getNationalityOfApplicant);
			attributeGetterFunctions.put(
				"addressInJamaica",
				MiningProspectingLicense::getAddressInJamaica);
			attributeGetterFunctions.put(
				"telephoneNumber",
				MiningProspectingLicense::getTelephoneNumber);
			attributeGetterFunctions.put(
				"emailAddress", MiningProspectingLicense::getEmailAddress);
			attributeGetterFunctions.put(
				"numberOfApplicant",
				MiningProspectingLicense::getNumberOfApplicant);
			attributeGetterFunctions.put(
				"nameOfTheAgent", MiningProspectingLicense::getNameOfTheAgent);
			attributeGetterFunctions.put(
				"numberOfThisProspecting",
				MiningProspectingLicense::getNumberOfThisProspecting);
			attributeGetterFunctions.put(
				"prospectingRight",
				MiningProspectingLicense::getProspectingRight);
			attributeGetterFunctions.put(
				"parish", MiningProspectingLicense::getParish);
			attributeGetterFunctions.put(
				"licence", MiningProspectingLicense::getLicence);
			attributeGetterFunctions.put(
				"stateTheNearestLandmark",
				MiningProspectingLicense::getStateTheNearestLandmark);
			attributeGetterFunctions.put(
				"approximateArea",
				MiningProspectingLicense::getApproximateArea);
			attributeGetterFunctions.put(
				"mineralForWhichApplicant",
				MiningProspectingLicense::getMineralForWhichApplicant);
			attributeGetterFunctions.put(
				"copyOfArticle", MiningProspectingLicense::getCopyOfArticle);
			attributeGetterFunctions.put(
				"dateUponTheLocation",
				MiningProspectingLicense::getDateUponTheLocation);
			attributeGetterFunctions.put(
				"proslicenceFeeCheck",
				MiningProspectingLicense::getProslicenceFeeCheck);
			attributeGetterFunctions.put(
				"dateSurrender", MiningProspectingLicense::getDateSurrender);
			attributeGetterFunctions.put(
				"areaOfApproximately",
				MiningProspectingLicense::getAreaOfApproximately);
			attributeGetterFunctions.put(
				"locationBeacon", MiningProspectingLicense::getLocationBeacon);
			attributeGetterFunctions.put(
				"intersectionCoordinates",
				MiningProspectingLicense::getIntersectionCoordinates);
			attributeGetterFunctions.put(
				"northTopographical",
				MiningProspectingLicense::getNorthTopographical);
			attributeGetterFunctions.put(
				"eastTopographical",
				MiningProspectingLicense::getEastTopographical);
			attributeGetterFunctions.put(
				"firstCornerOfNorth",
				MiningProspectingLicense::getFirstCornerOfNorth);
			attributeGetterFunctions.put(
				"firstCornerOfEast",
				MiningProspectingLicense::getFirstCornerOfEast);
			attributeGetterFunctions.put(
				"firstCornerApproximateMeter",
				MiningProspectingLicense::getFirstCornerApproximateMeter);
			attributeGetterFunctions.put(
				"firstCornerApproximateDegree",
				MiningProspectingLicense::getFirstCornerApproximateDegree);
			attributeGetterFunctions.put(
				"secondCornerOfNorth",
				MiningProspectingLicense::getSecondCornerOfNorth);
			attributeGetterFunctions.put(
				"secondCornerOfEast",
				MiningProspectingLicense::getSecondCornerOfEast);
			attributeGetterFunctions.put(
				"secondCornerApproximateMeter",
				MiningProspectingLicense::getSecondCornerApproximateMeter);
			attributeGetterFunctions.put(
				"secondCornerApproximateDegree",
				MiningProspectingLicense::getSecondCornerApproximateDegree);
			attributeGetterFunctions.put(
				"thirdCornerOfNorth",
				MiningProspectingLicense::getThirdCornerOfNorth);
			attributeGetterFunctions.put(
				"thirdCornerOfEast",
				MiningProspectingLicense::getThirdCornerOfEast);
			attributeGetterFunctions.put(
				"thirdCornerApproximateMeter",
				MiningProspectingLicense::getThirdCornerApproximateMeter);
			attributeGetterFunctions.put(
				"thirdCornerApproximateDegree",
				MiningProspectingLicense::getThirdCornerApproximateDegree);
			attributeGetterFunctions.put(
				"fourthCornerOfNorth",
				MiningProspectingLicense::getFourthCornerOfNorth);
			attributeGetterFunctions.put(
				"fourthCornerOfEast",
				MiningProspectingLicense::getFourthCornerOfEast);
			attributeGetterFunctions.put(
				"fourthCornerApproximateMeter",
				MiningProspectingLicense::getFourthCornerApproximateMeter);
			attributeGetterFunctions.put(
				"fourthCornerApproximateDegree",
				MiningProspectingLicense::getFourthCornerApproximateDegree);
			attributeGetterFunctions.put(
				"fifthCornerOfNorth",
				MiningProspectingLicense::getFifthCornerOfNorth);
			attributeGetterFunctions.put(
				"fifthCornerOfEast",
				MiningProspectingLicense::getFifthCornerOfEast);
			attributeGetterFunctions.put(
				"fifthCornerApproximateMeter",
				MiningProspectingLicense::getFifthCornerApproximateMeter);
			attributeGetterFunctions.put(
				"fifthCornerApproximateDegree",
				MiningProspectingLicense::getFifthCornerApproximateDegree);
			attributeGetterFunctions.put(
				"miningLeaseApplicationId",
				MiningProspectingLicense::getMiningLeaseApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<MiningProspectingLicense, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<MiningProspectingLicense, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<MiningProspectingLicense, ?>>();

			attributeSetterBiConsumers.put(
				"miningProspectingLicenseId",
				(BiConsumer<MiningProspectingLicense, Long>)
					MiningProspectingLicense::setMiningProspectingLicenseId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<MiningProspectingLicense, Long>)
					MiningProspectingLicense::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<MiningProspectingLicense, Long>)
					MiningProspectingLicense::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<MiningProspectingLicense, Long>)
					MiningProspectingLicense::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<MiningProspectingLicense, Date>)
					MiningProspectingLicense::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<MiningProspectingLicense, Date>)
					MiningProspectingLicense::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nameOfApplicant",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setNameOfApplicant);
			attributeSetterBiConsumers.put(
				"trnNumber",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setTrnNumber);
			attributeSetterBiConsumers.put(
				"nationalityOfApplicant",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setNationalityOfApplicant);
			attributeSetterBiConsumers.put(
				"addressInJamaica",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setAddressInJamaica);
			attributeSetterBiConsumers.put(
				"telephoneNumber",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setTelephoneNumber);
			attributeSetterBiConsumers.put(
				"emailAddress",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setEmailAddress);
			attributeSetterBiConsumers.put(
				"numberOfApplicant",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setNumberOfApplicant);
			attributeSetterBiConsumers.put(
				"nameOfTheAgent",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setNameOfTheAgent);
			attributeSetterBiConsumers.put(
				"numberOfThisProspecting",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setNumberOfThisProspecting);
			attributeSetterBiConsumers.put(
				"prospectingRight",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setProspectingRight);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setParish);
			attributeSetterBiConsumers.put(
				"licence",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setLicence);
			attributeSetterBiConsumers.put(
				"stateTheNearestLandmark",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setStateTheNearestLandmark);
			attributeSetterBiConsumers.put(
				"approximateArea",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setApproximateArea);
			attributeSetterBiConsumers.put(
				"mineralForWhichApplicant",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setMineralForWhichApplicant);
			attributeSetterBiConsumers.put(
				"copyOfArticle",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setCopyOfArticle);
			attributeSetterBiConsumers.put(
				"dateUponTheLocation",
				(BiConsumer<MiningProspectingLicense, Date>)
					MiningProspectingLicense::setDateUponTheLocation);
			attributeSetterBiConsumers.put(
				"proslicenceFeeCheck",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setProslicenceFeeCheck);
			attributeSetterBiConsumers.put(
				"dateSurrender",
				(BiConsumer<MiningProspectingLicense, Date>)
					MiningProspectingLicense::setDateSurrender);
			attributeSetterBiConsumers.put(
				"areaOfApproximately",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setAreaOfApproximately);
			attributeSetterBiConsumers.put(
				"locationBeacon",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setLocationBeacon);
			attributeSetterBiConsumers.put(
				"intersectionCoordinates",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setIntersectionCoordinates);
			attributeSetterBiConsumers.put(
				"northTopographical",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setNorthTopographical);
			attributeSetterBiConsumers.put(
				"eastTopographical",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setEastTopographical);
			attributeSetterBiConsumers.put(
				"firstCornerOfNorth",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFirstCornerOfNorth);
			attributeSetterBiConsumers.put(
				"firstCornerOfEast",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFirstCornerOfEast);
			attributeSetterBiConsumers.put(
				"firstCornerApproximateMeter",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFirstCornerApproximateMeter);
			attributeSetterBiConsumers.put(
				"firstCornerApproximateDegree",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFirstCornerApproximateDegree);
			attributeSetterBiConsumers.put(
				"secondCornerOfNorth",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setSecondCornerOfNorth);
			attributeSetterBiConsumers.put(
				"secondCornerOfEast",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setSecondCornerOfEast);
			attributeSetterBiConsumers.put(
				"secondCornerApproximateMeter",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setSecondCornerApproximateMeter);
			attributeSetterBiConsumers.put(
				"secondCornerApproximateDegree",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setSecondCornerApproximateDegree);
			attributeSetterBiConsumers.put(
				"thirdCornerOfNorth",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setThirdCornerOfNorth);
			attributeSetterBiConsumers.put(
				"thirdCornerOfEast",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setThirdCornerOfEast);
			attributeSetterBiConsumers.put(
				"thirdCornerApproximateMeter",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setThirdCornerApproximateMeter);
			attributeSetterBiConsumers.put(
				"thirdCornerApproximateDegree",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setThirdCornerApproximateDegree);
			attributeSetterBiConsumers.put(
				"fourthCornerOfNorth",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFourthCornerOfNorth);
			attributeSetterBiConsumers.put(
				"fourthCornerOfEast",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFourthCornerOfEast);
			attributeSetterBiConsumers.put(
				"fourthCornerApproximateMeter",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFourthCornerApproximateMeter);
			attributeSetterBiConsumers.put(
				"fourthCornerApproximateDegree",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFourthCornerApproximateDegree);
			attributeSetterBiConsumers.put(
				"fifthCornerOfNorth",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFifthCornerOfNorth);
			attributeSetterBiConsumers.put(
				"fifthCornerOfEast",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFifthCornerOfEast);
			attributeSetterBiConsumers.put(
				"fifthCornerApproximateMeter",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFifthCornerApproximateMeter);
			attributeSetterBiConsumers.put(
				"fifthCornerApproximateDegree",
				(BiConsumer<MiningProspectingLicense, String>)
					MiningProspectingLicense::setFifthCornerApproximateDegree);
			attributeSetterBiConsumers.put(
				"miningLeaseApplicationId",
				(BiConsumer<MiningProspectingLicense, Long>)
					MiningProspectingLicense::setMiningLeaseApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMiningProspectingLicenseId() {
		return _miningProspectingLicenseId;
	}

	@Override
	public void setMiningProspectingLicenseId(long miningProspectingLicenseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miningProspectingLicenseId = miningProspectingLicenseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNameOfApplicant() {
		if (_nameOfApplicant == null) {
			return "";
		}
		else {
			return _nameOfApplicant;
		}
	}

	@Override
	public void setNameOfApplicant(String nameOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfApplicant = nameOfApplicant;
	}

	@JSON
	@Override
	public String getTrnNumber() {
		if (_trnNumber == null) {
			return "";
		}
		else {
			return _trnNumber;
		}
	}

	@Override
	public void setTrnNumber(String trnNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trnNumber = trnNumber;
	}

	@JSON
	@Override
	public String getNationalityOfApplicant() {
		if (_nationalityOfApplicant == null) {
			return "";
		}
		else {
			return _nationalityOfApplicant;
		}
	}

	@Override
	public void setNationalityOfApplicant(String nationalityOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalityOfApplicant = nationalityOfApplicant;
	}

	@JSON
	@Override
	public String getAddressInJamaica() {
		if (_addressInJamaica == null) {
			return "";
		}
		else {
			return _addressInJamaica;
		}
	}

	@Override
	public void setAddressInJamaica(String addressInJamaica) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressInJamaica = addressInJamaica;
	}

	@JSON
	@Override
	public String getTelephoneNumber() {
		if (_telephoneNumber == null) {
			return "";
		}
		else {
			return _telephoneNumber;
		}
	}

	@Override
	public void setTelephoneNumber(String telephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneNumber = telephoneNumber;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getNumberOfApplicant() {
		if (_numberOfApplicant == null) {
			return "";
		}
		else {
			return _numberOfApplicant;
		}
	}

	@Override
	public void setNumberOfApplicant(String numberOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfApplicant = numberOfApplicant;
	}

	@JSON
	@Override
	public String getNameOfTheAgent() {
		if (_nameOfTheAgent == null) {
			return "";
		}
		else {
			return _nameOfTheAgent;
		}
	}

	@Override
	public void setNameOfTheAgent(String nameOfTheAgent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfTheAgent = nameOfTheAgent;
	}

	@JSON
	@Override
	public String getNumberOfThisProspecting() {
		if (_numberOfThisProspecting == null) {
			return "";
		}
		else {
			return _numberOfThisProspecting;
		}
	}

	@Override
	public void setNumberOfThisProspecting(String numberOfThisProspecting) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfThisProspecting = numberOfThisProspecting;
	}

	@JSON
	@Override
	public String getProspectingRight() {
		if (_prospectingRight == null) {
			return "";
		}
		else {
			return _prospectingRight;
		}
	}

	@Override
	public void setProspectingRight(String prospectingRight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prospectingRight = prospectingRight;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public String getLicence() {
		if (_licence == null) {
			return "";
		}
		else {
			return _licence;
		}
	}

	@Override
	public void setLicence(String licence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licence = licence;
	}

	@JSON
	@Override
	public String getStateTheNearestLandmark() {
		if (_stateTheNearestLandmark == null) {
			return "";
		}
		else {
			return _stateTheNearestLandmark;
		}
	}

	@Override
	public void setStateTheNearestLandmark(String stateTheNearestLandmark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateTheNearestLandmark = stateTheNearestLandmark;
	}

	@JSON
	@Override
	public String getApproximateArea() {
		if (_approximateArea == null) {
			return "";
		}
		else {
			return _approximateArea;
		}
	}

	@Override
	public void setApproximateArea(String approximateArea) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approximateArea = approximateArea;
	}

	@JSON
	@Override
	public String getMineralForWhichApplicant() {
		if (_mineralForWhichApplicant == null) {
			return "";
		}
		else {
			return _mineralForWhichApplicant;
		}
	}

	@Override
	public void setMineralForWhichApplicant(String mineralForWhichApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mineralForWhichApplicant = mineralForWhichApplicant;
	}

	@JSON
	@Override
	public String getCopyOfArticle() {
		if (_copyOfArticle == null) {
			return "";
		}
		else {
			return _copyOfArticle;
		}
	}

	@Override
	public void setCopyOfArticle(String copyOfArticle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_copyOfArticle = copyOfArticle;
	}

	@JSON
	@Override
	public Date getDateUponTheLocation() {
		return _dateUponTheLocation;
	}

	@Override
	public void setDateUponTheLocation(Date dateUponTheLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateUponTheLocation = dateUponTheLocation;
	}

	@JSON
	@Override
	public String getProslicenceFeeCheck() {
		if (_proslicenceFeeCheck == null) {
			return "";
		}
		else {
			return _proslicenceFeeCheck;
		}
	}

	@Override
	public void setProslicenceFeeCheck(String proslicenceFeeCheck) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proslicenceFeeCheck = proslicenceFeeCheck;
	}

	@JSON
	@Override
	public Date getDateSurrender() {
		return _dateSurrender;
	}

	@Override
	public void setDateSurrender(Date dateSurrender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateSurrender = dateSurrender;
	}

	@JSON
	@Override
	public String getAreaOfApproximately() {
		if (_areaOfApproximately == null) {
			return "";
		}
		else {
			return _areaOfApproximately;
		}
	}

	@Override
	public void setAreaOfApproximately(String areaOfApproximately) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_areaOfApproximately = areaOfApproximately;
	}

	@JSON
	@Override
	public String getLocationBeacon() {
		if (_locationBeacon == null) {
			return "";
		}
		else {
			return _locationBeacon;
		}
	}

	@Override
	public void setLocationBeacon(String locationBeacon) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locationBeacon = locationBeacon;
	}

	@JSON
	@Override
	public String getIntersectionCoordinates() {
		if (_intersectionCoordinates == null) {
			return "";
		}
		else {
			return _intersectionCoordinates;
		}
	}

	@Override
	public void setIntersectionCoordinates(String intersectionCoordinates) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_intersectionCoordinates = intersectionCoordinates;
	}

	@JSON
	@Override
	public String getNorthTopographical() {
		if (_northTopographical == null) {
			return "";
		}
		else {
			return _northTopographical;
		}
	}

	@Override
	public void setNorthTopographical(String northTopographical) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_northTopographical = northTopographical;
	}

	@JSON
	@Override
	public String getEastTopographical() {
		if (_eastTopographical == null) {
			return "";
		}
		else {
			return _eastTopographical;
		}
	}

	@Override
	public void setEastTopographical(String eastTopographical) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eastTopographical = eastTopographical;
	}

	@JSON
	@Override
	public String getFirstCornerOfNorth() {
		if (_firstCornerOfNorth == null) {
			return "";
		}
		else {
			return _firstCornerOfNorth;
		}
	}

	@Override
	public void setFirstCornerOfNorth(String firstCornerOfNorth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstCornerOfNorth = firstCornerOfNorth;
	}

	@JSON
	@Override
	public String getFirstCornerOfEast() {
		if (_firstCornerOfEast == null) {
			return "";
		}
		else {
			return _firstCornerOfEast;
		}
	}

	@Override
	public void setFirstCornerOfEast(String firstCornerOfEast) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstCornerOfEast = firstCornerOfEast;
	}

	@JSON
	@Override
	public String getFirstCornerApproximateMeter() {
		if (_firstCornerApproximateMeter == null) {
			return "";
		}
		else {
			return _firstCornerApproximateMeter;
		}
	}

	@Override
	public void setFirstCornerApproximateMeter(
		String firstCornerApproximateMeter) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstCornerApproximateMeter = firstCornerApproximateMeter;
	}

	@JSON
	@Override
	public String getFirstCornerApproximateDegree() {
		if (_firstCornerApproximateDegree == null) {
			return "";
		}
		else {
			return _firstCornerApproximateDegree;
		}
	}

	@Override
	public void setFirstCornerApproximateDegree(
		String firstCornerApproximateDegree) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstCornerApproximateDegree = firstCornerApproximateDegree;
	}

	@JSON
	@Override
	public String getSecondCornerOfNorth() {
		if (_secondCornerOfNorth == null) {
			return "";
		}
		else {
			return _secondCornerOfNorth;
		}
	}

	@Override
	public void setSecondCornerOfNorth(String secondCornerOfNorth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondCornerOfNorth = secondCornerOfNorth;
	}

	@JSON
	@Override
	public String getSecondCornerOfEast() {
		if (_secondCornerOfEast == null) {
			return "";
		}
		else {
			return _secondCornerOfEast;
		}
	}

	@Override
	public void setSecondCornerOfEast(String secondCornerOfEast) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondCornerOfEast = secondCornerOfEast;
	}

	@JSON
	@Override
	public String getSecondCornerApproximateMeter() {
		if (_secondCornerApproximateMeter == null) {
			return "";
		}
		else {
			return _secondCornerApproximateMeter;
		}
	}

	@Override
	public void setSecondCornerApproximateMeter(
		String secondCornerApproximateMeter) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondCornerApproximateMeter = secondCornerApproximateMeter;
	}

	@JSON
	@Override
	public String getSecondCornerApproximateDegree() {
		if (_secondCornerApproximateDegree == null) {
			return "";
		}
		else {
			return _secondCornerApproximateDegree;
		}
	}

	@Override
	public void setSecondCornerApproximateDegree(
		String secondCornerApproximateDegree) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondCornerApproximateDegree = secondCornerApproximateDegree;
	}

	@JSON
	@Override
	public String getThirdCornerOfNorth() {
		if (_thirdCornerOfNorth == null) {
			return "";
		}
		else {
			return _thirdCornerOfNorth;
		}
	}

	@Override
	public void setThirdCornerOfNorth(String thirdCornerOfNorth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thirdCornerOfNorth = thirdCornerOfNorth;
	}

	@JSON
	@Override
	public String getThirdCornerOfEast() {
		if (_thirdCornerOfEast == null) {
			return "";
		}
		else {
			return _thirdCornerOfEast;
		}
	}

	@Override
	public void setThirdCornerOfEast(String thirdCornerOfEast) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thirdCornerOfEast = thirdCornerOfEast;
	}

	@JSON
	@Override
	public String getThirdCornerApproximateMeter() {
		if (_thirdCornerApproximateMeter == null) {
			return "";
		}
		else {
			return _thirdCornerApproximateMeter;
		}
	}

	@Override
	public void setThirdCornerApproximateMeter(
		String thirdCornerApproximateMeter) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thirdCornerApproximateMeter = thirdCornerApproximateMeter;
	}

	@JSON
	@Override
	public String getThirdCornerApproximateDegree() {
		if (_thirdCornerApproximateDegree == null) {
			return "";
		}
		else {
			return _thirdCornerApproximateDegree;
		}
	}

	@Override
	public void setThirdCornerApproximateDegree(
		String thirdCornerApproximateDegree) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thirdCornerApproximateDegree = thirdCornerApproximateDegree;
	}

	@JSON
	@Override
	public String getFourthCornerOfNorth() {
		if (_fourthCornerOfNorth == null) {
			return "";
		}
		else {
			return _fourthCornerOfNorth;
		}
	}

	@Override
	public void setFourthCornerOfNorth(String fourthCornerOfNorth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fourthCornerOfNorth = fourthCornerOfNorth;
	}

	@JSON
	@Override
	public String getFourthCornerOfEast() {
		if (_fourthCornerOfEast == null) {
			return "";
		}
		else {
			return _fourthCornerOfEast;
		}
	}

	@Override
	public void setFourthCornerOfEast(String fourthCornerOfEast) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fourthCornerOfEast = fourthCornerOfEast;
	}

	@JSON
	@Override
	public String getFourthCornerApproximateMeter() {
		if (_fourthCornerApproximateMeter == null) {
			return "";
		}
		else {
			return _fourthCornerApproximateMeter;
		}
	}

	@Override
	public void setFourthCornerApproximateMeter(
		String fourthCornerApproximateMeter) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fourthCornerApproximateMeter = fourthCornerApproximateMeter;
	}

	@JSON
	@Override
	public String getFourthCornerApproximateDegree() {
		if (_fourthCornerApproximateDegree == null) {
			return "";
		}
		else {
			return _fourthCornerApproximateDegree;
		}
	}

	@Override
	public void setFourthCornerApproximateDegree(
		String fourthCornerApproximateDegree) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fourthCornerApproximateDegree = fourthCornerApproximateDegree;
	}

	@JSON
	@Override
	public String getFifthCornerOfNorth() {
		if (_fifthCornerOfNorth == null) {
			return "";
		}
		else {
			return _fifthCornerOfNorth;
		}
	}

	@Override
	public void setFifthCornerOfNorth(String fifthCornerOfNorth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fifthCornerOfNorth = fifthCornerOfNorth;
	}

	@JSON
	@Override
	public String getFifthCornerOfEast() {
		if (_fifthCornerOfEast == null) {
			return "";
		}
		else {
			return _fifthCornerOfEast;
		}
	}

	@Override
	public void setFifthCornerOfEast(String fifthCornerOfEast) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fifthCornerOfEast = fifthCornerOfEast;
	}

	@JSON
	@Override
	public String getFifthCornerApproximateMeter() {
		if (_fifthCornerApproximateMeter == null) {
			return "";
		}
		else {
			return _fifthCornerApproximateMeter;
		}
	}

	@Override
	public void setFifthCornerApproximateMeter(
		String fifthCornerApproximateMeter) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fifthCornerApproximateMeter = fifthCornerApproximateMeter;
	}

	@JSON
	@Override
	public String getFifthCornerApproximateDegree() {
		if (_fifthCornerApproximateDegree == null) {
			return "";
		}
		else {
			return _fifthCornerApproximateDegree;
		}
	}

	@Override
	public void setFifthCornerApproximateDegree(
		String fifthCornerApproximateDegree) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fifthCornerApproximateDegree = fifthCornerApproximateDegree;
	}

	@JSON
	@Override
	public long getMiningLeaseApplicationId() {
		return _miningLeaseApplicationId;
	}

	@Override
	public void setMiningLeaseApplicationId(long miningLeaseApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_miningLeaseApplicationId = miningLeaseApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMiningLeaseApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("miningLeaseApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MiningProspectingLicense.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MiningProspectingLicense toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MiningProspectingLicense>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MiningProspectingLicenseImpl miningProspectingLicenseImpl =
			new MiningProspectingLicenseImpl();

		miningProspectingLicenseImpl.setMiningProspectingLicenseId(
			getMiningProspectingLicenseId());
		miningProspectingLicenseImpl.setGroupId(getGroupId());
		miningProspectingLicenseImpl.setCompanyId(getCompanyId());
		miningProspectingLicenseImpl.setUserId(getUserId());
		miningProspectingLicenseImpl.setUserName(getUserName());
		miningProspectingLicenseImpl.setCreateDate(getCreateDate());
		miningProspectingLicenseImpl.setModifiedDate(getModifiedDate());
		miningProspectingLicenseImpl.setNameOfApplicant(getNameOfApplicant());
		miningProspectingLicenseImpl.setTrnNumber(getTrnNumber());
		miningProspectingLicenseImpl.setNationalityOfApplicant(
			getNationalityOfApplicant());
		miningProspectingLicenseImpl.setAddressInJamaica(getAddressInJamaica());
		miningProspectingLicenseImpl.setTelephoneNumber(getTelephoneNumber());
		miningProspectingLicenseImpl.setEmailAddress(getEmailAddress());
		miningProspectingLicenseImpl.setNumberOfApplicant(
			getNumberOfApplicant());
		miningProspectingLicenseImpl.setNameOfTheAgent(getNameOfTheAgent());
		miningProspectingLicenseImpl.setNumberOfThisProspecting(
			getNumberOfThisProspecting());
		miningProspectingLicenseImpl.setProspectingRight(getProspectingRight());
		miningProspectingLicenseImpl.setParish(getParish());
		miningProspectingLicenseImpl.setLicence(getLicence());
		miningProspectingLicenseImpl.setStateTheNearestLandmark(
			getStateTheNearestLandmark());
		miningProspectingLicenseImpl.setApproximateArea(getApproximateArea());
		miningProspectingLicenseImpl.setMineralForWhichApplicant(
			getMineralForWhichApplicant());
		miningProspectingLicenseImpl.setCopyOfArticle(getCopyOfArticle());
		miningProspectingLicenseImpl.setDateUponTheLocation(
			getDateUponTheLocation());
		miningProspectingLicenseImpl.setProslicenceFeeCheck(
			getProslicenceFeeCheck());
		miningProspectingLicenseImpl.setDateSurrender(getDateSurrender());
		miningProspectingLicenseImpl.setAreaOfApproximately(
			getAreaOfApproximately());
		miningProspectingLicenseImpl.setLocationBeacon(getLocationBeacon());
		miningProspectingLicenseImpl.setIntersectionCoordinates(
			getIntersectionCoordinates());
		miningProspectingLicenseImpl.setNorthTopographical(
			getNorthTopographical());
		miningProspectingLicenseImpl.setEastTopographical(
			getEastTopographical());
		miningProspectingLicenseImpl.setFirstCornerOfNorth(
			getFirstCornerOfNorth());
		miningProspectingLicenseImpl.setFirstCornerOfEast(
			getFirstCornerOfEast());
		miningProspectingLicenseImpl.setFirstCornerApproximateMeter(
			getFirstCornerApproximateMeter());
		miningProspectingLicenseImpl.setFirstCornerApproximateDegree(
			getFirstCornerApproximateDegree());
		miningProspectingLicenseImpl.setSecondCornerOfNorth(
			getSecondCornerOfNorth());
		miningProspectingLicenseImpl.setSecondCornerOfEast(
			getSecondCornerOfEast());
		miningProspectingLicenseImpl.setSecondCornerApproximateMeter(
			getSecondCornerApproximateMeter());
		miningProspectingLicenseImpl.setSecondCornerApproximateDegree(
			getSecondCornerApproximateDegree());
		miningProspectingLicenseImpl.setThirdCornerOfNorth(
			getThirdCornerOfNorth());
		miningProspectingLicenseImpl.setThirdCornerOfEast(
			getThirdCornerOfEast());
		miningProspectingLicenseImpl.setThirdCornerApproximateMeter(
			getThirdCornerApproximateMeter());
		miningProspectingLicenseImpl.setThirdCornerApproximateDegree(
			getThirdCornerApproximateDegree());
		miningProspectingLicenseImpl.setFourthCornerOfNorth(
			getFourthCornerOfNorth());
		miningProspectingLicenseImpl.setFourthCornerOfEast(
			getFourthCornerOfEast());
		miningProspectingLicenseImpl.setFourthCornerApproximateMeter(
			getFourthCornerApproximateMeter());
		miningProspectingLicenseImpl.setFourthCornerApproximateDegree(
			getFourthCornerApproximateDegree());
		miningProspectingLicenseImpl.setFifthCornerOfNorth(
			getFifthCornerOfNorth());
		miningProspectingLicenseImpl.setFifthCornerOfEast(
			getFifthCornerOfEast());
		miningProspectingLicenseImpl.setFifthCornerApproximateMeter(
			getFifthCornerApproximateMeter());
		miningProspectingLicenseImpl.setFifthCornerApproximateDegree(
			getFifthCornerApproximateDegree());
		miningProspectingLicenseImpl.setMiningLeaseApplicationId(
			getMiningLeaseApplicationId());

		miningProspectingLicenseImpl.resetOriginalValues();

		return miningProspectingLicenseImpl;
	}

	@Override
	public MiningProspectingLicense cloneWithOriginalValues() {
		MiningProspectingLicenseImpl miningProspectingLicenseImpl =
			new MiningProspectingLicenseImpl();

		miningProspectingLicenseImpl.setMiningProspectingLicenseId(
			this.<Long>getColumnOriginalValue("miningProspectingLicenseId"));
		miningProspectingLicenseImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		miningProspectingLicenseImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		miningProspectingLicenseImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		miningProspectingLicenseImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		miningProspectingLicenseImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		miningProspectingLicenseImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		miningProspectingLicenseImpl.setNameOfApplicant(
			this.<String>getColumnOriginalValue("nameOfApplicant"));
		miningProspectingLicenseImpl.setTrnNumber(
			this.<String>getColumnOriginalValue("trnNumber"));
		miningProspectingLicenseImpl.setNationalityOfApplicant(
			this.<String>getColumnOriginalValue("nationalityOfApplicant"));
		miningProspectingLicenseImpl.setAddressInJamaica(
			this.<String>getColumnOriginalValue("addressInJamaica"));
		miningProspectingLicenseImpl.setTelephoneNumber(
			this.<String>getColumnOriginalValue("telephoneNumber"));
		miningProspectingLicenseImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		miningProspectingLicenseImpl.setNumberOfApplicant(
			this.<String>getColumnOriginalValue("numberOfApplicant"));
		miningProspectingLicenseImpl.setNameOfTheAgent(
			this.<String>getColumnOriginalValue("nameOfTheAgent"));
		miningProspectingLicenseImpl.setNumberOfThisProspecting(
			this.<String>getColumnOriginalValue("numberOfThisProspecting"));
		miningProspectingLicenseImpl.setProspectingRight(
			this.<String>getColumnOriginalValue("prospectingRight"));
		miningProspectingLicenseImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		miningProspectingLicenseImpl.setLicence(
			this.<String>getColumnOriginalValue("licence"));
		miningProspectingLicenseImpl.setStateTheNearestLandmark(
			this.<String>getColumnOriginalValue("stateTheNearestLandmark"));
		miningProspectingLicenseImpl.setApproximateArea(
			this.<String>getColumnOriginalValue("approximateArea"));
		miningProspectingLicenseImpl.setMineralForWhichApplicant(
			this.<String>getColumnOriginalValue("mineralForWhichApplicant"));
		miningProspectingLicenseImpl.setCopyOfArticle(
			this.<String>getColumnOriginalValue("copyOfArticle"));
		miningProspectingLicenseImpl.setDateUponTheLocation(
			this.<Date>getColumnOriginalValue("dateUponTheLocation"));
		miningProspectingLicenseImpl.setProslicenceFeeCheck(
			this.<String>getColumnOriginalValue("proslicenceFeeCheck"));
		miningProspectingLicenseImpl.setDateSurrender(
			this.<Date>getColumnOriginalValue("dateSurrender"));
		miningProspectingLicenseImpl.setAreaOfApproximately(
			this.<String>getColumnOriginalValue("areaOfApproximately"));
		miningProspectingLicenseImpl.setLocationBeacon(
			this.<String>getColumnOriginalValue("locationBeacon"));
		miningProspectingLicenseImpl.setIntersectionCoordinates(
			this.<String>getColumnOriginalValue("intersectionCoordinates"));
		miningProspectingLicenseImpl.setNorthTopographical(
			this.<String>getColumnOriginalValue("northTopographical"));
		miningProspectingLicenseImpl.setEastTopographical(
			this.<String>getColumnOriginalValue("eastTopographical"));
		miningProspectingLicenseImpl.setFirstCornerOfNorth(
			this.<String>getColumnOriginalValue("firstCornerOfNorth"));
		miningProspectingLicenseImpl.setFirstCornerOfEast(
			this.<String>getColumnOriginalValue("firstCornerOfEast"));
		miningProspectingLicenseImpl.setFirstCornerApproximateMeter(
			this.<String>getColumnOriginalValue("firstCornerApproximateMeter"));
		miningProspectingLicenseImpl.setFirstCornerApproximateDegree(
			this.<String>getColumnOriginalValue(
				"firstCornerApproximateDegree"));
		miningProspectingLicenseImpl.setSecondCornerOfNorth(
			this.<String>getColumnOriginalValue("secondCornerOfNorth"));
		miningProspectingLicenseImpl.setSecondCornerOfEast(
			this.<String>getColumnOriginalValue("secondCornerOfEast"));
		miningProspectingLicenseImpl.setSecondCornerApproximateMeter(
			this.<String>getColumnOriginalValue(
				"secondCornerApproximateMeter"));
		miningProspectingLicenseImpl.setSecondCornerApproximateDegree(
			this.<String>getColumnOriginalValue(
				"secondCornerApproximateDegree"));
		miningProspectingLicenseImpl.setThirdCornerOfNorth(
			this.<String>getColumnOriginalValue("thirdCornerOfNorth"));
		miningProspectingLicenseImpl.setThirdCornerOfEast(
			this.<String>getColumnOriginalValue("thirdCornerOfEast"));
		miningProspectingLicenseImpl.setThirdCornerApproximateMeter(
			this.<String>getColumnOriginalValue("thirdCornerApproximateMeter"));
		miningProspectingLicenseImpl.setThirdCornerApproximateDegree(
			this.<String>getColumnOriginalValue(
				"thirdCornerApproximateDegree"));
		miningProspectingLicenseImpl.setFourthCornerOfNorth(
			this.<String>getColumnOriginalValue("fourthCornerOfNorth"));
		miningProspectingLicenseImpl.setFourthCornerOfEast(
			this.<String>getColumnOriginalValue("fourthCornerOfEast"));
		miningProspectingLicenseImpl.setFourthCornerApproximateMeter(
			this.<String>getColumnOriginalValue(
				"fourthCornerApproximateMeter"));
		miningProspectingLicenseImpl.setFourthCornerApproximateDegree(
			this.<String>getColumnOriginalValue(
				"fourthCornerApproximateDegree"));
		miningProspectingLicenseImpl.setFifthCornerOfNorth(
			this.<String>getColumnOriginalValue("fifthCornerOfNorth"));
		miningProspectingLicenseImpl.setFifthCornerOfEast(
			this.<String>getColumnOriginalValue("fifthCornerOfEast"));
		miningProspectingLicenseImpl.setFifthCornerApproximateMeter(
			this.<String>getColumnOriginalValue("fifthCornerApproximateMeter"));
		miningProspectingLicenseImpl.setFifthCornerApproximateDegree(
			this.<String>getColumnOriginalValue(
				"fifthCornerApproximateDegree"));
		miningProspectingLicenseImpl.setMiningLeaseApplicationId(
			this.<Long>getColumnOriginalValue("miningLeaseApplicationId"));

		return miningProspectingLicenseImpl;
	}

	@Override
	public int compareTo(MiningProspectingLicense miningProspectingLicense) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), miningProspectingLicense.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MiningProspectingLicense)) {
			return false;
		}

		MiningProspectingLicense miningProspectingLicense =
			(MiningProspectingLicense)object;

		long primaryKey = miningProspectingLicense.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MiningProspectingLicense> toCacheModel() {
		MiningProspectingLicenseCacheModel miningProspectingLicenseCacheModel =
			new MiningProspectingLicenseCacheModel();

		miningProspectingLicenseCacheModel.miningProspectingLicenseId =
			getMiningProspectingLicenseId();

		miningProspectingLicenseCacheModel.groupId = getGroupId();

		miningProspectingLicenseCacheModel.companyId = getCompanyId();

		miningProspectingLicenseCacheModel.userId = getUserId();

		miningProspectingLicenseCacheModel.userName = getUserName();

		String userName = miningProspectingLicenseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			miningProspectingLicenseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			miningProspectingLicenseCacheModel.createDate =
				createDate.getTime();
		}
		else {
			miningProspectingLicenseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			miningProspectingLicenseCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			miningProspectingLicenseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		miningProspectingLicenseCacheModel.nameOfApplicant =
			getNameOfApplicant();

		String nameOfApplicant =
			miningProspectingLicenseCacheModel.nameOfApplicant;

		if ((nameOfApplicant != null) && (nameOfApplicant.length() == 0)) {
			miningProspectingLicenseCacheModel.nameOfApplicant = null;
		}

		miningProspectingLicenseCacheModel.trnNumber = getTrnNumber();

		String trnNumber = miningProspectingLicenseCacheModel.trnNumber;

		if ((trnNumber != null) && (trnNumber.length() == 0)) {
			miningProspectingLicenseCacheModel.trnNumber = null;
		}

		miningProspectingLicenseCacheModel.nationalityOfApplicant =
			getNationalityOfApplicant();

		String nationalityOfApplicant =
			miningProspectingLicenseCacheModel.nationalityOfApplicant;

		if ((nationalityOfApplicant != null) &&
			(nationalityOfApplicant.length() == 0)) {

			miningProspectingLicenseCacheModel.nationalityOfApplicant = null;
		}

		miningProspectingLicenseCacheModel.addressInJamaica =
			getAddressInJamaica();

		String addressInJamaica =
			miningProspectingLicenseCacheModel.addressInJamaica;

		if ((addressInJamaica != null) && (addressInJamaica.length() == 0)) {
			miningProspectingLicenseCacheModel.addressInJamaica = null;
		}

		miningProspectingLicenseCacheModel.telephoneNumber =
			getTelephoneNumber();

		String telephoneNumber =
			miningProspectingLicenseCacheModel.telephoneNumber;

		if ((telephoneNumber != null) && (telephoneNumber.length() == 0)) {
			miningProspectingLicenseCacheModel.telephoneNumber = null;
		}

		miningProspectingLicenseCacheModel.emailAddress = getEmailAddress();

		String emailAddress = miningProspectingLicenseCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			miningProspectingLicenseCacheModel.emailAddress = null;
		}

		miningProspectingLicenseCacheModel.numberOfApplicant =
			getNumberOfApplicant();

		String numberOfApplicant =
			miningProspectingLicenseCacheModel.numberOfApplicant;

		if ((numberOfApplicant != null) && (numberOfApplicant.length() == 0)) {
			miningProspectingLicenseCacheModel.numberOfApplicant = null;
		}

		miningProspectingLicenseCacheModel.nameOfTheAgent = getNameOfTheAgent();

		String nameOfTheAgent =
			miningProspectingLicenseCacheModel.nameOfTheAgent;

		if ((nameOfTheAgent != null) && (nameOfTheAgent.length() == 0)) {
			miningProspectingLicenseCacheModel.nameOfTheAgent = null;
		}

		miningProspectingLicenseCacheModel.numberOfThisProspecting =
			getNumberOfThisProspecting();

		String numberOfThisProspecting =
			miningProspectingLicenseCacheModel.numberOfThisProspecting;

		if ((numberOfThisProspecting != null) &&
			(numberOfThisProspecting.length() == 0)) {

			miningProspectingLicenseCacheModel.numberOfThisProspecting = null;
		}

		miningProspectingLicenseCacheModel.prospectingRight =
			getProspectingRight();

		String prospectingRight =
			miningProspectingLicenseCacheModel.prospectingRight;

		if ((prospectingRight != null) && (prospectingRight.length() == 0)) {
			miningProspectingLicenseCacheModel.prospectingRight = null;
		}

		miningProspectingLicenseCacheModel.parish = getParish();

		String parish = miningProspectingLicenseCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			miningProspectingLicenseCacheModel.parish = null;
		}

		miningProspectingLicenseCacheModel.licence = getLicence();

		String licence = miningProspectingLicenseCacheModel.licence;

		if ((licence != null) && (licence.length() == 0)) {
			miningProspectingLicenseCacheModel.licence = null;
		}

		miningProspectingLicenseCacheModel.stateTheNearestLandmark =
			getStateTheNearestLandmark();

		String stateTheNearestLandmark =
			miningProspectingLicenseCacheModel.stateTheNearestLandmark;

		if ((stateTheNearestLandmark != null) &&
			(stateTheNearestLandmark.length() == 0)) {

			miningProspectingLicenseCacheModel.stateTheNearestLandmark = null;
		}

		miningProspectingLicenseCacheModel.approximateArea =
			getApproximateArea();

		String approximateArea =
			miningProspectingLicenseCacheModel.approximateArea;

		if ((approximateArea != null) && (approximateArea.length() == 0)) {
			miningProspectingLicenseCacheModel.approximateArea = null;
		}

		miningProspectingLicenseCacheModel.mineralForWhichApplicant =
			getMineralForWhichApplicant();

		String mineralForWhichApplicant =
			miningProspectingLicenseCacheModel.mineralForWhichApplicant;

		if ((mineralForWhichApplicant != null) &&
			(mineralForWhichApplicant.length() == 0)) {

			miningProspectingLicenseCacheModel.mineralForWhichApplicant = null;
		}

		miningProspectingLicenseCacheModel.copyOfArticle = getCopyOfArticle();

		String copyOfArticle = miningProspectingLicenseCacheModel.copyOfArticle;

		if ((copyOfArticle != null) && (copyOfArticle.length() == 0)) {
			miningProspectingLicenseCacheModel.copyOfArticle = null;
		}

		Date dateUponTheLocation = getDateUponTheLocation();

		if (dateUponTheLocation != null) {
			miningProspectingLicenseCacheModel.dateUponTheLocation =
				dateUponTheLocation.getTime();
		}
		else {
			miningProspectingLicenseCacheModel.dateUponTheLocation =
				Long.MIN_VALUE;
		}

		miningProspectingLicenseCacheModel.proslicenceFeeCheck =
			getProslicenceFeeCheck();

		String proslicenceFeeCheck =
			miningProspectingLicenseCacheModel.proslicenceFeeCheck;

		if ((proslicenceFeeCheck != null) &&
			(proslicenceFeeCheck.length() == 0)) {

			miningProspectingLicenseCacheModel.proslicenceFeeCheck = null;
		}

		Date dateSurrender = getDateSurrender();

		if (dateSurrender != null) {
			miningProspectingLicenseCacheModel.dateSurrender =
				dateSurrender.getTime();
		}
		else {
			miningProspectingLicenseCacheModel.dateSurrender = Long.MIN_VALUE;
		}

		miningProspectingLicenseCacheModel.areaOfApproximately =
			getAreaOfApproximately();

		String areaOfApproximately =
			miningProspectingLicenseCacheModel.areaOfApproximately;

		if ((areaOfApproximately != null) &&
			(areaOfApproximately.length() == 0)) {

			miningProspectingLicenseCacheModel.areaOfApproximately = null;
		}

		miningProspectingLicenseCacheModel.locationBeacon = getLocationBeacon();

		String locationBeacon =
			miningProspectingLicenseCacheModel.locationBeacon;

		if ((locationBeacon != null) && (locationBeacon.length() == 0)) {
			miningProspectingLicenseCacheModel.locationBeacon = null;
		}

		miningProspectingLicenseCacheModel.intersectionCoordinates =
			getIntersectionCoordinates();

		String intersectionCoordinates =
			miningProspectingLicenseCacheModel.intersectionCoordinates;

		if ((intersectionCoordinates != null) &&
			(intersectionCoordinates.length() == 0)) {

			miningProspectingLicenseCacheModel.intersectionCoordinates = null;
		}

		miningProspectingLicenseCacheModel.northTopographical =
			getNorthTopographical();

		String northTopographical =
			miningProspectingLicenseCacheModel.northTopographical;

		if ((northTopographical != null) &&
			(northTopographical.length() == 0)) {

			miningProspectingLicenseCacheModel.northTopographical = null;
		}

		miningProspectingLicenseCacheModel.eastTopographical =
			getEastTopographical();

		String eastTopographical =
			miningProspectingLicenseCacheModel.eastTopographical;

		if ((eastTopographical != null) && (eastTopographical.length() == 0)) {
			miningProspectingLicenseCacheModel.eastTopographical = null;
		}

		miningProspectingLicenseCacheModel.firstCornerOfNorth =
			getFirstCornerOfNorth();

		String firstCornerOfNorth =
			miningProspectingLicenseCacheModel.firstCornerOfNorth;

		if ((firstCornerOfNorth != null) &&
			(firstCornerOfNorth.length() == 0)) {

			miningProspectingLicenseCacheModel.firstCornerOfNorth = null;
		}

		miningProspectingLicenseCacheModel.firstCornerOfEast =
			getFirstCornerOfEast();

		String firstCornerOfEast =
			miningProspectingLicenseCacheModel.firstCornerOfEast;

		if ((firstCornerOfEast != null) && (firstCornerOfEast.length() == 0)) {
			miningProspectingLicenseCacheModel.firstCornerOfEast = null;
		}

		miningProspectingLicenseCacheModel.firstCornerApproximateMeter =
			getFirstCornerApproximateMeter();

		String firstCornerApproximateMeter =
			miningProspectingLicenseCacheModel.firstCornerApproximateMeter;

		if ((firstCornerApproximateMeter != null) &&
			(firstCornerApproximateMeter.length() == 0)) {

			miningProspectingLicenseCacheModel.firstCornerApproximateMeter =
				null;
		}

		miningProspectingLicenseCacheModel.firstCornerApproximateDegree =
			getFirstCornerApproximateDegree();

		String firstCornerApproximateDegree =
			miningProspectingLicenseCacheModel.firstCornerApproximateDegree;

		if ((firstCornerApproximateDegree != null) &&
			(firstCornerApproximateDegree.length() == 0)) {

			miningProspectingLicenseCacheModel.firstCornerApproximateDegree =
				null;
		}

		miningProspectingLicenseCacheModel.secondCornerOfNorth =
			getSecondCornerOfNorth();

		String secondCornerOfNorth =
			miningProspectingLicenseCacheModel.secondCornerOfNorth;

		if ((secondCornerOfNorth != null) &&
			(secondCornerOfNorth.length() == 0)) {

			miningProspectingLicenseCacheModel.secondCornerOfNorth = null;
		}

		miningProspectingLicenseCacheModel.secondCornerOfEast =
			getSecondCornerOfEast();

		String secondCornerOfEast =
			miningProspectingLicenseCacheModel.secondCornerOfEast;

		if ((secondCornerOfEast != null) &&
			(secondCornerOfEast.length() == 0)) {

			miningProspectingLicenseCacheModel.secondCornerOfEast = null;
		}

		miningProspectingLicenseCacheModel.secondCornerApproximateMeter =
			getSecondCornerApproximateMeter();

		String secondCornerApproximateMeter =
			miningProspectingLicenseCacheModel.secondCornerApproximateMeter;

		if ((secondCornerApproximateMeter != null) &&
			(secondCornerApproximateMeter.length() == 0)) {

			miningProspectingLicenseCacheModel.secondCornerApproximateMeter =
				null;
		}

		miningProspectingLicenseCacheModel.secondCornerApproximateDegree =
			getSecondCornerApproximateDegree();

		String secondCornerApproximateDegree =
			miningProspectingLicenseCacheModel.secondCornerApproximateDegree;

		if ((secondCornerApproximateDegree != null) &&
			(secondCornerApproximateDegree.length() == 0)) {

			miningProspectingLicenseCacheModel.secondCornerApproximateDegree =
				null;
		}

		miningProspectingLicenseCacheModel.thirdCornerOfNorth =
			getThirdCornerOfNorth();

		String thirdCornerOfNorth =
			miningProspectingLicenseCacheModel.thirdCornerOfNorth;

		if ((thirdCornerOfNorth != null) &&
			(thirdCornerOfNorth.length() == 0)) {

			miningProspectingLicenseCacheModel.thirdCornerOfNorth = null;
		}

		miningProspectingLicenseCacheModel.thirdCornerOfEast =
			getThirdCornerOfEast();

		String thirdCornerOfEast =
			miningProspectingLicenseCacheModel.thirdCornerOfEast;

		if ((thirdCornerOfEast != null) && (thirdCornerOfEast.length() == 0)) {
			miningProspectingLicenseCacheModel.thirdCornerOfEast = null;
		}

		miningProspectingLicenseCacheModel.thirdCornerApproximateMeter =
			getThirdCornerApproximateMeter();

		String thirdCornerApproximateMeter =
			miningProspectingLicenseCacheModel.thirdCornerApproximateMeter;

		if ((thirdCornerApproximateMeter != null) &&
			(thirdCornerApproximateMeter.length() == 0)) {

			miningProspectingLicenseCacheModel.thirdCornerApproximateMeter =
				null;
		}

		miningProspectingLicenseCacheModel.thirdCornerApproximateDegree =
			getThirdCornerApproximateDegree();

		String thirdCornerApproximateDegree =
			miningProspectingLicenseCacheModel.thirdCornerApproximateDegree;

		if ((thirdCornerApproximateDegree != null) &&
			(thirdCornerApproximateDegree.length() == 0)) {

			miningProspectingLicenseCacheModel.thirdCornerApproximateDegree =
				null;
		}

		miningProspectingLicenseCacheModel.fourthCornerOfNorth =
			getFourthCornerOfNorth();

		String fourthCornerOfNorth =
			miningProspectingLicenseCacheModel.fourthCornerOfNorth;

		if ((fourthCornerOfNorth != null) &&
			(fourthCornerOfNorth.length() == 0)) {

			miningProspectingLicenseCacheModel.fourthCornerOfNorth = null;
		}

		miningProspectingLicenseCacheModel.fourthCornerOfEast =
			getFourthCornerOfEast();

		String fourthCornerOfEast =
			miningProspectingLicenseCacheModel.fourthCornerOfEast;

		if ((fourthCornerOfEast != null) &&
			(fourthCornerOfEast.length() == 0)) {

			miningProspectingLicenseCacheModel.fourthCornerOfEast = null;
		}

		miningProspectingLicenseCacheModel.fourthCornerApproximateMeter =
			getFourthCornerApproximateMeter();

		String fourthCornerApproximateMeter =
			miningProspectingLicenseCacheModel.fourthCornerApproximateMeter;

		if ((fourthCornerApproximateMeter != null) &&
			(fourthCornerApproximateMeter.length() == 0)) {

			miningProspectingLicenseCacheModel.fourthCornerApproximateMeter =
				null;
		}

		miningProspectingLicenseCacheModel.fourthCornerApproximateDegree =
			getFourthCornerApproximateDegree();

		String fourthCornerApproximateDegree =
			miningProspectingLicenseCacheModel.fourthCornerApproximateDegree;

		if ((fourthCornerApproximateDegree != null) &&
			(fourthCornerApproximateDegree.length() == 0)) {

			miningProspectingLicenseCacheModel.fourthCornerApproximateDegree =
				null;
		}

		miningProspectingLicenseCacheModel.fifthCornerOfNorth =
			getFifthCornerOfNorth();

		String fifthCornerOfNorth =
			miningProspectingLicenseCacheModel.fifthCornerOfNorth;

		if ((fifthCornerOfNorth != null) &&
			(fifthCornerOfNorth.length() == 0)) {

			miningProspectingLicenseCacheModel.fifthCornerOfNorth = null;
		}

		miningProspectingLicenseCacheModel.fifthCornerOfEast =
			getFifthCornerOfEast();

		String fifthCornerOfEast =
			miningProspectingLicenseCacheModel.fifthCornerOfEast;

		if ((fifthCornerOfEast != null) && (fifthCornerOfEast.length() == 0)) {
			miningProspectingLicenseCacheModel.fifthCornerOfEast = null;
		}

		miningProspectingLicenseCacheModel.fifthCornerApproximateMeter =
			getFifthCornerApproximateMeter();

		String fifthCornerApproximateMeter =
			miningProspectingLicenseCacheModel.fifthCornerApproximateMeter;

		if ((fifthCornerApproximateMeter != null) &&
			(fifthCornerApproximateMeter.length() == 0)) {

			miningProspectingLicenseCacheModel.fifthCornerApproximateMeter =
				null;
		}

		miningProspectingLicenseCacheModel.fifthCornerApproximateDegree =
			getFifthCornerApproximateDegree();

		String fifthCornerApproximateDegree =
			miningProspectingLicenseCacheModel.fifthCornerApproximateDegree;

		if ((fifthCornerApproximateDegree != null) &&
			(fifthCornerApproximateDegree.length() == 0)) {

			miningProspectingLicenseCacheModel.fifthCornerApproximateDegree =
				null;
		}

		miningProspectingLicenseCacheModel.miningLeaseApplicationId =
			getMiningLeaseApplicationId();

		return miningProspectingLicenseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MiningProspectingLicense, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MiningProspectingLicense, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MiningProspectingLicense, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(MiningProspectingLicense)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, MiningProspectingLicense>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						MiningProspectingLicense.class, ModelWrapper.class);

	}

	private long _miningProspectingLicenseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nameOfApplicant;
	private String _trnNumber;
	private String _nationalityOfApplicant;
	private String _addressInJamaica;
	private String _telephoneNumber;
	private String _emailAddress;
	private String _numberOfApplicant;
	private String _nameOfTheAgent;
	private String _numberOfThisProspecting;
	private String _prospectingRight;
	private String _parish;
	private String _licence;
	private String _stateTheNearestLandmark;
	private String _approximateArea;
	private String _mineralForWhichApplicant;
	private String _copyOfArticle;
	private Date _dateUponTheLocation;
	private String _proslicenceFeeCheck;
	private Date _dateSurrender;
	private String _areaOfApproximately;
	private String _locationBeacon;
	private String _intersectionCoordinates;
	private String _northTopographical;
	private String _eastTopographical;
	private String _firstCornerOfNorth;
	private String _firstCornerOfEast;
	private String _firstCornerApproximateMeter;
	private String _firstCornerApproximateDegree;
	private String _secondCornerOfNorth;
	private String _secondCornerOfEast;
	private String _secondCornerApproximateMeter;
	private String _secondCornerApproximateDegree;
	private String _thirdCornerOfNorth;
	private String _thirdCornerOfEast;
	private String _thirdCornerApproximateMeter;
	private String _thirdCornerApproximateDegree;
	private String _fourthCornerOfNorth;
	private String _fourthCornerOfEast;
	private String _fourthCornerApproximateMeter;
	private String _fourthCornerApproximateDegree;
	private String _fifthCornerOfNorth;
	private String _fifthCornerOfEast;
	private String _fifthCornerApproximateMeter;
	private String _fifthCornerApproximateDegree;
	private long _miningLeaseApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<MiningProspectingLicense, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MiningProspectingLicense)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"miningProspectingLicenseId", _miningProspectingLicenseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nameOfApplicant", _nameOfApplicant);
		_columnOriginalValues.put("trnNumber", _trnNumber);
		_columnOriginalValues.put(
			"nationalityOfApplicant", _nationalityOfApplicant);
		_columnOriginalValues.put("addressInJamaica", _addressInJamaica);
		_columnOriginalValues.put("telephoneNumber", _telephoneNumber);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("numberOfApplicant", _numberOfApplicant);
		_columnOriginalValues.put("nameOfTheAgent", _nameOfTheAgent);
		_columnOriginalValues.put(
			"numberOfThisProspecting", _numberOfThisProspecting);
		_columnOriginalValues.put("prospectingRight", _prospectingRight);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("licence", _licence);
		_columnOriginalValues.put(
			"stateTheNearestLandmark", _stateTheNearestLandmark);
		_columnOriginalValues.put("approximateArea", _approximateArea);
		_columnOriginalValues.put(
			"mineralForWhichApplicant", _mineralForWhichApplicant);
		_columnOriginalValues.put("copyOfArticle", _copyOfArticle);
		_columnOriginalValues.put("dateUponTheLocation", _dateUponTheLocation);
		_columnOriginalValues.put("proslicenceFeeCheck", _proslicenceFeeCheck);
		_columnOriginalValues.put("dateSurrender", _dateSurrender);
		_columnOriginalValues.put("areaOfApproximately", _areaOfApproximately);
		_columnOriginalValues.put("locationBeacon", _locationBeacon);
		_columnOriginalValues.put(
			"intersectionCoordinates", _intersectionCoordinates);
		_columnOriginalValues.put("northTopographical", _northTopographical);
		_columnOriginalValues.put("eastTopographical", _eastTopographical);
		_columnOriginalValues.put("firstCornerOfNorth", _firstCornerOfNorth);
		_columnOriginalValues.put("firstCornerOfEast", _firstCornerOfEast);
		_columnOriginalValues.put(
			"firstCornerApproximateMeter", _firstCornerApproximateMeter);
		_columnOriginalValues.put(
			"firstCornerApproximateDegree", _firstCornerApproximateDegree);
		_columnOriginalValues.put("secondCornerOfNorth", _secondCornerOfNorth);
		_columnOriginalValues.put("secondCornerOfEast", _secondCornerOfEast);
		_columnOriginalValues.put(
			"secondCornerApproximateMeter", _secondCornerApproximateMeter);
		_columnOriginalValues.put(
			"secondCornerApproximateDegree", _secondCornerApproximateDegree);
		_columnOriginalValues.put("thirdCornerOfNorth", _thirdCornerOfNorth);
		_columnOriginalValues.put("thirdCornerOfEast", _thirdCornerOfEast);
		_columnOriginalValues.put(
			"thirdCornerApproximateMeter", _thirdCornerApproximateMeter);
		_columnOriginalValues.put(
			"thirdCornerApproximateDegree", _thirdCornerApproximateDegree);
		_columnOriginalValues.put("fourthCornerOfNorth", _fourthCornerOfNorth);
		_columnOriginalValues.put("fourthCornerOfEast", _fourthCornerOfEast);
		_columnOriginalValues.put(
			"fourthCornerApproximateMeter", _fourthCornerApproximateMeter);
		_columnOriginalValues.put(
			"fourthCornerApproximateDegree", _fourthCornerApproximateDegree);
		_columnOriginalValues.put("fifthCornerOfNorth", _fifthCornerOfNorth);
		_columnOriginalValues.put("fifthCornerOfEast", _fifthCornerOfEast);
		_columnOriginalValues.put(
			"fifthCornerApproximateMeter", _fifthCornerApproximateMeter);
		_columnOriginalValues.put(
			"fifthCornerApproximateDegree", _fifthCornerApproximateDegree);
		_columnOriginalValues.put(
			"miningLeaseApplicationId", _miningLeaseApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("miningProspectingLicenseId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("nameOfApplicant", 128L);

		columnBitmasks.put("trnNumber", 256L);

		columnBitmasks.put("nationalityOfApplicant", 512L);

		columnBitmasks.put("addressInJamaica", 1024L);

		columnBitmasks.put("telephoneNumber", 2048L);

		columnBitmasks.put("emailAddress", 4096L);

		columnBitmasks.put("numberOfApplicant", 8192L);

		columnBitmasks.put("nameOfTheAgent", 16384L);

		columnBitmasks.put("numberOfThisProspecting", 32768L);

		columnBitmasks.put("prospectingRight", 65536L);

		columnBitmasks.put("parish", 131072L);

		columnBitmasks.put("licence", 262144L);

		columnBitmasks.put("stateTheNearestLandmark", 524288L);

		columnBitmasks.put("approximateArea", 1048576L);

		columnBitmasks.put("mineralForWhichApplicant", 2097152L);

		columnBitmasks.put("copyOfArticle", 4194304L);

		columnBitmasks.put("dateUponTheLocation", 8388608L);

		columnBitmasks.put("proslicenceFeeCheck", 16777216L);

		columnBitmasks.put("dateSurrender", 33554432L);

		columnBitmasks.put("areaOfApproximately", 67108864L);

		columnBitmasks.put("locationBeacon", 134217728L);

		columnBitmasks.put("intersectionCoordinates", 268435456L);

		columnBitmasks.put("northTopographical", 536870912L);

		columnBitmasks.put("eastTopographical", 1073741824L);

		columnBitmasks.put("firstCornerOfNorth", 2147483648L);

		columnBitmasks.put("firstCornerOfEast", 4294967296L);

		columnBitmasks.put("firstCornerApproximateMeter", 8589934592L);

		columnBitmasks.put("firstCornerApproximateDegree", 17179869184L);

		columnBitmasks.put("secondCornerOfNorth", 34359738368L);

		columnBitmasks.put("secondCornerOfEast", 68719476736L);

		columnBitmasks.put("secondCornerApproximateMeter", 137438953472L);

		columnBitmasks.put("secondCornerApproximateDegree", 274877906944L);

		columnBitmasks.put("thirdCornerOfNorth", 549755813888L);

		columnBitmasks.put("thirdCornerOfEast", 1099511627776L);

		columnBitmasks.put("thirdCornerApproximateMeter", 2199023255552L);

		columnBitmasks.put("thirdCornerApproximateDegree", 4398046511104L);

		columnBitmasks.put("fourthCornerOfNorth", 8796093022208L);

		columnBitmasks.put("fourthCornerOfEast", 17592186044416L);

		columnBitmasks.put("fourthCornerApproximateMeter", 35184372088832L);

		columnBitmasks.put("fourthCornerApproximateDegree", 70368744177664L);

		columnBitmasks.put("fifthCornerOfNorth", 140737488355328L);

		columnBitmasks.put("fifthCornerOfEast", 281474976710656L);

		columnBitmasks.put("fifthCornerApproximateMeter", 562949953421312L);

		columnBitmasks.put("fifthCornerApproximateDegree", 1125899906842624L);

		columnBitmasks.put("miningLeaseApplicationId", 2251799813685248L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MiningProspectingLicense _escapedModel;

}