/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.cannabis.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.cannabis.application.form.services.model.CannabisApplicationCompanyAddress;
import com.nbp.cannabis.application.form.services.model.CannabisApplicationCompanyAddressModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisApplicationCompanyAddress service. Represents a row in the &quot;nbp_cannabis_com_address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisApplicationCompanyAddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisApplicationCompanyAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisApplicationCompanyAddressImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisApplicationCompanyAddressModelImpl
	extends BaseModelImpl<CannabisApplicationCompanyAddress>
	implements CannabisApplicationCompanyAddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis application company address model instance should use the <code>CannabisApplicationCompanyAddress</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_com_address";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"companyAddressId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"addressType", Types.VARCHAR}, {"streetName", Types.VARCHAR},
		{"town", Types.VARCHAR}, {"parish", Types.VARCHAR},
		{"applicationNumber", Types.VARCHAR},
		{"cannabisApplicationId", Types.BIGINT},
		{"companyInformationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyAddressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("addressType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("streetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("town", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cannabisApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyInformationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_com_address (uuid_ VARCHAR(75) null,companyAddressId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,addressType VARCHAR(75) null,streetName VARCHAR(75) null,town VARCHAR(75) null,parish VARCHAR(75) null,applicationNumber VARCHAR(75) null,cannabisApplicationId LONG,companyInformationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_com_address";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisApplicationCompanyAddress.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_com_address.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSTYPE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYINFORMATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisApplicationCompanyAddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _companyAddressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompanyAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _companyAddressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisApplicationCompanyAddress.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisApplicationCompanyAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisApplicationCompanyAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<CannabisApplicationCompanyAddress, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisApplicationCompanyAddress, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CannabisApplicationCompanyAddress)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisApplicationCompanyAddress, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisApplicationCompanyAddress, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisApplicationCompanyAddress)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisApplicationCompanyAddress, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisApplicationCompanyAddress, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CannabisApplicationCompanyAddress, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisApplicationCompanyAddress, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CannabisApplicationCompanyAddress, Object>>();

			attributeGetterFunctions.put(
				"uuid", CannabisApplicationCompanyAddress::getUuid);
			attributeGetterFunctions.put(
				"companyAddressId",
				CannabisApplicationCompanyAddress::getCompanyAddressId);
			attributeGetterFunctions.put(
				"groupId", CannabisApplicationCompanyAddress::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CannabisApplicationCompanyAddress::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CannabisApplicationCompanyAddress::getUserId);
			attributeGetterFunctions.put(
				"userName", CannabisApplicationCompanyAddress::getUserName);
			attributeGetterFunctions.put(
				"createDate", CannabisApplicationCompanyAddress::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				CannabisApplicationCompanyAddress::getModifiedDate);
			attributeGetterFunctions.put(
				"addressType",
				CannabisApplicationCompanyAddress::getAddressType);
			attributeGetterFunctions.put(
				"streetName", CannabisApplicationCompanyAddress::getStreetName);
			attributeGetterFunctions.put(
				"town", CannabisApplicationCompanyAddress::getTown);
			attributeGetterFunctions.put(
				"parish", CannabisApplicationCompanyAddress::getParish);
			attributeGetterFunctions.put(
				"applicationNumber",
				CannabisApplicationCompanyAddress::getApplicationNumber);
			attributeGetterFunctions.put(
				"cannabisApplicationId",
				CannabisApplicationCompanyAddress::getCannabisApplicationId);
			attributeGetterFunctions.put(
				"companyInformationId",
				CannabisApplicationCompanyAddress::getCompanyInformationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CannabisApplicationCompanyAddress, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisApplicationCompanyAddress, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CannabisApplicationCompanyAddress, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CannabisApplicationCompanyAddress, String>)
					CannabisApplicationCompanyAddress::setUuid);
			attributeSetterBiConsumers.put(
				"companyAddressId",
				(BiConsumer<CannabisApplicationCompanyAddress, Long>)
					CannabisApplicationCompanyAddress::setCompanyAddressId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CannabisApplicationCompanyAddress, Long>)
					CannabisApplicationCompanyAddress::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CannabisApplicationCompanyAddress, Long>)
					CannabisApplicationCompanyAddress::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CannabisApplicationCompanyAddress, Long>)
					CannabisApplicationCompanyAddress::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CannabisApplicationCompanyAddress, String>)
					CannabisApplicationCompanyAddress::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CannabisApplicationCompanyAddress, Date>)
					CannabisApplicationCompanyAddress::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CannabisApplicationCompanyAddress, Date>)
					CannabisApplicationCompanyAddress::setModifiedDate);
			attributeSetterBiConsumers.put(
				"addressType",
				(BiConsumer<CannabisApplicationCompanyAddress, String>)
					CannabisApplicationCompanyAddress::setAddressType);
			attributeSetterBiConsumers.put(
				"streetName",
				(BiConsumer<CannabisApplicationCompanyAddress, String>)
					CannabisApplicationCompanyAddress::setStreetName);
			attributeSetterBiConsumers.put(
				"town",
				(BiConsumer<CannabisApplicationCompanyAddress, String>)
					CannabisApplicationCompanyAddress::setTown);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<CannabisApplicationCompanyAddress, String>)
					CannabisApplicationCompanyAddress::setParish);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<CannabisApplicationCompanyAddress, String>)
					CannabisApplicationCompanyAddress::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"cannabisApplicationId",
				(BiConsumer<CannabisApplicationCompanyAddress, Long>)
					CannabisApplicationCompanyAddress::
						setCannabisApplicationId);
			attributeSetterBiConsumers.put(
				"companyInformationId",
				(BiConsumer<CannabisApplicationCompanyAddress, Long>)
					CannabisApplicationCompanyAddress::setCompanyInformationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCompanyAddressId() {
		return _companyAddressId;
	}

	@Override
	public void setCompanyAddressId(long companyAddressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyAddressId = companyAddressId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAddressType() {
		if (_addressType == null) {
			return "";
		}
		else {
			return _addressType;
		}
	}

	@Override
	public void setAddressType(String addressType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressType = addressType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalAddressType() {
		return getColumnOriginalValue("addressType");
	}

	@JSON
	@Override
	public String getStreetName() {
		if (_streetName == null) {
			return "";
		}
		else {
			return _streetName;
		}
	}

	@Override
	public void setStreetName(String streetName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_streetName = streetName;
	}

	@JSON
	@Override
	public String getTown() {
		if (_town == null) {
			return "";
		}
		else {
			return _town;
		}
	}

	@Override
	public void setTown(String town) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_town = town;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	@JSON
	@Override
	public long getCannabisApplicationId() {
		return _cannabisApplicationId;
	}

	@Override
	public void setCannabisApplicationId(long cannabisApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisApplicationId = cannabisApplicationId;
	}

	@JSON
	@Override
	public long getCompanyInformationId() {
		return _companyInformationId;
	}

	@Override
	public void setCompanyInformationId(long companyInformationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyInformationId = companyInformationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyInformationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyInformationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				CannabisApplicationCompanyAddress.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CannabisApplicationCompanyAddress.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisApplicationCompanyAddress toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisApplicationCompanyAddress>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisApplicationCompanyAddressImpl
			cannabisApplicationCompanyAddressImpl =
				new CannabisApplicationCompanyAddressImpl();

		cannabisApplicationCompanyAddressImpl.setUuid(getUuid());
		cannabisApplicationCompanyAddressImpl.setCompanyAddressId(
			getCompanyAddressId());
		cannabisApplicationCompanyAddressImpl.setGroupId(getGroupId());
		cannabisApplicationCompanyAddressImpl.setCompanyId(getCompanyId());
		cannabisApplicationCompanyAddressImpl.setUserId(getUserId());
		cannabisApplicationCompanyAddressImpl.setUserName(getUserName());
		cannabisApplicationCompanyAddressImpl.setCreateDate(getCreateDate());
		cannabisApplicationCompanyAddressImpl.setModifiedDate(
			getModifiedDate());
		cannabisApplicationCompanyAddressImpl.setAddressType(getAddressType());
		cannabisApplicationCompanyAddressImpl.setStreetName(getStreetName());
		cannabisApplicationCompanyAddressImpl.setTown(getTown());
		cannabisApplicationCompanyAddressImpl.setParish(getParish());
		cannabisApplicationCompanyAddressImpl.setApplicationNumber(
			getApplicationNumber());
		cannabisApplicationCompanyAddressImpl.setCannabisApplicationId(
			getCannabisApplicationId());
		cannabisApplicationCompanyAddressImpl.setCompanyInformationId(
			getCompanyInformationId());

		cannabisApplicationCompanyAddressImpl.resetOriginalValues();

		return cannabisApplicationCompanyAddressImpl;
	}

	@Override
	public CannabisApplicationCompanyAddress cloneWithOriginalValues() {
		CannabisApplicationCompanyAddressImpl
			cannabisApplicationCompanyAddressImpl =
				new CannabisApplicationCompanyAddressImpl();

		cannabisApplicationCompanyAddressImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cannabisApplicationCompanyAddressImpl.setCompanyAddressId(
			this.<Long>getColumnOriginalValue("companyAddressId"));
		cannabisApplicationCompanyAddressImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cannabisApplicationCompanyAddressImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cannabisApplicationCompanyAddressImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cannabisApplicationCompanyAddressImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cannabisApplicationCompanyAddressImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cannabisApplicationCompanyAddressImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cannabisApplicationCompanyAddressImpl.setAddressType(
			this.<String>getColumnOriginalValue("addressType"));
		cannabisApplicationCompanyAddressImpl.setStreetName(
			this.<String>getColumnOriginalValue("streetName"));
		cannabisApplicationCompanyAddressImpl.setTown(
			this.<String>getColumnOriginalValue("town"));
		cannabisApplicationCompanyAddressImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		cannabisApplicationCompanyAddressImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		cannabisApplicationCompanyAddressImpl.setCannabisApplicationId(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
		cannabisApplicationCompanyAddressImpl.setCompanyInformationId(
			this.<Long>getColumnOriginalValue("companyInformationId"));

		return cannabisApplicationCompanyAddressImpl;
	}

	@Override
	public int compareTo(
		CannabisApplicationCompanyAddress cannabisApplicationCompanyAddress) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), cannabisApplicationCompanyAddress.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisApplicationCompanyAddress)) {
			return false;
		}

		CannabisApplicationCompanyAddress cannabisApplicationCompanyAddress =
			(CannabisApplicationCompanyAddress)object;

		long primaryKey = cannabisApplicationCompanyAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisApplicationCompanyAddress> toCacheModel() {
		CannabisApplicationCompanyAddressCacheModel
			cannabisApplicationCompanyAddressCacheModel =
				new CannabisApplicationCompanyAddressCacheModel();

		cannabisApplicationCompanyAddressCacheModel.uuid = getUuid();

		String uuid = cannabisApplicationCompanyAddressCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cannabisApplicationCompanyAddressCacheModel.uuid = null;
		}

		cannabisApplicationCompanyAddressCacheModel.companyAddressId =
			getCompanyAddressId();

		cannabisApplicationCompanyAddressCacheModel.groupId = getGroupId();

		cannabisApplicationCompanyAddressCacheModel.companyId = getCompanyId();

		cannabisApplicationCompanyAddressCacheModel.userId = getUserId();

		cannabisApplicationCompanyAddressCacheModel.userName = getUserName();

		String userName = cannabisApplicationCompanyAddressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cannabisApplicationCompanyAddressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cannabisApplicationCompanyAddressCacheModel.createDate =
				createDate.getTime();
		}
		else {
			cannabisApplicationCompanyAddressCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cannabisApplicationCompanyAddressCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cannabisApplicationCompanyAddressCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		cannabisApplicationCompanyAddressCacheModel.addressType =
			getAddressType();

		String addressType =
			cannabisApplicationCompanyAddressCacheModel.addressType;

		if ((addressType != null) && (addressType.length() == 0)) {
			cannabisApplicationCompanyAddressCacheModel.addressType = null;
		}

		cannabisApplicationCompanyAddressCacheModel.streetName =
			getStreetName();

		String streetName =
			cannabisApplicationCompanyAddressCacheModel.streetName;

		if ((streetName != null) && (streetName.length() == 0)) {
			cannabisApplicationCompanyAddressCacheModel.streetName = null;
		}

		cannabisApplicationCompanyAddressCacheModel.town = getTown();

		String town = cannabisApplicationCompanyAddressCacheModel.town;

		if ((town != null) && (town.length() == 0)) {
			cannabisApplicationCompanyAddressCacheModel.town = null;
		}

		cannabisApplicationCompanyAddressCacheModel.parish = getParish();

		String parish = cannabisApplicationCompanyAddressCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			cannabisApplicationCompanyAddressCacheModel.parish = null;
		}

		cannabisApplicationCompanyAddressCacheModel.applicationNumber =
			getApplicationNumber();

		String applicationNumber =
			cannabisApplicationCompanyAddressCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			cannabisApplicationCompanyAddressCacheModel.applicationNumber =
				null;
		}

		cannabisApplicationCompanyAddressCacheModel.cannabisApplicationId =
			getCannabisApplicationId();

		cannabisApplicationCompanyAddressCacheModel.companyInformationId =
			getCompanyInformationId();

		return cannabisApplicationCompanyAddressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisApplicationCompanyAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<CannabisApplicationCompanyAddress, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisApplicationCompanyAddress, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisApplicationCompanyAddress)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CannabisApplicationCompanyAddress>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CannabisApplicationCompanyAddress.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _companyAddressId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _addressType;
	private String _streetName;
	private String _town;
	private String _parish;
	private String _applicationNumber;
	private long _cannabisApplicationId;
	private long _companyInformationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CannabisApplicationCompanyAddress, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisApplicationCompanyAddress)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("companyAddressId", _companyAddressId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("addressType", _addressType);
		_columnOriginalValues.put("streetName", _streetName);
		_columnOriginalValues.put("town", _town);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"cannabisApplicationId", _cannabisApplicationId);
		_columnOriginalValues.put(
			"companyInformationId", _companyInformationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("companyAddressId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("addressType", 256L);

		columnBitmasks.put("streetName", 512L);

		columnBitmasks.put("town", 1024L);

		columnBitmasks.put("parish", 2048L);

		columnBitmasks.put("applicationNumber", 4096L);

		columnBitmasks.put("cannabisApplicationId", 8192L);

		columnBitmasks.put("companyInformationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisApplicationCompanyAddress _escapedModel;

}