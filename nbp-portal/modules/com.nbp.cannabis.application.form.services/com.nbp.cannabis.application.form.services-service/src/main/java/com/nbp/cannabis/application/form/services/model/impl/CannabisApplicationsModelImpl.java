/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.cannabis.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.cannabis.application.form.services.model.CannabisApplications;
import com.nbp.cannabis.application.form.services.model.CannabisApplicationsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisApplications service. Represents a row in the &quot;nbp_cannabis_applications&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisApplicationsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisApplicationsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisApplicationsImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisApplicationsModelImpl
	extends BaseModelImpl<CannabisApplications>
	implements CannabisApplicationsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis applications model instance should use the <code>CannabisApplications</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_applications";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"cannabisApplicationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"entityId", Types.VARCHAR}, {"requestType", Types.VARCHAR},
		{"licenseCategory", Types.VARCHAR},
		{"licenseSubCategory", Types.VARCHAR}, {"typeOfEntity", Types.VARCHAR},
		{"status", Types.INTEGER}, {"applicationNumber", Types.VARCHAR},
		{"expiredLicenseAppNo", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"icmDocumentsPath", Types.VARCHAR}, {"PdfFileEntryId", Types.BIGINT},
		{"appCurrentStageName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cannabisApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseSubCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfEntity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredLicenseAppNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentsPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_applications (uuid_ VARCHAR(75) null,cannabisApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityId VARCHAR(75) null,requestType VARCHAR(75) null,licenseCategory VARCHAR(75) null,licenseSubCategory VARCHAR(75) null,typeOfEntity VARCHAR(75) null,status INTEGER,applicationNumber VARCHAR(75) null,expiredLicenseAppNo VARCHAR(75) null,caseId VARCHAR(500) null,icmDocumentsPath VARCHAR(500) null,PdfFileEntryId LONG,appCurrentStageName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_applications";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisApplications.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_applications.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPIREDLICENSEAPPNO_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LICENSECATEGORY_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LICENSESUBCATEGORY_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REQUESTTYPE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2048L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisApplicationsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cannabisApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCannabisApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cannabisApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisApplications.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisApplications.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisApplications, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CannabisApplications, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisApplications, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CannabisApplications)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisApplications, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisApplications, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisApplications)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisApplications, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisApplications, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CannabisApplications, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisApplications, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CannabisApplications, Object>>();

			attributeGetterFunctions.put("uuid", CannabisApplications::getUuid);
			attributeGetterFunctions.put(
				"cannabisApplicationId",
				CannabisApplications::getCannabisApplicationId);
			attributeGetterFunctions.put(
				"groupId", CannabisApplications::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CannabisApplications::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CannabisApplications::getUserId);
			attributeGetterFunctions.put(
				"userName", CannabisApplications::getUserName);
			attributeGetterFunctions.put(
				"createDate", CannabisApplications::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CannabisApplications::getModifiedDate);
			attributeGetterFunctions.put(
				"entityId", CannabisApplications::getEntityId);
			attributeGetterFunctions.put(
				"requestType", CannabisApplications::getRequestType);
			attributeGetterFunctions.put(
				"licenseCategory", CannabisApplications::getLicenseCategory);
			attributeGetterFunctions.put(
				"licenseSubCategory",
				CannabisApplications::getLicenseSubCategory);
			attributeGetterFunctions.put(
				"typeOfEntity", CannabisApplications::getTypeOfEntity);
			attributeGetterFunctions.put(
				"status", CannabisApplications::getStatus);
			attributeGetterFunctions.put(
				"applicationNumber",
				CannabisApplications::getApplicationNumber);
			attributeGetterFunctions.put(
				"expiredLicenseAppNo",
				CannabisApplications::getExpiredLicenseAppNo);
			attributeGetterFunctions.put(
				"caseId", CannabisApplications::getCaseId);
			attributeGetterFunctions.put(
				"icmDocumentsPath", CannabisApplications::getIcmDocumentsPath);
			attributeGetterFunctions.put(
				"PdfFileEntryId", CannabisApplications::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"appCurrentStageName",
				CannabisApplications::getAppCurrentStageName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CannabisApplications, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisApplications, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CannabisApplications, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setUuid);
			attributeSetterBiConsumers.put(
				"cannabisApplicationId",
				(BiConsumer<CannabisApplications, Long>)
					CannabisApplications::setCannabisApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CannabisApplications, Long>)
					CannabisApplications::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CannabisApplications, Long>)
					CannabisApplications::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CannabisApplications, Long>)
					CannabisApplications::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CannabisApplications, Date>)
					CannabisApplications::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CannabisApplications, Date>)
					CannabisApplications::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setEntityId);
			attributeSetterBiConsumers.put(
				"requestType",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setRequestType);
			attributeSetterBiConsumers.put(
				"licenseCategory",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setLicenseCategory);
			attributeSetterBiConsumers.put(
				"licenseSubCategory",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setLicenseSubCategory);
			attributeSetterBiConsumers.put(
				"typeOfEntity",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setTypeOfEntity);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<CannabisApplications, Integer>)
					CannabisApplications::setStatus);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"expiredLicenseAppNo",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setExpiredLicenseAppNo);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setCaseId);
			attributeSetterBiConsumers.put(
				"icmDocumentsPath",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setIcmDocumentsPath);
			attributeSetterBiConsumers.put(
				"PdfFileEntryId",
				(BiConsumer<CannabisApplications, Long>)
					CannabisApplications::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<CannabisApplications, String>)
					CannabisApplications::setAppCurrentStageName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCannabisApplicationId() {
		return _cannabisApplicationId;
	}

	@Override
	public void setCannabisApplicationId(long cannabisApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisApplicationId = cannabisApplicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	@JSON
	@Override
	public String getRequestType() {
		if (_requestType == null) {
			return "";
		}
		else {
			return _requestType;
		}
	}

	@Override
	public void setRequestType(String requestType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestType = requestType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRequestType() {
		return getColumnOriginalValue("requestType");
	}

	@JSON
	@Override
	public String getLicenseCategory() {
		if (_licenseCategory == null) {
			return "";
		}
		else {
			return _licenseCategory;
		}
	}

	@Override
	public void setLicenseCategory(String licenseCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseCategory = licenseCategory;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLicenseCategory() {
		return getColumnOriginalValue("licenseCategory");
	}

	@JSON
	@Override
	public String getLicenseSubCategory() {
		if (_licenseSubCategory == null) {
			return "";
		}
		else {
			return _licenseSubCategory;
		}
	}

	@Override
	public void setLicenseSubCategory(String licenseSubCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseSubCategory = licenseSubCategory;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLicenseSubCategory() {
		return getColumnOriginalValue("licenseSubCategory");
	}

	@JSON
	@Override
	public String getTypeOfEntity() {
		if (_typeOfEntity == null) {
			return "";
		}
		else {
			return _typeOfEntity;
		}
	}

	@Override
	public void setTypeOfEntity(String typeOfEntity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfEntity = typeOfEntity;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getExpiredLicenseAppNo() {
		if (_expiredLicenseAppNo == null) {
			return "";
		}
		else {
			return _expiredLicenseAppNo;
		}
	}

	@Override
	public void setExpiredLicenseAppNo(String expiredLicenseAppNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredLicenseAppNo = expiredLicenseAppNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExpiredLicenseAppNo() {
		return getColumnOriginalValue("expiredLicenseAppNo");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getIcmDocumentsPath() {
		if (_icmDocumentsPath == null) {
			return "";
		}
		else {
			return _icmDocumentsPath;
		}
	}

	@Override
	public void setIcmDocumentsPath(String icmDocumentsPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentsPath = icmDocumentsPath;
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _PdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long PdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_PdfFileEntryId = PdfFileEntryId;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CannabisApplications.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CannabisApplications.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisApplications toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisApplications>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisApplicationsImpl cannabisApplicationsImpl =
			new CannabisApplicationsImpl();

		cannabisApplicationsImpl.setUuid(getUuid());
		cannabisApplicationsImpl.setCannabisApplicationId(
			getCannabisApplicationId());
		cannabisApplicationsImpl.setGroupId(getGroupId());
		cannabisApplicationsImpl.setCompanyId(getCompanyId());
		cannabisApplicationsImpl.setUserId(getUserId());
		cannabisApplicationsImpl.setUserName(getUserName());
		cannabisApplicationsImpl.setCreateDate(getCreateDate());
		cannabisApplicationsImpl.setModifiedDate(getModifiedDate());
		cannabisApplicationsImpl.setEntityId(getEntityId());
		cannabisApplicationsImpl.setRequestType(getRequestType());
		cannabisApplicationsImpl.setLicenseCategory(getLicenseCategory());
		cannabisApplicationsImpl.setLicenseSubCategory(getLicenseSubCategory());
		cannabisApplicationsImpl.setTypeOfEntity(getTypeOfEntity());
		cannabisApplicationsImpl.setStatus(getStatus());
		cannabisApplicationsImpl.setApplicationNumber(getApplicationNumber());
		cannabisApplicationsImpl.setExpiredLicenseAppNo(
			getExpiredLicenseAppNo());
		cannabisApplicationsImpl.setCaseId(getCaseId());
		cannabisApplicationsImpl.setIcmDocumentsPath(getIcmDocumentsPath());
		cannabisApplicationsImpl.setPdfFileEntryId(getPdfFileEntryId());
		cannabisApplicationsImpl.setAppCurrentStageName(
			getAppCurrentStageName());

		cannabisApplicationsImpl.resetOriginalValues();

		return cannabisApplicationsImpl;
	}

	@Override
	public CannabisApplications cloneWithOriginalValues() {
		CannabisApplicationsImpl cannabisApplicationsImpl =
			new CannabisApplicationsImpl();

		cannabisApplicationsImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cannabisApplicationsImpl.setCannabisApplicationId(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
		cannabisApplicationsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cannabisApplicationsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cannabisApplicationsImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cannabisApplicationsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cannabisApplicationsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cannabisApplicationsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cannabisApplicationsImpl.setEntityId(
			this.<String>getColumnOriginalValue("entityId"));
		cannabisApplicationsImpl.setRequestType(
			this.<String>getColumnOriginalValue("requestType"));
		cannabisApplicationsImpl.setLicenseCategory(
			this.<String>getColumnOriginalValue("licenseCategory"));
		cannabisApplicationsImpl.setLicenseSubCategory(
			this.<String>getColumnOriginalValue("licenseSubCategory"));
		cannabisApplicationsImpl.setTypeOfEntity(
			this.<String>getColumnOriginalValue("typeOfEntity"));
		cannabisApplicationsImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		cannabisApplicationsImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		cannabisApplicationsImpl.setExpiredLicenseAppNo(
			this.<String>getColumnOriginalValue("expiredLicenseAppNo"));
		cannabisApplicationsImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		cannabisApplicationsImpl.setIcmDocumentsPath(
			this.<String>getColumnOriginalValue("icmDocumentsPath"));
		cannabisApplicationsImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("PdfFileEntryId"));
		cannabisApplicationsImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));

		return cannabisApplicationsImpl;
	}

	@Override
	public int compareTo(CannabisApplications cannabisApplications) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), cannabisApplications.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisApplications)) {
			return false;
		}

		CannabisApplications cannabisApplications =
			(CannabisApplications)object;

		long primaryKey = cannabisApplications.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisApplications> toCacheModel() {
		CannabisApplicationsCacheModel cannabisApplicationsCacheModel =
			new CannabisApplicationsCacheModel();

		cannabisApplicationsCacheModel.uuid = getUuid();

		String uuid = cannabisApplicationsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cannabisApplicationsCacheModel.uuid = null;
		}

		cannabisApplicationsCacheModel.cannabisApplicationId =
			getCannabisApplicationId();

		cannabisApplicationsCacheModel.groupId = getGroupId();

		cannabisApplicationsCacheModel.companyId = getCompanyId();

		cannabisApplicationsCacheModel.userId = getUserId();

		cannabisApplicationsCacheModel.userName = getUserName();

		String userName = cannabisApplicationsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cannabisApplicationsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cannabisApplicationsCacheModel.createDate = createDate.getTime();
		}
		else {
			cannabisApplicationsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cannabisApplicationsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cannabisApplicationsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cannabisApplicationsCacheModel.entityId = getEntityId();

		String entityId = cannabisApplicationsCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			cannabisApplicationsCacheModel.entityId = null;
		}

		cannabisApplicationsCacheModel.requestType = getRequestType();

		String requestType = cannabisApplicationsCacheModel.requestType;

		if ((requestType != null) && (requestType.length() == 0)) {
			cannabisApplicationsCacheModel.requestType = null;
		}

		cannabisApplicationsCacheModel.licenseCategory = getLicenseCategory();

		String licenseCategory = cannabisApplicationsCacheModel.licenseCategory;

		if ((licenseCategory != null) && (licenseCategory.length() == 0)) {
			cannabisApplicationsCacheModel.licenseCategory = null;
		}

		cannabisApplicationsCacheModel.licenseSubCategory =
			getLicenseSubCategory();

		String licenseSubCategory =
			cannabisApplicationsCacheModel.licenseSubCategory;

		if ((licenseSubCategory != null) &&
			(licenseSubCategory.length() == 0)) {

			cannabisApplicationsCacheModel.licenseSubCategory = null;
		}

		cannabisApplicationsCacheModel.typeOfEntity = getTypeOfEntity();

		String typeOfEntity = cannabisApplicationsCacheModel.typeOfEntity;

		if ((typeOfEntity != null) && (typeOfEntity.length() == 0)) {
			cannabisApplicationsCacheModel.typeOfEntity = null;
		}

		cannabisApplicationsCacheModel.status = getStatus();

		cannabisApplicationsCacheModel.applicationNumber =
			getApplicationNumber();

		String applicationNumber =
			cannabisApplicationsCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			cannabisApplicationsCacheModel.applicationNumber = null;
		}

		cannabisApplicationsCacheModel.expiredLicenseAppNo =
			getExpiredLicenseAppNo();

		String expiredLicenseAppNo =
			cannabisApplicationsCacheModel.expiredLicenseAppNo;

		if ((expiredLicenseAppNo != null) &&
			(expiredLicenseAppNo.length() == 0)) {

			cannabisApplicationsCacheModel.expiredLicenseAppNo = null;
		}

		cannabisApplicationsCacheModel.caseId = getCaseId();

		String caseId = cannabisApplicationsCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			cannabisApplicationsCacheModel.caseId = null;
		}

		cannabisApplicationsCacheModel.icmDocumentsPath = getIcmDocumentsPath();

		String icmDocumentsPath =
			cannabisApplicationsCacheModel.icmDocumentsPath;

		if ((icmDocumentsPath != null) && (icmDocumentsPath.length() == 0)) {
			cannabisApplicationsCacheModel.icmDocumentsPath = null;
		}

		cannabisApplicationsCacheModel.PdfFileEntryId = getPdfFileEntryId();

		cannabisApplicationsCacheModel.appCurrentStageName =
			getAppCurrentStageName();

		String appCurrentStageName =
			cannabisApplicationsCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			cannabisApplicationsCacheModel.appCurrentStageName = null;
		}

		return cannabisApplicationsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisApplications, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CannabisApplications, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisApplications, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisApplications)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CannabisApplications>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CannabisApplications.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _cannabisApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityId;
	private String _requestType;
	private String _licenseCategory;
	private String _licenseSubCategory;
	private String _typeOfEntity;
	private int _status;
	private String _applicationNumber;
	private String _expiredLicenseAppNo;
	private String _caseId;
	private String _icmDocumentsPath;
	private long _PdfFileEntryId;
	private String _appCurrentStageName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CannabisApplications, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisApplications)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"cannabisApplicationId", _cannabisApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("requestType", _requestType);
		_columnOriginalValues.put("licenseCategory", _licenseCategory);
		_columnOriginalValues.put("licenseSubCategory", _licenseSubCategory);
		_columnOriginalValues.put("typeOfEntity", _typeOfEntity);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("expiredLicenseAppNo", _expiredLicenseAppNo);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("icmDocumentsPath", _icmDocumentsPath);
		_columnOriginalValues.put("PdfFileEntryId", _PdfFileEntryId);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("cannabisApplicationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("entityId", 256L);

		columnBitmasks.put("requestType", 512L);

		columnBitmasks.put("licenseCategory", 1024L);

		columnBitmasks.put("licenseSubCategory", 2048L);

		columnBitmasks.put("typeOfEntity", 4096L);

		columnBitmasks.put("status", 8192L);

		columnBitmasks.put("applicationNumber", 16384L);

		columnBitmasks.put("expiredLicenseAppNo", 32768L);

		columnBitmasks.put("caseId", 65536L);

		columnBitmasks.put("icmDocumentsPath", 131072L);

		columnBitmasks.put("PdfFileEntryId", 262144L);

		columnBitmasks.put("appCurrentStageName", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisApplications _escapedModel;

}