/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.cannabis.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.cannabis.application.form.services.model.CannabisSupportingDocumentsMaster;
import com.nbp.cannabis.application.form.services.model.CannabisSupportingDocumentsMasterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisSupportingDocumentsMaster service. Represents a row in the &quot;nbp_cannabis_supporting_docs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisSupportingDocumentsMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisSupportingDocumentsMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisSupportingDocumentsMasterImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisSupportingDocumentsMasterModelImpl
	extends BaseModelImpl<CannabisSupportingDocumentsMaster>
	implements CannabisSupportingDocumentsMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis supporting documents master model instance should use the <code>CannabisSupportingDocumentsMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_supporting_docs";

	public static final Object[][] TABLE_COLUMNS = {
		{"cannabisSupportingDocMasterId", Types.BIGINT},
		{"applicationType", Types.VARCHAR}, {"documentTye", Types.VARCHAR},
		{"landType", Types.VARCHAR}, {"userType", Types.VARCHAR},
		{"documentName", Types.VARCHAR}, {"remarks", Types.VARCHAR},
		{"status", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cannabisSupportingDocMasterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentTye", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_supporting_docs (cannabisSupportingDocMasterId LONG not null primary key,applicationType VARCHAR(75) null,documentTye VARCHAR(75) null,landType VARCHAR(75) null,userType VARCHAR(75) null,documentName STRING null,remarks STRING null,status VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_supporting_docs";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisSupportingDocumentsMaster.cannabisSupportingDocMasterId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_supporting_docs.cannabisSupportingDocMasterId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONTYPE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DOCUMENTTYE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LANDTYPE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERTYPE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISSUPPORTINGDOCMASTERID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisSupportingDocumentsMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cannabisSupportingDocMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCannabisSupportingDocMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cannabisSupportingDocMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisSupportingDocumentsMaster.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisSupportingDocumentsMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisSupportingDocumentsMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<CannabisSupportingDocumentsMaster, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisSupportingDocumentsMaster, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CannabisSupportingDocumentsMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisSupportingDocumentsMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisSupportingDocumentsMaster, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisSupportingDocumentsMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisSupportingDocumentsMaster, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisSupportingDocumentsMaster, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CannabisSupportingDocumentsMaster, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisSupportingDocumentsMaster, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CannabisSupportingDocumentsMaster, Object>>();

			attributeGetterFunctions.put(
				"cannabisSupportingDocMasterId",
				CannabisSupportingDocumentsMaster::
					getCannabisSupportingDocMasterId);
			attributeGetterFunctions.put(
				"applicationType",
				CannabisSupportingDocumentsMaster::getApplicationType);
			attributeGetterFunctions.put(
				"documentTye",
				CannabisSupportingDocumentsMaster::getDocumentTye);
			attributeGetterFunctions.put(
				"landType", CannabisSupportingDocumentsMaster::getLandType);
			attributeGetterFunctions.put(
				"userType", CannabisSupportingDocumentsMaster::getUserType);
			attributeGetterFunctions.put(
				"documentName",
				CannabisSupportingDocumentsMaster::getDocumentName);
			attributeGetterFunctions.put(
				"remarks", CannabisSupportingDocumentsMaster::getRemarks);
			attributeGetterFunctions.put(
				"status", CannabisSupportingDocumentsMaster::getStatus);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CannabisSupportingDocumentsMaster, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisSupportingDocumentsMaster, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CannabisSupportingDocumentsMaster, ?>>();

			attributeSetterBiConsumers.put(
				"cannabisSupportingDocMasterId",
				(BiConsumer<CannabisSupportingDocumentsMaster, Long>)
					CannabisSupportingDocumentsMaster::
						setCannabisSupportingDocMasterId);
			attributeSetterBiConsumers.put(
				"applicationType",
				(BiConsumer<CannabisSupportingDocumentsMaster, String>)
					CannabisSupportingDocumentsMaster::setApplicationType);
			attributeSetterBiConsumers.put(
				"documentTye",
				(BiConsumer<CannabisSupportingDocumentsMaster, String>)
					CannabisSupportingDocumentsMaster::setDocumentTye);
			attributeSetterBiConsumers.put(
				"landType",
				(BiConsumer<CannabisSupportingDocumentsMaster, String>)
					CannabisSupportingDocumentsMaster::setLandType);
			attributeSetterBiConsumers.put(
				"userType",
				(BiConsumer<CannabisSupportingDocumentsMaster, String>)
					CannabisSupportingDocumentsMaster::setUserType);
			attributeSetterBiConsumers.put(
				"documentName",
				(BiConsumer<CannabisSupportingDocumentsMaster, String>)
					CannabisSupportingDocumentsMaster::setDocumentName);
			attributeSetterBiConsumers.put(
				"remarks",
				(BiConsumer<CannabisSupportingDocumentsMaster, String>)
					CannabisSupportingDocumentsMaster::setRemarks);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<CannabisSupportingDocumentsMaster, String>)
					CannabisSupportingDocumentsMaster::setStatus);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCannabisSupportingDocMasterId() {
		return _cannabisSupportingDocMasterId;
	}

	@Override
	public void setCannabisSupportingDocMasterId(
		long cannabisSupportingDocMasterId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisSupportingDocMasterId = cannabisSupportingDocMasterId;
	}

	@JSON
	@Override
	public String getApplicationType() {
		if (_applicationType == null) {
			return "";
		}
		else {
			return _applicationType;
		}
	}

	@Override
	public void setApplicationType(String applicationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationType = applicationType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationType() {
		return getColumnOriginalValue("applicationType");
	}

	@JSON
	@Override
	public String getDocumentTye() {
		if (_documentTye == null) {
			return "";
		}
		else {
			return _documentTye;
		}
	}

	@Override
	public void setDocumentTye(String documentTye) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentTye = documentTye;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDocumentTye() {
		return getColumnOriginalValue("documentTye");
	}

	@JSON
	@Override
	public String getLandType() {
		if (_landType == null) {
			return "";
		}
		else {
			return _landType;
		}
	}

	@Override
	public void setLandType(String landType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landType = landType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLandType() {
		return getColumnOriginalValue("landType");
	}

	@JSON
	@Override
	public String getUserType() {
		if (_userType == null) {
			return "";
		}
		else {
			return _userType;
		}
	}

	@Override
	public void setUserType(String userType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userType = userType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserType() {
		return getColumnOriginalValue("userType");
	}

	@JSON
	@Override
	public String getDocumentName() {
		if (_documentName == null) {
			return "";
		}
		else {
			return _documentName;
		}
	}

	@Override
	public void setDocumentName(String documentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentName = documentName;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CannabisSupportingDocumentsMaster.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisSupportingDocumentsMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisSupportingDocumentsMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisSupportingDocumentsMasterImpl
			cannabisSupportingDocumentsMasterImpl =
				new CannabisSupportingDocumentsMasterImpl();

		cannabisSupportingDocumentsMasterImpl.setCannabisSupportingDocMasterId(
			getCannabisSupportingDocMasterId());
		cannabisSupportingDocumentsMasterImpl.setApplicationType(
			getApplicationType());
		cannabisSupportingDocumentsMasterImpl.setDocumentTye(getDocumentTye());
		cannabisSupportingDocumentsMasterImpl.setLandType(getLandType());
		cannabisSupportingDocumentsMasterImpl.setUserType(getUserType());
		cannabisSupportingDocumentsMasterImpl.setDocumentName(
			getDocumentName());
		cannabisSupportingDocumentsMasterImpl.setRemarks(getRemarks());
		cannabisSupportingDocumentsMasterImpl.setStatus(getStatus());

		cannabisSupportingDocumentsMasterImpl.resetOriginalValues();

		return cannabisSupportingDocumentsMasterImpl;
	}

	@Override
	public CannabisSupportingDocumentsMaster cloneWithOriginalValues() {
		CannabisSupportingDocumentsMasterImpl
			cannabisSupportingDocumentsMasterImpl =
				new CannabisSupportingDocumentsMasterImpl();

		cannabisSupportingDocumentsMasterImpl.setCannabisSupportingDocMasterId(
			this.<Long>getColumnOriginalValue("cannabisSupportingDocMasterId"));
		cannabisSupportingDocumentsMasterImpl.setApplicationType(
			this.<String>getColumnOriginalValue("applicationType"));
		cannabisSupportingDocumentsMasterImpl.setDocumentTye(
			this.<String>getColumnOriginalValue("documentTye"));
		cannabisSupportingDocumentsMasterImpl.setLandType(
			this.<String>getColumnOriginalValue("landType"));
		cannabisSupportingDocumentsMasterImpl.setUserType(
			this.<String>getColumnOriginalValue("userType"));
		cannabisSupportingDocumentsMasterImpl.setDocumentName(
			this.<String>getColumnOriginalValue("documentName"));
		cannabisSupportingDocumentsMasterImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		cannabisSupportingDocumentsMasterImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));

		return cannabisSupportingDocumentsMasterImpl;
	}

	@Override
	public int compareTo(
		CannabisSupportingDocumentsMaster cannabisSupportingDocumentsMaster) {

		long primaryKey = cannabisSupportingDocumentsMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisSupportingDocumentsMaster)) {
			return false;
		}

		CannabisSupportingDocumentsMaster cannabisSupportingDocumentsMaster =
			(CannabisSupportingDocumentsMaster)object;

		long primaryKey = cannabisSupportingDocumentsMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisSupportingDocumentsMaster> toCacheModel() {
		CannabisSupportingDocumentsMasterCacheModel
			cannabisSupportingDocumentsMasterCacheModel =
				new CannabisSupportingDocumentsMasterCacheModel();

		cannabisSupportingDocumentsMasterCacheModel.
			cannabisSupportingDocMasterId = getCannabisSupportingDocMasterId();

		cannabisSupportingDocumentsMasterCacheModel.applicationType =
			getApplicationType();

		String applicationType =
			cannabisSupportingDocumentsMasterCacheModel.applicationType;

		if ((applicationType != null) && (applicationType.length() == 0)) {
			cannabisSupportingDocumentsMasterCacheModel.applicationType = null;
		}

		cannabisSupportingDocumentsMasterCacheModel.documentTye =
			getDocumentTye();

		String documentTye =
			cannabisSupportingDocumentsMasterCacheModel.documentTye;

		if ((documentTye != null) && (documentTye.length() == 0)) {
			cannabisSupportingDocumentsMasterCacheModel.documentTye = null;
		}

		cannabisSupportingDocumentsMasterCacheModel.landType = getLandType();

		String landType = cannabisSupportingDocumentsMasterCacheModel.landType;

		if ((landType != null) && (landType.length() == 0)) {
			cannabisSupportingDocumentsMasterCacheModel.landType = null;
		}

		cannabisSupportingDocumentsMasterCacheModel.userType = getUserType();

		String userType = cannabisSupportingDocumentsMasterCacheModel.userType;

		if ((userType != null) && (userType.length() == 0)) {
			cannabisSupportingDocumentsMasterCacheModel.userType = null;
		}

		cannabisSupportingDocumentsMasterCacheModel.documentName =
			getDocumentName();

		String documentName =
			cannabisSupportingDocumentsMasterCacheModel.documentName;

		if ((documentName != null) && (documentName.length() == 0)) {
			cannabisSupportingDocumentsMasterCacheModel.documentName = null;
		}

		cannabisSupportingDocumentsMasterCacheModel.remarks = getRemarks();

		String remarks = cannabisSupportingDocumentsMasterCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			cannabisSupportingDocumentsMasterCacheModel.remarks = null;
		}

		cannabisSupportingDocumentsMasterCacheModel.status = getStatus();

		String status = cannabisSupportingDocumentsMasterCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			cannabisSupportingDocumentsMasterCacheModel.status = null;
		}

		return cannabisSupportingDocumentsMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisSupportingDocumentsMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<CannabisSupportingDocumentsMaster, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisSupportingDocumentsMaster, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisSupportingDocumentsMaster)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CannabisSupportingDocumentsMaster>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CannabisSupportingDocumentsMaster.class,
						ModelWrapper.class);

	}

	private long _cannabisSupportingDocMasterId;
	private String _applicationType;
	private String _documentTye;
	private String _landType;
	private String _userType;
	private String _documentName;
	private String _remarks;
	private String _status;

	public <T> T getColumnValue(String columnName) {
		Function<CannabisSupportingDocumentsMaster, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisSupportingDocumentsMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"cannabisSupportingDocMasterId", _cannabisSupportingDocMasterId);
		_columnOriginalValues.put("applicationType", _applicationType);
		_columnOriginalValues.put("documentTye", _documentTye);
		_columnOriginalValues.put("landType", _landType);
		_columnOriginalValues.put("userType", _userType);
		_columnOriginalValues.put("documentName", _documentName);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("cannabisSupportingDocMasterId", 1L);

		columnBitmasks.put("applicationType", 2L);

		columnBitmasks.put("documentTye", 4L);

		columnBitmasks.put("landType", 8L);

		columnBitmasks.put("userType", 16L);

		columnBitmasks.put("documentName", 32L);

		columnBitmasks.put("remarks", 64L);

		columnBitmasks.put("status", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisSupportingDocumentsMaster _escapedModel;

}