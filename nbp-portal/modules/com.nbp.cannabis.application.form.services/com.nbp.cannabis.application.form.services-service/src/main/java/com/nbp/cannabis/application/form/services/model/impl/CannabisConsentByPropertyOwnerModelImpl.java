/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.cannabis.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.cannabis.application.form.services.model.CannabisConsentByPropertyOwner;
import com.nbp.cannabis.application.form.services.model.CannabisConsentByPropertyOwnerModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisConsentByPropertyOwner service. Represents a row in the &quot;nbp_cannabis_cpo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisConsentByPropertyOwnerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisConsentByPropertyOwnerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisConsentByPropertyOwnerImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisConsentByPropertyOwnerModelImpl
	extends BaseModelImpl<CannabisConsentByPropertyOwner>
	implements CannabisConsentByPropertyOwnerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis consent by property owner model instance should use the <code>CannabisConsentByPropertyOwner</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_cpo";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"cannabisCPOId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"typeOfProperty", Types.VARCHAR},
		{"descriptionOfProperty", Types.VARCHAR},
		{"descriptionOfIntendedUse", Types.VARCHAR},
		{"landType", Types.VARCHAR}, {"ownsProperty", Types.VARCHAR},
		{"cannabisApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cannabisCPOId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeOfProperty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descriptionOfProperty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descriptionOfIntendedUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownsProperty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cannabisApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_cpo (uuid_ VARCHAR(75) null,cannabisCPOId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,typeOfProperty VARCHAR(75) null,descriptionOfProperty VARCHAR(500) null,descriptionOfIntendedUse VARCHAR(75) null,landType VARCHAR(75) null,ownsProperty VARCHAR(75) null,cannabisApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table nbp_cannabis_cpo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisConsentByPropertyOwner.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_cpo.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisConsentByPropertyOwnerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cannabisCPOId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCannabisCPOId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cannabisCPOId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisConsentByPropertyOwner.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisConsentByPropertyOwner.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisConsentByPropertyOwner, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CannabisConsentByPropertyOwner, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisConsentByPropertyOwner, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CannabisConsentByPropertyOwner)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisConsentByPropertyOwner, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisConsentByPropertyOwner, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisConsentByPropertyOwner)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisConsentByPropertyOwner, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisConsentByPropertyOwner, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CannabisConsentByPropertyOwner, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisConsentByPropertyOwner, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CannabisConsentByPropertyOwner, Object>>();

			attributeGetterFunctions.put(
				"uuid", CannabisConsentByPropertyOwner::getUuid);
			attributeGetterFunctions.put(
				"cannabisCPOId",
				CannabisConsentByPropertyOwner::getCannabisCPOId);
			attributeGetterFunctions.put(
				"groupId", CannabisConsentByPropertyOwner::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CannabisConsentByPropertyOwner::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CannabisConsentByPropertyOwner::getUserId);
			attributeGetterFunctions.put(
				"userName", CannabisConsentByPropertyOwner::getUserName);
			attributeGetterFunctions.put(
				"createDate", CannabisConsentByPropertyOwner::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				CannabisConsentByPropertyOwner::getModifiedDate);
			attributeGetterFunctions.put(
				"typeOfProperty",
				CannabisConsentByPropertyOwner::getTypeOfProperty);
			attributeGetterFunctions.put(
				"descriptionOfProperty",
				CannabisConsentByPropertyOwner::getDescriptionOfProperty);
			attributeGetterFunctions.put(
				"descriptionOfIntendedUse",
				CannabisConsentByPropertyOwner::getDescriptionOfIntendedUse);
			attributeGetterFunctions.put(
				"landType", CannabisConsentByPropertyOwner::getLandType);
			attributeGetterFunctions.put(
				"ownsProperty",
				CannabisConsentByPropertyOwner::getOwnsProperty);
			attributeGetterFunctions.put(
				"cannabisApplicationId",
				CannabisConsentByPropertyOwner::getCannabisApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CannabisConsentByPropertyOwner, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisConsentByPropertyOwner, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CannabisConsentByPropertyOwner, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CannabisConsentByPropertyOwner, String>)
					CannabisConsentByPropertyOwner::setUuid);
			attributeSetterBiConsumers.put(
				"cannabisCPOId",
				(BiConsumer<CannabisConsentByPropertyOwner, Long>)
					CannabisConsentByPropertyOwner::setCannabisCPOId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CannabisConsentByPropertyOwner, Long>)
					CannabisConsentByPropertyOwner::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CannabisConsentByPropertyOwner, Long>)
					CannabisConsentByPropertyOwner::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CannabisConsentByPropertyOwner, Long>)
					CannabisConsentByPropertyOwner::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CannabisConsentByPropertyOwner, String>)
					CannabisConsentByPropertyOwner::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CannabisConsentByPropertyOwner, Date>)
					CannabisConsentByPropertyOwner::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CannabisConsentByPropertyOwner, Date>)
					CannabisConsentByPropertyOwner::setModifiedDate);
			attributeSetterBiConsumers.put(
				"typeOfProperty",
				(BiConsumer<CannabisConsentByPropertyOwner, String>)
					CannabisConsentByPropertyOwner::setTypeOfProperty);
			attributeSetterBiConsumers.put(
				"descriptionOfProperty",
				(BiConsumer<CannabisConsentByPropertyOwner, String>)
					CannabisConsentByPropertyOwner::setDescriptionOfProperty);
			attributeSetterBiConsumers.put(
				"descriptionOfIntendedUse",
				(BiConsumer<CannabisConsentByPropertyOwner, String>)
					CannabisConsentByPropertyOwner::
						setDescriptionOfIntendedUse);
			attributeSetterBiConsumers.put(
				"landType",
				(BiConsumer<CannabisConsentByPropertyOwner, String>)
					CannabisConsentByPropertyOwner::setLandType);
			attributeSetterBiConsumers.put(
				"ownsProperty",
				(BiConsumer<CannabisConsentByPropertyOwner, String>)
					CannabisConsentByPropertyOwner::setOwnsProperty);
			attributeSetterBiConsumers.put(
				"cannabisApplicationId",
				(BiConsumer<CannabisConsentByPropertyOwner, Long>)
					CannabisConsentByPropertyOwner::setCannabisApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCannabisCPOId() {
		return _cannabisCPOId;
	}

	@Override
	public void setCannabisCPOId(long cannabisCPOId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisCPOId = cannabisCPOId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTypeOfProperty() {
		if (_typeOfProperty == null) {
			return "";
		}
		else {
			return _typeOfProperty;
		}
	}

	@Override
	public void setTypeOfProperty(String typeOfProperty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfProperty = typeOfProperty;
	}

	@JSON
	@Override
	public String getDescriptionOfProperty() {
		if (_descriptionOfProperty == null) {
			return "";
		}
		else {
			return _descriptionOfProperty;
		}
	}

	@Override
	public void setDescriptionOfProperty(String descriptionOfProperty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descriptionOfProperty = descriptionOfProperty;
	}

	@JSON
	@Override
	public String getDescriptionOfIntendedUse() {
		if (_descriptionOfIntendedUse == null) {
			return "";
		}
		else {
			return _descriptionOfIntendedUse;
		}
	}

	@Override
	public void setDescriptionOfIntendedUse(String descriptionOfIntendedUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descriptionOfIntendedUse = descriptionOfIntendedUse;
	}

	@JSON
	@Override
	public String getLandType() {
		if (_landType == null) {
			return "";
		}
		else {
			return _landType;
		}
	}

	@Override
	public void setLandType(String landType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landType = landType;
	}

	@JSON
	@Override
	public String getOwnsProperty() {
		if (_ownsProperty == null) {
			return "";
		}
		else {
			return _ownsProperty;
		}
	}

	@Override
	public void setOwnsProperty(String ownsProperty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownsProperty = ownsProperty;
	}

	@JSON
	@Override
	public long getCannabisApplicationId() {
		return _cannabisApplicationId;
	}

	@Override
	public void setCannabisApplicationId(long cannabisApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisApplicationId = cannabisApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCannabisApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				CannabisConsentByPropertyOwner.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CannabisConsentByPropertyOwner.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisConsentByPropertyOwner toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisConsentByPropertyOwner>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisConsentByPropertyOwnerImpl cannabisConsentByPropertyOwnerImpl =
			new CannabisConsentByPropertyOwnerImpl();

		cannabisConsentByPropertyOwnerImpl.setUuid(getUuid());
		cannabisConsentByPropertyOwnerImpl.setCannabisCPOId(getCannabisCPOId());
		cannabisConsentByPropertyOwnerImpl.setGroupId(getGroupId());
		cannabisConsentByPropertyOwnerImpl.setCompanyId(getCompanyId());
		cannabisConsentByPropertyOwnerImpl.setUserId(getUserId());
		cannabisConsentByPropertyOwnerImpl.setUserName(getUserName());
		cannabisConsentByPropertyOwnerImpl.setCreateDate(getCreateDate());
		cannabisConsentByPropertyOwnerImpl.setModifiedDate(getModifiedDate());
		cannabisConsentByPropertyOwnerImpl.setTypeOfProperty(
			getTypeOfProperty());
		cannabisConsentByPropertyOwnerImpl.setDescriptionOfProperty(
			getDescriptionOfProperty());
		cannabisConsentByPropertyOwnerImpl.setDescriptionOfIntendedUse(
			getDescriptionOfIntendedUse());
		cannabisConsentByPropertyOwnerImpl.setLandType(getLandType());
		cannabisConsentByPropertyOwnerImpl.setOwnsProperty(getOwnsProperty());
		cannabisConsentByPropertyOwnerImpl.setCannabisApplicationId(
			getCannabisApplicationId());

		cannabisConsentByPropertyOwnerImpl.resetOriginalValues();

		return cannabisConsentByPropertyOwnerImpl;
	}

	@Override
	public CannabisConsentByPropertyOwner cloneWithOriginalValues() {
		CannabisConsentByPropertyOwnerImpl cannabisConsentByPropertyOwnerImpl =
			new CannabisConsentByPropertyOwnerImpl();

		cannabisConsentByPropertyOwnerImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cannabisConsentByPropertyOwnerImpl.setCannabisCPOId(
			this.<Long>getColumnOriginalValue("cannabisCPOId"));
		cannabisConsentByPropertyOwnerImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cannabisConsentByPropertyOwnerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cannabisConsentByPropertyOwnerImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cannabisConsentByPropertyOwnerImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cannabisConsentByPropertyOwnerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cannabisConsentByPropertyOwnerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cannabisConsentByPropertyOwnerImpl.setTypeOfProperty(
			this.<String>getColumnOriginalValue("typeOfProperty"));
		cannabisConsentByPropertyOwnerImpl.setDescriptionOfProperty(
			this.<String>getColumnOriginalValue("descriptionOfProperty"));
		cannabisConsentByPropertyOwnerImpl.setDescriptionOfIntendedUse(
			this.<String>getColumnOriginalValue("descriptionOfIntendedUse"));
		cannabisConsentByPropertyOwnerImpl.setLandType(
			this.<String>getColumnOriginalValue("landType"));
		cannabisConsentByPropertyOwnerImpl.setOwnsProperty(
			this.<String>getColumnOriginalValue("ownsProperty"));
		cannabisConsentByPropertyOwnerImpl.setCannabisApplicationId(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));

		return cannabisConsentByPropertyOwnerImpl;
	}

	@Override
	public int compareTo(
		CannabisConsentByPropertyOwner cannabisConsentByPropertyOwner) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), cannabisConsentByPropertyOwner.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisConsentByPropertyOwner)) {
			return false;
		}

		CannabisConsentByPropertyOwner cannabisConsentByPropertyOwner =
			(CannabisConsentByPropertyOwner)object;

		long primaryKey = cannabisConsentByPropertyOwner.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisConsentByPropertyOwner> toCacheModel() {
		CannabisConsentByPropertyOwnerCacheModel
			cannabisConsentByPropertyOwnerCacheModel =
				new CannabisConsentByPropertyOwnerCacheModel();

		cannabisConsentByPropertyOwnerCacheModel.uuid = getUuid();

		String uuid = cannabisConsentByPropertyOwnerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cannabisConsentByPropertyOwnerCacheModel.uuid = null;
		}

		cannabisConsentByPropertyOwnerCacheModel.cannabisCPOId =
			getCannabisCPOId();

		cannabisConsentByPropertyOwnerCacheModel.groupId = getGroupId();

		cannabisConsentByPropertyOwnerCacheModel.companyId = getCompanyId();

		cannabisConsentByPropertyOwnerCacheModel.userId = getUserId();

		cannabisConsentByPropertyOwnerCacheModel.userName = getUserName();

		String userName = cannabisConsentByPropertyOwnerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cannabisConsentByPropertyOwnerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cannabisConsentByPropertyOwnerCacheModel.createDate =
				createDate.getTime();
		}
		else {
			cannabisConsentByPropertyOwnerCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cannabisConsentByPropertyOwnerCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cannabisConsentByPropertyOwnerCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		cannabisConsentByPropertyOwnerCacheModel.typeOfProperty =
			getTypeOfProperty();

		String typeOfProperty =
			cannabisConsentByPropertyOwnerCacheModel.typeOfProperty;

		if ((typeOfProperty != null) && (typeOfProperty.length() == 0)) {
			cannabisConsentByPropertyOwnerCacheModel.typeOfProperty = null;
		}

		cannabisConsentByPropertyOwnerCacheModel.descriptionOfProperty =
			getDescriptionOfProperty();

		String descriptionOfProperty =
			cannabisConsentByPropertyOwnerCacheModel.descriptionOfProperty;

		if ((descriptionOfProperty != null) &&
			(descriptionOfProperty.length() == 0)) {

			cannabisConsentByPropertyOwnerCacheModel.descriptionOfProperty =
				null;
		}

		cannabisConsentByPropertyOwnerCacheModel.descriptionOfIntendedUse =
			getDescriptionOfIntendedUse();

		String descriptionOfIntendedUse =
			cannabisConsentByPropertyOwnerCacheModel.descriptionOfIntendedUse;

		if ((descriptionOfIntendedUse != null) &&
			(descriptionOfIntendedUse.length() == 0)) {

			cannabisConsentByPropertyOwnerCacheModel.descriptionOfIntendedUse =
				null;
		}

		cannabisConsentByPropertyOwnerCacheModel.landType = getLandType();

		String landType = cannabisConsentByPropertyOwnerCacheModel.landType;

		if ((landType != null) && (landType.length() == 0)) {
			cannabisConsentByPropertyOwnerCacheModel.landType = null;
		}

		cannabisConsentByPropertyOwnerCacheModel.ownsProperty =
			getOwnsProperty();

		String ownsProperty =
			cannabisConsentByPropertyOwnerCacheModel.ownsProperty;

		if ((ownsProperty != null) && (ownsProperty.length() == 0)) {
			cannabisConsentByPropertyOwnerCacheModel.ownsProperty = null;
		}

		cannabisConsentByPropertyOwnerCacheModel.cannabisApplicationId =
			getCannabisApplicationId();

		return cannabisConsentByPropertyOwnerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisConsentByPropertyOwner, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CannabisConsentByPropertyOwner, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisConsentByPropertyOwner, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisConsentByPropertyOwner)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CannabisConsentByPropertyOwner>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CannabisConsentByPropertyOwner.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _cannabisCPOId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _typeOfProperty;
	private String _descriptionOfProperty;
	private String _descriptionOfIntendedUse;
	private String _landType;
	private String _ownsProperty;
	private long _cannabisApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CannabisConsentByPropertyOwner, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisConsentByPropertyOwner)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("cannabisCPOId", _cannabisCPOId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("typeOfProperty", _typeOfProperty);
		_columnOriginalValues.put(
			"descriptionOfProperty", _descriptionOfProperty);
		_columnOriginalValues.put(
			"descriptionOfIntendedUse", _descriptionOfIntendedUse);
		_columnOriginalValues.put("landType", _landType);
		_columnOriginalValues.put("ownsProperty", _ownsProperty);
		_columnOriginalValues.put(
			"cannabisApplicationId", _cannabisApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("cannabisCPOId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("typeOfProperty", 256L);

		columnBitmasks.put("descriptionOfProperty", 512L);

		columnBitmasks.put("descriptionOfIntendedUse", 1024L);

		columnBitmasks.put("landType", 2048L);

		columnBitmasks.put("ownsProperty", 4096L);

		columnBitmasks.put("cannabisApplicationId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisConsentByPropertyOwner _escapedModel;

}