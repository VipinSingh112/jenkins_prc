/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.cannabis.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.cannabis.application.form.services.model.CannabisFeeMaster;
import com.nbp.cannabis.application.form.services.model.CannabisFeeMasterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisFeeMaster service. Represents a row in the &quot;nbp_cannabis_fee_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisFeeMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisFeeMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisFeeMasterImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisFeeMasterModelImpl
	extends BaseModelImpl<CannabisFeeMaster> implements CannabisFeeMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis fee master model instance should use the <code>CannabisFeeMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_fee_master";

	public static final Object[][] TABLE_COLUMNS = {
		{"cannabisFeeMasterId", Types.BIGINT}, {"category", Types.VARCHAR},
		{"subCategory", Types.VARCHAR}, {"securityBond", Types.DOUBLE},
		{"licenseFee", Types.DOUBLE}, {"remarks", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cannabisFeeMasterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityBond", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("licenseFee", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_fee_master (cannabisFeeMasterId LONG not null primary key,category VARCHAR(75) null,subCategory VARCHAR(75) null,securityBond DOUBLE,licenseFee DOUBLE,remarks VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_fee_master";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisFeeMaster.cannabisFeeMasterId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_fee_master.cannabisFeeMasterId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATEGORY_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SUBCATEGORY_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISFEEMASTERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisFeeMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cannabisFeeMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCannabisFeeMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cannabisFeeMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisFeeMaster.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisFeeMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisFeeMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CannabisFeeMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisFeeMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CannabisFeeMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisFeeMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisFeeMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisFeeMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisFeeMaster, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisFeeMaster, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CannabisFeeMaster, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisFeeMaster, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CannabisFeeMaster, Object>>();

			attributeGetterFunctions.put(
				"cannabisFeeMasterId",
				CannabisFeeMaster::getCannabisFeeMasterId);
			attributeGetterFunctions.put(
				"category", CannabisFeeMaster::getCategory);
			attributeGetterFunctions.put(
				"subCategory", CannabisFeeMaster::getSubCategory);
			attributeGetterFunctions.put(
				"securityBond", CannabisFeeMaster::getSecurityBond);
			attributeGetterFunctions.put(
				"licenseFee", CannabisFeeMaster::getLicenseFee);
			attributeGetterFunctions.put(
				"remarks", CannabisFeeMaster::getRemarks);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CannabisFeeMaster, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisFeeMaster, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CannabisFeeMaster, ?>>();

			attributeSetterBiConsumers.put(
				"cannabisFeeMasterId",
				(BiConsumer<CannabisFeeMaster, Long>)
					CannabisFeeMaster::setCannabisFeeMasterId);
			attributeSetterBiConsumers.put(
				"category",
				(BiConsumer<CannabisFeeMaster, String>)
					CannabisFeeMaster::setCategory);
			attributeSetterBiConsumers.put(
				"subCategory",
				(BiConsumer<CannabisFeeMaster, String>)
					CannabisFeeMaster::setSubCategory);
			attributeSetterBiConsumers.put(
				"securityBond",
				(BiConsumer<CannabisFeeMaster, Double>)
					CannabisFeeMaster::setSecurityBond);
			attributeSetterBiConsumers.put(
				"licenseFee",
				(BiConsumer<CannabisFeeMaster, Double>)
					CannabisFeeMaster::setLicenseFee);
			attributeSetterBiConsumers.put(
				"remarks",
				(BiConsumer<CannabisFeeMaster, String>)
					CannabisFeeMaster::setRemarks);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCannabisFeeMasterId() {
		return _cannabisFeeMasterId;
	}

	@Override
	public void setCannabisFeeMasterId(long cannabisFeeMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisFeeMasterId = cannabisFeeMasterId;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCategory() {
		return getColumnOriginalValue("category");
	}

	@JSON
	@Override
	public String getSubCategory() {
		if (_subCategory == null) {
			return "";
		}
		else {
			return _subCategory;
		}
	}

	@Override
	public void setSubCategory(String subCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subCategory = subCategory;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSubCategory() {
		return getColumnOriginalValue("subCategory");
	}

	@JSON
	@Override
	public double getSecurityBond() {
		return _securityBond;
	}

	@Override
	public void setSecurityBond(double securityBond) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityBond = securityBond;
	}

	@JSON
	@Override
	public double getLicenseFee() {
		return _licenseFee;
	}

	@Override
	public void setLicenseFee(double licenseFee) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseFee = licenseFee;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CannabisFeeMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisFeeMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisFeeMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisFeeMasterImpl cannabisFeeMasterImpl =
			new CannabisFeeMasterImpl();

		cannabisFeeMasterImpl.setCannabisFeeMasterId(getCannabisFeeMasterId());
		cannabisFeeMasterImpl.setCategory(getCategory());
		cannabisFeeMasterImpl.setSubCategory(getSubCategory());
		cannabisFeeMasterImpl.setSecurityBond(getSecurityBond());
		cannabisFeeMasterImpl.setLicenseFee(getLicenseFee());
		cannabisFeeMasterImpl.setRemarks(getRemarks());

		cannabisFeeMasterImpl.resetOriginalValues();

		return cannabisFeeMasterImpl;
	}

	@Override
	public CannabisFeeMaster cloneWithOriginalValues() {
		CannabisFeeMasterImpl cannabisFeeMasterImpl =
			new CannabisFeeMasterImpl();

		cannabisFeeMasterImpl.setCannabisFeeMasterId(
			this.<Long>getColumnOriginalValue("cannabisFeeMasterId"));
		cannabisFeeMasterImpl.setCategory(
			this.<String>getColumnOriginalValue("category"));
		cannabisFeeMasterImpl.setSubCategory(
			this.<String>getColumnOriginalValue("subCategory"));
		cannabisFeeMasterImpl.setSecurityBond(
			this.<Double>getColumnOriginalValue("securityBond"));
		cannabisFeeMasterImpl.setLicenseFee(
			this.<Double>getColumnOriginalValue("licenseFee"));
		cannabisFeeMasterImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));

		return cannabisFeeMasterImpl;
	}

	@Override
	public int compareTo(CannabisFeeMaster cannabisFeeMaster) {
		long primaryKey = cannabisFeeMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisFeeMaster)) {
			return false;
		}

		CannabisFeeMaster cannabisFeeMaster = (CannabisFeeMaster)object;

		long primaryKey = cannabisFeeMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisFeeMaster> toCacheModel() {
		CannabisFeeMasterCacheModel cannabisFeeMasterCacheModel =
			new CannabisFeeMasterCacheModel();

		cannabisFeeMasterCacheModel.cannabisFeeMasterId =
			getCannabisFeeMasterId();

		cannabisFeeMasterCacheModel.category = getCategory();

		String category = cannabisFeeMasterCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			cannabisFeeMasterCacheModel.category = null;
		}

		cannabisFeeMasterCacheModel.subCategory = getSubCategory();

		String subCategory = cannabisFeeMasterCacheModel.subCategory;

		if ((subCategory != null) && (subCategory.length() == 0)) {
			cannabisFeeMasterCacheModel.subCategory = null;
		}

		cannabisFeeMasterCacheModel.securityBond = getSecurityBond();

		cannabisFeeMasterCacheModel.licenseFee = getLicenseFee();

		cannabisFeeMasterCacheModel.remarks = getRemarks();

		String remarks = cannabisFeeMasterCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			cannabisFeeMasterCacheModel.remarks = null;
		}

		return cannabisFeeMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisFeeMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CannabisFeeMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisFeeMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisFeeMaster)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CannabisFeeMaster>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CannabisFeeMaster.class, ModelWrapper.class);

	}

	private long _cannabisFeeMasterId;
	private String _category;
	private String _subCategory;
	private double _securityBond;
	private double _licenseFee;
	private String _remarks;

	public <T> T getColumnValue(String columnName) {
		Function<CannabisFeeMaster, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisFeeMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("cannabisFeeMasterId", _cannabisFeeMasterId);
		_columnOriginalValues.put("category", _category);
		_columnOriginalValues.put("subCategory", _subCategory);
		_columnOriginalValues.put("securityBond", _securityBond);
		_columnOriginalValues.put("licenseFee", _licenseFee);
		_columnOriginalValues.put("remarks", _remarks);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("cannabisFeeMasterId", 1L);

		columnBitmasks.put("category", 2L);

		columnBitmasks.put("subCategory", 4L);

		columnBitmasks.put("securityBond", 8L);

		columnBitmasks.put("licenseFee", 16L);

		columnBitmasks.put("remarks", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisFeeMaster _escapedModel;

}