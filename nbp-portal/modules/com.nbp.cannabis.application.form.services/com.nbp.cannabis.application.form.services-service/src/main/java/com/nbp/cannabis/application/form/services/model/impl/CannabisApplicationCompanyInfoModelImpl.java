/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.cannabis.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.cannabis.application.form.services.model.CannabisApplicationCompanyInfo;
import com.nbp.cannabis.application.form.services.model.CannabisApplicationCompanyInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisApplicationCompanyInfo service. Represents a row in the &quot;nbp_cannabis_company_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisApplicationCompanyInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisApplicationCompanyInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisApplicationCompanyInfoImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisApplicationCompanyInfoModelImpl
	extends BaseModelImpl<CannabisApplicationCompanyInfo>
	implements CannabisApplicationCompanyInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis application company info model instance should use the <code>CannabisApplicationCompanyInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_company_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"companyInformationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"companyName", Types.VARCHAR}, {"trn", Types.VARCHAR},
		{"typeOfCompany", Types.VARCHAR}, {"otherCompanyType", Types.VARCHAR},
		{"registrationNumber", Types.VARCHAR},
		{"contactPhoneNumber", Types.VARCHAR}, {"emailAddress", Types.VARCHAR},
		{"status", Types.INTEGER}, {"applicationNumber", Types.VARCHAR},
		{"cannabisApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyInformationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherCompanyType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPhoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cannabisApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_company_info (uuid_ VARCHAR(75) null,companyInformationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyName VARCHAR(75) null,trn VARCHAR(75) null,typeOfCompany VARCHAR(75) null,otherCompanyType VARCHAR(75) null,registrationNumber VARCHAR(75) null,contactPhoneNumber VARCHAR(75) null,emailAddress VARCHAR(75) null,status INTEGER,applicationNumber VARCHAR(75) null,cannabisApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_company_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisApplicationCompanyInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_company_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISAPPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisApplicationCompanyInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _companyInformationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompanyInformationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _companyInformationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisApplicationCompanyInfo.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisApplicationCompanyInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisApplicationCompanyInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CannabisApplicationCompanyInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisApplicationCompanyInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CannabisApplicationCompanyInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisApplicationCompanyInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisApplicationCompanyInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisApplicationCompanyInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisApplicationCompanyInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisApplicationCompanyInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CannabisApplicationCompanyInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisApplicationCompanyInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CannabisApplicationCompanyInfo, Object>>();

			attributeGetterFunctions.put(
				"uuid", CannabisApplicationCompanyInfo::getUuid);
			attributeGetterFunctions.put(
				"companyInformationId",
				CannabisApplicationCompanyInfo::getCompanyInformationId);
			attributeGetterFunctions.put(
				"groupId", CannabisApplicationCompanyInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CannabisApplicationCompanyInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CannabisApplicationCompanyInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", CannabisApplicationCompanyInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", CannabisApplicationCompanyInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				CannabisApplicationCompanyInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"companyName", CannabisApplicationCompanyInfo::getCompanyName);
			attributeGetterFunctions.put(
				"trn", CannabisApplicationCompanyInfo::getTrn);
			attributeGetterFunctions.put(
				"typeOfCompany",
				CannabisApplicationCompanyInfo::getTypeOfCompany);
			attributeGetterFunctions.put(
				"otherCompanyType",
				CannabisApplicationCompanyInfo::getOtherCompanyType);
			attributeGetterFunctions.put(
				"registrationNumber",
				CannabisApplicationCompanyInfo::getRegistrationNumber);
			attributeGetterFunctions.put(
				"contactPhoneNumber",
				CannabisApplicationCompanyInfo::getContactPhoneNumber);
			attributeGetterFunctions.put(
				"emailAddress",
				CannabisApplicationCompanyInfo::getEmailAddress);
			attributeGetterFunctions.put(
				"status", CannabisApplicationCompanyInfo::getStatus);
			attributeGetterFunctions.put(
				"applicationNumber",
				CannabisApplicationCompanyInfo::getApplicationNumber);
			attributeGetterFunctions.put(
				"cannabisApplicationId",
				CannabisApplicationCompanyInfo::getCannabisApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CannabisApplicationCompanyInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisApplicationCompanyInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<CannabisApplicationCompanyInfo, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setUuid);
			attributeSetterBiConsumers.put(
				"companyInformationId",
				(BiConsumer<CannabisApplicationCompanyInfo, Long>)
					CannabisApplicationCompanyInfo::setCompanyInformationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CannabisApplicationCompanyInfo, Long>)
					CannabisApplicationCompanyInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CannabisApplicationCompanyInfo, Long>)
					CannabisApplicationCompanyInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CannabisApplicationCompanyInfo, Long>)
					CannabisApplicationCompanyInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CannabisApplicationCompanyInfo, Date>)
					CannabisApplicationCompanyInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CannabisApplicationCompanyInfo, Date>)
					CannabisApplicationCompanyInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"companyName",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setCompanyName);
			attributeSetterBiConsumers.put(
				"trn",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setTrn);
			attributeSetterBiConsumers.put(
				"typeOfCompany",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setTypeOfCompany);
			attributeSetterBiConsumers.put(
				"otherCompanyType",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setOtherCompanyType);
			attributeSetterBiConsumers.put(
				"registrationNumber",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setRegistrationNumber);
			attributeSetterBiConsumers.put(
				"contactPhoneNumber",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setContactPhoneNumber);
			attributeSetterBiConsumers.put(
				"emailAddress",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setEmailAddress);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<CannabisApplicationCompanyInfo, Integer>)
					CannabisApplicationCompanyInfo::setStatus);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<CannabisApplicationCompanyInfo, String>)
					CannabisApplicationCompanyInfo::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"cannabisApplicationId",
				(BiConsumer<CannabisApplicationCompanyInfo, Long>)
					CannabisApplicationCompanyInfo::setCannabisApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCompanyInformationId() {
		return _companyInformationId;
	}

	@Override
	public void setCompanyInformationId(long companyInformationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyInformationId = companyInformationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	@JSON
	@Override
	public String getTrn() {
		if (_trn == null) {
			return "";
		}
		else {
			return _trn;
		}
	}

	@Override
	public void setTrn(String trn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trn = trn;
	}

	@JSON
	@Override
	public String getTypeOfCompany() {
		if (_typeOfCompany == null) {
			return "";
		}
		else {
			return _typeOfCompany;
		}
	}

	@Override
	public void setTypeOfCompany(String typeOfCompany) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfCompany = typeOfCompany;
	}

	@JSON
	@Override
	public String getOtherCompanyType() {
		if (_otherCompanyType == null) {
			return "";
		}
		else {
			return _otherCompanyType;
		}
	}

	@Override
	public void setOtherCompanyType(String otherCompanyType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherCompanyType = otherCompanyType;
	}

	@JSON
	@Override
	public String getRegistrationNumber() {
		if (_registrationNumber == null) {
			return "";
		}
		else {
			return _registrationNumber;
		}
	}

	@Override
	public void setRegistrationNumber(String registrationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registrationNumber = registrationNumber;
	}

	@JSON
	@Override
	public String getContactPhoneNumber() {
		if (_contactPhoneNumber == null) {
			return "";
		}
		else {
			return _contactPhoneNumber;
		}
	}

	@Override
	public void setContactPhoneNumber(String contactPhoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactPhoneNumber = contactPhoneNumber;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public long getCannabisApplicationId() {
		return _cannabisApplicationId;
	}

	@Override
	public void setCannabisApplicationId(long cannabisApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisApplicationId = cannabisApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCannabisApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				CannabisApplicationCompanyInfo.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CannabisApplicationCompanyInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisApplicationCompanyInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisApplicationCompanyInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisApplicationCompanyInfoImpl cannabisApplicationCompanyInfoImpl =
			new CannabisApplicationCompanyInfoImpl();

		cannabisApplicationCompanyInfoImpl.setUuid(getUuid());
		cannabisApplicationCompanyInfoImpl.setCompanyInformationId(
			getCompanyInformationId());
		cannabisApplicationCompanyInfoImpl.setGroupId(getGroupId());
		cannabisApplicationCompanyInfoImpl.setCompanyId(getCompanyId());
		cannabisApplicationCompanyInfoImpl.setUserId(getUserId());
		cannabisApplicationCompanyInfoImpl.setUserName(getUserName());
		cannabisApplicationCompanyInfoImpl.setCreateDate(getCreateDate());
		cannabisApplicationCompanyInfoImpl.setModifiedDate(getModifiedDate());
		cannabisApplicationCompanyInfoImpl.setCompanyName(getCompanyName());
		cannabisApplicationCompanyInfoImpl.setTrn(getTrn());
		cannabisApplicationCompanyInfoImpl.setTypeOfCompany(getTypeOfCompany());
		cannabisApplicationCompanyInfoImpl.setOtherCompanyType(
			getOtherCompanyType());
		cannabisApplicationCompanyInfoImpl.setRegistrationNumber(
			getRegistrationNumber());
		cannabisApplicationCompanyInfoImpl.setContactPhoneNumber(
			getContactPhoneNumber());
		cannabisApplicationCompanyInfoImpl.setEmailAddress(getEmailAddress());
		cannabisApplicationCompanyInfoImpl.setStatus(getStatus());
		cannabisApplicationCompanyInfoImpl.setApplicationNumber(
			getApplicationNumber());
		cannabisApplicationCompanyInfoImpl.setCannabisApplicationId(
			getCannabisApplicationId());

		cannabisApplicationCompanyInfoImpl.resetOriginalValues();

		return cannabisApplicationCompanyInfoImpl;
	}

	@Override
	public CannabisApplicationCompanyInfo cloneWithOriginalValues() {
		CannabisApplicationCompanyInfoImpl cannabisApplicationCompanyInfoImpl =
			new CannabisApplicationCompanyInfoImpl();

		cannabisApplicationCompanyInfoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cannabisApplicationCompanyInfoImpl.setCompanyInformationId(
			this.<Long>getColumnOriginalValue("companyInformationId"));
		cannabisApplicationCompanyInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cannabisApplicationCompanyInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cannabisApplicationCompanyInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cannabisApplicationCompanyInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cannabisApplicationCompanyInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cannabisApplicationCompanyInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cannabisApplicationCompanyInfoImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		cannabisApplicationCompanyInfoImpl.setTrn(
			this.<String>getColumnOriginalValue("trn"));
		cannabisApplicationCompanyInfoImpl.setTypeOfCompany(
			this.<String>getColumnOriginalValue("typeOfCompany"));
		cannabisApplicationCompanyInfoImpl.setOtherCompanyType(
			this.<String>getColumnOriginalValue("otherCompanyType"));
		cannabisApplicationCompanyInfoImpl.setRegistrationNumber(
			this.<String>getColumnOriginalValue("registrationNumber"));
		cannabisApplicationCompanyInfoImpl.setContactPhoneNumber(
			this.<String>getColumnOriginalValue("contactPhoneNumber"));
		cannabisApplicationCompanyInfoImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		cannabisApplicationCompanyInfoImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		cannabisApplicationCompanyInfoImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		cannabisApplicationCompanyInfoImpl.setCannabisApplicationId(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));

		return cannabisApplicationCompanyInfoImpl;
	}

	@Override
	public int compareTo(
		CannabisApplicationCompanyInfo cannabisApplicationCompanyInfo) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), cannabisApplicationCompanyInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisApplicationCompanyInfo)) {
			return false;
		}

		CannabisApplicationCompanyInfo cannabisApplicationCompanyInfo =
			(CannabisApplicationCompanyInfo)object;

		long primaryKey = cannabisApplicationCompanyInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisApplicationCompanyInfo> toCacheModel() {
		CannabisApplicationCompanyInfoCacheModel
			cannabisApplicationCompanyInfoCacheModel =
				new CannabisApplicationCompanyInfoCacheModel();

		cannabisApplicationCompanyInfoCacheModel.uuid = getUuid();

		String uuid = cannabisApplicationCompanyInfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cannabisApplicationCompanyInfoCacheModel.uuid = null;
		}

		cannabisApplicationCompanyInfoCacheModel.companyInformationId =
			getCompanyInformationId();

		cannabisApplicationCompanyInfoCacheModel.groupId = getGroupId();

		cannabisApplicationCompanyInfoCacheModel.companyId = getCompanyId();

		cannabisApplicationCompanyInfoCacheModel.userId = getUserId();

		cannabisApplicationCompanyInfoCacheModel.userName = getUserName();

		String userName = cannabisApplicationCompanyInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cannabisApplicationCompanyInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cannabisApplicationCompanyInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			cannabisApplicationCompanyInfoCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cannabisApplicationCompanyInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cannabisApplicationCompanyInfoCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		cannabisApplicationCompanyInfoCacheModel.companyName = getCompanyName();

		String companyName =
			cannabisApplicationCompanyInfoCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			cannabisApplicationCompanyInfoCacheModel.companyName = null;
		}

		cannabisApplicationCompanyInfoCacheModel.trn = getTrn();

		String trn = cannabisApplicationCompanyInfoCacheModel.trn;

		if ((trn != null) && (trn.length() == 0)) {
			cannabisApplicationCompanyInfoCacheModel.trn = null;
		}

		cannabisApplicationCompanyInfoCacheModel.typeOfCompany =
			getTypeOfCompany();

		String typeOfCompany =
			cannabisApplicationCompanyInfoCacheModel.typeOfCompany;

		if ((typeOfCompany != null) && (typeOfCompany.length() == 0)) {
			cannabisApplicationCompanyInfoCacheModel.typeOfCompany = null;
		}

		cannabisApplicationCompanyInfoCacheModel.otherCompanyType =
			getOtherCompanyType();

		String otherCompanyType =
			cannabisApplicationCompanyInfoCacheModel.otherCompanyType;

		if ((otherCompanyType != null) && (otherCompanyType.length() == 0)) {
			cannabisApplicationCompanyInfoCacheModel.otherCompanyType = null;
		}

		cannabisApplicationCompanyInfoCacheModel.registrationNumber =
			getRegistrationNumber();

		String registrationNumber =
			cannabisApplicationCompanyInfoCacheModel.registrationNumber;

		if ((registrationNumber != null) &&
			(registrationNumber.length() == 0)) {

			cannabisApplicationCompanyInfoCacheModel.registrationNumber = null;
		}

		cannabisApplicationCompanyInfoCacheModel.contactPhoneNumber =
			getContactPhoneNumber();

		String contactPhoneNumber =
			cannabisApplicationCompanyInfoCacheModel.contactPhoneNumber;

		if ((contactPhoneNumber != null) &&
			(contactPhoneNumber.length() == 0)) {

			cannabisApplicationCompanyInfoCacheModel.contactPhoneNumber = null;
		}

		cannabisApplicationCompanyInfoCacheModel.emailAddress =
			getEmailAddress();

		String emailAddress =
			cannabisApplicationCompanyInfoCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			cannabisApplicationCompanyInfoCacheModel.emailAddress = null;
		}

		cannabisApplicationCompanyInfoCacheModel.status = getStatus();

		cannabisApplicationCompanyInfoCacheModel.applicationNumber =
			getApplicationNumber();

		String applicationNumber =
			cannabisApplicationCompanyInfoCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			cannabisApplicationCompanyInfoCacheModel.applicationNumber = null;
		}

		cannabisApplicationCompanyInfoCacheModel.cannabisApplicationId =
			getCannabisApplicationId();

		return cannabisApplicationCompanyInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisApplicationCompanyInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CannabisApplicationCompanyInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisApplicationCompanyInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisApplicationCompanyInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CannabisApplicationCompanyInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CannabisApplicationCompanyInfo.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _companyInformationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _companyName;
	private String _trn;
	private String _typeOfCompany;
	private String _otherCompanyType;
	private String _registrationNumber;
	private String _contactPhoneNumber;
	private String _emailAddress;
	private int _status;
	private String _applicationNumber;
	private long _cannabisApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CannabisApplicationCompanyInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisApplicationCompanyInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"companyInformationId", _companyInformationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("trn", _trn);
		_columnOriginalValues.put("typeOfCompany", _typeOfCompany);
		_columnOriginalValues.put("otherCompanyType", _otherCompanyType);
		_columnOriginalValues.put("registrationNumber", _registrationNumber);
		_columnOriginalValues.put("contactPhoneNumber", _contactPhoneNumber);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"cannabisApplicationId", _cannabisApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("companyInformationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("companyName", 256L);

		columnBitmasks.put("trn", 512L);

		columnBitmasks.put("typeOfCompany", 1024L);

		columnBitmasks.put("otherCompanyType", 2048L);

		columnBitmasks.put("registrationNumber", 4096L);

		columnBitmasks.put("contactPhoneNumber", 8192L);

		columnBitmasks.put("emailAddress", 16384L);

		columnBitmasks.put("status", 32768L);

		columnBitmasks.put("applicationNumber", 65536L);

		columnBitmasks.put("cannabisApplicationId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisApplicationCompanyInfo _escapedModel;

}