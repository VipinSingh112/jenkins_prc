/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.jadsc.stage.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jadsc.stage.services.model.JadscAppliPreInitiation;
import com.nbp.jadsc.stage.services.model.JadscAppliPreInitiationModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the JadscAppliPreInitiation service. Represents a row in the &quot;nbp_jadsc_application_pre&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>JadscAppliPreInitiationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JadscAppliPreInitiationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JadscAppliPreInitiationImpl
 * @generated
 */
@JSON(strict = true)
public class JadscAppliPreInitiationModelImpl
	extends BaseModelImpl<JadscAppliPreInitiation>
	implements JadscAppliPreInitiationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jadsc appli pre initiation model instance should use the <code>JadscAppliPreInitiation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jadsc_application_pre";

	public static final Object[][] TABLE_COLUMNS = {
		{"jadscAppliPreInitiationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"dateOfPreInitiation", Types.TIMESTAMP}, {"outcome", Types.VARCHAR},
		{"caseId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("jadscAppliPreInitiationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfPreInitiation", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("outcome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jadsc_application_pre (jadscAppliPreInitiationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dateOfPreInitiation DATE null,outcome VARCHAR(75) null,caseId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jadsc_application_pre";

	public static final String ORDER_BY_JPQL =
		" ORDER BY jadscAppliPreInitiation.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jadsc_application_pre.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OUTCOME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public JadscAppliPreInitiationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jadscAppliPreInitiationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJadscAppliPreInitiationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jadscAppliPreInitiationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JadscAppliPreInitiation.class;
	}

	@Override
	public String getModelClassName() {
		return JadscAppliPreInitiation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<JadscAppliPreInitiation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<JadscAppliPreInitiation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JadscAppliPreInitiation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((JadscAppliPreInitiation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<JadscAppliPreInitiation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<JadscAppliPreInitiation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(JadscAppliPreInitiation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<JadscAppliPreInitiation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<JadscAppliPreInitiation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, JadscAppliPreInitiation>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			JadscAppliPreInitiation.class.getClassLoader(),
			JadscAppliPreInitiation.class, ModelWrapper.class);

		try {
			Constructor<JadscAppliPreInitiation> constructor =
				(Constructor<JadscAppliPreInitiation>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<JadscAppliPreInitiation, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<JadscAppliPreInitiation, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<JadscAppliPreInitiation, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<JadscAppliPreInitiation, Object>>();
		Map<String, BiConsumer<JadscAppliPreInitiation, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<JadscAppliPreInitiation, ?>>();

		attributeGetterFunctions.put(
			"jadscAppliPreInitiationId",
			JadscAppliPreInitiation::getJadscAppliPreInitiationId);
		attributeSetterBiConsumers.put(
			"jadscAppliPreInitiationId",
			(BiConsumer<JadscAppliPreInitiation, Long>)
				JadscAppliPreInitiation::setJadscAppliPreInitiationId);
		attributeGetterFunctions.put(
			"groupId", JadscAppliPreInitiation::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<JadscAppliPreInitiation, Long>)
				JadscAppliPreInitiation::setGroupId);
		attributeGetterFunctions.put(
			"companyId", JadscAppliPreInitiation::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<JadscAppliPreInitiation, Long>)
				JadscAppliPreInitiation::setCompanyId);
		attributeGetterFunctions.put(
			"userId", JadscAppliPreInitiation::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<JadscAppliPreInitiation, Long>)
				JadscAppliPreInitiation::setUserId);
		attributeGetterFunctions.put(
			"userName", JadscAppliPreInitiation::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<JadscAppliPreInitiation, String>)
				JadscAppliPreInitiation::setUserName);
		attributeGetterFunctions.put(
			"createDate", JadscAppliPreInitiation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<JadscAppliPreInitiation, Date>)
				JadscAppliPreInitiation::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", JadscAppliPreInitiation::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<JadscAppliPreInitiation, Date>)
				JadscAppliPreInitiation::setModifiedDate);
		attributeGetterFunctions.put(
			"dateOfPreInitiation",
			JadscAppliPreInitiation::getDateOfPreInitiation);
		attributeSetterBiConsumers.put(
			"dateOfPreInitiation",
			(BiConsumer<JadscAppliPreInitiation, Date>)
				JadscAppliPreInitiation::setDateOfPreInitiation);
		attributeGetterFunctions.put(
			"outcome", JadscAppliPreInitiation::getOutcome);
		attributeSetterBiConsumers.put(
			"outcome",
			(BiConsumer<JadscAppliPreInitiation, String>)
				JadscAppliPreInitiation::setOutcome);
		attributeGetterFunctions.put(
			"caseId", JadscAppliPreInitiation::getCaseId);
		attributeSetterBiConsumers.put(
			"caseId",
			(BiConsumer<JadscAppliPreInitiation, String>)
				JadscAppliPreInitiation::setCaseId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getJadscAppliPreInitiationId() {
		return _jadscAppliPreInitiationId;
	}

	@Override
	public void setJadscAppliPreInitiationId(long jadscAppliPreInitiationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jadscAppliPreInitiationId = jadscAppliPreInitiationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getDateOfPreInitiation() {
		return _dateOfPreInitiation;
	}

	@Override
	public void setDateOfPreInitiation(Date dateOfPreInitiation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfPreInitiation = dateOfPreInitiation;
	}

	@JSON
	@Override
	public String getOutcome() {
		if (_outcome == null) {
			return "";
		}
		else {
			return _outcome;
		}
	}

	@Override
	public void setOutcome(String outcome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_outcome = outcome;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalOutcome() {
		return getColumnOriginalValue("outcome");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), JadscAppliPreInitiation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JadscAppliPreInitiation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, JadscAppliPreInitiation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JadscAppliPreInitiationImpl jadscAppliPreInitiationImpl =
			new JadscAppliPreInitiationImpl();

		jadscAppliPreInitiationImpl.setJadscAppliPreInitiationId(
			getJadscAppliPreInitiationId());
		jadscAppliPreInitiationImpl.setGroupId(getGroupId());
		jadscAppliPreInitiationImpl.setCompanyId(getCompanyId());
		jadscAppliPreInitiationImpl.setUserId(getUserId());
		jadscAppliPreInitiationImpl.setUserName(getUserName());
		jadscAppliPreInitiationImpl.setCreateDate(getCreateDate());
		jadscAppliPreInitiationImpl.setModifiedDate(getModifiedDate());
		jadscAppliPreInitiationImpl.setDateOfPreInitiation(
			getDateOfPreInitiation());
		jadscAppliPreInitiationImpl.setOutcome(getOutcome());
		jadscAppliPreInitiationImpl.setCaseId(getCaseId());

		jadscAppliPreInitiationImpl.resetOriginalValues();

		return jadscAppliPreInitiationImpl;
	}

	@Override
	public JadscAppliPreInitiation cloneWithOriginalValues() {
		JadscAppliPreInitiationImpl jadscAppliPreInitiationImpl =
			new JadscAppliPreInitiationImpl();

		jadscAppliPreInitiationImpl.setJadscAppliPreInitiationId(
			this.<Long>getColumnOriginalValue("jadscAppliPreInitiationId"));
		jadscAppliPreInitiationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		jadscAppliPreInitiationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		jadscAppliPreInitiationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		jadscAppliPreInitiationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		jadscAppliPreInitiationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		jadscAppliPreInitiationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		jadscAppliPreInitiationImpl.setDateOfPreInitiation(
			this.<Date>getColumnOriginalValue("dateOfPreInitiation"));
		jadscAppliPreInitiationImpl.setOutcome(
			this.<String>getColumnOriginalValue("outcome"));
		jadscAppliPreInitiationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));

		return jadscAppliPreInitiationImpl;
	}

	@Override
	public int compareTo(JadscAppliPreInitiation jadscAppliPreInitiation) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), jadscAppliPreInitiation.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof JadscAppliPreInitiation)) {
			return false;
		}

		JadscAppliPreInitiation jadscAppliPreInitiation =
			(JadscAppliPreInitiation)object;

		long primaryKey = jadscAppliPreInitiation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<JadscAppliPreInitiation> toCacheModel() {
		JadscAppliPreInitiationCacheModel jadscAppliPreInitiationCacheModel =
			new JadscAppliPreInitiationCacheModel();

		jadscAppliPreInitiationCacheModel.jadscAppliPreInitiationId =
			getJadscAppliPreInitiationId();

		jadscAppliPreInitiationCacheModel.groupId = getGroupId();

		jadscAppliPreInitiationCacheModel.companyId = getCompanyId();

		jadscAppliPreInitiationCacheModel.userId = getUserId();

		jadscAppliPreInitiationCacheModel.userName = getUserName();

		String userName = jadscAppliPreInitiationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jadscAppliPreInitiationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			jadscAppliPreInitiationCacheModel.createDate = createDate.getTime();
		}
		else {
			jadscAppliPreInitiationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jadscAppliPreInitiationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			jadscAppliPreInitiationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date dateOfPreInitiation = getDateOfPreInitiation();

		if (dateOfPreInitiation != null) {
			jadscAppliPreInitiationCacheModel.dateOfPreInitiation =
				dateOfPreInitiation.getTime();
		}
		else {
			jadscAppliPreInitiationCacheModel.dateOfPreInitiation =
				Long.MIN_VALUE;
		}

		jadscAppliPreInitiationCacheModel.outcome = getOutcome();

		String outcome = jadscAppliPreInitiationCacheModel.outcome;

		if ((outcome != null) && (outcome.length() == 0)) {
			jadscAppliPreInitiationCacheModel.outcome = null;
		}

		jadscAppliPreInitiationCacheModel.caseId = getCaseId();

		String caseId = jadscAppliPreInitiationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			jadscAppliPreInitiationCacheModel.caseId = null;
		}

		return jadscAppliPreInitiationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<JadscAppliPreInitiation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<JadscAppliPreInitiation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JadscAppliPreInitiation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(JadscAppliPreInitiation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, JadscAppliPreInitiation>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _jadscAppliPreInitiationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _dateOfPreInitiation;
	private String _outcome;
	private String _caseId;

	public <T> T getColumnValue(String columnName) {
		Function<JadscAppliPreInitiation, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((JadscAppliPreInitiation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"jadscAppliPreInitiationId", _jadscAppliPreInitiationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("dateOfPreInitiation", _dateOfPreInitiation);
		_columnOriginalValues.put("outcome", _outcome);
		_columnOriginalValues.put("caseId", _caseId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("jadscAppliPreInitiationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("dateOfPreInitiation", 128L);

		columnBitmasks.put("outcome", 256L);

		columnBitmasks.put("caseId", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private JadscAppliPreInitiation _escapedModel;

}