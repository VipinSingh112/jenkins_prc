/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.stages.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.stages.service.model.FarmDeskVerification;
import com.nbp.farm.application.stages.service.model.FarmDeskVerificationModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmDeskVerification service. Represents a row in the &quot;nbp_farm_desk_verifica&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmDeskVerificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmDeskVerificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmDeskVerificationImpl
 * @generated
 */
@JSON(strict = true)
public class FarmDeskVerificationModelImpl
	extends BaseModelImpl<FarmDeskVerification>
	implements FarmDeskVerificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farm desk verification model instance should use the <code>FarmDeskVerification</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_farm_desk_verifica";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmDeskVerificationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"farmerApplicationId", Types.BIGINT}, {"documentName", Types.VARCHAR},
		{"documentStatus", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmDeskVerificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("farmerApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentStatus", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_farm_desk_verifica (farmDeskVerificationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,farmerApplicationId LONG,documentName VARCHAR(500) null,documentStatus VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_farm_desk_verifica";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmDeskVerification.farmDeskVerificationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_farm_desk_verifica.farmDeskVerificationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMDESKVERIFICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmDeskVerificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmDeskVerificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmDeskVerificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmDeskVerificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmDeskVerification.class;
	}

	@Override
	public String getModelClassName() {
		return FarmDeskVerification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmDeskVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmDeskVerification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmDeskVerification, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmDeskVerification)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmDeskVerification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmDeskVerification, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmDeskVerification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmDeskVerification, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmDeskVerification, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmDeskVerification>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmDeskVerification.class.getClassLoader(),
			FarmDeskVerification.class, ModelWrapper.class);

		try {
			Constructor<FarmDeskVerification> constructor =
				(Constructor<FarmDeskVerification>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmDeskVerification, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmDeskVerification, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmDeskVerification, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FarmDeskVerification, Object>>();
		Map<String, BiConsumer<FarmDeskVerification, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<FarmDeskVerification, ?>>();

		attributeGetterFunctions.put(
			"farmDeskVerificationId",
			FarmDeskVerification::getFarmDeskVerificationId);
		attributeSetterBiConsumers.put(
			"farmDeskVerificationId",
			(BiConsumer<FarmDeskVerification, Long>)
				FarmDeskVerification::setFarmDeskVerificationId);
		attributeGetterFunctions.put(
			"groupId", FarmDeskVerification::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmDeskVerification, Long>)
				FarmDeskVerification::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmDeskVerification::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmDeskVerification, Long>)
				FarmDeskVerification::setCompanyId);
		attributeGetterFunctions.put("userId", FarmDeskVerification::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmDeskVerification, Long>)
				FarmDeskVerification::setUserId);
		attributeGetterFunctions.put(
			"userName", FarmDeskVerification::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmDeskVerification, String>)
				FarmDeskVerification::setUserName);
		attributeGetterFunctions.put(
			"createDate", FarmDeskVerification::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmDeskVerification, Date>)
				FarmDeskVerification::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmDeskVerification::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmDeskVerification, Date>)
				FarmDeskVerification::setModifiedDate);
		attributeGetterFunctions.put(
			"farmerApplicationId",
			FarmDeskVerification::getFarmerApplicationId);
		attributeSetterBiConsumers.put(
			"farmerApplicationId",
			(BiConsumer<FarmDeskVerification, Long>)
				FarmDeskVerification::setFarmerApplicationId);
		attributeGetterFunctions.put(
			"documentName", FarmDeskVerification::getDocumentName);
		attributeSetterBiConsumers.put(
			"documentName",
			(BiConsumer<FarmDeskVerification, String>)
				FarmDeskVerification::setDocumentName);
		attributeGetterFunctions.put(
			"documentStatus", FarmDeskVerification::getDocumentStatus);
		attributeSetterBiConsumers.put(
			"documentStatus",
			(BiConsumer<FarmDeskVerification, String>)
				FarmDeskVerification::setDocumentStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmDeskVerificationId() {
		return _farmDeskVerificationId;
	}

	@Override
	public void setFarmDeskVerificationId(long farmDeskVerificationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmDeskVerificationId = farmDeskVerificationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getFarmerApplicationId() {
		return _farmerApplicationId;
	}

	@Override
	public void setFarmerApplicationId(long farmerApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerApplicationId = farmerApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
	}

	@JSON
	@Override
	public String getDocumentName() {
		if (_documentName == null) {
			return "";
		}
		else {
			return _documentName;
		}
	}

	@Override
	public void setDocumentName(String documentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentName = documentName;
	}

	@JSON
	@Override
	public String getDocumentStatus() {
		if (_documentStatus == null) {
			return "";
		}
		else {
			return _documentStatus;
		}
	}

	@Override
	public void setDocumentStatus(String documentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentStatus = documentStatus;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmDeskVerification.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmDeskVerification toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmDeskVerification>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmDeskVerificationImpl farmDeskVerificationImpl =
			new FarmDeskVerificationImpl();

		farmDeskVerificationImpl.setFarmDeskVerificationId(
			getFarmDeskVerificationId());
		farmDeskVerificationImpl.setGroupId(getGroupId());
		farmDeskVerificationImpl.setCompanyId(getCompanyId());
		farmDeskVerificationImpl.setUserId(getUserId());
		farmDeskVerificationImpl.setUserName(getUserName());
		farmDeskVerificationImpl.setCreateDate(getCreateDate());
		farmDeskVerificationImpl.setModifiedDate(getModifiedDate());
		farmDeskVerificationImpl.setFarmerApplicationId(
			getFarmerApplicationId());
		farmDeskVerificationImpl.setDocumentName(getDocumentName());
		farmDeskVerificationImpl.setDocumentStatus(getDocumentStatus());

		farmDeskVerificationImpl.resetOriginalValues();

		return farmDeskVerificationImpl;
	}

	@Override
	public FarmDeskVerification cloneWithOriginalValues() {
		FarmDeskVerificationImpl farmDeskVerificationImpl =
			new FarmDeskVerificationImpl();

		farmDeskVerificationImpl.setFarmDeskVerificationId(
			this.<Long>getColumnOriginalValue("farmDeskVerificationId"));
		farmDeskVerificationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmDeskVerificationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmDeskVerificationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		farmDeskVerificationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmDeskVerificationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmDeskVerificationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmDeskVerificationImpl.setFarmerApplicationId(
			this.<Long>getColumnOriginalValue("farmerApplicationId"));
		farmDeskVerificationImpl.setDocumentName(
			this.<String>getColumnOriginalValue("documentName"));
		farmDeskVerificationImpl.setDocumentStatus(
			this.<String>getColumnOriginalValue("documentStatus"));

		return farmDeskVerificationImpl;
	}

	@Override
	public int compareTo(FarmDeskVerification farmDeskVerification) {
		long primaryKey = farmDeskVerification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmDeskVerification)) {
			return false;
		}

		FarmDeskVerification farmDeskVerification =
			(FarmDeskVerification)object;

		long primaryKey = farmDeskVerification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmDeskVerification> toCacheModel() {
		FarmDeskVerificationCacheModel farmDeskVerificationCacheModel =
			new FarmDeskVerificationCacheModel();

		farmDeskVerificationCacheModel.farmDeskVerificationId =
			getFarmDeskVerificationId();

		farmDeskVerificationCacheModel.groupId = getGroupId();

		farmDeskVerificationCacheModel.companyId = getCompanyId();

		farmDeskVerificationCacheModel.userId = getUserId();

		farmDeskVerificationCacheModel.userName = getUserName();

		String userName = farmDeskVerificationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmDeskVerificationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmDeskVerificationCacheModel.createDate = createDate.getTime();
		}
		else {
			farmDeskVerificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmDeskVerificationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			farmDeskVerificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmDeskVerificationCacheModel.farmerApplicationId =
			getFarmerApplicationId();

		farmDeskVerificationCacheModel.documentName = getDocumentName();

		String documentName = farmDeskVerificationCacheModel.documentName;

		if ((documentName != null) && (documentName.length() == 0)) {
			farmDeskVerificationCacheModel.documentName = null;
		}

		farmDeskVerificationCacheModel.documentStatus = getDocumentStatus();

		String documentStatus = farmDeskVerificationCacheModel.documentStatus;

		if ((documentStatus != null) && (documentStatus.length() == 0)) {
			farmDeskVerificationCacheModel.documentStatus = null;
		}

		return farmDeskVerificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmDeskVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmDeskVerification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmDeskVerification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FarmDeskVerification)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	
	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmDeskVerification>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _farmDeskVerificationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _farmerApplicationId;
	private String _documentName;
	private String _documentStatus;

	public <T> T getColumnValue(String columnName) {
		Function<FarmDeskVerification, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmDeskVerification)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"farmDeskVerificationId", _farmDeskVerificationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("farmerApplicationId", _farmerApplicationId);
		_columnOriginalValues.put("documentName", _documentName);
		_columnOriginalValues.put("documentStatus", _documentStatus);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmDeskVerificationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("farmerApplicationId", 128L);

		columnBitmasks.put("documentName", 256L);

		columnBitmasks.put("documentStatus", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmDeskVerification _escapedModel;

}