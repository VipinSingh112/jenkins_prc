/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nbp.farm.application.stages.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.farm.application.stages.service.model.FarmPermit;
import com.nbp.farm.application.stages.service.model.FarmPermitModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmPermit service. Represents a row in the &quot;nbp_farm_permit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmPermitModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmPermitImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmPermitImpl
 * @generated
 */
@JSON(strict = true)
public class FarmPermitModelImpl
	extends BaseModelImpl<FarmPermit> implements FarmPermitModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farm permit model instance should use the <code>FarmPermit</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_farm_permit";

	public static final Object[][] TABLE_COLUMNS = {
		{"farmPermitId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"pirPermtNumber", Types.VARCHAR}, {"duration", Types.VARCHAR},
		{"dateofIssue", Types.TIMESTAMP}, {"dateOfExpiration", Types.TIMESTAMP},
		{"pirCertificateNUmber", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("farmPermitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pirPermtNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateofIssue", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfExpiration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pirCertificateNUmber", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_farm_permit (farmPermitId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,pirPermtNumber VARCHAR(75) null,duration VARCHAR(75) null,dateofIssue DATE null,dateOfExpiration DATE null,pirCertificateNUmber LONG)";

	public static final String TABLE_SQL_DROP = "drop table nbp_farm_permit";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmPermit.farmPermitId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_farm_permit.farmPermitId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMPERMITID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmPermitModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmPermitId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmPermitId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmPermitId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmPermit.class;
	}

	@Override
	public String getModelClassName() {
		return FarmPermit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmPermit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmPermit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmPermit, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((FarmPermit)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmPermit, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmPermit, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmPermit)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmPermit, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmPermit, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FarmPermit>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FarmPermit.class.getClassLoader(), FarmPermit.class,
			ModelWrapper.class);

		try {
			Constructor<FarmPermit> constructor =
				(Constructor<FarmPermit>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FarmPermit, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmPermit, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmPermit, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FarmPermit, Object>>();
		Map<String, BiConsumer<FarmPermit, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FarmPermit, ?>>();

		attributeGetterFunctions.put(
			"farmPermitId", FarmPermit::getFarmPermitId);
		attributeSetterBiConsumers.put(
			"farmPermitId",
			(BiConsumer<FarmPermit, Long>)FarmPermit::setFarmPermitId);
		attributeGetterFunctions.put("groupId", FarmPermit::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<FarmPermit, Long>)FarmPermit::setGroupId);
		attributeGetterFunctions.put("companyId", FarmPermit::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmPermit, Long>)FarmPermit::setCompanyId);
		attributeGetterFunctions.put("userId", FarmPermit::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<FarmPermit, Long>)FarmPermit::setUserId);
		attributeGetterFunctions.put("userName", FarmPermit::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<FarmPermit, String>)FarmPermit::setUserName);
		attributeGetterFunctions.put("createDate", FarmPermit::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmPermit, Date>)FarmPermit::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmPermit::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmPermit, Date>)FarmPermit::setModifiedDate);
		attributeGetterFunctions.put("caseId", FarmPermit::getCaseId);
		attributeSetterBiConsumers.put(
			"caseId", (BiConsumer<FarmPermit, String>)FarmPermit::setCaseId);
		attributeGetterFunctions.put(
			"pirPermtNumber", FarmPermit::getPirPermtNumber);
		attributeSetterBiConsumers.put(
			"pirPermtNumber",
			(BiConsumer<FarmPermit, String>)FarmPermit::setPirPermtNumber);
		attributeGetterFunctions.put("duration", FarmPermit::getDuration);
		attributeSetterBiConsumers.put(
			"duration",
			(BiConsumer<FarmPermit, String>)FarmPermit::setDuration);
		attributeGetterFunctions.put("dateofIssue", FarmPermit::getDateofIssue);
		attributeSetterBiConsumers.put(
			"dateofIssue",
			(BiConsumer<FarmPermit, Date>)FarmPermit::setDateofIssue);
		attributeGetterFunctions.put(
			"dateOfExpiration", FarmPermit::getDateOfExpiration);
		attributeSetterBiConsumers.put(
			"dateOfExpiration",
			(BiConsumer<FarmPermit, Date>)FarmPermit::setDateOfExpiration);
		attributeGetterFunctions.put(
			"pirCertificateNUmber", FarmPermit::getPirCertificateNUmber);
		attributeSetterBiConsumers.put(
			"pirCertificateNUmber",
			(BiConsumer<FarmPermit, Long>)FarmPermit::setPirCertificateNUmber);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFarmPermitId() {
		return _farmPermitId;
	}

	@Override
	public void setFarmPermitId(long farmPermitId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmPermitId = farmPermitId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getPirPermtNumber() {
		if (_pirPermtNumber == null) {
			return "";
		}
		else {
			return _pirPermtNumber;
		}
	}

	@Override
	public void setPirPermtNumber(String pirPermtNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pirPermtNumber = pirPermtNumber;
	}

	@JSON
	@Override
	public String getDuration() {
		if (_duration == null) {
			return "";
		}
		else {
			return _duration;
		}
	}

	@Override
	public void setDuration(String duration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duration = duration;
	}

	@JSON
	@Override
	public Date getDateofIssue() {
		return _dateofIssue;
	}

	@Override
	public void setDateofIssue(Date dateofIssue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateofIssue = dateofIssue;
	}

	@JSON
	@Override
	public Date getDateOfExpiration() {
		return _dateOfExpiration;
	}

	@Override
	public void setDateOfExpiration(Date dateOfExpiration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfExpiration = dateOfExpiration;
	}

	@JSON
	@Override
	public long getPirCertificateNUmber() {
		return _pirCertificateNUmber;
	}

	@Override
	public void setPirCertificateNUmber(long pirCertificateNUmber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pirCertificateNUmber = pirCertificateNUmber;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmPermit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmPermit toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmPermit>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmPermitImpl farmPermitImpl = new FarmPermitImpl();

		farmPermitImpl.setFarmPermitId(getFarmPermitId());
		farmPermitImpl.setGroupId(getGroupId());
		farmPermitImpl.setCompanyId(getCompanyId());
		farmPermitImpl.setUserId(getUserId());
		farmPermitImpl.setUserName(getUserName());
		farmPermitImpl.setCreateDate(getCreateDate());
		farmPermitImpl.setModifiedDate(getModifiedDate());
		farmPermitImpl.setCaseId(getCaseId());
		farmPermitImpl.setPirPermtNumber(getPirPermtNumber());
		farmPermitImpl.setDuration(getDuration());
		farmPermitImpl.setDateofIssue(getDateofIssue());
		farmPermitImpl.setDateOfExpiration(getDateOfExpiration());
		farmPermitImpl.setPirCertificateNUmber(getPirCertificateNUmber());

		farmPermitImpl.resetOriginalValues();

		return farmPermitImpl;
	}

	@Override
	public FarmPermit cloneWithOriginalValues() {
		FarmPermitImpl farmPermitImpl = new FarmPermitImpl();

		farmPermitImpl.setFarmPermitId(
			this.<Long>getColumnOriginalValue("farmPermitId"));
		farmPermitImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		farmPermitImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmPermitImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		farmPermitImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		farmPermitImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmPermitImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmPermitImpl.setCaseId(this.<String>getColumnOriginalValue("caseId"));
		farmPermitImpl.setPirPermtNumber(
			this.<String>getColumnOriginalValue("pirPermtNumber"));
		farmPermitImpl.setDuration(
			this.<String>getColumnOriginalValue("duration"));
		farmPermitImpl.setDateofIssue(
			this.<Date>getColumnOriginalValue("dateofIssue"));
		farmPermitImpl.setDateOfExpiration(
			this.<Date>getColumnOriginalValue("dateOfExpiration"));
		farmPermitImpl.setPirCertificateNUmber(
			this.<Long>getColumnOriginalValue("pirCertificateNUmber"));

		return farmPermitImpl;
	}

	@Override
	public int compareTo(FarmPermit farmPermit) {
		long primaryKey = farmPermit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmPermit)) {
			return false;
		}

		FarmPermit farmPermit = (FarmPermit)object;

		long primaryKey = farmPermit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmPermit> toCacheModel() {
		FarmPermitCacheModel farmPermitCacheModel = new FarmPermitCacheModel();

		farmPermitCacheModel.farmPermitId = getFarmPermitId();

		farmPermitCacheModel.groupId = getGroupId();

		farmPermitCacheModel.companyId = getCompanyId();

		farmPermitCacheModel.userId = getUserId();

		farmPermitCacheModel.userName = getUserName();

		String userName = farmPermitCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			farmPermitCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmPermitCacheModel.createDate = createDate.getTime();
		}
		else {
			farmPermitCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmPermitCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			farmPermitCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmPermitCacheModel.caseId = getCaseId();

		String caseId = farmPermitCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			farmPermitCacheModel.caseId = null;
		}

		farmPermitCacheModel.pirPermtNumber = getPirPermtNumber();

		String pirPermtNumber = farmPermitCacheModel.pirPermtNumber;

		if ((pirPermtNumber != null) && (pirPermtNumber.length() == 0)) {
			farmPermitCacheModel.pirPermtNumber = null;
		}

		farmPermitCacheModel.duration = getDuration();

		String duration = farmPermitCacheModel.duration;

		if ((duration != null) && (duration.length() == 0)) {
			farmPermitCacheModel.duration = null;
		}

		Date dateofIssue = getDateofIssue();

		if (dateofIssue != null) {
			farmPermitCacheModel.dateofIssue = dateofIssue.getTime();
		}
		else {
			farmPermitCacheModel.dateofIssue = Long.MIN_VALUE;
		}

		Date dateOfExpiration = getDateOfExpiration();

		if (dateOfExpiration != null) {
			farmPermitCacheModel.dateOfExpiration = dateOfExpiration.getTime();
		}
		else {
			farmPermitCacheModel.dateOfExpiration = Long.MIN_VALUE;
		}

		farmPermitCacheModel.pirCertificateNUmber = getPirCertificateNUmber();

		return farmPermitCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmPermit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmPermit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmPermit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FarmPermit)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	
	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmPermit>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _farmPermitId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _pirPermtNumber;
	private String _duration;
	private Date _dateofIssue;
	private Date _dateOfExpiration;
	private long _pirCertificateNUmber;

	public <T> T getColumnValue(String columnName) {
		Function<FarmPermit, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmPermit)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("farmPermitId", _farmPermitId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("pirPermtNumber", _pirPermtNumber);
		_columnOriginalValues.put("duration", _duration);
		_columnOriginalValues.put("dateofIssue", _dateofIssue);
		_columnOriginalValues.put("dateOfExpiration", _dateOfExpiration);
		_columnOriginalValues.put(
			"pirCertificateNUmber", _pirCertificateNUmber);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("farmPermitId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("pirPermtNumber", 256L);

		columnBitmasks.put("duration", 512L);

		columnBitmasks.put("dateofIssue", 1024L);

		columnBitmasks.put("dateOfExpiration", 2048L);

		columnBitmasks.put("pirCertificateNUmber", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmPermit _escapedModel;

}