/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ncra.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ncra.application.form.service.model.NcraVerifyWeighingDeviceInfo;
import com.nbp.ncra.application.form.service.model.NcraVerifyWeighingDeviceInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NcraVerifyWeighingDeviceInfo service. Represents a row in the &quot;nbp_ncra_verify_weigh_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NcraVerifyWeighingDeviceInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NcraVerifyWeighingDeviceInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NcraVerifyWeighingDeviceInfoImpl
 * @generated
 */
@JSON(strict = true)
public class NcraVerifyWeighingDeviceInfoModelImpl
	extends BaseModelImpl<NcraVerifyWeighingDeviceInfo>
	implements NcraVerifyWeighingDeviceInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ncra verify weighing device info model instance should use the <code>NcraVerifyWeighingDeviceInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ncra_verify_weigh_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"ncraVerifyWeighingDeviceInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"typeofDevice", Types.VARCHAR}, {"manufacturer", Types.VARCHAR},
		{"serialNumber", Types.VARCHAR}, {"quantity", Types.VARCHAR},
		{"maximumCapacity", Types.VARCHAR}, {"counter", Types.VARCHAR},
		{"ncraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ncraVerifyWeighingDeviceInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeofDevice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serialNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maximumCapacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ncra_verify_weigh_info (ncraVerifyWeighingDeviceInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,typeofDevice VARCHAR(75) null,manufacturer VARCHAR(75) null,serialNumber VARCHAR(75) null,quantity VARCHAR(75) null,maximumCapacity VARCHAR(75) null,counter VARCHAR(75) null,ncraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ncra_verify_weigh_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ncraVerifyWeighingDeviceInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ncra_verify_weigh_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NCRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NcraVerifyWeighingDeviceInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ncraVerifyWeighingDeviceInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNcraVerifyWeighingDeviceInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ncraVerifyWeighingDeviceInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NcraVerifyWeighingDeviceInfo.class;
	}

	@Override
	public String getModelClassName() {
		return NcraVerifyWeighingDeviceInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NcraVerifyWeighingDeviceInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NcraVerifyWeighingDeviceInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcraVerifyWeighingDeviceInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(NcraVerifyWeighingDeviceInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NcraVerifyWeighingDeviceInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NcraVerifyWeighingDeviceInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NcraVerifyWeighingDeviceInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NcraVerifyWeighingDeviceInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NcraVerifyWeighingDeviceInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<NcraVerifyWeighingDeviceInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<NcraVerifyWeighingDeviceInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<NcraVerifyWeighingDeviceInfo, Object>>();

			attributeGetterFunctions.put(
				"ncraVerifyWeighingDeviceInfoId",
				NcraVerifyWeighingDeviceInfo::
					getNcraVerifyWeighingDeviceInfoId);
			attributeGetterFunctions.put(
				"groupId", NcraVerifyWeighingDeviceInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NcraVerifyWeighingDeviceInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", NcraVerifyWeighingDeviceInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", NcraVerifyWeighingDeviceInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", NcraVerifyWeighingDeviceInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NcraVerifyWeighingDeviceInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"typeofDevice", NcraVerifyWeighingDeviceInfo::getTypeofDevice);
			attributeGetterFunctions.put(
				"manufacturer", NcraVerifyWeighingDeviceInfo::getManufacturer);
			attributeGetterFunctions.put(
				"serialNumber", NcraVerifyWeighingDeviceInfo::getSerialNumber);
			attributeGetterFunctions.put(
				"quantity", NcraVerifyWeighingDeviceInfo::getQuantity);
			attributeGetterFunctions.put(
				"maximumCapacity",
				NcraVerifyWeighingDeviceInfo::getMaximumCapacity);
			attributeGetterFunctions.put(
				"counter", NcraVerifyWeighingDeviceInfo::getCounter);
			attributeGetterFunctions.put(
				"ncraApplicationId",
				NcraVerifyWeighingDeviceInfo::getNcraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<NcraVerifyWeighingDeviceInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NcraVerifyWeighingDeviceInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<NcraVerifyWeighingDeviceInfo, ?>>();

			attributeSetterBiConsumers.put(
				"ncraVerifyWeighingDeviceInfoId",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, Long>)
					NcraVerifyWeighingDeviceInfo::
						setNcraVerifyWeighingDeviceInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, Long>)
					NcraVerifyWeighingDeviceInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, Long>)
					NcraVerifyWeighingDeviceInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, Long>)
					NcraVerifyWeighingDeviceInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, String>)
					NcraVerifyWeighingDeviceInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, Date>)
					NcraVerifyWeighingDeviceInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, Date>)
					NcraVerifyWeighingDeviceInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"typeofDevice",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, String>)
					NcraVerifyWeighingDeviceInfo::setTypeofDevice);
			attributeSetterBiConsumers.put(
				"manufacturer",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, String>)
					NcraVerifyWeighingDeviceInfo::setManufacturer);
			attributeSetterBiConsumers.put(
				"serialNumber",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, String>)
					NcraVerifyWeighingDeviceInfo::setSerialNumber);
			attributeSetterBiConsumers.put(
				"quantity",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, String>)
					NcraVerifyWeighingDeviceInfo::setQuantity);
			attributeSetterBiConsumers.put(
				"maximumCapacity",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, String>)
					NcraVerifyWeighingDeviceInfo::setMaximumCapacity);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, String>)
					NcraVerifyWeighingDeviceInfo::setCounter);
			attributeSetterBiConsumers.put(
				"ncraApplicationId",
				(BiConsumer<NcraVerifyWeighingDeviceInfo, Long>)
					NcraVerifyWeighingDeviceInfo::setNcraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getNcraVerifyWeighingDeviceInfoId() {
		return _ncraVerifyWeighingDeviceInfoId;
	}

	@Override
	public void setNcraVerifyWeighingDeviceInfoId(
		long ncraVerifyWeighingDeviceInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncraVerifyWeighingDeviceInfoId = ncraVerifyWeighingDeviceInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTypeofDevice() {
		if (_typeofDevice == null) {
			return "";
		}
		else {
			return _typeofDevice;
		}
	}

	@Override
	public void setTypeofDevice(String typeofDevice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeofDevice = typeofDevice;
	}

	@JSON
	@Override
	public String getManufacturer() {
		if (_manufacturer == null) {
			return "";
		}
		else {
			return _manufacturer;
		}
	}

	@Override
	public void setManufacturer(String manufacturer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturer = manufacturer;
	}

	@JSON
	@Override
	public String getSerialNumber() {
		if (_serialNumber == null) {
			return "";
		}
		else {
			return _serialNumber;
		}
	}

	@Override
	public void setSerialNumber(String serialNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serialNumber = serialNumber;
	}

	@JSON
	@Override
	public String getQuantity() {
		if (_quantity == null) {
			return "";
		}
		else {
			return _quantity;
		}
	}

	@Override
	public void setQuantity(String quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@JSON
	@Override
	public String getMaximumCapacity() {
		if (_maximumCapacity == null) {
			return "";
		}
		else {
			return _maximumCapacity;
		}
	}

	@Override
	public void setMaximumCapacity(String maximumCapacity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maximumCapacity = maximumCapacity;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	@JSON
	@Override
	public long getNcraApplicationId() {
		return _ncraApplicationId;
	}

	@Override
	public void setNcraApplicationId(long ncraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncraApplicationId = ncraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNcraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ncraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NcraVerifyWeighingDeviceInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NcraVerifyWeighingDeviceInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NcraVerifyWeighingDeviceInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NcraVerifyWeighingDeviceInfoImpl ncraVerifyWeighingDeviceInfoImpl =
			new NcraVerifyWeighingDeviceInfoImpl();

		ncraVerifyWeighingDeviceInfoImpl.setNcraVerifyWeighingDeviceInfoId(
			getNcraVerifyWeighingDeviceInfoId());
		ncraVerifyWeighingDeviceInfoImpl.setGroupId(getGroupId());
		ncraVerifyWeighingDeviceInfoImpl.setCompanyId(getCompanyId());
		ncraVerifyWeighingDeviceInfoImpl.setUserId(getUserId());
		ncraVerifyWeighingDeviceInfoImpl.setUserName(getUserName());
		ncraVerifyWeighingDeviceInfoImpl.setCreateDate(getCreateDate());
		ncraVerifyWeighingDeviceInfoImpl.setModifiedDate(getModifiedDate());
		ncraVerifyWeighingDeviceInfoImpl.setTypeofDevice(getTypeofDevice());
		ncraVerifyWeighingDeviceInfoImpl.setManufacturer(getManufacturer());
		ncraVerifyWeighingDeviceInfoImpl.setSerialNumber(getSerialNumber());
		ncraVerifyWeighingDeviceInfoImpl.setQuantity(getQuantity());
		ncraVerifyWeighingDeviceInfoImpl.setMaximumCapacity(
			getMaximumCapacity());
		ncraVerifyWeighingDeviceInfoImpl.setCounter(getCounter());
		ncraVerifyWeighingDeviceInfoImpl.setNcraApplicationId(
			getNcraApplicationId());

		ncraVerifyWeighingDeviceInfoImpl.resetOriginalValues();

		return ncraVerifyWeighingDeviceInfoImpl;
	}

	@Override
	public NcraVerifyWeighingDeviceInfo cloneWithOriginalValues() {
		NcraVerifyWeighingDeviceInfoImpl ncraVerifyWeighingDeviceInfoImpl =
			new NcraVerifyWeighingDeviceInfoImpl();

		ncraVerifyWeighingDeviceInfoImpl.setNcraVerifyWeighingDeviceInfoId(
			this.<Long>getColumnOriginalValue(
				"ncraVerifyWeighingDeviceInfoId"));
		ncraVerifyWeighingDeviceInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ncraVerifyWeighingDeviceInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ncraVerifyWeighingDeviceInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ncraVerifyWeighingDeviceInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ncraVerifyWeighingDeviceInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ncraVerifyWeighingDeviceInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ncraVerifyWeighingDeviceInfoImpl.setTypeofDevice(
			this.<String>getColumnOriginalValue("typeofDevice"));
		ncraVerifyWeighingDeviceInfoImpl.setManufacturer(
			this.<String>getColumnOriginalValue("manufacturer"));
		ncraVerifyWeighingDeviceInfoImpl.setSerialNumber(
			this.<String>getColumnOriginalValue("serialNumber"));
		ncraVerifyWeighingDeviceInfoImpl.setQuantity(
			this.<String>getColumnOriginalValue("quantity"));
		ncraVerifyWeighingDeviceInfoImpl.setMaximumCapacity(
			this.<String>getColumnOriginalValue("maximumCapacity"));
		ncraVerifyWeighingDeviceInfoImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));
		ncraVerifyWeighingDeviceInfoImpl.setNcraApplicationId(
			this.<Long>getColumnOriginalValue("ncraApplicationId"));

		return ncraVerifyWeighingDeviceInfoImpl;
	}

	@Override
	public int compareTo(
		NcraVerifyWeighingDeviceInfo ncraVerifyWeighingDeviceInfo) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ncraVerifyWeighingDeviceInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NcraVerifyWeighingDeviceInfo)) {
			return false;
		}

		NcraVerifyWeighingDeviceInfo ncraVerifyWeighingDeviceInfo =
			(NcraVerifyWeighingDeviceInfo)object;

		long primaryKey = ncraVerifyWeighingDeviceInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NcraVerifyWeighingDeviceInfo> toCacheModel() {
		NcraVerifyWeighingDeviceInfoCacheModel
			ncraVerifyWeighingDeviceInfoCacheModel =
				new NcraVerifyWeighingDeviceInfoCacheModel();

		ncraVerifyWeighingDeviceInfoCacheModel.ncraVerifyWeighingDeviceInfoId =
			getNcraVerifyWeighingDeviceInfoId();

		ncraVerifyWeighingDeviceInfoCacheModel.groupId = getGroupId();

		ncraVerifyWeighingDeviceInfoCacheModel.companyId = getCompanyId();

		ncraVerifyWeighingDeviceInfoCacheModel.userId = getUserId();

		ncraVerifyWeighingDeviceInfoCacheModel.userName = getUserName();

		String userName = ncraVerifyWeighingDeviceInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ncraVerifyWeighingDeviceInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ncraVerifyWeighingDeviceInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			ncraVerifyWeighingDeviceInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ncraVerifyWeighingDeviceInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			ncraVerifyWeighingDeviceInfoCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		ncraVerifyWeighingDeviceInfoCacheModel.typeofDevice = getTypeofDevice();

		String typeofDevice =
			ncraVerifyWeighingDeviceInfoCacheModel.typeofDevice;

		if ((typeofDevice != null) && (typeofDevice.length() == 0)) {
			ncraVerifyWeighingDeviceInfoCacheModel.typeofDevice = null;
		}

		ncraVerifyWeighingDeviceInfoCacheModel.manufacturer = getManufacturer();

		String manufacturer =
			ncraVerifyWeighingDeviceInfoCacheModel.manufacturer;

		if ((manufacturer != null) && (manufacturer.length() == 0)) {
			ncraVerifyWeighingDeviceInfoCacheModel.manufacturer = null;
		}

		ncraVerifyWeighingDeviceInfoCacheModel.serialNumber = getSerialNumber();

		String serialNumber =
			ncraVerifyWeighingDeviceInfoCacheModel.serialNumber;

		if ((serialNumber != null) && (serialNumber.length() == 0)) {
			ncraVerifyWeighingDeviceInfoCacheModel.serialNumber = null;
		}

		ncraVerifyWeighingDeviceInfoCacheModel.quantity = getQuantity();

		String quantity = ncraVerifyWeighingDeviceInfoCacheModel.quantity;

		if ((quantity != null) && (quantity.length() == 0)) {
			ncraVerifyWeighingDeviceInfoCacheModel.quantity = null;
		}

		ncraVerifyWeighingDeviceInfoCacheModel.maximumCapacity =
			getMaximumCapacity();

		String maximumCapacity =
			ncraVerifyWeighingDeviceInfoCacheModel.maximumCapacity;

		if ((maximumCapacity != null) && (maximumCapacity.length() == 0)) {
			ncraVerifyWeighingDeviceInfoCacheModel.maximumCapacity = null;
		}

		ncraVerifyWeighingDeviceInfoCacheModel.counter = getCounter();

		String counter = ncraVerifyWeighingDeviceInfoCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			ncraVerifyWeighingDeviceInfoCacheModel.counter = null;
		}

		ncraVerifyWeighingDeviceInfoCacheModel.ncraApplicationId =
			getNcraApplicationId();

		return ncraVerifyWeighingDeviceInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NcraVerifyWeighingDeviceInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NcraVerifyWeighingDeviceInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcraVerifyWeighingDeviceInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(NcraVerifyWeighingDeviceInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, NcraVerifyWeighingDeviceInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						NcraVerifyWeighingDeviceInfo.class, ModelWrapper.class);

	}

	private long _ncraVerifyWeighingDeviceInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _typeofDevice;
	private String _manufacturer;
	private String _serialNumber;
	private String _quantity;
	private String _maximumCapacity;
	private String _counter;
	private long _ncraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<NcraVerifyWeighingDeviceInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NcraVerifyWeighingDeviceInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"ncraVerifyWeighingDeviceInfoId", _ncraVerifyWeighingDeviceInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("typeofDevice", _typeofDevice);
		_columnOriginalValues.put("manufacturer", _manufacturer);
		_columnOriginalValues.put("serialNumber", _serialNumber);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("maximumCapacity", _maximumCapacity);
		_columnOriginalValues.put("counter", _counter);
		_columnOriginalValues.put("ncraApplicationId", _ncraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ncraVerifyWeighingDeviceInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("typeofDevice", 128L);

		columnBitmasks.put("manufacturer", 256L);

		columnBitmasks.put("serialNumber", 512L);

		columnBitmasks.put("quantity", 1024L);

		columnBitmasks.put("maximumCapacity", 2048L);

		columnBitmasks.put("counter", 4096L);

		columnBitmasks.put("ncraApplicationId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NcraVerifyWeighingDeviceInfo _escapedModel;

}