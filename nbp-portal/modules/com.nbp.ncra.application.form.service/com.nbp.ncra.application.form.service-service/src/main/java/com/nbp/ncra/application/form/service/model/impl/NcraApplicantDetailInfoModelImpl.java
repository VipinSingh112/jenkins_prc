/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ncra.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ncra.application.form.service.model.NcraApplicantDetailInfo;
import com.nbp.ncra.application.form.service.model.NcraApplicantDetailInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NcraApplicantDetailInfo service. Represents a row in the &quot;nbp_ncra_applicant_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NcraApplicantDetailInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NcraApplicantDetailInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NcraApplicantDetailInfoImpl
 * @generated
 */
@JSON(strict = true)
public class NcraApplicantDetailInfoModelImpl
	extends BaseModelImpl<NcraApplicantDetailInfo>
	implements NcraApplicantDetailInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ncra applicant detail info model instance should use the <code>NcraApplicantDetailInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ncra_applicant_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"ncraApplicantDetailInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"applicantBusinessName", Types.VARCHAR},
		{"applicantAddress", Types.VARCHAR},
		{"applicantContact", Types.VARCHAR},
		{"applicantTeleNum", Types.VARCHAR}, {"applicantFaxNo", Types.VARCHAR},
		{"applicantEmailAddr", Types.VARCHAR},
		{"applicantLocation", Types.VARCHAR},
		{"ncraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ncraApplicantDetailInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantBusinessName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantContact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTeleNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantEmailAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ncra_applicant_details (ncraApplicantDetailInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicantBusinessName VARCHAR(75) null,applicantAddress VARCHAR(500) null,applicantContact VARCHAR(75) null,applicantTeleNum VARCHAR(75) null,applicantFaxNo VARCHAR(75) null,applicantEmailAddr VARCHAR(75) null,applicantLocation VARCHAR(500) null,ncraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ncra_applicant_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ncraApplicantDetailInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ncra_applicant_details.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NCRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NcraApplicantDetailInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ncraApplicantDetailInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNcraApplicantDetailInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ncraApplicantDetailInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NcraApplicantDetailInfo.class;
	}

	@Override
	public String getModelClassName() {
		return NcraApplicantDetailInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NcraApplicantDetailInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NcraApplicantDetailInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcraApplicantDetailInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NcraApplicantDetailInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NcraApplicantDetailInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NcraApplicantDetailInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NcraApplicantDetailInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NcraApplicantDetailInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NcraApplicantDetailInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<NcraApplicantDetailInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<NcraApplicantDetailInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<NcraApplicantDetailInfo, Object>>();

			attributeGetterFunctions.put(
				"ncraApplicantDetailInfoId",
				NcraApplicantDetailInfo::getNcraApplicantDetailInfoId);
			attributeGetterFunctions.put(
				"groupId", NcraApplicantDetailInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NcraApplicantDetailInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", NcraApplicantDetailInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", NcraApplicantDetailInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", NcraApplicantDetailInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NcraApplicantDetailInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"applicantBusinessName",
				NcraApplicantDetailInfo::getApplicantBusinessName);
			attributeGetterFunctions.put(
				"applicantAddress",
				NcraApplicantDetailInfo::getApplicantAddress);
			attributeGetterFunctions.put(
				"applicantContact",
				NcraApplicantDetailInfo::getApplicantContact);
			attributeGetterFunctions.put(
				"applicantTeleNum",
				NcraApplicantDetailInfo::getApplicantTeleNum);
			attributeGetterFunctions.put(
				"applicantFaxNo", NcraApplicantDetailInfo::getApplicantFaxNo);
			attributeGetterFunctions.put(
				"applicantEmailAddr",
				NcraApplicantDetailInfo::getApplicantEmailAddr);
			attributeGetterFunctions.put(
				"applicantLocation",
				NcraApplicantDetailInfo::getApplicantLocation);
			attributeGetterFunctions.put(
				"ncraApplicationId",
				NcraApplicantDetailInfo::getNcraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<NcraApplicantDetailInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NcraApplicantDetailInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<NcraApplicantDetailInfo, ?>>();

			attributeSetterBiConsumers.put(
				"ncraApplicantDetailInfoId",
				(BiConsumer<NcraApplicantDetailInfo, Long>)
					NcraApplicantDetailInfo::setNcraApplicantDetailInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NcraApplicantDetailInfo, Long>)
					NcraApplicantDetailInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NcraApplicantDetailInfo, Long>)
					NcraApplicantDetailInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NcraApplicantDetailInfo, Long>)
					NcraApplicantDetailInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NcraApplicantDetailInfo, String>)
					NcraApplicantDetailInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NcraApplicantDetailInfo, Date>)
					NcraApplicantDetailInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NcraApplicantDetailInfo, Date>)
					NcraApplicantDetailInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicantBusinessName",
				(BiConsumer<NcraApplicantDetailInfo, String>)
					NcraApplicantDetailInfo::setApplicantBusinessName);
			attributeSetterBiConsumers.put(
				"applicantAddress",
				(BiConsumer<NcraApplicantDetailInfo, String>)
					NcraApplicantDetailInfo::setApplicantAddress);
			attributeSetterBiConsumers.put(
				"applicantContact",
				(BiConsumer<NcraApplicantDetailInfo, String>)
					NcraApplicantDetailInfo::setApplicantContact);
			attributeSetterBiConsumers.put(
				"applicantTeleNum",
				(BiConsumer<NcraApplicantDetailInfo, String>)
					NcraApplicantDetailInfo::setApplicantTeleNum);
			attributeSetterBiConsumers.put(
				"applicantFaxNo",
				(BiConsumer<NcraApplicantDetailInfo, String>)
					NcraApplicantDetailInfo::setApplicantFaxNo);
			attributeSetterBiConsumers.put(
				"applicantEmailAddr",
				(BiConsumer<NcraApplicantDetailInfo, String>)
					NcraApplicantDetailInfo::setApplicantEmailAddr);
			attributeSetterBiConsumers.put(
				"applicantLocation",
				(BiConsumer<NcraApplicantDetailInfo, String>)
					NcraApplicantDetailInfo::setApplicantLocation);
			attributeSetterBiConsumers.put(
				"ncraApplicationId",
				(BiConsumer<NcraApplicantDetailInfo, Long>)
					NcraApplicantDetailInfo::setNcraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getNcraApplicantDetailInfoId() {
		return _ncraApplicantDetailInfoId;
	}

	@Override
	public void setNcraApplicantDetailInfoId(long ncraApplicantDetailInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncraApplicantDetailInfoId = ncraApplicantDetailInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicantBusinessName() {
		if (_applicantBusinessName == null) {
			return "";
		}
		else {
			return _applicantBusinessName;
		}
	}

	@Override
	public void setApplicantBusinessName(String applicantBusinessName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantBusinessName = applicantBusinessName;
	}

	@JSON
	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return "";
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantAddress = applicantAddress;
	}

	@JSON
	@Override
	public String getApplicantContact() {
		if (_applicantContact == null) {
			return "";
		}
		else {
			return _applicantContact;
		}
	}

	@Override
	public void setApplicantContact(String applicantContact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantContact = applicantContact;
	}

	@JSON
	@Override
	public String getApplicantTeleNum() {
		if (_applicantTeleNum == null) {
			return "";
		}
		else {
			return _applicantTeleNum;
		}
	}

	@Override
	public void setApplicantTeleNum(String applicantTeleNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantTeleNum = applicantTeleNum;
	}

	@JSON
	@Override
	public String getApplicantFaxNo() {
		if (_applicantFaxNo == null) {
			return "";
		}
		else {
			return _applicantFaxNo;
		}
	}

	@Override
	public void setApplicantFaxNo(String applicantFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantFaxNo = applicantFaxNo;
	}

	@JSON
	@Override
	public String getApplicantEmailAddr() {
		if (_applicantEmailAddr == null) {
			return "";
		}
		else {
			return _applicantEmailAddr;
		}
	}

	@Override
	public void setApplicantEmailAddr(String applicantEmailAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantEmailAddr = applicantEmailAddr;
	}

	@JSON
	@Override
	public String getApplicantLocation() {
		if (_applicantLocation == null) {
			return "";
		}
		else {
			return _applicantLocation;
		}
	}

	@Override
	public void setApplicantLocation(String applicantLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantLocation = applicantLocation;
	}

	@JSON
	@Override
	public long getNcraApplicationId() {
		return _ncraApplicationId;
	}

	@Override
	public void setNcraApplicationId(long ncraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncraApplicationId = ncraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNcraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ncraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NcraApplicantDetailInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NcraApplicantDetailInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NcraApplicantDetailInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NcraApplicantDetailInfoImpl ncraApplicantDetailInfoImpl =
			new NcraApplicantDetailInfoImpl();

		ncraApplicantDetailInfoImpl.setNcraApplicantDetailInfoId(
			getNcraApplicantDetailInfoId());
		ncraApplicantDetailInfoImpl.setGroupId(getGroupId());
		ncraApplicantDetailInfoImpl.setCompanyId(getCompanyId());
		ncraApplicantDetailInfoImpl.setUserId(getUserId());
		ncraApplicantDetailInfoImpl.setUserName(getUserName());
		ncraApplicantDetailInfoImpl.setCreateDate(getCreateDate());
		ncraApplicantDetailInfoImpl.setModifiedDate(getModifiedDate());
		ncraApplicantDetailInfoImpl.setApplicantBusinessName(
			getApplicantBusinessName());
		ncraApplicantDetailInfoImpl.setApplicantAddress(getApplicantAddress());
		ncraApplicantDetailInfoImpl.setApplicantContact(getApplicantContact());
		ncraApplicantDetailInfoImpl.setApplicantTeleNum(getApplicantTeleNum());
		ncraApplicantDetailInfoImpl.setApplicantFaxNo(getApplicantFaxNo());
		ncraApplicantDetailInfoImpl.setApplicantEmailAddr(
			getApplicantEmailAddr());
		ncraApplicantDetailInfoImpl.setApplicantLocation(
			getApplicantLocation());
		ncraApplicantDetailInfoImpl.setNcraApplicationId(
			getNcraApplicationId());

		ncraApplicantDetailInfoImpl.resetOriginalValues();

		return ncraApplicantDetailInfoImpl;
	}

	@Override
	public NcraApplicantDetailInfo cloneWithOriginalValues() {
		NcraApplicantDetailInfoImpl ncraApplicantDetailInfoImpl =
			new NcraApplicantDetailInfoImpl();

		ncraApplicantDetailInfoImpl.setNcraApplicantDetailInfoId(
			this.<Long>getColumnOriginalValue("ncraApplicantDetailInfoId"));
		ncraApplicantDetailInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ncraApplicantDetailInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ncraApplicantDetailInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ncraApplicantDetailInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ncraApplicantDetailInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ncraApplicantDetailInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ncraApplicantDetailInfoImpl.setApplicantBusinessName(
			this.<String>getColumnOriginalValue("applicantBusinessName"));
		ncraApplicantDetailInfoImpl.setApplicantAddress(
			this.<String>getColumnOriginalValue("applicantAddress"));
		ncraApplicantDetailInfoImpl.setApplicantContact(
			this.<String>getColumnOriginalValue("applicantContact"));
		ncraApplicantDetailInfoImpl.setApplicantTeleNum(
			this.<String>getColumnOriginalValue("applicantTeleNum"));
		ncraApplicantDetailInfoImpl.setApplicantFaxNo(
			this.<String>getColumnOriginalValue("applicantFaxNo"));
		ncraApplicantDetailInfoImpl.setApplicantEmailAddr(
			this.<String>getColumnOriginalValue("applicantEmailAddr"));
		ncraApplicantDetailInfoImpl.setApplicantLocation(
			this.<String>getColumnOriginalValue("applicantLocation"));
		ncraApplicantDetailInfoImpl.setNcraApplicationId(
			this.<Long>getColumnOriginalValue("ncraApplicationId"));

		return ncraApplicantDetailInfoImpl;
	}

	@Override
	public int compareTo(NcraApplicantDetailInfo ncraApplicantDetailInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ncraApplicantDetailInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NcraApplicantDetailInfo)) {
			return false;
		}

		NcraApplicantDetailInfo ncraApplicantDetailInfo =
			(NcraApplicantDetailInfo)object;

		long primaryKey = ncraApplicantDetailInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NcraApplicantDetailInfo> toCacheModel() {
		NcraApplicantDetailInfoCacheModel ncraApplicantDetailInfoCacheModel =
			new NcraApplicantDetailInfoCacheModel();

		ncraApplicantDetailInfoCacheModel.ncraApplicantDetailInfoId =
			getNcraApplicantDetailInfoId();

		ncraApplicantDetailInfoCacheModel.groupId = getGroupId();

		ncraApplicantDetailInfoCacheModel.companyId = getCompanyId();

		ncraApplicantDetailInfoCacheModel.userId = getUserId();

		ncraApplicantDetailInfoCacheModel.userName = getUserName();

		String userName = ncraApplicantDetailInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ncraApplicantDetailInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ncraApplicantDetailInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			ncraApplicantDetailInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ncraApplicantDetailInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			ncraApplicantDetailInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ncraApplicantDetailInfoCacheModel.applicantBusinessName =
			getApplicantBusinessName();

		String applicantBusinessName =
			ncraApplicantDetailInfoCacheModel.applicantBusinessName;

		if ((applicantBusinessName != null) &&
			(applicantBusinessName.length() == 0)) {

			ncraApplicantDetailInfoCacheModel.applicantBusinessName = null;
		}

		ncraApplicantDetailInfoCacheModel.applicantAddress =
			getApplicantAddress();

		String applicantAddress =
			ncraApplicantDetailInfoCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			ncraApplicantDetailInfoCacheModel.applicantAddress = null;
		}

		ncraApplicantDetailInfoCacheModel.applicantContact =
			getApplicantContact();

		String applicantContact =
			ncraApplicantDetailInfoCacheModel.applicantContact;

		if ((applicantContact != null) && (applicantContact.length() == 0)) {
			ncraApplicantDetailInfoCacheModel.applicantContact = null;
		}

		ncraApplicantDetailInfoCacheModel.applicantTeleNum =
			getApplicantTeleNum();

		String applicantTeleNum =
			ncraApplicantDetailInfoCacheModel.applicantTeleNum;

		if ((applicantTeleNum != null) && (applicantTeleNum.length() == 0)) {
			ncraApplicantDetailInfoCacheModel.applicantTeleNum = null;
		}

		ncraApplicantDetailInfoCacheModel.applicantFaxNo = getApplicantFaxNo();

		String applicantFaxNo =
			ncraApplicantDetailInfoCacheModel.applicantFaxNo;

		if ((applicantFaxNo != null) && (applicantFaxNo.length() == 0)) {
			ncraApplicantDetailInfoCacheModel.applicantFaxNo = null;
		}

		ncraApplicantDetailInfoCacheModel.applicantEmailAddr =
			getApplicantEmailAddr();

		String applicantEmailAddr =
			ncraApplicantDetailInfoCacheModel.applicantEmailAddr;

		if ((applicantEmailAddr != null) &&
			(applicantEmailAddr.length() == 0)) {

			ncraApplicantDetailInfoCacheModel.applicantEmailAddr = null;
		}

		ncraApplicantDetailInfoCacheModel.applicantLocation =
			getApplicantLocation();

		String applicantLocation =
			ncraApplicantDetailInfoCacheModel.applicantLocation;

		if ((applicantLocation != null) && (applicantLocation.length() == 0)) {
			ncraApplicantDetailInfoCacheModel.applicantLocation = null;
		}

		ncraApplicantDetailInfoCacheModel.ncraApplicationId =
			getNcraApplicationId();

		return ncraApplicantDetailInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NcraApplicantDetailInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NcraApplicantDetailInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcraApplicantDetailInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(NcraApplicantDetailInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, NcraApplicantDetailInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						NcraApplicantDetailInfo.class, ModelWrapper.class);

	}

	private long _ncraApplicantDetailInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicantBusinessName;
	private String _applicantAddress;
	private String _applicantContact;
	private String _applicantTeleNum;
	private String _applicantFaxNo;
	private String _applicantEmailAddr;
	private String _applicantLocation;
	private long _ncraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<NcraApplicantDetailInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NcraApplicantDetailInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"ncraApplicantDetailInfoId", _ncraApplicantDetailInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"applicantBusinessName", _applicantBusinessName);
		_columnOriginalValues.put("applicantAddress", _applicantAddress);
		_columnOriginalValues.put("applicantContact", _applicantContact);
		_columnOriginalValues.put("applicantTeleNum", _applicantTeleNum);
		_columnOriginalValues.put("applicantFaxNo", _applicantFaxNo);
		_columnOriginalValues.put("applicantEmailAddr", _applicantEmailAddr);
		_columnOriginalValues.put("applicantLocation", _applicantLocation);
		_columnOriginalValues.put("ncraApplicationId", _ncraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ncraApplicantDetailInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("applicantBusinessName", 128L);

		columnBitmasks.put("applicantAddress", 256L);

		columnBitmasks.put("applicantContact", 512L);

		columnBitmasks.put("applicantTeleNum", 1024L);

		columnBitmasks.put("applicantFaxNo", 2048L);

		columnBitmasks.put("applicantEmailAddr", 4096L);

		columnBitmasks.put("applicantLocation", 8192L);

		columnBitmasks.put("ncraApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NcraApplicantDetailInfo _escapedModel;

}