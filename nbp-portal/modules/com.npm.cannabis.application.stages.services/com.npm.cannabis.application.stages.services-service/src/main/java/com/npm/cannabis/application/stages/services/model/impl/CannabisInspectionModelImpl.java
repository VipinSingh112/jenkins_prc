/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.npm.cannabis.application.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.npm.cannabis.application.stages.services.model.CannabisInspection;
import com.npm.cannabis.application.stages.services.model.CannabisInspectionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisInspection service. Represents a row in the &quot;nbp_cannabis_inspection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisInspectionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisInspectionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisInspectionImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisInspectionModelImpl
	extends BaseModelImpl<CannabisInspection>
	implements CannabisInspectionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis inspection model instance should use the <code>CannabisInspection</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_inspection";

	public static final Object[][] TABLE_COLUMNS = {
		{"cannabisInspectionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"inspectionDate", Types.TIMESTAMP},
		{"insectionDateRange", Types.VARCHAR}, {"invities", Types.VARCHAR},
		{"location", Types.VARCHAR}, {"updatedBySource", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"cannabisApplicationId", Types.BIGINT},
		{"slotBookedByUser", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cannabisInspectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("insectionDateRange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("invities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedBySource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cannabisApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("slotBookedByUser", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_inspection (cannabisInspectionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,inspectionDate DATE null,insectionDateRange VARCHAR(75) null,invities VARCHAR(75) null,location VARCHAR(75) null,updatedBySource VARCHAR(75) null,status VARCHAR(75) null,caseId VARCHAR(75) null,cannabisApplicationId LONG,slotBookedByUser LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_inspection";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisInspection.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_inspection.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SLOTBOOKEDBYUSER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisInspectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cannabisInspectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCannabisInspectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cannabisInspectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisInspection.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisInspection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisInspection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CannabisInspection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisInspection, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CannabisInspection)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisInspection, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisInspection, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisInspection)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisInspection, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisInspection, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CannabisInspection, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisInspection, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CannabisInspection, Object>>();

			attributeGetterFunctions.put(
				"cannabisInspectionId",
				CannabisInspection::getCannabisInspectionId);
			attributeGetterFunctions.put(
				"groupId", CannabisInspection::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CannabisInspection::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CannabisInspection::getUserId);
			attributeGetterFunctions.put(
				"userName", CannabisInspection::getUserName);
			attributeGetterFunctions.put(
				"createDate", CannabisInspection::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CannabisInspection::getModifiedDate);
			attributeGetterFunctions.put(
				"inspectionDate", CannabisInspection::getInspectionDate);
			attributeGetterFunctions.put(
				"insectionDateRange",
				CannabisInspection::getInsectionDateRange);
			attributeGetterFunctions.put(
				"invities", CannabisInspection::getInvities);
			attributeGetterFunctions.put(
				"location", CannabisInspection::getLocation);
			attributeGetterFunctions.put(
				"updatedBySource", CannabisInspection::getUpdatedBySource);
			attributeGetterFunctions.put(
				"status", CannabisInspection::getStatus);
			attributeGetterFunctions.put(
				"caseId", CannabisInspection::getCaseId);
			attributeGetterFunctions.put(
				"cannabisApplicationId",
				CannabisInspection::getCannabisApplicationId);
			attributeGetterFunctions.put(
				"slotBookedByUser", CannabisInspection::getSlotBookedByUser);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CannabisInspection, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisInspection, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CannabisInspection, ?>>();

			attributeSetterBiConsumers.put(
				"cannabisInspectionId",
				(BiConsumer<CannabisInspection, Long>)
					CannabisInspection::setCannabisInspectionId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CannabisInspection, Long>)
					CannabisInspection::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CannabisInspection, Long>)
					CannabisInspection::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CannabisInspection, Long>)
					CannabisInspection::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CannabisInspection, String>)
					CannabisInspection::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CannabisInspection, Date>)
					CannabisInspection::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CannabisInspection, Date>)
					CannabisInspection::setModifiedDate);
			attributeSetterBiConsumers.put(
				"inspectionDate",
				(BiConsumer<CannabisInspection, Date>)
					CannabisInspection::setInspectionDate);
			attributeSetterBiConsumers.put(
				"insectionDateRange",
				(BiConsumer<CannabisInspection, String>)
					CannabisInspection::setInsectionDateRange);
			attributeSetterBiConsumers.put(
				"invities",
				(BiConsumer<CannabisInspection, String>)
					CannabisInspection::setInvities);
			attributeSetterBiConsumers.put(
				"location",
				(BiConsumer<CannabisInspection, String>)
					CannabisInspection::setLocation);
			attributeSetterBiConsumers.put(
				"updatedBySource",
				(BiConsumer<CannabisInspection, String>)
					CannabisInspection::setUpdatedBySource);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<CannabisInspection, String>)
					CannabisInspection::setStatus);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<CannabisInspection, String>)
					CannabisInspection::setCaseId);
			attributeSetterBiConsumers.put(
				"cannabisApplicationId",
				(BiConsumer<CannabisInspection, Long>)
					CannabisInspection::setCannabisApplicationId);
			attributeSetterBiConsumers.put(
				"slotBookedByUser",
				(BiConsumer<CannabisInspection, Long>)
					CannabisInspection::setSlotBookedByUser);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCannabisInspectionId() {
		return _cannabisInspectionId;
	}

	@Override
	public void setCannabisInspectionId(long cannabisInspectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisInspectionId = cannabisInspectionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getInspectionDate() {
		return _inspectionDate;
	}

	@Override
	public void setInspectionDate(Date inspectionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inspectionDate = inspectionDate;
	}

	@JSON
	@Override
	public String getInsectionDateRange() {
		if (_insectionDateRange == null) {
			return "";
		}
		else {
			return _insectionDateRange;
		}
	}

	@Override
	public void setInsectionDateRange(String insectionDateRange) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insectionDateRange = insectionDateRange;
	}

	@JSON
	@Override
	public String getInvities() {
		if (_invities == null) {
			return "";
		}
		else {
			return _invities;
		}
	}

	@Override
	public void setInvities(String invities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_invities = invities;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@JSON
	@Override
	public String getUpdatedBySource() {
		if (_updatedBySource == null) {
			return "";
		}
		else {
			return _updatedBySource;
		}
	}

	@Override
	public void setUpdatedBySource(String updatedBySource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedBySource = updatedBySource;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("status");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public long getCannabisApplicationId() {
		return _cannabisApplicationId;
	}

	@Override
	public void setCannabisApplicationId(long cannabisApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisApplicationId = cannabisApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCannabisApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
	}

	@JSON
	@Override
	public long getSlotBookedByUser() {
		return _slotBookedByUser;
	}

	@Override
	public void setSlotBookedByUser(long slotBookedByUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_slotBookedByUser = slotBookedByUser;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSlotBookedByUser() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("slotBookedByUser"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CannabisInspection.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisInspection toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisInspection>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisInspectionImpl cannabisInspectionImpl =
			new CannabisInspectionImpl();

		cannabisInspectionImpl.setCannabisInspectionId(
			getCannabisInspectionId());
		cannabisInspectionImpl.setGroupId(getGroupId());
		cannabisInspectionImpl.setCompanyId(getCompanyId());
		cannabisInspectionImpl.setUserId(getUserId());
		cannabisInspectionImpl.setUserName(getUserName());
		cannabisInspectionImpl.setCreateDate(getCreateDate());
		cannabisInspectionImpl.setModifiedDate(getModifiedDate());
		cannabisInspectionImpl.setInspectionDate(getInspectionDate());
		cannabisInspectionImpl.setInsectionDateRange(getInsectionDateRange());
		cannabisInspectionImpl.setInvities(getInvities());
		cannabisInspectionImpl.setLocation(getLocation());
		cannabisInspectionImpl.setUpdatedBySource(getUpdatedBySource());
		cannabisInspectionImpl.setStatus(getStatus());
		cannabisInspectionImpl.setCaseId(getCaseId());
		cannabisInspectionImpl.setCannabisApplicationId(
			getCannabisApplicationId());
		cannabisInspectionImpl.setSlotBookedByUser(getSlotBookedByUser());

		cannabisInspectionImpl.resetOriginalValues();

		return cannabisInspectionImpl;
	}

	@Override
	public CannabisInspection cloneWithOriginalValues() {
		CannabisInspectionImpl cannabisInspectionImpl =
			new CannabisInspectionImpl();

		cannabisInspectionImpl.setCannabisInspectionId(
			this.<Long>getColumnOriginalValue("cannabisInspectionId"));
		cannabisInspectionImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cannabisInspectionImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cannabisInspectionImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cannabisInspectionImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cannabisInspectionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cannabisInspectionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cannabisInspectionImpl.setInspectionDate(
			this.<Date>getColumnOriginalValue("inspectionDate"));
		cannabisInspectionImpl.setInsectionDateRange(
			this.<String>getColumnOriginalValue("insectionDateRange"));
		cannabisInspectionImpl.setInvities(
			this.<String>getColumnOriginalValue("invities"));
		cannabisInspectionImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		cannabisInspectionImpl.setUpdatedBySource(
			this.<String>getColumnOriginalValue("updatedBySource"));
		cannabisInspectionImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		cannabisInspectionImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		cannabisInspectionImpl.setCannabisApplicationId(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
		cannabisInspectionImpl.setSlotBookedByUser(
			this.<Long>getColumnOriginalValue("slotBookedByUser"));

		return cannabisInspectionImpl;
	}

	@Override
	public int compareTo(CannabisInspection cannabisInspection) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), cannabisInspection.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisInspection)) {
			return false;
		}

		CannabisInspection cannabisInspection = (CannabisInspection)object;

		long primaryKey = cannabisInspection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisInspection> toCacheModel() {
		CannabisInspectionCacheModel cannabisInspectionCacheModel =
			new CannabisInspectionCacheModel();

		cannabisInspectionCacheModel.cannabisInspectionId =
			getCannabisInspectionId();

		cannabisInspectionCacheModel.groupId = getGroupId();

		cannabisInspectionCacheModel.companyId = getCompanyId();

		cannabisInspectionCacheModel.userId = getUserId();

		cannabisInspectionCacheModel.userName = getUserName();

		String userName = cannabisInspectionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cannabisInspectionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cannabisInspectionCacheModel.createDate = createDate.getTime();
		}
		else {
			cannabisInspectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cannabisInspectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cannabisInspectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date inspectionDate = getInspectionDate();

		if (inspectionDate != null) {
			cannabisInspectionCacheModel.inspectionDate =
				inspectionDate.getTime();
		}
		else {
			cannabisInspectionCacheModel.inspectionDate = Long.MIN_VALUE;
		}

		cannabisInspectionCacheModel.insectionDateRange =
			getInsectionDateRange();

		String insectionDateRange =
			cannabisInspectionCacheModel.insectionDateRange;

		if ((insectionDateRange != null) &&
			(insectionDateRange.length() == 0)) {

			cannabisInspectionCacheModel.insectionDateRange = null;
		}

		cannabisInspectionCacheModel.invities = getInvities();

		String invities = cannabisInspectionCacheModel.invities;

		if ((invities != null) && (invities.length() == 0)) {
			cannabisInspectionCacheModel.invities = null;
		}

		cannabisInspectionCacheModel.location = getLocation();

		String location = cannabisInspectionCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			cannabisInspectionCacheModel.location = null;
		}

		cannabisInspectionCacheModel.updatedBySource = getUpdatedBySource();

		String updatedBySource = cannabisInspectionCacheModel.updatedBySource;

		if ((updatedBySource != null) && (updatedBySource.length() == 0)) {
			cannabisInspectionCacheModel.updatedBySource = null;
		}

		cannabisInspectionCacheModel.status = getStatus();

		String status = cannabisInspectionCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			cannabisInspectionCacheModel.status = null;
		}

		cannabisInspectionCacheModel.caseId = getCaseId();

		String caseId = cannabisInspectionCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			cannabisInspectionCacheModel.caseId = null;
		}

		cannabisInspectionCacheModel.cannabisApplicationId =
			getCannabisApplicationId();

		cannabisInspectionCacheModel.slotBookedByUser = getSlotBookedByUser();

		return cannabisInspectionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisInspection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CannabisInspection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisInspection, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisInspection)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CannabisInspection>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CannabisInspection.class, ModelWrapper.class);

	}

	private long _cannabisInspectionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _inspectionDate;
	private String _insectionDateRange;
	private String _invities;
	private String _location;
	private String _updatedBySource;
	private String _status;
	private String _caseId;
	private long _cannabisApplicationId;
	private long _slotBookedByUser;

	public <T> T getColumnValue(String columnName) {
		Function<CannabisInspection, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisInspection)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"cannabisInspectionId", _cannabisInspectionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("inspectionDate", _inspectionDate);
		_columnOriginalValues.put("insectionDateRange", _insectionDateRange);
		_columnOriginalValues.put("invities", _invities);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("updatedBySource", _updatedBySource);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put(
			"cannabisApplicationId", _cannabisApplicationId);
		_columnOriginalValues.put("slotBookedByUser", _slotBookedByUser);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("cannabisInspectionId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("inspectionDate", 128L);

		columnBitmasks.put("insectionDateRange", 256L);

		columnBitmasks.put("invities", 512L);

		columnBitmasks.put("location", 1024L);

		columnBitmasks.put("updatedBySource", 2048L);

		columnBitmasks.put("status", 4096L);

		columnBitmasks.put("caseId", 8192L);

		columnBitmasks.put("cannabisApplicationId", 16384L);

		columnBitmasks.put("slotBookedByUser", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisInspection _escapedModel;

}