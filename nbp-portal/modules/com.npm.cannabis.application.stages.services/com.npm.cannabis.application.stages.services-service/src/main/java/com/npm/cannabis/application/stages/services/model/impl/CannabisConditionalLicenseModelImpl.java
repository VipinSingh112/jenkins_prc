/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.npm.cannabis.application.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.npm.cannabis.application.stages.services.model.CannabisConditionalLicense;
import com.npm.cannabis.application.stages.services.model.CannabisConditionalLicenseModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisConditionalLicense service. Represents a row in the &quot;nbp_cannabis_con_license&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisConditionalLicenseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisConditionalLicenseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisConditionalLicenseImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisConditionalLicenseModelImpl
	extends BaseModelImpl<CannabisConditionalLicense>
	implements CannabisConditionalLicenseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis conditional license model instance should use the <code>CannabisConditionalLicense</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_con_license";

	public static final Object[][] TABLE_COLUMNS = {
		{"cannabisConditonalLicenseId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"entityNumber", Types.VARCHAR}, {"entityName", Types.VARCHAR},
		{"categoryTier", Types.VARCHAR},
		{"numberOfTheExtension", Types.INTEGER},
		{"ListOfPreconditions", Types.VARCHAR}, {"payentAmtDue", Types.VARCHAR},
		{"issueDate", Types.TIMESTAMP}, {"expirationDate", Types.TIMESTAMP},
		{"cannabisApplicationId", Types.BIGINT},
		{"updatedBySource", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"caseId", Types.VARCHAR}, {"conditionalLicenseFileId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cannabisConditonalLicenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryTier", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfTheExtension", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ListOfPreconditions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("payentAmtDue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expirationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("cannabisApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("updatedBySource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("conditionalLicenseFileId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_con_license (cannabisConditonalLicenseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityNumber VARCHAR(75) null,entityName VARCHAR(75) null,categoryTier VARCHAR(75) null,numberOfTheExtension INTEGER,ListOfPreconditions TEXT null,payentAmtDue VARCHAR(75) null,issueDate DATE null,expirationDate DATE null,cannabisApplicationId LONG,updatedBySource VARCHAR(75) null,status VARCHAR(75) null,caseId VARCHAR(75) null,conditionalLicenseFileId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_con_license";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisConditionalLicense.cannabisConditonalLicenseId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_con_license.cannabisConditonalLicenseId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISCONDITONALLICENSEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisConditionalLicenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cannabisConditonalLicenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCannabisConditonalLicenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cannabisConditonalLicenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisConditionalLicense.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisConditionalLicense.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisConditionalLicense, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CannabisConditionalLicense, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisConditionalLicense, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CannabisConditionalLicense)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisConditionalLicense, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisConditionalLicense, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisConditionalLicense)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisConditionalLicense, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisConditionalLicense, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CannabisConditionalLicense, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisConditionalLicense, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<CannabisConditionalLicense, Object>>();

			attributeGetterFunctions.put(
				"cannabisConditonalLicenseId",
				CannabisConditionalLicense::getCannabisConditonalLicenseId);
			attributeGetterFunctions.put(
				"groupId", CannabisConditionalLicense::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CannabisConditionalLicense::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CannabisConditionalLicense::getUserId);
			attributeGetterFunctions.put(
				"userName", CannabisConditionalLicense::getUserName);
			attributeGetterFunctions.put(
				"createDate", CannabisConditionalLicense::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CannabisConditionalLicense::getModifiedDate);
			attributeGetterFunctions.put(
				"entityNumber", CannabisConditionalLicense::getEntityNumber);
			attributeGetterFunctions.put(
				"entityName", CannabisConditionalLicense::getEntityName);
			attributeGetterFunctions.put(
				"categoryTier", CannabisConditionalLicense::getCategoryTier);
			attributeGetterFunctions.put(
				"numberOfTheExtension",
				CannabisConditionalLicense::getNumberOfTheExtension);
			attributeGetterFunctions.put(
				"ListOfPreconditions",
				CannabisConditionalLicense::getListOfPreconditions);
			attributeGetterFunctions.put(
				"payentAmtDue", CannabisConditionalLicense::getPayentAmtDue);
			attributeGetterFunctions.put(
				"issueDate", CannabisConditionalLicense::getIssueDate);
			attributeGetterFunctions.put(
				"expirationDate",
				CannabisConditionalLicense::getExpirationDate);
			attributeGetterFunctions.put(
				"cannabisApplicationId",
				CannabisConditionalLicense::getCannabisApplicationId);
			attributeGetterFunctions.put(
				"updatedBySource",
				CannabisConditionalLicense::getUpdatedBySource);
			attributeGetterFunctions.put(
				"status", CannabisConditionalLicense::getStatus);
			attributeGetterFunctions.put(
				"caseId", CannabisConditionalLicense::getCaseId);
			attributeGetterFunctions.put(
				"conditionalLicenseFileId",
				CannabisConditionalLicense::getConditionalLicenseFileId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CannabisConditionalLicense, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisConditionalLicense, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CannabisConditionalLicense, ?>>();

			attributeSetterBiConsumers.put(
				"cannabisConditonalLicenseId",
				(BiConsumer<CannabisConditionalLicense, Long>)
					CannabisConditionalLicense::setCannabisConditonalLicenseId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CannabisConditionalLicense, Long>)
					CannabisConditionalLicense::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CannabisConditionalLicense, Long>)
					CannabisConditionalLicense::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CannabisConditionalLicense, Long>)
					CannabisConditionalLicense::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CannabisConditionalLicense, Date>)
					CannabisConditionalLicense::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CannabisConditionalLicense, Date>)
					CannabisConditionalLicense::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityNumber",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setEntityNumber);
			attributeSetterBiConsumers.put(
				"entityName",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setEntityName);
			attributeSetterBiConsumers.put(
				"categoryTier",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setCategoryTier);
			attributeSetterBiConsumers.put(
				"numberOfTheExtension",
				(BiConsumer<CannabisConditionalLicense, Integer>)
					CannabisConditionalLicense::setNumberOfTheExtension);
			attributeSetterBiConsumers.put(
				"ListOfPreconditions",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setListOfPreconditions);
			attributeSetterBiConsumers.put(
				"payentAmtDue",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setPayentAmtDue);
			attributeSetterBiConsumers.put(
				"issueDate",
				(BiConsumer<CannabisConditionalLicense, Date>)
					CannabisConditionalLicense::setIssueDate);
			attributeSetterBiConsumers.put(
				"expirationDate",
				(BiConsumer<CannabisConditionalLicense, Date>)
					CannabisConditionalLicense::setExpirationDate);
			attributeSetterBiConsumers.put(
				"cannabisApplicationId",
				(BiConsumer<CannabisConditionalLicense, Long>)
					CannabisConditionalLicense::setCannabisApplicationId);
			attributeSetterBiConsumers.put(
				"updatedBySource",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setUpdatedBySource);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setStatus);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<CannabisConditionalLicense, String>)
					CannabisConditionalLicense::setCaseId);
			attributeSetterBiConsumers.put(
				"conditionalLicenseFileId",
				(BiConsumer<CannabisConditionalLicense, Long>)
					CannabisConditionalLicense::setConditionalLicenseFileId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCannabisConditonalLicenseId() {
		return _cannabisConditonalLicenseId;
	}

	@Override
	public void setCannabisConditonalLicenseId(
		long cannabisConditonalLicenseId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisConditonalLicenseId = cannabisConditonalLicenseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityNumber() {
		if (_entityNumber == null) {
			return "";
		}
		else {
			return _entityNumber;
		}
	}

	@Override
	public void setEntityNumber(String entityNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityNumber = entityNumber;
	}

	@JSON
	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return "";
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityName = entityName;
	}

	@JSON
	@Override
	public String getCategoryTier() {
		if (_categoryTier == null) {
			return "";
		}
		else {
			return _categoryTier;
		}
	}

	@Override
	public void setCategoryTier(String categoryTier) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryTier = categoryTier;
	}

	@JSON
	@Override
	public int getNumberOfTheExtension() {
		return _numberOfTheExtension;
	}

	@Override
	public void setNumberOfTheExtension(int numberOfTheExtension) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfTheExtension = numberOfTheExtension;
	}

	@JSON
	@Override
	public String getListOfPreconditions() {
		if (_ListOfPreconditions == null) {
			return "";
		}
		else {
			return _ListOfPreconditions;
		}
	}

	@Override
	public void setListOfPreconditions(String ListOfPreconditions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ListOfPreconditions = ListOfPreconditions;
	}

	@JSON
	@Override
	public String getPayentAmtDue() {
		if (_payentAmtDue == null) {
			return "";
		}
		else {
			return _payentAmtDue;
		}
	}

	@Override
	public void setPayentAmtDue(String payentAmtDue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_payentAmtDue = payentAmtDue;
	}

	@JSON
	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_issueDate = issueDate;
	}

	@JSON
	@Override
	public Date getExpirationDate() {
		return _expirationDate;
	}

	@Override
	public void setExpirationDate(Date expirationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expirationDate = expirationDate;
	}

	@JSON
	@Override
	public long getCannabisApplicationId() {
		return _cannabisApplicationId;
	}

	@Override
	public void setCannabisApplicationId(long cannabisApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisApplicationId = cannabisApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCannabisApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
	}

	@JSON
	@Override
	public String getUpdatedBySource() {
		if (_updatedBySource == null) {
			return "";
		}
		else {
			return _updatedBySource;
		}
	}

	@Override
	public void setUpdatedBySource(String updatedBySource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedBySource = updatedBySource;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public long getConditionalLicenseFileId() {
		return _conditionalLicenseFileId;
	}

	@Override
	public void setConditionalLicenseFileId(long conditionalLicenseFileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_conditionalLicenseFileId = conditionalLicenseFileId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CannabisConditionalLicense.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisConditionalLicense toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisConditionalLicense>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisConditionalLicenseImpl cannabisConditionalLicenseImpl =
			new CannabisConditionalLicenseImpl();

		cannabisConditionalLicenseImpl.setCannabisConditonalLicenseId(
			getCannabisConditonalLicenseId());
		cannabisConditionalLicenseImpl.setGroupId(getGroupId());
		cannabisConditionalLicenseImpl.setCompanyId(getCompanyId());
		cannabisConditionalLicenseImpl.setUserId(getUserId());
		cannabisConditionalLicenseImpl.setUserName(getUserName());
		cannabisConditionalLicenseImpl.setCreateDate(getCreateDate());
		cannabisConditionalLicenseImpl.setModifiedDate(getModifiedDate());
		cannabisConditionalLicenseImpl.setEntityNumber(getEntityNumber());
		cannabisConditionalLicenseImpl.setEntityName(getEntityName());
		cannabisConditionalLicenseImpl.setCategoryTier(getCategoryTier());
		cannabisConditionalLicenseImpl.setNumberOfTheExtension(
			getNumberOfTheExtension());
		cannabisConditionalLicenseImpl.setListOfPreconditions(
			getListOfPreconditions());
		cannabisConditionalLicenseImpl.setPayentAmtDue(getPayentAmtDue());
		cannabisConditionalLicenseImpl.setIssueDate(getIssueDate());
		cannabisConditionalLicenseImpl.setExpirationDate(getExpirationDate());
		cannabisConditionalLicenseImpl.setCannabisApplicationId(
			getCannabisApplicationId());
		cannabisConditionalLicenseImpl.setUpdatedBySource(getUpdatedBySource());
		cannabisConditionalLicenseImpl.setStatus(getStatus());
		cannabisConditionalLicenseImpl.setCaseId(getCaseId());
		cannabisConditionalLicenseImpl.setConditionalLicenseFileId(
			getConditionalLicenseFileId());

		cannabisConditionalLicenseImpl.resetOriginalValues();

		return cannabisConditionalLicenseImpl;
	}

	@Override
	public CannabisConditionalLicense cloneWithOriginalValues() {
		CannabisConditionalLicenseImpl cannabisConditionalLicenseImpl =
			new CannabisConditionalLicenseImpl();

		cannabisConditionalLicenseImpl.setCannabisConditonalLicenseId(
			this.<Long>getColumnOriginalValue("cannabisConditonalLicenseId"));
		cannabisConditionalLicenseImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cannabisConditionalLicenseImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cannabisConditionalLicenseImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cannabisConditionalLicenseImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cannabisConditionalLicenseImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cannabisConditionalLicenseImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cannabisConditionalLicenseImpl.setEntityNumber(
			this.<String>getColumnOriginalValue("entityNumber"));
		cannabisConditionalLicenseImpl.setEntityName(
			this.<String>getColumnOriginalValue("entityName"));
		cannabisConditionalLicenseImpl.setCategoryTier(
			this.<String>getColumnOriginalValue("categoryTier"));
		cannabisConditionalLicenseImpl.setNumberOfTheExtension(
			this.<Integer>getColumnOriginalValue("numberOfTheExtension"));
		cannabisConditionalLicenseImpl.setListOfPreconditions(
			this.<String>getColumnOriginalValue("ListOfPreconditions"));
		cannabisConditionalLicenseImpl.setPayentAmtDue(
			this.<String>getColumnOriginalValue("payentAmtDue"));
		cannabisConditionalLicenseImpl.setIssueDate(
			this.<Date>getColumnOriginalValue("issueDate"));
		cannabisConditionalLicenseImpl.setExpirationDate(
			this.<Date>getColumnOriginalValue("expirationDate"));
		cannabisConditionalLicenseImpl.setCannabisApplicationId(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
		cannabisConditionalLicenseImpl.setUpdatedBySource(
			this.<String>getColumnOriginalValue("updatedBySource"));
		cannabisConditionalLicenseImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		cannabisConditionalLicenseImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		cannabisConditionalLicenseImpl.setConditionalLicenseFileId(
			this.<Long>getColumnOriginalValue("conditionalLicenseFileId"));

		return cannabisConditionalLicenseImpl;
	}

	@Override
	public int compareTo(
		CannabisConditionalLicense cannabisConditionalLicense) {

		long primaryKey = cannabisConditionalLicense.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisConditionalLicense)) {
			return false;
		}

		CannabisConditionalLicense cannabisConditionalLicense =
			(CannabisConditionalLicense)object;

		long primaryKey = cannabisConditionalLicense.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisConditionalLicense> toCacheModel() {
		CannabisConditionalLicenseCacheModel
			cannabisConditionalLicenseCacheModel =
				new CannabisConditionalLicenseCacheModel();

		cannabisConditionalLicenseCacheModel.cannabisConditonalLicenseId =
			getCannabisConditonalLicenseId();

		cannabisConditionalLicenseCacheModel.groupId = getGroupId();

		cannabisConditionalLicenseCacheModel.companyId = getCompanyId();

		cannabisConditionalLicenseCacheModel.userId = getUserId();

		cannabisConditionalLicenseCacheModel.userName = getUserName();

		String userName = cannabisConditionalLicenseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cannabisConditionalLicenseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cannabisConditionalLicenseCacheModel.createDate =
				createDate.getTime();
		}
		else {
			cannabisConditionalLicenseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cannabisConditionalLicenseCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cannabisConditionalLicenseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cannabisConditionalLicenseCacheModel.entityNumber = getEntityNumber();

		String entityNumber = cannabisConditionalLicenseCacheModel.entityNumber;

		if ((entityNumber != null) && (entityNumber.length() == 0)) {
			cannabisConditionalLicenseCacheModel.entityNumber = null;
		}

		cannabisConditionalLicenseCacheModel.entityName = getEntityName();

		String entityName = cannabisConditionalLicenseCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			cannabisConditionalLicenseCacheModel.entityName = null;
		}

		cannabisConditionalLicenseCacheModel.categoryTier = getCategoryTier();

		String categoryTier = cannabisConditionalLicenseCacheModel.categoryTier;

		if ((categoryTier != null) && (categoryTier.length() == 0)) {
			cannabisConditionalLicenseCacheModel.categoryTier = null;
		}

		cannabisConditionalLicenseCacheModel.numberOfTheExtension =
			getNumberOfTheExtension();

		cannabisConditionalLicenseCacheModel.ListOfPreconditions =
			getListOfPreconditions();

		String ListOfPreconditions =
			cannabisConditionalLicenseCacheModel.ListOfPreconditions;

		if ((ListOfPreconditions != null) &&
			(ListOfPreconditions.length() == 0)) {

			cannabisConditionalLicenseCacheModel.ListOfPreconditions = null;
		}

		cannabisConditionalLicenseCacheModel.payentAmtDue = getPayentAmtDue();

		String payentAmtDue = cannabisConditionalLicenseCacheModel.payentAmtDue;

		if ((payentAmtDue != null) && (payentAmtDue.length() == 0)) {
			cannabisConditionalLicenseCacheModel.payentAmtDue = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			cannabisConditionalLicenseCacheModel.issueDate =
				issueDate.getTime();
		}
		else {
			cannabisConditionalLicenseCacheModel.issueDate = Long.MIN_VALUE;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			cannabisConditionalLicenseCacheModel.expirationDate =
				expirationDate.getTime();
		}
		else {
			cannabisConditionalLicenseCacheModel.expirationDate =
				Long.MIN_VALUE;
		}

		cannabisConditionalLicenseCacheModel.cannabisApplicationId =
			getCannabisApplicationId();

		cannabisConditionalLicenseCacheModel.updatedBySource =
			getUpdatedBySource();

		String updatedBySource =
			cannabisConditionalLicenseCacheModel.updatedBySource;

		if ((updatedBySource != null) && (updatedBySource.length() == 0)) {
			cannabisConditionalLicenseCacheModel.updatedBySource = null;
		}

		cannabisConditionalLicenseCacheModel.status = getStatus();

		String status = cannabisConditionalLicenseCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			cannabisConditionalLicenseCacheModel.status = null;
		}

		cannabisConditionalLicenseCacheModel.caseId = getCaseId();

		String caseId = cannabisConditionalLicenseCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			cannabisConditionalLicenseCacheModel.caseId = null;
		}

		cannabisConditionalLicenseCacheModel.conditionalLicenseFileId =
			getConditionalLicenseFileId();

		return cannabisConditionalLicenseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisConditionalLicense, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CannabisConditionalLicense, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisConditionalLicense, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisConditionalLicense)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CannabisConditionalLicense>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CannabisConditionalLicense.class, ModelWrapper.class);

	}

	private long _cannabisConditonalLicenseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityNumber;
	private String _entityName;
	private String _categoryTier;
	private int _numberOfTheExtension;
	private String _ListOfPreconditions;
	private String _payentAmtDue;
	private Date _issueDate;
	private Date _expirationDate;
	private long _cannabisApplicationId;
	private String _updatedBySource;
	private String _status;
	private String _caseId;
	private long _conditionalLicenseFileId;

	public <T> T getColumnValue(String columnName) {
		Function<CannabisConditionalLicense, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisConditionalLicense)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"cannabisConditonalLicenseId", _cannabisConditonalLicenseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityNumber", _entityNumber);
		_columnOriginalValues.put("entityName", _entityName);
		_columnOriginalValues.put("categoryTier", _categoryTier);
		_columnOriginalValues.put(
			"numberOfTheExtension", _numberOfTheExtension);
		_columnOriginalValues.put("ListOfPreconditions", _ListOfPreconditions);
		_columnOriginalValues.put("payentAmtDue", _payentAmtDue);
		_columnOriginalValues.put("issueDate", _issueDate);
		_columnOriginalValues.put("expirationDate", _expirationDate);
		_columnOriginalValues.put(
			"cannabisApplicationId", _cannabisApplicationId);
		_columnOriginalValues.put("updatedBySource", _updatedBySource);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put(
			"conditionalLicenseFileId", _conditionalLicenseFileId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("cannabisConditonalLicenseId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("entityNumber", 128L);

		columnBitmasks.put("entityName", 256L);

		columnBitmasks.put("categoryTier", 512L);

		columnBitmasks.put("numberOfTheExtension", 1024L);

		columnBitmasks.put("ListOfPreconditions", 2048L);

		columnBitmasks.put("payentAmtDue", 4096L);

		columnBitmasks.put("issueDate", 8192L);

		columnBitmasks.put("expirationDate", 16384L);

		columnBitmasks.put("cannabisApplicationId", 32768L);

		columnBitmasks.put("updatedBySource", 65536L);

		columnBitmasks.put("status", 131072L);

		columnBitmasks.put("caseId", 262144L);

		columnBitmasks.put("conditionalLicenseFileId", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisConditionalLicense _escapedModel;

}