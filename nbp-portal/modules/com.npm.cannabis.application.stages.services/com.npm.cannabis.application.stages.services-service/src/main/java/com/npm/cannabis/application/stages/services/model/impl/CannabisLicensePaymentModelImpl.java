/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.npm.cannabis.application.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.npm.cannabis.application.stages.services.model.CannabisLicensePayment;
import com.npm.cannabis.application.stages.services.model.CannabisLicensePaymentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisLicensePayment service. Represents a row in the &quot;nbp_cannabis_license_payment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisLicensePaymentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisLicensePaymentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisLicensePaymentImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisLicensePaymentModelImpl
	extends BaseModelImpl<CannabisLicensePayment>
	implements CannabisLicensePaymentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis license payment model instance should use the <code>CannabisLicensePayment</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_license_payment";

	public static final Object[][] TABLE_COLUMNS = {
		{"cannabisLicensePaymentId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"bondAmtDue", Types.VARCHAR},
		{"licenseFeeDue", Types.VARCHAR}, {"feeIssuanceDue", Types.VARCHAR},
		{"feeOption", Types.VARCHAR}, {"deferredPaymentType", Types.VARCHAR},
		{"feePaymentdDate", Types.TIMESTAMP}, {"paymentOption", Types.VARCHAR},
		{"paymentAmtRecieved", Types.VARCHAR}, {"paymentStatus", Types.VARCHAR},
		{"updatedBySource", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"caseId", Types.VARCHAR}, {"amountCurrency", Types.VARCHAR},
		{"cannabisApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cannabisLicensePaymentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bondAmtDue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseFeeDue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feeIssuanceDue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feeOption", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deferredPaymentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feePaymentdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("paymentOption", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentAmtRecieved", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedBySource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amountCurrency", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cannabisApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_license_payment (cannabisLicensePaymentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,bondAmtDue VARCHAR(75) null,licenseFeeDue VARCHAR(75) null,feeIssuanceDue VARCHAR(75) null,feeOption VARCHAR(75) null,deferredPaymentType VARCHAR(75) null,feePaymentdDate DATE null,paymentOption VARCHAR(75) null,paymentAmtRecieved VARCHAR(75) null,paymentStatus VARCHAR(75) null,updatedBySource VARCHAR(75) null,status VARCHAR(75) null,caseId VARCHAR(75) null,amountCurrency VARCHAR(75) null,cannabisApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_license_payment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisLicensePayment.cannabisLicensePaymentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_license_payment.cannabisLicensePaymentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISLICENSEPAYMENTID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisLicensePaymentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cannabisLicensePaymentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCannabisLicensePaymentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cannabisLicensePaymentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisLicensePayment.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisLicensePayment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisLicensePayment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CannabisLicensePayment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisLicensePayment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CannabisLicensePayment)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisLicensePayment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisLicensePayment, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisLicensePayment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisLicensePayment, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisLicensePayment, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CannabisLicensePayment, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisLicensePayment, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CannabisLicensePayment, Object>>();

			attributeGetterFunctions.put(
				"cannabisLicensePaymentId",
				CannabisLicensePayment::getCannabisLicensePaymentId);
			attributeGetterFunctions.put(
				"groupId", CannabisLicensePayment::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CannabisLicensePayment::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CannabisLicensePayment::getUserId);
			attributeGetterFunctions.put(
				"userName", CannabisLicensePayment::getUserName);
			attributeGetterFunctions.put(
				"createDate", CannabisLicensePayment::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CannabisLicensePayment::getModifiedDate);
			attributeGetterFunctions.put(
				"bondAmtDue", CannabisLicensePayment::getBondAmtDue);
			attributeGetterFunctions.put(
				"licenseFeeDue", CannabisLicensePayment::getLicenseFeeDue);
			attributeGetterFunctions.put(
				"feeIssuanceDue", CannabisLicensePayment::getFeeIssuanceDue);
			attributeGetterFunctions.put(
				"feeOption", CannabisLicensePayment::getFeeOption);
			attributeGetterFunctions.put(
				"deferredPaymentType",
				CannabisLicensePayment::getDeferredPaymentType);
			attributeGetterFunctions.put(
				"feePaymentdDate", CannabisLicensePayment::getFeePaymentdDate);
			attributeGetterFunctions.put(
				"paymentOption", CannabisLicensePayment::getPaymentOption);
			attributeGetterFunctions.put(
				"paymentAmtRecieved",
				CannabisLicensePayment::getPaymentAmtRecieved);
			attributeGetterFunctions.put(
				"paymentStatus", CannabisLicensePayment::getPaymentStatus);
			attributeGetterFunctions.put(
				"updatedBySource", CannabisLicensePayment::getUpdatedBySource);
			attributeGetterFunctions.put(
				"status", CannabisLicensePayment::getStatus);
			attributeGetterFunctions.put(
				"caseId", CannabisLicensePayment::getCaseId);
			attributeGetterFunctions.put(
				"amountCurrency", CannabisLicensePayment::getAmountCurrency);
			attributeGetterFunctions.put(
				"cannabisApplicationId",
				CannabisLicensePayment::getCannabisApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CannabisLicensePayment, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisLicensePayment, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CannabisLicensePayment, ?>>();

			attributeSetterBiConsumers.put(
				"cannabisLicensePaymentId",
				(BiConsumer<CannabisLicensePayment, Long>)
					CannabisLicensePayment::setCannabisLicensePaymentId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CannabisLicensePayment, Long>)
					CannabisLicensePayment::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CannabisLicensePayment, Long>)
					CannabisLicensePayment::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CannabisLicensePayment, Long>)
					CannabisLicensePayment::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CannabisLicensePayment, Date>)
					CannabisLicensePayment::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CannabisLicensePayment, Date>)
					CannabisLicensePayment::setModifiedDate);
			attributeSetterBiConsumers.put(
				"bondAmtDue",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setBondAmtDue);
			attributeSetterBiConsumers.put(
				"licenseFeeDue",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setLicenseFeeDue);
			attributeSetterBiConsumers.put(
				"feeIssuanceDue",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setFeeIssuanceDue);
			attributeSetterBiConsumers.put(
				"feeOption",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setFeeOption);
			attributeSetterBiConsumers.put(
				"deferredPaymentType",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setDeferredPaymentType);
			attributeSetterBiConsumers.put(
				"feePaymentdDate",
				(BiConsumer<CannabisLicensePayment, Date>)
					CannabisLicensePayment::setFeePaymentdDate);
			attributeSetterBiConsumers.put(
				"paymentOption",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setPaymentOption);
			attributeSetterBiConsumers.put(
				"paymentAmtRecieved",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setPaymentAmtRecieved);
			attributeSetterBiConsumers.put(
				"paymentStatus",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setPaymentStatus);
			attributeSetterBiConsumers.put(
				"updatedBySource",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setUpdatedBySource);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setStatus);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setCaseId);
			attributeSetterBiConsumers.put(
				"amountCurrency",
				(BiConsumer<CannabisLicensePayment, String>)
					CannabisLicensePayment::setAmountCurrency);
			attributeSetterBiConsumers.put(
				"cannabisApplicationId",
				(BiConsumer<CannabisLicensePayment, Long>)
					CannabisLicensePayment::setCannabisApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCannabisLicensePaymentId() {
		return _cannabisLicensePaymentId;
	}

	@Override
	public void setCannabisLicensePaymentId(long cannabisLicensePaymentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisLicensePaymentId = cannabisLicensePaymentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBondAmtDue() {
		if (_bondAmtDue == null) {
			return "";
		}
		else {
			return _bondAmtDue;
		}
	}

	@Override
	public void setBondAmtDue(String bondAmtDue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bondAmtDue = bondAmtDue;
	}

	@JSON
	@Override
	public String getLicenseFeeDue() {
		if (_licenseFeeDue == null) {
			return "";
		}
		else {
			return _licenseFeeDue;
		}
	}

	@Override
	public void setLicenseFeeDue(String licenseFeeDue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseFeeDue = licenseFeeDue;
	}

	@JSON
	@Override
	public String getFeeIssuanceDue() {
		if (_feeIssuanceDue == null) {
			return "";
		}
		else {
			return _feeIssuanceDue;
		}
	}

	@Override
	public void setFeeIssuanceDue(String feeIssuanceDue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feeIssuanceDue = feeIssuanceDue;
	}

	@JSON
	@Override
	public String getFeeOption() {
		if (_feeOption == null) {
			return "";
		}
		else {
			return _feeOption;
		}
	}

	@Override
	public void setFeeOption(String feeOption) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feeOption = feeOption;
	}

	@JSON
	@Override
	public String getDeferredPaymentType() {
		if (_deferredPaymentType == null) {
			return "";
		}
		else {
			return _deferredPaymentType;
		}
	}

	@Override
	public void setDeferredPaymentType(String deferredPaymentType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deferredPaymentType = deferredPaymentType;
	}

	@JSON
	@Override
	public Date getFeePaymentdDate() {
		return _feePaymentdDate;
	}

	@Override
	public void setFeePaymentdDate(Date feePaymentdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feePaymentdDate = feePaymentdDate;
	}

	@JSON
	@Override
	public String getPaymentOption() {
		if (_paymentOption == null) {
			return "";
		}
		else {
			return _paymentOption;
		}
	}

	@Override
	public void setPaymentOption(String paymentOption) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentOption = paymentOption;
	}

	@JSON
	@Override
	public String getPaymentAmtRecieved() {
		if (_paymentAmtRecieved == null) {
			return "";
		}
		else {
			return _paymentAmtRecieved;
		}
	}

	@Override
	public void setPaymentAmtRecieved(String paymentAmtRecieved) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentAmtRecieved = paymentAmtRecieved;
	}

	@JSON
	@Override
	public String getPaymentStatus() {
		if (_paymentStatus == null) {
			return "";
		}
		else {
			return _paymentStatus;
		}
	}

	@Override
	public void setPaymentStatus(String paymentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentStatus = paymentStatus;
	}

	@JSON
	@Override
	public String getUpdatedBySource() {
		if (_updatedBySource == null) {
			return "";
		}
		else {
			return _updatedBySource;
		}
	}

	@Override
	public void setUpdatedBySource(String updatedBySource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedBySource = updatedBySource;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getAmountCurrency() {
		if (_amountCurrency == null) {
			return "";
		}
		else {
			return _amountCurrency;
		}
	}

	@Override
	public void setAmountCurrency(String amountCurrency) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amountCurrency = amountCurrency;
	}

	@JSON
	@Override
	public long getCannabisApplicationId() {
		return _cannabisApplicationId;
	}

	@Override
	public void setCannabisApplicationId(long cannabisApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisApplicationId = cannabisApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCannabisApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CannabisLicensePayment.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisLicensePayment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisLicensePayment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisLicensePaymentImpl cannabisLicensePaymentImpl =
			new CannabisLicensePaymentImpl();

		cannabisLicensePaymentImpl.setCannabisLicensePaymentId(
			getCannabisLicensePaymentId());
		cannabisLicensePaymentImpl.setGroupId(getGroupId());
		cannabisLicensePaymentImpl.setCompanyId(getCompanyId());
		cannabisLicensePaymentImpl.setUserId(getUserId());
		cannabisLicensePaymentImpl.setUserName(getUserName());
		cannabisLicensePaymentImpl.setCreateDate(getCreateDate());
		cannabisLicensePaymentImpl.setModifiedDate(getModifiedDate());
		cannabisLicensePaymentImpl.setBondAmtDue(getBondAmtDue());
		cannabisLicensePaymentImpl.setLicenseFeeDue(getLicenseFeeDue());
		cannabisLicensePaymentImpl.setFeeIssuanceDue(getFeeIssuanceDue());
		cannabisLicensePaymentImpl.setFeeOption(getFeeOption());
		cannabisLicensePaymentImpl.setDeferredPaymentType(
			getDeferredPaymentType());
		cannabisLicensePaymentImpl.setFeePaymentdDate(getFeePaymentdDate());
		cannabisLicensePaymentImpl.setPaymentOption(getPaymentOption());
		cannabisLicensePaymentImpl.setPaymentAmtRecieved(
			getPaymentAmtRecieved());
		cannabisLicensePaymentImpl.setPaymentStatus(getPaymentStatus());
		cannabisLicensePaymentImpl.setUpdatedBySource(getUpdatedBySource());
		cannabisLicensePaymentImpl.setStatus(getStatus());
		cannabisLicensePaymentImpl.setCaseId(getCaseId());
		cannabisLicensePaymentImpl.setAmountCurrency(getAmountCurrency());
		cannabisLicensePaymentImpl.setCannabisApplicationId(
			getCannabisApplicationId());

		cannabisLicensePaymentImpl.resetOriginalValues();

		return cannabisLicensePaymentImpl;
	}

	@Override
	public CannabisLicensePayment cloneWithOriginalValues() {
		CannabisLicensePaymentImpl cannabisLicensePaymentImpl =
			new CannabisLicensePaymentImpl();

		cannabisLicensePaymentImpl.setCannabisLicensePaymentId(
			this.<Long>getColumnOriginalValue("cannabisLicensePaymentId"));
		cannabisLicensePaymentImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cannabisLicensePaymentImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cannabisLicensePaymentImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cannabisLicensePaymentImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cannabisLicensePaymentImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cannabisLicensePaymentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cannabisLicensePaymentImpl.setBondAmtDue(
			this.<String>getColumnOriginalValue("bondAmtDue"));
		cannabisLicensePaymentImpl.setLicenseFeeDue(
			this.<String>getColumnOriginalValue("licenseFeeDue"));
		cannabisLicensePaymentImpl.setFeeIssuanceDue(
			this.<String>getColumnOriginalValue("feeIssuanceDue"));
		cannabisLicensePaymentImpl.setFeeOption(
			this.<String>getColumnOriginalValue("feeOption"));
		cannabisLicensePaymentImpl.setDeferredPaymentType(
			this.<String>getColumnOriginalValue("deferredPaymentType"));
		cannabisLicensePaymentImpl.setFeePaymentdDate(
			this.<Date>getColumnOriginalValue("feePaymentdDate"));
		cannabisLicensePaymentImpl.setPaymentOption(
			this.<String>getColumnOriginalValue("paymentOption"));
		cannabisLicensePaymentImpl.setPaymentAmtRecieved(
			this.<String>getColumnOriginalValue("paymentAmtRecieved"));
		cannabisLicensePaymentImpl.setPaymentStatus(
			this.<String>getColumnOriginalValue("paymentStatus"));
		cannabisLicensePaymentImpl.setUpdatedBySource(
			this.<String>getColumnOriginalValue("updatedBySource"));
		cannabisLicensePaymentImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		cannabisLicensePaymentImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		cannabisLicensePaymentImpl.setAmountCurrency(
			this.<String>getColumnOriginalValue("amountCurrency"));
		cannabisLicensePaymentImpl.setCannabisApplicationId(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));

		return cannabisLicensePaymentImpl;
	}

	@Override
	public int compareTo(CannabisLicensePayment cannabisLicensePayment) {
		long primaryKey = cannabisLicensePayment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisLicensePayment)) {
			return false;
		}

		CannabisLicensePayment cannabisLicensePayment =
			(CannabisLicensePayment)object;

		long primaryKey = cannabisLicensePayment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisLicensePayment> toCacheModel() {
		CannabisLicensePaymentCacheModel cannabisLicensePaymentCacheModel =
			new CannabisLicensePaymentCacheModel();

		cannabisLicensePaymentCacheModel.cannabisLicensePaymentId =
			getCannabisLicensePaymentId();

		cannabisLicensePaymentCacheModel.groupId = getGroupId();

		cannabisLicensePaymentCacheModel.companyId = getCompanyId();

		cannabisLicensePaymentCacheModel.userId = getUserId();

		cannabisLicensePaymentCacheModel.userName = getUserName();

		String userName = cannabisLicensePaymentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cannabisLicensePaymentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cannabisLicensePaymentCacheModel.createDate = createDate.getTime();
		}
		else {
			cannabisLicensePaymentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cannabisLicensePaymentCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cannabisLicensePaymentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cannabisLicensePaymentCacheModel.bondAmtDue = getBondAmtDue();

		String bondAmtDue = cannabisLicensePaymentCacheModel.bondAmtDue;

		if ((bondAmtDue != null) && (bondAmtDue.length() == 0)) {
			cannabisLicensePaymentCacheModel.bondAmtDue = null;
		}

		cannabisLicensePaymentCacheModel.licenseFeeDue = getLicenseFeeDue();

		String licenseFeeDue = cannabisLicensePaymentCacheModel.licenseFeeDue;

		if ((licenseFeeDue != null) && (licenseFeeDue.length() == 0)) {
			cannabisLicensePaymentCacheModel.licenseFeeDue = null;
		}

		cannabisLicensePaymentCacheModel.feeIssuanceDue = getFeeIssuanceDue();

		String feeIssuanceDue = cannabisLicensePaymentCacheModel.feeIssuanceDue;

		if ((feeIssuanceDue != null) && (feeIssuanceDue.length() == 0)) {
			cannabisLicensePaymentCacheModel.feeIssuanceDue = null;
		}

		cannabisLicensePaymentCacheModel.feeOption = getFeeOption();

		String feeOption = cannabisLicensePaymentCacheModel.feeOption;

		if ((feeOption != null) && (feeOption.length() == 0)) {
			cannabisLicensePaymentCacheModel.feeOption = null;
		}

		cannabisLicensePaymentCacheModel.deferredPaymentType =
			getDeferredPaymentType();

		String deferredPaymentType =
			cannabisLicensePaymentCacheModel.deferredPaymentType;

		if ((deferredPaymentType != null) &&
			(deferredPaymentType.length() == 0)) {

			cannabisLicensePaymentCacheModel.deferredPaymentType = null;
		}

		Date feePaymentdDate = getFeePaymentdDate();

		if (feePaymentdDate != null) {
			cannabisLicensePaymentCacheModel.feePaymentdDate =
				feePaymentdDate.getTime();
		}
		else {
			cannabisLicensePaymentCacheModel.feePaymentdDate = Long.MIN_VALUE;
		}

		cannabisLicensePaymentCacheModel.paymentOption = getPaymentOption();

		String paymentOption = cannabisLicensePaymentCacheModel.paymentOption;

		if ((paymentOption != null) && (paymentOption.length() == 0)) {
			cannabisLicensePaymentCacheModel.paymentOption = null;
		}

		cannabisLicensePaymentCacheModel.paymentAmtRecieved =
			getPaymentAmtRecieved();

		String paymentAmtRecieved =
			cannabisLicensePaymentCacheModel.paymentAmtRecieved;

		if ((paymentAmtRecieved != null) &&
			(paymentAmtRecieved.length() == 0)) {

			cannabisLicensePaymentCacheModel.paymentAmtRecieved = null;
		}

		cannabisLicensePaymentCacheModel.paymentStatus = getPaymentStatus();

		String paymentStatus = cannabisLicensePaymentCacheModel.paymentStatus;

		if ((paymentStatus != null) && (paymentStatus.length() == 0)) {
			cannabisLicensePaymentCacheModel.paymentStatus = null;
		}

		cannabisLicensePaymentCacheModel.updatedBySource = getUpdatedBySource();

		String updatedBySource =
			cannabisLicensePaymentCacheModel.updatedBySource;

		if ((updatedBySource != null) && (updatedBySource.length() == 0)) {
			cannabisLicensePaymentCacheModel.updatedBySource = null;
		}

		cannabisLicensePaymentCacheModel.status = getStatus();

		String status = cannabisLicensePaymentCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			cannabisLicensePaymentCacheModel.status = null;
		}

		cannabisLicensePaymentCacheModel.caseId = getCaseId();

		String caseId = cannabisLicensePaymentCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			cannabisLicensePaymentCacheModel.caseId = null;
		}

		cannabisLicensePaymentCacheModel.amountCurrency = getAmountCurrency();

		String amountCurrency = cannabisLicensePaymentCacheModel.amountCurrency;

		if ((amountCurrency != null) && (amountCurrency.length() == 0)) {
			cannabisLicensePaymentCacheModel.amountCurrency = null;
		}

		cannabisLicensePaymentCacheModel.cannabisApplicationId =
			getCannabisApplicationId();

		return cannabisLicensePaymentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisLicensePayment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CannabisLicensePayment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisLicensePayment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CannabisLicensePayment)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CannabisLicensePayment>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CannabisLicensePayment.class, ModelWrapper.class);

	}

	private long _cannabisLicensePaymentId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _bondAmtDue;
	private String _licenseFeeDue;
	private String _feeIssuanceDue;
	private String _feeOption;
	private String _deferredPaymentType;
	private Date _feePaymentdDate;
	private String _paymentOption;
	private String _paymentAmtRecieved;
	private String _paymentStatus;
	private String _updatedBySource;
	private String _status;
	private String _caseId;
	private String _amountCurrency;
	private long _cannabisApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<CannabisLicensePayment, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisLicensePayment)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"cannabisLicensePaymentId", _cannabisLicensePaymentId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("bondAmtDue", _bondAmtDue);
		_columnOriginalValues.put("licenseFeeDue", _licenseFeeDue);
		_columnOriginalValues.put("feeIssuanceDue", _feeIssuanceDue);
		_columnOriginalValues.put("feeOption", _feeOption);
		_columnOriginalValues.put("deferredPaymentType", _deferredPaymentType);
		_columnOriginalValues.put("feePaymentdDate", _feePaymentdDate);
		_columnOriginalValues.put("paymentOption", _paymentOption);
		_columnOriginalValues.put("paymentAmtRecieved", _paymentAmtRecieved);
		_columnOriginalValues.put("paymentStatus", _paymentStatus);
		_columnOriginalValues.put("updatedBySource", _updatedBySource);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("amountCurrency", _amountCurrency);
		_columnOriginalValues.put(
			"cannabisApplicationId", _cannabisApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("cannabisLicensePaymentId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("bondAmtDue", 128L);

		columnBitmasks.put("licenseFeeDue", 256L);

		columnBitmasks.put("feeIssuanceDue", 512L);

		columnBitmasks.put("feeOption", 1024L);

		columnBitmasks.put("deferredPaymentType", 2048L);

		columnBitmasks.put("feePaymentdDate", 4096L);

		columnBitmasks.put("paymentOption", 8192L);

		columnBitmasks.put("paymentAmtRecieved", 16384L);

		columnBitmasks.put("paymentStatus", 32768L);

		columnBitmasks.put("updatedBySource", 65536L);

		columnBitmasks.put("status", 131072L);

		columnBitmasks.put("caseId", 262144L);

		columnBitmasks.put("amountCurrency", 524288L);

		columnBitmasks.put("cannabisApplicationId", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisLicensePayment _escapedModel;

}