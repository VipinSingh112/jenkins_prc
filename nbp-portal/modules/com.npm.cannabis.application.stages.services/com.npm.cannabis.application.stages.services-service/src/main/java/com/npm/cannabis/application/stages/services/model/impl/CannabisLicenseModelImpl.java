/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.npm.cannabis.application.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.npm.cannabis.application.stages.services.model.CannabisLicense;
import com.npm.cannabis.application.stages.services.model.CannabisLicenseModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CannabisLicense service. Represents a row in the &quot;nbp_cannabis_license&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CannabisLicenseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CannabisLicenseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CannabisLicenseImpl
 * @generated
 */
@JSON(strict = true)
public class CannabisLicenseModelImpl
	extends BaseModelImpl<CannabisLicense> implements CannabisLicenseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cannabis license model instance should use the <code>CannabisLicense</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_cannabis_license";

	public static final Object[][] TABLE_COLUMNS = {
		{"cannabisLicenseId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"entityNumber", Types.VARCHAR},
		{"entityName", Types.VARCHAR}, {"categoryTier", Types.VARCHAR},
		{"numberOfTheExtension", Types.VARCHAR},
		{"ListOfConditions", Types.VARCHAR}, {"payentAmtDue", Types.VARCHAR},
		{"issueDate", Types.TIMESTAMP}, {"expirationDate", Types.TIMESTAMP},
		{"cannabisApplicationId", Types.BIGINT},
		{"updatedBySource", Types.VARCHAR}, {"nameOfBPMStep", Types.VARCHAR},
		{"licenseConditionsFulfilled", Types.VARCHAR},
		{"dateFulfilled", Types.VARCHAR}, {"feeOptionSelected", Types.VARCHAR},
		{"feeAmount", Types.VARCHAR}, {"feePaidDate", Types.TIMESTAMP},
		{"bpmUserNameRole", Types.VARCHAR}, {"stageName", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"licenseNumber", Types.VARCHAR}, {"licenseFileId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cannabisLicenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryTier", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfTheExtension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ListOfConditions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("payentAmtDue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expirationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("cannabisApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("updatedBySource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfBPMStep", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseConditionsFulfilled", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateFulfilled", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feeOptionSelected", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feeAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feePaidDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bpmUserNameRole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseFileId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_cannabis_license (cannabisLicenseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityNumber VARCHAR(75) null,entityName VARCHAR(75) null,categoryTier VARCHAR(75) null,numberOfTheExtension VARCHAR(75) null,ListOfConditions TEXT null,payentAmtDue VARCHAR(75) null,issueDate DATE null,expirationDate DATE null,cannabisApplicationId LONG,updatedBySource VARCHAR(75) null,nameOfBPMStep VARCHAR(75) null,licenseConditionsFulfilled TEXT null,dateFulfilled VARCHAR(75) null,feeOptionSelected VARCHAR(75) null,feeAmount VARCHAR(75) null,feePaidDate DATE null,bpmUserNameRole VARCHAR(75) null,stageName VARCHAR(75) null,status VARCHAR(75) null,caseId VARCHAR(75) null,licenseNumber VARCHAR(75) null,licenseFileId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_cannabis_license";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cannabisLicense.cannabisLicenseId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_cannabis_license.cannabisLicenseId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LICENSENUMBER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CANNABISLICENSEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CannabisLicenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cannabisLicenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCannabisLicenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cannabisLicenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CannabisLicense.class;
	}

	@Override
	public String getModelClassName() {
		return CannabisLicense.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CannabisLicense, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CannabisLicense, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisLicense, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CannabisLicense)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CannabisLicense, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CannabisLicense, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CannabisLicense)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CannabisLicense, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CannabisLicense, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CannabisLicense, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CannabisLicense, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CannabisLicense, Object>>();

			attributeGetterFunctions.put(
				"cannabisLicenseId", CannabisLicense::getCannabisLicenseId);
			attributeGetterFunctions.put(
				"groupId", CannabisLicense::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CannabisLicense::getCompanyId);
			attributeGetterFunctions.put("userId", CannabisLicense::getUserId);
			attributeGetterFunctions.put(
				"userName", CannabisLicense::getUserName);
			attributeGetterFunctions.put(
				"createDate", CannabisLicense::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CannabisLicense::getModifiedDate);
			attributeGetterFunctions.put(
				"entityNumber", CannabisLicense::getEntityNumber);
			attributeGetterFunctions.put(
				"entityName", CannabisLicense::getEntityName);
			attributeGetterFunctions.put(
				"categoryTier", CannabisLicense::getCategoryTier);
			attributeGetterFunctions.put(
				"numberOfTheExtension",
				CannabisLicense::getNumberOfTheExtension);
			attributeGetterFunctions.put(
				"ListOfConditions", CannabisLicense::getListOfConditions);
			attributeGetterFunctions.put(
				"payentAmtDue", CannabisLicense::getPayentAmtDue);
			attributeGetterFunctions.put(
				"issueDate", CannabisLicense::getIssueDate);
			attributeGetterFunctions.put(
				"expirationDate", CannabisLicense::getExpirationDate);
			attributeGetterFunctions.put(
				"cannabisApplicationId",
				CannabisLicense::getCannabisApplicationId);
			attributeGetterFunctions.put(
				"updatedBySource", CannabisLicense::getUpdatedBySource);
			attributeGetterFunctions.put(
				"nameOfBPMStep", CannabisLicense::getNameOfBPMStep);
			attributeGetterFunctions.put(
				"licenseConditionsFulfilled",
				CannabisLicense::getLicenseConditionsFulfilled);
			attributeGetterFunctions.put(
				"dateFulfilled", CannabisLicense::getDateFulfilled);
			attributeGetterFunctions.put(
				"feeOptionSelected", CannabisLicense::getFeeOptionSelected);
			attributeGetterFunctions.put(
				"feeAmount", CannabisLicense::getFeeAmount);
			attributeGetterFunctions.put(
				"feePaidDate", CannabisLicense::getFeePaidDate);
			attributeGetterFunctions.put(
				"bpmUserNameRole", CannabisLicense::getBpmUserNameRole);
			attributeGetterFunctions.put(
				"stageName", CannabisLicense::getStageName);
			attributeGetterFunctions.put("status", CannabisLicense::getStatus);
			attributeGetterFunctions.put("caseId", CannabisLicense::getCaseId);
			attributeGetterFunctions.put(
				"licenseNumber", CannabisLicense::getLicenseNumber);
			attributeGetterFunctions.put(
				"licenseFileId", CannabisLicense::getLicenseFileId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CannabisLicense, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CannabisLicense, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<CannabisLicense, ?>>();

			attributeSetterBiConsumers.put(
				"cannabisLicenseId",
				(BiConsumer<CannabisLicense, Long>)
					CannabisLicense::setCannabisLicenseId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CannabisLicense, Long>)CannabisLicense::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CannabisLicense, Long>)
					CannabisLicense::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CannabisLicense, Long>)CannabisLicense::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CannabisLicense, Date>)
					CannabisLicense::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CannabisLicense, Date>)
					CannabisLicense::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityNumber",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setEntityNumber);
			attributeSetterBiConsumers.put(
				"entityName",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setEntityName);
			attributeSetterBiConsumers.put(
				"categoryTier",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setCategoryTier);
			attributeSetterBiConsumers.put(
				"numberOfTheExtension",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setNumberOfTheExtension);
			attributeSetterBiConsumers.put(
				"ListOfConditions",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setListOfConditions);
			attributeSetterBiConsumers.put(
				"payentAmtDue",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setPayentAmtDue);
			attributeSetterBiConsumers.put(
				"issueDate",
				(BiConsumer<CannabisLicense, Date>)
					CannabisLicense::setIssueDate);
			attributeSetterBiConsumers.put(
				"expirationDate",
				(BiConsumer<CannabisLicense, Date>)
					CannabisLicense::setExpirationDate);
			attributeSetterBiConsumers.put(
				"cannabisApplicationId",
				(BiConsumer<CannabisLicense, Long>)
					CannabisLicense::setCannabisApplicationId);
			attributeSetterBiConsumers.put(
				"updatedBySource",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setUpdatedBySource);
			attributeSetterBiConsumers.put(
				"nameOfBPMStep",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setNameOfBPMStep);
			attributeSetterBiConsumers.put(
				"licenseConditionsFulfilled",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setLicenseConditionsFulfilled);
			attributeSetterBiConsumers.put(
				"dateFulfilled",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setDateFulfilled);
			attributeSetterBiConsumers.put(
				"feeOptionSelected",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setFeeOptionSelected);
			attributeSetterBiConsumers.put(
				"feeAmount",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setFeeAmount);
			attributeSetterBiConsumers.put(
				"feePaidDate",
				(BiConsumer<CannabisLicense, Date>)
					CannabisLicense::setFeePaidDate);
			attributeSetterBiConsumers.put(
				"bpmUserNameRole",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setBpmUserNameRole);
			attributeSetterBiConsumers.put(
				"stageName",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setStageName);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setStatus);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setCaseId);
			attributeSetterBiConsumers.put(
				"licenseNumber",
				(BiConsumer<CannabisLicense, String>)
					CannabisLicense::setLicenseNumber);
			attributeSetterBiConsumers.put(
				"licenseFileId",
				(BiConsumer<CannabisLicense, Long>)
					CannabisLicense::setLicenseFileId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCannabisLicenseId() {
		return _cannabisLicenseId;
	}

	@Override
	public void setCannabisLicenseId(long cannabisLicenseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisLicenseId = cannabisLicenseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityNumber() {
		if (_entityNumber == null) {
			return "";
		}
		else {
			return _entityNumber;
		}
	}

	@Override
	public void setEntityNumber(String entityNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityNumber = entityNumber;
	}

	@JSON
	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return "";
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityName = entityName;
	}

	@JSON
	@Override
	public String getCategoryTier() {
		if (_categoryTier == null) {
			return "";
		}
		else {
			return _categoryTier;
		}
	}

	@Override
	public void setCategoryTier(String categoryTier) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryTier = categoryTier;
	}

	@JSON
	@Override
	public String getNumberOfTheExtension() {
		if (_numberOfTheExtension == null) {
			return "";
		}
		else {
			return _numberOfTheExtension;
		}
	}

	@Override
	public void setNumberOfTheExtension(String numberOfTheExtension) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfTheExtension = numberOfTheExtension;
	}

	@JSON
	@Override
	public String getListOfConditions() {
		if (_ListOfConditions == null) {
			return "";
		}
		else {
			return _ListOfConditions;
		}
	}

	@Override
	public void setListOfConditions(String ListOfConditions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ListOfConditions = ListOfConditions;
	}

	@JSON
	@Override
	public String getPayentAmtDue() {
		if (_payentAmtDue == null) {
			return "";
		}
		else {
			return _payentAmtDue;
		}
	}

	@Override
	public void setPayentAmtDue(String payentAmtDue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_payentAmtDue = payentAmtDue;
	}

	@JSON
	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_issueDate = issueDate;
	}

	@JSON
	@Override
	public Date getExpirationDate() {
		return _expirationDate;
	}

	@Override
	public void setExpirationDate(Date expirationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expirationDate = expirationDate;
	}

	@JSON
	@Override
	public long getCannabisApplicationId() {
		return _cannabisApplicationId;
	}

	@Override
	public void setCannabisApplicationId(long cannabisApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cannabisApplicationId = cannabisApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCannabisApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
	}

	@JSON
	@Override
	public String getUpdatedBySource() {
		if (_updatedBySource == null) {
			return "";
		}
		else {
			return _updatedBySource;
		}
	}

	@Override
	public void setUpdatedBySource(String updatedBySource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedBySource = updatedBySource;
	}

	@JSON
	@Override
	public String getNameOfBPMStep() {
		if (_nameOfBPMStep == null) {
			return "";
		}
		else {
			return _nameOfBPMStep;
		}
	}

	@Override
	public void setNameOfBPMStep(String nameOfBPMStep) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfBPMStep = nameOfBPMStep;
	}

	@JSON
	@Override
	public String getLicenseConditionsFulfilled() {
		if (_licenseConditionsFulfilled == null) {
			return "";
		}
		else {
			return _licenseConditionsFulfilled;
		}
	}

	@Override
	public void setLicenseConditionsFulfilled(
		String licenseConditionsFulfilled) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseConditionsFulfilled = licenseConditionsFulfilled;
	}

	@JSON
	@Override
	public String getDateFulfilled() {
		if (_dateFulfilled == null) {
			return "";
		}
		else {
			return _dateFulfilled;
		}
	}

	@Override
	public void setDateFulfilled(String dateFulfilled) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateFulfilled = dateFulfilled;
	}

	@JSON
	@Override
	public String getFeeOptionSelected() {
		if (_feeOptionSelected == null) {
			return "";
		}
		else {
			return _feeOptionSelected;
		}
	}

	@Override
	public void setFeeOptionSelected(String feeOptionSelected) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feeOptionSelected = feeOptionSelected;
	}

	@JSON
	@Override
	public String getFeeAmount() {
		if (_feeAmount == null) {
			return "";
		}
		else {
			return _feeAmount;
		}
	}

	@Override
	public void setFeeAmount(String feeAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feeAmount = feeAmount;
	}

	@JSON
	@Override
	public Date getFeePaidDate() {
		return _feePaidDate;
	}

	@Override
	public void setFeePaidDate(Date feePaidDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feePaidDate = feePaidDate;
	}

	@JSON
	@Override
	public String getBpmUserNameRole() {
		if (_bpmUserNameRole == null) {
			return "";
		}
		else {
			return _bpmUserNameRole;
		}
	}

	@Override
	public void setBpmUserNameRole(String bpmUserNameRole) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bpmUserNameRole = bpmUserNameRole;
	}

	@JSON
	@Override
	public String getStageName() {
		if (_stageName == null) {
			return "";
		}
		else {
			return _stageName;
		}
	}

	@Override
	public void setStageName(String stageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageName = stageName;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getLicenseNumber() {
		if (_licenseNumber == null) {
			return "";
		}
		else {
			return _licenseNumber;
		}
	}

	@Override
	public void setLicenseNumber(String licenseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseNumber = licenseNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLicenseNumber() {
		return getColumnOriginalValue("licenseNumber");
	}

	@JSON
	@Override
	public long getLicenseFileId() {
		return _licenseFileId;
	}

	@Override
	public void setLicenseFileId(long licenseFileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseFileId = licenseFileId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CannabisLicense.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CannabisLicense toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CannabisLicense>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CannabisLicenseImpl cannabisLicenseImpl = new CannabisLicenseImpl();

		cannabisLicenseImpl.setCannabisLicenseId(getCannabisLicenseId());
		cannabisLicenseImpl.setGroupId(getGroupId());
		cannabisLicenseImpl.setCompanyId(getCompanyId());
		cannabisLicenseImpl.setUserId(getUserId());
		cannabisLicenseImpl.setUserName(getUserName());
		cannabisLicenseImpl.setCreateDate(getCreateDate());
		cannabisLicenseImpl.setModifiedDate(getModifiedDate());
		cannabisLicenseImpl.setEntityNumber(getEntityNumber());
		cannabisLicenseImpl.setEntityName(getEntityName());
		cannabisLicenseImpl.setCategoryTier(getCategoryTier());
		cannabisLicenseImpl.setNumberOfTheExtension(getNumberOfTheExtension());
		cannabisLicenseImpl.setListOfConditions(getListOfConditions());
		cannabisLicenseImpl.setPayentAmtDue(getPayentAmtDue());
		cannabisLicenseImpl.setIssueDate(getIssueDate());
		cannabisLicenseImpl.setExpirationDate(getExpirationDate());
		cannabisLicenseImpl.setCannabisApplicationId(
			getCannabisApplicationId());
		cannabisLicenseImpl.setUpdatedBySource(getUpdatedBySource());
		cannabisLicenseImpl.setNameOfBPMStep(getNameOfBPMStep());
		cannabisLicenseImpl.setLicenseConditionsFulfilled(
			getLicenseConditionsFulfilled());
		cannabisLicenseImpl.setDateFulfilled(getDateFulfilled());
		cannabisLicenseImpl.setFeeOptionSelected(getFeeOptionSelected());
		cannabisLicenseImpl.setFeeAmount(getFeeAmount());
		cannabisLicenseImpl.setFeePaidDate(getFeePaidDate());
		cannabisLicenseImpl.setBpmUserNameRole(getBpmUserNameRole());
		cannabisLicenseImpl.setStageName(getStageName());
		cannabisLicenseImpl.setStatus(getStatus());
		cannabisLicenseImpl.setCaseId(getCaseId());
		cannabisLicenseImpl.setLicenseNumber(getLicenseNumber());
		cannabisLicenseImpl.setLicenseFileId(getLicenseFileId());

		cannabisLicenseImpl.resetOriginalValues();

		return cannabisLicenseImpl;
	}

	@Override
	public CannabisLicense cloneWithOriginalValues() {
		CannabisLicenseImpl cannabisLicenseImpl = new CannabisLicenseImpl();

		cannabisLicenseImpl.setCannabisLicenseId(
			this.<Long>getColumnOriginalValue("cannabisLicenseId"));
		cannabisLicenseImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cannabisLicenseImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cannabisLicenseImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cannabisLicenseImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cannabisLicenseImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cannabisLicenseImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cannabisLicenseImpl.setEntityNumber(
			this.<String>getColumnOriginalValue("entityNumber"));
		cannabisLicenseImpl.setEntityName(
			this.<String>getColumnOriginalValue("entityName"));
		cannabisLicenseImpl.setCategoryTier(
			this.<String>getColumnOriginalValue("categoryTier"));
		cannabisLicenseImpl.setNumberOfTheExtension(
			this.<String>getColumnOriginalValue("numberOfTheExtension"));
		cannabisLicenseImpl.setListOfConditions(
			this.<String>getColumnOriginalValue("ListOfConditions"));
		cannabisLicenseImpl.setPayentAmtDue(
			this.<String>getColumnOriginalValue("payentAmtDue"));
		cannabisLicenseImpl.setIssueDate(
			this.<Date>getColumnOriginalValue("issueDate"));
		cannabisLicenseImpl.setExpirationDate(
			this.<Date>getColumnOriginalValue("expirationDate"));
		cannabisLicenseImpl.setCannabisApplicationId(
			this.<Long>getColumnOriginalValue("cannabisApplicationId"));
		cannabisLicenseImpl.setUpdatedBySource(
			this.<String>getColumnOriginalValue("updatedBySource"));
		cannabisLicenseImpl.setNameOfBPMStep(
			this.<String>getColumnOriginalValue("nameOfBPMStep"));
		cannabisLicenseImpl.setLicenseConditionsFulfilled(
			this.<String>getColumnOriginalValue("licenseConditionsFulfilled"));
		cannabisLicenseImpl.setDateFulfilled(
			this.<String>getColumnOriginalValue("dateFulfilled"));
		cannabisLicenseImpl.setFeeOptionSelected(
			this.<String>getColumnOriginalValue("feeOptionSelected"));
		cannabisLicenseImpl.setFeeAmount(
			this.<String>getColumnOriginalValue("feeAmount"));
		cannabisLicenseImpl.setFeePaidDate(
			this.<Date>getColumnOriginalValue("feePaidDate"));
		cannabisLicenseImpl.setBpmUserNameRole(
			this.<String>getColumnOriginalValue("bpmUserNameRole"));
		cannabisLicenseImpl.setStageName(
			this.<String>getColumnOriginalValue("stageName"));
		cannabisLicenseImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		cannabisLicenseImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		cannabisLicenseImpl.setLicenseNumber(
			this.<String>getColumnOriginalValue("licenseNumber"));
		cannabisLicenseImpl.setLicenseFileId(
			this.<Long>getColumnOriginalValue("licenseFileId"));

		return cannabisLicenseImpl;
	}

	@Override
	public int compareTo(CannabisLicense cannabisLicense) {
		long primaryKey = cannabisLicense.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CannabisLicense)) {
			return false;
		}

		CannabisLicense cannabisLicense = (CannabisLicense)object;

		long primaryKey = cannabisLicense.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CannabisLicense> toCacheModel() {
		CannabisLicenseCacheModel cannabisLicenseCacheModel =
			new CannabisLicenseCacheModel();

		cannabisLicenseCacheModel.cannabisLicenseId = getCannabisLicenseId();

		cannabisLicenseCacheModel.groupId = getGroupId();

		cannabisLicenseCacheModel.companyId = getCompanyId();

		cannabisLicenseCacheModel.userId = getUserId();

		cannabisLicenseCacheModel.userName = getUserName();

		String userName = cannabisLicenseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cannabisLicenseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cannabisLicenseCacheModel.createDate = createDate.getTime();
		}
		else {
			cannabisLicenseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cannabisLicenseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cannabisLicenseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cannabisLicenseCacheModel.entityNumber = getEntityNumber();

		String entityNumber = cannabisLicenseCacheModel.entityNumber;

		if ((entityNumber != null) && (entityNumber.length() == 0)) {
			cannabisLicenseCacheModel.entityNumber = null;
		}

		cannabisLicenseCacheModel.entityName = getEntityName();

		String entityName = cannabisLicenseCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			cannabisLicenseCacheModel.entityName = null;
		}

		cannabisLicenseCacheModel.categoryTier = getCategoryTier();

		String categoryTier = cannabisLicenseCacheModel.categoryTier;

		if ((categoryTier != null) && (categoryTier.length() == 0)) {
			cannabisLicenseCacheModel.categoryTier = null;
		}

		cannabisLicenseCacheModel.numberOfTheExtension =
			getNumberOfTheExtension();

		String numberOfTheExtension =
			cannabisLicenseCacheModel.numberOfTheExtension;

		if ((numberOfTheExtension != null) &&
			(numberOfTheExtension.length() == 0)) {

			cannabisLicenseCacheModel.numberOfTheExtension = null;
		}

		cannabisLicenseCacheModel.ListOfConditions = getListOfConditions();

		String ListOfConditions = cannabisLicenseCacheModel.ListOfConditions;

		if ((ListOfConditions != null) && (ListOfConditions.length() == 0)) {
			cannabisLicenseCacheModel.ListOfConditions = null;
		}

		cannabisLicenseCacheModel.payentAmtDue = getPayentAmtDue();

		String payentAmtDue = cannabisLicenseCacheModel.payentAmtDue;

		if ((payentAmtDue != null) && (payentAmtDue.length() == 0)) {
			cannabisLicenseCacheModel.payentAmtDue = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			cannabisLicenseCacheModel.issueDate = issueDate.getTime();
		}
		else {
			cannabisLicenseCacheModel.issueDate = Long.MIN_VALUE;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			cannabisLicenseCacheModel.expirationDate = expirationDate.getTime();
		}
		else {
			cannabisLicenseCacheModel.expirationDate = Long.MIN_VALUE;
		}

		cannabisLicenseCacheModel.cannabisApplicationId =
			getCannabisApplicationId();

		cannabisLicenseCacheModel.updatedBySource = getUpdatedBySource();

		String updatedBySource = cannabisLicenseCacheModel.updatedBySource;

		if ((updatedBySource != null) && (updatedBySource.length() == 0)) {
			cannabisLicenseCacheModel.updatedBySource = null;
		}

		cannabisLicenseCacheModel.nameOfBPMStep = getNameOfBPMStep();

		String nameOfBPMStep = cannabisLicenseCacheModel.nameOfBPMStep;

		if ((nameOfBPMStep != null) && (nameOfBPMStep.length() == 0)) {
			cannabisLicenseCacheModel.nameOfBPMStep = null;
		}

		cannabisLicenseCacheModel.licenseConditionsFulfilled =
			getLicenseConditionsFulfilled();

		String licenseConditionsFulfilled =
			cannabisLicenseCacheModel.licenseConditionsFulfilled;

		if ((licenseConditionsFulfilled != null) &&
			(licenseConditionsFulfilled.length() == 0)) {

			cannabisLicenseCacheModel.licenseConditionsFulfilled = null;
		}

		cannabisLicenseCacheModel.dateFulfilled = getDateFulfilled();

		String dateFulfilled = cannabisLicenseCacheModel.dateFulfilled;

		if ((dateFulfilled != null) && (dateFulfilled.length() == 0)) {
			cannabisLicenseCacheModel.dateFulfilled = null;
		}

		cannabisLicenseCacheModel.feeOptionSelected = getFeeOptionSelected();

		String feeOptionSelected = cannabisLicenseCacheModel.feeOptionSelected;

		if ((feeOptionSelected != null) && (feeOptionSelected.length() == 0)) {
			cannabisLicenseCacheModel.feeOptionSelected = null;
		}

		cannabisLicenseCacheModel.feeAmount = getFeeAmount();

		String feeAmount = cannabisLicenseCacheModel.feeAmount;

		if ((feeAmount != null) && (feeAmount.length() == 0)) {
			cannabisLicenseCacheModel.feeAmount = null;
		}

		Date feePaidDate = getFeePaidDate();

		if (feePaidDate != null) {
			cannabisLicenseCacheModel.feePaidDate = feePaidDate.getTime();
		}
		else {
			cannabisLicenseCacheModel.feePaidDate = Long.MIN_VALUE;
		}

		cannabisLicenseCacheModel.bpmUserNameRole = getBpmUserNameRole();

		String bpmUserNameRole = cannabisLicenseCacheModel.bpmUserNameRole;

		if ((bpmUserNameRole != null) && (bpmUserNameRole.length() == 0)) {
			cannabisLicenseCacheModel.bpmUserNameRole = null;
		}

		cannabisLicenseCacheModel.stageName = getStageName();

		String stageName = cannabisLicenseCacheModel.stageName;

		if ((stageName != null) && (stageName.length() == 0)) {
			cannabisLicenseCacheModel.stageName = null;
		}

		cannabisLicenseCacheModel.status = getStatus();

		String status = cannabisLicenseCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			cannabisLicenseCacheModel.status = null;
		}

		cannabisLicenseCacheModel.caseId = getCaseId();

		String caseId = cannabisLicenseCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			cannabisLicenseCacheModel.caseId = null;
		}

		cannabisLicenseCacheModel.licenseNumber = getLicenseNumber();

		String licenseNumber = cannabisLicenseCacheModel.licenseNumber;

		if ((licenseNumber != null) && (licenseNumber.length() == 0)) {
			cannabisLicenseCacheModel.licenseNumber = null;
		}

		cannabisLicenseCacheModel.licenseFileId = getLicenseFileId();

		return cannabisLicenseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CannabisLicense, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CannabisLicense, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CannabisLicense, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CannabisLicense)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CannabisLicense>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CannabisLicense.class, ModelWrapper.class);

	}

	private long _cannabisLicenseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityNumber;
	private String _entityName;
	private String _categoryTier;
	private String _numberOfTheExtension;
	private String _ListOfConditions;
	private String _payentAmtDue;
	private Date _issueDate;
	private Date _expirationDate;
	private long _cannabisApplicationId;
	private String _updatedBySource;
	private String _nameOfBPMStep;
	private String _licenseConditionsFulfilled;
	private String _dateFulfilled;
	private String _feeOptionSelected;
	private String _feeAmount;
	private Date _feePaidDate;
	private String _bpmUserNameRole;
	private String _stageName;
	private String _status;
	private String _caseId;
	private String _licenseNumber;
	private long _licenseFileId;

	public <T> T getColumnValue(String columnName) {
		Function<CannabisLicense, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CannabisLicense)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("cannabisLicenseId", _cannabisLicenseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityNumber", _entityNumber);
		_columnOriginalValues.put("entityName", _entityName);
		_columnOriginalValues.put("categoryTier", _categoryTier);
		_columnOriginalValues.put(
			"numberOfTheExtension", _numberOfTheExtension);
		_columnOriginalValues.put("ListOfConditions", _ListOfConditions);
		_columnOriginalValues.put("payentAmtDue", _payentAmtDue);
		_columnOriginalValues.put("issueDate", _issueDate);
		_columnOriginalValues.put("expirationDate", _expirationDate);
		_columnOriginalValues.put(
			"cannabisApplicationId", _cannabisApplicationId);
		_columnOriginalValues.put("updatedBySource", _updatedBySource);
		_columnOriginalValues.put("nameOfBPMStep", _nameOfBPMStep);
		_columnOriginalValues.put(
			"licenseConditionsFulfilled", _licenseConditionsFulfilled);
		_columnOriginalValues.put("dateFulfilled", _dateFulfilled);
		_columnOriginalValues.put("feeOptionSelected", _feeOptionSelected);
		_columnOriginalValues.put("feeAmount", _feeAmount);
		_columnOriginalValues.put("feePaidDate", _feePaidDate);
		_columnOriginalValues.put("bpmUserNameRole", _bpmUserNameRole);
		_columnOriginalValues.put("stageName", _stageName);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("licenseNumber", _licenseNumber);
		_columnOriginalValues.put("licenseFileId", _licenseFileId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("cannabisLicenseId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("entityNumber", 128L);

		columnBitmasks.put("entityName", 256L);

		columnBitmasks.put("categoryTier", 512L);

		columnBitmasks.put("numberOfTheExtension", 1024L);

		columnBitmasks.put("ListOfConditions", 2048L);

		columnBitmasks.put("payentAmtDue", 4096L);

		columnBitmasks.put("issueDate", 8192L);

		columnBitmasks.put("expirationDate", 16384L);

		columnBitmasks.put("cannabisApplicationId", 32768L);

		columnBitmasks.put("updatedBySource", 65536L);

		columnBitmasks.put("nameOfBPMStep", 131072L);

		columnBitmasks.put("licenseConditionsFulfilled", 262144L);

		columnBitmasks.put("dateFulfilled", 524288L);

		columnBitmasks.put("feeOptionSelected", 1048576L);

		columnBitmasks.put("feeAmount", 2097152L);

		columnBitmasks.put("feePaidDate", 4194304L);

		columnBitmasks.put("bpmUserNameRole", 8388608L);

		columnBitmasks.put("stageName", 16777216L);

		columnBitmasks.put("status", 33554432L);

		columnBitmasks.put("caseId", 67108864L);

		columnBitmasks.put("licenseNumber", 134217728L);

		columnBitmasks.put("licenseFileId", 268435456L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CannabisLicense _escapedModel;

}