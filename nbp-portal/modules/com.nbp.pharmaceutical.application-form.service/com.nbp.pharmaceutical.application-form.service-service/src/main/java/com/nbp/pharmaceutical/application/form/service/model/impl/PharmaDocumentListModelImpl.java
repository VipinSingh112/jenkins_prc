/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.pharmaceutical.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.pharmaceutical.application.form.service.model.PharmaDocumentList;
import com.nbp.pharmaceutical.application.form.service.model.PharmaDocumentListModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PharmaDocumentList service. Represents a row in the &quot;nbp_pharma_doc_list&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PharmaDocumentListModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PharmaDocumentListImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PharmaDocumentListImpl
 * @generated
 */
@JSON(strict = true)
public class PharmaDocumentListModelImpl
	extends BaseModelImpl<PharmaDocumentList>
	implements PharmaDocumentListModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pharma document list model instance should use the <code>PharmaDocumentList</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_pharma_doc_list";

	public static final Object[][] TABLE_COLUMNS = {
		{"pharmaDocListId", Types.BIGINT}, {"pharmaAppType", Types.VARCHAR},
		{"pharmaDocList", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pharmaDocListId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pharmaAppType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaDocList", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_pharma_doc_list (pharmaDocListId LONG not null primary key,pharmaAppType VARCHAR(75) null,pharmaDocList VARCHAR(500) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_pharma_doc_list";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pharmaDocumentList.pharmaDocListId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_pharma_doc_list.pharmaDocListId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHARMAAPPTYPE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHARMADOCLISTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PharmaDocumentListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pharmaDocListId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPharmaDocListId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pharmaDocListId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PharmaDocumentList.class;
	}

	@Override
	public String getModelClassName() {
		return PharmaDocumentList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PharmaDocumentList, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PharmaDocumentList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaDocumentList, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PharmaDocumentList)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PharmaDocumentList, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PharmaDocumentList, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PharmaDocumentList)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PharmaDocumentList, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PharmaDocumentList, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<PharmaDocumentList, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<PharmaDocumentList, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<PharmaDocumentList, Object>>();

			attributeGetterFunctions.put(
				"pharmaDocListId", PharmaDocumentList::getPharmaDocListId);
			attributeGetterFunctions.put(
				"pharmaAppType", PharmaDocumentList::getPharmaAppType);
			attributeGetterFunctions.put(
				"pharmaDocList", PharmaDocumentList::getPharmaDocList);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<PharmaDocumentList, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PharmaDocumentList, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<PharmaDocumentList, ?>>();

			attributeSetterBiConsumers.put(
				"pharmaDocListId",
				(BiConsumer<PharmaDocumentList, Long>)
					PharmaDocumentList::setPharmaDocListId);
			attributeSetterBiConsumers.put(
				"pharmaAppType",
				(BiConsumer<PharmaDocumentList, String>)
					PharmaDocumentList::setPharmaAppType);
			attributeSetterBiConsumers.put(
				"pharmaDocList",
				(BiConsumer<PharmaDocumentList, String>)
					PharmaDocumentList::setPharmaDocList);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getPharmaDocListId() {
		return _pharmaDocListId;
	}

	@Override
	public void setPharmaDocListId(long pharmaDocListId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaDocListId = pharmaDocListId;
	}

	@JSON
	@Override
	public String getPharmaAppType() {
		if (_pharmaAppType == null) {
			return "";
		}
		else {
			return _pharmaAppType;
		}
	}

	@Override
	public void setPharmaAppType(String pharmaAppType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaAppType = pharmaAppType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPharmaAppType() {
		return getColumnOriginalValue("pharmaAppType");
	}

	@JSON
	@Override
	public String getPharmaDocList() {
		if (_pharmaDocList == null) {
			return "";
		}
		else {
			return _pharmaDocList;
		}
	}

	@Override
	public void setPharmaDocList(String pharmaDocList) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaDocList = pharmaDocList;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PharmaDocumentList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PharmaDocumentList toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PharmaDocumentList>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PharmaDocumentListImpl pharmaDocumentListImpl =
			new PharmaDocumentListImpl();

		pharmaDocumentListImpl.setPharmaDocListId(getPharmaDocListId());
		pharmaDocumentListImpl.setPharmaAppType(getPharmaAppType());
		pharmaDocumentListImpl.setPharmaDocList(getPharmaDocList());

		pharmaDocumentListImpl.resetOriginalValues();

		return pharmaDocumentListImpl;
	}

	@Override
	public PharmaDocumentList cloneWithOriginalValues() {
		PharmaDocumentListImpl pharmaDocumentListImpl =
			new PharmaDocumentListImpl();

		pharmaDocumentListImpl.setPharmaDocListId(
			this.<Long>getColumnOriginalValue("pharmaDocListId"));
		pharmaDocumentListImpl.setPharmaAppType(
			this.<String>getColumnOriginalValue("pharmaAppType"));
		pharmaDocumentListImpl.setPharmaDocList(
			this.<String>getColumnOriginalValue("pharmaDocList"));

		return pharmaDocumentListImpl;
	}

	@Override
	public int compareTo(PharmaDocumentList pharmaDocumentList) {
		long primaryKey = pharmaDocumentList.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PharmaDocumentList)) {
			return false;
		}

		PharmaDocumentList pharmaDocumentList = (PharmaDocumentList)object;

		long primaryKey = pharmaDocumentList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PharmaDocumentList> toCacheModel() {
		PharmaDocumentListCacheModel pharmaDocumentListCacheModel =
			new PharmaDocumentListCacheModel();

		pharmaDocumentListCacheModel.pharmaDocListId = getPharmaDocListId();

		pharmaDocumentListCacheModel.pharmaAppType = getPharmaAppType();

		String pharmaAppType = pharmaDocumentListCacheModel.pharmaAppType;

		if ((pharmaAppType != null) && (pharmaAppType.length() == 0)) {
			pharmaDocumentListCacheModel.pharmaAppType = null;
		}

		pharmaDocumentListCacheModel.pharmaDocList = getPharmaDocList();

		String pharmaDocList = pharmaDocumentListCacheModel.pharmaDocList;

		if ((pharmaDocList != null) && (pharmaDocList.length() == 0)) {
			pharmaDocumentListCacheModel.pharmaDocList = null;
		}

		return pharmaDocumentListCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PharmaDocumentList, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PharmaDocumentList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaDocumentList, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PharmaDocumentList)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PharmaDocumentList>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PharmaDocumentList.class, ModelWrapper.class);

	}

	private long _pharmaDocListId;
	private String _pharmaAppType;
	private String _pharmaDocList;

	public <T> T getColumnValue(String columnName) {
		Function<PharmaDocumentList, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PharmaDocumentList)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("pharmaDocListId", _pharmaDocListId);
		_columnOriginalValues.put("pharmaAppType", _pharmaAppType);
		_columnOriginalValues.put("pharmaDocList", _pharmaDocList);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("pharmaDocListId", 1L);

		columnBitmasks.put("pharmaAppType", 2L);

		columnBitmasks.put("pharmaDocList", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PharmaDocumentList _escapedModel;

}