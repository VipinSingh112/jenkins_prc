/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.pharmaceutical.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.pharmaceutical.application.form.service.model.PharmaMedicalDeviceInfo;
import com.nbp.pharmaceutical.application.form.service.model.PharmaMedicalDeviceInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PharmaMedicalDeviceInfo service. Represents a row in the &quot;nbp_pharma_medical_device&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PharmaMedicalDeviceInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PharmaMedicalDeviceInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PharmaMedicalDeviceInfoImpl
 * @generated
 */
@JSON(strict = true)
public class PharmaMedicalDeviceInfoModelImpl
	extends BaseModelImpl<PharmaMedicalDeviceInfo>
	implements PharmaMedicalDeviceInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pharma medical device info model instance should use the <code>PharmaMedicalDeviceInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_pharma_medical_device";

	public static final Object[][] TABLE_COLUMNS = {
		{"pharmaMedicalDeviceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"pharmaDeviceName", Types.VARCHAR},
		{"pharmaDeviceDeisgnation", Types.VARCHAR},
		{"pharmaManufacturerName", Types.VARCHAR},
		{"pharmaManufacturerAddress", Types.VARCHAR},
		{"pharmaMedicalApplicantName", Types.VARCHAR},
		{"pharmaMedicalApplicantAddress", Types.VARCHAR},
		{"pharmaRepresentativeName", Types.VARCHAR},
		{"pharmaRepresentativeAddress", Types.VARCHAR},
		{"pharmaApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pharmaMedicalDeviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pharmaDeviceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaDeviceDeisgnation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaManufacturerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaManufacturerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaMedicalApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaMedicalApplicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaRepresentativeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaRepresentativeAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_pharma_medical_device (pharmaMedicalDeviceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,pharmaDeviceName VARCHAR(200) null,pharmaDeviceDeisgnation VARCHAR(75) null,pharmaManufacturerName VARCHAR(200) null,pharmaManufacturerAddress VARCHAR(500) null,pharmaMedicalApplicantName VARCHAR(200) null,pharmaMedicalApplicantAddress VARCHAR(500) null,pharmaRepresentativeName VARCHAR(200) null,pharmaRepresentativeAddress VARCHAR(500) null,pharmaApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_pharma_medical_device";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pharmaMedicalDeviceInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_pharma_medical_device.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHARMAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PharmaMedicalDeviceInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pharmaMedicalDeviceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPharmaMedicalDeviceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pharmaMedicalDeviceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PharmaMedicalDeviceInfo.class;
	}

	@Override
	public String getModelClassName() {
		return PharmaMedicalDeviceInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PharmaMedicalDeviceInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PharmaMedicalDeviceInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaMedicalDeviceInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PharmaMedicalDeviceInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PharmaMedicalDeviceInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PharmaMedicalDeviceInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PharmaMedicalDeviceInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PharmaMedicalDeviceInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PharmaMedicalDeviceInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<PharmaMedicalDeviceInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<PharmaMedicalDeviceInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<PharmaMedicalDeviceInfo, Object>>();

			attributeGetterFunctions.put(
				"pharmaMedicalDeviceId",
				PharmaMedicalDeviceInfo::getPharmaMedicalDeviceId);
			attributeGetterFunctions.put(
				"groupId", PharmaMedicalDeviceInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", PharmaMedicalDeviceInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", PharmaMedicalDeviceInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", PharmaMedicalDeviceInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", PharmaMedicalDeviceInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", PharmaMedicalDeviceInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"pharmaDeviceName",
				PharmaMedicalDeviceInfo::getPharmaDeviceName);
			attributeGetterFunctions.put(
				"pharmaDeviceDeisgnation",
				PharmaMedicalDeviceInfo::getPharmaDeviceDeisgnation);
			attributeGetterFunctions.put(
				"pharmaManufacturerName",
				PharmaMedicalDeviceInfo::getPharmaManufacturerName);
			attributeGetterFunctions.put(
				"pharmaManufacturerAddress",
				PharmaMedicalDeviceInfo::getPharmaManufacturerAddress);
			attributeGetterFunctions.put(
				"pharmaMedicalApplicantName",
				PharmaMedicalDeviceInfo::getPharmaMedicalApplicantName);
			attributeGetterFunctions.put(
				"pharmaMedicalApplicantAddress",
				PharmaMedicalDeviceInfo::getPharmaMedicalApplicantAddress);
			attributeGetterFunctions.put(
				"pharmaRepresentativeName",
				PharmaMedicalDeviceInfo::getPharmaRepresentativeName);
			attributeGetterFunctions.put(
				"pharmaRepresentativeAddress",
				PharmaMedicalDeviceInfo::getPharmaRepresentativeAddress);
			attributeGetterFunctions.put(
				"pharmaApplicationId",
				PharmaMedicalDeviceInfo::getPharmaApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<PharmaMedicalDeviceInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PharmaMedicalDeviceInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<PharmaMedicalDeviceInfo, ?>>();

			attributeSetterBiConsumers.put(
				"pharmaMedicalDeviceId",
				(BiConsumer<PharmaMedicalDeviceInfo, Long>)
					PharmaMedicalDeviceInfo::setPharmaMedicalDeviceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<PharmaMedicalDeviceInfo, Long>)
					PharmaMedicalDeviceInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<PharmaMedicalDeviceInfo, Long>)
					PharmaMedicalDeviceInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<PharmaMedicalDeviceInfo, Long>)
					PharmaMedicalDeviceInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<PharmaMedicalDeviceInfo, Date>)
					PharmaMedicalDeviceInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<PharmaMedicalDeviceInfo, Date>)
					PharmaMedicalDeviceInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"pharmaDeviceName",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setPharmaDeviceName);
			attributeSetterBiConsumers.put(
				"pharmaDeviceDeisgnation",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setPharmaDeviceDeisgnation);
			attributeSetterBiConsumers.put(
				"pharmaManufacturerName",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setPharmaManufacturerName);
			attributeSetterBiConsumers.put(
				"pharmaManufacturerAddress",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setPharmaManufacturerAddress);
			attributeSetterBiConsumers.put(
				"pharmaMedicalApplicantName",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setPharmaMedicalApplicantName);
			attributeSetterBiConsumers.put(
				"pharmaMedicalApplicantAddress",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setPharmaMedicalApplicantAddress);
			attributeSetterBiConsumers.put(
				"pharmaRepresentativeName",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setPharmaRepresentativeName);
			attributeSetterBiConsumers.put(
				"pharmaRepresentativeAddress",
				(BiConsumer<PharmaMedicalDeviceInfo, String>)
					PharmaMedicalDeviceInfo::setPharmaRepresentativeAddress);
			attributeSetterBiConsumers.put(
				"pharmaApplicationId",
				(BiConsumer<PharmaMedicalDeviceInfo, Long>)
					PharmaMedicalDeviceInfo::setPharmaApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getPharmaMedicalDeviceId() {
		return _pharmaMedicalDeviceId;
	}

	@Override
	public void setPharmaMedicalDeviceId(long pharmaMedicalDeviceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaMedicalDeviceId = pharmaMedicalDeviceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPharmaDeviceName() {
		if (_pharmaDeviceName == null) {
			return "";
		}
		else {
			return _pharmaDeviceName;
		}
	}

	@Override
	public void setPharmaDeviceName(String pharmaDeviceName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaDeviceName = pharmaDeviceName;
	}

	@JSON
	@Override
	public String getPharmaDeviceDeisgnation() {
		if (_pharmaDeviceDeisgnation == null) {
			return "";
		}
		else {
			return _pharmaDeviceDeisgnation;
		}
	}

	@Override
	public void setPharmaDeviceDeisgnation(String pharmaDeviceDeisgnation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaDeviceDeisgnation = pharmaDeviceDeisgnation;
	}

	@JSON
	@Override
	public String getPharmaManufacturerName() {
		if (_pharmaManufacturerName == null) {
			return "";
		}
		else {
			return _pharmaManufacturerName;
		}
	}

	@Override
	public void setPharmaManufacturerName(String pharmaManufacturerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaManufacturerName = pharmaManufacturerName;
	}

	@JSON
	@Override
	public String getPharmaManufacturerAddress() {
		if (_pharmaManufacturerAddress == null) {
			return "";
		}
		else {
			return _pharmaManufacturerAddress;
		}
	}

	@Override
	public void setPharmaManufacturerAddress(String pharmaManufacturerAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaManufacturerAddress = pharmaManufacturerAddress;
	}

	@JSON
	@Override
	public String getPharmaMedicalApplicantName() {
		if (_pharmaMedicalApplicantName == null) {
			return "";
		}
		else {
			return _pharmaMedicalApplicantName;
		}
	}

	@Override
	public void setPharmaMedicalApplicantName(
		String pharmaMedicalApplicantName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaMedicalApplicantName = pharmaMedicalApplicantName;
	}

	@JSON
	@Override
	public String getPharmaMedicalApplicantAddress() {
		if (_pharmaMedicalApplicantAddress == null) {
			return "";
		}
		else {
			return _pharmaMedicalApplicantAddress;
		}
	}

	@Override
	public void setPharmaMedicalApplicantAddress(
		String pharmaMedicalApplicantAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaMedicalApplicantAddress = pharmaMedicalApplicantAddress;
	}

	@JSON
	@Override
	public String getPharmaRepresentativeName() {
		if (_pharmaRepresentativeName == null) {
			return "";
		}
		else {
			return _pharmaRepresentativeName;
		}
	}

	@Override
	public void setPharmaRepresentativeName(String pharmaRepresentativeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaRepresentativeName = pharmaRepresentativeName;
	}

	@JSON
	@Override
	public String getPharmaRepresentativeAddress() {
		if (_pharmaRepresentativeAddress == null) {
			return "";
		}
		else {
			return _pharmaRepresentativeAddress;
		}
	}

	@Override
	public void setPharmaRepresentativeAddress(
		String pharmaRepresentativeAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaRepresentativeAddress = pharmaRepresentativeAddress;
	}

	@JSON
	@Override
	public long getPharmaApplicationId() {
		return _pharmaApplicationId;
	}

	@Override
	public void setPharmaApplicationId(long pharmaApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaApplicationId = pharmaApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPharmaApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("pharmaApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PharmaMedicalDeviceInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PharmaMedicalDeviceInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PharmaMedicalDeviceInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PharmaMedicalDeviceInfoImpl pharmaMedicalDeviceInfoImpl =
			new PharmaMedicalDeviceInfoImpl();

		pharmaMedicalDeviceInfoImpl.setPharmaMedicalDeviceId(
			getPharmaMedicalDeviceId());
		pharmaMedicalDeviceInfoImpl.setGroupId(getGroupId());
		pharmaMedicalDeviceInfoImpl.setCompanyId(getCompanyId());
		pharmaMedicalDeviceInfoImpl.setUserId(getUserId());
		pharmaMedicalDeviceInfoImpl.setUserName(getUserName());
		pharmaMedicalDeviceInfoImpl.setCreateDate(getCreateDate());
		pharmaMedicalDeviceInfoImpl.setModifiedDate(getModifiedDate());
		pharmaMedicalDeviceInfoImpl.setPharmaDeviceName(getPharmaDeviceName());
		pharmaMedicalDeviceInfoImpl.setPharmaDeviceDeisgnation(
			getPharmaDeviceDeisgnation());
		pharmaMedicalDeviceInfoImpl.setPharmaManufacturerName(
			getPharmaManufacturerName());
		pharmaMedicalDeviceInfoImpl.setPharmaManufacturerAddress(
			getPharmaManufacturerAddress());
		pharmaMedicalDeviceInfoImpl.setPharmaMedicalApplicantName(
			getPharmaMedicalApplicantName());
		pharmaMedicalDeviceInfoImpl.setPharmaMedicalApplicantAddress(
			getPharmaMedicalApplicantAddress());
		pharmaMedicalDeviceInfoImpl.setPharmaRepresentativeName(
			getPharmaRepresentativeName());
		pharmaMedicalDeviceInfoImpl.setPharmaRepresentativeAddress(
			getPharmaRepresentativeAddress());
		pharmaMedicalDeviceInfoImpl.setPharmaApplicationId(
			getPharmaApplicationId());

		pharmaMedicalDeviceInfoImpl.resetOriginalValues();

		return pharmaMedicalDeviceInfoImpl;
	}

	@Override
	public PharmaMedicalDeviceInfo cloneWithOriginalValues() {
		PharmaMedicalDeviceInfoImpl pharmaMedicalDeviceInfoImpl =
			new PharmaMedicalDeviceInfoImpl();

		pharmaMedicalDeviceInfoImpl.setPharmaMedicalDeviceId(
			this.<Long>getColumnOriginalValue("pharmaMedicalDeviceId"));
		pharmaMedicalDeviceInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		pharmaMedicalDeviceInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		pharmaMedicalDeviceInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		pharmaMedicalDeviceInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		pharmaMedicalDeviceInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		pharmaMedicalDeviceInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		pharmaMedicalDeviceInfoImpl.setPharmaDeviceName(
			this.<String>getColumnOriginalValue("pharmaDeviceName"));
		pharmaMedicalDeviceInfoImpl.setPharmaDeviceDeisgnation(
			this.<String>getColumnOriginalValue("pharmaDeviceDeisgnation"));
		pharmaMedicalDeviceInfoImpl.setPharmaManufacturerName(
			this.<String>getColumnOriginalValue("pharmaManufacturerName"));
		pharmaMedicalDeviceInfoImpl.setPharmaManufacturerAddress(
			this.<String>getColumnOriginalValue("pharmaManufacturerAddress"));
		pharmaMedicalDeviceInfoImpl.setPharmaMedicalApplicantName(
			this.<String>getColumnOriginalValue("pharmaMedicalApplicantName"));
		pharmaMedicalDeviceInfoImpl.setPharmaMedicalApplicantAddress(
			this.<String>getColumnOriginalValue(
				"pharmaMedicalApplicantAddress"));
		pharmaMedicalDeviceInfoImpl.setPharmaRepresentativeName(
			this.<String>getColumnOriginalValue("pharmaRepresentativeName"));
		pharmaMedicalDeviceInfoImpl.setPharmaRepresentativeAddress(
			this.<String>getColumnOriginalValue("pharmaRepresentativeAddress"));
		pharmaMedicalDeviceInfoImpl.setPharmaApplicationId(
			this.<Long>getColumnOriginalValue("pharmaApplicationId"));

		return pharmaMedicalDeviceInfoImpl;
	}

	@Override
	public int compareTo(PharmaMedicalDeviceInfo pharmaMedicalDeviceInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), pharmaMedicalDeviceInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PharmaMedicalDeviceInfo)) {
			return false;
		}

		PharmaMedicalDeviceInfo pharmaMedicalDeviceInfo =
			(PharmaMedicalDeviceInfo)object;

		long primaryKey = pharmaMedicalDeviceInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PharmaMedicalDeviceInfo> toCacheModel() {
		PharmaMedicalDeviceInfoCacheModel pharmaMedicalDeviceInfoCacheModel =
			new PharmaMedicalDeviceInfoCacheModel();

		pharmaMedicalDeviceInfoCacheModel.pharmaMedicalDeviceId =
			getPharmaMedicalDeviceId();

		pharmaMedicalDeviceInfoCacheModel.groupId = getGroupId();

		pharmaMedicalDeviceInfoCacheModel.companyId = getCompanyId();

		pharmaMedicalDeviceInfoCacheModel.userId = getUserId();

		pharmaMedicalDeviceInfoCacheModel.userName = getUserName();

		String userName = pharmaMedicalDeviceInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			pharmaMedicalDeviceInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pharmaMedicalDeviceInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			pharmaMedicalDeviceInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pharmaMedicalDeviceInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			pharmaMedicalDeviceInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaDeviceName =
			getPharmaDeviceName();

		String pharmaDeviceName =
			pharmaMedicalDeviceInfoCacheModel.pharmaDeviceName;

		if ((pharmaDeviceName != null) && (pharmaDeviceName.length() == 0)) {
			pharmaMedicalDeviceInfoCacheModel.pharmaDeviceName = null;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaDeviceDeisgnation =
			getPharmaDeviceDeisgnation();

		String pharmaDeviceDeisgnation =
			pharmaMedicalDeviceInfoCacheModel.pharmaDeviceDeisgnation;

		if ((pharmaDeviceDeisgnation != null) &&
			(pharmaDeviceDeisgnation.length() == 0)) {

			pharmaMedicalDeviceInfoCacheModel.pharmaDeviceDeisgnation = null;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaManufacturerName =
			getPharmaManufacturerName();

		String pharmaManufacturerName =
			pharmaMedicalDeviceInfoCacheModel.pharmaManufacturerName;

		if ((pharmaManufacturerName != null) &&
			(pharmaManufacturerName.length() == 0)) {

			pharmaMedicalDeviceInfoCacheModel.pharmaManufacturerName = null;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaManufacturerAddress =
			getPharmaManufacturerAddress();

		String pharmaManufacturerAddress =
			pharmaMedicalDeviceInfoCacheModel.pharmaManufacturerAddress;

		if ((pharmaManufacturerAddress != null) &&
			(pharmaManufacturerAddress.length() == 0)) {

			pharmaMedicalDeviceInfoCacheModel.pharmaManufacturerAddress = null;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaMedicalApplicantName =
			getPharmaMedicalApplicantName();

		String pharmaMedicalApplicantName =
			pharmaMedicalDeviceInfoCacheModel.pharmaMedicalApplicantName;

		if ((pharmaMedicalApplicantName != null) &&
			(pharmaMedicalApplicantName.length() == 0)) {

			pharmaMedicalDeviceInfoCacheModel.pharmaMedicalApplicantName = null;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaMedicalApplicantAddress =
			getPharmaMedicalApplicantAddress();

		String pharmaMedicalApplicantAddress =
			pharmaMedicalDeviceInfoCacheModel.pharmaMedicalApplicantAddress;

		if ((pharmaMedicalApplicantAddress != null) &&
			(pharmaMedicalApplicantAddress.length() == 0)) {

			pharmaMedicalDeviceInfoCacheModel.pharmaMedicalApplicantAddress =
				null;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaRepresentativeName =
			getPharmaRepresentativeName();

		String pharmaRepresentativeName =
			pharmaMedicalDeviceInfoCacheModel.pharmaRepresentativeName;

		if ((pharmaRepresentativeName != null) &&
			(pharmaRepresentativeName.length() == 0)) {

			pharmaMedicalDeviceInfoCacheModel.pharmaRepresentativeName = null;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaRepresentativeAddress =
			getPharmaRepresentativeAddress();

		String pharmaRepresentativeAddress =
			pharmaMedicalDeviceInfoCacheModel.pharmaRepresentativeAddress;

		if ((pharmaRepresentativeAddress != null) &&
			(pharmaRepresentativeAddress.length() == 0)) {

			pharmaMedicalDeviceInfoCacheModel.pharmaRepresentativeAddress =
				null;
		}

		pharmaMedicalDeviceInfoCacheModel.pharmaApplicationId =
			getPharmaApplicationId();

		return pharmaMedicalDeviceInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PharmaMedicalDeviceInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PharmaMedicalDeviceInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaMedicalDeviceInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PharmaMedicalDeviceInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, PharmaMedicalDeviceInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						PharmaMedicalDeviceInfo.class, ModelWrapper.class);

	}

	private long _pharmaMedicalDeviceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _pharmaDeviceName;
	private String _pharmaDeviceDeisgnation;
	private String _pharmaManufacturerName;
	private String _pharmaManufacturerAddress;
	private String _pharmaMedicalApplicantName;
	private String _pharmaMedicalApplicantAddress;
	private String _pharmaRepresentativeName;
	private String _pharmaRepresentativeAddress;
	private long _pharmaApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<PharmaMedicalDeviceInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PharmaMedicalDeviceInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"pharmaMedicalDeviceId", _pharmaMedicalDeviceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("pharmaDeviceName", _pharmaDeviceName);
		_columnOriginalValues.put(
			"pharmaDeviceDeisgnation", _pharmaDeviceDeisgnation);
		_columnOriginalValues.put(
			"pharmaManufacturerName", _pharmaManufacturerName);
		_columnOriginalValues.put(
			"pharmaManufacturerAddress", _pharmaManufacturerAddress);
		_columnOriginalValues.put(
			"pharmaMedicalApplicantName", _pharmaMedicalApplicantName);
		_columnOriginalValues.put(
			"pharmaMedicalApplicantAddress", _pharmaMedicalApplicantAddress);
		_columnOriginalValues.put(
			"pharmaRepresentativeName", _pharmaRepresentativeName);
		_columnOriginalValues.put(
			"pharmaRepresentativeAddress", _pharmaRepresentativeAddress);
		_columnOriginalValues.put("pharmaApplicationId", _pharmaApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("pharmaMedicalDeviceId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("pharmaDeviceName", 128L);

		columnBitmasks.put("pharmaDeviceDeisgnation", 256L);

		columnBitmasks.put("pharmaManufacturerName", 512L);

		columnBitmasks.put("pharmaManufacturerAddress", 1024L);

		columnBitmasks.put("pharmaMedicalApplicantName", 2048L);

		columnBitmasks.put("pharmaMedicalApplicantAddress", 4096L);

		columnBitmasks.put("pharmaRepresentativeName", 8192L);

		columnBitmasks.put("pharmaRepresentativeAddress", 16384L);

		columnBitmasks.put("pharmaApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PharmaMedicalDeviceInfo _escapedModel;

}