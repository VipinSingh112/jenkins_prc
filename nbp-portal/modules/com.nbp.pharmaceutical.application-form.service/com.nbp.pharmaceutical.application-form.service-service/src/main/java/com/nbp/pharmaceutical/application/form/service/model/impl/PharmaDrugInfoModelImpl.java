/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.pharmaceutical.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.pharmaceutical.application.form.service.model.PharmaDrugInfo;
import com.nbp.pharmaceutical.application.form.service.model.PharmaDrugInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PharmaDrugInfo service. Represents a row in the &quot;nbp_pharma_drug_Info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PharmaDrugInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PharmaDrugInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PharmaDrugInfoImpl
 * @generated
 */
@JSON(strict = true)
public class PharmaDrugInfoModelImpl
	extends BaseModelImpl<PharmaDrugInfo> implements PharmaDrugInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pharma drug info model instance should use the <code>PharmaDrugInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_pharma_drug_Info";

	public static final Object[][] TABLE_COLUMNS = {
		{"pharmaDrugInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"pharmaDrugBrandName", Types.VARCHAR},
		{"pharmaDrugDeisgnation", Types.VARCHAR},
		{"pharmaDosageForm", Types.VARCHAR},
		{"pharmaAdministrationRoute", Types.VARCHAR},
		{"pharmaOriginDispensing", Types.VARCHAR},
		{"pharmaLicenseHolderName", Types.VARCHAR},
		{"pharmaLicenseHolderAddress", Types.VARCHAR},
		{"pharmaApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pharmaDrugInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pharmaDrugBrandName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaDrugDeisgnation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaDosageForm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaAdministrationRoute", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaOriginDispensing", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaLicenseHolderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaLicenseHolderAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_pharma_drug_Info (pharmaDrugInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,pharmaDrugBrandName VARCHAR(200) null,pharmaDrugDeisgnation VARCHAR(75) null,pharmaDosageForm VARCHAR(75) null,pharmaAdministrationRoute VARCHAR(75) null,pharmaOriginDispensing VARCHAR(75) null,pharmaLicenseHolderName VARCHAR(200) null,pharmaLicenseHolderAddress VARCHAR(500) null,pharmaApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_pharma_drug_Info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pharmaDrugInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_pharma_drug_Info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHARMAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PharmaDrugInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pharmaDrugInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPharmaDrugInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pharmaDrugInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PharmaDrugInfo.class;
	}

	@Override
	public String getModelClassName() {
		return PharmaDrugInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PharmaDrugInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PharmaDrugInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaDrugInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PharmaDrugInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PharmaDrugInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PharmaDrugInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PharmaDrugInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PharmaDrugInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PharmaDrugInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<PharmaDrugInfo, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<PharmaDrugInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<PharmaDrugInfo, Object>>();

			attributeGetterFunctions.put(
				"pharmaDrugInfoId", PharmaDrugInfo::getPharmaDrugInfoId);
			attributeGetterFunctions.put("groupId", PharmaDrugInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", PharmaDrugInfo::getCompanyId);
			attributeGetterFunctions.put("userId", PharmaDrugInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", PharmaDrugInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", PharmaDrugInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", PharmaDrugInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"pharmaDrugBrandName", PharmaDrugInfo::getPharmaDrugBrandName);
			attributeGetterFunctions.put(
				"pharmaDrugDeisgnation",
				PharmaDrugInfo::getPharmaDrugDeisgnation);
			attributeGetterFunctions.put(
				"pharmaDosageForm", PharmaDrugInfo::getPharmaDosageForm);
			attributeGetterFunctions.put(
				"pharmaAdministrationRoute",
				PharmaDrugInfo::getPharmaAdministrationRoute);
			attributeGetterFunctions.put(
				"pharmaOriginDispensing",
				PharmaDrugInfo::getPharmaOriginDispensing);
			attributeGetterFunctions.put(
				"pharmaLicenseHolderName",
				PharmaDrugInfo::getPharmaLicenseHolderName);
			attributeGetterFunctions.put(
				"pharmaLicenseHolderAddress",
				PharmaDrugInfo::getPharmaLicenseHolderAddress);
			attributeGetterFunctions.put(
				"pharmaApplicationId", PharmaDrugInfo::getPharmaApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<PharmaDrugInfo, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PharmaDrugInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<PharmaDrugInfo, ?>>();

			attributeSetterBiConsumers.put(
				"pharmaDrugInfoId",
				(BiConsumer<PharmaDrugInfo, Long>)
					PharmaDrugInfo::setPharmaDrugInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<PharmaDrugInfo, Long>)PharmaDrugInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<PharmaDrugInfo, Long>)PharmaDrugInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<PharmaDrugInfo, Long>)PharmaDrugInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<PharmaDrugInfo, String>)
					PharmaDrugInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<PharmaDrugInfo, Date>)
					PharmaDrugInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<PharmaDrugInfo, Date>)
					PharmaDrugInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"pharmaDrugBrandName",
				(BiConsumer<PharmaDrugInfo, String>)
					PharmaDrugInfo::setPharmaDrugBrandName);
			attributeSetterBiConsumers.put(
				"pharmaDrugDeisgnation",
				(BiConsumer<PharmaDrugInfo, String>)
					PharmaDrugInfo::setPharmaDrugDeisgnation);
			attributeSetterBiConsumers.put(
				"pharmaDosageForm",
				(BiConsumer<PharmaDrugInfo, String>)
					PharmaDrugInfo::setPharmaDosageForm);
			attributeSetterBiConsumers.put(
				"pharmaAdministrationRoute",
				(BiConsumer<PharmaDrugInfo, String>)
					PharmaDrugInfo::setPharmaAdministrationRoute);
			attributeSetterBiConsumers.put(
				"pharmaOriginDispensing",
				(BiConsumer<PharmaDrugInfo, String>)
					PharmaDrugInfo::setPharmaOriginDispensing);
			attributeSetterBiConsumers.put(
				"pharmaLicenseHolderName",
				(BiConsumer<PharmaDrugInfo, String>)
					PharmaDrugInfo::setPharmaLicenseHolderName);
			attributeSetterBiConsumers.put(
				"pharmaLicenseHolderAddress",
				(BiConsumer<PharmaDrugInfo, String>)
					PharmaDrugInfo::setPharmaLicenseHolderAddress);
			attributeSetterBiConsumers.put(
				"pharmaApplicationId",
				(BiConsumer<PharmaDrugInfo, Long>)
					PharmaDrugInfo::setPharmaApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getPharmaDrugInfoId() {
		return _pharmaDrugInfoId;
	}

	@Override
	public void setPharmaDrugInfoId(long pharmaDrugInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaDrugInfoId = pharmaDrugInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPharmaDrugBrandName() {
		if (_pharmaDrugBrandName == null) {
			return "";
		}
		else {
			return _pharmaDrugBrandName;
		}
	}

	@Override
	public void setPharmaDrugBrandName(String pharmaDrugBrandName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaDrugBrandName = pharmaDrugBrandName;
	}

	@JSON
	@Override
	public String getPharmaDrugDeisgnation() {
		if (_pharmaDrugDeisgnation == null) {
			return "";
		}
		else {
			return _pharmaDrugDeisgnation;
		}
	}

	@Override
	public void setPharmaDrugDeisgnation(String pharmaDrugDeisgnation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaDrugDeisgnation = pharmaDrugDeisgnation;
	}

	@JSON
	@Override
	public String getPharmaDosageForm() {
		if (_pharmaDosageForm == null) {
			return "";
		}
		else {
			return _pharmaDosageForm;
		}
	}

	@Override
	public void setPharmaDosageForm(String pharmaDosageForm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaDosageForm = pharmaDosageForm;
	}

	@JSON
	@Override
	public String getPharmaAdministrationRoute() {
		if (_pharmaAdministrationRoute == null) {
			return "";
		}
		else {
			return _pharmaAdministrationRoute;
		}
	}

	@Override
	public void setPharmaAdministrationRoute(String pharmaAdministrationRoute) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaAdministrationRoute = pharmaAdministrationRoute;
	}

	@JSON
	@Override
	public String getPharmaOriginDispensing() {
		if (_pharmaOriginDispensing == null) {
			return "";
		}
		else {
			return _pharmaOriginDispensing;
		}
	}

	@Override
	public void setPharmaOriginDispensing(String pharmaOriginDispensing) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaOriginDispensing = pharmaOriginDispensing;
	}

	@JSON
	@Override
	public String getPharmaLicenseHolderName() {
		if (_pharmaLicenseHolderName == null) {
			return "";
		}
		else {
			return _pharmaLicenseHolderName;
		}
	}

	@Override
	public void setPharmaLicenseHolderName(String pharmaLicenseHolderName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaLicenseHolderName = pharmaLicenseHolderName;
	}

	@JSON
	@Override
	public String getPharmaLicenseHolderAddress() {
		if (_pharmaLicenseHolderAddress == null) {
			return "";
		}
		else {
			return _pharmaLicenseHolderAddress;
		}
	}

	@Override
	public void setPharmaLicenseHolderAddress(
		String pharmaLicenseHolderAddress) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaLicenseHolderAddress = pharmaLicenseHolderAddress;
	}

	@JSON
	@Override
	public long getPharmaApplicationId() {
		return _pharmaApplicationId;
	}

	@Override
	public void setPharmaApplicationId(long pharmaApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaApplicationId = pharmaApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPharmaApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("pharmaApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PharmaDrugInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PharmaDrugInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PharmaDrugInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PharmaDrugInfoImpl pharmaDrugInfoImpl = new PharmaDrugInfoImpl();

		pharmaDrugInfoImpl.setPharmaDrugInfoId(getPharmaDrugInfoId());
		pharmaDrugInfoImpl.setGroupId(getGroupId());
		pharmaDrugInfoImpl.setCompanyId(getCompanyId());
		pharmaDrugInfoImpl.setUserId(getUserId());
		pharmaDrugInfoImpl.setUserName(getUserName());
		pharmaDrugInfoImpl.setCreateDate(getCreateDate());
		pharmaDrugInfoImpl.setModifiedDate(getModifiedDate());
		pharmaDrugInfoImpl.setPharmaDrugBrandName(getPharmaDrugBrandName());
		pharmaDrugInfoImpl.setPharmaDrugDeisgnation(getPharmaDrugDeisgnation());
		pharmaDrugInfoImpl.setPharmaDosageForm(getPharmaDosageForm());
		pharmaDrugInfoImpl.setPharmaAdministrationRoute(
			getPharmaAdministrationRoute());
		pharmaDrugInfoImpl.setPharmaOriginDispensing(
			getPharmaOriginDispensing());
		pharmaDrugInfoImpl.setPharmaLicenseHolderName(
			getPharmaLicenseHolderName());
		pharmaDrugInfoImpl.setPharmaLicenseHolderAddress(
			getPharmaLicenseHolderAddress());
		pharmaDrugInfoImpl.setPharmaApplicationId(getPharmaApplicationId());

		pharmaDrugInfoImpl.resetOriginalValues();

		return pharmaDrugInfoImpl;
	}

	@Override
	public PharmaDrugInfo cloneWithOriginalValues() {
		PharmaDrugInfoImpl pharmaDrugInfoImpl = new PharmaDrugInfoImpl();

		pharmaDrugInfoImpl.setPharmaDrugInfoId(
			this.<Long>getColumnOriginalValue("pharmaDrugInfoId"));
		pharmaDrugInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		pharmaDrugInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		pharmaDrugInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		pharmaDrugInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		pharmaDrugInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		pharmaDrugInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		pharmaDrugInfoImpl.setPharmaDrugBrandName(
			this.<String>getColumnOriginalValue("pharmaDrugBrandName"));
		pharmaDrugInfoImpl.setPharmaDrugDeisgnation(
			this.<String>getColumnOriginalValue("pharmaDrugDeisgnation"));
		pharmaDrugInfoImpl.setPharmaDosageForm(
			this.<String>getColumnOriginalValue("pharmaDosageForm"));
		pharmaDrugInfoImpl.setPharmaAdministrationRoute(
			this.<String>getColumnOriginalValue("pharmaAdministrationRoute"));
		pharmaDrugInfoImpl.setPharmaOriginDispensing(
			this.<String>getColumnOriginalValue("pharmaOriginDispensing"));
		pharmaDrugInfoImpl.setPharmaLicenseHolderName(
			this.<String>getColumnOriginalValue("pharmaLicenseHolderName"));
		pharmaDrugInfoImpl.setPharmaLicenseHolderAddress(
			this.<String>getColumnOriginalValue("pharmaLicenseHolderAddress"));
		pharmaDrugInfoImpl.setPharmaApplicationId(
			this.<Long>getColumnOriginalValue("pharmaApplicationId"));

		return pharmaDrugInfoImpl;
	}

	@Override
	public int compareTo(PharmaDrugInfo pharmaDrugInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), pharmaDrugInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PharmaDrugInfo)) {
			return false;
		}

		PharmaDrugInfo pharmaDrugInfo = (PharmaDrugInfo)object;

		long primaryKey = pharmaDrugInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PharmaDrugInfo> toCacheModel() {
		PharmaDrugInfoCacheModel pharmaDrugInfoCacheModel =
			new PharmaDrugInfoCacheModel();

		pharmaDrugInfoCacheModel.pharmaDrugInfoId = getPharmaDrugInfoId();

		pharmaDrugInfoCacheModel.groupId = getGroupId();

		pharmaDrugInfoCacheModel.companyId = getCompanyId();

		pharmaDrugInfoCacheModel.userId = getUserId();

		pharmaDrugInfoCacheModel.userName = getUserName();

		String userName = pharmaDrugInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			pharmaDrugInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pharmaDrugInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			pharmaDrugInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pharmaDrugInfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			pharmaDrugInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		pharmaDrugInfoCacheModel.pharmaDrugBrandName = getPharmaDrugBrandName();

		String pharmaDrugBrandName =
			pharmaDrugInfoCacheModel.pharmaDrugBrandName;

		if ((pharmaDrugBrandName != null) &&
			(pharmaDrugBrandName.length() == 0)) {

			pharmaDrugInfoCacheModel.pharmaDrugBrandName = null;
		}

		pharmaDrugInfoCacheModel.pharmaDrugDeisgnation =
			getPharmaDrugDeisgnation();

		String pharmaDrugDeisgnation =
			pharmaDrugInfoCacheModel.pharmaDrugDeisgnation;

		if ((pharmaDrugDeisgnation != null) &&
			(pharmaDrugDeisgnation.length() == 0)) {

			pharmaDrugInfoCacheModel.pharmaDrugDeisgnation = null;
		}

		pharmaDrugInfoCacheModel.pharmaDosageForm = getPharmaDosageForm();

		String pharmaDosageForm = pharmaDrugInfoCacheModel.pharmaDosageForm;

		if ((pharmaDosageForm != null) && (pharmaDosageForm.length() == 0)) {
			pharmaDrugInfoCacheModel.pharmaDosageForm = null;
		}

		pharmaDrugInfoCacheModel.pharmaAdministrationRoute =
			getPharmaAdministrationRoute();

		String pharmaAdministrationRoute =
			pharmaDrugInfoCacheModel.pharmaAdministrationRoute;

		if ((pharmaAdministrationRoute != null) &&
			(pharmaAdministrationRoute.length() == 0)) {

			pharmaDrugInfoCacheModel.pharmaAdministrationRoute = null;
		}

		pharmaDrugInfoCacheModel.pharmaOriginDispensing =
			getPharmaOriginDispensing();

		String pharmaOriginDispensing =
			pharmaDrugInfoCacheModel.pharmaOriginDispensing;

		if ((pharmaOriginDispensing != null) &&
			(pharmaOriginDispensing.length() == 0)) {

			pharmaDrugInfoCacheModel.pharmaOriginDispensing = null;
		}

		pharmaDrugInfoCacheModel.pharmaLicenseHolderName =
			getPharmaLicenseHolderName();

		String pharmaLicenseHolderName =
			pharmaDrugInfoCacheModel.pharmaLicenseHolderName;

		if ((pharmaLicenseHolderName != null) &&
			(pharmaLicenseHolderName.length() == 0)) {

			pharmaDrugInfoCacheModel.pharmaLicenseHolderName = null;
		}

		pharmaDrugInfoCacheModel.pharmaLicenseHolderAddress =
			getPharmaLicenseHolderAddress();

		String pharmaLicenseHolderAddress =
			pharmaDrugInfoCacheModel.pharmaLicenseHolderAddress;

		if ((pharmaLicenseHolderAddress != null) &&
			(pharmaLicenseHolderAddress.length() == 0)) {

			pharmaDrugInfoCacheModel.pharmaLicenseHolderAddress = null;
		}

		pharmaDrugInfoCacheModel.pharmaApplicationId = getPharmaApplicationId();

		return pharmaDrugInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PharmaDrugInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PharmaDrugInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaDrugInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PharmaDrugInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PharmaDrugInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PharmaDrugInfo.class, ModelWrapper.class);

	}

	private long _pharmaDrugInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _pharmaDrugBrandName;
	private String _pharmaDrugDeisgnation;
	private String _pharmaDosageForm;
	private String _pharmaAdministrationRoute;
	private String _pharmaOriginDispensing;
	private String _pharmaLicenseHolderName;
	private String _pharmaLicenseHolderAddress;
	private long _pharmaApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<PharmaDrugInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PharmaDrugInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("pharmaDrugInfoId", _pharmaDrugInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("pharmaDrugBrandName", _pharmaDrugBrandName);
		_columnOriginalValues.put(
			"pharmaDrugDeisgnation", _pharmaDrugDeisgnation);
		_columnOriginalValues.put("pharmaDosageForm", _pharmaDosageForm);
		_columnOriginalValues.put(
			"pharmaAdministrationRoute", _pharmaAdministrationRoute);
		_columnOriginalValues.put(
			"pharmaOriginDispensing", _pharmaOriginDispensing);
		_columnOriginalValues.put(
			"pharmaLicenseHolderName", _pharmaLicenseHolderName);
		_columnOriginalValues.put(
			"pharmaLicenseHolderAddress", _pharmaLicenseHolderAddress);
		_columnOriginalValues.put("pharmaApplicationId", _pharmaApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("pharmaDrugInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("pharmaDrugBrandName", 128L);

		columnBitmasks.put("pharmaDrugDeisgnation", 256L);

		columnBitmasks.put("pharmaDosageForm", 512L);

		columnBitmasks.put("pharmaAdministrationRoute", 1024L);

		columnBitmasks.put("pharmaOriginDispensing", 2048L);

		columnBitmasks.put("pharmaLicenseHolderName", 4096L);

		columnBitmasks.put("pharmaLicenseHolderAddress", 8192L);

		columnBitmasks.put("pharmaApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PharmaDrugInfo _escapedModel;

}