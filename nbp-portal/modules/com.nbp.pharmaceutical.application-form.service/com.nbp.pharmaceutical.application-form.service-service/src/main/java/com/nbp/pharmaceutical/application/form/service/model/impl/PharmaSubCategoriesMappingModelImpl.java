/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.pharmaceutical.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.pharmaceutical.application.form.service.model.PharmaSubCategoriesMapping;
import com.nbp.pharmaceutical.application.form.service.model.PharmaSubCategoriesMappingModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PharmaSubCategoriesMapping service. Represents a row in the &quot;nbp_pharma_sub_categories&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PharmaSubCategoriesMappingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PharmaSubCategoriesMappingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PharmaSubCategoriesMappingImpl
 * @generated
 */
@JSON(strict = true)
public class PharmaSubCategoriesMappingModelImpl
	extends BaseModelImpl<PharmaSubCategoriesMapping>
	implements PharmaSubCategoriesMappingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pharma sub categories mapping model instance should use the <code>PharmaSubCategoriesMapping</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_pharma_sub_categories";

	public static final Object[][] TABLE_COLUMNS = {
		{"pharmaSubCategoriesMappingId", Types.BIGINT},
		{"pharmaSubCategory", Types.VARCHAR},
		{"pharmaSubCategoryMapValue", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pharmaSubCategoriesMappingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pharmaSubCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pharmaSubCategoryMapValue", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_pharma_sub_categories (pharmaSubCategoriesMappingId LONG not null primary key,pharmaSubCategory VARCHAR(75) null,pharmaSubCategoryMapValue VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_pharma_sub_categories";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pharmaSubCategoriesMapping.pharmaSubCategoriesMappingId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_pharma_sub_categories.pharmaSubCategoriesMappingId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHARMASUBCATEGORY_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHARMASUBCATEGORIESMAPPINGID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PharmaSubCategoriesMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pharmaSubCategoriesMappingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPharmaSubCategoriesMappingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pharmaSubCategoriesMappingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PharmaSubCategoriesMapping.class;
	}

	@Override
	public String getModelClassName() {
		return PharmaSubCategoriesMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PharmaSubCategoriesMapping, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PharmaSubCategoriesMapping, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaSubCategoriesMapping, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(PharmaSubCategoriesMapping)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PharmaSubCategoriesMapping, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PharmaSubCategoriesMapping, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PharmaSubCategoriesMapping)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PharmaSubCategoriesMapping, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PharmaSubCategoriesMapping, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<PharmaSubCategoriesMapping, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<PharmaSubCategoriesMapping, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<PharmaSubCategoriesMapping, Object>>();

			attributeGetterFunctions.put(
				"pharmaSubCategoriesMappingId",
				PharmaSubCategoriesMapping::getPharmaSubCategoriesMappingId);
			attributeGetterFunctions.put(
				"pharmaSubCategory",
				PharmaSubCategoriesMapping::getPharmaSubCategory);
			attributeGetterFunctions.put(
				"pharmaSubCategoryMapValue",
				PharmaSubCategoriesMapping::getPharmaSubCategoryMapValue);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<PharmaSubCategoriesMapping, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PharmaSubCategoriesMapping, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<PharmaSubCategoriesMapping, ?>>();

			attributeSetterBiConsumers.put(
				"pharmaSubCategoriesMappingId",
				(BiConsumer<PharmaSubCategoriesMapping, Long>)
					PharmaSubCategoriesMapping::
						setPharmaSubCategoriesMappingId);
			attributeSetterBiConsumers.put(
				"pharmaSubCategory",
				(BiConsumer<PharmaSubCategoriesMapping, String>)
					PharmaSubCategoriesMapping::setPharmaSubCategory);
			attributeSetterBiConsumers.put(
				"pharmaSubCategoryMapValue",
				(BiConsumer<PharmaSubCategoriesMapping, String>)
					PharmaSubCategoriesMapping::setPharmaSubCategoryMapValue);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getPharmaSubCategoriesMappingId() {
		return _pharmaSubCategoriesMappingId;
	}

	@Override
	public void setPharmaSubCategoriesMappingId(
		long pharmaSubCategoriesMappingId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaSubCategoriesMappingId = pharmaSubCategoriesMappingId;
	}

	@JSON
	@Override
	public String getPharmaSubCategory() {
		if (_pharmaSubCategory == null) {
			return "";
		}
		else {
			return _pharmaSubCategory;
		}
	}

	@Override
	public void setPharmaSubCategory(String pharmaSubCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaSubCategory = pharmaSubCategory;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPharmaSubCategory() {
		return getColumnOriginalValue("pharmaSubCategory");
	}

	@JSON
	@Override
	public String getPharmaSubCategoryMapValue() {
		if (_pharmaSubCategoryMapValue == null) {
			return "";
		}
		else {
			return _pharmaSubCategoryMapValue;
		}
	}

	@Override
	public void setPharmaSubCategoryMapValue(String pharmaSubCategoryMapValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pharmaSubCategoryMapValue = pharmaSubCategoryMapValue;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PharmaSubCategoriesMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PharmaSubCategoriesMapping toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PharmaSubCategoriesMapping>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PharmaSubCategoriesMappingImpl pharmaSubCategoriesMappingImpl =
			new PharmaSubCategoriesMappingImpl();

		pharmaSubCategoriesMappingImpl.setPharmaSubCategoriesMappingId(
			getPharmaSubCategoriesMappingId());
		pharmaSubCategoriesMappingImpl.setPharmaSubCategory(
			getPharmaSubCategory());
		pharmaSubCategoriesMappingImpl.setPharmaSubCategoryMapValue(
			getPharmaSubCategoryMapValue());

		pharmaSubCategoriesMappingImpl.resetOriginalValues();

		return pharmaSubCategoriesMappingImpl;
	}

	@Override
	public PharmaSubCategoriesMapping cloneWithOriginalValues() {
		PharmaSubCategoriesMappingImpl pharmaSubCategoriesMappingImpl =
			new PharmaSubCategoriesMappingImpl();

		pharmaSubCategoriesMappingImpl.setPharmaSubCategoriesMappingId(
			this.<Long>getColumnOriginalValue("pharmaSubCategoriesMappingId"));
		pharmaSubCategoriesMappingImpl.setPharmaSubCategory(
			this.<String>getColumnOriginalValue("pharmaSubCategory"));
		pharmaSubCategoriesMappingImpl.setPharmaSubCategoryMapValue(
			this.<String>getColumnOriginalValue("pharmaSubCategoryMapValue"));

		return pharmaSubCategoriesMappingImpl;
	}

	@Override
	public int compareTo(
		PharmaSubCategoriesMapping pharmaSubCategoriesMapping) {

		long primaryKey = pharmaSubCategoriesMapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PharmaSubCategoriesMapping)) {
			return false;
		}

		PharmaSubCategoriesMapping pharmaSubCategoriesMapping =
			(PharmaSubCategoriesMapping)object;

		long primaryKey = pharmaSubCategoriesMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PharmaSubCategoriesMapping> toCacheModel() {
		PharmaSubCategoriesMappingCacheModel
			pharmaSubCategoriesMappingCacheModel =
				new PharmaSubCategoriesMappingCacheModel();

		pharmaSubCategoriesMappingCacheModel.pharmaSubCategoriesMappingId =
			getPharmaSubCategoriesMappingId();

		pharmaSubCategoriesMappingCacheModel.pharmaSubCategory =
			getPharmaSubCategory();

		String pharmaSubCategory =
			pharmaSubCategoriesMappingCacheModel.pharmaSubCategory;

		if ((pharmaSubCategory != null) && (pharmaSubCategory.length() == 0)) {
			pharmaSubCategoriesMappingCacheModel.pharmaSubCategory = null;
		}

		pharmaSubCategoriesMappingCacheModel.pharmaSubCategoryMapValue =
			getPharmaSubCategoryMapValue();

		String pharmaSubCategoryMapValue =
			pharmaSubCategoriesMappingCacheModel.pharmaSubCategoryMapValue;

		if ((pharmaSubCategoryMapValue != null) &&
			(pharmaSubCategoryMapValue.length() == 0)) {

			pharmaSubCategoriesMappingCacheModel.pharmaSubCategoryMapValue =
				null;
		}

		return pharmaSubCategoriesMappingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PharmaSubCategoriesMapping, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PharmaSubCategoriesMapping, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PharmaSubCategoriesMapping, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PharmaSubCategoriesMapping)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, PharmaSubCategoriesMapping>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						PharmaSubCategoriesMapping.class, ModelWrapper.class);

	}

	private long _pharmaSubCategoriesMappingId;
	private String _pharmaSubCategory;
	private String _pharmaSubCategoryMapValue;

	public <T> T getColumnValue(String columnName) {
		Function<PharmaSubCategoriesMapping, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PharmaSubCategoriesMapping)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"pharmaSubCategoriesMappingId", _pharmaSubCategoriesMappingId);
		_columnOriginalValues.put("pharmaSubCategory", _pharmaSubCategory);
		_columnOriginalValues.put(
			"pharmaSubCategoryMapValue", _pharmaSubCategoryMapValue);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("pharmaSubCategoriesMappingId", 1L);

		columnBitmasks.put("pharmaSubCategory", 2L);

		columnBitmasks.put("pharmaSubCategoryMapValue", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PharmaSubCategoriesMapping _escapedModel;

}