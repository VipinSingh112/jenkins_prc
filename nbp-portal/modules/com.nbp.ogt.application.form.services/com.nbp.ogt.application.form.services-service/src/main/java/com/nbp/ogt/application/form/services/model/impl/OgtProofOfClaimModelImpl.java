/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ogt.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ogt.application.form.services.model.OgtProofOfClaim;
import com.nbp.ogt.application.form.services.model.OgtProofOfClaimModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OgtProofOfClaim service. Represents a row in the &quot;nbp_ogt_proof_of_claim&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OgtProofOfClaimModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OgtProofOfClaimImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OgtProofOfClaimImpl
 * @generated
 */
@JSON(strict = true)
public class OgtProofOfClaimModelImpl
	extends BaseModelImpl<OgtProofOfClaim> implements OgtProofOfClaimModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ogt proof of claim model instance should use the <code>OgtProofOfClaim</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ogt_proof_of_claim";

	public static final Object[][] TABLE_COLUMNS = {
		{"ogtProofOfClaimId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"claimProofMatter", Types.VARCHAR},
		{"claimDebtorName", Types.VARCHAR}, {"claimantName", Types.VARCHAR},
		{"claimSentAddress", Types.VARCHAR},
		{"claimSentPhoneNum", Types.VARCHAR}, {"claimSentFaxNo", Types.VARCHAR},
		{"claimSentEmailAddr", Types.VARCHAR}, {"claimCompName", Types.VARCHAR},
		{"claimCertifyCheck", Types.VARCHAR},
		{"claimCompPosition", Types.VARCHAR}, {"claimName", Types.VARCHAR},
		{"claimByCredDebtor", Types.VARCHAR},
		{"claimDateAppli", Types.TIMESTAMP},
		{"claimByDebtTotalVal", Types.VARCHAR},
		{"claimByDebtStatement", Types.VARCHAR},
		{"claimCategory", Types.VARCHAR}, {"claimUnsecured", Types.VARCHAR},
		{"claimRegardingAmt", Types.VARCHAR},
		{"indicateCategoryOne", Types.VARCHAR},
		{"indicateCategoryTwo", Types.VARCHAR},
		{"indicateCategoryThree", Types.VARCHAR},
		{"indicateCategoryFour", Types.VARCHAR},
		{"otherPleaseSpecify", Types.VARCHAR}, {"claimSecured", Types.VARCHAR},
		{"claimSecuredOne", Types.VARCHAR}, {"claimDesc", Types.VARCHAR},
		{"aboveNamedCreditor", Types.VARCHAR},
		{"paymentDetailDesc", Types.VARCHAR},
		{"inCaseOfBankruptcy", Types.VARCHAR},
		{"ogtApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ogtProofOfClaimId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("claimProofMatter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimDebtorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimSentAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimSentPhoneNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimSentFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimSentEmailAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimCompName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimCertifyCheck", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimCompPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimByCredDebtor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimDateAppli", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("claimByDebtTotalVal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimByDebtStatement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimUnsecured", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimRegardingAmt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indicateCategoryOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indicateCategoryTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indicateCategoryThree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indicateCategoryFour", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherPleaseSpecify", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimSecured", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimSecuredOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("aboveNamedCreditor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentDetailDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inCaseOfBankruptcy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ogtApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ogt_proof_of_claim (ogtProofOfClaimId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,claimProofMatter VARCHAR(500) null,claimDebtorName VARCHAR(75) null,claimantName VARCHAR(75) null,claimSentAddress VARCHAR(500) null,claimSentPhoneNum VARCHAR(75) null,claimSentFaxNo VARCHAR(75) null,claimSentEmailAddr VARCHAR(75) null,claimCompName VARCHAR(75) null,claimCertifyCheck VARCHAR(75) null,claimCompPosition VARCHAR(75) null,claimName VARCHAR(75) null,claimByCredDebtor VARCHAR(500) null,claimDateAppli DATE null,claimByDebtTotalVal VARCHAR(75) null,claimByDebtStatement VARCHAR(500) null,claimCategory VARCHAR(500) null,claimUnsecured VARCHAR(75) null,claimRegardingAmt VARCHAR(75) null,indicateCategoryOne VARCHAR(500) null,indicateCategoryTwo VARCHAR(500) null,indicateCategoryThree VARCHAR(500) null,indicateCategoryFour VARCHAR(500) null,otherPleaseSpecify VARCHAR(75) null,claimSecured VARCHAR(75) null,claimSecuredOne VARCHAR(75) null,claimDesc VARCHAR(500) null,aboveNamedCreditor VARCHAR(500) null,paymentDetailDesc VARCHAR(1000) null,inCaseOfBankruptcy VARCHAR(500) null,ogtApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ogt_proof_of_claim";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ogtProofOfClaim.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ogt_proof_of_claim.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OGTAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OgtProofOfClaimModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ogtProofOfClaimId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOgtProofOfClaimId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ogtProofOfClaimId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OgtProofOfClaim.class;
	}

	@Override
	public String getModelClassName() {
		return OgtProofOfClaim.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OgtProofOfClaim, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OgtProofOfClaim, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtProofOfClaim, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OgtProofOfClaim)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OgtProofOfClaim, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OgtProofOfClaim, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OgtProofOfClaim)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OgtProofOfClaim, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OgtProofOfClaim, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<OgtProofOfClaim, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<OgtProofOfClaim, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<OgtProofOfClaim, Object>>();

			attributeGetterFunctions.put(
				"ogtProofOfClaimId", OgtProofOfClaim::getOgtProofOfClaimId);
			attributeGetterFunctions.put(
				"groupId", OgtProofOfClaim::getGroupId);
			attributeGetterFunctions.put(
				"companyId", OgtProofOfClaim::getCompanyId);
			attributeGetterFunctions.put("userId", OgtProofOfClaim::getUserId);
			attributeGetterFunctions.put(
				"userName", OgtProofOfClaim::getUserName);
			attributeGetterFunctions.put(
				"createDate", OgtProofOfClaim::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", OgtProofOfClaim::getModifiedDate);
			attributeGetterFunctions.put(
				"claimProofMatter", OgtProofOfClaim::getClaimProofMatter);
			attributeGetterFunctions.put(
				"claimDebtorName", OgtProofOfClaim::getClaimDebtorName);
			attributeGetterFunctions.put(
				"claimantName", OgtProofOfClaim::getClaimantName);
			attributeGetterFunctions.put(
				"claimSentAddress", OgtProofOfClaim::getClaimSentAddress);
			attributeGetterFunctions.put(
				"claimSentPhoneNum", OgtProofOfClaim::getClaimSentPhoneNum);
			attributeGetterFunctions.put(
				"claimSentFaxNo", OgtProofOfClaim::getClaimSentFaxNo);
			attributeGetterFunctions.put(
				"claimSentEmailAddr", OgtProofOfClaim::getClaimSentEmailAddr);
			attributeGetterFunctions.put(
				"claimCompName", OgtProofOfClaim::getClaimCompName);
			attributeGetterFunctions.put(
				"claimCertifyCheck", OgtProofOfClaim::getClaimCertifyCheck);
			attributeGetterFunctions.put(
				"claimCompPosition", OgtProofOfClaim::getClaimCompPosition);
			attributeGetterFunctions.put(
				"claimName", OgtProofOfClaim::getClaimName);
			attributeGetterFunctions.put(
				"claimByCredDebtor", OgtProofOfClaim::getClaimByCredDebtor);
			attributeGetterFunctions.put(
				"claimDateAppli", OgtProofOfClaim::getClaimDateAppli);
			attributeGetterFunctions.put(
				"claimByDebtTotalVal", OgtProofOfClaim::getClaimByDebtTotalVal);
			attributeGetterFunctions.put(
				"claimByDebtStatement",
				OgtProofOfClaim::getClaimByDebtStatement);
			attributeGetterFunctions.put(
				"claimCategory", OgtProofOfClaim::getClaimCategory);
			attributeGetterFunctions.put(
				"claimUnsecured", OgtProofOfClaim::getClaimUnsecured);
			attributeGetterFunctions.put(
				"claimRegardingAmt", OgtProofOfClaim::getClaimRegardingAmt);
			attributeGetterFunctions.put(
				"indicateCategoryOne", OgtProofOfClaim::getIndicateCategoryOne);
			attributeGetterFunctions.put(
				"indicateCategoryTwo", OgtProofOfClaim::getIndicateCategoryTwo);
			attributeGetterFunctions.put(
				"indicateCategoryThree",
				OgtProofOfClaim::getIndicateCategoryThree);
			attributeGetterFunctions.put(
				"indicateCategoryFour",
				OgtProofOfClaim::getIndicateCategoryFour);
			attributeGetterFunctions.put(
				"otherPleaseSpecify", OgtProofOfClaim::getOtherPleaseSpecify);
			attributeGetterFunctions.put(
				"claimSecured", OgtProofOfClaim::getClaimSecured);
			attributeGetterFunctions.put(
				"claimSecuredOne", OgtProofOfClaim::getClaimSecuredOne);
			attributeGetterFunctions.put(
				"claimDesc", OgtProofOfClaim::getClaimDesc);
			attributeGetterFunctions.put(
				"aboveNamedCreditor", OgtProofOfClaim::getAboveNamedCreditor);
			attributeGetterFunctions.put(
				"paymentDetailDesc", OgtProofOfClaim::getPaymentDetailDesc);
			attributeGetterFunctions.put(
				"inCaseOfBankruptcy", OgtProofOfClaim::getInCaseOfBankruptcy);
			attributeGetterFunctions.put(
				"ogtApplicationId", OgtProofOfClaim::getOgtApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<OgtProofOfClaim, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<OgtProofOfClaim, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<OgtProofOfClaim, ?>>();

			attributeSetterBiConsumers.put(
				"ogtProofOfClaimId",
				(BiConsumer<OgtProofOfClaim, Long>)
					OgtProofOfClaim::setOgtProofOfClaimId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<OgtProofOfClaim, Long>)OgtProofOfClaim::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<OgtProofOfClaim, Long>)
					OgtProofOfClaim::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<OgtProofOfClaim, Long>)OgtProofOfClaim::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<OgtProofOfClaim, Date>)
					OgtProofOfClaim::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<OgtProofOfClaim, Date>)
					OgtProofOfClaim::setModifiedDate);
			attributeSetterBiConsumers.put(
				"claimProofMatter",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimProofMatter);
			attributeSetterBiConsumers.put(
				"claimDebtorName",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimDebtorName);
			attributeSetterBiConsumers.put(
				"claimantName",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimantName);
			attributeSetterBiConsumers.put(
				"claimSentAddress",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimSentAddress);
			attributeSetterBiConsumers.put(
				"claimSentPhoneNum",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimSentPhoneNum);
			attributeSetterBiConsumers.put(
				"claimSentFaxNo",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimSentFaxNo);
			attributeSetterBiConsumers.put(
				"claimSentEmailAddr",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimSentEmailAddr);
			attributeSetterBiConsumers.put(
				"claimCompName",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimCompName);
			attributeSetterBiConsumers.put(
				"claimCertifyCheck",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimCertifyCheck);
			attributeSetterBiConsumers.put(
				"claimCompPosition",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimCompPosition);
			attributeSetterBiConsumers.put(
				"claimName",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimName);
			attributeSetterBiConsumers.put(
				"claimByCredDebtor",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimByCredDebtor);
			attributeSetterBiConsumers.put(
				"claimDateAppli",
				(BiConsumer<OgtProofOfClaim, Date>)
					OgtProofOfClaim::setClaimDateAppli);
			attributeSetterBiConsumers.put(
				"claimByDebtTotalVal",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimByDebtTotalVal);
			attributeSetterBiConsumers.put(
				"claimByDebtStatement",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimByDebtStatement);
			attributeSetterBiConsumers.put(
				"claimCategory",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimCategory);
			attributeSetterBiConsumers.put(
				"claimUnsecured",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimUnsecured);
			attributeSetterBiConsumers.put(
				"claimRegardingAmt",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimRegardingAmt);
			attributeSetterBiConsumers.put(
				"indicateCategoryOne",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setIndicateCategoryOne);
			attributeSetterBiConsumers.put(
				"indicateCategoryTwo",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setIndicateCategoryTwo);
			attributeSetterBiConsumers.put(
				"indicateCategoryThree",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setIndicateCategoryThree);
			attributeSetterBiConsumers.put(
				"indicateCategoryFour",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setIndicateCategoryFour);
			attributeSetterBiConsumers.put(
				"otherPleaseSpecify",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setOtherPleaseSpecify);
			attributeSetterBiConsumers.put(
				"claimSecured",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimSecured);
			attributeSetterBiConsumers.put(
				"claimSecuredOne",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimSecuredOne);
			attributeSetterBiConsumers.put(
				"claimDesc",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setClaimDesc);
			attributeSetterBiConsumers.put(
				"aboveNamedCreditor",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setAboveNamedCreditor);
			attributeSetterBiConsumers.put(
				"paymentDetailDesc",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setPaymentDetailDesc);
			attributeSetterBiConsumers.put(
				"inCaseOfBankruptcy",
				(BiConsumer<OgtProofOfClaim, String>)
					OgtProofOfClaim::setInCaseOfBankruptcy);
			attributeSetterBiConsumers.put(
				"ogtApplicationId",
				(BiConsumer<OgtProofOfClaim, Long>)
					OgtProofOfClaim::setOgtApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getOgtProofOfClaimId() {
		return _ogtProofOfClaimId;
	}

	@Override
	public void setOgtProofOfClaimId(long ogtProofOfClaimId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtProofOfClaimId = ogtProofOfClaimId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getClaimProofMatter() {
		if (_claimProofMatter == null) {
			return "";
		}
		else {
			return _claimProofMatter;
		}
	}

	@Override
	public void setClaimProofMatter(String claimProofMatter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimProofMatter = claimProofMatter;
	}

	@JSON
	@Override
	public String getClaimDebtorName() {
		if (_claimDebtorName == null) {
			return "";
		}
		else {
			return _claimDebtorName;
		}
	}

	@Override
	public void setClaimDebtorName(String claimDebtorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimDebtorName = claimDebtorName;
	}

	@JSON
	@Override
	public String getClaimantName() {
		if (_claimantName == null) {
			return "";
		}
		else {
			return _claimantName;
		}
	}

	@Override
	public void setClaimantName(String claimantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantName = claimantName;
	}

	@JSON
	@Override
	public String getClaimSentAddress() {
		if (_claimSentAddress == null) {
			return "";
		}
		else {
			return _claimSentAddress;
		}
	}

	@Override
	public void setClaimSentAddress(String claimSentAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimSentAddress = claimSentAddress;
	}

	@JSON
	@Override
	public String getClaimSentPhoneNum() {
		if (_claimSentPhoneNum == null) {
			return "";
		}
		else {
			return _claimSentPhoneNum;
		}
	}

	@Override
	public void setClaimSentPhoneNum(String claimSentPhoneNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimSentPhoneNum = claimSentPhoneNum;
	}

	@JSON
	@Override
	public String getClaimSentFaxNo() {
		if (_claimSentFaxNo == null) {
			return "";
		}
		else {
			return _claimSentFaxNo;
		}
	}

	@Override
	public void setClaimSentFaxNo(String claimSentFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimSentFaxNo = claimSentFaxNo;
	}

	@JSON
	@Override
	public String getClaimSentEmailAddr() {
		if (_claimSentEmailAddr == null) {
			return "";
		}
		else {
			return _claimSentEmailAddr;
		}
	}

	@Override
	public void setClaimSentEmailAddr(String claimSentEmailAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimSentEmailAddr = claimSentEmailAddr;
	}

	@JSON
	@Override
	public String getClaimCompName() {
		if (_claimCompName == null) {
			return "";
		}
		else {
			return _claimCompName;
		}
	}

	@Override
	public void setClaimCompName(String claimCompName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimCompName = claimCompName;
	}

	@JSON
	@Override
	public String getClaimCertifyCheck() {
		if (_claimCertifyCheck == null) {
			return "";
		}
		else {
			return _claimCertifyCheck;
		}
	}

	@Override
	public void setClaimCertifyCheck(String claimCertifyCheck) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimCertifyCheck = claimCertifyCheck;
	}

	@JSON
	@Override
	public String getClaimCompPosition() {
		if (_claimCompPosition == null) {
			return "";
		}
		else {
			return _claimCompPosition;
		}
	}

	@Override
	public void setClaimCompPosition(String claimCompPosition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimCompPosition = claimCompPosition;
	}

	@JSON
	@Override
	public String getClaimName() {
		if (_claimName == null) {
			return "";
		}
		else {
			return _claimName;
		}
	}

	@Override
	public void setClaimName(String claimName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimName = claimName;
	}

	@JSON
	@Override
	public String getClaimByCredDebtor() {
		if (_claimByCredDebtor == null) {
			return "";
		}
		else {
			return _claimByCredDebtor;
		}
	}

	@Override
	public void setClaimByCredDebtor(String claimByCredDebtor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimByCredDebtor = claimByCredDebtor;
	}

	@JSON
	@Override
	public Date getClaimDateAppli() {
		return _claimDateAppli;
	}

	@Override
	public void setClaimDateAppli(Date claimDateAppli) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimDateAppli = claimDateAppli;
	}

	@JSON
	@Override
	public String getClaimByDebtTotalVal() {
		if (_claimByDebtTotalVal == null) {
			return "";
		}
		else {
			return _claimByDebtTotalVal;
		}
	}

	@Override
	public void setClaimByDebtTotalVal(String claimByDebtTotalVal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimByDebtTotalVal = claimByDebtTotalVal;
	}

	@JSON
	@Override
	public String getClaimByDebtStatement() {
		if (_claimByDebtStatement == null) {
			return "";
		}
		else {
			return _claimByDebtStatement;
		}
	}

	@Override
	public void setClaimByDebtStatement(String claimByDebtStatement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimByDebtStatement = claimByDebtStatement;
	}

	@JSON
	@Override
	public String getClaimCategory() {
		if (_claimCategory == null) {
			return "";
		}
		else {
			return _claimCategory;
		}
	}

	@Override
	public void setClaimCategory(String claimCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimCategory = claimCategory;
	}

	@JSON
	@Override
	public String getClaimUnsecured() {
		if (_claimUnsecured == null) {
			return "";
		}
		else {
			return _claimUnsecured;
		}
	}

	@Override
	public void setClaimUnsecured(String claimUnsecured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimUnsecured = claimUnsecured;
	}

	@JSON
	@Override
	public String getClaimRegardingAmt() {
		if (_claimRegardingAmt == null) {
			return "";
		}
		else {
			return _claimRegardingAmt;
		}
	}

	@Override
	public void setClaimRegardingAmt(String claimRegardingAmt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimRegardingAmt = claimRegardingAmt;
	}

	@JSON
	@Override
	public String getIndicateCategoryOne() {
		if (_indicateCategoryOne == null) {
			return "";
		}
		else {
			return _indicateCategoryOne;
		}
	}

	@Override
	public void setIndicateCategoryOne(String indicateCategoryOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indicateCategoryOne = indicateCategoryOne;
	}

	@JSON
	@Override
	public String getIndicateCategoryTwo() {
		if (_indicateCategoryTwo == null) {
			return "";
		}
		else {
			return _indicateCategoryTwo;
		}
	}

	@Override
	public void setIndicateCategoryTwo(String indicateCategoryTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indicateCategoryTwo = indicateCategoryTwo;
	}

	@JSON
	@Override
	public String getIndicateCategoryThree() {
		if (_indicateCategoryThree == null) {
			return "";
		}
		else {
			return _indicateCategoryThree;
		}
	}

	@Override
	public void setIndicateCategoryThree(String indicateCategoryThree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indicateCategoryThree = indicateCategoryThree;
	}

	@JSON
	@Override
	public String getIndicateCategoryFour() {
		if (_indicateCategoryFour == null) {
			return "";
		}
		else {
			return _indicateCategoryFour;
		}
	}

	@Override
	public void setIndicateCategoryFour(String indicateCategoryFour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indicateCategoryFour = indicateCategoryFour;
	}

	@JSON
	@Override
	public String getOtherPleaseSpecify() {
		if (_otherPleaseSpecify == null) {
			return "";
		}
		else {
			return _otherPleaseSpecify;
		}
	}

	@Override
	public void setOtherPleaseSpecify(String otherPleaseSpecify) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherPleaseSpecify = otherPleaseSpecify;
	}

	@JSON
	@Override
	public String getClaimSecured() {
		if (_claimSecured == null) {
			return "";
		}
		else {
			return _claimSecured;
		}
	}

	@Override
	public void setClaimSecured(String claimSecured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimSecured = claimSecured;
	}

	@JSON
	@Override
	public String getClaimSecuredOne() {
		if (_claimSecuredOne == null) {
			return "";
		}
		else {
			return _claimSecuredOne;
		}
	}

	@Override
	public void setClaimSecuredOne(String claimSecuredOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimSecuredOne = claimSecuredOne;
	}

	@JSON
	@Override
	public String getClaimDesc() {
		if (_claimDesc == null) {
			return "";
		}
		else {
			return _claimDesc;
		}
	}

	@Override
	public void setClaimDesc(String claimDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimDesc = claimDesc;
	}

	@JSON
	@Override
	public String getAboveNamedCreditor() {
		if (_aboveNamedCreditor == null) {
			return "";
		}
		else {
			return _aboveNamedCreditor;
		}
	}

	@Override
	public void setAboveNamedCreditor(String aboveNamedCreditor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_aboveNamedCreditor = aboveNamedCreditor;
	}

	@JSON
	@Override
	public String getPaymentDetailDesc() {
		if (_paymentDetailDesc == null) {
			return "";
		}
		else {
			return _paymentDetailDesc;
		}
	}

	@Override
	public void setPaymentDetailDesc(String paymentDetailDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentDetailDesc = paymentDetailDesc;
	}

	@JSON
	@Override
	public String getInCaseOfBankruptcy() {
		if (_inCaseOfBankruptcy == null) {
			return "";
		}
		else {
			return _inCaseOfBankruptcy;
		}
	}

	@Override
	public void setInCaseOfBankruptcy(String inCaseOfBankruptcy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inCaseOfBankruptcy = inCaseOfBankruptcy;
	}

	@JSON
	@Override
	public long getOgtApplicationId() {
		return _ogtApplicationId;
	}

	@Override
	public void setOgtApplicationId(long ogtApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtApplicationId = ogtApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOgtApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OgtProofOfClaim.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OgtProofOfClaim toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OgtProofOfClaim>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OgtProofOfClaimImpl ogtProofOfClaimImpl = new OgtProofOfClaimImpl();

		ogtProofOfClaimImpl.setOgtProofOfClaimId(getOgtProofOfClaimId());
		ogtProofOfClaimImpl.setGroupId(getGroupId());
		ogtProofOfClaimImpl.setCompanyId(getCompanyId());
		ogtProofOfClaimImpl.setUserId(getUserId());
		ogtProofOfClaimImpl.setUserName(getUserName());
		ogtProofOfClaimImpl.setCreateDate(getCreateDate());
		ogtProofOfClaimImpl.setModifiedDate(getModifiedDate());
		ogtProofOfClaimImpl.setClaimProofMatter(getClaimProofMatter());
		ogtProofOfClaimImpl.setClaimDebtorName(getClaimDebtorName());
		ogtProofOfClaimImpl.setClaimantName(getClaimantName());
		ogtProofOfClaimImpl.setClaimSentAddress(getClaimSentAddress());
		ogtProofOfClaimImpl.setClaimSentPhoneNum(getClaimSentPhoneNum());
		ogtProofOfClaimImpl.setClaimSentFaxNo(getClaimSentFaxNo());
		ogtProofOfClaimImpl.setClaimSentEmailAddr(getClaimSentEmailAddr());
		ogtProofOfClaimImpl.setClaimCompName(getClaimCompName());
		ogtProofOfClaimImpl.setClaimCertifyCheck(getClaimCertifyCheck());
		ogtProofOfClaimImpl.setClaimCompPosition(getClaimCompPosition());
		ogtProofOfClaimImpl.setClaimName(getClaimName());
		ogtProofOfClaimImpl.setClaimByCredDebtor(getClaimByCredDebtor());
		ogtProofOfClaimImpl.setClaimDateAppli(getClaimDateAppli());
		ogtProofOfClaimImpl.setClaimByDebtTotalVal(getClaimByDebtTotalVal());
		ogtProofOfClaimImpl.setClaimByDebtStatement(getClaimByDebtStatement());
		ogtProofOfClaimImpl.setClaimCategory(getClaimCategory());
		ogtProofOfClaimImpl.setClaimUnsecured(getClaimUnsecured());
		ogtProofOfClaimImpl.setClaimRegardingAmt(getClaimRegardingAmt());
		ogtProofOfClaimImpl.setIndicateCategoryOne(getIndicateCategoryOne());
		ogtProofOfClaimImpl.setIndicateCategoryTwo(getIndicateCategoryTwo());
		ogtProofOfClaimImpl.setIndicateCategoryThree(
			getIndicateCategoryThree());
		ogtProofOfClaimImpl.setIndicateCategoryFour(getIndicateCategoryFour());
		ogtProofOfClaimImpl.setOtherPleaseSpecify(getOtherPleaseSpecify());
		ogtProofOfClaimImpl.setClaimSecured(getClaimSecured());
		ogtProofOfClaimImpl.setClaimSecuredOne(getClaimSecuredOne());
		ogtProofOfClaimImpl.setClaimDesc(getClaimDesc());
		ogtProofOfClaimImpl.setAboveNamedCreditor(getAboveNamedCreditor());
		ogtProofOfClaimImpl.setPaymentDetailDesc(getPaymentDetailDesc());
		ogtProofOfClaimImpl.setInCaseOfBankruptcy(getInCaseOfBankruptcy());
		ogtProofOfClaimImpl.setOgtApplicationId(getOgtApplicationId());

		ogtProofOfClaimImpl.resetOriginalValues();

		return ogtProofOfClaimImpl;
	}

	@Override
	public OgtProofOfClaim cloneWithOriginalValues() {
		OgtProofOfClaimImpl ogtProofOfClaimImpl = new OgtProofOfClaimImpl();

		ogtProofOfClaimImpl.setOgtProofOfClaimId(
			this.<Long>getColumnOriginalValue("ogtProofOfClaimId"));
		ogtProofOfClaimImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ogtProofOfClaimImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ogtProofOfClaimImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ogtProofOfClaimImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ogtProofOfClaimImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ogtProofOfClaimImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ogtProofOfClaimImpl.setClaimProofMatter(
			this.<String>getColumnOriginalValue("claimProofMatter"));
		ogtProofOfClaimImpl.setClaimDebtorName(
			this.<String>getColumnOriginalValue("claimDebtorName"));
		ogtProofOfClaimImpl.setClaimantName(
			this.<String>getColumnOriginalValue("claimantName"));
		ogtProofOfClaimImpl.setClaimSentAddress(
			this.<String>getColumnOriginalValue("claimSentAddress"));
		ogtProofOfClaimImpl.setClaimSentPhoneNum(
			this.<String>getColumnOriginalValue("claimSentPhoneNum"));
		ogtProofOfClaimImpl.setClaimSentFaxNo(
			this.<String>getColumnOriginalValue("claimSentFaxNo"));
		ogtProofOfClaimImpl.setClaimSentEmailAddr(
			this.<String>getColumnOriginalValue("claimSentEmailAddr"));
		ogtProofOfClaimImpl.setClaimCompName(
			this.<String>getColumnOriginalValue("claimCompName"));
		ogtProofOfClaimImpl.setClaimCertifyCheck(
			this.<String>getColumnOriginalValue("claimCertifyCheck"));
		ogtProofOfClaimImpl.setClaimCompPosition(
			this.<String>getColumnOriginalValue("claimCompPosition"));
		ogtProofOfClaimImpl.setClaimName(
			this.<String>getColumnOriginalValue("claimName"));
		ogtProofOfClaimImpl.setClaimByCredDebtor(
			this.<String>getColumnOriginalValue("claimByCredDebtor"));
		ogtProofOfClaimImpl.setClaimDateAppli(
			this.<Date>getColumnOriginalValue("claimDateAppli"));
		ogtProofOfClaimImpl.setClaimByDebtTotalVal(
			this.<String>getColumnOriginalValue("claimByDebtTotalVal"));
		ogtProofOfClaimImpl.setClaimByDebtStatement(
			this.<String>getColumnOriginalValue("claimByDebtStatement"));
		ogtProofOfClaimImpl.setClaimCategory(
			this.<String>getColumnOriginalValue("claimCategory"));
		ogtProofOfClaimImpl.setClaimUnsecured(
			this.<String>getColumnOriginalValue("claimUnsecured"));
		ogtProofOfClaimImpl.setClaimRegardingAmt(
			this.<String>getColumnOriginalValue("claimRegardingAmt"));
		ogtProofOfClaimImpl.setIndicateCategoryOne(
			this.<String>getColumnOriginalValue("indicateCategoryOne"));
		ogtProofOfClaimImpl.setIndicateCategoryTwo(
			this.<String>getColumnOriginalValue("indicateCategoryTwo"));
		ogtProofOfClaimImpl.setIndicateCategoryThree(
			this.<String>getColumnOriginalValue("indicateCategoryThree"));
		ogtProofOfClaimImpl.setIndicateCategoryFour(
			this.<String>getColumnOriginalValue("indicateCategoryFour"));
		ogtProofOfClaimImpl.setOtherPleaseSpecify(
			this.<String>getColumnOriginalValue("otherPleaseSpecify"));
		ogtProofOfClaimImpl.setClaimSecured(
			this.<String>getColumnOriginalValue("claimSecured"));
		ogtProofOfClaimImpl.setClaimSecuredOne(
			this.<String>getColumnOriginalValue("claimSecuredOne"));
		ogtProofOfClaimImpl.setClaimDesc(
			this.<String>getColumnOriginalValue("claimDesc"));
		ogtProofOfClaimImpl.setAboveNamedCreditor(
			this.<String>getColumnOriginalValue("aboveNamedCreditor"));
		ogtProofOfClaimImpl.setPaymentDetailDesc(
			this.<String>getColumnOriginalValue("paymentDetailDesc"));
		ogtProofOfClaimImpl.setInCaseOfBankruptcy(
			this.<String>getColumnOriginalValue("inCaseOfBankruptcy"));
		ogtProofOfClaimImpl.setOgtApplicationId(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));

		return ogtProofOfClaimImpl;
	}

	@Override
	public int compareTo(OgtProofOfClaim ogtProofOfClaim) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ogtProofOfClaim.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OgtProofOfClaim)) {
			return false;
		}

		OgtProofOfClaim ogtProofOfClaim = (OgtProofOfClaim)object;

		long primaryKey = ogtProofOfClaim.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OgtProofOfClaim> toCacheModel() {
		OgtProofOfClaimCacheModel ogtProofOfClaimCacheModel =
			new OgtProofOfClaimCacheModel();

		ogtProofOfClaimCacheModel.ogtProofOfClaimId = getOgtProofOfClaimId();

		ogtProofOfClaimCacheModel.groupId = getGroupId();

		ogtProofOfClaimCacheModel.companyId = getCompanyId();

		ogtProofOfClaimCacheModel.userId = getUserId();

		ogtProofOfClaimCacheModel.userName = getUserName();

		String userName = ogtProofOfClaimCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ogtProofOfClaimCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ogtProofOfClaimCacheModel.createDate = createDate.getTime();
		}
		else {
			ogtProofOfClaimCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ogtProofOfClaimCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ogtProofOfClaimCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ogtProofOfClaimCacheModel.claimProofMatter = getClaimProofMatter();

		String claimProofMatter = ogtProofOfClaimCacheModel.claimProofMatter;

		if ((claimProofMatter != null) && (claimProofMatter.length() == 0)) {
			ogtProofOfClaimCacheModel.claimProofMatter = null;
		}

		ogtProofOfClaimCacheModel.claimDebtorName = getClaimDebtorName();

		String claimDebtorName = ogtProofOfClaimCacheModel.claimDebtorName;

		if ((claimDebtorName != null) && (claimDebtorName.length() == 0)) {
			ogtProofOfClaimCacheModel.claimDebtorName = null;
		}

		ogtProofOfClaimCacheModel.claimantName = getClaimantName();

		String claimantName = ogtProofOfClaimCacheModel.claimantName;

		if ((claimantName != null) && (claimantName.length() == 0)) {
			ogtProofOfClaimCacheModel.claimantName = null;
		}

		ogtProofOfClaimCacheModel.claimSentAddress = getClaimSentAddress();

		String claimSentAddress = ogtProofOfClaimCacheModel.claimSentAddress;

		if ((claimSentAddress != null) && (claimSentAddress.length() == 0)) {
			ogtProofOfClaimCacheModel.claimSentAddress = null;
		}

		ogtProofOfClaimCacheModel.claimSentPhoneNum = getClaimSentPhoneNum();

		String claimSentPhoneNum = ogtProofOfClaimCacheModel.claimSentPhoneNum;

		if ((claimSentPhoneNum != null) && (claimSentPhoneNum.length() == 0)) {
			ogtProofOfClaimCacheModel.claimSentPhoneNum = null;
		}

		ogtProofOfClaimCacheModel.claimSentFaxNo = getClaimSentFaxNo();

		String claimSentFaxNo = ogtProofOfClaimCacheModel.claimSentFaxNo;

		if ((claimSentFaxNo != null) && (claimSentFaxNo.length() == 0)) {
			ogtProofOfClaimCacheModel.claimSentFaxNo = null;
		}

		ogtProofOfClaimCacheModel.claimSentEmailAddr = getClaimSentEmailAddr();

		String claimSentEmailAddr =
			ogtProofOfClaimCacheModel.claimSentEmailAddr;

		if ((claimSentEmailAddr != null) &&
			(claimSentEmailAddr.length() == 0)) {

			ogtProofOfClaimCacheModel.claimSentEmailAddr = null;
		}

		ogtProofOfClaimCacheModel.claimCompName = getClaimCompName();

		String claimCompName = ogtProofOfClaimCacheModel.claimCompName;

		if ((claimCompName != null) && (claimCompName.length() == 0)) {
			ogtProofOfClaimCacheModel.claimCompName = null;
		}

		ogtProofOfClaimCacheModel.claimCertifyCheck = getClaimCertifyCheck();

		String claimCertifyCheck = ogtProofOfClaimCacheModel.claimCertifyCheck;

		if ((claimCertifyCheck != null) && (claimCertifyCheck.length() == 0)) {
			ogtProofOfClaimCacheModel.claimCertifyCheck = null;
		}

		ogtProofOfClaimCacheModel.claimCompPosition = getClaimCompPosition();

		String claimCompPosition = ogtProofOfClaimCacheModel.claimCompPosition;

		if ((claimCompPosition != null) && (claimCompPosition.length() == 0)) {
			ogtProofOfClaimCacheModel.claimCompPosition = null;
		}

		ogtProofOfClaimCacheModel.claimName = getClaimName();

		String claimName = ogtProofOfClaimCacheModel.claimName;

		if ((claimName != null) && (claimName.length() == 0)) {
			ogtProofOfClaimCacheModel.claimName = null;
		}

		ogtProofOfClaimCacheModel.claimByCredDebtor = getClaimByCredDebtor();

		String claimByCredDebtor = ogtProofOfClaimCacheModel.claimByCredDebtor;

		if ((claimByCredDebtor != null) && (claimByCredDebtor.length() == 0)) {
			ogtProofOfClaimCacheModel.claimByCredDebtor = null;
		}

		Date claimDateAppli = getClaimDateAppli();

		if (claimDateAppli != null) {
			ogtProofOfClaimCacheModel.claimDateAppli = claimDateAppli.getTime();
		}
		else {
			ogtProofOfClaimCacheModel.claimDateAppli = Long.MIN_VALUE;
		}

		ogtProofOfClaimCacheModel.claimByDebtTotalVal =
			getClaimByDebtTotalVal();

		String claimByDebtTotalVal =
			ogtProofOfClaimCacheModel.claimByDebtTotalVal;

		if ((claimByDebtTotalVal != null) &&
			(claimByDebtTotalVal.length() == 0)) {

			ogtProofOfClaimCacheModel.claimByDebtTotalVal = null;
		}

		ogtProofOfClaimCacheModel.claimByDebtStatement =
			getClaimByDebtStatement();

		String claimByDebtStatement =
			ogtProofOfClaimCacheModel.claimByDebtStatement;

		if ((claimByDebtStatement != null) &&
			(claimByDebtStatement.length() == 0)) {

			ogtProofOfClaimCacheModel.claimByDebtStatement = null;
		}

		ogtProofOfClaimCacheModel.claimCategory = getClaimCategory();

		String claimCategory = ogtProofOfClaimCacheModel.claimCategory;

		if ((claimCategory != null) && (claimCategory.length() == 0)) {
			ogtProofOfClaimCacheModel.claimCategory = null;
		}

		ogtProofOfClaimCacheModel.claimUnsecured = getClaimUnsecured();

		String claimUnsecured = ogtProofOfClaimCacheModel.claimUnsecured;

		if ((claimUnsecured != null) && (claimUnsecured.length() == 0)) {
			ogtProofOfClaimCacheModel.claimUnsecured = null;
		}

		ogtProofOfClaimCacheModel.claimRegardingAmt = getClaimRegardingAmt();

		String claimRegardingAmt = ogtProofOfClaimCacheModel.claimRegardingAmt;

		if ((claimRegardingAmt != null) && (claimRegardingAmt.length() == 0)) {
			ogtProofOfClaimCacheModel.claimRegardingAmt = null;
		}

		ogtProofOfClaimCacheModel.indicateCategoryOne =
			getIndicateCategoryOne();

		String indicateCategoryOne =
			ogtProofOfClaimCacheModel.indicateCategoryOne;

		if ((indicateCategoryOne != null) &&
			(indicateCategoryOne.length() == 0)) {

			ogtProofOfClaimCacheModel.indicateCategoryOne = null;
		}

		ogtProofOfClaimCacheModel.indicateCategoryTwo =
			getIndicateCategoryTwo();

		String indicateCategoryTwo =
			ogtProofOfClaimCacheModel.indicateCategoryTwo;

		if ((indicateCategoryTwo != null) &&
			(indicateCategoryTwo.length() == 0)) {

			ogtProofOfClaimCacheModel.indicateCategoryTwo = null;
		}

		ogtProofOfClaimCacheModel.indicateCategoryThree =
			getIndicateCategoryThree();

		String indicateCategoryThree =
			ogtProofOfClaimCacheModel.indicateCategoryThree;

		if ((indicateCategoryThree != null) &&
			(indicateCategoryThree.length() == 0)) {

			ogtProofOfClaimCacheModel.indicateCategoryThree = null;
		}

		ogtProofOfClaimCacheModel.indicateCategoryFour =
			getIndicateCategoryFour();

		String indicateCategoryFour =
			ogtProofOfClaimCacheModel.indicateCategoryFour;

		if ((indicateCategoryFour != null) &&
			(indicateCategoryFour.length() == 0)) {

			ogtProofOfClaimCacheModel.indicateCategoryFour = null;
		}

		ogtProofOfClaimCacheModel.otherPleaseSpecify = getOtherPleaseSpecify();

		String otherPleaseSpecify =
			ogtProofOfClaimCacheModel.otherPleaseSpecify;

		if ((otherPleaseSpecify != null) &&
			(otherPleaseSpecify.length() == 0)) {

			ogtProofOfClaimCacheModel.otherPleaseSpecify = null;
		}

		ogtProofOfClaimCacheModel.claimSecured = getClaimSecured();

		String claimSecured = ogtProofOfClaimCacheModel.claimSecured;

		if ((claimSecured != null) && (claimSecured.length() == 0)) {
			ogtProofOfClaimCacheModel.claimSecured = null;
		}

		ogtProofOfClaimCacheModel.claimSecuredOne = getClaimSecuredOne();

		String claimSecuredOne = ogtProofOfClaimCacheModel.claimSecuredOne;

		if ((claimSecuredOne != null) && (claimSecuredOne.length() == 0)) {
			ogtProofOfClaimCacheModel.claimSecuredOne = null;
		}

		ogtProofOfClaimCacheModel.claimDesc = getClaimDesc();

		String claimDesc = ogtProofOfClaimCacheModel.claimDesc;

		if ((claimDesc != null) && (claimDesc.length() == 0)) {
			ogtProofOfClaimCacheModel.claimDesc = null;
		}

		ogtProofOfClaimCacheModel.aboveNamedCreditor = getAboveNamedCreditor();

		String aboveNamedCreditor =
			ogtProofOfClaimCacheModel.aboveNamedCreditor;

		if ((aboveNamedCreditor != null) &&
			(aboveNamedCreditor.length() == 0)) {

			ogtProofOfClaimCacheModel.aboveNamedCreditor = null;
		}

		ogtProofOfClaimCacheModel.paymentDetailDesc = getPaymentDetailDesc();

		String paymentDetailDesc = ogtProofOfClaimCacheModel.paymentDetailDesc;

		if ((paymentDetailDesc != null) && (paymentDetailDesc.length() == 0)) {
			ogtProofOfClaimCacheModel.paymentDetailDesc = null;
		}

		ogtProofOfClaimCacheModel.inCaseOfBankruptcy = getInCaseOfBankruptcy();

		String inCaseOfBankruptcy =
			ogtProofOfClaimCacheModel.inCaseOfBankruptcy;

		if ((inCaseOfBankruptcy != null) &&
			(inCaseOfBankruptcy.length() == 0)) {

			ogtProofOfClaimCacheModel.inCaseOfBankruptcy = null;
		}

		ogtProofOfClaimCacheModel.ogtApplicationId = getOgtApplicationId();

		return ogtProofOfClaimCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OgtProofOfClaim, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OgtProofOfClaim, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtProofOfClaim, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((OgtProofOfClaim)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OgtProofOfClaim>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					OgtProofOfClaim.class, ModelWrapper.class);

	}

	private long _ogtProofOfClaimId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _claimProofMatter;
	private String _claimDebtorName;
	private String _claimantName;
	private String _claimSentAddress;
	private String _claimSentPhoneNum;
	private String _claimSentFaxNo;
	private String _claimSentEmailAddr;
	private String _claimCompName;
	private String _claimCertifyCheck;
	private String _claimCompPosition;
	private String _claimName;
	private String _claimByCredDebtor;
	private Date _claimDateAppli;
	private String _claimByDebtTotalVal;
	private String _claimByDebtStatement;
	private String _claimCategory;
	private String _claimUnsecured;
	private String _claimRegardingAmt;
	private String _indicateCategoryOne;
	private String _indicateCategoryTwo;
	private String _indicateCategoryThree;
	private String _indicateCategoryFour;
	private String _otherPleaseSpecify;
	private String _claimSecured;
	private String _claimSecuredOne;
	private String _claimDesc;
	private String _aboveNamedCreditor;
	private String _paymentDetailDesc;
	private String _inCaseOfBankruptcy;
	private long _ogtApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<OgtProofOfClaim, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OgtProofOfClaim)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ogtProofOfClaimId", _ogtProofOfClaimId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("claimProofMatter", _claimProofMatter);
		_columnOriginalValues.put("claimDebtorName", _claimDebtorName);
		_columnOriginalValues.put("claimantName", _claimantName);
		_columnOriginalValues.put("claimSentAddress", _claimSentAddress);
		_columnOriginalValues.put("claimSentPhoneNum", _claimSentPhoneNum);
		_columnOriginalValues.put("claimSentFaxNo", _claimSentFaxNo);
		_columnOriginalValues.put("claimSentEmailAddr", _claimSentEmailAddr);
		_columnOriginalValues.put("claimCompName", _claimCompName);
		_columnOriginalValues.put("claimCertifyCheck", _claimCertifyCheck);
		_columnOriginalValues.put("claimCompPosition", _claimCompPosition);
		_columnOriginalValues.put("claimName", _claimName);
		_columnOriginalValues.put("claimByCredDebtor", _claimByCredDebtor);
		_columnOriginalValues.put("claimDateAppli", _claimDateAppli);
		_columnOriginalValues.put("claimByDebtTotalVal", _claimByDebtTotalVal);
		_columnOriginalValues.put(
			"claimByDebtStatement", _claimByDebtStatement);
		_columnOriginalValues.put("claimCategory", _claimCategory);
		_columnOriginalValues.put("claimUnsecured", _claimUnsecured);
		_columnOriginalValues.put("claimRegardingAmt", _claimRegardingAmt);
		_columnOriginalValues.put("indicateCategoryOne", _indicateCategoryOne);
		_columnOriginalValues.put("indicateCategoryTwo", _indicateCategoryTwo);
		_columnOriginalValues.put(
			"indicateCategoryThree", _indicateCategoryThree);
		_columnOriginalValues.put(
			"indicateCategoryFour", _indicateCategoryFour);
		_columnOriginalValues.put("otherPleaseSpecify", _otherPleaseSpecify);
		_columnOriginalValues.put("claimSecured", _claimSecured);
		_columnOriginalValues.put("claimSecuredOne", _claimSecuredOne);
		_columnOriginalValues.put("claimDesc", _claimDesc);
		_columnOriginalValues.put("aboveNamedCreditor", _aboveNamedCreditor);
		_columnOriginalValues.put("paymentDetailDesc", _paymentDetailDesc);
		_columnOriginalValues.put("inCaseOfBankruptcy", _inCaseOfBankruptcy);
		_columnOriginalValues.put("ogtApplicationId", _ogtApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ogtProofOfClaimId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("claimProofMatter", 128L);

		columnBitmasks.put("claimDebtorName", 256L);

		columnBitmasks.put("claimantName", 512L);

		columnBitmasks.put("claimSentAddress", 1024L);

		columnBitmasks.put("claimSentPhoneNum", 2048L);

		columnBitmasks.put("claimSentFaxNo", 4096L);

		columnBitmasks.put("claimSentEmailAddr", 8192L);

		columnBitmasks.put("claimCompName", 16384L);

		columnBitmasks.put("claimCertifyCheck", 32768L);

		columnBitmasks.put("claimCompPosition", 65536L);

		columnBitmasks.put("claimName", 131072L);

		columnBitmasks.put("claimByCredDebtor", 262144L);

		columnBitmasks.put("claimDateAppli", 524288L);

		columnBitmasks.put("claimByDebtTotalVal", 1048576L);

		columnBitmasks.put("claimByDebtStatement", 2097152L);

		columnBitmasks.put("claimCategory", 4194304L);

		columnBitmasks.put("claimUnsecured", 8388608L);

		columnBitmasks.put("claimRegardingAmt", 16777216L);

		columnBitmasks.put("indicateCategoryOne", 33554432L);

		columnBitmasks.put("indicateCategoryTwo", 67108864L);

		columnBitmasks.put("indicateCategoryThree", 134217728L);

		columnBitmasks.put("indicateCategoryFour", 268435456L);

		columnBitmasks.put("otherPleaseSpecify", 536870912L);

		columnBitmasks.put("claimSecured", 1073741824L);

		columnBitmasks.put("claimSecuredOne", 2147483648L);

		columnBitmasks.put("claimDesc", 4294967296L);

		columnBitmasks.put("aboveNamedCreditor", 8589934592L);

		columnBitmasks.put("paymentDetailDesc", 17179869184L);

		columnBitmasks.put("inCaseOfBankruptcy", 34359738368L);

		columnBitmasks.put("ogtApplicationId", 68719476736L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OgtProofOfClaim _escapedModel;

}