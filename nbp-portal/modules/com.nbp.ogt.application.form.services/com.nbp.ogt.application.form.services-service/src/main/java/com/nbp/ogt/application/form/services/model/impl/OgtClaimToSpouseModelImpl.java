/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ogt.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ogt.application.form.services.model.OgtClaimToSpouse;
import com.nbp.ogt.application.form.services.model.OgtClaimToSpouseModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OgtClaimToSpouse service. Represents a row in the &quot;nbp_ogt_claim_to_spouse&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OgtClaimToSpouseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OgtClaimToSpouseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OgtClaimToSpouseImpl
 * @generated
 */
@JSON(strict = true)
public class OgtClaimToSpouseModelImpl
	extends BaseModelImpl<OgtClaimToSpouse> implements OgtClaimToSpouseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ogt claim to spouse model instance should use the <code>OgtClaimToSpouse</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ogt_claim_to_spouse";

	public static final Object[][] TABLE_COLUMNS = {
		{"ogtClaimToSpouseId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"spouseDate", Types.TIMESTAMP},
		{"claimSpouseDesc", Types.VARCHAR},
		{"nameCompletionForm", Types.VARCHAR},
		{"nameCompletionDate", Types.TIMESTAMP},
		{"compPersonAddress", Types.VARCHAR},
		{"justicePeaceParish", Types.VARCHAR},
		{"nameJusticeOfPeace", Types.VARCHAR},
		{"nameJusticeDate", Types.TIMESTAMP},
		{"officialAmtClaim", Types.VARCHAR}, {"officialSection", Types.VARCHAR},
		{"officialAmtVoting", Types.VARCHAR},
		{"officialAmtVotingDate", Types.TIMESTAMP},
		{"officialPayment", Types.VARCHAR},
		{"officialPaymentDate", Types.TIMESTAMP},
		{"ogtApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ogtClaimToSpouseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("spouseDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("claimSpouseDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameCompletionForm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameCompletionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("compPersonAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("justicePeaceParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameJusticeOfPeace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameJusticeDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("officialAmtClaim", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officialSection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officialAmtVoting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officialAmtVotingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("officialPayment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officialPaymentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ogtApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ogt_claim_to_spouse (ogtClaimToSpouseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,spouseDate DATE null,claimSpouseDesc VARCHAR(1000) null,nameCompletionForm VARCHAR(75) null,nameCompletionDate DATE null,compPersonAddress VARCHAR(1000) null,justicePeaceParish VARCHAR(75) null,nameJusticeOfPeace VARCHAR(75) null,nameJusticeDate DATE null,officialAmtClaim VARCHAR(75) null,officialSection VARCHAR(75) null,officialAmtVoting VARCHAR(75) null,officialAmtVotingDate DATE null,officialPayment VARCHAR(75) null,officialPaymentDate DATE null,ogtApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ogt_claim_to_spouse";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ogtClaimToSpouse.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ogt_claim_to_spouse.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OGTAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OgtClaimToSpouseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ogtClaimToSpouseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOgtClaimToSpouseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ogtClaimToSpouseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OgtClaimToSpouse.class;
	}

	@Override
	public String getModelClassName() {
		return OgtClaimToSpouse.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OgtClaimToSpouse, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OgtClaimToSpouse, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtClaimToSpouse, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OgtClaimToSpouse)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OgtClaimToSpouse, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OgtClaimToSpouse, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OgtClaimToSpouse)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OgtClaimToSpouse, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OgtClaimToSpouse, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<OgtClaimToSpouse, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<OgtClaimToSpouse, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<OgtClaimToSpouse, Object>>();

			attributeGetterFunctions.put(
				"ogtClaimToSpouseId", OgtClaimToSpouse::getOgtClaimToSpouseId);
			attributeGetterFunctions.put(
				"groupId", OgtClaimToSpouse::getGroupId);
			attributeGetterFunctions.put(
				"companyId", OgtClaimToSpouse::getCompanyId);
			attributeGetterFunctions.put("userId", OgtClaimToSpouse::getUserId);
			attributeGetterFunctions.put(
				"userName", OgtClaimToSpouse::getUserName);
			attributeGetterFunctions.put(
				"createDate", OgtClaimToSpouse::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", OgtClaimToSpouse::getModifiedDate);
			attributeGetterFunctions.put(
				"spouseDate", OgtClaimToSpouse::getSpouseDate);
			attributeGetterFunctions.put(
				"claimSpouseDesc", OgtClaimToSpouse::getClaimSpouseDesc);
			attributeGetterFunctions.put(
				"nameCompletionForm", OgtClaimToSpouse::getNameCompletionForm);
			attributeGetterFunctions.put(
				"nameCompletionDate", OgtClaimToSpouse::getNameCompletionDate);
			attributeGetterFunctions.put(
				"compPersonAddress", OgtClaimToSpouse::getCompPersonAddress);
			attributeGetterFunctions.put(
				"justicePeaceParish", OgtClaimToSpouse::getJusticePeaceParish);
			attributeGetterFunctions.put(
				"nameJusticeOfPeace", OgtClaimToSpouse::getNameJusticeOfPeace);
			attributeGetterFunctions.put(
				"nameJusticeDate", OgtClaimToSpouse::getNameJusticeDate);
			attributeGetterFunctions.put(
				"officialAmtClaim", OgtClaimToSpouse::getOfficialAmtClaim);
			attributeGetterFunctions.put(
				"officialSection", OgtClaimToSpouse::getOfficialSection);
			attributeGetterFunctions.put(
				"officialAmtVoting", OgtClaimToSpouse::getOfficialAmtVoting);
			attributeGetterFunctions.put(
				"officialAmtVotingDate",
				OgtClaimToSpouse::getOfficialAmtVotingDate);
			attributeGetterFunctions.put(
				"officialPayment", OgtClaimToSpouse::getOfficialPayment);
			attributeGetterFunctions.put(
				"officialPaymentDate",
				OgtClaimToSpouse::getOfficialPaymentDate);
			attributeGetterFunctions.put(
				"ogtApplicationId", OgtClaimToSpouse::getOgtApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<OgtClaimToSpouse, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<OgtClaimToSpouse, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<OgtClaimToSpouse, ?>>();

			attributeSetterBiConsumers.put(
				"ogtClaimToSpouseId",
				(BiConsumer<OgtClaimToSpouse, Long>)
					OgtClaimToSpouse::setOgtClaimToSpouseId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<OgtClaimToSpouse, Long>)
					OgtClaimToSpouse::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<OgtClaimToSpouse, Long>)
					OgtClaimToSpouse::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<OgtClaimToSpouse, Long>)
					OgtClaimToSpouse::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<OgtClaimToSpouse, Date>)
					OgtClaimToSpouse::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<OgtClaimToSpouse, Date>)
					OgtClaimToSpouse::setModifiedDate);
			attributeSetterBiConsumers.put(
				"spouseDate",
				(BiConsumer<OgtClaimToSpouse, Date>)
					OgtClaimToSpouse::setSpouseDate);
			attributeSetterBiConsumers.put(
				"claimSpouseDesc",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setClaimSpouseDesc);
			attributeSetterBiConsumers.put(
				"nameCompletionForm",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setNameCompletionForm);
			attributeSetterBiConsumers.put(
				"nameCompletionDate",
				(BiConsumer<OgtClaimToSpouse, Date>)
					OgtClaimToSpouse::setNameCompletionDate);
			attributeSetterBiConsumers.put(
				"compPersonAddress",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setCompPersonAddress);
			attributeSetterBiConsumers.put(
				"justicePeaceParish",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setJusticePeaceParish);
			attributeSetterBiConsumers.put(
				"nameJusticeOfPeace",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setNameJusticeOfPeace);
			attributeSetterBiConsumers.put(
				"nameJusticeDate",
				(BiConsumer<OgtClaimToSpouse, Date>)
					OgtClaimToSpouse::setNameJusticeDate);
			attributeSetterBiConsumers.put(
				"officialAmtClaim",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setOfficialAmtClaim);
			attributeSetterBiConsumers.put(
				"officialSection",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setOfficialSection);
			attributeSetterBiConsumers.put(
				"officialAmtVoting",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setOfficialAmtVoting);
			attributeSetterBiConsumers.put(
				"officialAmtVotingDate",
				(BiConsumer<OgtClaimToSpouse, Date>)
					OgtClaimToSpouse::setOfficialAmtVotingDate);
			attributeSetterBiConsumers.put(
				"officialPayment",
				(BiConsumer<OgtClaimToSpouse, String>)
					OgtClaimToSpouse::setOfficialPayment);
			attributeSetterBiConsumers.put(
				"officialPaymentDate",
				(BiConsumer<OgtClaimToSpouse, Date>)
					OgtClaimToSpouse::setOfficialPaymentDate);
			attributeSetterBiConsumers.put(
				"ogtApplicationId",
				(BiConsumer<OgtClaimToSpouse, Long>)
					OgtClaimToSpouse::setOgtApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getOgtClaimToSpouseId() {
		return _ogtClaimToSpouseId;
	}

	@Override
	public void setOgtClaimToSpouseId(long ogtClaimToSpouseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtClaimToSpouseId = ogtClaimToSpouseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getSpouseDate() {
		return _spouseDate;
	}

	@Override
	public void setSpouseDate(Date spouseDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseDate = spouseDate;
	}

	@JSON
	@Override
	public String getClaimSpouseDesc() {
		if (_claimSpouseDesc == null) {
			return "";
		}
		else {
			return _claimSpouseDesc;
		}
	}

	@Override
	public void setClaimSpouseDesc(String claimSpouseDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimSpouseDesc = claimSpouseDesc;
	}

	@JSON
	@Override
	public String getNameCompletionForm() {
		if (_nameCompletionForm == null) {
			return "";
		}
		else {
			return _nameCompletionForm;
		}
	}

	@Override
	public void setNameCompletionForm(String nameCompletionForm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameCompletionForm = nameCompletionForm;
	}

	@JSON
	@Override
	public Date getNameCompletionDate() {
		return _nameCompletionDate;
	}

	@Override
	public void setNameCompletionDate(Date nameCompletionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameCompletionDate = nameCompletionDate;
	}

	@JSON
	@Override
	public String getCompPersonAddress() {
		if (_compPersonAddress == null) {
			return "";
		}
		else {
			return _compPersonAddress;
		}
	}

	@Override
	public void setCompPersonAddress(String compPersonAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_compPersonAddress = compPersonAddress;
	}

	@JSON
	@Override
	public String getJusticePeaceParish() {
		if (_justicePeaceParish == null) {
			return "";
		}
		else {
			return _justicePeaceParish;
		}
	}

	@Override
	public void setJusticePeaceParish(String justicePeaceParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_justicePeaceParish = justicePeaceParish;
	}

	@JSON
	@Override
	public String getNameJusticeOfPeace() {
		if (_nameJusticeOfPeace == null) {
			return "";
		}
		else {
			return _nameJusticeOfPeace;
		}
	}

	@Override
	public void setNameJusticeOfPeace(String nameJusticeOfPeace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameJusticeOfPeace = nameJusticeOfPeace;
	}

	@JSON
	@Override
	public Date getNameJusticeDate() {
		return _nameJusticeDate;
	}

	@Override
	public void setNameJusticeDate(Date nameJusticeDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameJusticeDate = nameJusticeDate;
	}

	@JSON
	@Override
	public String getOfficialAmtClaim() {
		if (_officialAmtClaim == null) {
			return "";
		}
		else {
			return _officialAmtClaim;
		}
	}

	@Override
	public void setOfficialAmtClaim(String officialAmtClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialAmtClaim = officialAmtClaim;
	}

	@JSON
	@Override
	public String getOfficialSection() {
		if (_officialSection == null) {
			return "";
		}
		else {
			return _officialSection;
		}
	}

	@Override
	public void setOfficialSection(String officialSection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialSection = officialSection;
	}

	@JSON
	@Override
	public String getOfficialAmtVoting() {
		if (_officialAmtVoting == null) {
			return "";
		}
		else {
			return _officialAmtVoting;
		}
	}

	@Override
	public void setOfficialAmtVoting(String officialAmtVoting) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialAmtVoting = officialAmtVoting;
	}

	@JSON
	@Override
	public Date getOfficialAmtVotingDate() {
		return _officialAmtVotingDate;
	}

	@Override
	public void setOfficialAmtVotingDate(Date officialAmtVotingDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialAmtVotingDate = officialAmtVotingDate;
	}

	@JSON
	@Override
	public String getOfficialPayment() {
		if (_officialPayment == null) {
			return "";
		}
		else {
			return _officialPayment;
		}
	}

	@Override
	public void setOfficialPayment(String officialPayment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialPayment = officialPayment;
	}

	@JSON
	@Override
	public Date getOfficialPaymentDate() {
		return _officialPaymentDate;
	}

	@Override
	public void setOfficialPaymentDate(Date officialPaymentDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialPaymentDate = officialPaymentDate;
	}

	@JSON
	@Override
	public long getOgtApplicationId() {
		return _ogtApplicationId;
	}

	@Override
	public void setOgtApplicationId(long ogtApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtApplicationId = ogtApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOgtApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OgtClaimToSpouse.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OgtClaimToSpouse toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OgtClaimToSpouse>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OgtClaimToSpouseImpl ogtClaimToSpouseImpl = new OgtClaimToSpouseImpl();

		ogtClaimToSpouseImpl.setOgtClaimToSpouseId(getOgtClaimToSpouseId());
		ogtClaimToSpouseImpl.setGroupId(getGroupId());
		ogtClaimToSpouseImpl.setCompanyId(getCompanyId());
		ogtClaimToSpouseImpl.setUserId(getUserId());
		ogtClaimToSpouseImpl.setUserName(getUserName());
		ogtClaimToSpouseImpl.setCreateDate(getCreateDate());
		ogtClaimToSpouseImpl.setModifiedDate(getModifiedDate());
		ogtClaimToSpouseImpl.setSpouseDate(getSpouseDate());
		ogtClaimToSpouseImpl.setClaimSpouseDesc(getClaimSpouseDesc());
		ogtClaimToSpouseImpl.setNameCompletionForm(getNameCompletionForm());
		ogtClaimToSpouseImpl.setNameCompletionDate(getNameCompletionDate());
		ogtClaimToSpouseImpl.setCompPersonAddress(getCompPersonAddress());
		ogtClaimToSpouseImpl.setJusticePeaceParish(getJusticePeaceParish());
		ogtClaimToSpouseImpl.setNameJusticeOfPeace(getNameJusticeOfPeace());
		ogtClaimToSpouseImpl.setNameJusticeDate(getNameJusticeDate());
		ogtClaimToSpouseImpl.setOfficialAmtClaim(getOfficialAmtClaim());
		ogtClaimToSpouseImpl.setOfficialSection(getOfficialSection());
		ogtClaimToSpouseImpl.setOfficialAmtVoting(getOfficialAmtVoting());
		ogtClaimToSpouseImpl.setOfficialAmtVotingDate(
			getOfficialAmtVotingDate());
		ogtClaimToSpouseImpl.setOfficialPayment(getOfficialPayment());
		ogtClaimToSpouseImpl.setOfficialPaymentDate(getOfficialPaymentDate());
		ogtClaimToSpouseImpl.setOgtApplicationId(getOgtApplicationId());

		ogtClaimToSpouseImpl.resetOriginalValues();

		return ogtClaimToSpouseImpl;
	}

	@Override
	public OgtClaimToSpouse cloneWithOriginalValues() {
		OgtClaimToSpouseImpl ogtClaimToSpouseImpl = new OgtClaimToSpouseImpl();

		ogtClaimToSpouseImpl.setOgtClaimToSpouseId(
			this.<Long>getColumnOriginalValue("ogtClaimToSpouseId"));
		ogtClaimToSpouseImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ogtClaimToSpouseImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ogtClaimToSpouseImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ogtClaimToSpouseImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ogtClaimToSpouseImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ogtClaimToSpouseImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ogtClaimToSpouseImpl.setSpouseDate(
			this.<Date>getColumnOriginalValue("spouseDate"));
		ogtClaimToSpouseImpl.setClaimSpouseDesc(
			this.<String>getColumnOriginalValue("claimSpouseDesc"));
		ogtClaimToSpouseImpl.setNameCompletionForm(
			this.<String>getColumnOriginalValue("nameCompletionForm"));
		ogtClaimToSpouseImpl.setNameCompletionDate(
			this.<Date>getColumnOriginalValue("nameCompletionDate"));
		ogtClaimToSpouseImpl.setCompPersonAddress(
			this.<String>getColumnOriginalValue("compPersonAddress"));
		ogtClaimToSpouseImpl.setJusticePeaceParish(
			this.<String>getColumnOriginalValue("justicePeaceParish"));
		ogtClaimToSpouseImpl.setNameJusticeOfPeace(
			this.<String>getColumnOriginalValue("nameJusticeOfPeace"));
		ogtClaimToSpouseImpl.setNameJusticeDate(
			this.<Date>getColumnOriginalValue("nameJusticeDate"));
		ogtClaimToSpouseImpl.setOfficialAmtClaim(
			this.<String>getColumnOriginalValue("officialAmtClaim"));
		ogtClaimToSpouseImpl.setOfficialSection(
			this.<String>getColumnOriginalValue("officialSection"));
		ogtClaimToSpouseImpl.setOfficialAmtVoting(
			this.<String>getColumnOriginalValue("officialAmtVoting"));
		ogtClaimToSpouseImpl.setOfficialAmtVotingDate(
			this.<Date>getColumnOriginalValue("officialAmtVotingDate"));
		ogtClaimToSpouseImpl.setOfficialPayment(
			this.<String>getColumnOriginalValue("officialPayment"));
		ogtClaimToSpouseImpl.setOfficialPaymentDate(
			this.<Date>getColumnOriginalValue("officialPaymentDate"));
		ogtClaimToSpouseImpl.setOgtApplicationId(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));

		return ogtClaimToSpouseImpl;
	}

	@Override
	public int compareTo(OgtClaimToSpouse ogtClaimToSpouse) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ogtClaimToSpouse.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OgtClaimToSpouse)) {
			return false;
		}

		OgtClaimToSpouse ogtClaimToSpouse = (OgtClaimToSpouse)object;

		long primaryKey = ogtClaimToSpouse.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OgtClaimToSpouse> toCacheModel() {
		OgtClaimToSpouseCacheModel ogtClaimToSpouseCacheModel =
			new OgtClaimToSpouseCacheModel();

		ogtClaimToSpouseCacheModel.ogtClaimToSpouseId = getOgtClaimToSpouseId();

		ogtClaimToSpouseCacheModel.groupId = getGroupId();

		ogtClaimToSpouseCacheModel.companyId = getCompanyId();

		ogtClaimToSpouseCacheModel.userId = getUserId();

		ogtClaimToSpouseCacheModel.userName = getUserName();

		String userName = ogtClaimToSpouseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ogtClaimToSpouseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ogtClaimToSpouseCacheModel.createDate = createDate.getTime();
		}
		else {
			ogtClaimToSpouseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ogtClaimToSpouseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ogtClaimToSpouseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date spouseDate = getSpouseDate();

		if (spouseDate != null) {
			ogtClaimToSpouseCacheModel.spouseDate = spouseDate.getTime();
		}
		else {
			ogtClaimToSpouseCacheModel.spouseDate = Long.MIN_VALUE;
		}

		ogtClaimToSpouseCacheModel.claimSpouseDesc = getClaimSpouseDesc();

		String claimSpouseDesc = ogtClaimToSpouseCacheModel.claimSpouseDesc;

		if ((claimSpouseDesc != null) && (claimSpouseDesc.length() == 0)) {
			ogtClaimToSpouseCacheModel.claimSpouseDesc = null;
		}

		ogtClaimToSpouseCacheModel.nameCompletionForm = getNameCompletionForm();

		String nameCompletionForm =
			ogtClaimToSpouseCacheModel.nameCompletionForm;

		if ((nameCompletionForm != null) &&
			(nameCompletionForm.length() == 0)) {

			ogtClaimToSpouseCacheModel.nameCompletionForm = null;
		}

		Date nameCompletionDate = getNameCompletionDate();

		if (nameCompletionDate != null) {
			ogtClaimToSpouseCacheModel.nameCompletionDate =
				nameCompletionDate.getTime();
		}
		else {
			ogtClaimToSpouseCacheModel.nameCompletionDate = Long.MIN_VALUE;
		}

		ogtClaimToSpouseCacheModel.compPersonAddress = getCompPersonAddress();

		String compPersonAddress = ogtClaimToSpouseCacheModel.compPersonAddress;

		if ((compPersonAddress != null) && (compPersonAddress.length() == 0)) {
			ogtClaimToSpouseCacheModel.compPersonAddress = null;
		}

		ogtClaimToSpouseCacheModel.justicePeaceParish = getJusticePeaceParish();

		String justicePeaceParish =
			ogtClaimToSpouseCacheModel.justicePeaceParish;

		if ((justicePeaceParish != null) &&
			(justicePeaceParish.length() == 0)) {

			ogtClaimToSpouseCacheModel.justicePeaceParish = null;
		}

		ogtClaimToSpouseCacheModel.nameJusticeOfPeace = getNameJusticeOfPeace();

		String nameJusticeOfPeace =
			ogtClaimToSpouseCacheModel.nameJusticeOfPeace;

		if ((nameJusticeOfPeace != null) &&
			(nameJusticeOfPeace.length() == 0)) {

			ogtClaimToSpouseCacheModel.nameJusticeOfPeace = null;
		}

		Date nameJusticeDate = getNameJusticeDate();

		if (nameJusticeDate != null) {
			ogtClaimToSpouseCacheModel.nameJusticeDate =
				nameJusticeDate.getTime();
		}
		else {
			ogtClaimToSpouseCacheModel.nameJusticeDate = Long.MIN_VALUE;
		}

		ogtClaimToSpouseCacheModel.officialAmtClaim = getOfficialAmtClaim();

		String officialAmtClaim = ogtClaimToSpouseCacheModel.officialAmtClaim;

		if ((officialAmtClaim != null) && (officialAmtClaim.length() == 0)) {
			ogtClaimToSpouseCacheModel.officialAmtClaim = null;
		}

		ogtClaimToSpouseCacheModel.officialSection = getOfficialSection();

		String officialSection = ogtClaimToSpouseCacheModel.officialSection;

		if ((officialSection != null) && (officialSection.length() == 0)) {
			ogtClaimToSpouseCacheModel.officialSection = null;
		}

		ogtClaimToSpouseCacheModel.officialAmtVoting = getOfficialAmtVoting();

		String officialAmtVoting = ogtClaimToSpouseCacheModel.officialAmtVoting;

		if ((officialAmtVoting != null) && (officialAmtVoting.length() == 0)) {
			ogtClaimToSpouseCacheModel.officialAmtVoting = null;
		}

		Date officialAmtVotingDate = getOfficialAmtVotingDate();

		if (officialAmtVotingDate != null) {
			ogtClaimToSpouseCacheModel.officialAmtVotingDate =
				officialAmtVotingDate.getTime();
		}
		else {
			ogtClaimToSpouseCacheModel.officialAmtVotingDate = Long.MIN_VALUE;
		}

		ogtClaimToSpouseCacheModel.officialPayment = getOfficialPayment();

		String officialPayment = ogtClaimToSpouseCacheModel.officialPayment;

		if ((officialPayment != null) && (officialPayment.length() == 0)) {
			ogtClaimToSpouseCacheModel.officialPayment = null;
		}

		Date officialPaymentDate = getOfficialPaymentDate();

		if (officialPaymentDate != null) {
			ogtClaimToSpouseCacheModel.officialPaymentDate =
				officialPaymentDate.getTime();
		}
		else {
			ogtClaimToSpouseCacheModel.officialPaymentDate = Long.MIN_VALUE;
		}

		ogtClaimToSpouseCacheModel.ogtApplicationId = getOgtApplicationId();

		return ogtClaimToSpouseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OgtClaimToSpouse, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OgtClaimToSpouse, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtClaimToSpouse, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(OgtClaimToSpouse)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OgtClaimToSpouse>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					OgtClaimToSpouse.class, ModelWrapper.class);

	}

	private long _ogtClaimToSpouseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _spouseDate;
	private String _claimSpouseDesc;
	private String _nameCompletionForm;
	private Date _nameCompletionDate;
	private String _compPersonAddress;
	private String _justicePeaceParish;
	private String _nameJusticeOfPeace;
	private Date _nameJusticeDate;
	private String _officialAmtClaim;
	private String _officialSection;
	private String _officialAmtVoting;
	private Date _officialAmtVotingDate;
	private String _officialPayment;
	private Date _officialPaymentDate;
	private long _ogtApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<OgtClaimToSpouse, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OgtClaimToSpouse)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ogtClaimToSpouseId", _ogtClaimToSpouseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("spouseDate", _spouseDate);
		_columnOriginalValues.put("claimSpouseDesc", _claimSpouseDesc);
		_columnOriginalValues.put("nameCompletionForm", _nameCompletionForm);
		_columnOriginalValues.put("nameCompletionDate", _nameCompletionDate);
		_columnOriginalValues.put("compPersonAddress", _compPersonAddress);
		_columnOriginalValues.put("justicePeaceParish", _justicePeaceParish);
		_columnOriginalValues.put("nameJusticeOfPeace", _nameJusticeOfPeace);
		_columnOriginalValues.put("nameJusticeDate", _nameJusticeDate);
		_columnOriginalValues.put("officialAmtClaim", _officialAmtClaim);
		_columnOriginalValues.put("officialSection", _officialSection);
		_columnOriginalValues.put("officialAmtVoting", _officialAmtVoting);
		_columnOriginalValues.put(
			"officialAmtVotingDate", _officialAmtVotingDate);
		_columnOriginalValues.put("officialPayment", _officialPayment);
		_columnOriginalValues.put("officialPaymentDate", _officialPaymentDate);
		_columnOriginalValues.put("ogtApplicationId", _ogtApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ogtClaimToSpouseId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("spouseDate", 128L);

		columnBitmasks.put("claimSpouseDesc", 256L);

		columnBitmasks.put("nameCompletionForm", 512L);

		columnBitmasks.put("nameCompletionDate", 1024L);

		columnBitmasks.put("compPersonAddress", 2048L);

		columnBitmasks.put("justicePeaceParish", 4096L);

		columnBitmasks.put("nameJusticeOfPeace", 8192L);

		columnBitmasks.put("nameJusticeDate", 16384L);

		columnBitmasks.put("officialAmtClaim", 32768L);

		columnBitmasks.put("officialSection", 65536L);

		columnBitmasks.put("officialAmtVoting", 131072L);

		columnBitmasks.put("officialAmtVotingDate", 262144L);

		columnBitmasks.put("officialPayment", 524288L);

		columnBitmasks.put("officialPaymentDate", 1048576L);

		columnBitmasks.put("ogtApplicationId", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OgtClaimToSpouse _escapedModel;

}