/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ogt.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ogt.application.form.services.model.OgtInsolventPersonDetail;
import com.nbp.ogt.application.form.services.model.OgtInsolventPersonDetailModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OgtInsolventPersonDetail service. Represents a row in the &quot;nbp_ogt_insolvent_person_det&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OgtInsolventPersonDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OgtInsolventPersonDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OgtInsolventPersonDetailImpl
 * @generated
 */
@JSON(strict = true)
public class OgtInsolventPersonDetailModelImpl
	extends BaseModelImpl<OgtInsolventPersonDetail>
	implements OgtInsolventPersonDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ogt insolvent person detail model instance should use the <code>OgtInsolventPersonDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ogt_insolvent_person_det";

	public static final Object[][] TABLE_COLUMNS = {
		{"ogtInsolventPersonDetailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"natureOfInsolvent", Types.VARCHAR},
		{"insolventFirstName", Types.VARCHAR},
		{"insolventLastName", Types.VARCHAR},
		{"insolventCompanyName", Types.VARCHAR},
		{"insolventDebtStatute", Types.VARCHAR},
		{"ogtApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ogtInsolventPersonDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("natureOfInsolvent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insolventFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insolventLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insolventCompanyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insolventDebtStatute", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ogtApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ogt_insolvent_person_det (ogtInsolventPersonDetailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,natureOfInsolvent VARCHAR(75) null,insolventFirstName VARCHAR(75) null,insolventLastName VARCHAR(75) null,insolventCompanyName VARCHAR(75) null,insolventDebtStatute VARCHAR(75) null,ogtApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ogt_insolvent_person_det";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ogtInsolventPersonDetail.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ogt_insolvent_person_det.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OGTAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OgtInsolventPersonDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ogtInsolventPersonDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOgtInsolventPersonDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ogtInsolventPersonDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OgtInsolventPersonDetail.class;
	}

	@Override
	public String getModelClassName() {
		return OgtInsolventPersonDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OgtInsolventPersonDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OgtInsolventPersonDetail, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtInsolventPersonDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OgtInsolventPersonDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OgtInsolventPersonDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OgtInsolventPersonDetail, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OgtInsolventPersonDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OgtInsolventPersonDetail, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OgtInsolventPersonDetail, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<OgtInsolventPersonDetail, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<OgtInsolventPersonDetail, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<OgtInsolventPersonDetail, Object>>();

			attributeGetterFunctions.put(
				"ogtInsolventPersonDetailId",
				OgtInsolventPersonDetail::getOgtInsolventPersonDetailId);
			attributeGetterFunctions.put(
				"groupId", OgtInsolventPersonDetail::getGroupId);
			attributeGetterFunctions.put(
				"companyId", OgtInsolventPersonDetail::getCompanyId);
			attributeGetterFunctions.put(
				"userId", OgtInsolventPersonDetail::getUserId);
			attributeGetterFunctions.put(
				"userName", OgtInsolventPersonDetail::getUserName);
			attributeGetterFunctions.put(
				"createDate", OgtInsolventPersonDetail::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", OgtInsolventPersonDetail::getModifiedDate);
			attributeGetterFunctions.put(
				"natureOfInsolvent",
				OgtInsolventPersonDetail::getNatureOfInsolvent);
			attributeGetterFunctions.put(
				"insolventFirstName",
				OgtInsolventPersonDetail::getInsolventFirstName);
			attributeGetterFunctions.put(
				"insolventLastName",
				OgtInsolventPersonDetail::getInsolventLastName);
			attributeGetterFunctions.put(
				"insolventCompanyName",
				OgtInsolventPersonDetail::getInsolventCompanyName);
			attributeGetterFunctions.put(
				"insolventDebtStatute",
				OgtInsolventPersonDetail::getInsolventDebtStatute);
			attributeGetterFunctions.put(
				"ogtApplicationId",
				OgtInsolventPersonDetail::getOgtApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<OgtInsolventPersonDetail, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<OgtInsolventPersonDetail, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<OgtInsolventPersonDetail, ?>>();

			attributeSetterBiConsumers.put(
				"ogtInsolventPersonDetailId",
				(BiConsumer<OgtInsolventPersonDetail, Long>)
					OgtInsolventPersonDetail::setOgtInsolventPersonDetailId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<OgtInsolventPersonDetail, Long>)
					OgtInsolventPersonDetail::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<OgtInsolventPersonDetail, Long>)
					OgtInsolventPersonDetail::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<OgtInsolventPersonDetail, Long>)
					OgtInsolventPersonDetail::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<OgtInsolventPersonDetail, String>)
					OgtInsolventPersonDetail::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<OgtInsolventPersonDetail, Date>)
					OgtInsolventPersonDetail::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<OgtInsolventPersonDetail, Date>)
					OgtInsolventPersonDetail::setModifiedDate);
			attributeSetterBiConsumers.put(
				"natureOfInsolvent",
				(BiConsumer<OgtInsolventPersonDetail, String>)
					OgtInsolventPersonDetail::setNatureOfInsolvent);
			attributeSetterBiConsumers.put(
				"insolventFirstName",
				(BiConsumer<OgtInsolventPersonDetail, String>)
					OgtInsolventPersonDetail::setInsolventFirstName);
			attributeSetterBiConsumers.put(
				"insolventLastName",
				(BiConsumer<OgtInsolventPersonDetail, String>)
					OgtInsolventPersonDetail::setInsolventLastName);
			attributeSetterBiConsumers.put(
				"insolventCompanyName",
				(BiConsumer<OgtInsolventPersonDetail, String>)
					OgtInsolventPersonDetail::setInsolventCompanyName);
			attributeSetterBiConsumers.put(
				"insolventDebtStatute",
				(BiConsumer<OgtInsolventPersonDetail, String>)
					OgtInsolventPersonDetail::setInsolventDebtStatute);
			attributeSetterBiConsumers.put(
				"ogtApplicationId",
				(BiConsumer<OgtInsolventPersonDetail, Long>)
					OgtInsolventPersonDetail::setOgtApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getOgtInsolventPersonDetailId() {
		return _ogtInsolventPersonDetailId;
	}

	@Override
	public void setOgtInsolventPersonDetailId(long ogtInsolventPersonDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtInsolventPersonDetailId = ogtInsolventPersonDetailId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNatureOfInsolvent() {
		if (_natureOfInsolvent == null) {
			return "";
		}
		else {
			return _natureOfInsolvent;
		}
	}

	@Override
	public void setNatureOfInsolvent(String natureOfInsolvent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_natureOfInsolvent = natureOfInsolvent;
	}

	@JSON
	@Override
	public String getInsolventFirstName() {
		if (_insolventFirstName == null) {
			return "";
		}
		else {
			return _insolventFirstName;
		}
	}

	@Override
	public void setInsolventFirstName(String insolventFirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insolventFirstName = insolventFirstName;
	}

	@JSON
	@Override
	public String getInsolventLastName() {
		if (_insolventLastName == null) {
			return "";
		}
		else {
			return _insolventLastName;
		}
	}

	@Override
	public void setInsolventLastName(String insolventLastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insolventLastName = insolventLastName;
	}

	@JSON
	@Override
	public String getInsolventCompanyName() {
		if (_insolventCompanyName == null) {
			return "";
		}
		else {
			return _insolventCompanyName;
		}
	}

	@Override
	public void setInsolventCompanyName(String insolventCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insolventCompanyName = insolventCompanyName;
	}

	@JSON
	@Override
	public String getInsolventDebtStatute() {
		if (_insolventDebtStatute == null) {
			return "";
		}
		else {
			return _insolventDebtStatute;
		}
	}

	@Override
	public void setInsolventDebtStatute(String insolventDebtStatute) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insolventDebtStatute = insolventDebtStatute;
	}

	@JSON
	@Override
	public long getOgtApplicationId() {
		return _ogtApplicationId;
	}

	@Override
	public void setOgtApplicationId(long ogtApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtApplicationId = ogtApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOgtApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OgtInsolventPersonDetail.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OgtInsolventPersonDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OgtInsolventPersonDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OgtInsolventPersonDetailImpl ogtInsolventPersonDetailImpl =
			new OgtInsolventPersonDetailImpl();

		ogtInsolventPersonDetailImpl.setOgtInsolventPersonDetailId(
			getOgtInsolventPersonDetailId());
		ogtInsolventPersonDetailImpl.setGroupId(getGroupId());
		ogtInsolventPersonDetailImpl.setCompanyId(getCompanyId());
		ogtInsolventPersonDetailImpl.setUserId(getUserId());
		ogtInsolventPersonDetailImpl.setUserName(getUserName());
		ogtInsolventPersonDetailImpl.setCreateDate(getCreateDate());
		ogtInsolventPersonDetailImpl.setModifiedDate(getModifiedDate());
		ogtInsolventPersonDetailImpl.setNatureOfInsolvent(
			getNatureOfInsolvent());
		ogtInsolventPersonDetailImpl.setInsolventFirstName(
			getInsolventFirstName());
		ogtInsolventPersonDetailImpl.setInsolventLastName(
			getInsolventLastName());
		ogtInsolventPersonDetailImpl.setInsolventCompanyName(
			getInsolventCompanyName());
		ogtInsolventPersonDetailImpl.setInsolventDebtStatute(
			getInsolventDebtStatute());
		ogtInsolventPersonDetailImpl.setOgtApplicationId(getOgtApplicationId());

		ogtInsolventPersonDetailImpl.resetOriginalValues();

		return ogtInsolventPersonDetailImpl;
	}

	@Override
	public OgtInsolventPersonDetail cloneWithOriginalValues() {
		OgtInsolventPersonDetailImpl ogtInsolventPersonDetailImpl =
			new OgtInsolventPersonDetailImpl();

		ogtInsolventPersonDetailImpl.setOgtInsolventPersonDetailId(
			this.<Long>getColumnOriginalValue("ogtInsolventPersonDetailId"));
		ogtInsolventPersonDetailImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ogtInsolventPersonDetailImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ogtInsolventPersonDetailImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ogtInsolventPersonDetailImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ogtInsolventPersonDetailImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ogtInsolventPersonDetailImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ogtInsolventPersonDetailImpl.setNatureOfInsolvent(
			this.<String>getColumnOriginalValue("natureOfInsolvent"));
		ogtInsolventPersonDetailImpl.setInsolventFirstName(
			this.<String>getColumnOriginalValue("insolventFirstName"));
		ogtInsolventPersonDetailImpl.setInsolventLastName(
			this.<String>getColumnOriginalValue("insolventLastName"));
		ogtInsolventPersonDetailImpl.setInsolventCompanyName(
			this.<String>getColumnOriginalValue("insolventCompanyName"));
		ogtInsolventPersonDetailImpl.setInsolventDebtStatute(
			this.<String>getColumnOriginalValue("insolventDebtStatute"));
		ogtInsolventPersonDetailImpl.setOgtApplicationId(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));

		return ogtInsolventPersonDetailImpl;
	}

	@Override
	public int compareTo(OgtInsolventPersonDetail ogtInsolventPersonDetail) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ogtInsolventPersonDetail.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OgtInsolventPersonDetail)) {
			return false;
		}

		OgtInsolventPersonDetail ogtInsolventPersonDetail =
			(OgtInsolventPersonDetail)object;

		long primaryKey = ogtInsolventPersonDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OgtInsolventPersonDetail> toCacheModel() {
		OgtInsolventPersonDetailCacheModel ogtInsolventPersonDetailCacheModel =
			new OgtInsolventPersonDetailCacheModel();

		ogtInsolventPersonDetailCacheModel.ogtInsolventPersonDetailId =
			getOgtInsolventPersonDetailId();

		ogtInsolventPersonDetailCacheModel.groupId = getGroupId();

		ogtInsolventPersonDetailCacheModel.companyId = getCompanyId();

		ogtInsolventPersonDetailCacheModel.userId = getUserId();

		ogtInsolventPersonDetailCacheModel.userName = getUserName();

		String userName = ogtInsolventPersonDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ogtInsolventPersonDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ogtInsolventPersonDetailCacheModel.createDate =
				createDate.getTime();
		}
		else {
			ogtInsolventPersonDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ogtInsolventPersonDetailCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			ogtInsolventPersonDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ogtInsolventPersonDetailCacheModel.natureOfInsolvent =
			getNatureOfInsolvent();

		String natureOfInsolvent =
			ogtInsolventPersonDetailCacheModel.natureOfInsolvent;

		if ((natureOfInsolvent != null) && (natureOfInsolvent.length() == 0)) {
			ogtInsolventPersonDetailCacheModel.natureOfInsolvent = null;
		}

		ogtInsolventPersonDetailCacheModel.insolventFirstName =
			getInsolventFirstName();

		String insolventFirstName =
			ogtInsolventPersonDetailCacheModel.insolventFirstName;

		if ((insolventFirstName != null) &&
			(insolventFirstName.length() == 0)) {

			ogtInsolventPersonDetailCacheModel.insolventFirstName = null;
		}

		ogtInsolventPersonDetailCacheModel.insolventLastName =
			getInsolventLastName();

		String insolventLastName =
			ogtInsolventPersonDetailCacheModel.insolventLastName;

		if ((insolventLastName != null) && (insolventLastName.length() == 0)) {
			ogtInsolventPersonDetailCacheModel.insolventLastName = null;
		}

		ogtInsolventPersonDetailCacheModel.insolventCompanyName =
			getInsolventCompanyName();

		String insolventCompanyName =
			ogtInsolventPersonDetailCacheModel.insolventCompanyName;

		if ((insolventCompanyName != null) &&
			(insolventCompanyName.length() == 0)) {

			ogtInsolventPersonDetailCacheModel.insolventCompanyName = null;
		}

		ogtInsolventPersonDetailCacheModel.insolventDebtStatute =
			getInsolventDebtStatute();

		String insolventDebtStatute =
			ogtInsolventPersonDetailCacheModel.insolventDebtStatute;

		if ((insolventDebtStatute != null) &&
			(insolventDebtStatute.length() == 0)) {

			ogtInsolventPersonDetailCacheModel.insolventDebtStatute = null;
		}

		ogtInsolventPersonDetailCacheModel.ogtApplicationId =
			getOgtApplicationId();

		return ogtInsolventPersonDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OgtInsolventPersonDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OgtInsolventPersonDetail, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtInsolventPersonDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(OgtInsolventPersonDetail)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, OgtInsolventPersonDetail>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						OgtInsolventPersonDetail.class, ModelWrapper.class);

	}

	private long _ogtInsolventPersonDetailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _natureOfInsolvent;
	private String _insolventFirstName;
	private String _insolventLastName;
	private String _insolventCompanyName;
	private String _insolventDebtStatute;
	private long _ogtApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<OgtInsolventPersonDetail, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OgtInsolventPersonDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"ogtInsolventPersonDetailId", _ogtInsolventPersonDetailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("natureOfInsolvent", _natureOfInsolvent);
		_columnOriginalValues.put("insolventFirstName", _insolventFirstName);
		_columnOriginalValues.put("insolventLastName", _insolventLastName);
		_columnOriginalValues.put(
			"insolventCompanyName", _insolventCompanyName);
		_columnOriginalValues.put(
			"insolventDebtStatute", _insolventDebtStatute);
		_columnOriginalValues.put("ogtApplicationId", _ogtApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ogtInsolventPersonDetailId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("natureOfInsolvent", 128L);

		columnBitmasks.put("insolventFirstName", 256L);

		columnBitmasks.put("insolventLastName", 512L);

		columnBitmasks.put("insolventCompanyName", 1024L);

		columnBitmasks.put("insolventDebtStatute", 2048L);

		columnBitmasks.put("ogtApplicationId", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OgtInsolventPersonDetail _escapedModel;

}