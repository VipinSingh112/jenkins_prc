/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ogt.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ogt.application.form.services.model.OgtClaimantDetail;
import com.nbp.ogt.application.form.services.model.OgtClaimantDetailModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OgtClaimantDetail service. Represents a row in the &quot;nbp_ogt_claimant_detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OgtClaimantDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OgtClaimantDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OgtClaimantDetailImpl
 * @generated
 */
@JSON(strict = true)
public class OgtClaimantDetailModelImpl
	extends BaseModelImpl<OgtClaimantDetail> implements OgtClaimantDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ogt claimant detail model instance should use the <code>OgtClaimantDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ogt_claimant_detail";

	public static final Object[][] TABLE_COLUMNS = {
		{"ogtClaimantDetailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"claimantName", Types.VARCHAR},
		{"claimantFirstName", Types.VARCHAR},
		{"claimantLastName", Types.VARCHAR},
		{"claimantCompanyName", Types.VARCHAR},
		{"claimantAddress", Types.VARCHAR},
		{"claimantEmailAddr", Types.VARCHAR},
		{"claimantTeleNum", Types.VARCHAR}, {"claimantFaxNo", Types.VARCHAR},
		{"claimantDate", Types.TIMESTAMP}, {"claimantTrn", Types.VARCHAR},
		{"claimantRelative", Types.VARCHAR}, {"ogtApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ogtClaimantDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("claimantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantCompanyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantEmailAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantTeleNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("claimantTrn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimantRelative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ogtApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ogt_claimant_detail (ogtClaimantDetailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,claimantName VARCHAR(75) null,claimantFirstName VARCHAR(75) null,claimantLastName VARCHAR(75) null,claimantCompanyName VARCHAR(75) null,claimantAddress VARCHAR(1000) null,claimantEmailAddr VARCHAR(75) null,claimantTeleNum VARCHAR(75) null,claimantFaxNo VARCHAR(75) null,claimantDate DATE null,claimantTrn VARCHAR(75) null,claimantRelative VARCHAR(75) null,ogtApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ogt_claimant_detail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ogtClaimantDetail.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ogt_claimant_detail.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OGTAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OgtClaimantDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ogtClaimantDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOgtClaimantDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ogtClaimantDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OgtClaimantDetail.class;
	}

	@Override
	public String getModelClassName() {
		return OgtClaimantDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OgtClaimantDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OgtClaimantDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtClaimantDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OgtClaimantDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OgtClaimantDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OgtClaimantDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OgtClaimantDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OgtClaimantDetail, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OgtClaimantDetail, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<OgtClaimantDetail, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<OgtClaimantDetail, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<OgtClaimantDetail, Object>>();

			attributeGetterFunctions.put(
				"ogtClaimantDetailId",
				OgtClaimantDetail::getOgtClaimantDetailId);
			attributeGetterFunctions.put(
				"groupId", OgtClaimantDetail::getGroupId);
			attributeGetterFunctions.put(
				"companyId", OgtClaimantDetail::getCompanyId);
			attributeGetterFunctions.put(
				"userId", OgtClaimantDetail::getUserId);
			attributeGetterFunctions.put(
				"userName", OgtClaimantDetail::getUserName);
			attributeGetterFunctions.put(
				"createDate", OgtClaimantDetail::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", OgtClaimantDetail::getModifiedDate);
			attributeGetterFunctions.put(
				"claimantName", OgtClaimantDetail::getClaimantName);
			attributeGetterFunctions.put(
				"claimantFirstName", OgtClaimantDetail::getClaimantFirstName);
			attributeGetterFunctions.put(
				"claimantLastName", OgtClaimantDetail::getClaimantLastName);
			attributeGetterFunctions.put(
				"claimantCompanyName",
				OgtClaimantDetail::getClaimantCompanyName);
			attributeGetterFunctions.put(
				"claimantAddress", OgtClaimantDetail::getClaimantAddress);
			attributeGetterFunctions.put(
				"claimantEmailAddr", OgtClaimantDetail::getClaimantEmailAddr);
			attributeGetterFunctions.put(
				"claimantTeleNum", OgtClaimantDetail::getClaimantTeleNum);
			attributeGetterFunctions.put(
				"claimantFaxNo", OgtClaimantDetail::getClaimantFaxNo);
			attributeGetterFunctions.put(
				"claimantDate", OgtClaimantDetail::getClaimantDate);
			attributeGetterFunctions.put(
				"claimantTrn", OgtClaimantDetail::getClaimantTrn);
			attributeGetterFunctions.put(
				"claimantRelative", OgtClaimantDetail::getClaimantRelative);
			attributeGetterFunctions.put(
				"ogtApplicationId", OgtClaimantDetail::getOgtApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<OgtClaimantDetail, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<OgtClaimantDetail, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<OgtClaimantDetail, ?>>();

			attributeSetterBiConsumers.put(
				"ogtClaimantDetailId",
				(BiConsumer<OgtClaimantDetail, Long>)
					OgtClaimantDetail::setOgtClaimantDetailId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<OgtClaimantDetail, Long>)
					OgtClaimantDetail::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<OgtClaimantDetail, Long>)
					OgtClaimantDetail::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<OgtClaimantDetail, Long>)
					OgtClaimantDetail::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<OgtClaimantDetail, Date>)
					OgtClaimantDetail::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<OgtClaimantDetail, Date>)
					OgtClaimantDetail::setModifiedDate);
			attributeSetterBiConsumers.put(
				"claimantName",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantName);
			attributeSetterBiConsumers.put(
				"claimantFirstName",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantFirstName);
			attributeSetterBiConsumers.put(
				"claimantLastName",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantLastName);
			attributeSetterBiConsumers.put(
				"claimantCompanyName",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantCompanyName);
			attributeSetterBiConsumers.put(
				"claimantAddress",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantAddress);
			attributeSetterBiConsumers.put(
				"claimantEmailAddr",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantEmailAddr);
			attributeSetterBiConsumers.put(
				"claimantTeleNum",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantTeleNum);
			attributeSetterBiConsumers.put(
				"claimantFaxNo",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantFaxNo);
			attributeSetterBiConsumers.put(
				"claimantDate",
				(BiConsumer<OgtClaimantDetail, Date>)
					OgtClaimantDetail::setClaimantDate);
			attributeSetterBiConsumers.put(
				"claimantTrn",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantTrn);
			attributeSetterBiConsumers.put(
				"claimantRelative",
				(BiConsumer<OgtClaimantDetail, String>)
					OgtClaimantDetail::setClaimantRelative);
			attributeSetterBiConsumers.put(
				"ogtApplicationId",
				(BiConsumer<OgtClaimantDetail, Long>)
					OgtClaimantDetail::setOgtApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getOgtClaimantDetailId() {
		return _ogtClaimantDetailId;
	}

	@Override
	public void setOgtClaimantDetailId(long ogtClaimantDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtClaimantDetailId = ogtClaimantDetailId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getClaimantName() {
		if (_claimantName == null) {
			return "";
		}
		else {
			return _claimantName;
		}
	}

	@Override
	public void setClaimantName(String claimantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantName = claimantName;
	}

	@JSON
	@Override
	public String getClaimantFirstName() {
		if (_claimantFirstName == null) {
			return "";
		}
		else {
			return _claimantFirstName;
		}
	}

	@Override
	public void setClaimantFirstName(String claimantFirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantFirstName = claimantFirstName;
	}

	@JSON
	@Override
	public String getClaimantLastName() {
		if (_claimantLastName == null) {
			return "";
		}
		else {
			return _claimantLastName;
		}
	}

	@Override
	public void setClaimantLastName(String claimantLastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantLastName = claimantLastName;
	}

	@JSON
	@Override
	public String getClaimantCompanyName() {
		if (_claimantCompanyName == null) {
			return "";
		}
		else {
			return _claimantCompanyName;
		}
	}

	@Override
	public void setClaimantCompanyName(String claimantCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantCompanyName = claimantCompanyName;
	}

	@JSON
	@Override
	public String getClaimantAddress() {
		if (_claimantAddress == null) {
			return "";
		}
		else {
			return _claimantAddress;
		}
	}

	@Override
	public void setClaimantAddress(String claimantAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantAddress = claimantAddress;
	}

	@JSON
	@Override
	public String getClaimantEmailAddr() {
		if (_claimantEmailAddr == null) {
			return "";
		}
		else {
			return _claimantEmailAddr;
		}
	}

	@Override
	public void setClaimantEmailAddr(String claimantEmailAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantEmailAddr = claimantEmailAddr;
	}

	@JSON
	@Override
	public String getClaimantTeleNum() {
		if (_claimantTeleNum == null) {
			return "";
		}
		else {
			return _claimantTeleNum;
		}
	}

	@Override
	public void setClaimantTeleNum(String claimantTeleNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantTeleNum = claimantTeleNum;
	}

	@JSON
	@Override
	public String getClaimantFaxNo() {
		if (_claimantFaxNo == null) {
			return "";
		}
		else {
			return _claimantFaxNo;
		}
	}

	@Override
	public void setClaimantFaxNo(String claimantFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantFaxNo = claimantFaxNo;
	}

	@JSON
	@Override
	public Date getClaimantDate() {
		return _claimantDate;
	}

	@Override
	public void setClaimantDate(Date claimantDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantDate = claimantDate;
	}

	@JSON
	@Override
	public String getClaimantTrn() {
		if (_claimantTrn == null) {
			return "";
		}
		else {
			return _claimantTrn;
		}
	}

	@Override
	public void setClaimantTrn(String claimantTrn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantTrn = claimantTrn;
	}

	@JSON
	@Override
	public String getClaimantRelative() {
		if (_claimantRelative == null) {
			return "";
		}
		else {
			return _claimantRelative;
		}
	}

	@Override
	public void setClaimantRelative(String claimantRelative) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimantRelative = claimantRelative;
	}

	@JSON
	@Override
	public long getOgtApplicationId() {
		return _ogtApplicationId;
	}

	@Override
	public void setOgtApplicationId(long ogtApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtApplicationId = ogtApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOgtApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OgtClaimantDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OgtClaimantDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OgtClaimantDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OgtClaimantDetailImpl ogtClaimantDetailImpl =
			new OgtClaimantDetailImpl();

		ogtClaimantDetailImpl.setOgtClaimantDetailId(getOgtClaimantDetailId());
		ogtClaimantDetailImpl.setGroupId(getGroupId());
		ogtClaimantDetailImpl.setCompanyId(getCompanyId());
		ogtClaimantDetailImpl.setUserId(getUserId());
		ogtClaimantDetailImpl.setUserName(getUserName());
		ogtClaimantDetailImpl.setCreateDate(getCreateDate());
		ogtClaimantDetailImpl.setModifiedDate(getModifiedDate());
		ogtClaimantDetailImpl.setClaimantName(getClaimantName());
		ogtClaimantDetailImpl.setClaimantFirstName(getClaimantFirstName());
		ogtClaimantDetailImpl.setClaimantLastName(getClaimantLastName());
		ogtClaimantDetailImpl.setClaimantCompanyName(getClaimantCompanyName());
		ogtClaimantDetailImpl.setClaimantAddress(getClaimantAddress());
		ogtClaimantDetailImpl.setClaimantEmailAddr(getClaimantEmailAddr());
		ogtClaimantDetailImpl.setClaimantTeleNum(getClaimantTeleNum());
		ogtClaimantDetailImpl.setClaimantFaxNo(getClaimantFaxNo());
		ogtClaimantDetailImpl.setClaimantDate(getClaimantDate());
		ogtClaimantDetailImpl.setClaimantTrn(getClaimantTrn());
		ogtClaimantDetailImpl.setClaimantRelative(getClaimantRelative());
		ogtClaimantDetailImpl.setOgtApplicationId(getOgtApplicationId());

		ogtClaimantDetailImpl.resetOriginalValues();

		return ogtClaimantDetailImpl;
	}

	@Override
	public OgtClaimantDetail cloneWithOriginalValues() {
		OgtClaimantDetailImpl ogtClaimantDetailImpl =
			new OgtClaimantDetailImpl();

		ogtClaimantDetailImpl.setOgtClaimantDetailId(
			this.<Long>getColumnOriginalValue("ogtClaimantDetailId"));
		ogtClaimantDetailImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ogtClaimantDetailImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ogtClaimantDetailImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ogtClaimantDetailImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ogtClaimantDetailImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ogtClaimantDetailImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ogtClaimantDetailImpl.setClaimantName(
			this.<String>getColumnOriginalValue("claimantName"));
		ogtClaimantDetailImpl.setClaimantFirstName(
			this.<String>getColumnOriginalValue("claimantFirstName"));
		ogtClaimantDetailImpl.setClaimantLastName(
			this.<String>getColumnOriginalValue("claimantLastName"));
		ogtClaimantDetailImpl.setClaimantCompanyName(
			this.<String>getColumnOriginalValue("claimantCompanyName"));
		ogtClaimantDetailImpl.setClaimantAddress(
			this.<String>getColumnOriginalValue("claimantAddress"));
		ogtClaimantDetailImpl.setClaimantEmailAddr(
			this.<String>getColumnOriginalValue("claimantEmailAddr"));
		ogtClaimantDetailImpl.setClaimantTeleNum(
			this.<String>getColumnOriginalValue("claimantTeleNum"));
		ogtClaimantDetailImpl.setClaimantFaxNo(
			this.<String>getColumnOriginalValue("claimantFaxNo"));
		ogtClaimantDetailImpl.setClaimantDate(
			this.<Date>getColumnOriginalValue("claimantDate"));
		ogtClaimantDetailImpl.setClaimantTrn(
			this.<String>getColumnOriginalValue("claimantTrn"));
		ogtClaimantDetailImpl.setClaimantRelative(
			this.<String>getColumnOriginalValue("claimantRelative"));
		ogtClaimantDetailImpl.setOgtApplicationId(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));

		return ogtClaimantDetailImpl;
	}

	@Override
	public int compareTo(OgtClaimantDetail ogtClaimantDetail) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ogtClaimantDetail.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OgtClaimantDetail)) {
			return false;
		}

		OgtClaimantDetail ogtClaimantDetail = (OgtClaimantDetail)object;

		long primaryKey = ogtClaimantDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OgtClaimantDetail> toCacheModel() {
		OgtClaimantDetailCacheModel ogtClaimantDetailCacheModel =
			new OgtClaimantDetailCacheModel();

		ogtClaimantDetailCacheModel.ogtClaimantDetailId =
			getOgtClaimantDetailId();

		ogtClaimantDetailCacheModel.groupId = getGroupId();

		ogtClaimantDetailCacheModel.companyId = getCompanyId();

		ogtClaimantDetailCacheModel.userId = getUserId();

		ogtClaimantDetailCacheModel.userName = getUserName();

		String userName = ogtClaimantDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ogtClaimantDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ogtClaimantDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			ogtClaimantDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ogtClaimantDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ogtClaimantDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ogtClaimantDetailCacheModel.claimantName = getClaimantName();

		String claimantName = ogtClaimantDetailCacheModel.claimantName;

		if ((claimantName != null) && (claimantName.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantName = null;
		}

		ogtClaimantDetailCacheModel.claimantFirstName = getClaimantFirstName();

		String claimantFirstName =
			ogtClaimantDetailCacheModel.claimantFirstName;

		if ((claimantFirstName != null) && (claimantFirstName.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantFirstName = null;
		}

		ogtClaimantDetailCacheModel.claimantLastName = getClaimantLastName();

		String claimantLastName = ogtClaimantDetailCacheModel.claimantLastName;

		if ((claimantLastName != null) && (claimantLastName.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantLastName = null;
		}

		ogtClaimantDetailCacheModel.claimantCompanyName =
			getClaimantCompanyName();

		String claimantCompanyName =
			ogtClaimantDetailCacheModel.claimantCompanyName;

		if ((claimantCompanyName != null) &&
			(claimantCompanyName.length() == 0)) {

			ogtClaimantDetailCacheModel.claimantCompanyName = null;
		}

		ogtClaimantDetailCacheModel.claimantAddress = getClaimantAddress();

		String claimantAddress = ogtClaimantDetailCacheModel.claimantAddress;

		if ((claimantAddress != null) && (claimantAddress.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantAddress = null;
		}

		ogtClaimantDetailCacheModel.claimantEmailAddr = getClaimantEmailAddr();

		String claimantEmailAddr =
			ogtClaimantDetailCacheModel.claimantEmailAddr;

		if ((claimantEmailAddr != null) && (claimantEmailAddr.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantEmailAddr = null;
		}

		ogtClaimantDetailCacheModel.claimantTeleNum = getClaimantTeleNum();

		String claimantTeleNum = ogtClaimantDetailCacheModel.claimantTeleNum;

		if ((claimantTeleNum != null) && (claimantTeleNum.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantTeleNum = null;
		}

		ogtClaimantDetailCacheModel.claimantFaxNo = getClaimantFaxNo();

		String claimantFaxNo = ogtClaimantDetailCacheModel.claimantFaxNo;

		if ((claimantFaxNo != null) && (claimantFaxNo.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantFaxNo = null;
		}

		Date claimantDate = getClaimantDate();

		if (claimantDate != null) {
			ogtClaimantDetailCacheModel.claimantDate = claimantDate.getTime();
		}
		else {
			ogtClaimantDetailCacheModel.claimantDate = Long.MIN_VALUE;
		}

		ogtClaimantDetailCacheModel.claimantTrn = getClaimantTrn();

		String claimantTrn = ogtClaimantDetailCacheModel.claimantTrn;

		if ((claimantTrn != null) && (claimantTrn.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantTrn = null;
		}

		ogtClaimantDetailCacheModel.claimantRelative = getClaimantRelative();

		String claimantRelative = ogtClaimantDetailCacheModel.claimantRelative;

		if ((claimantRelative != null) && (claimantRelative.length() == 0)) {
			ogtClaimantDetailCacheModel.claimantRelative = null;
		}

		ogtClaimantDetailCacheModel.ogtApplicationId = getOgtApplicationId();

		return ogtClaimantDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OgtClaimantDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OgtClaimantDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtClaimantDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(OgtClaimantDetail)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OgtClaimantDetail>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					OgtClaimantDetail.class, ModelWrapper.class);

	}

	private long _ogtClaimantDetailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _claimantName;
	private String _claimantFirstName;
	private String _claimantLastName;
	private String _claimantCompanyName;
	private String _claimantAddress;
	private String _claimantEmailAddr;
	private String _claimantTeleNum;
	private String _claimantFaxNo;
	private Date _claimantDate;
	private String _claimantTrn;
	private String _claimantRelative;
	private long _ogtApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<OgtClaimantDetail, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OgtClaimantDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ogtClaimantDetailId", _ogtClaimantDetailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("claimantName", _claimantName);
		_columnOriginalValues.put("claimantFirstName", _claimantFirstName);
		_columnOriginalValues.put("claimantLastName", _claimantLastName);
		_columnOriginalValues.put("claimantCompanyName", _claimantCompanyName);
		_columnOriginalValues.put("claimantAddress", _claimantAddress);
		_columnOriginalValues.put("claimantEmailAddr", _claimantEmailAddr);
		_columnOriginalValues.put("claimantTeleNum", _claimantTeleNum);
		_columnOriginalValues.put("claimantFaxNo", _claimantFaxNo);
		_columnOriginalValues.put("claimantDate", _claimantDate);
		_columnOriginalValues.put("claimantTrn", _claimantTrn);
		_columnOriginalValues.put("claimantRelative", _claimantRelative);
		_columnOriginalValues.put("ogtApplicationId", _ogtApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ogtClaimantDetailId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("claimantName", 128L);

		columnBitmasks.put("claimantFirstName", 256L);

		columnBitmasks.put("claimantLastName", 512L);

		columnBitmasks.put("claimantCompanyName", 1024L);

		columnBitmasks.put("claimantAddress", 2048L);

		columnBitmasks.put("claimantEmailAddr", 4096L);

		columnBitmasks.put("claimantTeleNum", 8192L);

		columnBitmasks.put("claimantFaxNo", 16384L);

		columnBitmasks.put("claimantDate", 32768L);

		columnBitmasks.put("claimantTrn", 65536L);

		columnBitmasks.put("claimantRelative", 131072L);

		columnBitmasks.put("ogtApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OgtClaimantDetail _escapedModel;

}