/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ogt.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ogt.application.form.services.model.OgtSectionB;
import com.nbp.ogt.application.form.services.model.OgtSectionBModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OgtSectionB service. Represents a row in the &quot;nbp_ogt_section_b&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OgtSectionBModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OgtSectionBImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OgtSectionBImpl
 * @generated
 */
@JSON(strict = true)
public class OgtSectionBModelImpl
	extends BaseModelImpl<OgtSectionB> implements OgtSectionBModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ogt section b model instance should use the <code>OgtSectionB</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ogt_section_b";

	public static final Object[][] TABLE_COLUMNS = {
		{"ogtSectionBId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"theDebtor", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"dateOfInsolvencyOfDebtor", Types.TIMESTAMP},
		{"totalValueOfClaim", Types.VARCHAR},
		{"statementOfAccount", Types.VARCHAR},
		{"unsecuredClaim", Types.VARCHAR}, {"unsecuredClaimOf", Types.VARCHAR},
		{"regardingTheAmount", Types.VARCHAR}, {"categoryOne", Types.VARCHAR},
		{"categoryTwo", Types.VARCHAR}, {"categoryThree", Types.VARCHAR},
		{"categoryFour", Types.VARCHAR}, {"otherPleaseSpecify", Types.VARCHAR},
		{"securedClaim", Types.VARCHAR}, {"securedClaimOf", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"relationWithDebtor", Types.VARCHAR},
		{"bankruptcyEventDescription", Types.VARCHAR},
		{"bankruptcyOfAnIndividual", Types.VARCHAR},
		{"ogtApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ogtSectionBId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("theDebtor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfInsolvencyOfDebtor", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("totalValueOfClaim", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statementOfAccount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unsecuredClaim", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unsecuredClaimOf", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("regardingTheAmount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryThree", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryFour", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherPleaseSpecify", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securedClaim", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securedClaimOf", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("relationWithDebtor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankruptcyEventDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankruptcyOfAnIndividual", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ogtApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ogt_section_b (ogtSectionBId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,theDebtor VARCHAR(75) null,name VARCHAR(75) null,dateOfInsolvencyOfDebtor DATE null,totalValueOfClaim VARCHAR(75) null,statementOfAccount VARCHAR(500) null,unsecuredClaim VARCHAR(75) null,unsecuredClaimOf VARCHAR(75) null,regardingTheAmount VARCHAR(75) null,categoryOne VARCHAR(500) null,categoryTwo VARCHAR(500) null,categoryThree VARCHAR(500) null,categoryFour VARCHAR(500) null,otherPleaseSpecify VARCHAR(75) null,securedClaim VARCHAR(75) null,securedClaimOf VARCHAR(75) null,description VARCHAR(500) null,relationWithDebtor VARCHAR(75) null,bankruptcyEventDescription VARCHAR(500) null,bankruptcyOfAnIndividual VARCHAR(500) null,ogtApplicationId LONG)";

	public static final String TABLE_SQL_DROP = "drop table nbp_ogt_section_b";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ogtSectionB.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ogt_section_b.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OGTAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OgtSectionBModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ogtSectionBId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOgtSectionBId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ogtSectionBId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OgtSectionB.class;
	}

	@Override
	public String getModelClassName() {
		return OgtSectionB.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OgtSectionB, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OgtSectionB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtSectionB, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OgtSectionB)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OgtSectionB, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OgtSectionB, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OgtSectionB)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OgtSectionB, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OgtSectionB, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<OgtSectionB, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<OgtSectionB, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<OgtSectionB, Object>>();

			attributeGetterFunctions.put(
				"ogtSectionBId", OgtSectionB::getOgtSectionBId);
			attributeGetterFunctions.put("groupId", OgtSectionB::getGroupId);
			attributeGetterFunctions.put(
				"companyId", OgtSectionB::getCompanyId);
			attributeGetterFunctions.put("userId", OgtSectionB::getUserId);
			attributeGetterFunctions.put("userName", OgtSectionB::getUserName);
			attributeGetterFunctions.put(
				"createDate", OgtSectionB::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", OgtSectionB::getModifiedDate);
			attributeGetterFunctions.put(
				"theDebtor", OgtSectionB::getTheDebtor);
			attributeGetterFunctions.put("name", OgtSectionB::getName);
			attributeGetterFunctions.put(
				"dateOfInsolvencyOfDebtor",
				OgtSectionB::getDateOfInsolvencyOfDebtor);
			attributeGetterFunctions.put(
				"totalValueOfClaim", OgtSectionB::getTotalValueOfClaim);
			attributeGetterFunctions.put(
				"statementOfAccount", OgtSectionB::getStatementOfAccount);
			attributeGetterFunctions.put(
				"unsecuredClaim", OgtSectionB::getUnsecuredClaim);
			attributeGetterFunctions.put(
				"unsecuredClaimOf", OgtSectionB::getUnsecuredClaimOf);
			attributeGetterFunctions.put(
				"regardingTheAmount", OgtSectionB::getRegardingTheAmount);
			attributeGetterFunctions.put(
				"categoryOne", OgtSectionB::getCategoryOne);
			attributeGetterFunctions.put(
				"categoryTwo", OgtSectionB::getCategoryTwo);
			attributeGetterFunctions.put(
				"categoryThree", OgtSectionB::getCategoryThree);
			attributeGetterFunctions.put(
				"categoryFour", OgtSectionB::getCategoryFour);
			attributeGetterFunctions.put(
				"otherPleaseSpecify", OgtSectionB::getOtherPleaseSpecify);
			attributeGetterFunctions.put(
				"securedClaim", OgtSectionB::getSecuredClaim);
			attributeGetterFunctions.put(
				"securedClaimOf", OgtSectionB::getSecuredClaimOf);
			attributeGetterFunctions.put(
				"description", OgtSectionB::getDescription);
			attributeGetterFunctions.put(
				"relationWithDebtor", OgtSectionB::getRelationWithDebtor);
			attributeGetterFunctions.put(
				"bankruptcyEventDescription",
				OgtSectionB::getBankruptcyEventDescription);
			attributeGetterFunctions.put(
				"bankruptcyOfAnIndividual",
				OgtSectionB::getBankruptcyOfAnIndividual);
			attributeGetterFunctions.put(
				"ogtApplicationId", OgtSectionB::getOgtApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<OgtSectionB, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<OgtSectionB, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<OgtSectionB, ?>>();

			attributeSetterBiConsumers.put(
				"ogtSectionBId",
				(BiConsumer<OgtSectionB, Long>)OgtSectionB::setOgtSectionBId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<OgtSectionB, Long>)OgtSectionB::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<OgtSectionB, Long>)OgtSectionB::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<OgtSectionB, Long>)OgtSectionB::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<OgtSectionB, String>)OgtSectionB::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<OgtSectionB, Date>)OgtSectionB::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<OgtSectionB, Date>)OgtSectionB::setModifiedDate);
			attributeSetterBiConsumers.put(
				"theDebtor",
				(BiConsumer<OgtSectionB, String>)OgtSectionB::setTheDebtor);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<OgtSectionB, String>)OgtSectionB::setName);
			attributeSetterBiConsumers.put(
				"dateOfInsolvencyOfDebtor",
				(BiConsumer<OgtSectionB, Date>)
					OgtSectionB::setDateOfInsolvencyOfDebtor);
			attributeSetterBiConsumers.put(
				"totalValueOfClaim",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setTotalValueOfClaim);
			attributeSetterBiConsumers.put(
				"statementOfAccount",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setStatementOfAccount);
			attributeSetterBiConsumers.put(
				"unsecuredClaim",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setUnsecuredClaim);
			attributeSetterBiConsumers.put(
				"unsecuredClaimOf",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setUnsecuredClaimOf);
			attributeSetterBiConsumers.put(
				"regardingTheAmount",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setRegardingTheAmount);
			attributeSetterBiConsumers.put(
				"categoryOne",
				(BiConsumer<OgtSectionB, String>)OgtSectionB::setCategoryOne);
			attributeSetterBiConsumers.put(
				"categoryTwo",
				(BiConsumer<OgtSectionB, String>)OgtSectionB::setCategoryTwo);
			attributeSetterBiConsumers.put(
				"categoryThree",
				(BiConsumer<OgtSectionB, String>)OgtSectionB::setCategoryThree);
			attributeSetterBiConsumers.put(
				"categoryFour",
				(BiConsumer<OgtSectionB, String>)OgtSectionB::setCategoryFour);
			attributeSetterBiConsumers.put(
				"otherPleaseSpecify",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setOtherPleaseSpecify);
			attributeSetterBiConsumers.put(
				"securedClaim",
				(BiConsumer<OgtSectionB, String>)OgtSectionB::setSecuredClaim);
			attributeSetterBiConsumers.put(
				"securedClaimOf",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setSecuredClaimOf);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<OgtSectionB, String>)OgtSectionB::setDescription);
			attributeSetterBiConsumers.put(
				"relationWithDebtor",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setRelationWithDebtor);
			attributeSetterBiConsumers.put(
				"bankruptcyEventDescription",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setBankruptcyEventDescription);
			attributeSetterBiConsumers.put(
				"bankruptcyOfAnIndividual",
				(BiConsumer<OgtSectionB, String>)
					OgtSectionB::setBankruptcyOfAnIndividual);
			attributeSetterBiConsumers.put(
				"ogtApplicationId",
				(BiConsumer<OgtSectionB, Long>)
					OgtSectionB::setOgtApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getOgtSectionBId() {
		return _ogtSectionBId;
	}

	@Override
	public void setOgtSectionBId(long ogtSectionBId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtSectionBId = ogtSectionBId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTheDebtor() {
		if (_theDebtor == null) {
			return "";
		}
		else {
			return _theDebtor;
		}
	}

	@Override
	public void setTheDebtor(String theDebtor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_theDebtor = theDebtor;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public Date getDateOfInsolvencyOfDebtor() {
		return _dateOfInsolvencyOfDebtor;
	}

	@Override
	public void setDateOfInsolvencyOfDebtor(Date dateOfInsolvencyOfDebtor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfInsolvencyOfDebtor = dateOfInsolvencyOfDebtor;
	}

	@JSON
	@Override
	public String getTotalValueOfClaim() {
		if (_totalValueOfClaim == null) {
			return "";
		}
		else {
			return _totalValueOfClaim;
		}
	}

	@Override
	public void setTotalValueOfClaim(String totalValueOfClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalValueOfClaim = totalValueOfClaim;
	}

	@JSON
	@Override
	public String getStatementOfAccount() {
		if (_statementOfAccount == null) {
			return "";
		}
		else {
			return _statementOfAccount;
		}
	}

	@Override
	public void setStatementOfAccount(String statementOfAccount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statementOfAccount = statementOfAccount;
	}

	@JSON
	@Override
	public String getUnsecuredClaim() {
		if (_unsecuredClaim == null) {
			return "";
		}
		else {
			return _unsecuredClaim;
		}
	}

	@Override
	public void setUnsecuredClaim(String unsecuredClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unsecuredClaim = unsecuredClaim;
	}

	@JSON
	@Override
	public String getUnsecuredClaimOf() {
		if (_unsecuredClaimOf == null) {
			return "";
		}
		else {
			return _unsecuredClaimOf;
		}
	}

	@Override
	public void setUnsecuredClaimOf(String unsecuredClaimOf) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unsecuredClaimOf = unsecuredClaimOf;
	}

	@JSON
	@Override
	public String getRegardingTheAmount() {
		if (_regardingTheAmount == null) {
			return "";
		}
		else {
			return _regardingTheAmount;
		}
	}

	@Override
	public void setRegardingTheAmount(String regardingTheAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_regardingTheAmount = regardingTheAmount;
	}

	@JSON
	@Override
	public String getCategoryOne() {
		if (_categoryOne == null) {
			return "";
		}
		else {
			return _categoryOne;
		}
	}

	@Override
	public void setCategoryOne(String categoryOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryOne = categoryOne;
	}

	@JSON
	@Override
	public String getCategoryTwo() {
		if (_categoryTwo == null) {
			return "";
		}
		else {
			return _categoryTwo;
		}
	}

	@Override
	public void setCategoryTwo(String categoryTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryTwo = categoryTwo;
	}

	@JSON
	@Override
	public String getCategoryThree() {
		if (_categoryThree == null) {
			return "";
		}
		else {
			return _categoryThree;
		}
	}

	@Override
	public void setCategoryThree(String categoryThree) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryThree = categoryThree;
	}

	@JSON
	@Override
	public String getCategoryFour() {
		if (_categoryFour == null) {
			return "";
		}
		else {
			return _categoryFour;
		}
	}

	@Override
	public void setCategoryFour(String categoryFour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryFour = categoryFour;
	}

	@JSON
	@Override
	public String getOtherPleaseSpecify() {
		if (_otherPleaseSpecify == null) {
			return "";
		}
		else {
			return _otherPleaseSpecify;
		}
	}

	@Override
	public void setOtherPleaseSpecify(String otherPleaseSpecify) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherPleaseSpecify = otherPleaseSpecify;
	}

	@JSON
	@Override
	public String getSecuredClaim() {
		if (_securedClaim == null) {
			return "";
		}
		else {
			return _securedClaim;
		}
	}

	@Override
	public void setSecuredClaim(String securedClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securedClaim = securedClaim;
	}

	@JSON
	@Override
	public String getSecuredClaimOf() {
		if (_securedClaimOf == null) {
			return "";
		}
		else {
			return _securedClaimOf;
		}
	}

	@Override
	public void setSecuredClaimOf(String securedClaimOf) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securedClaimOf = securedClaimOf;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getRelationWithDebtor() {
		if (_relationWithDebtor == null) {
			return "";
		}
		else {
			return _relationWithDebtor;
		}
	}

	@Override
	public void setRelationWithDebtor(String relationWithDebtor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_relationWithDebtor = relationWithDebtor;
	}

	@JSON
	@Override
	public String getBankruptcyEventDescription() {
		if (_bankruptcyEventDescription == null) {
			return "";
		}
		else {
			return _bankruptcyEventDescription;
		}
	}

	@Override
	public void setBankruptcyEventDescription(
		String bankruptcyEventDescription) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankruptcyEventDescription = bankruptcyEventDescription;
	}

	@JSON
	@Override
	public String getBankruptcyOfAnIndividual() {
		if (_bankruptcyOfAnIndividual == null) {
			return "";
		}
		else {
			return _bankruptcyOfAnIndividual;
		}
	}

	@Override
	public void setBankruptcyOfAnIndividual(String bankruptcyOfAnIndividual) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankruptcyOfAnIndividual = bankruptcyOfAnIndividual;
	}

	@JSON
	@Override
	public long getOgtApplicationId() {
		return _ogtApplicationId;
	}

	@Override
	public void setOgtApplicationId(long ogtApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtApplicationId = ogtApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOgtApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OgtSectionB.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OgtSectionB toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OgtSectionB>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OgtSectionBImpl ogtSectionBImpl = new OgtSectionBImpl();

		ogtSectionBImpl.setOgtSectionBId(getOgtSectionBId());
		ogtSectionBImpl.setGroupId(getGroupId());
		ogtSectionBImpl.setCompanyId(getCompanyId());
		ogtSectionBImpl.setUserId(getUserId());
		ogtSectionBImpl.setUserName(getUserName());
		ogtSectionBImpl.setCreateDate(getCreateDate());
		ogtSectionBImpl.setModifiedDate(getModifiedDate());
		ogtSectionBImpl.setTheDebtor(getTheDebtor());
		ogtSectionBImpl.setName(getName());
		ogtSectionBImpl.setDateOfInsolvencyOfDebtor(
			getDateOfInsolvencyOfDebtor());
		ogtSectionBImpl.setTotalValueOfClaim(getTotalValueOfClaim());
		ogtSectionBImpl.setStatementOfAccount(getStatementOfAccount());
		ogtSectionBImpl.setUnsecuredClaim(getUnsecuredClaim());
		ogtSectionBImpl.setUnsecuredClaimOf(getUnsecuredClaimOf());
		ogtSectionBImpl.setRegardingTheAmount(getRegardingTheAmount());
		ogtSectionBImpl.setCategoryOne(getCategoryOne());
		ogtSectionBImpl.setCategoryTwo(getCategoryTwo());
		ogtSectionBImpl.setCategoryThree(getCategoryThree());
		ogtSectionBImpl.setCategoryFour(getCategoryFour());
		ogtSectionBImpl.setOtherPleaseSpecify(getOtherPleaseSpecify());
		ogtSectionBImpl.setSecuredClaim(getSecuredClaim());
		ogtSectionBImpl.setSecuredClaimOf(getSecuredClaimOf());
		ogtSectionBImpl.setDescription(getDescription());
		ogtSectionBImpl.setRelationWithDebtor(getRelationWithDebtor());
		ogtSectionBImpl.setBankruptcyEventDescription(
			getBankruptcyEventDescription());
		ogtSectionBImpl.setBankruptcyOfAnIndividual(
			getBankruptcyOfAnIndividual());
		ogtSectionBImpl.setOgtApplicationId(getOgtApplicationId());

		ogtSectionBImpl.resetOriginalValues();

		return ogtSectionBImpl;
	}

	@Override
	public OgtSectionB cloneWithOriginalValues() {
		OgtSectionBImpl ogtSectionBImpl = new OgtSectionBImpl();

		ogtSectionBImpl.setOgtSectionBId(
			this.<Long>getColumnOriginalValue("ogtSectionBId"));
		ogtSectionBImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ogtSectionBImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ogtSectionBImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		ogtSectionBImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ogtSectionBImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ogtSectionBImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ogtSectionBImpl.setTheDebtor(
			this.<String>getColumnOriginalValue("theDebtor"));
		ogtSectionBImpl.setName(this.<String>getColumnOriginalValue("name"));
		ogtSectionBImpl.setDateOfInsolvencyOfDebtor(
			this.<Date>getColumnOriginalValue("dateOfInsolvencyOfDebtor"));
		ogtSectionBImpl.setTotalValueOfClaim(
			this.<String>getColumnOriginalValue("totalValueOfClaim"));
		ogtSectionBImpl.setStatementOfAccount(
			this.<String>getColumnOriginalValue("statementOfAccount"));
		ogtSectionBImpl.setUnsecuredClaim(
			this.<String>getColumnOriginalValue("unsecuredClaim"));
		ogtSectionBImpl.setUnsecuredClaimOf(
			this.<String>getColumnOriginalValue("unsecuredClaimOf"));
		ogtSectionBImpl.setRegardingTheAmount(
			this.<String>getColumnOriginalValue("regardingTheAmount"));
		ogtSectionBImpl.setCategoryOne(
			this.<String>getColumnOriginalValue("categoryOne"));
		ogtSectionBImpl.setCategoryTwo(
			this.<String>getColumnOriginalValue("categoryTwo"));
		ogtSectionBImpl.setCategoryThree(
			this.<String>getColumnOriginalValue("categoryThree"));
		ogtSectionBImpl.setCategoryFour(
			this.<String>getColumnOriginalValue("categoryFour"));
		ogtSectionBImpl.setOtherPleaseSpecify(
			this.<String>getColumnOriginalValue("otherPleaseSpecify"));
		ogtSectionBImpl.setSecuredClaim(
			this.<String>getColumnOriginalValue("securedClaim"));
		ogtSectionBImpl.setSecuredClaimOf(
			this.<String>getColumnOriginalValue("securedClaimOf"));
		ogtSectionBImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		ogtSectionBImpl.setRelationWithDebtor(
			this.<String>getColumnOriginalValue("relationWithDebtor"));
		ogtSectionBImpl.setBankruptcyEventDescription(
			this.<String>getColumnOriginalValue("bankruptcyEventDescription"));
		ogtSectionBImpl.setBankruptcyOfAnIndividual(
			this.<String>getColumnOriginalValue("bankruptcyOfAnIndividual"));
		ogtSectionBImpl.setOgtApplicationId(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));

		return ogtSectionBImpl;
	}

	@Override
	public int compareTo(OgtSectionB ogtSectionB) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ogtSectionB.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OgtSectionB)) {
			return false;
		}

		OgtSectionB ogtSectionB = (OgtSectionB)object;

		long primaryKey = ogtSectionB.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OgtSectionB> toCacheModel() {
		OgtSectionBCacheModel ogtSectionBCacheModel =
			new OgtSectionBCacheModel();

		ogtSectionBCacheModel.ogtSectionBId = getOgtSectionBId();

		ogtSectionBCacheModel.groupId = getGroupId();

		ogtSectionBCacheModel.companyId = getCompanyId();

		ogtSectionBCacheModel.userId = getUserId();

		ogtSectionBCacheModel.userName = getUserName();

		String userName = ogtSectionBCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ogtSectionBCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ogtSectionBCacheModel.createDate = createDate.getTime();
		}
		else {
			ogtSectionBCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ogtSectionBCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ogtSectionBCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ogtSectionBCacheModel.theDebtor = getTheDebtor();

		String theDebtor = ogtSectionBCacheModel.theDebtor;

		if ((theDebtor != null) && (theDebtor.length() == 0)) {
			ogtSectionBCacheModel.theDebtor = null;
		}

		ogtSectionBCacheModel.name = getName();

		String name = ogtSectionBCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			ogtSectionBCacheModel.name = null;
		}

		Date dateOfInsolvencyOfDebtor = getDateOfInsolvencyOfDebtor();

		if (dateOfInsolvencyOfDebtor != null) {
			ogtSectionBCacheModel.dateOfInsolvencyOfDebtor =
				dateOfInsolvencyOfDebtor.getTime();
		}
		else {
			ogtSectionBCacheModel.dateOfInsolvencyOfDebtor = Long.MIN_VALUE;
		}

		ogtSectionBCacheModel.totalValueOfClaim = getTotalValueOfClaim();

		String totalValueOfClaim = ogtSectionBCacheModel.totalValueOfClaim;

		if ((totalValueOfClaim != null) && (totalValueOfClaim.length() == 0)) {
			ogtSectionBCacheModel.totalValueOfClaim = null;
		}

		ogtSectionBCacheModel.statementOfAccount = getStatementOfAccount();

		String statementOfAccount = ogtSectionBCacheModel.statementOfAccount;

		if ((statementOfAccount != null) &&
			(statementOfAccount.length() == 0)) {

			ogtSectionBCacheModel.statementOfAccount = null;
		}

		ogtSectionBCacheModel.unsecuredClaim = getUnsecuredClaim();

		String unsecuredClaim = ogtSectionBCacheModel.unsecuredClaim;

		if ((unsecuredClaim != null) && (unsecuredClaim.length() == 0)) {
			ogtSectionBCacheModel.unsecuredClaim = null;
		}

		ogtSectionBCacheModel.unsecuredClaimOf = getUnsecuredClaimOf();

		String unsecuredClaimOf = ogtSectionBCacheModel.unsecuredClaimOf;

		if ((unsecuredClaimOf != null) && (unsecuredClaimOf.length() == 0)) {
			ogtSectionBCacheModel.unsecuredClaimOf = null;
		}

		ogtSectionBCacheModel.regardingTheAmount = getRegardingTheAmount();

		String regardingTheAmount = ogtSectionBCacheModel.regardingTheAmount;

		if ((regardingTheAmount != null) &&
			(regardingTheAmount.length() == 0)) {

			ogtSectionBCacheModel.regardingTheAmount = null;
		}

		ogtSectionBCacheModel.categoryOne = getCategoryOne();

		String categoryOne = ogtSectionBCacheModel.categoryOne;

		if ((categoryOne != null) && (categoryOne.length() == 0)) {
			ogtSectionBCacheModel.categoryOne = null;
		}

		ogtSectionBCacheModel.categoryTwo = getCategoryTwo();

		String categoryTwo = ogtSectionBCacheModel.categoryTwo;

		if ((categoryTwo != null) && (categoryTwo.length() == 0)) {
			ogtSectionBCacheModel.categoryTwo = null;
		}

		ogtSectionBCacheModel.categoryThree = getCategoryThree();

		String categoryThree = ogtSectionBCacheModel.categoryThree;

		if ((categoryThree != null) && (categoryThree.length() == 0)) {
			ogtSectionBCacheModel.categoryThree = null;
		}

		ogtSectionBCacheModel.categoryFour = getCategoryFour();

		String categoryFour = ogtSectionBCacheModel.categoryFour;

		if ((categoryFour != null) && (categoryFour.length() == 0)) {
			ogtSectionBCacheModel.categoryFour = null;
		}

		ogtSectionBCacheModel.otherPleaseSpecify = getOtherPleaseSpecify();

		String otherPleaseSpecify = ogtSectionBCacheModel.otherPleaseSpecify;

		if ((otherPleaseSpecify != null) &&
			(otherPleaseSpecify.length() == 0)) {

			ogtSectionBCacheModel.otherPleaseSpecify = null;
		}

		ogtSectionBCacheModel.securedClaim = getSecuredClaim();

		String securedClaim = ogtSectionBCacheModel.securedClaim;

		if ((securedClaim != null) && (securedClaim.length() == 0)) {
			ogtSectionBCacheModel.securedClaim = null;
		}

		ogtSectionBCacheModel.securedClaimOf = getSecuredClaimOf();

		String securedClaimOf = ogtSectionBCacheModel.securedClaimOf;

		if ((securedClaimOf != null) && (securedClaimOf.length() == 0)) {
			ogtSectionBCacheModel.securedClaimOf = null;
		}

		ogtSectionBCacheModel.description = getDescription();

		String description = ogtSectionBCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			ogtSectionBCacheModel.description = null;
		}

		ogtSectionBCacheModel.relationWithDebtor = getRelationWithDebtor();

		String relationWithDebtor = ogtSectionBCacheModel.relationWithDebtor;

		if ((relationWithDebtor != null) &&
			(relationWithDebtor.length() == 0)) {

			ogtSectionBCacheModel.relationWithDebtor = null;
		}

		ogtSectionBCacheModel.bankruptcyEventDescription =
			getBankruptcyEventDescription();

		String bankruptcyEventDescription =
			ogtSectionBCacheModel.bankruptcyEventDescription;

		if ((bankruptcyEventDescription != null) &&
			(bankruptcyEventDescription.length() == 0)) {

			ogtSectionBCacheModel.bankruptcyEventDescription = null;
		}

		ogtSectionBCacheModel.bankruptcyOfAnIndividual =
			getBankruptcyOfAnIndividual();

		String bankruptcyOfAnIndividual =
			ogtSectionBCacheModel.bankruptcyOfAnIndividual;

		if ((bankruptcyOfAnIndividual != null) &&
			(bankruptcyOfAnIndividual.length() == 0)) {

			ogtSectionBCacheModel.bankruptcyOfAnIndividual = null;
		}

		ogtSectionBCacheModel.ogtApplicationId = getOgtApplicationId();

		return ogtSectionBCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OgtSectionB, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OgtSectionB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtSectionB, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((OgtSectionB)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OgtSectionB>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					OgtSectionB.class, ModelWrapper.class);

	}

	private long _ogtSectionBId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _theDebtor;
	private String _name;
	private Date _dateOfInsolvencyOfDebtor;
	private String _totalValueOfClaim;
	private String _statementOfAccount;
	private String _unsecuredClaim;
	private String _unsecuredClaimOf;
	private String _regardingTheAmount;
	private String _categoryOne;
	private String _categoryTwo;
	private String _categoryThree;
	private String _categoryFour;
	private String _otherPleaseSpecify;
	private String _securedClaim;
	private String _securedClaimOf;
	private String _description;
	private String _relationWithDebtor;
	private String _bankruptcyEventDescription;
	private String _bankruptcyOfAnIndividual;
	private long _ogtApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<OgtSectionB, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OgtSectionB)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ogtSectionBId", _ogtSectionBId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("theDebtor", _theDebtor);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put(
			"dateOfInsolvencyOfDebtor", _dateOfInsolvencyOfDebtor);
		_columnOriginalValues.put("totalValueOfClaim", _totalValueOfClaim);
		_columnOriginalValues.put("statementOfAccount", _statementOfAccount);
		_columnOriginalValues.put("unsecuredClaim", _unsecuredClaim);
		_columnOriginalValues.put("unsecuredClaimOf", _unsecuredClaimOf);
		_columnOriginalValues.put("regardingTheAmount", _regardingTheAmount);
		_columnOriginalValues.put("categoryOne", _categoryOne);
		_columnOriginalValues.put("categoryTwo", _categoryTwo);
		_columnOriginalValues.put("categoryThree", _categoryThree);
		_columnOriginalValues.put("categoryFour", _categoryFour);
		_columnOriginalValues.put("otherPleaseSpecify", _otherPleaseSpecify);
		_columnOriginalValues.put("securedClaim", _securedClaim);
		_columnOriginalValues.put("securedClaimOf", _securedClaimOf);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("relationWithDebtor", _relationWithDebtor);
		_columnOriginalValues.put(
			"bankruptcyEventDescription", _bankruptcyEventDescription);
		_columnOriginalValues.put(
			"bankruptcyOfAnIndividual", _bankruptcyOfAnIndividual);
		_columnOriginalValues.put("ogtApplicationId", _ogtApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ogtSectionBId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("theDebtor", 128L);

		columnBitmasks.put("name", 256L);

		columnBitmasks.put("dateOfInsolvencyOfDebtor", 512L);

		columnBitmasks.put("totalValueOfClaim", 1024L);

		columnBitmasks.put("statementOfAccount", 2048L);

		columnBitmasks.put("unsecuredClaim", 4096L);

		columnBitmasks.put("unsecuredClaimOf", 8192L);

		columnBitmasks.put("regardingTheAmount", 16384L);

		columnBitmasks.put("categoryOne", 32768L);

		columnBitmasks.put("categoryTwo", 65536L);

		columnBitmasks.put("categoryThree", 131072L);

		columnBitmasks.put("categoryFour", 262144L);

		columnBitmasks.put("otherPleaseSpecify", 524288L);

		columnBitmasks.put("securedClaim", 1048576L);

		columnBitmasks.put("securedClaimOf", 2097152L);

		columnBitmasks.put("description", 4194304L);

		columnBitmasks.put("relationWithDebtor", 8388608L);

		columnBitmasks.put("bankruptcyEventDescription", 16777216L);

		columnBitmasks.put("bankruptcyOfAnIndividual", 33554432L);

		columnBitmasks.put("ogtApplicationId", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OgtSectionB _escapedModel;

}