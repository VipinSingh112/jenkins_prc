/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ogt.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ogt.application.form.services.model.OgtApplication;
import com.nbp.ogt.application.form.services.model.OgtApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OgtApplication service. Represents a row in the &quot;nbp_ogt_applications&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OgtApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OgtApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OgtApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class OgtApplicationModelImpl
	extends BaseModelImpl<OgtApplication> implements OgtApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ogt application model instance should use the <code>OgtApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ogt_applications";

	public static final Object[][] TABLE_COLUMNS = {
		{"ogtApplicationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"entityId", Types.VARCHAR},
		{"doYouWant", Types.VARCHAR}, {"typeOfApplicant", Types.VARCHAR},
		{"natureOfApplicant", Types.VARCHAR}, {"typeOfMatter", Types.VARCHAR},
		{"typeOfDebt", Types.VARCHAR}, {"debtStatute", Types.VARCHAR},
		{"status", Types.INTEGER}, {"applicationNumber", Types.VARCHAR},
		{"expiredLicenseAppNumber", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"icmDocumentsPath", Types.VARCHAR}, {"pdfFileEntryId", Types.BIGINT},
		{"appCurrentStageName", Types.VARCHAR},
		{"registeredManufacturer", Types.VARCHAR},
		{"prospectingRightsNum", Types.VARCHAR},
		{"typeOfBankruptcy", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ogtApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doYouWant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("natureOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfMatter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfDebt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("debtStatute", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredLicenseAppNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentsPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registeredManufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prospectingRightsNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfBankruptcy", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ogt_applications (ogtApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityId VARCHAR(75) null,doYouWant VARCHAR(75) null,typeOfApplicant VARCHAR(75) null,natureOfApplicant VARCHAR(75) null,typeOfMatter VARCHAR(75) null,typeOfDebt VARCHAR(75) null,debtStatute VARCHAR(75) null,status INTEGER,applicationNumber VARCHAR(75) null,expiredLicenseAppNumber VARCHAR(75) null,caseId VARCHAR(500) null,icmDocumentsPath VARCHAR(500) null,pdfFileEntryId LONG,appCurrentStageName VARCHAR(75) null,registeredManufacturer VARCHAR(75) null,prospectingRightsNum VARCHAR(75) null,typeOfBankruptcy VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ogt_applications";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ogtApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ogt_applications.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENTITYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPIREDLICENSEAPPNUMBER_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPEOFAPPLICANT_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public OgtApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ogtApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOgtApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ogtApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OgtApplication.class;
	}

	@Override
	public String getModelClassName() {
		return OgtApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OgtApplication, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OgtApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OgtApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OgtApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OgtApplication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OgtApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OgtApplication, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OgtApplication, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<OgtApplication, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<OgtApplication, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<OgtApplication, Object>>();

			attributeGetterFunctions.put(
				"ogtApplicationId", OgtApplication::getOgtApplicationId);
			attributeGetterFunctions.put("groupId", OgtApplication::getGroupId);
			attributeGetterFunctions.put(
				"companyId", OgtApplication::getCompanyId);
			attributeGetterFunctions.put("userId", OgtApplication::getUserId);
			attributeGetterFunctions.put(
				"userName", OgtApplication::getUserName);
			attributeGetterFunctions.put(
				"createDate", OgtApplication::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", OgtApplication::getModifiedDate);
			attributeGetterFunctions.put(
				"entityId", OgtApplication::getEntityId);
			attributeGetterFunctions.put(
				"doYouWant", OgtApplication::getDoYouWant);
			attributeGetterFunctions.put(
				"typeOfApplicant", OgtApplication::getTypeOfApplicant);
			attributeGetterFunctions.put(
				"natureOfApplicant", OgtApplication::getNatureOfApplicant);
			attributeGetterFunctions.put(
				"typeOfMatter", OgtApplication::getTypeOfMatter);
			attributeGetterFunctions.put(
				"typeOfDebt", OgtApplication::getTypeOfDebt);
			attributeGetterFunctions.put(
				"debtStatute", OgtApplication::getDebtStatute);
			attributeGetterFunctions.put("status", OgtApplication::getStatus);
			attributeGetterFunctions.put(
				"applicationNumber", OgtApplication::getApplicationNumber);
			attributeGetterFunctions.put(
				"expiredLicenseAppNumber",
				OgtApplication::getExpiredLicenseAppNumber);
			attributeGetterFunctions.put("caseId", OgtApplication::getCaseId);
			attributeGetterFunctions.put(
				"icmDocumentsPath", OgtApplication::getIcmDocumentsPath);
			attributeGetterFunctions.put(
				"pdfFileEntryId", OgtApplication::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"appCurrentStageName", OgtApplication::getAppCurrentStageName);
			attributeGetterFunctions.put(
				"registeredManufacturer",
				OgtApplication::getRegisteredManufacturer);
			attributeGetterFunctions.put(
				"prospectingRightsNum",
				OgtApplication::getProspectingRightsNum);
			attributeGetterFunctions.put(
				"typeOfBankruptcy", OgtApplication::getTypeOfBankruptcy);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<OgtApplication, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<OgtApplication, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<OgtApplication, ?>>();

			attributeSetterBiConsumers.put(
				"ogtApplicationId",
				(BiConsumer<OgtApplication, Long>)
					OgtApplication::setOgtApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<OgtApplication, Long>)OgtApplication::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<OgtApplication, Long>)OgtApplication::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<OgtApplication, Long>)OgtApplication::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<OgtApplication, Date>)
					OgtApplication::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<OgtApplication, Date>)
					OgtApplication::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setEntityId);
			attributeSetterBiConsumers.put(
				"doYouWant",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setDoYouWant);
			attributeSetterBiConsumers.put(
				"typeOfApplicant",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setTypeOfApplicant);
			attributeSetterBiConsumers.put(
				"natureOfApplicant",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setNatureOfApplicant);
			attributeSetterBiConsumers.put(
				"typeOfMatter",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setTypeOfMatter);
			attributeSetterBiConsumers.put(
				"typeOfDebt",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setTypeOfDebt);
			attributeSetterBiConsumers.put(
				"debtStatute",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setDebtStatute);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<OgtApplication, Integer>)OgtApplication::setStatus);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"expiredLicenseAppNumber",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setExpiredLicenseAppNumber);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<OgtApplication, String>)OgtApplication::setCaseId);
			attributeSetterBiConsumers.put(
				"icmDocumentsPath",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setIcmDocumentsPath);
			attributeSetterBiConsumers.put(
				"pdfFileEntryId",
				(BiConsumer<OgtApplication, Long>)
					OgtApplication::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setAppCurrentStageName);
			attributeSetterBiConsumers.put(
				"registeredManufacturer",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setRegisteredManufacturer);
			attributeSetterBiConsumers.put(
				"prospectingRightsNum",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setProspectingRightsNum);
			attributeSetterBiConsumers.put(
				"typeOfBankruptcy",
				(BiConsumer<OgtApplication, String>)
					OgtApplication::setTypeOfBankruptcy);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getOgtApplicationId() {
		return _ogtApplicationId;
	}

	@Override
	public void setOgtApplicationId(long ogtApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ogtApplicationId = ogtApplicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEntityId() {
		return getColumnOriginalValue("entityId");
	}

	@JSON
	@Override
	public String getDoYouWant() {
		if (_doYouWant == null) {
			return "";
		}
		else {
			return _doYouWant;
		}
	}

	@Override
	public void setDoYouWant(String doYouWant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doYouWant = doYouWant;
	}

	@JSON
	@Override
	public String getTypeOfApplicant() {
		if (_typeOfApplicant == null) {
			return "";
		}
		else {
			return _typeOfApplicant;
		}
	}

	@Override
	public void setTypeOfApplicant(String typeOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfApplicant = typeOfApplicant;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTypeOfApplicant() {
		return getColumnOriginalValue("typeOfApplicant");
	}

	@JSON
	@Override
	public String getNatureOfApplicant() {
		if (_natureOfApplicant == null) {
			return "";
		}
		else {
			return _natureOfApplicant;
		}
	}

	@Override
	public void setNatureOfApplicant(String natureOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_natureOfApplicant = natureOfApplicant;
	}

	@JSON
	@Override
	public String getTypeOfMatter() {
		if (_typeOfMatter == null) {
			return "";
		}
		else {
			return _typeOfMatter;
		}
	}

	@Override
	public void setTypeOfMatter(String typeOfMatter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfMatter = typeOfMatter;
	}

	@JSON
	@Override
	public String getTypeOfDebt() {
		if (_typeOfDebt == null) {
			return "";
		}
		else {
			return _typeOfDebt;
		}
	}

	@Override
	public void setTypeOfDebt(String typeOfDebt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfDebt = typeOfDebt;
	}

	@JSON
	@Override
	public String getDebtStatute() {
		if (_debtStatute == null) {
			return "";
		}
		else {
			return _debtStatute;
		}
	}

	@Override
	public void setDebtStatute(String debtStatute) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_debtStatute = debtStatute;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getExpiredLicenseAppNumber() {
		if (_expiredLicenseAppNumber == null) {
			return "";
		}
		else {
			return _expiredLicenseAppNumber;
		}
	}

	@Override
	public void setExpiredLicenseAppNumber(String expiredLicenseAppNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredLicenseAppNumber = expiredLicenseAppNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExpiredLicenseAppNumber() {
		return getColumnOriginalValue("expiredLicenseAppNumber");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getIcmDocumentsPath() {
		if (_icmDocumentsPath == null) {
			return "";
		}
		else {
			return _icmDocumentsPath;
		}
	}

	@Override
	public void setIcmDocumentsPath(String icmDocumentsPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentsPath = icmDocumentsPath;
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _pdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long pdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pdfFileEntryId = pdfFileEntryId;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	@JSON
	@Override
	public String getRegisteredManufacturer() {
		if (_registeredManufacturer == null) {
			return "";
		}
		else {
			return _registeredManufacturer;
		}
	}

	@Override
	public void setRegisteredManufacturer(String registeredManufacturer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registeredManufacturer = registeredManufacturer;
	}

	@JSON
	@Override
	public String getProspectingRightsNum() {
		if (_prospectingRightsNum == null) {
			return "";
		}
		else {
			return _prospectingRightsNum;
		}
	}

	@Override
	public void setProspectingRightsNum(String prospectingRightsNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prospectingRightsNum = prospectingRightsNum;
	}

	@JSON
	@Override
	public String getTypeOfBankruptcy() {
		if (_typeOfBankruptcy == null) {
			return "";
		}
		else {
			return _typeOfBankruptcy;
		}
	}

	@Override
	public void setTypeOfBankruptcy(String typeOfBankruptcy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfBankruptcy = typeOfBankruptcy;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OgtApplication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OgtApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OgtApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OgtApplicationImpl ogtApplicationImpl = new OgtApplicationImpl();

		ogtApplicationImpl.setOgtApplicationId(getOgtApplicationId());
		ogtApplicationImpl.setGroupId(getGroupId());
		ogtApplicationImpl.setCompanyId(getCompanyId());
		ogtApplicationImpl.setUserId(getUserId());
		ogtApplicationImpl.setUserName(getUserName());
		ogtApplicationImpl.setCreateDate(getCreateDate());
		ogtApplicationImpl.setModifiedDate(getModifiedDate());
		ogtApplicationImpl.setEntityId(getEntityId());
		ogtApplicationImpl.setDoYouWant(getDoYouWant());
		ogtApplicationImpl.setTypeOfApplicant(getTypeOfApplicant());
		ogtApplicationImpl.setNatureOfApplicant(getNatureOfApplicant());
		ogtApplicationImpl.setTypeOfMatter(getTypeOfMatter());
		ogtApplicationImpl.setTypeOfDebt(getTypeOfDebt());
		ogtApplicationImpl.setDebtStatute(getDebtStatute());
		ogtApplicationImpl.setStatus(getStatus());
		ogtApplicationImpl.setApplicationNumber(getApplicationNumber());
		ogtApplicationImpl.setExpiredLicenseAppNumber(
			getExpiredLicenseAppNumber());
		ogtApplicationImpl.setCaseId(getCaseId());
		ogtApplicationImpl.setIcmDocumentsPath(getIcmDocumentsPath());
		ogtApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		ogtApplicationImpl.setAppCurrentStageName(getAppCurrentStageName());
		ogtApplicationImpl.setRegisteredManufacturer(
			getRegisteredManufacturer());
		ogtApplicationImpl.setProspectingRightsNum(getProspectingRightsNum());
		ogtApplicationImpl.setTypeOfBankruptcy(getTypeOfBankruptcy());

		ogtApplicationImpl.resetOriginalValues();

		return ogtApplicationImpl;
	}

	@Override
	public OgtApplication cloneWithOriginalValues() {
		OgtApplicationImpl ogtApplicationImpl = new OgtApplicationImpl();

		ogtApplicationImpl.setOgtApplicationId(
			this.<Long>getColumnOriginalValue("ogtApplicationId"));
		ogtApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ogtApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ogtApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ogtApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ogtApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ogtApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ogtApplicationImpl.setEntityId(
			this.<String>getColumnOriginalValue("entityId"));
		ogtApplicationImpl.setDoYouWant(
			this.<String>getColumnOriginalValue("doYouWant"));
		ogtApplicationImpl.setTypeOfApplicant(
			this.<String>getColumnOriginalValue("typeOfApplicant"));
		ogtApplicationImpl.setNatureOfApplicant(
			this.<String>getColumnOriginalValue("natureOfApplicant"));
		ogtApplicationImpl.setTypeOfMatter(
			this.<String>getColumnOriginalValue("typeOfMatter"));
		ogtApplicationImpl.setTypeOfDebt(
			this.<String>getColumnOriginalValue("typeOfDebt"));
		ogtApplicationImpl.setDebtStatute(
			this.<String>getColumnOriginalValue("debtStatute"));
		ogtApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		ogtApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		ogtApplicationImpl.setExpiredLicenseAppNumber(
			this.<String>getColumnOriginalValue("expiredLicenseAppNumber"));
		ogtApplicationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		ogtApplicationImpl.setIcmDocumentsPath(
			this.<String>getColumnOriginalValue("icmDocumentsPath"));
		ogtApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("pdfFileEntryId"));
		ogtApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));
		ogtApplicationImpl.setRegisteredManufacturer(
			this.<String>getColumnOriginalValue("registeredManufacturer"));
		ogtApplicationImpl.setProspectingRightsNum(
			this.<String>getColumnOriginalValue("prospectingRightsNum"));
		ogtApplicationImpl.setTypeOfBankruptcy(
			this.<String>getColumnOriginalValue("typeOfBankruptcy"));

		return ogtApplicationImpl;
	}

	@Override
	public int compareTo(OgtApplication ogtApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ogtApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof OgtApplication)) {
			return false;
		}

		OgtApplication ogtApplication = (OgtApplication)object;

		long primaryKey = ogtApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<OgtApplication> toCacheModel() {
		OgtApplicationCacheModel ogtApplicationCacheModel =
			new OgtApplicationCacheModel();

		ogtApplicationCacheModel.ogtApplicationId = getOgtApplicationId();

		ogtApplicationCacheModel.groupId = getGroupId();

		ogtApplicationCacheModel.companyId = getCompanyId();

		ogtApplicationCacheModel.userId = getUserId();

		ogtApplicationCacheModel.userName = getUserName();

		String userName = ogtApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ogtApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ogtApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			ogtApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ogtApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ogtApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ogtApplicationCacheModel.entityId = getEntityId();

		String entityId = ogtApplicationCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			ogtApplicationCacheModel.entityId = null;
		}

		ogtApplicationCacheModel.doYouWant = getDoYouWant();

		String doYouWant = ogtApplicationCacheModel.doYouWant;

		if ((doYouWant != null) && (doYouWant.length() == 0)) {
			ogtApplicationCacheModel.doYouWant = null;
		}

		ogtApplicationCacheModel.typeOfApplicant = getTypeOfApplicant();

		String typeOfApplicant = ogtApplicationCacheModel.typeOfApplicant;

		if ((typeOfApplicant != null) && (typeOfApplicant.length() == 0)) {
			ogtApplicationCacheModel.typeOfApplicant = null;
		}

		ogtApplicationCacheModel.natureOfApplicant = getNatureOfApplicant();

		String natureOfApplicant = ogtApplicationCacheModel.natureOfApplicant;

		if ((natureOfApplicant != null) && (natureOfApplicant.length() == 0)) {
			ogtApplicationCacheModel.natureOfApplicant = null;
		}

		ogtApplicationCacheModel.typeOfMatter = getTypeOfMatter();

		String typeOfMatter = ogtApplicationCacheModel.typeOfMatter;

		if ((typeOfMatter != null) && (typeOfMatter.length() == 0)) {
			ogtApplicationCacheModel.typeOfMatter = null;
		}

		ogtApplicationCacheModel.typeOfDebt = getTypeOfDebt();

		String typeOfDebt = ogtApplicationCacheModel.typeOfDebt;

		if ((typeOfDebt != null) && (typeOfDebt.length() == 0)) {
			ogtApplicationCacheModel.typeOfDebt = null;
		}

		ogtApplicationCacheModel.debtStatute = getDebtStatute();

		String debtStatute = ogtApplicationCacheModel.debtStatute;

		if ((debtStatute != null) && (debtStatute.length() == 0)) {
			ogtApplicationCacheModel.debtStatute = null;
		}

		ogtApplicationCacheModel.status = getStatus();

		ogtApplicationCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber = ogtApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			ogtApplicationCacheModel.applicationNumber = null;
		}

		ogtApplicationCacheModel.expiredLicenseAppNumber =
			getExpiredLicenseAppNumber();

		String expiredLicenseAppNumber =
			ogtApplicationCacheModel.expiredLicenseAppNumber;

		if ((expiredLicenseAppNumber != null) &&
			(expiredLicenseAppNumber.length() == 0)) {

			ogtApplicationCacheModel.expiredLicenseAppNumber = null;
		}

		ogtApplicationCacheModel.caseId = getCaseId();

		String caseId = ogtApplicationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			ogtApplicationCacheModel.caseId = null;
		}

		ogtApplicationCacheModel.icmDocumentsPath = getIcmDocumentsPath();

		String icmDocumentsPath = ogtApplicationCacheModel.icmDocumentsPath;

		if ((icmDocumentsPath != null) && (icmDocumentsPath.length() == 0)) {
			ogtApplicationCacheModel.icmDocumentsPath = null;
		}

		ogtApplicationCacheModel.pdfFileEntryId = getPdfFileEntryId();

		ogtApplicationCacheModel.appCurrentStageName = getAppCurrentStageName();

		String appCurrentStageName =
			ogtApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			ogtApplicationCacheModel.appCurrentStageName = null;
		}

		ogtApplicationCacheModel.registeredManufacturer =
			getRegisteredManufacturer();

		String registeredManufacturer =
			ogtApplicationCacheModel.registeredManufacturer;

		if ((registeredManufacturer != null) &&
			(registeredManufacturer.length() == 0)) {

			ogtApplicationCacheModel.registeredManufacturer = null;
		}

		ogtApplicationCacheModel.prospectingRightsNum =
			getProspectingRightsNum();

		String prospectingRightsNum =
			ogtApplicationCacheModel.prospectingRightsNum;

		if ((prospectingRightsNum != null) &&
			(prospectingRightsNum.length() == 0)) {

			ogtApplicationCacheModel.prospectingRightsNum = null;
		}

		ogtApplicationCacheModel.typeOfBankruptcy = getTypeOfBankruptcy();

		String typeOfBankruptcy = ogtApplicationCacheModel.typeOfBankruptcy;

		if ((typeOfBankruptcy != null) && (typeOfBankruptcy.length() == 0)) {
			ogtApplicationCacheModel.typeOfBankruptcy = null;
		}

		return ogtApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OgtApplication, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OgtApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OgtApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((OgtApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OgtApplication>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					OgtApplication.class, ModelWrapper.class);

	}

	private long _ogtApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityId;
	private String _doYouWant;
	private String _typeOfApplicant;
	private String _natureOfApplicant;
	private String _typeOfMatter;
	private String _typeOfDebt;
	private String _debtStatute;
	private int _status;
	private String _applicationNumber;
	private String _expiredLicenseAppNumber;
	private String _caseId;
	private String _icmDocumentsPath;
	private long _pdfFileEntryId;
	private String _appCurrentStageName;
	private String _registeredManufacturer;
	private String _prospectingRightsNum;
	private String _typeOfBankruptcy;

	public <T> T getColumnValue(String columnName) {
		Function<OgtApplication, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((OgtApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ogtApplicationId", _ogtApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("doYouWant", _doYouWant);
		_columnOriginalValues.put("typeOfApplicant", _typeOfApplicant);
		_columnOriginalValues.put("natureOfApplicant", _natureOfApplicant);
		_columnOriginalValues.put("typeOfMatter", _typeOfMatter);
		_columnOriginalValues.put("typeOfDebt", _typeOfDebt);
		_columnOriginalValues.put("debtStatute", _debtStatute);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"expiredLicenseAppNumber", _expiredLicenseAppNumber);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("icmDocumentsPath", _icmDocumentsPath);
		_columnOriginalValues.put("pdfFileEntryId", _pdfFileEntryId);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
		_columnOriginalValues.put(
			"registeredManufacturer", _registeredManufacturer);
		_columnOriginalValues.put(
			"prospectingRightsNum", _prospectingRightsNum);
		_columnOriginalValues.put("typeOfBankruptcy", _typeOfBankruptcy);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ogtApplicationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("entityId", 128L);

		columnBitmasks.put("doYouWant", 256L);

		columnBitmasks.put("typeOfApplicant", 512L);

		columnBitmasks.put("natureOfApplicant", 1024L);

		columnBitmasks.put("typeOfMatter", 2048L);

		columnBitmasks.put("typeOfDebt", 4096L);

		columnBitmasks.put("debtStatute", 8192L);

		columnBitmasks.put("status", 16384L);

		columnBitmasks.put("applicationNumber", 32768L);

		columnBitmasks.put("expiredLicenseAppNumber", 65536L);

		columnBitmasks.put("caseId", 131072L);

		columnBitmasks.put("icmDocumentsPath", 262144L);

		columnBitmasks.put("pdfFileEntryId", 524288L);

		columnBitmasks.put("appCurrentStageName", 1048576L);

		columnBitmasks.put("registeredManufacturer", 2097152L);

		columnBitmasks.put("prospectingRightsNum", 4194304L);

		columnBitmasks.put("typeOfBankruptcy", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private OgtApplication _escapedModel;

}