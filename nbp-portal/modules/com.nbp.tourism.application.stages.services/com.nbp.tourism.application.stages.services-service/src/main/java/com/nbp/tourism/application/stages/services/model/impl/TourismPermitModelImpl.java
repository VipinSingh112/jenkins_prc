/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.tourism.application.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.tourism.application.stages.services.model.TourismPermit;
import com.nbp.tourism.application.stages.services.model.TourismPermitModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TourismPermit service. Represents a row in the &quot;nbp_tourism_permit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TourismPermitModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TourismPermitImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TourismPermitImpl
 * @generated
 */
@JSON(strict = true)
public class TourismPermitModelImpl
	extends BaseModelImpl<TourismPermit> implements TourismPermitModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tourism permit model instance should use the <code>TourismPermit</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_tourism_permit";

	public static final Object[][] TABLE_COLUMNS = {
		{"tourismgPermitId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"PIRPermtNumber", Types.VARCHAR}, {"dateOfIssue", Types.TIMESTAMP},
		{"dateOfExpiration", Types.TIMESTAMP},
		{"durationOfPermit", Types.VARCHAR}, {"typeOfPermit", Types.VARCHAR},
		{"numberOfExtensions", Types.VARCHAR}, {"parish", Types.VARCHAR},
		{"pirPermitCertificateNumber", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("tourismgPermitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PIRPermtNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfIssue", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfExpiration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("durationOfPermit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfPermit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfExtensions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pirPermitCertificateNumber", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_tourism_permit (tourismgPermitId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,PIRPermtNumber VARCHAR(75) null,dateOfIssue DATE null,dateOfExpiration DATE null,durationOfPermit VARCHAR(75) null,typeOfPermit VARCHAR(75) null,numberOfExtensions VARCHAR(75) null,parish VARCHAR(75) null,pirPermitCertificateNumber LONG)";

	public static final String TABLE_SQL_DROP = "drop table nbp_tourism_permit";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tourismPermit.tourismgPermitId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_tourism_permit.tourismgPermitId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TOURISMGPERMITID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TourismPermitModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tourismgPermitId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTourismgPermitId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tourismgPermitId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TourismPermit.class;
	}

	@Override
	public String getModelClassName() {
		return TourismPermit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TourismPermit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TourismPermit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismPermit, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TourismPermit)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TourismPermit, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TourismPermit, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TourismPermit)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TourismPermit, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TourismPermit, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<TourismPermit, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<TourismPermit, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<TourismPermit, Object>>();

			attributeGetterFunctions.put(
				"tourismgPermitId", TourismPermit::getTourismgPermitId);
			attributeGetterFunctions.put("groupId", TourismPermit::getGroupId);
			attributeGetterFunctions.put(
				"companyId", TourismPermit::getCompanyId);
			attributeGetterFunctions.put("userId", TourismPermit::getUserId);
			attributeGetterFunctions.put(
				"userName", TourismPermit::getUserName);
			attributeGetterFunctions.put(
				"createDate", TourismPermit::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", TourismPermit::getModifiedDate);
			attributeGetterFunctions.put("caseId", TourismPermit::getCaseId);
			attributeGetterFunctions.put(
				"PIRPermtNumber", TourismPermit::getPIRPermtNumber);
			attributeGetterFunctions.put(
				"dateOfIssue", TourismPermit::getDateOfIssue);
			attributeGetterFunctions.put(
				"dateOfExpiration", TourismPermit::getDateOfExpiration);
			attributeGetterFunctions.put(
				"durationOfPermit", TourismPermit::getDurationOfPermit);
			attributeGetterFunctions.put(
				"typeOfPermit", TourismPermit::getTypeOfPermit);
			attributeGetterFunctions.put(
				"numberOfExtensions", TourismPermit::getNumberOfExtensions);
			attributeGetterFunctions.put("parish", TourismPermit::getParish);
			attributeGetterFunctions.put(
				"pirPermitCertificateNumber",
				TourismPermit::getPirPermitCertificateNumber);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<TourismPermit, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<TourismPermit, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<TourismPermit, ?>>();

			attributeSetterBiConsumers.put(
				"tourismgPermitId",
				(BiConsumer<TourismPermit, Long>)
					TourismPermit::setTourismgPermitId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<TourismPermit, Long>)TourismPermit::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<TourismPermit, Long>)TourismPermit::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<TourismPermit, Long>)TourismPermit::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<TourismPermit, String>)TourismPermit::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<TourismPermit, Date>)TourismPermit::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<TourismPermit, Date>)
					TourismPermit::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<TourismPermit, String>)TourismPermit::setCaseId);
			attributeSetterBiConsumers.put(
				"PIRPermtNumber",
				(BiConsumer<TourismPermit, String>)
					TourismPermit::setPIRPermtNumber);
			attributeSetterBiConsumers.put(
				"dateOfIssue",
				(BiConsumer<TourismPermit, Date>)TourismPermit::setDateOfIssue);
			attributeSetterBiConsumers.put(
				"dateOfExpiration",
				(BiConsumer<TourismPermit, Date>)
					TourismPermit::setDateOfExpiration);
			attributeSetterBiConsumers.put(
				"durationOfPermit",
				(BiConsumer<TourismPermit, String>)
					TourismPermit::setDurationOfPermit);
			attributeSetterBiConsumers.put(
				"typeOfPermit",
				(BiConsumer<TourismPermit, String>)
					TourismPermit::setTypeOfPermit);
			attributeSetterBiConsumers.put(
				"numberOfExtensions",
				(BiConsumer<TourismPermit, String>)
					TourismPermit::setNumberOfExtensions);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<TourismPermit, String>)TourismPermit::setParish);
			attributeSetterBiConsumers.put(
				"pirPermitCertificateNumber",
				(BiConsumer<TourismPermit, Long>)
					TourismPermit::setPirPermitCertificateNumber);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTourismgPermitId() {
		return _tourismgPermitId;
	}

	@Override
	public void setTourismgPermitId(long tourismgPermitId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tourismgPermitId = tourismgPermitId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getPIRPermtNumber() {
		if (_PIRPermtNumber == null) {
			return "";
		}
		else {
			return _PIRPermtNumber;
		}
	}

	@Override
	public void setPIRPermtNumber(String PIRPermtNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_PIRPermtNumber = PIRPermtNumber;
	}

	@JSON
	@Override
	public Date getDateOfIssue() {
		return _dateOfIssue;
	}

	@Override
	public void setDateOfIssue(Date dateOfIssue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfIssue = dateOfIssue;
	}

	@JSON
	@Override
	public Date getDateOfExpiration() {
		return _dateOfExpiration;
	}

	@Override
	public void setDateOfExpiration(Date dateOfExpiration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfExpiration = dateOfExpiration;
	}

	@JSON
	@Override
	public String getDurationOfPermit() {
		if (_durationOfPermit == null) {
			return "";
		}
		else {
			return _durationOfPermit;
		}
	}

	@Override
	public void setDurationOfPermit(String durationOfPermit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_durationOfPermit = durationOfPermit;
	}

	@JSON
	@Override
	public String getTypeOfPermit() {
		if (_typeOfPermit == null) {
			return "";
		}
		else {
			return _typeOfPermit;
		}
	}

	@Override
	public void setTypeOfPermit(String typeOfPermit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfPermit = typeOfPermit;
	}

	@JSON
	@Override
	public String getNumberOfExtensions() {
		if (_numberOfExtensions == null) {
			return "";
		}
		else {
			return _numberOfExtensions;
		}
	}

	@Override
	public void setNumberOfExtensions(String numberOfExtensions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfExtensions = numberOfExtensions;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public long getPirPermitCertificateNumber() {
		return _pirPermitCertificateNumber;
	}

	@Override
	public void setPirPermitCertificateNumber(long pirPermitCertificateNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pirPermitCertificateNumber = pirPermitCertificateNumber;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TourismPermit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TourismPermit toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TourismPermit>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TourismPermitImpl tourismPermitImpl = new TourismPermitImpl();

		tourismPermitImpl.setTourismgPermitId(getTourismgPermitId());
		tourismPermitImpl.setGroupId(getGroupId());
		tourismPermitImpl.setCompanyId(getCompanyId());
		tourismPermitImpl.setUserId(getUserId());
		tourismPermitImpl.setUserName(getUserName());
		tourismPermitImpl.setCreateDate(getCreateDate());
		tourismPermitImpl.setModifiedDate(getModifiedDate());
		tourismPermitImpl.setCaseId(getCaseId());
		tourismPermitImpl.setPIRPermtNumber(getPIRPermtNumber());
		tourismPermitImpl.setDateOfIssue(getDateOfIssue());
		tourismPermitImpl.setDateOfExpiration(getDateOfExpiration());
		tourismPermitImpl.setDurationOfPermit(getDurationOfPermit());
		tourismPermitImpl.setTypeOfPermit(getTypeOfPermit());
		tourismPermitImpl.setNumberOfExtensions(getNumberOfExtensions());
		tourismPermitImpl.setParish(getParish());
		tourismPermitImpl.setPirPermitCertificateNumber(
			getPirPermitCertificateNumber());

		tourismPermitImpl.resetOriginalValues();

		return tourismPermitImpl;
	}

	@Override
	public TourismPermit cloneWithOriginalValues() {
		TourismPermitImpl tourismPermitImpl = new TourismPermitImpl();

		tourismPermitImpl.setTourismgPermitId(
			this.<Long>getColumnOriginalValue("tourismgPermitId"));
		tourismPermitImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		tourismPermitImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tourismPermitImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		tourismPermitImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tourismPermitImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tourismPermitImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tourismPermitImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		tourismPermitImpl.setPIRPermtNumber(
			this.<String>getColumnOriginalValue("PIRPermtNumber"));
		tourismPermitImpl.setDateOfIssue(
			this.<Date>getColumnOriginalValue("dateOfIssue"));
		tourismPermitImpl.setDateOfExpiration(
			this.<Date>getColumnOriginalValue("dateOfExpiration"));
		tourismPermitImpl.setDurationOfPermit(
			this.<String>getColumnOriginalValue("durationOfPermit"));
		tourismPermitImpl.setTypeOfPermit(
			this.<String>getColumnOriginalValue("typeOfPermit"));
		tourismPermitImpl.setNumberOfExtensions(
			this.<String>getColumnOriginalValue("numberOfExtensions"));
		tourismPermitImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		tourismPermitImpl.setPirPermitCertificateNumber(
			this.<Long>getColumnOriginalValue("pirPermitCertificateNumber"));

		return tourismPermitImpl;
	}

	@Override
	public int compareTo(TourismPermit tourismPermit) {
		long primaryKey = tourismPermit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TourismPermit)) {
			return false;
		}

		TourismPermit tourismPermit = (TourismPermit)object;

		long primaryKey = tourismPermit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TourismPermit> toCacheModel() {
		TourismPermitCacheModel tourismPermitCacheModel =
			new TourismPermitCacheModel();

		tourismPermitCacheModel.tourismgPermitId = getTourismgPermitId();

		tourismPermitCacheModel.groupId = getGroupId();

		tourismPermitCacheModel.companyId = getCompanyId();

		tourismPermitCacheModel.userId = getUserId();

		tourismPermitCacheModel.userName = getUserName();

		String userName = tourismPermitCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tourismPermitCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tourismPermitCacheModel.createDate = createDate.getTime();
		}
		else {
			tourismPermitCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tourismPermitCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tourismPermitCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tourismPermitCacheModel.caseId = getCaseId();

		String caseId = tourismPermitCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			tourismPermitCacheModel.caseId = null;
		}

		tourismPermitCacheModel.PIRPermtNumber = getPIRPermtNumber();

		String PIRPermtNumber = tourismPermitCacheModel.PIRPermtNumber;

		if ((PIRPermtNumber != null) && (PIRPermtNumber.length() == 0)) {
			tourismPermitCacheModel.PIRPermtNumber = null;
		}

		Date dateOfIssue = getDateOfIssue();

		if (dateOfIssue != null) {
			tourismPermitCacheModel.dateOfIssue = dateOfIssue.getTime();
		}
		else {
			tourismPermitCacheModel.dateOfIssue = Long.MIN_VALUE;
		}

		Date dateOfExpiration = getDateOfExpiration();

		if (dateOfExpiration != null) {
			tourismPermitCacheModel.dateOfExpiration =
				dateOfExpiration.getTime();
		}
		else {
			tourismPermitCacheModel.dateOfExpiration = Long.MIN_VALUE;
		}

		tourismPermitCacheModel.durationOfPermit = getDurationOfPermit();

		String durationOfPermit = tourismPermitCacheModel.durationOfPermit;

		if ((durationOfPermit != null) && (durationOfPermit.length() == 0)) {
			tourismPermitCacheModel.durationOfPermit = null;
		}

		tourismPermitCacheModel.typeOfPermit = getTypeOfPermit();

		String typeOfPermit = tourismPermitCacheModel.typeOfPermit;

		if ((typeOfPermit != null) && (typeOfPermit.length() == 0)) {
			tourismPermitCacheModel.typeOfPermit = null;
		}

		tourismPermitCacheModel.numberOfExtensions = getNumberOfExtensions();

		String numberOfExtensions = tourismPermitCacheModel.numberOfExtensions;

		if ((numberOfExtensions != null) &&
			(numberOfExtensions.length() == 0)) {

			tourismPermitCacheModel.numberOfExtensions = null;
		}

		tourismPermitCacheModel.parish = getParish();

		String parish = tourismPermitCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			tourismPermitCacheModel.parish = null;
		}

		tourismPermitCacheModel.pirPermitCertificateNumber =
			getPirPermitCertificateNumber();

		return tourismPermitCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TourismPermit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TourismPermit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TourismPermit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((TourismPermit)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TourismPermit>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TourismPermit.class, ModelWrapper.class);

	}

	private long _tourismgPermitId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _PIRPermtNumber;
	private Date _dateOfIssue;
	private Date _dateOfExpiration;
	private String _durationOfPermit;
	private String _typeOfPermit;
	private String _numberOfExtensions;
	private String _parish;
	private long _pirPermitCertificateNumber;

	public <T> T getColumnValue(String columnName) {
		Function<TourismPermit, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TourismPermit)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("tourismgPermitId", _tourismgPermitId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("PIRPermtNumber", _PIRPermtNumber);
		_columnOriginalValues.put("dateOfIssue", _dateOfIssue);
		_columnOriginalValues.put("dateOfExpiration", _dateOfExpiration);
		_columnOriginalValues.put("durationOfPermit", _durationOfPermit);
		_columnOriginalValues.put("typeOfPermit", _typeOfPermit);
		_columnOriginalValues.put("numberOfExtensions", _numberOfExtensions);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put(
			"pirPermitCertificateNumber", _pirPermitCertificateNumber);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("tourismgPermitId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("PIRPermtNumber", 256L);

		columnBitmasks.put("dateOfIssue", 512L);

		columnBitmasks.put("dateOfExpiration", 1024L);

		columnBitmasks.put("durationOfPermit", 2048L);

		columnBitmasks.put("typeOfPermit", 4096L);

		columnBitmasks.put("numberOfExtensions", 8192L);

		columnBitmasks.put("parish", 16384L);

		columnBitmasks.put("pirPermitCertificateNumber", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TourismPermit _escapedModel;

}