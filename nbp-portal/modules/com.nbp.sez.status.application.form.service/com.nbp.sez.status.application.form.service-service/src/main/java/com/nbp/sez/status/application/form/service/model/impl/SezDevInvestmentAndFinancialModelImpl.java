/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezDevInvestmentAndFinancial;
import com.nbp.sez.status.application.form.service.model.SezDevInvestmentAndFinancialModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezDevInvestmentAndFinancial service. Represents a row in the &quot;nbp_sez_dev_Inves_and_financ&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezDevInvestmentAndFinancialModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezDevInvestmentAndFinancialImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezDevInvestmentAndFinancialImpl
 * @generated
 */
@JSON(strict = true)
public class SezDevInvestmentAndFinancialModelImpl
	extends BaseModelImpl<SezDevInvestmentAndFinancial>
	implements SezDevInvestmentAndFinancialModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez dev investment and financial model instance should use the <code>SezDevInvestmentAndFinancial</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_dev_Inves_and_financ";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezDevInvestmentAndFinancialId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"valueOfLand", Types.VARCHAR},
		{"buildingFactoryDevelop", Types.VARCHAR},
		{"onSiteInfrastructure", Types.VARCHAR}, {"port", Types.VARCHAR},
		{"airPort", Types.VARCHAR}, {"other", Types.VARCHAR},
		{"total", Types.VARCHAR}, {"totalLocalDirector", Types.VARCHAR},
		{"totalForeignDirector", Types.VARCHAR}, {"companyName", Types.VARCHAR},
		{"resisdentAddress", Types.VARCHAR}, {"sourceOfFunds", Types.VARCHAR},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezDevInvestmentAndFinancialId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("valueOfLand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("buildingFactoryDevelop", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("onSiteInfrastructure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("port", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("airPort", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("other", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("total", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalLocalDirector", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalForeignDirector", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("resisdentAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sourceOfFunds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_dev_Inves_and_financ (sezDevInvestmentAndFinancialId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,valueOfLand VARCHAR(75) null,buildingFactoryDevelop VARCHAR(75) null,onSiteInfrastructure VARCHAR(75) null,port VARCHAR(75) null,airPort VARCHAR(75) null,other VARCHAR(75) null,total VARCHAR(75) null,totalLocalDirector VARCHAR(75) null,totalForeignDirector VARCHAR(75) null,companyName VARCHAR(75) null,resisdentAddress VARCHAR(75) null,sourceOfFunds VARCHAR(75) null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_dev_Inves_and_financ";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezDevInvestmentAndFinancial.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_dev_Inves_and_financ.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezDevInvestmentAndFinancialModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezDevInvestmentAndFinancialId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezDevInvestmentAndFinancialId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezDevInvestmentAndFinancialId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezDevInvestmentAndFinancial.class;
	}

	@Override
	public String getModelClassName() {
		return SezDevInvestmentAndFinancial.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SezDevInvestmentAndFinancial, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SezDevInvestmentAndFinancial, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezDevInvestmentAndFinancial, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(SezDevInvestmentAndFinancial)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SezDevInvestmentAndFinancial, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezDevInvestmentAndFinancial, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezDevInvestmentAndFinancial)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SezDevInvestmentAndFinancial, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SezDevInvestmentAndFinancial, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<SezDevInvestmentAndFinancial, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<SezDevInvestmentAndFinancial, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<SezDevInvestmentAndFinancial, Object>>();

			attributeGetterFunctions.put(
				"sezDevInvestmentAndFinancialId",
				SezDevInvestmentAndFinancial::
					getSezDevInvestmentAndFinancialId);
			attributeGetterFunctions.put(
				"groupId", SezDevInvestmentAndFinancial::getGroupId);
			attributeGetterFunctions.put(
				"companyId", SezDevInvestmentAndFinancial::getCompanyId);
			attributeGetterFunctions.put(
				"userId", SezDevInvestmentAndFinancial::getUserId);
			attributeGetterFunctions.put(
				"userName", SezDevInvestmentAndFinancial::getUserName);
			attributeGetterFunctions.put(
				"createDate", SezDevInvestmentAndFinancial::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", SezDevInvestmentAndFinancial::getModifiedDate);
			attributeGetterFunctions.put(
				"valueOfLand", SezDevInvestmentAndFinancial::getValueOfLand);
			attributeGetterFunctions.put(
				"buildingFactoryDevelop",
				SezDevInvestmentAndFinancial::getBuildingFactoryDevelop);
			attributeGetterFunctions.put(
				"onSiteInfrastructure",
				SezDevInvestmentAndFinancial::getOnSiteInfrastructure);
			attributeGetterFunctions.put(
				"port", SezDevInvestmentAndFinancial::getPort);
			attributeGetterFunctions.put(
				"airPort", SezDevInvestmentAndFinancial::getAirPort);
			attributeGetterFunctions.put(
				"other", SezDevInvestmentAndFinancial::getOther);
			attributeGetterFunctions.put(
				"total", SezDevInvestmentAndFinancial::getTotal);
			attributeGetterFunctions.put(
				"totalLocalDirector",
				SezDevInvestmentAndFinancial::getTotalLocalDirector);
			attributeGetterFunctions.put(
				"totalForeignDirector",
				SezDevInvestmentAndFinancial::getTotalForeignDirector);
			attributeGetterFunctions.put(
				"companyName", SezDevInvestmentAndFinancial::getCompanyName);
			attributeGetterFunctions.put(
				"resisdentAddress",
				SezDevInvestmentAndFinancial::getResisdentAddress);
			attributeGetterFunctions.put(
				"sourceOfFunds",
				SezDevInvestmentAndFinancial::getSourceOfFunds);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezDevInvestmentAndFinancial::getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<SezDevInvestmentAndFinancial, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SezDevInvestmentAndFinancial, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<SezDevInvestmentAndFinancial, ?>>();

			attributeSetterBiConsumers.put(
				"sezDevInvestmentAndFinancialId",
				(BiConsumer<SezDevInvestmentAndFinancial, Long>)
					SezDevInvestmentAndFinancial::
						setSezDevInvestmentAndFinancialId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezDevInvestmentAndFinancial, Long>)
					SezDevInvestmentAndFinancial::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezDevInvestmentAndFinancial, Long>)
					SezDevInvestmentAndFinancial::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezDevInvestmentAndFinancial, Long>)
					SezDevInvestmentAndFinancial::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezDevInvestmentAndFinancial, Date>)
					SezDevInvestmentAndFinancial::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezDevInvestmentAndFinancial, Date>)
					SezDevInvestmentAndFinancial::setModifiedDate);
			attributeSetterBiConsumers.put(
				"valueOfLand",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setValueOfLand);
			attributeSetterBiConsumers.put(
				"buildingFactoryDevelop",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setBuildingFactoryDevelop);
			attributeSetterBiConsumers.put(
				"onSiteInfrastructure",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setOnSiteInfrastructure);
			attributeSetterBiConsumers.put(
				"port",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setPort);
			attributeSetterBiConsumers.put(
				"airPort",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setAirPort);
			attributeSetterBiConsumers.put(
				"other",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setOther);
			attributeSetterBiConsumers.put(
				"total",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setTotal);
			attributeSetterBiConsumers.put(
				"totalLocalDirector",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setTotalLocalDirector);
			attributeSetterBiConsumers.put(
				"totalForeignDirector",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setTotalForeignDirector);
			attributeSetterBiConsumers.put(
				"companyName",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setCompanyName);
			attributeSetterBiConsumers.put(
				"resisdentAddress",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setResisdentAddress);
			attributeSetterBiConsumers.put(
				"sourceOfFunds",
				(BiConsumer<SezDevInvestmentAndFinancial, String>)
					SezDevInvestmentAndFinancial::setSourceOfFunds);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezDevInvestmentAndFinancial, Long>)
					SezDevInvestmentAndFinancial::setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezDevInvestmentAndFinancialId() {
		return _sezDevInvestmentAndFinancialId;
	}

	@Override
	public void setSezDevInvestmentAndFinancialId(
		long sezDevInvestmentAndFinancialId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezDevInvestmentAndFinancialId = sezDevInvestmentAndFinancialId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getValueOfLand() {
		if (_valueOfLand == null) {
			return "";
		}
		else {
			return _valueOfLand;
		}
	}

	@Override
	public void setValueOfLand(String valueOfLand) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_valueOfLand = valueOfLand;
	}

	@JSON
	@Override
	public String getBuildingFactoryDevelop() {
		if (_buildingFactoryDevelop == null) {
			return "";
		}
		else {
			return _buildingFactoryDevelop;
		}
	}

	@Override
	public void setBuildingFactoryDevelop(String buildingFactoryDevelop) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_buildingFactoryDevelop = buildingFactoryDevelop;
	}

	@JSON
	@Override
	public String getOnSiteInfrastructure() {
		if (_onSiteInfrastructure == null) {
			return "";
		}
		else {
			return _onSiteInfrastructure;
		}
	}

	@Override
	public void setOnSiteInfrastructure(String onSiteInfrastructure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_onSiteInfrastructure = onSiteInfrastructure;
	}

	@JSON
	@Override
	public String getPort() {
		if (_port == null) {
			return "";
		}
		else {
			return _port;
		}
	}

	@Override
	public void setPort(String port) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_port = port;
	}

	@JSON
	@Override
	public String getAirPort() {
		if (_airPort == null) {
			return "";
		}
		else {
			return _airPort;
		}
	}

	@Override
	public void setAirPort(String airPort) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_airPort = airPort;
	}

	@JSON
	@Override
	public String getOther() {
		if (_other == null) {
			return "";
		}
		else {
			return _other;
		}
	}

	@Override
	public void setOther(String other) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_other = other;
	}

	@JSON
	@Override
	public String getTotal() {
		if (_total == null) {
			return "";
		}
		else {
			return _total;
		}
	}

	@Override
	public void setTotal(String total) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_total = total;
	}

	@JSON
	@Override
	public String getTotalLocalDirector() {
		if (_totalLocalDirector == null) {
			return "";
		}
		else {
			return _totalLocalDirector;
		}
	}

	@Override
	public void setTotalLocalDirector(String totalLocalDirector) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalLocalDirector = totalLocalDirector;
	}

	@JSON
	@Override
	public String getTotalForeignDirector() {
		if (_totalForeignDirector == null) {
			return "";
		}
		else {
			return _totalForeignDirector;
		}
	}

	@Override
	public void setTotalForeignDirector(String totalForeignDirector) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalForeignDirector = totalForeignDirector;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	@JSON
	@Override
	public String getResisdentAddress() {
		if (_resisdentAddress == null) {
			return "";
		}
		else {
			return _resisdentAddress;
		}
	}

	@Override
	public void setResisdentAddress(String resisdentAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resisdentAddress = resisdentAddress;
	}

	@JSON
	@Override
	public String getSourceOfFunds() {
		if (_sourceOfFunds == null) {
			return "";
		}
		else {
			return _sourceOfFunds;
		}
	}

	@Override
	public void setSourceOfFunds(String sourceOfFunds) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourceOfFunds = sourceOfFunds;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SezDevInvestmentAndFinancial.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezDevInvestmentAndFinancial toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SezDevInvestmentAndFinancial>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezDevInvestmentAndFinancialImpl sezDevInvestmentAndFinancialImpl =
			new SezDevInvestmentAndFinancialImpl();

		sezDevInvestmentAndFinancialImpl.setSezDevInvestmentAndFinancialId(
			getSezDevInvestmentAndFinancialId());
		sezDevInvestmentAndFinancialImpl.setGroupId(getGroupId());
		sezDevInvestmentAndFinancialImpl.setCompanyId(getCompanyId());
		sezDevInvestmentAndFinancialImpl.setUserId(getUserId());
		sezDevInvestmentAndFinancialImpl.setUserName(getUserName());
		sezDevInvestmentAndFinancialImpl.setCreateDate(getCreateDate());
		sezDevInvestmentAndFinancialImpl.setModifiedDate(getModifiedDate());
		sezDevInvestmentAndFinancialImpl.setValueOfLand(getValueOfLand());
		sezDevInvestmentAndFinancialImpl.setBuildingFactoryDevelop(
			getBuildingFactoryDevelop());
		sezDevInvestmentAndFinancialImpl.setOnSiteInfrastructure(
			getOnSiteInfrastructure());
		sezDevInvestmentAndFinancialImpl.setPort(getPort());
		sezDevInvestmentAndFinancialImpl.setAirPort(getAirPort());
		sezDevInvestmentAndFinancialImpl.setOther(getOther());
		sezDevInvestmentAndFinancialImpl.setTotal(getTotal());
		sezDevInvestmentAndFinancialImpl.setTotalLocalDirector(
			getTotalLocalDirector());
		sezDevInvestmentAndFinancialImpl.setTotalForeignDirector(
			getTotalForeignDirector());
		sezDevInvestmentAndFinancialImpl.setCompanyName(getCompanyName());
		sezDevInvestmentAndFinancialImpl.setResisdentAddress(
			getResisdentAddress());
		sezDevInvestmentAndFinancialImpl.setSourceOfFunds(getSourceOfFunds());
		sezDevInvestmentAndFinancialImpl.setSezStatusApplicationId(
			getSezStatusApplicationId());

		sezDevInvestmentAndFinancialImpl.resetOriginalValues();

		return sezDevInvestmentAndFinancialImpl;
	}

	@Override
	public SezDevInvestmentAndFinancial cloneWithOriginalValues() {
		SezDevInvestmentAndFinancialImpl sezDevInvestmentAndFinancialImpl =
			new SezDevInvestmentAndFinancialImpl();

		sezDevInvestmentAndFinancialImpl.setSezDevInvestmentAndFinancialId(
			this.<Long>getColumnOriginalValue(
				"sezDevInvestmentAndFinancialId"));
		sezDevInvestmentAndFinancialImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezDevInvestmentAndFinancialImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezDevInvestmentAndFinancialImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezDevInvestmentAndFinancialImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezDevInvestmentAndFinancialImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezDevInvestmentAndFinancialImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezDevInvestmentAndFinancialImpl.setValueOfLand(
			this.<String>getColumnOriginalValue("valueOfLand"));
		sezDevInvestmentAndFinancialImpl.setBuildingFactoryDevelop(
			this.<String>getColumnOriginalValue("buildingFactoryDevelop"));
		sezDevInvestmentAndFinancialImpl.setOnSiteInfrastructure(
			this.<String>getColumnOriginalValue("onSiteInfrastructure"));
		sezDevInvestmentAndFinancialImpl.setPort(
			this.<String>getColumnOriginalValue("port"));
		sezDevInvestmentAndFinancialImpl.setAirPort(
			this.<String>getColumnOriginalValue("airPort"));
		sezDevInvestmentAndFinancialImpl.setOther(
			this.<String>getColumnOriginalValue("other"));
		sezDevInvestmentAndFinancialImpl.setTotal(
			this.<String>getColumnOriginalValue("total"));
		sezDevInvestmentAndFinancialImpl.setTotalLocalDirector(
			this.<String>getColumnOriginalValue("totalLocalDirector"));
		sezDevInvestmentAndFinancialImpl.setTotalForeignDirector(
			this.<String>getColumnOriginalValue("totalForeignDirector"));
		sezDevInvestmentAndFinancialImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		sezDevInvestmentAndFinancialImpl.setResisdentAddress(
			this.<String>getColumnOriginalValue("resisdentAddress"));
		sezDevInvestmentAndFinancialImpl.setSourceOfFunds(
			this.<String>getColumnOriginalValue("sourceOfFunds"));
		sezDevInvestmentAndFinancialImpl.setSezStatusApplicationId(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezDevInvestmentAndFinancialImpl;
	}

	@Override
	public int compareTo(
		SezDevInvestmentAndFinancial sezDevInvestmentAndFinancial) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), sezDevInvestmentAndFinancial.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezDevInvestmentAndFinancial)) {
			return false;
		}

		SezDevInvestmentAndFinancial sezDevInvestmentAndFinancial =
			(SezDevInvestmentAndFinancial)object;

		long primaryKey = sezDevInvestmentAndFinancial.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezDevInvestmentAndFinancial> toCacheModel() {
		SezDevInvestmentAndFinancialCacheModel
			sezDevInvestmentAndFinancialCacheModel =
				new SezDevInvestmentAndFinancialCacheModel();

		sezDevInvestmentAndFinancialCacheModel.sezDevInvestmentAndFinancialId =
			getSezDevInvestmentAndFinancialId();

		sezDevInvestmentAndFinancialCacheModel.groupId = getGroupId();

		sezDevInvestmentAndFinancialCacheModel.companyId = getCompanyId();

		sezDevInvestmentAndFinancialCacheModel.userId = getUserId();

		sezDevInvestmentAndFinancialCacheModel.userName = getUserName();

		String userName = sezDevInvestmentAndFinancialCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezDevInvestmentAndFinancialCacheModel.createDate =
				createDate.getTime();
		}
		else {
			sezDevInvestmentAndFinancialCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezDevInvestmentAndFinancialCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sezDevInvestmentAndFinancialCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		sezDevInvestmentAndFinancialCacheModel.valueOfLand = getValueOfLand();

		String valueOfLand = sezDevInvestmentAndFinancialCacheModel.valueOfLand;

		if ((valueOfLand != null) && (valueOfLand.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.valueOfLand = null;
		}

		sezDevInvestmentAndFinancialCacheModel.buildingFactoryDevelop =
			getBuildingFactoryDevelop();

		String buildingFactoryDevelop =
			sezDevInvestmentAndFinancialCacheModel.buildingFactoryDevelop;

		if ((buildingFactoryDevelop != null) &&
			(buildingFactoryDevelop.length() == 0)) {

			sezDevInvestmentAndFinancialCacheModel.buildingFactoryDevelop =
				null;
		}

		sezDevInvestmentAndFinancialCacheModel.onSiteInfrastructure =
			getOnSiteInfrastructure();

		String onSiteInfrastructure =
			sezDevInvestmentAndFinancialCacheModel.onSiteInfrastructure;

		if ((onSiteInfrastructure != null) &&
			(onSiteInfrastructure.length() == 0)) {

			sezDevInvestmentAndFinancialCacheModel.onSiteInfrastructure = null;
		}

		sezDevInvestmentAndFinancialCacheModel.port = getPort();

		String port = sezDevInvestmentAndFinancialCacheModel.port;

		if ((port != null) && (port.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.port = null;
		}

		sezDevInvestmentAndFinancialCacheModel.airPort = getAirPort();

		String airPort = sezDevInvestmentAndFinancialCacheModel.airPort;

		if ((airPort != null) && (airPort.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.airPort = null;
		}

		sezDevInvestmentAndFinancialCacheModel.other = getOther();

		String other = sezDevInvestmentAndFinancialCacheModel.other;

		if ((other != null) && (other.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.other = null;
		}

		sezDevInvestmentAndFinancialCacheModel.total = getTotal();

		String total = sezDevInvestmentAndFinancialCacheModel.total;

		if ((total != null) && (total.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.total = null;
		}

		sezDevInvestmentAndFinancialCacheModel.totalLocalDirector =
			getTotalLocalDirector();

		String totalLocalDirector =
			sezDevInvestmentAndFinancialCacheModel.totalLocalDirector;

		if ((totalLocalDirector != null) &&
			(totalLocalDirector.length() == 0)) {

			sezDevInvestmentAndFinancialCacheModel.totalLocalDirector = null;
		}

		sezDevInvestmentAndFinancialCacheModel.totalForeignDirector =
			getTotalForeignDirector();

		String totalForeignDirector =
			sezDevInvestmentAndFinancialCacheModel.totalForeignDirector;

		if ((totalForeignDirector != null) &&
			(totalForeignDirector.length() == 0)) {

			sezDevInvestmentAndFinancialCacheModel.totalForeignDirector = null;
		}

		sezDevInvestmentAndFinancialCacheModel.companyName = getCompanyName();

		String companyName = sezDevInvestmentAndFinancialCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.companyName = null;
		}

		sezDevInvestmentAndFinancialCacheModel.resisdentAddress =
			getResisdentAddress();

		String resisdentAddress =
			sezDevInvestmentAndFinancialCacheModel.resisdentAddress;

		if ((resisdentAddress != null) && (resisdentAddress.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.resisdentAddress = null;
		}

		sezDevInvestmentAndFinancialCacheModel.sourceOfFunds =
			getSourceOfFunds();

		String sourceOfFunds =
			sezDevInvestmentAndFinancialCacheModel.sourceOfFunds;

		if ((sourceOfFunds != null) && (sourceOfFunds.length() == 0)) {
			sezDevInvestmentAndFinancialCacheModel.sourceOfFunds = null;
		}

		sezDevInvestmentAndFinancialCacheModel.sezStatusApplicationId =
			getSezStatusApplicationId();

		return sezDevInvestmentAndFinancialCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SezDevInvestmentAndFinancial, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SezDevInvestmentAndFinancial, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezDevInvestmentAndFinancial, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezDevInvestmentAndFinancial)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SezDevInvestmentAndFinancial>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SezDevInvestmentAndFinancial.class, ModelWrapper.class);

	}

	private long _sezDevInvestmentAndFinancialId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _valueOfLand;
	private String _buildingFactoryDevelop;
	private String _onSiteInfrastructure;
	private String _port;
	private String _airPort;
	private String _other;
	private String _total;
	private String _totalLocalDirector;
	private String _totalForeignDirector;
	private String _companyName;
	private String _resisdentAddress;
	private String _sourceOfFunds;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezDevInvestmentAndFinancial, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SezDevInvestmentAndFinancial)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"sezDevInvestmentAndFinancialId", _sezDevInvestmentAndFinancialId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("valueOfLand", _valueOfLand);
		_columnOriginalValues.put(
			"buildingFactoryDevelop", _buildingFactoryDevelop);
		_columnOriginalValues.put(
			"onSiteInfrastructure", _onSiteInfrastructure);
		_columnOriginalValues.put("port", _port);
		_columnOriginalValues.put("airPort", _airPort);
		_columnOriginalValues.put("other", _other);
		_columnOriginalValues.put("total", _total);
		_columnOriginalValues.put("totalLocalDirector", _totalLocalDirector);
		_columnOriginalValues.put(
			"totalForeignDirector", _totalForeignDirector);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("resisdentAddress", _resisdentAddress);
		_columnOriginalValues.put("sourceOfFunds", _sourceOfFunds);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezDevInvestmentAndFinancialId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("valueOfLand", 128L);

		columnBitmasks.put("buildingFactoryDevelop", 256L);

		columnBitmasks.put("onSiteInfrastructure", 512L);

		columnBitmasks.put("port", 1024L);

		columnBitmasks.put("airPort", 2048L);

		columnBitmasks.put("other", 4096L);

		columnBitmasks.put("total", 8192L);

		columnBitmasks.put("totalLocalDirector", 16384L);

		columnBitmasks.put("totalForeignDirector", 32768L);

		columnBitmasks.put("companyName", 65536L);

		columnBitmasks.put("resisdentAddress", 131072L);

		columnBitmasks.put("sourceOfFunds", 262144L);

		columnBitmasks.put("sezStatusApplicationId", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezDevInvestmentAndFinancial _escapedModel;

}