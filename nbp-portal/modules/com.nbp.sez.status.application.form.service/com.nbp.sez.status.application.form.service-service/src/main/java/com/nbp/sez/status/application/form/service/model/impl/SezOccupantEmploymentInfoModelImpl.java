/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezOccupantEmploymentInfo;
import com.nbp.sez.status.application.form.service.model.SezOccupantEmploymentInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezOccupantEmploymentInfo service. Represents a row in the &quot;nbp_sez_occ_employee_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezOccupantEmploymentInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezOccupantEmploymentInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezOccupantEmploymentInfoImpl
 * @generated
 */
@JSON(strict = true)
public class SezOccupantEmploymentInfoModelImpl
	extends BaseModelImpl<SezOccupantEmploymentInfo>
	implements SezOccupantEmploymentInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez occupant employment info model instance should use the <code>SezOccupantEmploymentInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_occ_employee_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezOccEmpId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"occLabourYear", Types.VARCHAR},
		{"occLabourDirect", Types.VARCHAR}, {"occLabourMale", Types.VARCHAR},
		{"occLabourFemale", Types.VARCHAR}, {"occLabourLocal", Types.VARCHAR},
		{"occLabourForeign", Types.VARCHAR}, {"occEmpCounter", Types.VARCHAR},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezOccEmpId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occLabourYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occLabourDirect", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occLabourMale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occLabourFemale", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occLabourLocal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occLabourForeign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occEmpCounter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_occ_employee_info (sezOccEmpId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,occLabourYear VARCHAR(75) null,occLabourDirect VARCHAR(75) null,occLabourMale VARCHAR(75) null,occLabourFemale VARCHAR(75) null,occLabourLocal VARCHAR(75) null,occLabourForeign VARCHAR(75) null,occEmpCounter VARCHAR(75) null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_occ_employee_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezOccupantEmploymentInfo.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_occ_employee_info.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezOccupantEmploymentInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezOccEmpId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezOccEmpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezOccEmpId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezOccupantEmploymentInfo.class;
	}

	@Override
	public String getModelClassName() {
		return SezOccupantEmploymentInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SezOccupantEmploymentInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SezOccupantEmploymentInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupantEmploymentInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SezOccupantEmploymentInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SezOccupantEmploymentInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezOccupantEmploymentInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezOccupantEmploymentInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SezOccupantEmploymentInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SezOccupantEmploymentInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<SezOccupantEmploymentInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<SezOccupantEmploymentInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<SezOccupantEmploymentInfo, Object>>();

			attributeGetterFunctions.put(
				"sezOccEmpId", SezOccupantEmploymentInfo::getSezOccEmpId);
			attributeGetterFunctions.put(
				"groupId", SezOccupantEmploymentInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", SezOccupantEmploymentInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", SezOccupantEmploymentInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", SezOccupantEmploymentInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", SezOccupantEmploymentInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", SezOccupantEmploymentInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"occLabourYear", SezOccupantEmploymentInfo::getOccLabourYear);
			attributeGetterFunctions.put(
				"occLabourDirect",
				SezOccupantEmploymentInfo::getOccLabourDirect);
			attributeGetterFunctions.put(
				"occLabourMale", SezOccupantEmploymentInfo::getOccLabourMale);
			attributeGetterFunctions.put(
				"occLabourFemale",
				SezOccupantEmploymentInfo::getOccLabourFemale);
			attributeGetterFunctions.put(
				"occLabourLocal", SezOccupantEmploymentInfo::getOccLabourLocal);
			attributeGetterFunctions.put(
				"occLabourForeign",
				SezOccupantEmploymentInfo::getOccLabourForeign);
			attributeGetterFunctions.put(
				"occEmpCounter", SezOccupantEmploymentInfo::getOccEmpCounter);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezOccupantEmploymentInfo::getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<SezOccupantEmploymentInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SezOccupantEmploymentInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<SezOccupantEmploymentInfo, ?>>();

			attributeSetterBiConsumers.put(
				"sezOccEmpId",
				(BiConsumer<SezOccupantEmploymentInfo, Long>)
					SezOccupantEmploymentInfo::setSezOccEmpId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezOccupantEmploymentInfo, Long>)
					SezOccupantEmploymentInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezOccupantEmploymentInfo, Long>)
					SezOccupantEmploymentInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezOccupantEmploymentInfo, Long>)
					SezOccupantEmploymentInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SezOccupantEmploymentInfo, String>)
					SezOccupantEmploymentInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezOccupantEmploymentInfo, Date>)
					SezOccupantEmploymentInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezOccupantEmploymentInfo, Date>)
					SezOccupantEmploymentInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"occLabourYear",
				(BiConsumer<SezOccupantEmploymentInfo, String>)
					SezOccupantEmploymentInfo::setOccLabourYear);
			attributeSetterBiConsumers.put(
				"occLabourDirect",
				(BiConsumer<SezOccupantEmploymentInfo, String>)
					SezOccupantEmploymentInfo::setOccLabourDirect);
			attributeSetterBiConsumers.put(
				"occLabourMale",
				(BiConsumer<SezOccupantEmploymentInfo, String>)
					SezOccupantEmploymentInfo::setOccLabourMale);
			attributeSetterBiConsumers.put(
				"occLabourFemale",
				(BiConsumer<SezOccupantEmploymentInfo, String>)
					SezOccupantEmploymentInfo::setOccLabourFemale);
			attributeSetterBiConsumers.put(
				"occLabourLocal",
				(BiConsumer<SezOccupantEmploymentInfo, String>)
					SezOccupantEmploymentInfo::setOccLabourLocal);
			attributeSetterBiConsumers.put(
				"occLabourForeign",
				(BiConsumer<SezOccupantEmploymentInfo, String>)
					SezOccupantEmploymentInfo::setOccLabourForeign);
			attributeSetterBiConsumers.put(
				"occEmpCounter",
				(BiConsumer<SezOccupantEmploymentInfo, String>)
					SezOccupantEmploymentInfo::setOccEmpCounter);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezOccupantEmploymentInfo, Long>)
					SezOccupantEmploymentInfo::setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezOccEmpId() {
		return _sezOccEmpId;
	}

	@Override
	public void setSezOccEmpId(long sezOccEmpId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezOccEmpId = sezOccEmpId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOccLabourYear() {
		if (_occLabourYear == null) {
			return "";
		}
		else {
			return _occLabourYear;
		}
	}

	@Override
	public void setOccLabourYear(String occLabourYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occLabourYear = occLabourYear;
	}

	@JSON
	@Override
	public String getOccLabourDirect() {
		if (_occLabourDirect == null) {
			return "";
		}
		else {
			return _occLabourDirect;
		}
	}

	@Override
	public void setOccLabourDirect(String occLabourDirect) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occLabourDirect = occLabourDirect;
	}

	@JSON
	@Override
	public String getOccLabourMale() {
		if (_occLabourMale == null) {
			return "";
		}
		else {
			return _occLabourMale;
		}
	}

	@Override
	public void setOccLabourMale(String occLabourMale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occLabourMale = occLabourMale;
	}

	@JSON
	@Override
	public String getOccLabourFemale() {
		if (_occLabourFemale == null) {
			return "";
		}
		else {
			return _occLabourFemale;
		}
	}

	@Override
	public void setOccLabourFemale(String occLabourFemale) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occLabourFemale = occLabourFemale;
	}

	@JSON
	@Override
	public String getOccLabourLocal() {
		if (_occLabourLocal == null) {
			return "";
		}
		else {
			return _occLabourLocal;
		}
	}

	@Override
	public void setOccLabourLocal(String occLabourLocal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occLabourLocal = occLabourLocal;
	}

	@JSON
	@Override
	public String getOccLabourForeign() {
		if (_occLabourForeign == null) {
			return "";
		}
		else {
			return _occLabourForeign;
		}
	}

	@Override
	public void setOccLabourForeign(String occLabourForeign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occLabourForeign = occLabourForeign;
	}

	@JSON
	@Override
	public String getOccEmpCounter() {
		if (_occEmpCounter == null) {
			return "";
		}
		else {
			return _occEmpCounter;
		}
	}

	@Override
	public void setOccEmpCounter(String occEmpCounter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occEmpCounter = occEmpCounter;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SezOccupantEmploymentInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezOccupantEmploymentInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SezOccupantEmploymentInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezOccupantEmploymentInfoImpl sezOccupantEmploymentInfoImpl =
			new SezOccupantEmploymentInfoImpl();

		sezOccupantEmploymentInfoImpl.setSezOccEmpId(getSezOccEmpId());
		sezOccupantEmploymentInfoImpl.setGroupId(getGroupId());
		sezOccupantEmploymentInfoImpl.setCompanyId(getCompanyId());
		sezOccupantEmploymentInfoImpl.setUserId(getUserId());
		sezOccupantEmploymentInfoImpl.setUserName(getUserName());
		sezOccupantEmploymentInfoImpl.setCreateDate(getCreateDate());
		sezOccupantEmploymentInfoImpl.setModifiedDate(getModifiedDate());
		sezOccupantEmploymentInfoImpl.setOccLabourYear(getOccLabourYear());
		sezOccupantEmploymentInfoImpl.setOccLabourDirect(getOccLabourDirect());
		sezOccupantEmploymentInfoImpl.setOccLabourMale(getOccLabourMale());
		sezOccupantEmploymentInfoImpl.setOccLabourFemale(getOccLabourFemale());
		sezOccupantEmploymentInfoImpl.setOccLabourLocal(getOccLabourLocal());
		sezOccupantEmploymentInfoImpl.setOccLabourForeign(
			getOccLabourForeign());
		sezOccupantEmploymentInfoImpl.setOccEmpCounter(getOccEmpCounter());
		sezOccupantEmploymentInfoImpl.setSezStatusApplicationId(
			getSezStatusApplicationId());

		sezOccupantEmploymentInfoImpl.resetOriginalValues();

		return sezOccupantEmploymentInfoImpl;
	}

	@Override
	public SezOccupantEmploymentInfo cloneWithOriginalValues() {
		SezOccupantEmploymentInfoImpl sezOccupantEmploymentInfoImpl =
			new SezOccupantEmploymentInfoImpl();

		sezOccupantEmploymentInfoImpl.setSezOccEmpId(
			this.<Long>getColumnOriginalValue("sezOccEmpId"));
		sezOccupantEmploymentInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezOccupantEmploymentInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezOccupantEmploymentInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezOccupantEmploymentInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezOccupantEmploymentInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezOccupantEmploymentInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezOccupantEmploymentInfoImpl.setOccLabourYear(
			this.<String>getColumnOriginalValue("occLabourYear"));
		sezOccupantEmploymentInfoImpl.setOccLabourDirect(
			this.<String>getColumnOriginalValue("occLabourDirect"));
		sezOccupantEmploymentInfoImpl.setOccLabourMale(
			this.<String>getColumnOriginalValue("occLabourMale"));
		sezOccupantEmploymentInfoImpl.setOccLabourFemale(
			this.<String>getColumnOriginalValue("occLabourFemale"));
		sezOccupantEmploymentInfoImpl.setOccLabourLocal(
			this.<String>getColumnOriginalValue("occLabourLocal"));
		sezOccupantEmploymentInfoImpl.setOccLabourForeign(
			this.<String>getColumnOriginalValue("occLabourForeign"));
		sezOccupantEmploymentInfoImpl.setOccEmpCounter(
			this.<String>getColumnOriginalValue("occEmpCounter"));
		sezOccupantEmploymentInfoImpl.setSezStatusApplicationId(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezOccupantEmploymentInfoImpl;
	}

	@Override
	public int compareTo(SezOccupantEmploymentInfo sezOccupantEmploymentInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), sezOccupantEmploymentInfo.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezOccupantEmploymentInfo)) {
			return false;
		}

		SezOccupantEmploymentInfo sezOccupantEmploymentInfo =
			(SezOccupantEmploymentInfo)object;

		long primaryKey = sezOccupantEmploymentInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezOccupantEmploymentInfo> toCacheModel() {
		SezOccupantEmploymentInfoCacheModel
			sezOccupantEmploymentInfoCacheModel =
				new SezOccupantEmploymentInfoCacheModel();

		sezOccupantEmploymentInfoCacheModel.sezOccEmpId = getSezOccEmpId();

		sezOccupantEmploymentInfoCacheModel.groupId = getGroupId();

		sezOccupantEmploymentInfoCacheModel.companyId = getCompanyId();

		sezOccupantEmploymentInfoCacheModel.userId = getUserId();

		sezOccupantEmploymentInfoCacheModel.userName = getUserName();

		String userName = sezOccupantEmploymentInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezOccupantEmploymentInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezOccupantEmploymentInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			sezOccupantEmploymentInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezOccupantEmploymentInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sezOccupantEmploymentInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		sezOccupantEmploymentInfoCacheModel.occLabourYear = getOccLabourYear();

		String occLabourYear =
			sezOccupantEmploymentInfoCacheModel.occLabourYear;

		if ((occLabourYear != null) && (occLabourYear.length() == 0)) {
			sezOccupantEmploymentInfoCacheModel.occLabourYear = null;
		}

		sezOccupantEmploymentInfoCacheModel.occLabourDirect =
			getOccLabourDirect();

		String occLabourDirect =
			sezOccupantEmploymentInfoCacheModel.occLabourDirect;

		if ((occLabourDirect != null) && (occLabourDirect.length() == 0)) {
			sezOccupantEmploymentInfoCacheModel.occLabourDirect = null;
		}

		sezOccupantEmploymentInfoCacheModel.occLabourMale = getOccLabourMale();

		String occLabourMale =
			sezOccupantEmploymentInfoCacheModel.occLabourMale;

		if ((occLabourMale != null) && (occLabourMale.length() == 0)) {
			sezOccupantEmploymentInfoCacheModel.occLabourMale = null;
		}

		sezOccupantEmploymentInfoCacheModel.occLabourFemale =
			getOccLabourFemale();

		String occLabourFemale =
			sezOccupantEmploymentInfoCacheModel.occLabourFemale;

		if ((occLabourFemale != null) && (occLabourFemale.length() == 0)) {
			sezOccupantEmploymentInfoCacheModel.occLabourFemale = null;
		}

		sezOccupantEmploymentInfoCacheModel.occLabourLocal =
			getOccLabourLocal();

		String occLabourLocal =
			sezOccupantEmploymentInfoCacheModel.occLabourLocal;

		if ((occLabourLocal != null) && (occLabourLocal.length() == 0)) {
			sezOccupantEmploymentInfoCacheModel.occLabourLocal = null;
		}

		sezOccupantEmploymentInfoCacheModel.occLabourForeign =
			getOccLabourForeign();

		String occLabourForeign =
			sezOccupantEmploymentInfoCacheModel.occLabourForeign;

		if ((occLabourForeign != null) && (occLabourForeign.length() == 0)) {
			sezOccupantEmploymentInfoCacheModel.occLabourForeign = null;
		}

		sezOccupantEmploymentInfoCacheModel.occEmpCounter = getOccEmpCounter();

		String occEmpCounter =
			sezOccupantEmploymentInfoCacheModel.occEmpCounter;

		if ((occEmpCounter != null) && (occEmpCounter.length() == 0)) {
			sezOccupantEmploymentInfoCacheModel.occEmpCounter = null;
		}

		sezOccupantEmploymentInfoCacheModel.sezStatusApplicationId =
			getSezStatusApplicationId();

		return sezOccupantEmploymentInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SezOccupantEmploymentInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SezOccupantEmploymentInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupantEmploymentInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezOccupantEmploymentInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SezOccupantEmploymentInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SezOccupantEmploymentInfo.class, ModelWrapper.class);

	}

	private long _sezOccEmpId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _occLabourYear;
	private String _occLabourDirect;
	private String _occLabourMale;
	private String _occLabourFemale;
	private String _occLabourLocal;
	private String _occLabourForeign;
	private String _occEmpCounter;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezOccupantEmploymentInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SezOccupantEmploymentInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("sezOccEmpId", _sezOccEmpId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("occLabourYear", _occLabourYear);
		_columnOriginalValues.put("occLabourDirect", _occLabourDirect);
		_columnOriginalValues.put("occLabourMale", _occLabourMale);
		_columnOriginalValues.put("occLabourFemale", _occLabourFemale);
		_columnOriginalValues.put("occLabourLocal", _occLabourLocal);
		_columnOriginalValues.put("occLabourForeign", _occLabourForeign);
		_columnOriginalValues.put("occEmpCounter", _occEmpCounter);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezOccEmpId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("occLabourYear", 128L);

		columnBitmasks.put("occLabourDirect", 256L);

		columnBitmasks.put("occLabourMale", 512L);

		columnBitmasks.put("occLabourFemale", 1024L);

		columnBitmasks.put("occLabourLocal", 2048L);

		columnBitmasks.put("occLabourForeign", 4096L);

		columnBitmasks.put("occEmpCounter", 8192L);

		columnBitmasks.put("sezStatusApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezOccupantEmploymentInfo _escapedModel;

}