/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezZoneSubCheckInfo;
import com.nbp.sez.status.application.form.service.model.SezZoneSubCheckInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezZoneSubCheckInfo service. Represents a row in the &quot;nbp_sez_zone_sub_check_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezZoneSubCheckInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezZoneSubCheckInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezZoneSubCheckInfoImpl
 * @generated
 */
@JSON(strict = true)
public class SezZoneSubCheckInfoModelImpl
	extends BaseModelImpl<SezZoneSubCheckInfo>
	implements SezZoneSubCheckInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez zone sub check info model instance should use the <code>SezZoneSubCheckInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_zone_sub_check_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezZoneSubCheckInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"generalRequirement", Types.VARCHAR},
		{"companyInformation", Types.VARCHAR}, {"swornState", Types.VARCHAR},
		{"occupancyRequirement", Types.VARCHAR}, {"approvals", Types.VARCHAR},
		{"signatureName", Types.VARCHAR}, {"signatureDate", Types.TIMESTAMP},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezZoneSubCheckInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("generalRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyInformation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("swornState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occupancyRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approvals", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatureName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatureDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_zone_sub_check_info (sezZoneSubCheckInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,generalRequirement VARCHAR(1000) null,companyInformation VARCHAR(1000) null,swornState VARCHAR(1000) null,occupancyRequirement VARCHAR(1000) null,approvals VARCHAR(1000) null,signatureName VARCHAR(75) null,signatureDate DATE null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_zone_sub_check_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezZoneSubCheckInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_zone_sub_check_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezZoneSubCheckInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezZoneSubCheckInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezZoneSubCheckInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezZoneSubCheckInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezZoneSubCheckInfo.class;
	}

	@Override
	public String getModelClassName() {
		return SezZoneSubCheckInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SezZoneSubCheckInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SezZoneSubCheckInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezZoneSubCheckInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SezZoneSubCheckInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SezZoneSubCheckInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezZoneSubCheckInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezZoneSubCheckInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SezZoneSubCheckInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SezZoneSubCheckInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<SezZoneSubCheckInfo, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<SezZoneSubCheckInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<SezZoneSubCheckInfo, Object>>();

			attributeGetterFunctions.put(
				"sezZoneSubCheckInfoId",
				SezZoneSubCheckInfo::getSezZoneSubCheckInfoId);
			attributeGetterFunctions.put(
				"groupId", SezZoneSubCheckInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", SezZoneSubCheckInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", SezZoneSubCheckInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", SezZoneSubCheckInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", SezZoneSubCheckInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", SezZoneSubCheckInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"generalRequirement",
				SezZoneSubCheckInfo::getGeneralRequirement);
			attributeGetterFunctions.put(
				"companyInformation",
				SezZoneSubCheckInfo::getCompanyInformation);
			attributeGetterFunctions.put(
				"swornState", SezZoneSubCheckInfo::getSwornState);
			attributeGetterFunctions.put(
				"occupancyRequirement",
				SezZoneSubCheckInfo::getOccupancyRequirement);
			attributeGetterFunctions.put(
				"approvals", SezZoneSubCheckInfo::getApprovals);
			attributeGetterFunctions.put(
				"signatureName", SezZoneSubCheckInfo::getSignatureName);
			attributeGetterFunctions.put(
				"signatureDate", SezZoneSubCheckInfo::getSignatureDate);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezZoneSubCheckInfo::getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<SezZoneSubCheckInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SezZoneSubCheckInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<SezZoneSubCheckInfo, ?>>();

			attributeSetterBiConsumers.put(
				"sezZoneSubCheckInfoId",
				(BiConsumer<SezZoneSubCheckInfo, Long>)
					SezZoneSubCheckInfo::setSezZoneSubCheckInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezZoneSubCheckInfo, Long>)
					SezZoneSubCheckInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezZoneSubCheckInfo, Long>)
					SezZoneSubCheckInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezZoneSubCheckInfo, Long>)
					SezZoneSubCheckInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SezZoneSubCheckInfo, String>)
					SezZoneSubCheckInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezZoneSubCheckInfo, Date>)
					SezZoneSubCheckInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezZoneSubCheckInfo, Date>)
					SezZoneSubCheckInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"generalRequirement",
				(BiConsumer<SezZoneSubCheckInfo, String>)
					SezZoneSubCheckInfo::setGeneralRequirement);
			attributeSetterBiConsumers.put(
				"companyInformation",
				(BiConsumer<SezZoneSubCheckInfo, String>)
					SezZoneSubCheckInfo::setCompanyInformation);
			attributeSetterBiConsumers.put(
				"swornState",
				(BiConsumer<SezZoneSubCheckInfo, String>)
					SezZoneSubCheckInfo::setSwornState);
			attributeSetterBiConsumers.put(
				"occupancyRequirement",
				(BiConsumer<SezZoneSubCheckInfo, String>)
					SezZoneSubCheckInfo::setOccupancyRequirement);
			attributeSetterBiConsumers.put(
				"approvals",
				(BiConsumer<SezZoneSubCheckInfo, String>)
					SezZoneSubCheckInfo::setApprovals);
			attributeSetterBiConsumers.put(
				"signatureName",
				(BiConsumer<SezZoneSubCheckInfo, String>)
					SezZoneSubCheckInfo::setSignatureName);
			attributeSetterBiConsumers.put(
				"signatureDate",
				(BiConsumer<SezZoneSubCheckInfo, Date>)
					SezZoneSubCheckInfo::setSignatureDate);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezZoneSubCheckInfo, Long>)
					SezZoneSubCheckInfo::setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezZoneSubCheckInfoId() {
		return _sezZoneSubCheckInfoId;
	}

	@Override
	public void setSezZoneSubCheckInfoId(long sezZoneSubCheckInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezZoneSubCheckInfoId = sezZoneSubCheckInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getGeneralRequirement() {
		if (_generalRequirement == null) {
			return "";
		}
		else {
			return _generalRequirement;
		}
	}

	@Override
	public void setGeneralRequirement(String generalRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_generalRequirement = generalRequirement;
	}

	@JSON
	@Override
	public String getCompanyInformation() {
		if (_companyInformation == null) {
			return "";
		}
		else {
			return _companyInformation;
		}
	}

	@Override
	public void setCompanyInformation(String companyInformation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyInformation = companyInformation;
	}

	@JSON
	@Override
	public String getSwornState() {
		if (_swornState == null) {
			return "";
		}
		else {
			return _swornState;
		}
	}

	@Override
	public void setSwornState(String swornState) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_swornState = swornState;
	}

	@JSON
	@Override
	public String getOccupancyRequirement() {
		if (_occupancyRequirement == null) {
			return "";
		}
		else {
			return _occupancyRequirement;
		}
	}

	@Override
	public void setOccupancyRequirement(String occupancyRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occupancyRequirement = occupancyRequirement;
	}

	@JSON
	@Override
	public String getApprovals() {
		if (_approvals == null) {
			return "";
		}
		else {
			return _approvals;
		}
	}

	@Override
	public void setApprovals(String approvals) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approvals = approvals;
	}

	@JSON
	@Override
	public String getSignatureName() {
		if (_signatureName == null) {
			return "";
		}
		else {
			return _signatureName;
		}
	}

	@Override
	public void setSignatureName(String signatureName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatureName = signatureName;
	}

	@JSON
	@Override
	public Date getSignatureDate() {
		return _signatureDate;
	}

	@Override
	public void setSignatureDate(Date signatureDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatureDate = signatureDate;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SezZoneSubCheckInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezZoneSubCheckInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SezZoneSubCheckInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezZoneSubCheckInfoImpl sezZoneSubCheckInfoImpl =
			new SezZoneSubCheckInfoImpl();

		sezZoneSubCheckInfoImpl.setSezZoneSubCheckInfoId(
			getSezZoneSubCheckInfoId());
		sezZoneSubCheckInfoImpl.setGroupId(getGroupId());
		sezZoneSubCheckInfoImpl.setCompanyId(getCompanyId());
		sezZoneSubCheckInfoImpl.setUserId(getUserId());
		sezZoneSubCheckInfoImpl.setUserName(getUserName());
		sezZoneSubCheckInfoImpl.setCreateDate(getCreateDate());
		sezZoneSubCheckInfoImpl.setModifiedDate(getModifiedDate());
		sezZoneSubCheckInfoImpl.setGeneralRequirement(getGeneralRequirement());
		sezZoneSubCheckInfoImpl.setCompanyInformation(getCompanyInformation());
		sezZoneSubCheckInfoImpl.setSwornState(getSwornState());
		sezZoneSubCheckInfoImpl.setOccupancyRequirement(
			getOccupancyRequirement());
		sezZoneSubCheckInfoImpl.setApprovals(getApprovals());
		sezZoneSubCheckInfoImpl.setSignatureName(getSignatureName());
		sezZoneSubCheckInfoImpl.setSignatureDate(getSignatureDate());
		sezZoneSubCheckInfoImpl.setSezStatusApplicationId(
			getSezStatusApplicationId());

		sezZoneSubCheckInfoImpl.resetOriginalValues();

		return sezZoneSubCheckInfoImpl;
	}

	@Override
	public SezZoneSubCheckInfo cloneWithOriginalValues() {
		SezZoneSubCheckInfoImpl sezZoneSubCheckInfoImpl =
			new SezZoneSubCheckInfoImpl();

		sezZoneSubCheckInfoImpl.setSezZoneSubCheckInfoId(
			this.<Long>getColumnOriginalValue("sezZoneSubCheckInfoId"));
		sezZoneSubCheckInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezZoneSubCheckInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezZoneSubCheckInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezZoneSubCheckInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezZoneSubCheckInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezZoneSubCheckInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezZoneSubCheckInfoImpl.setGeneralRequirement(
			this.<String>getColumnOriginalValue("generalRequirement"));
		sezZoneSubCheckInfoImpl.setCompanyInformation(
			this.<String>getColumnOriginalValue("companyInformation"));
		sezZoneSubCheckInfoImpl.setSwornState(
			this.<String>getColumnOriginalValue("swornState"));
		sezZoneSubCheckInfoImpl.setOccupancyRequirement(
			this.<String>getColumnOriginalValue("occupancyRequirement"));
		sezZoneSubCheckInfoImpl.setApprovals(
			this.<String>getColumnOriginalValue("approvals"));
		sezZoneSubCheckInfoImpl.setSignatureName(
			this.<String>getColumnOriginalValue("signatureName"));
		sezZoneSubCheckInfoImpl.setSignatureDate(
			this.<Date>getColumnOriginalValue("signatureDate"));
		sezZoneSubCheckInfoImpl.setSezStatusApplicationId(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezZoneSubCheckInfoImpl;
	}

	@Override
	public int compareTo(SezZoneSubCheckInfo sezZoneSubCheckInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), sezZoneSubCheckInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezZoneSubCheckInfo)) {
			return false;
		}

		SezZoneSubCheckInfo sezZoneSubCheckInfo = (SezZoneSubCheckInfo)object;

		long primaryKey = sezZoneSubCheckInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezZoneSubCheckInfo> toCacheModel() {
		SezZoneSubCheckInfoCacheModel sezZoneSubCheckInfoCacheModel =
			new SezZoneSubCheckInfoCacheModel();

		sezZoneSubCheckInfoCacheModel.sezZoneSubCheckInfoId =
			getSezZoneSubCheckInfoId();

		sezZoneSubCheckInfoCacheModel.groupId = getGroupId();

		sezZoneSubCheckInfoCacheModel.companyId = getCompanyId();

		sezZoneSubCheckInfoCacheModel.userId = getUserId();

		sezZoneSubCheckInfoCacheModel.userName = getUserName();

		String userName = sezZoneSubCheckInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezZoneSubCheckInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezZoneSubCheckInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			sezZoneSubCheckInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezZoneSubCheckInfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			sezZoneSubCheckInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		sezZoneSubCheckInfoCacheModel.generalRequirement =
			getGeneralRequirement();

		String generalRequirement =
			sezZoneSubCheckInfoCacheModel.generalRequirement;

		if ((generalRequirement != null) &&
			(generalRequirement.length() == 0)) {

			sezZoneSubCheckInfoCacheModel.generalRequirement = null;
		}

		sezZoneSubCheckInfoCacheModel.companyInformation =
			getCompanyInformation();

		String companyInformation =
			sezZoneSubCheckInfoCacheModel.companyInformation;

		if ((companyInformation != null) &&
			(companyInformation.length() == 0)) {

			sezZoneSubCheckInfoCacheModel.companyInformation = null;
		}

		sezZoneSubCheckInfoCacheModel.swornState = getSwornState();

		String swornState = sezZoneSubCheckInfoCacheModel.swornState;

		if ((swornState != null) && (swornState.length() == 0)) {
			sezZoneSubCheckInfoCacheModel.swornState = null;
		}

		sezZoneSubCheckInfoCacheModel.occupancyRequirement =
			getOccupancyRequirement();

		String occupancyRequirement =
			sezZoneSubCheckInfoCacheModel.occupancyRequirement;

		if ((occupancyRequirement != null) &&
			(occupancyRequirement.length() == 0)) {

			sezZoneSubCheckInfoCacheModel.occupancyRequirement = null;
		}

		sezZoneSubCheckInfoCacheModel.approvals = getApprovals();

		String approvals = sezZoneSubCheckInfoCacheModel.approvals;

		if ((approvals != null) && (approvals.length() == 0)) {
			sezZoneSubCheckInfoCacheModel.approvals = null;
		}

		sezZoneSubCheckInfoCacheModel.signatureName = getSignatureName();

		String signatureName = sezZoneSubCheckInfoCacheModel.signatureName;

		if ((signatureName != null) && (signatureName.length() == 0)) {
			sezZoneSubCheckInfoCacheModel.signatureName = null;
		}

		Date signatureDate = getSignatureDate();

		if (signatureDate != null) {
			sezZoneSubCheckInfoCacheModel.signatureDate =
				signatureDate.getTime();
		}
		else {
			sezZoneSubCheckInfoCacheModel.signatureDate = Long.MIN_VALUE;
		}

		sezZoneSubCheckInfoCacheModel.sezStatusApplicationId =
			getSezStatusApplicationId();

		return sezZoneSubCheckInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SezZoneSubCheckInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SezZoneSubCheckInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezZoneSubCheckInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezZoneSubCheckInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SezZoneSubCheckInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					SezZoneSubCheckInfo.class, ModelWrapper.class);

	}

	private long _sezZoneSubCheckInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _generalRequirement;
	private String _companyInformation;
	private String _swornState;
	private String _occupancyRequirement;
	private String _approvals;
	private String _signatureName;
	private Date _signatureDate;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezZoneSubCheckInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SezZoneSubCheckInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"sezZoneSubCheckInfoId", _sezZoneSubCheckInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("generalRequirement", _generalRequirement);
		_columnOriginalValues.put("companyInformation", _companyInformation);
		_columnOriginalValues.put("swornState", _swornState);
		_columnOriginalValues.put(
			"occupancyRequirement", _occupancyRequirement);
		_columnOriginalValues.put("approvals", _approvals);
		_columnOriginalValues.put("signatureName", _signatureName);
		_columnOriginalValues.put("signatureDate", _signatureDate);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezZoneSubCheckInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("generalRequirement", 128L);

		columnBitmasks.put("companyInformation", 256L);

		columnBitmasks.put("swornState", 512L);

		columnBitmasks.put("occupancyRequirement", 1024L);

		columnBitmasks.put("approvals", 2048L);

		columnBitmasks.put("signatureName", 4096L);

		columnBitmasks.put("signatureDate", 8192L);

		columnBitmasks.put("sezStatusApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezZoneSubCheckInfo _escapedModel;

}