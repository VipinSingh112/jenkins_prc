/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezDevProposedProject;
import com.nbp.sez.status.application.form.service.model.SezDevProposedProjectModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezDevProposedProject service. Represents a row in the &quot;nbp_sez_dev_proposed_project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezDevProposedProjectModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezDevProposedProjectImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezDevProposedProjectImpl
 * @generated
 */
@JSON(strict = true)
public class SezDevProposedProjectModelImpl
	extends BaseModelImpl<SezDevProposedProject>
	implements SezDevProposedProjectModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez dev proposed project model instance should use the <code>SezDevProposedProject</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_dev_proposed_project";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezDevProposedProjectId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"previouslyFreeZone", Types.VARCHAR},
		{"curentlyOperatingZone", Types.VARCHAR},
		{"businessConductedZone", Types.VARCHAR}, {"locally", Types.VARCHAR},
		{"overseas", Types.VARCHAR}, {"proposedName", Types.VARCHAR},
		{"specialEconomicZone", Types.VARCHAR},
		{"pleaseDescribe", Types.VARCHAR}, {"seaPortKm", Types.VARCHAR},
		{"seaPortMi", Types.VARCHAR}, {"airportKm", Types.VARCHAR},
		{"airportMi", Types.VARCHAR}, {"roadKm", Types.VARCHAR},
		{"roadMi", Types.VARCHAR}, {"railKm", Types.VARCHAR},
		{"railMi", Types.VARCHAR}, {"customProcessingKm", Types.VARCHAR},
		{"customProcessingMi", Types.VARCHAR},
		{"indicateTheLandMeasurement", Types.VARCHAR},
		{"building", Types.VARCHAR}, {"landArea", Types.VARCHAR},
		{"ownerShip", Types.VARCHAR}, {"otherPleaseSpecify", Types.VARCHAR},
		{"landOwnerName", Types.VARCHAR},
		{"lnadOwnerAddressOne", Types.VARCHAR},
		{"lnadOwnerAddressTwo", Types.VARCHAR},
		{"lnadOwnerTenure", Types.VARCHAR},
		{"stepToAcquireLand", Types.VARCHAR},
		{"stateWheatherTheProposedArea", Types.VARCHAR},
		{"applicantPreviously", Types.VARCHAR},
		{"pleaseProvideBrief", Types.VARCHAR},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezDevProposedProjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("previouslyFreeZone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("curentlyOperatingZone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessConductedZone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locally", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseas", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proposedName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specialEconomicZone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pleaseDescribe", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("seaPortKm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("seaPortMi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("airportKm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("airportMi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("roadKm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("roadMi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("railKm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("railMi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customProcessingKm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customProcessingMi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indicateTheLandMeasurement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("building", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerShip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherPleaseSpecify", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landOwnerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lnadOwnerAddressOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lnadOwnerAddressTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lnadOwnerTenure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stepToAcquireLand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateWheatherTheProposedArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPreviously", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pleaseProvideBrief", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_dev_proposed_project (sezDevProposedProjectId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,previouslyFreeZone VARCHAR(75) null,curentlyOperatingZone VARCHAR(75) null,businessConductedZone VARCHAR(75) null,locally VARCHAR(75) null,overseas VARCHAR(75) null,proposedName VARCHAR(75) null,specialEconomicZone VARCHAR(75) null,pleaseDescribe VARCHAR(75) null,seaPortKm VARCHAR(75) null,seaPortMi VARCHAR(75) null,airportKm VARCHAR(75) null,airportMi VARCHAR(75) null,roadKm VARCHAR(75) null,roadMi VARCHAR(75) null,railKm VARCHAR(75) null,railMi VARCHAR(75) null,customProcessingKm VARCHAR(75) null,customProcessingMi VARCHAR(75) null,indicateTheLandMeasurement VARCHAR(75) null,building VARCHAR(75) null,landArea VARCHAR(75) null,ownerShip VARCHAR(75) null,otherPleaseSpecify VARCHAR(75) null,landOwnerName VARCHAR(75) null,lnadOwnerAddressOne VARCHAR(75) null,lnadOwnerAddressTwo VARCHAR(75) null,lnadOwnerTenure VARCHAR(75) null,stepToAcquireLand VARCHAR(75) null,stateWheatherTheProposedArea VARCHAR(75) null,applicantPreviously VARCHAR(75) null,pleaseProvideBrief VARCHAR(75) null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_dev_proposed_project";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezDevProposedProject.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_dev_proposed_project.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezDevProposedProjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezDevProposedProjectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezDevProposedProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezDevProposedProjectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezDevProposedProject.class;
	}

	@Override
	public String getModelClassName() {
		return SezDevProposedProject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SezDevProposedProject, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SezDevProposedProject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezDevProposedProject, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SezDevProposedProject)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SezDevProposedProject, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezDevProposedProject, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezDevProposedProject)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SezDevProposedProject, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SezDevProposedProject, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<SezDevProposedProject, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<SezDevProposedProject, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<SezDevProposedProject, Object>>();

			attributeGetterFunctions.put(
				"sezDevProposedProjectId",
				SezDevProposedProject::getSezDevProposedProjectId);
			attributeGetterFunctions.put(
				"groupId", SezDevProposedProject::getGroupId);
			attributeGetterFunctions.put(
				"companyId", SezDevProposedProject::getCompanyId);
			attributeGetterFunctions.put(
				"userId", SezDevProposedProject::getUserId);
			attributeGetterFunctions.put(
				"userName", SezDevProposedProject::getUserName);
			attributeGetterFunctions.put(
				"createDate", SezDevProposedProject::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", SezDevProposedProject::getModifiedDate);
			attributeGetterFunctions.put(
				"previouslyFreeZone",
				SezDevProposedProject::getPreviouslyFreeZone);
			attributeGetterFunctions.put(
				"curentlyOperatingZone",
				SezDevProposedProject::getCurentlyOperatingZone);
			attributeGetterFunctions.put(
				"businessConductedZone",
				SezDevProposedProject::getBusinessConductedZone);
			attributeGetterFunctions.put(
				"locally", SezDevProposedProject::getLocally);
			attributeGetterFunctions.put(
				"overseas", SezDevProposedProject::getOverseas);
			attributeGetterFunctions.put(
				"proposedName", SezDevProposedProject::getProposedName);
			attributeGetterFunctions.put(
				"specialEconomicZone",
				SezDevProposedProject::getSpecialEconomicZone);
			attributeGetterFunctions.put(
				"pleaseDescribe", SezDevProposedProject::getPleaseDescribe);
			attributeGetterFunctions.put(
				"seaPortKm", SezDevProposedProject::getSeaPortKm);
			attributeGetterFunctions.put(
				"seaPortMi", SezDevProposedProject::getSeaPortMi);
			attributeGetterFunctions.put(
				"airportKm", SezDevProposedProject::getAirportKm);
			attributeGetterFunctions.put(
				"airportMi", SezDevProposedProject::getAirportMi);
			attributeGetterFunctions.put(
				"roadKm", SezDevProposedProject::getRoadKm);
			attributeGetterFunctions.put(
				"roadMi", SezDevProposedProject::getRoadMi);
			attributeGetterFunctions.put(
				"railKm", SezDevProposedProject::getRailKm);
			attributeGetterFunctions.put(
				"railMi", SezDevProposedProject::getRailMi);
			attributeGetterFunctions.put(
				"customProcessingKm",
				SezDevProposedProject::getCustomProcessingKm);
			attributeGetterFunctions.put(
				"customProcessingMi",
				SezDevProposedProject::getCustomProcessingMi);
			attributeGetterFunctions.put(
				"indicateTheLandMeasurement",
				SezDevProposedProject::getIndicateTheLandMeasurement);
			attributeGetterFunctions.put(
				"building", SezDevProposedProject::getBuilding);
			attributeGetterFunctions.put(
				"landArea", SezDevProposedProject::getLandArea);
			attributeGetterFunctions.put(
				"ownerShip", SezDevProposedProject::getOwnerShip);
			attributeGetterFunctions.put(
				"otherPleaseSpecify",
				SezDevProposedProject::getOtherPleaseSpecify);
			attributeGetterFunctions.put(
				"landOwnerName", SezDevProposedProject::getLandOwnerName);
			attributeGetterFunctions.put(
				"lnadOwnerAddressOne",
				SezDevProposedProject::getLnadOwnerAddressOne);
			attributeGetterFunctions.put(
				"lnadOwnerAddressTwo",
				SezDevProposedProject::getLnadOwnerAddressTwo);
			attributeGetterFunctions.put(
				"lnadOwnerTenure", SezDevProposedProject::getLnadOwnerTenure);
			attributeGetterFunctions.put(
				"stepToAcquireLand",
				SezDevProposedProject::getStepToAcquireLand);
			attributeGetterFunctions.put(
				"stateWheatherTheProposedArea",
				SezDevProposedProject::getStateWheatherTheProposedArea);
			attributeGetterFunctions.put(
				"applicantPreviously",
				SezDevProposedProject::getApplicantPreviously);
			attributeGetterFunctions.put(
				"pleaseProvideBrief",
				SezDevProposedProject::getPleaseProvideBrief);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezDevProposedProject::getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<SezDevProposedProject, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SezDevProposedProject, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<SezDevProposedProject, ?>>();

			attributeSetterBiConsumers.put(
				"sezDevProposedProjectId",
				(BiConsumer<SezDevProposedProject, Long>)
					SezDevProposedProject::setSezDevProposedProjectId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezDevProposedProject, Long>)
					SezDevProposedProject::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezDevProposedProject, Long>)
					SezDevProposedProject::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezDevProposedProject, Long>)
					SezDevProposedProject::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezDevProposedProject, Date>)
					SezDevProposedProject::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezDevProposedProject, Date>)
					SezDevProposedProject::setModifiedDate);
			attributeSetterBiConsumers.put(
				"previouslyFreeZone",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setPreviouslyFreeZone);
			attributeSetterBiConsumers.put(
				"curentlyOperatingZone",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setCurentlyOperatingZone);
			attributeSetterBiConsumers.put(
				"businessConductedZone",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setBusinessConductedZone);
			attributeSetterBiConsumers.put(
				"locally",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setLocally);
			attributeSetterBiConsumers.put(
				"overseas",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setOverseas);
			attributeSetterBiConsumers.put(
				"proposedName",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setProposedName);
			attributeSetterBiConsumers.put(
				"specialEconomicZone",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setSpecialEconomicZone);
			attributeSetterBiConsumers.put(
				"pleaseDescribe",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setPleaseDescribe);
			attributeSetterBiConsumers.put(
				"seaPortKm",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setSeaPortKm);
			attributeSetterBiConsumers.put(
				"seaPortMi",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setSeaPortMi);
			attributeSetterBiConsumers.put(
				"airportKm",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setAirportKm);
			attributeSetterBiConsumers.put(
				"airportMi",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setAirportMi);
			attributeSetterBiConsumers.put(
				"roadKm",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setRoadKm);
			attributeSetterBiConsumers.put(
				"roadMi",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setRoadMi);
			attributeSetterBiConsumers.put(
				"railKm",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setRailKm);
			attributeSetterBiConsumers.put(
				"railMi",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setRailMi);
			attributeSetterBiConsumers.put(
				"customProcessingKm",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setCustomProcessingKm);
			attributeSetterBiConsumers.put(
				"customProcessingMi",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setCustomProcessingMi);
			attributeSetterBiConsumers.put(
				"indicateTheLandMeasurement",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setIndicateTheLandMeasurement);
			attributeSetterBiConsumers.put(
				"building",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setBuilding);
			attributeSetterBiConsumers.put(
				"landArea",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setLandArea);
			attributeSetterBiConsumers.put(
				"ownerShip",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setOwnerShip);
			attributeSetterBiConsumers.put(
				"otherPleaseSpecify",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setOtherPleaseSpecify);
			attributeSetterBiConsumers.put(
				"landOwnerName",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setLandOwnerName);
			attributeSetterBiConsumers.put(
				"lnadOwnerAddressOne",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setLnadOwnerAddressOne);
			attributeSetterBiConsumers.put(
				"lnadOwnerAddressTwo",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setLnadOwnerAddressTwo);
			attributeSetterBiConsumers.put(
				"lnadOwnerTenure",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setLnadOwnerTenure);
			attributeSetterBiConsumers.put(
				"stepToAcquireLand",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setStepToAcquireLand);
			attributeSetterBiConsumers.put(
				"stateWheatherTheProposedArea",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setStateWheatherTheProposedArea);
			attributeSetterBiConsumers.put(
				"applicantPreviously",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setApplicantPreviously);
			attributeSetterBiConsumers.put(
				"pleaseProvideBrief",
				(BiConsumer<SezDevProposedProject, String>)
					SezDevProposedProject::setPleaseProvideBrief);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezDevProposedProject, Long>)
					SezDevProposedProject::setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezDevProposedProjectId() {
		return _sezDevProposedProjectId;
	}

	@Override
	public void setSezDevProposedProjectId(long sezDevProposedProjectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezDevProposedProjectId = sezDevProposedProjectId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPreviouslyFreeZone() {
		if (_previouslyFreeZone == null) {
			return "";
		}
		else {
			return _previouslyFreeZone;
		}
	}

	@Override
	public void setPreviouslyFreeZone(String previouslyFreeZone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_previouslyFreeZone = previouslyFreeZone;
	}

	@JSON
	@Override
	public String getCurentlyOperatingZone() {
		if (_curentlyOperatingZone == null) {
			return "";
		}
		else {
			return _curentlyOperatingZone;
		}
	}

	@Override
	public void setCurentlyOperatingZone(String curentlyOperatingZone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_curentlyOperatingZone = curentlyOperatingZone;
	}

	@JSON
	@Override
	public String getBusinessConductedZone() {
		if (_businessConductedZone == null) {
			return "";
		}
		else {
			return _businessConductedZone;
		}
	}

	@Override
	public void setBusinessConductedZone(String businessConductedZone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessConductedZone = businessConductedZone;
	}

	@JSON
	@Override
	public String getLocally() {
		if (_locally == null) {
			return "";
		}
		else {
			return _locally;
		}
	}

	@Override
	public void setLocally(String locally) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locally = locally;
	}

	@JSON
	@Override
	public String getOverseas() {
		if (_overseas == null) {
			return "";
		}
		else {
			return _overseas;
		}
	}

	@Override
	public void setOverseas(String overseas) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_overseas = overseas;
	}

	@JSON
	@Override
	public String getProposedName() {
		if (_proposedName == null) {
			return "";
		}
		else {
			return _proposedName;
		}
	}

	@Override
	public void setProposedName(String proposedName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proposedName = proposedName;
	}

	@JSON
	@Override
	public String getSpecialEconomicZone() {
		if (_specialEconomicZone == null) {
			return "";
		}
		else {
			return _specialEconomicZone;
		}
	}

	@Override
	public void setSpecialEconomicZone(String specialEconomicZone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specialEconomicZone = specialEconomicZone;
	}

	@JSON
	@Override
	public String getPleaseDescribe() {
		if (_pleaseDescribe == null) {
			return "";
		}
		else {
			return _pleaseDescribe;
		}
	}

	@Override
	public void setPleaseDescribe(String pleaseDescribe) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pleaseDescribe = pleaseDescribe;
	}

	@JSON
	@Override
	public String getSeaPortKm() {
		if (_seaPortKm == null) {
			return "";
		}
		else {
			return _seaPortKm;
		}
	}

	@Override
	public void setSeaPortKm(String seaPortKm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_seaPortKm = seaPortKm;
	}

	@JSON
	@Override
	public String getSeaPortMi() {
		if (_seaPortMi == null) {
			return "";
		}
		else {
			return _seaPortMi;
		}
	}

	@Override
	public void setSeaPortMi(String seaPortMi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_seaPortMi = seaPortMi;
	}

	@JSON
	@Override
	public String getAirportKm() {
		if (_airportKm == null) {
			return "";
		}
		else {
			return _airportKm;
		}
	}

	@Override
	public void setAirportKm(String airportKm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_airportKm = airportKm;
	}

	@JSON
	@Override
	public String getAirportMi() {
		if (_airportMi == null) {
			return "";
		}
		else {
			return _airportMi;
		}
	}

	@Override
	public void setAirportMi(String airportMi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_airportMi = airportMi;
	}

	@JSON
	@Override
	public String getRoadKm() {
		if (_roadKm == null) {
			return "";
		}
		else {
			return _roadKm;
		}
	}

	@Override
	public void setRoadKm(String roadKm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_roadKm = roadKm;
	}

	@JSON
	@Override
	public String getRoadMi() {
		if (_roadMi == null) {
			return "";
		}
		else {
			return _roadMi;
		}
	}

	@Override
	public void setRoadMi(String roadMi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_roadMi = roadMi;
	}

	@JSON
	@Override
	public String getRailKm() {
		if (_railKm == null) {
			return "";
		}
		else {
			return _railKm;
		}
	}

	@Override
	public void setRailKm(String railKm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_railKm = railKm;
	}

	@JSON
	@Override
	public String getRailMi() {
		if (_railMi == null) {
			return "";
		}
		else {
			return _railMi;
		}
	}

	@Override
	public void setRailMi(String railMi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_railMi = railMi;
	}

	@JSON
	@Override
	public String getCustomProcessingKm() {
		if (_customProcessingKm == null) {
			return "";
		}
		else {
			return _customProcessingKm;
		}
	}

	@Override
	public void setCustomProcessingKm(String customProcessingKm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customProcessingKm = customProcessingKm;
	}

	@JSON
	@Override
	public String getCustomProcessingMi() {
		if (_customProcessingMi == null) {
			return "";
		}
		else {
			return _customProcessingMi;
		}
	}

	@Override
	public void setCustomProcessingMi(String customProcessingMi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customProcessingMi = customProcessingMi;
	}

	@JSON
	@Override
	public String getIndicateTheLandMeasurement() {
		if (_indicateTheLandMeasurement == null) {
			return "";
		}
		else {
			return _indicateTheLandMeasurement;
		}
	}

	@Override
	public void setIndicateTheLandMeasurement(
		String indicateTheLandMeasurement) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indicateTheLandMeasurement = indicateTheLandMeasurement;
	}

	@JSON
	@Override
	public String getBuilding() {
		if (_building == null) {
			return "";
		}
		else {
			return _building;
		}
	}

	@Override
	public void setBuilding(String building) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_building = building;
	}

	@JSON
	@Override
	public String getLandArea() {
		if (_landArea == null) {
			return "";
		}
		else {
			return _landArea;
		}
	}

	@Override
	public void setLandArea(String landArea) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landArea = landArea;
	}

	@JSON
	@Override
	public String getOwnerShip() {
		if (_ownerShip == null) {
			return "";
		}
		else {
			return _ownerShip;
		}
	}

	@Override
	public void setOwnerShip(String ownerShip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerShip = ownerShip;
	}

	@JSON
	@Override
	public String getOtherPleaseSpecify() {
		if (_otherPleaseSpecify == null) {
			return "";
		}
		else {
			return _otherPleaseSpecify;
		}
	}

	@Override
	public void setOtherPleaseSpecify(String otherPleaseSpecify) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherPleaseSpecify = otherPleaseSpecify;
	}

	@JSON
	@Override
	public String getLandOwnerName() {
		if (_landOwnerName == null) {
			return "";
		}
		else {
			return _landOwnerName;
		}
	}

	@Override
	public void setLandOwnerName(String landOwnerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landOwnerName = landOwnerName;
	}

	@JSON
	@Override
	public String getLnadOwnerAddressOne() {
		if (_lnadOwnerAddressOne == null) {
			return "";
		}
		else {
			return _lnadOwnerAddressOne;
		}
	}

	@Override
	public void setLnadOwnerAddressOne(String lnadOwnerAddressOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lnadOwnerAddressOne = lnadOwnerAddressOne;
	}

	@JSON
	@Override
	public String getLnadOwnerAddressTwo() {
		if (_lnadOwnerAddressTwo == null) {
			return "";
		}
		else {
			return _lnadOwnerAddressTwo;
		}
	}

	@Override
	public void setLnadOwnerAddressTwo(String lnadOwnerAddressTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lnadOwnerAddressTwo = lnadOwnerAddressTwo;
	}

	@JSON
	@Override
	public String getLnadOwnerTenure() {
		if (_lnadOwnerTenure == null) {
			return "";
		}
		else {
			return _lnadOwnerTenure;
		}
	}

	@Override
	public void setLnadOwnerTenure(String lnadOwnerTenure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lnadOwnerTenure = lnadOwnerTenure;
	}

	@JSON
	@Override
	public String getStepToAcquireLand() {
		if (_stepToAcquireLand == null) {
			return "";
		}
		else {
			return _stepToAcquireLand;
		}
	}

	@Override
	public void setStepToAcquireLand(String stepToAcquireLand) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stepToAcquireLand = stepToAcquireLand;
	}

	@JSON
	@Override
	public String getStateWheatherTheProposedArea() {
		if (_stateWheatherTheProposedArea == null) {
			return "";
		}
		else {
			return _stateWheatherTheProposedArea;
		}
	}

	@Override
	public void setStateWheatherTheProposedArea(
		String stateWheatherTheProposedArea) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateWheatherTheProposedArea = stateWheatherTheProposedArea;
	}

	@JSON
	@Override
	public String getApplicantPreviously() {
		if (_applicantPreviously == null) {
			return "";
		}
		else {
			return _applicantPreviously;
		}
	}

	@Override
	public void setApplicantPreviously(String applicantPreviously) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantPreviously = applicantPreviously;
	}

	@JSON
	@Override
	public String getPleaseProvideBrief() {
		if (_pleaseProvideBrief == null) {
			return "";
		}
		else {
			return _pleaseProvideBrief;
		}
	}

	@Override
	public void setPleaseProvideBrief(String pleaseProvideBrief) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pleaseProvideBrief = pleaseProvideBrief;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SezDevProposedProject.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezDevProposedProject toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SezDevProposedProject>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezDevProposedProjectImpl sezDevProposedProjectImpl =
			new SezDevProposedProjectImpl();

		sezDevProposedProjectImpl.setSezDevProposedProjectId(
			getSezDevProposedProjectId());
		sezDevProposedProjectImpl.setGroupId(getGroupId());
		sezDevProposedProjectImpl.setCompanyId(getCompanyId());
		sezDevProposedProjectImpl.setUserId(getUserId());
		sezDevProposedProjectImpl.setUserName(getUserName());
		sezDevProposedProjectImpl.setCreateDate(getCreateDate());
		sezDevProposedProjectImpl.setModifiedDate(getModifiedDate());
		sezDevProposedProjectImpl.setPreviouslyFreeZone(
			getPreviouslyFreeZone());
		sezDevProposedProjectImpl.setCurentlyOperatingZone(
			getCurentlyOperatingZone());
		sezDevProposedProjectImpl.setBusinessConductedZone(
			getBusinessConductedZone());
		sezDevProposedProjectImpl.setLocally(getLocally());
		sezDevProposedProjectImpl.setOverseas(getOverseas());
		sezDevProposedProjectImpl.setProposedName(getProposedName());
		sezDevProposedProjectImpl.setSpecialEconomicZone(
			getSpecialEconomicZone());
		sezDevProposedProjectImpl.setPleaseDescribe(getPleaseDescribe());
		sezDevProposedProjectImpl.setSeaPortKm(getSeaPortKm());
		sezDevProposedProjectImpl.setSeaPortMi(getSeaPortMi());
		sezDevProposedProjectImpl.setAirportKm(getAirportKm());
		sezDevProposedProjectImpl.setAirportMi(getAirportMi());
		sezDevProposedProjectImpl.setRoadKm(getRoadKm());
		sezDevProposedProjectImpl.setRoadMi(getRoadMi());
		sezDevProposedProjectImpl.setRailKm(getRailKm());
		sezDevProposedProjectImpl.setRailMi(getRailMi());
		sezDevProposedProjectImpl.setCustomProcessingKm(
			getCustomProcessingKm());
		sezDevProposedProjectImpl.setCustomProcessingMi(
			getCustomProcessingMi());
		sezDevProposedProjectImpl.setIndicateTheLandMeasurement(
			getIndicateTheLandMeasurement());
		sezDevProposedProjectImpl.setBuilding(getBuilding());
		sezDevProposedProjectImpl.setLandArea(getLandArea());
		sezDevProposedProjectImpl.setOwnerShip(getOwnerShip());
		sezDevProposedProjectImpl.setOtherPleaseSpecify(
			getOtherPleaseSpecify());
		sezDevProposedProjectImpl.setLandOwnerName(getLandOwnerName());
		sezDevProposedProjectImpl.setLnadOwnerAddressOne(
			getLnadOwnerAddressOne());
		sezDevProposedProjectImpl.setLnadOwnerAddressTwo(
			getLnadOwnerAddressTwo());
		sezDevProposedProjectImpl.setLnadOwnerTenure(getLnadOwnerTenure());
		sezDevProposedProjectImpl.setStepToAcquireLand(getStepToAcquireLand());
		sezDevProposedProjectImpl.setStateWheatherTheProposedArea(
			getStateWheatherTheProposedArea());
		sezDevProposedProjectImpl.setApplicantPreviously(
			getApplicantPreviously());
		sezDevProposedProjectImpl.setPleaseProvideBrief(
			getPleaseProvideBrief());
		sezDevProposedProjectImpl.setSezStatusApplicationId(
			getSezStatusApplicationId());

		sezDevProposedProjectImpl.resetOriginalValues();

		return sezDevProposedProjectImpl;
	}

	@Override
	public SezDevProposedProject cloneWithOriginalValues() {
		SezDevProposedProjectImpl sezDevProposedProjectImpl =
			new SezDevProposedProjectImpl();

		sezDevProposedProjectImpl.setSezDevProposedProjectId(
			this.<Long>getColumnOriginalValue("sezDevProposedProjectId"));
		sezDevProposedProjectImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezDevProposedProjectImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezDevProposedProjectImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezDevProposedProjectImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezDevProposedProjectImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezDevProposedProjectImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezDevProposedProjectImpl.setPreviouslyFreeZone(
			this.<String>getColumnOriginalValue("previouslyFreeZone"));
		sezDevProposedProjectImpl.setCurentlyOperatingZone(
			this.<String>getColumnOriginalValue("curentlyOperatingZone"));
		sezDevProposedProjectImpl.setBusinessConductedZone(
			this.<String>getColumnOriginalValue("businessConductedZone"));
		sezDevProposedProjectImpl.setLocally(
			this.<String>getColumnOriginalValue("locally"));
		sezDevProposedProjectImpl.setOverseas(
			this.<String>getColumnOriginalValue("overseas"));
		sezDevProposedProjectImpl.setProposedName(
			this.<String>getColumnOriginalValue("proposedName"));
		sezDevProposedProjectImpl.setSpecialEconomicZone(
			this.<String>getColumnOriginalValue("specialEconomicZone"));
		sezDevProposedProjectImpl.setPleaseDescribe(
			this.<String>getColumnOriginalValue("pleaseDescribe"));
		sezDevProposedProjectImpl.setSeaPortKm(
			this.<String>getColumnOriginalValue("seaPortKm"));
		sezDevProposedProjectImpl.setSeaPortMi(
			this.<String>getColumnOriginalValue("seaPortMi"));
		sezDevProposedProjectImpl.setAirportKm(
			this.<String>getColumnOriginalValue("airportKm"));
		sezDevProposedProjectImpl.setAirportMi(
			this.<String>getColumnOriginalValue("airportMi"));
		sezDevProposedProjectImpl.setRoadKm(
			this.<String>getColumnOriginalValue("roadKm"));
		sezDevProposedProjectImpl.setRoadMi(
			this.<String>getColumnOriginalValue("roadMi"));
		sezDevProposedProjectImpl.setRailKm(
			this.<String>getColumnOriginalValue("railKm"));
		sezDevProposedProjectImpl.setRailMi(
			this.<String>getColumnOriginalValue("railMi"));
		sezDevProposedProjectImpl.setCustomProcessingKm(
			this.<String>getColumnOriginalValue("customProcessingKm"));
		sezDevProposedProjectImpl.setCustomProcessingMi(
			this.<String>getColumnOriginalValue("customProcessingMi"));
		sezDevProposedProjectImpl.setIndicateTheLandMeasurement(
			this.<String>getColumnOriginalValue("indicateTheLandMeasurement"));
		sezDevProposedProjectImpl.setBuilding(
			this.<String>getColumnOriginalValue("building"));
		sezDevProposedProjectImpl.setLandArea(
			this.<String>getColumnOriginalValue("landArea"));
		sezDevProposedProjectImpl.setOwnerShip(
			this.<String>getColumnOriginalValue("ownerShip"));
		sezDevProposedProjectImpl.setOtherPleaseSpecify(
			this.<String>getColumnOriginalValue("otherPleaseSpecify"));
		sezDevProposedProjectImpl.setLandOwnerName(
			this.<String>getColumnOriginalValue("landOwnerName"));
		sezDevProposedProjectImpl.setLnadOwnerAddressOne(
			this.<String>getColumnOriginalValue("lnadOwnerAddressOne"));
		sezDevProposedProjectImpl.setLnadOwnerAddressTwo(
			this.<String>getColumnOriginalValue("lnadOwnerAddressTwo"));
		sezDevProposedProjectImpl.setLnadOwnerTenure(
			this.<String>getColumnOriginalValue("lnadOwnerTenure"));
		sezDevProposedProjectImpl.setStepToAcquireLand(
			this.<String>getColumnOriginalValue("stepToAcquireLand"));
		sezDevProposedProjectImpl.setStateWheatherTheProposedArea(
			this.<String>getColumnOriginalValue(
				"stateWheatherTheProposedArea"));
		sezDevProposedProjectImpl.setApplicantPreviously(
			this.<String>getColumnOriginalValue("applicantPreviously"));
		sezDevProposedProjectImpl.setPleaseProvideBrief(
			this.<String>getColumnOriginalValue("pleaseProvideBrief"));
		sezDevProposedProjectImpl.setSezStatusApplicationId(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezDevProposedProjectImpl;
	}

	@Override
	public int compareTo(SezDevProposedProject sezDevProposedProject) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), sezDevProposedProject.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezDevProposedProject)) {
			return false;
		}

		SezDevProposedProject sezDevProposedProject =
			(SezDevProposedProject)object;

		long primaryKey = sezDevProposedProject.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezDevProposedProject> toCacheModel() {
		SezDevProposedProjectCacheModel sezDevProposedProjectCacheModel =
			new SezDevProposedProjectCacheModel();

		sezDevProposedProjectCacheModel.sezDevProposedProjectId =
			getSezDevProposedProjectId();

		sezDevProposedProjectCacheModel.groupId = getGroupId();

		sezDevProposedProjectCacheModel.companyId = getCompanyId();

		sezDevProposedProjectCacheModel.userId = getUserId();

		sezDevProposedProjectCacheModel.userName = getUserName();

		String userName = sezDevProposedProjectCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezDevProposedProjectCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezDevProposedProjectCacheModel.createDate = createDate.getTime();
		}
		else {
			sezDevProposedProjectCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezDevProposedProjectCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sezDevProposedProjectCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		sezDevProposedProjectCacheModel.previouslyFreeZone =
			getPreviouslyFreeZone();

		String previouslyFreeZone =
			sezDevProposedProjectCacheModel.previouslyFreeZone;

		if ((previouslyFreeZone != null) &&
			(previouslyFreeZone.length() == 0)) {

			sezDevProposedProjectCacheModel.previouslyFreeZone = null;
		}

		sezDevProposedProjectCacheModel.curentlyOperatingZone =
			getCurentlyOperatingZone();

		String curentlyOperatingZone =
			sezDevProposedProjectCacheModel.curentlyOperatingZone;

		if ((curentlyOperatingZone != null) &&
			(curentlyOperatingZone.length() == 0)) {

			sezDevProposedProjectCacheModel.curentlyOperatingZone = null;
		}

		sezDevProposedProjectCacheModel.businessConductedZone =
			getBusinessConductedZone();

		String businessConductedZone =
			sezDevProposedProjectCacheModel.businessConductedZone;

		if ((businessConductedZone != null) &&
			(businessConductedZone.length() == 0)) {

			sezDevProposedProjectCacheModel.businessConductedZone = null;
		}

		sezDevProposedProjectCacheModel.locally = getLocally();

		String locally = sezDevProposedProjectCacheModel.locally;

		if ((locally != null) && (locally.length() == 0)) {
			sezDevProposedProjectCacheModel.locally = null;
		}

		sezDevProposedProjectCacheModel.overseas = getOverseas();

		String overseas = sezDevProposedProjectCacheModel.overseas;

		if ((overseas != null) && (overseas.length() == 0)) {
			sezDevProposedProjectCacheModel.overseas = null;
		}

		sezDevProposedProjectCacheModel.proposedName = getProposedName();

		String proposedName = sezDevProposedProjectCacheModel.proposedName;

		if ((proposedName != null) && (proposedName.length() == 0)) {
			sezDevProposedProjectCacheModel.proposedName = null;
		}

		sezDevProposedProjectCacheModel.specialEconomicZone =
			getSpecialEconomicZone();

		String specialEconomicZone =
			sezDevProposedProjectCacheModel.specialEconomicZone;

		if ((specialEconomicZone != null) &&
			(specialEconomicZone.length() == 0)) {

			sezDevProposedProjectCacheModel.specialEconomicZone = null;
		}

		sezDevProposedProjectCacheModel.pleaseDescribe = getPleaseDescribe();

		String pleaseDescribe = sezDevProposedProjectCacheModel.pleaseDescribe;

		if ((pleaseDescribe != null) && (pleaseDescribe.length() == 0)) {
			sezDevProposedProjectCacheModel.pleaseDescribe = null;
		}

		sezDevProposedProjectCacheModel.seaPortKm = getSeaPortKm();

		String seaPortKm = sezDevProposedProjectCacheModel.seaPortKm;

		if ((seaPortKm != null) && (seaPortKm.length() == 0)) {
			sezDevProposedProjectCacheModel.seaPortKm = null;
		}

		sezDevProposedProjectCacheModel.seaPortMi = getSeaPortMi();

		String seaPortMi = sezDevProposedProjectCacheModel.seaPortMi;

		if ((seaPortMi != null) && (seaPortMi.length() == 0)) {
			sezDevProposedProjectCacheModel.seaPortMi = null;
		}

		sezDevProposedProjectCacheModel.airportKm = getAirportKm();

		String airportKm = sezDevProposedProjectCacheModel.airportKm;

		if ((airportKm != null) && (airportKm.length() == 0)) {
			sezDevProposedProjectCacheModel.airportKm = null;
		}

		sezDevProposedProjectCacheModel.airportMi = getAirportMi();

		String airportMi = sezDevProposedProjectCacheModel.airportMi;

		if ((airportMi != null) && (airportMi.length() == 0)) {
			sezDevProposedProjectCacheModel.airportMi = null;
		}

		sezDevProposedProjectCacheModel.roadKm = getRoadKm();

		String roadKm = sezDevProposedProjectCacheModel.roadKm;

		if ((roadKm != null) && (roadKm.length() == 0)) {
			sezDevProposedProjectCacheModel.roadKm = null;
		}

		sezDevProposedProjectCacheModel.roadMi = getRoadMi();

		String roadMi = sezDevProposedProjectCacheModel.roadMi;

		if ((roadMi != null) && (roadMi.length() == 0)) {
			sezDevProposedProjectCacheModel.roadMi = null;
		}

		sezDevProposedProjectCacheModel.railKm = getRailKm();

		String railKm = sezDevProposedProjectCacheModel.railKm;

		if ((railKm != null) && (railKm.length() == 0)) {
			sezDevProposedProjectCacheModel.railKm = null;
		}

		sezDevProposedProjectCacheModel.railMi = getRailMi();

		String railMi = sezDevProposedProjectCacheModel.railMi;

		if ((railMi != null) && (railMi.length() == 0)) {
			sezDevProposedProjectCacheModel.railMi = null;
		}

		sezDevProposedProjectCacheModel.customProcessingKm =
			getCustomProcessingKm();

		String customProcessingKm =
			sezDevProposedProjectCacheModel.customProcessingKm;

		if ((customProcessingKm != null) &&
			(customProcessingKm.length() == 0)) {

			sezDevProposedProjectCacheModel.customProcessingKm = null;
		}

		sezDevProposedProjectCacheModel.customProcessingMi =
			getCustomProcessingMi();

		String customProcessingMi =
			sezDevProposedProjectCacheModel.customProcessingMi;

		if ((customProcessingMi != null) &&
			(customProcessingMi.length() == 0)) {

			sezDevProposedProjectCacheModel.customProcessingMi = null;
		}

		sezDevProposedProjectCacheModel.indicateTheLandMeasurement =
			getIndicateTheLandMeasurement();

		String indicateTheLandMeasurement =
			sezDevProposedProjectCacheModel.indicateTheLandMeasurement;

		if ((indicateTheLandMeasurement != null) &&
			(indicateTheLandMeasurement.length() == 0)) {

			sezDevProposedProjectCacheModel.indicateTheLandMeasurement = null;
		}

		sezDevProposedProjectCacheModel.building = getBuilding();

		String building = sezDevProposedProjectCacheModel.building;

		if ((building != null) && (building.length() == 0)) {
			sezDevProposedProjectCacheModel.building = null;
		}

		sezDevProposedProjectCacheModel.landArea = getLandArea();

		String landArea = sezDevProposedProjectCacheModel.landArea;

		if ((landArea != null) && (landArea.length() == 0)) {
			sezDevProposedProjectCacheModel.landArea = null;
		}

		sezDevProposedProjectCacheModel.ownerShip = getOwnerShip();

		String ownerShip = sezDevProposedProjectCacheModel.ownerShip;

		if ((ownerShip != null) && (ownerShip.length() == 0)) {
			sezDevProposedProjectCacheModel.ownerShip = null;
		}

		sezDevProposedProjectCacheModel.otherPleaseSpecify =
			getOtherPleaseSpecify();

		String otherPleaseSpecify =
			sezDevProposedProjectCacheModel.otherPleaseSpecify;

		if ((otherPleaseSpecify != null) &&
			(otherPleaseSpecify.length() == 0)) {

			sezDevProposedProjectCacheModel.otherPleaseSpecify = null;
		}

		sezDevProposedProjectCacheModel.landOwnerName = getLandOwnerName();

		String landOwnerName = sezDevProposedProjectCacheModel.landOwnerName;

		if ((landOwnerName != null) && (landOwnerName.length() == 0)) {
			sezDevProposedProjectCacheModel.landOwnerName = null;
		}

		sezDevProposedProjectCacheModel.lnadOwnerAddressOne =
			getLnadOwnerAddressOne();

		String lnadOwnerAddressOne =
			sezDevProposedProjectCacheModel.lnadOwnerAddressOne;

		if ((lnadOwnerAddressOne != null) &&
			(lnadOwnerAddressOne.length() == 0)) {

			sezDevProposedProjectCacheModel.lnadOwnerAddressOne = null;
		}

		sezDevProposedProjectCacheModel.lnadOwnerAddressTwo =
			getLnadOwnerAddressTwo();

		String lnadOwnerAddressTwo =
			sezDevProposedProjectCacheModel.lnadOwnerAddressTwo;

		if ((lnadOwnerAddressTwo != null) &&
			(lnadOwnerAddressTwo.length() == 0)) {

			sezDevProposedProjectCacheModel.lnadOwnerAddressTwo = null;
		}

		sezDevProposedProjectCacheModel.lnadOwnerTenure = getLnadOwnerTenure();

		String lnadOwnerTenure =
			sezDevProposedProjectCacheModel.lnadOwnerTenure;

		if ((lnadOwnerTenure != null) && (lnadOwnerTenure.length() == 0)) {
			sezDevProposedProjectCacheModel.lnadOwnerTenure = null;
		}

		sezDevProposedProjectCacheModel.stepToAcquireLand =
			getStepToAcquireLand();

		String stepToAcquireLand =
			sezDevProposedProjectCacheModel.stepToAcquireLand;

		if ((stepToAcquireLand != null) && (stepToAcquireLand.length() == 0)) {
			sezDevProposedProjectCacheModel.stepToAcquireLand = null;
		}

		sezDevProposedProjectCacheModel.stateWheatherTheProposedArea =
			getStateWheatherTheProposedArea();

		String stateWheatherTheProposedArea =
			sezDevProposedProjectCacheModel.stateWheatherTheProposedArea;

		if ((stateWheatherTheProposedArea != null) &&
			(stateWheatherTheProposedArea.length() == 0)) {

			sezDevProposedProjectCacheModel.stateWheatherTheProposedArea = null;
		}

		sezDevProposedProjectCacheModel.applicantPreviously =
			getApplicantPreviously();

		String applicantPreviously =
			sezDevProposedProjectCacheModel.applicantPreviously;

		if ((applicantPreviously != null) &&
			(applicantPreviously.length() == 0)) {

			sezDevProposedProjectCacheModel.applicantPreviously = null;
		}

		sezDevProposedProjectCacheModel.pleaseProvideBrief =
			getPleaseProvideBrief();

		String pleaseProvideBrief =
			sezDevProposedProjectCacheModel.pleaseProvideBrief;

		if ((pleaseProvideBrief != null) &&
			(pleaseProvideBrief.length() == 0)) {

			sezDevProposedProjectCacheModel.pleaseProvideBrief = null;
		}

		sezDevProposedProjectCacheModel.sezStatusApplicationId =
			getSezStatusApplicationId();

		return sezDevProposedProjectCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SezDevProposedProject, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SezDevProposedProject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezDevProposedProject, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezDevProposedProject)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SezDevProposedProject>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					SezDevProposedProject.class, ModelWrapper.class);

	}

	private long _sezDevProposedProjectId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _previouslyFreeZone;
	private String _curentlyOperatingZone;
	private String _businessConductedZone;
	private String _locally;
	private String _overseas;
	private String _proposedName;
	private String _specialEconomicZone;
	private String _pleaseDescribe;
	private String _seaPortKm;
	private String _seaPortMi;
	private String _airportKm;
	private String _airportMi;
	private String _roadKm;
	private String _roadMi;
	private String _railKm;
	private String _railMi;
	private String _customProcessingKm;
	private String _customProcessingMi;
	private String _indicateTheLandMeasurement;
	private String _building;
	private String _landArea;
	private String _ownerShip;
	private String _otherPleaseSpecify;
	private String _landOwnerName;
	private String _lnadOwnerAddressOne;
	private String _lnadOwnerAddressTwo;
	private String _lnadOwnerTenure;
	private String _stepToAcquireLand;
	private String _stateWheatherTheProposedArea;
	private String _applicantPreviously;
	private String _pleaseProvideBrief;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezDevProposedProject, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SezDevProposedProject)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"sezDevProposedProjectId", _sezDevProposedProjectId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("previouslyFreeZone", _previouslyFreeZone);
		_columnOriginalValues.put(
			"curentlyOperatingZone", _curentlyOperatingZone);
		_columnOriginalValues.put(
			"businessConductedZone", _businessConductedZone);
		_columnOriginalValues.put("locally", _locally);
		_columnOriginalValues.put("overseas", _overseas);
		_columnOriginalValues.put("proposedName", _proposedName);
		_columnOriginalValues.put("specialEconomicZone", _specialEconomicZone);
		_columnOriginalValues.put("pleaseDescribe", _pleaseDescribe);
		_columnOriginalValues.put("seaPortKm", _seaPortKm);
		_columnOriginalValues.put("seaPortMi", _seaPortMi);
		_columnOriginalValues.put("airportKm", _airportKm);
		_columnOriginalValues.put("airportMi", _airportMi);
		_columnOriginalValues.put("roadKm", _roadKm);
		_columnOriginalValues.put("roadMi", _roadMi);
		_columnOriginalValues.put("railKm", _railKm);
		_columnOriginalValues.put("railMi", _railMi);
		_columnOriginalValues.put("customProcessingKm", _customProcessingKm);
		_columnOriginalValues.put("customProcessingMi", _customProcessingMi);
		_columnOriginalValues.put(
			"indicateTheLandMeasurement", _indicateTheLandMeasurement);
		_columnOriginalValues.put("building", _building);
		_columnOriginalValues.put("landArea", _landArea);
		_columnOriginalValues.put("ownerShip", _ownerShip);
		_columnOriginalValues.put("otherPleaseSpecify", _otherPleaseSpecify);
		_columnOriginalValues.put("landOwnerName", _landOwnerName);
		_columnOriginalValues.put("lnadOwnerAddressOne", _lnadOwnerAddressOne);
		_columnOriginalValues.put("lnadOwnerAddressTwo", _lnadOwnerAddressTwo);
		_columnOriginalValues.put("lnadOwnerTenure", _lnadOwnerTenure);
		_columnOriginalValues.put("stepToAcquireLand", _stepToAcquireLand);
		_columnOriginalValues.put(
			"stateWheatherTheProposedArea", _stateWheatherTheProposedArea);
		_columnOriginalValues.put("applicantPreviously", _applicantPreviously);
		_columnOriginalValues.put("pleaseProvideBrief", _pleaseProvideBrief);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezDevProposedProjectId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("previouslyFreeZone", 128L);

		columnBitmasks.put("curentlyOperatingZone", 256L);

		columnBitmasks.put("businessConductedZone", 512L);

		columnBitmasks.put("locally", 1024L);

		columnBitmasks.put("overseas", 2048L);

		columnBitmasks.put("proposedName", 4096L);

		columnBitmasks.put("specialEconomicZone", 8192L);

		columnBitmasks.put("pleaseDescribe", 16384L);

		columnBitmasks.put("seaPortKm", 32768L);

		columnBitmasks.put("seaPortMi", 65536L);

		columnBitmasks.put("airportKm", 131072L);

		columnBitmasks.put("airportMi", 262144L);

		columnBitmasks.put("roadKm", 524288L);

		columnBitmasks.put("roadMi", 1048576L);

		columnBitmasks.put("railKm", 2097152L);

		columnBitmasks.put("railMi", 4194304L);

		columnBitmasks.put("customProcessingKm", 8388608L);

		columnBitmasks.put("customProcessingMi", 16777216L);

		columnBitmasks.put("indicateTheLandMeasurement", 33554432L);

		columnBitmasks.put("building", 67108864L);

		columnBitmasks.put("landArea", 134217728L);

		columnBitmasks.put("ownerShip", 268435456L);

		columnBitmasks.put("otherPleaseSpecify", 536870912L);

		columnBitmasks.put("landOwnerName", 1073741824L);

		columnBitmasks.put("lnadOwnerAddressOne", 2147483648L);

		columnBitmasks.put("lnadOwnerAddressTwo", 4294967296L);

		columnBitmasks.put("lnadOwnerTenure", 8589934592L);

		columnBitmasks.put("stepToAcquireLand", 17179869184L);

		columnBitmasks.put("stateWheatherTheProposedArea", 34359738368L);

		columnBitmasks.put("applicantPreviously", 68719476736L);

		columnBitmasks.put("pleaseProvideBrief", 137438953472L);

		columnBitmasks.put("sezStatusApplicationId", 274877906944L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezDevProposedProject _escapedModel;

}