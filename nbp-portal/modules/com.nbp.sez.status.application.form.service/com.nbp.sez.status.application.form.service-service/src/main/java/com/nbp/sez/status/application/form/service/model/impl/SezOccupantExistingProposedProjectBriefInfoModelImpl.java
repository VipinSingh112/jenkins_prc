/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezOccupantExistingProposedProjectBriefInfo;
import com.nbp.sez.status.application.form.service.model.SezOccupantExistingProposedProjectBriefInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezOccupantExistingProposedProjectBriefInfo service. Represents a row in the &quot;nbp_sez_occ_exist_prop_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezOccupantExistingProposedProjectBriefInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezOccupantExistingProposedProjectBriefInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezOccupantExistingProposedProjectBriefInfoImpl
 * @generated
 */
@JSON(strict = true)
public class SezOccupantExistingProposedProjectBriefInfoModelImpl
	extends BaseModelImpl<SezOccupantExistingProposedProjectBriefInfo>
	implements SezOccupantExistingProposedProjectBriefInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez occupant existing proposed project brief info model instance should use the <code>SezOccupantExistingProposedProjectBriefInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_occ_exist_prop_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezOccExistPorpId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"occBusinessDesc", Types.VARCHAR},
		{"occDeniedFreeZoneAppr", Types.VARCHAR},
		{"occDeniedFreeZoneApprDate", Types.TIMESTAMP},
		{"occDeniedFreeZoneApprType", Types.VARCHAR},
		{"occFreeZoneLocation", Types.VARCHAR}, {"occSezDevLoc", Types.VARCHAR},
		{"occSezDevLocDesc", Types.VARCHAR},
		{"occSubConcessionBuilding", Types.VARCHAR},
		{"occSubConcessionTown", Types.VARCHAR},
		{"occSubConcessionParish", Types.VARCHAR},
		{"occCompleteSurveyTechDesc", Types.VARCHAR},
		{"occNorthBoundaries", Types.VARCHAR},
		{"occEastBoundaries", Types.VARCHAR},
		{"occWestBoundaries", Types.VARCHAR},
		{"occSouthBoundaries", Types.VARCHAR}, {"occOwnership", Types.VARCHAR},
		{"occLeaseYears", Types.VARCHAR}, {"occVolume", Types.VARCHAR},
		{"occFolio", Types.VARCHAR}, {"occFloorNum", Types.VARCHAR},
		{"occUndertakenService", Types.VARCHAR},
		{"occUndertakenManufacturing", Types.VARCHAR},
		{"occSeaPortDistanceKM", Types.VARCHAR},
		{"occSeaPortDistanceMI", Types.VARCHAR},
		{"occAirportDistanceKM", Types.VARCHAR},
		{"occAirportDistanceMI", Types.VARCHAR},
		{"occRoadDistanceKM", Types.VARCHAR},
		{"occRoadDistanceMI", Types.VARCHAR},
		{"occRailDistanceKM", Types.VARCHAR},
		{"occRailDistanceMI", Types.VARCHAR},
		{"occCustomDistanceKM", Types.VARCHAR},
		{"occCustomDistanceMI", Types.VARCHAR},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezOccExistPorpId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occBusinessDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDeniedFreeZoneAppr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDeniedFreeZoneApprDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occDeniedFreeZoneApprType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occFreeZoneLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSezDevLoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSezDevLocDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSubConcessionBuilding", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSubConcessionTown", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSubConcessionParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occCompleteSurveyTechDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occNorthBoundaries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occEastBoundaries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occWestBoundaries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSouthBoundaries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occOwnership", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occLeaseYears", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occVolume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occFolio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occFloorNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occUndertakenService", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occUndertakenManufacturing", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSeaPortDistanceKM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSeaPortDistanceMI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occAirportDistanceKM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occAirportDistanceMI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occRoadDistanceKM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occRoadDistanceMI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occRailDistanceKM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occRailDistanceMI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occCustomDistanceKM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occCustomDistanceMI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_occ_exist_prop_info (sezOccExistPorpId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,occBusinessDesc VARCHAR(75) null,occDeniedFreeZoneAppr VARCHAR(75) null,occDeniedFreeZoneApprDate DATE null,occDeniedFreeZoneApprType VARCHAR(75) null,occFreeZoneLocation VARCHAR(75) null,occSezDevLoc VARCHAR(75) null,occSezDevLocDesc VARCHAR(75) null,occSubConcessionBuilding VARCHAR(75) null,occSubConcessionTown VARCHAR(75) null,occSubConcessionParish VARCHAR(75) null,occCompleteSurveyTechDesc VARCHAR(75) null,occNorthBoundaries VARCHAR(75) null,occEastBoundaries VARCHAR(75) null,occWestBoundaries VARCHAR(75) null,occSouthBoundaries VARCHAR(75) null,occOwnership VARCHAR(75) null,occLeaseYears VARCHAR(75) null,occVolume VARCHAR(75) null,occFolio VARCHAR(75) null,occFloorNum VARCHAR(75) null,occUndertakenService VARCHAR(75) null,occUndertakenManufacturing VARCHAR(75) null,occSeaPortDistanceKM VARCHAR(75) null,occSeaPortDistanceMI VARCHAR(75) null,occAirportDistanceKM VARCHAR(75) null,occAirportDistanceMI VARCHAR(75) null,occRoadDistanceKM VARCHAR(75) null,occRoadDistanceMI VARCHAR(75) null,occRailDistanceKM VARCHAR(75) null,occRailDistanceMI VARCHAR(75) null,occCustomDistanceKM VARCHAR(75) null,occCustomDistanceMI VARCHAR(75) null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_occ_exist_prop_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezOccupantExistingProposedProjectBriefInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_occ_exist_prop_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezOccupantExistingProposedProjectBriefInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezOccExistPorpId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezOccExistPorpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezOccExistPorpId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezOccupantExistingProposedProjectBriefInfo.class;
	}

	@Override
	public String getModelClassName() {
		return SezOccupantExistingProposedProjectBriefInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map
			<String,
			 Function<SezOccupantExistingProposedProjectBriefInfo, Object>>
				attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String,
				 Function<SezOccupantExistingProposedProjectBriefInfo, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupantExistingProposedProjectBriefInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(SezOccupantExistingProposedProjectBriefInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map
			<String,
			 BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Object>>
				attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezOccupantExistingProposedProjectBriefInfo)this,
					entry.getValue());
			}
		}
	}

	public Map
		<String, Function<SezOccupantExistingProposedProjectBriefInfo, Object>>
			getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map
		<String,
		 BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Object>>
			getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String,
			 Function<SezOccupantExistingProposedProjectBriefInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map
				<String,
				 Function<SezOccupantExistingProposedProjectBriefInfo, Object>>
					attributeGetterFunctions =
						new LinkedHashMap
							<String,
							 Function
								 <SezOccupantExistingProposedProjectBriefInfo,
								  Object>>();

			attributeGetterFunctions.put(
				"sezOccExistPorpId",
				SezOccupantExistingProposedProjectBriefInfo::
					getSezOccExistPorpId);
			attributeGetterFunctions.put(
				"groupId",
				SezOccupantExistingProposedProjectBriefInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId",
				SezOccupantExistingProposedProjectBriefInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId",
				SezOccupantExistingProposedProjectBriefInfo::getUserId);
			attributeGetterFunctions.put(
				"userName",
				SezOccupantExistingProposedProjectBriefInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				SezOccupantExistingProposedProjectBriefInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				SezOccupantExistingProposedProjectBriefInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"occBusinessDesc",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccBusinessDesc);
			attributeGetterFunctions.put(
				"occDeniedFreeZoneAppr",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccDeniedFreeZoneAppr);
			attributeGetterFunctions.put(
				"occDeniedFreeZoneApprDate",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccDeniedFreeZoneApprDate);
			attributeGetterFunctions.put(
				"occDeniedFreeZoneApprType",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccDeniedFreeZoneApprType);
			attributeGetterFunctions.put(
				"occFreeZoneLocation",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccFreeZoneLocation);
			attributeGetterFunctions.put(
				"occSezDevLoc",
				SezOccupantExistingProposedProjectBriefInfo::getOccSezDevLoc);
			attributeGetterFunctions.put(
				"occSezDevLocDesc",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccSezDevLocDesc);
			attributeGetterFunctions.put(
				"occSubConcessionBuilding",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccSubConcessionBuilding);
			attributeGetterFunctions.put(
				"occSubConcessionTown",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccSubConcessionTown);
			attributeGetterFunctions.put(
				"occSubConcessionParish",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccSubConcessionParish);
			attributeGetterFunctions.put(
				"occCompleteSurveyTechDesc",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccCompleteSurveyTechDesc);
			attributeGetterFunctions.put(
				"occNorthBoundaries",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccNorthBoundaries);
			attributeGetterFunctions.put(
				"occEastBoundaries",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccEastBoundaries);
			attributeGetterFunctions.put(
				"occWestBoundaries",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccWestBoundaries);
			attributeGetterFunctions.put(
				"occSouthBoundaries",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccSouthBoundaries);
			attributeGetterFunctions.put(
				"occOwnership",
				SezOccupantExistingProposedProjectBriefInfo::getOccOwnership);
			attributeGetterFunctions.put(
				"occLeaseYears",
				SezOccupantExistingProposedProjectBriefInfo::getOccLeaseYears);
			attributeGetterFunctions.put(
				"occVolume",
				SezOccupantExistingProposedProjectBriefInfo::getOccVolume);
			attributeGetterFunctions.put(
				"occFolio",
				SezOccupantExistingProposedProjectBriefInfo::getOccFolio);
			attributeGetterFunctions.put(
				"occFloorNum",
				SezOccupantExistingProposedProjectBriefInfo::getOccFloorNum);
			attributeGetterFunctions.put(
				"occUndertakenService",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccUndertakenService);
			attributeGetterFunctions.put(
				"occUndertakenManufacturing",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccUndertakenManufacturing);
			attributeGetterFunctions.put(
				"occSeaPortDistanceKM",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccSeaPortDistanceKM);
			attributeGetterFunctions.put(
				"occSeaPortDistanceMI",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccSeaPortDistanceMI);
			attributeGetterFunctions.put(
				"occAirportDistanceKM",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccAirportDistanceKM);
			attributeGetterFunctions.put(
				"occAirportDistanceMI",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccAirportDistanceMI);
			attributeGetterFunctions.put(
				"occRoadDistanceKM",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccRoadDistanceKM);
			attributeGetterFunctions.put(
				"occRoadDistanceMI",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccRoadDistanceMI);
			attributeGetterFunctions.put(
				"occRailDistanceKM",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccRailDistanceKM);
			attributeGetterFunctions.put(
				"occRailDistanceMI",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccRailDistanceMI);
			attributeGetterFunctions.put(
				"occCustomDistanceKM",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccCustomDistanceKM);
			attributeGetterFunctions.put(
				"occCustomDistanceMI",
				SezOccupantExistingProposedProjectBriefInfo::
					getOccCustomDistanceMI);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezOccupantExistingProposedProjectBriefInfo::
					getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String,
			 BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map
				<String,
				 BiConsumer<SezOccupantExistingProposedProjectBriefInfo, ?>>
					attributeSetterBiConsumers =
						new LinkedHashMap
							<String,
							 BiConsumer
								 <SezOccupantExistingProposedProjectBriefInfo,
								  ?>>();

			attributeSetterBiConsumers.put(
				"sezOccExistPorpId",
				(BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Long>)
					SezOccupantExistingProposedProjectBriefInfo::
						setSezOccExistPorpId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Long>)
					SezOccupantExistingProposedProjectBriefInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Long>)
					SezOccupantExistingProposedProjectBriefInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Long>)
					SezOccupantExistingProposedProjectBriefInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Date>)
					SezOccupantExistingProposedProjectBriefInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Date>)
					SezOccupantExistingProposedProjectBriefInfo::
						setModifiedDate);
			attributeSetterBiConsumers.put(
				"occBusinessDesc",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccBusinessDesc);
			attributeSetterBiConsumers.put(
				"occDeniedFreeZoneAppr",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccDeniedFreeZoneAppr);
			attributeSetterBiConsumers.put(
				"occDeniedFreeZoneApprDate",
				(BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Date>)
					SezOccupantExistingProposedProjectBriefInfo::
						setOccDeniedFreeZoneApprDate);
			attributeSetterBiConsumers.put(
				"occDeniedFreeZoneApprType",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccDeniedFreeZoneApprType);
			attributeSetterBiConsumers.put(
				"occFreeZoneLocation",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccFreeZoneLocation);
			attributeSetterBiConsumers.put(
				"occSezDevLoc",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccSezDevLoc);
			attributeSetterBiConsumers.put(
				"occSezDevLocDesc",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccSezDevLocDesc);
			attributeSetterBiConsumers.put(
				"occSubConcessionBuilding",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccSubConcessionBuilding);
			attributeSetterBiConsumers.put(
				"occSubConcessionTown",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccSubConcessionTown);
			attributeSetterBiConsumers.put(
				"occSubConcessionParish",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccSubConcessionParish);
			attributeSetterBiConsumers.put(
				"occCompleteSurveyTechDesc",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccCompleteSurveyTechDesc);
			attributeSetterBiConsumers.put(
				"occNorthBoundaries",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccNorthBoundaries);
			attributeSetterBiConsumers.put(
				"occEastBoundaries",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccEastBoundaries);
			attributeSetterBiConsumers.put(
				"occWestBoundaries",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccWestBoundaries);
			attributeSetterBiConsumers.put(
				"occSouthBoundaries",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccSouthBoundaries);
			attributeSetterBiConsumers.put(
				"occOwnership",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccOwnership);
			attributeSetterBiConsumers.put(
				"occLeaseYears",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccLeaseYears);
			attributeSetterBiConsumers.put(
				"occVolume",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccVolume);
			attributeSetterBiConsumers.put(
				"occFolio",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccFolio);
			attributeSetterBiConsumers.put(
				"occFloorNum",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccFloorNum);
			attributeSetterBiConsumers.put(
				"occUndertakenService",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccUndertakenService);
			attributeSetterBiConsumers.put(
				"occUndertakenManufacturing",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccUndertakenManufacturing);
			attributeSetterBiConsumers.put(
				"occSeaPortDistanceKM",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccSeaPortDistanceKM);
			attributeSetterBiConsumers.put(
				"occSeaPortDistanceMI",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccSeaPortDistanceMI);
			attributeSetterBiConsumers.put(
				"occAirportDistanceKM",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccAirportDistanceKM);
			attributeSetterBiConsumers.put(
				"occAirportDistanceMI",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccAirportDistanceMI);
			attributeSetterBiConsumers.put(
				"occRoadDistanceKM",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccRoadDistanceKM);
			attributeSetterBiConsumers.put(
				"occRoadDistanceMI",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccRoadDistanceMI);
			attributeSetterBiConsumers.put(
				"occRailDistanceKM",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccRailDistanceKM);
			attributeSetterBiConsumers.put(
				"occRailDistanceMI",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccRailDistanceMI);
			attributeSetterBiConsumers.put(
				"occCustomDistanceKM",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccCustomDistanceKM);
			attributeSetterBiConsumers.put(
				"occCustomDistanceMI",
				(BiConsumer
					<SezOccupantExistingProposedProjectBriefInfo, String>)
						SezOccupantExistingProposedProjectBriefInfo::
							setOccCustomDistanceMI);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezOccupantExistingProposedProjectBriefInfo, Long>)
					SezOccupantExistingProposedProjectBriefInfo::
						setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezOccExistPorpId() {
		return _sezOccExistPorpId;
	}

	@Override
	public void setSezOccExistPorpId(long sezOccExistPorpId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezOccExistPorpId = sezOccExistPorpId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOccBusinessDesc() {
		if (_occBusinessDesc == null) {
			return "";
		}
		else {
			return _occBusinessDesc;
		}
	}

	@Override
	public void setOccBusinessDesc(String occBusinessDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occBusinessDesc = occBusinessDesc;
	}

	@JSON
	@Override
	public String getOccDeniedFreeZoneAppr() {
		if (_occDeniedFreeZoneAppr == null) {
			return "";
		}
		else {
			return _occDeniedFreeZoneAppr;
		}
	}

	@Override
	public void setOccDeniedFreeZoneAppr(String occDeniedFreeZoneAppr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDeniedFreeZoneAppr = occDeniedFreeZoneAppr;
	}

	@JSON
	@Override
	public Date getOccDeniedFreeZoneApprDate() {
		return _occDeniedFreeZoneApprDate;
	}

	@Override
	public void setOccDeniedFreeZoneApprDate(Date occDeniedFreeZoneApprDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDeniedFreeZoneApprDate = occDeniedFreeZoneApprDate;
	}

	@JSON
	@Override
	public String getOccDeniedFreeZoneApprType() {
		if (_occDeniedFreeZoneApprType == null) {
			return "";
		}
		else {
			return _occDeniedFreeZoneApprType;
		}
	}

	@Override
	public void setOccDeniedFreeZoneApprType(String occDeniedFreeZoneApprType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDeniedFreeZoneApprType = occDeniedFreeZoneApprType;
	}

	@JSON
	@Override
	public String getOccFreeZoneLocation() {
		if (_occFreeZoneLocation == null) {
			return "";
		}
		else {
			return _occFreeZoneLocation;
		}
	}

	@Override
	public void setOccFreeZoneLocation(String occFreeZoneLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occFreeZoneLocation = occFreeZoneLocation;
	}

	@JSON
	@Override
	public String getOccSezDevLoc() {
		if (_occSezDevLoc == null) {
			return "";
		}
		else {
			return _occSezDevLoc;
		}
	}

	@Override
	public void setOccSezDevLoc(String occSezDevLoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSezDevLoc = occSezDevLoc;
	}

	@JSON
	@Override
	public String getOccSezDevLocDesc() {
		if (_occSezDevLocDesc == null) {
			return "";
		}
		else {
			return _occSezDevLocDesc;
		}
	}

	@Override
	public void setOccSezDevLocDesc(String occSezDevLocDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSezDevLocDesc = occSezDevLocDesc;
	}

	@JSON
	@Override
	public String getOccSubConcessionBuilding() {
		if (_occSubConcessionBuilding == null) {
			return "";
		}
		else {
			return _occSubConcessionBuilding;
		}
	}

	@Override
	public void setOccSubConcessionBuilding(String occSubConcessionBuilding) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSubConcessionBuilding = occSubConcessionBuilding;
	}

	@JSON
	@Override
	public String getOccSubConcessionTown() {
		if (_occSubConcessionTown == null) {
			return "";
		}
		else {
			return _occSubConcessionTown;
		}
	}

	@Override
	public void setOccSubConcessionTown(String occSubConcessionTown) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSubConcessionTown = occSubConcessionTown;
	}

	@JSON
	@Override
	public String getOccSubConcessionParish() {
		if (_occSubConcessionParish == null) {
			return "";
		}
		else {
			return _occSubConcessionParish;
		}
	}

	@Override
	public void setOccSubConcessionParish(String occSubConcessionParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSubConcessionParish = occSubConcessionParish;
	}

	@JSON
	@Override
	public String getOccCompleteSurveyTechDesc() {
		if (_occCompleteSurveyTechDesc == null) {
			return "";
		}
		else {
			return _occCompleteSurveyTechDesc;
		}
	}

	@Override
	public void setOccCompleteSurveyTechDesc(String occCompleteSurveyTechDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occCompleteSurveyTechDesc = occCompleteSurveyTechDesc;
	}

	@JSON
	@Override
	public String getOccNorthBoundaries() {
		if (_occNorthBoundaries == null) {
			return "";
		}
		else {
			return _occNorthBoundaries;
		}
	}

	@Override
	public void setOccNorthBoundaries(String occNorthBoundaries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occNorthBoundaries = occNorthBoundaries;
	}

	@JSON
	@Override
	public String getOccEastBoundaries() {
		if (_occEastBoundaries == null) {
			return "";
		}
		else {
			return _occEastBoundaries;
		}
	}

	@Override
	public void setOccEastBoundaries(String occEastBoundaries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occEastBoundaries = occEastBoundaries;
	}

	@JSON
	@Override
	public String getOccWestBoundaries() {
		if (_occWestBoundaries == null) {
			return "";
		}
		else {
			return _occWestBoundaries;
		}
	}

	@Override
	public void setOccWestBoundaries(String occWestBoundaries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occWestBoundaries = occWestBoundaries;
	}

	@JSON
	@Override
	public String getOccSouthBoundaries() {
		if (_occSouthBoundaries == null) {
			return "";
		}
		else {
			return _occSouthBoundaries;
		}
	}

	@Override
	public void setOccSouthBoundaries(String occSouthBoundaries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSouthBoundaries = occSouthBoundaries;
	}

	@JSON
	@Override
	public String getOccOwnership() {
		if (_occOwnership == null) {
			return "";
		}
		else {
			return _occOwnership;
		}
	}

	@Override
	public void setOccOwnership(String occOwnership) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occOwnership = occOwnership;
	}

	@JSON
	@Override
	public String getOccLeaseYears() {
		if (_occLeaseYears == null) {
			return "";
		}
		else {
			return _occLeaseYears;
		}
	}

	@Override
	public void setOccLeaseYears(String occLeaseYears) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occLeaseYears = occLeaseYears;
	}

	@JSON
	@Override
	public String getOccVolume() {
		if (_occVolume == null) {
			return "";
		}
		else {
			return _occVolume;
		}
	}

	@Override
	public void setOccVolume(String occVolume) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occVolume = occVolume;
	}

	@JSON
	@Override
	public String getOccFolio() {
		if (_occFolio == null) {
			return "";
		}
		else {
			return _occFolio;
		}
	}

	@Override
	public void setOccFolio(String occFolio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occFolio = occFolio;
	}

	@JSON
	@Override
	public String getOccFloorNum() {
		if (_occFloorNum == null) {
			return "";
		}
		else {
			return _occFloorNum;
		}
	}

	@Override
	public void setOccFloorNum(String occFloorNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occFloorNum = occFloorNum;
	}

	@JSON
	@Override
	public String getOccUndertakenService() {
		if (_occUndertakenService == null) {
			return "";
		}
		else {
			return _occUndertakenService;
		}
	}

	@Override
	public void setOccUndertakenService(String occUndertakenService) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occUndertakenService = occUndertakenService;
	}

	@JSON
	@Override
	public String getOccUndertakenManufacturing() {
		if (_occUndertakenManufacturing == null) {
			return "";
		}
		else {
			return _occUndertakenManufacturing;
		}
	}

	@Override
	public void setOccUndertakenManufacturing(
		String occUndertakenManufacturing) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occUndertakenManufacturing = occUndertakenManufacturing;
	}

	@JSON
	@Override
	public String getOccSeaPortDistanceKM() {
		if (_occSeaPortDistanceKM == null) {
			return "";
		}
		else {
			return _occSeaPortDistanceKM;
		}
	}

	@Override
	public void setOccSeaPortDistanceKM(String occSeaPortDistanceKM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSeaPortDistanceKM = occSeaPortDistanceKM;
	}

	@JSON
	@Override
	public String getOccSeaPortDistanceMI() {
		if (_occSeaPortDistanceMI == null) {
			return "";
		}
		else {
			return _occSeaPortDistanceMI;
		}
	}

	@Override
	public void setOccSeaPortDistanceMI(String occSeaPortDistanceMI) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSeaPortDistanceMI = occSeaPortDistanceMI;
	}

	@JSON
	@Override
	public String getOccAirportDistanceKM() {
		if (_occAirportDistanceKM == null) {
			return "";
		}
		else {
			return _occAirportDistanceKM;
		}
	}

	@Override
	public void setOccAirportDistanceKM(String occAirportDistanceKM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occAirportDistanceKM = occAirportDistanceKM;
	}

	@JSON
	@Override
	public String getOccAirportDistanceMI() {
		if (_occAirportDistanceMI == null) {
			return "";
		}
		else {
			return _occAirportDistanceMI;
		}
	}

	@Override
	public void setOccAirportDistanceMI(String occAirportDistanceMI) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occAirportDistanceMI = occAirportDistanceMI;
	}

	@JSON
	@Override
	public String getOccRoadDistanceKM() {
		if (_occRoadDistanceKM == null) {
			return "";
		}
		else {
			return _occRoadDistanceKM;
		}
	}

	@Override
	public void setOccRoadDistanceKM(String occRoadDistanceKM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occRoadDistanceKM = occRoadDistanceKM;
	}

	@JSON
	@Override
	public String getOccRoadDistanceMI() {
		if (_occRoadDistanceMI == null) {
			return "";
		}
		else {
			return _occRoadDistanceMI;
		}
	}

	@Override
	public void setOccRoadDistanceMI(String occRoadDistanceMI) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occRoadDistanceMI = occRoadDistanceMI;
	}

	@JSON
	@Override
	public String getOccRailDistanceKM() {
		if (_occRailDistanceKM == null) {
			return "";
		}
		else {
			return _occRailDistanceKM;
		}
	}

	@Override
	public void setOccRailDistanceKM(String occRailDistanceKM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occRailDistanceKM = occRailDistanceKM;
	}

	@JSON
	@Override
	public String getOccRailDistanceMI() {
		if (_occRailDistanceMI == null) {
			return "";
		}
		else {
			return _occRailDistanceMI;
		}
	}

	@Override
	public void setOccRailDistanceMI(String occRailDistanceMI) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occRailDistanceMI = occRailDistanceMI;
	}

	@JSON
	@Override
	public String getOccCustomDistanceKM() {
		if (_occCustomDistanceKM == null) {
			return "";
		}
		else {
			return _occCustomDistanceKM;
		}
	}

	@Override
	public void setOccCustomDistanceKM(String occCustomDistanceKM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occCustomDistanceKM = occCustomDistanceKM;
	}

	@JSON
	@Override
	public String getOccCustomDistanceMI() {
		if (_occCustomDistanceMI == null) {
			return "";
		}
		else {
			return _occCustomDistanceMI;
		}
	}

	@Override
	public void setOccCustomDistanceMI(String occCustomDistanceMI) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occCustomDistanceMI = occCustomDistanceMI;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(),
			SezOccupantExistingProposedProjectBriefInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezOccupantExistingProposedProjectBriefInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function
				<InvocationHandler, SezOccupantExistingProposedProjectBriefInfo>
					escapedModelProxyProviderFunction =
						EscapedModelProxyProviderFunctionHolder.
							_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezOccupantExistingProposedProjectBriefInfoImpl
			sezOccupantExistingProposedProjectBriefInfoImpl =
				new SezOccupantExistingProposedProjectBriefInfoImpl();

		sezOccupantExistingProposedProjectBriefInfoImpl.setSezOccExistPorpId(
			getSezOccExistPorpId());
		sezOccupantExistingProposedProjectBriefInfoImpl.setGroupId(
			getGroupId());
		sezOccupantExistingProposedProjectBriefInfoImpl.setCompanyId(
			getCompanyId());
		sezOccupantExistingProposedProjectBriefInfoImpl.setUserId(getUserId());
		sezOccupantExistingProposedProjectBriefInfoImpl.setUserName(
			getUserName());
		sezOccupantExistingProposedProjectBriefInfoImpl.setCreateDate(
			getCreateDate());
		sezOccupantExistingProposedProjectBriefInfoImpl.setModifiedDate(
			getModifiedDate());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccBusinessDesc(
			getOccBusinessDesc());
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccDeniedFreeZoneAppr(getOccDeniedFreeZoneAppr());
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccDeniedFreeZoneApprDate(getOccDeniedFreeZoneApprDate());
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccDeniedFreeZoneApprType(getOccDeniedFreeZoneApprType());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccFreeZoneLocation(
			getOccFreeZoneLocation());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSezDevLoc(
			getOccSezDevLoc());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSezDevLocDesc(
			getOccSezDevLocDesc());
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccSubConcessionBuilding(getOccSubConcessionBuilding());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSubConcessionTown(
			getOccSubConcessionTown());
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccSubConcessionParish(getOccSubConcessionParish());
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccCompleteSurveyTechDesc(getOccCompleteSurveyTechDesc());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccNorthBoundaries(
			getOccNorthBoundaries());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccEastBoundaries(
			getOccEastBoundaries());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccWestBoundaries(
			getOccWestBoundaries());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSouthBoundaries(
			getOccSouthBoundaries());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccOwnership(
			getOccOwnership());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccLeaseYears(
			getOccLeaseYears());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccVolume(
			getOccVolume());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccFolio(
			getOccFolio());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccFloorNum(
			getOccFloorNum());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccUndertakenService(
			getOccUndertakenService());
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccUndertakenManufacturing(getOccUndertakenManufacturing());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSeaPortDistanceKM(
			getOccSeaPortDistanceKM());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSeaPortDistanceMI(
			getOccSeaPortDistanceMI());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccAirportDistanceKM(
			getOccAirportDistanceKM());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccAirportDistanceMI(
			getOccAirportDistanceMI());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccRoadDistanceKM(
			getOccRoadDistanceKM());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccRoadDistanceMI(
			getOccRoadDistanceMI());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccRailDistanceKM(
			getOccRailDistanceKM());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccRailDistanceMI(
			getOccRailDistanceMI());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccCustomDistanceKM(
			getOccCustomDistanceKM());
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccCustomDistanceMI(
			getOccCustomDistanceMI());
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setSezStatusApplicationId(getSezStatusApplicationId());

		sezOccupantExistingProposedProjectBriefInfoImpl.resetOriginalValues();

		return sezOccupantExistingProposedProjectBriefInfoImpl;
	}

	@Override
	public SezOccupantExistingProposedProjectBriefInfo
		cloneWithOriginalValues() {

		SezOccupantExistingProposedProjectBriefInfoImpl
			sezOccupantExistingProposedProjectBriefInfoImpl =
				new SezOccupantExistingProposedProjectBriefInfoImpl();

		sezOccupantExistingProposedProjectBriefInfoImpl.setSezOccExistPorpId(
			this.<Long>getColumnOriginalValue("sezOccExistPorpId"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccBusinessDesc(
			this.<String>getColumnOriginalValue("occBusinessDesc"));
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccDeniedFreeZoneAppr(
				this.<String>getColumnOriginalValue("occDeniedFreeZoneAppr"));
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccDeniedFreeZoneApprDate(
				this.<Date>getColumnOriginalValue("occDeniedFreeZoneApprDate"));
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccDeniedFreeZoneApprType(
				this.<String>getColumnOriginalValue(
					"occDeniedFreeZoneApprType"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccFreeZoneLocation(
			this.<String>getColumnOriginalValue("occFreeZoneLocation"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSezDevLoc(
			this.<String>getColumnOriginalValue("occSezDevLoc"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSezDevLocDesc(
			this.<String>getColumnOriginalValue("occSezDevLocDesc"));
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccSubConcessionBuilding(
				this.<String>getColumnOriginalValue(
					"occSubConcessionBuilding"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSubConcessionTown(
			this.<String>getColumnOriginalValue("occSubConcessionTown"));
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccSubConcessionParish(
				this.<String>getColumnOriginalValue("occSubConcessionParish"));
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccCompleteSurveyTechDesc(
				this.<String>getColumnOriginalValue(
					"occCompleteSurveyTechDesc"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccNorthBoundaries(
			this.<String>getColumnOriginalValue("occNorthBoundaries"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccEastBoundaries(
			this.<String>getColumnOriginalValue("occEastBoundaries"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccWestBoundaries(
			this.<String>getColumnOriginalValue("occWestBoundaries"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSouthBoundaries(
			this.<String>getColumnOriginalValue("occSouthBoundaries"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccOwnership(
			this.<String>getColumnOriginalValue("occOwnership"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccLeaseYears(
			this.<String>getColumnOriginalValue("occLeaseYears"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccVolume(
			this.<String>getColumnOriginalValue("occVolume"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccFolio(
			this.<String>getColumnOriginalValue("occFolio"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccFloorNum(
			this.<String>getColumnOriginalValue("occFloorNum"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccUndertakenService(
			this.<String>getColumnOriginalValue("occUndertakenService"));
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setOccUndertakenManufacturing(
				this.<String>getColumnOriginalValue(
					"occUndertakenManufacturing"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSeaPortDistanceKM(
			this.<String>getColumnOriginalValue("occSeaPortDistanceKM"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccSeaPortDistanceMI(
			this.<String>getColumnOriginalValue("occSeaPortDistanceMI"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccAirportDistanceKM(
			this.<String>getColumnOriginalValue("occAirportDistanceKM"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccAirportDistanceMI(
			this.<String>getColumnOriginalValue("occAirportDistanceMI"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccRoadDistanceKM(
			this.<String>getColumnOriginalValue("occRoadDistanceKM"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccRoadDistanceMI(
			this.<String>getColumnOriginalValue("occRoadDistanceMI"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccRailDistanceKM(
			this.<String>getColumnOriginalValue("occRailDistanceKM"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccRailDistanceMI(
			this.<String>getColumnOriginalValue("occRailDistanceMI"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccCustomDistanceKM(
			this.<String>getColumnOriginalValue("occCustomDistanceKM"));
		sezOccupantExistingProposedProjectBriefInfoImpl.setOccCustomDistanceMI(
			this.<String>getColumnOriginalValue("occCustomDistanceMI"));
		sezOccupantExistingProposedProjectBriefInfoImpl.
			setSezStatusApplicationId(
				this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezOccupantExistingProposedProjectBriefInfoImpl;
	}

	@Override
	public int compareTo(
		SezOccupantExistingProposedProjectBriefInfo
			sezOccupantExistingProposedProjectBriefInfo) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(),
			sezOccupantExistingProposedProjectBriefInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezOccupantExistingProposedProjectBriefInfo)) {
			return false;
		}

		SezOccupantExistingProposedProjectBriefInfo
			sezOccupantExistingProposedProjectBriefInfo =
				(SezOccupantExistingProposedProjectBriefInfo)object;

		long primaryKey =
			sezOccupantExistingProposedProjectBriefInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezOccupantExistingProposedProjectBriefInfo>
		toCacheModel() {

		SezOccupantExistingProposedProjectBriefInfoCacheModel
			sezOccupantExistingProposedProjectBriefInfoCacheModel =
				new SezOccupantExistingProposedProjectBriefInfoCacheModel();

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			sezOccExistPorpId = getSezOccExistPorpId();

		sezOccupantExistingProposedProjectBriefInfoCacheModel.groupId =
			getGroupId();

		sezOccupantExistingProposedProjectBriefInfoCacheModel.companyId =
			getCompanyId();

		sezOccupantExistingProposedProjectBriefInfoCacheModel.userId =
			getUserId();

		sezOccupantExistingProposedProjectBriefInfoCacheModel.userName =
			getUserName();

		String userName =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.userName =
				null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.occBusinessDesc =
			getOccBusinessDesc();

		String occBusinessDesc =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occBusinessDesc;

		if ((occBusinessDesc != null) && (occBusinessDesc.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occBusinessDesc = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occDeniedFreeZoneAppr = getOccDeniedFreeZoneAppr();

		String occDeniedFreeZoneAppr =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occDeniedFreeZoneAppr;

		if ((occDeniedFreeZoneAppr != null) &&
			(occDeniedFreeZoneAppr.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occDeniedFreeZoneAppr = null;
		}

		Date occDeniedFreeZoneApprDate = getOccDeniedFreeZoneApprDate();

		if (occDeniedFreeZoneApprDate != null) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occDeniedFreeZoneApprDate = occDeniedFreeZoneApprDate.getTime();
		}
		else {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occDeniedFreeZoneApprDate = Long.MIN_VALUE;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occDeniedFreeZoneApprType = getOccDeniedFreeZoneApprType();

		String occDeniedFreeZoneApprType =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occDeniedFreeZoneApprType;

		if ((occDeniedFreeZoneApprType != null) &&
			(occDeniedFreeZoneApprType.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occDeniedFreeZoneApprType = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occFreeZoneLocation = getOccFreeZoneLocation();

		String occFreeZoneLocation =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occFreeZoneLocation;

		if ((occFreeZoneLocation != null) &&
			(occFreeZoneLocation.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occFreeZoneLocation = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.occSezDevLoc =
			getOccSezDevLoc();

		String occSezDevLoc =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occSezDevLoc;

		if ((occSezDevLoc != null) && (occSezDevLoc.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occSezDevLoc =
				null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.occSezDevLocDesc =
			getOccSezDevLocDesc();

		String occSezDevLocDesc =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSezDevLocDesc;

		if ((occSezDevLocDesc != null) && (occSezDevLocDesc.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSezDevLocDesc = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occSubConcessionBuilding = getOccSubConcessionBuilding();

		String occSubConcessionBuilding =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSubConcessionBuilding;

		if ((occSubConcessionBuilding != null) &&
			(occSubConcessionBuilding.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSubConcessionBuilding = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occSubConcessionTown = getOccSubConcessionTown();

		String occSubConcessionTown =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSubConcessionTown;

		if ((occSubConcessionTown != null) &&
			(occSubConcessionTown.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSubConcessionTown = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occSubConcessionParish = getOccSubConcessionParish();

		String occSubConcessionParish =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSubConcessionParish;

		if ((occSubConcessionParish != null) &&
			(occSubConcessionParish.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSubConcessionParish = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occCompleteSurveyTechDesc = getOccCompleteSurveyTechDesc();

		String occCompleteSurveyTechDesc =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occCompleteSurveyTechDesc;

		if ((occCompleteSurveyTechDesc != null) &&
			(occCompleteSurveyTechDesc.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occCompleteSurveyTechDesc = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occNorthBoundaries = getOccNorthBoundaries();

		String occNorthBoundaries =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occNorthBoundaries;

		if ((occNorthBoundaries != null) &&
			(occNorthBoundaries.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occNorthBoundaries = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occEastBoundaries = getOccEastBoundaries();

		String occEastBoundaries =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occEastBoundaries;

		if ((occEastBoundaries != null) && (occEastBoundaries.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occEastBoundaries = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occWestBoundaries = getOccWestBoundaries();

		String occWestBoundaries =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occWestBoundaries;

		if ((occWestBoundaries != null) && (occWestBoundaries.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occWestBoundaries = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occSouthBoundaries = getOccSouthBoundaries();

		String occSouthBoundaries =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSouthBoundaries;

		if ((occSouthBoundaries != null) &&
			(occSouthBoundaries.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSouthBoundaries = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.occOwnership =
			getOccOwnership();

		String occOwnership =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occOwnership;

		if ((occOwnership != null) && (occOwnership.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occOwnership =
				null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.occLeaseYears =
			getOccLeaseYears();

		String occLeaseYears =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occLeaseYears;

		if ((occLeaseYears != null) && (occLeaseYears.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occLeaseYears = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.occVolume =
			getOccVolume();

		String occVolume =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occVolume;

		if ((occVolume != null) && (occVolume.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occVolume =
				null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.occFolio =
			getOccFolio();

		String occFolio =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occFolio;

		if ((occFolio != null) && (occFolio.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occFolio =
				null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.occFloorNum =
			getOccFloorNum();

		String occFloorNum =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occFloorNum;

		if ((occFloorNum != null) && (occFloorNum.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.occFloorNum =
				null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occUndertakenService = getOccUndertakenService();

		String occUndertakenService =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occUndertakenService;

		if ((occUndertakenService != null) &&
			(occUndertakenService.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occUndertakenService = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occUndertakenManufacturing = getOccUndertakenManufacturing();

		String occUndertakenManufacturing =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occUndertakenManufacturing;

		if ((occUndertakenManufacturing != null) &&
			(occUndertakenManufacturing.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occUndertakenManufacturing = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occSeaPortDistanceKM = getOccSeaPortDistanceKM();

		String occSeaPortDistanceKM =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSeaPortDistanceKM;

		if ((occSeaPortDistanceKM != null) &&
			(occSeaPortDistanceKM.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSeaPortDistanceKM = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occSeaPortDistanceMI = getOccSeaPortDistanceMI();

		String occSeaPortDistanceMI =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSeaPortDistanceMI;

		if ((occSeaPortDistanceMI != null) &&
			(occSeaPortDistanceMI.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occSeaPortDistanceMI = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occAirportDistanceKM = getOccAirportDistanceKM();

		String occAirportDistanceKM =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occAirportDistanceKM;

		if ((occAirportDistanceKM != null) &&
			(occAirportDistanceKM.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occAirportDistanceKM = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occAirportDistanceMI = getOccAirportDistanceMI();

		String occAirportDistanceMI =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occAirportDistanceMI;

		if ((occAirportDistanceMI != null) &&
			(occAirportDistanceMI.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occAirportDistanceMI = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occRoadDistanceKM = getOccRoadDistanceKM();

		String occRoadDistanceKM =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occRoadDistanceKM;

		if ((occRoadDistanceKM != null) && (occRoadDistanceKM.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occRoadDistanceKM = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occRoadDistanceMI = getOccRoadDistanceMI();

		String occRoadDistanceMI =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occRoadDistanceMI;

		if ((occRoadDistanceMI != null) && (occRoadDistanceMI.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occRoadDistanceMI = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occRailDistanceKM = getOccRailDistanceKM();

		String occRailDistanceKM =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occRailDistanceKM;

		if ((occRailDistanceKM != null) && (occRailDistanceKM.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occRailDistanceKM = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occRailDistanceMI = getOccRailDistanceMI();

		String occRailDistanceMI =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occRailDistanceMI;

		if ((occRailDistanceMI != null) && (occRailDistanceMI.length() == 0)) {
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occRailDistanceMI = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occCustomDistanceKM = getOccCustomDistanceKM();

		String occCustomDistanceKM =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occCustomDistanceKM;

		if ((occCustomDistanceKM != null) &&
			(occCustomDistanceKM.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occCustomDistanceKM = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			occCustomDistanceMI = getOccCustomDistanceMI();

		String occCustomDistanceMI =
			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occCustomDistanceMI;

		if ((occCustomDistanceMI != null) &&
			(occCustomDistanceMI.length() == 0)) {

			sezOccupantExistingProposedProjectBriefInfoCacheModel.
				occCustomDistanceMI = null;
		}

		sezOccupantExistingProposedProjectBriefInfoCacheModel.
			sezStatusApplicationId = getSezStatusApplicationId();

		return sezOccupantExistingProposedProjectBriefInfoCacheModel;
	}

	@Override
	public String toString() {
		Map
			<String,
			 Function<SezOccupantExistingProposedProjectBriefInfo, Object>>
				attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String,
				 Function<SezOccupantExistingProposedProjectBriefInfo, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupantExistingProposedProjectBriefInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezOccupantExistingProposedProjectBriefInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SezOccupantExistingProposedProjectBriefInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SezOccupantExistingProposedProjectBriefInfo.class,
						ModelWrapper.class);

	}

	private long _sezOccExistPorpId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _occBusinessDesc;
	private String _occDeniedFreeZoneAppr;
	private Date _occDeniedFreeZoneApprDate;
	private String _occDeniedFreeZoneApprType;
	private String _occFreeZoneLocation;
	private String _occSezDevLoc;
	private String _occSezDevLocDesc;
	private String _occSubConcessionBuilding;
	private String _occSubConcessionTown;
	private String _occSubConcessionParish;
	private String _occCompleteSurveyTechDesc;
	private String _occNorthBoundaries;
	private String _occEastBoundaries;
	private String _occWestBoundaries;
	private String _occSouthBoundaries;
	private String _occOwnership;
	private String _occLeaseYears;
	private String _occVolume;
	private String _occFolio;
	private String _occFloorNum;
	private String _occUndertakenService;
	private String _occUndertakenManufacturing;
	private String _occSeaPortDistanceKM;
	private String _occSeaPortDistanceMI;
	private String _occAirportDistanceKM;
	private String _occAirportDistanceMI;
	private String _occRoadDistanceKM;
	private String _occRoadDistanceMI;
	private String _occRailDistanceKM;
	private String _occRailDistanceMI;
	private String _occCustomDistanceKM;
	private String _occCustomDistanceMI;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezOccupantExistingProposedProjectBriefInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply(
			(SezOccupantExistingProposedProjectBriefInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("sezOccExistPorpId", _sezOccExistPorpId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("occBusinessDesc", _occBusinessDesc);
		_columnOriginalValues.put(
			"occDeniedFreeZoneAppr", _occDeniedFreeZoneAppr);
		_columnOriginalValues.put(
			"occDeniedFreeZoneApprDate", _occDeniedFreeZoneApprDate);
		_columnOriginalValues.put(
			"occDeniedFreeZoneApprType", _occDeniedFreeZoneApprType);
		_columnOriginalValues.put("occFreeZoneLocation", _occFreeZoneLocation);
		_columnOriginalValues.put("occSezDevLoc", _occSezDevLoc);
		_columnOriginalValues.put("occSezDevLocDesc", _occSezDevLocDesc);
		_columnOriginalValues.put(
			"occSubConcessionBuilding", _occSubConcessionBuilding);
		_columnOriginalValues.put(
			"occSubConcessionTown", _occSubConcessionTown);
		_columnOriginalValues.put(
			"occSubConcessionParish", _occSubConcessionParish);
		_columnOriginalValues.put(
			"occCompleteSurveyTechDesc", _occCompleteSurveyTechDesc);
		_columnOriginalValues.put("occNorthBoundaries", _occNorthBoundaries);
		_columnOriginalValues.put("occEastBoundaries", _occEastBoundaries);
		_columnOriginalValues.put("occWestBoundaries", _occWestBoundaries);
		_columnOriginalValues.put("occSouthBoundaries", _occSouthBoundaries);
		_columnOriginalValues.put("occOwnership", _occOwnership);
		_columnOriginalValues.put("occLeaseYears", _occLeaseYears);
		_columnOriginalValues.put("occVolume", _occVolume);
		_columnOriginalValues.put("occFolio", _occFolio);
		_columnOriginalValues.put("occFloorNum", _occFloorNum);
		_columnOriginalValues.put(
			"occUndertakenService", _occUndertakenService);
		_columnOriginalValues.put(
			"occUndertakenManufacturing", _occUndertakenManufacturing);
		_columnOriginalValues.put(
			"occSeaPortDistanceKM", _occSeaPortDistanceKM);
		_columnOriginalValues.put(
			"occSeaPortDistanceMI", _occSeaPortDistanceMI);
		_columnOriginalValues.put(
			"occAirportDistanceKM", _occAirportDistanceKM);
		_columnOriginalValues.put(
			"occAirportDistanceMI", _occAirportDistanceMI);
		_columnOriginalValues.put("occRoadDistanceKM", _occRoadDistanceKM);
		_columnOriginalValues.put("occRoadDistanceMI", _occRoadDistanceMI);
		_columnOriginalValues.put("occRailDistanceKM", _occRailDistanceKM);
		_columnOriginalValues.put("occRailDistanceMI", _occRailDistanceMI);
		_columnOriginalValues.put("occCustomDistanceKM", _occCustomDistanceKM);
		_columnOriginalValues.put("occCustomDistanceMI", _occCustomDistanceMI);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezOccExistPorpId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("occBusinessDesc", 128L);

		columnBitmasks.put("occDeniedFreeZoneAppr", 256L);

		columnBitmasks.put("occDeniedFreeZoneApprDate", 512L);

		columnBitmasks.put("occDeniedFreeZoneApprType", 1024L);

		columnBitmasks.put("occFreeZoneLocation", 2048L);

		columnBitmasks.put("occSezDevLoc", 4096L);

		columnBitmasks.put("occSezDevLocDesc", 8192L);

		columnBitmasks.put("occSubConcessionBuilding", 16384L);

		columnBitmasks.put("occSubConcessionTown", 32768L);

		columnBitmasks.put("occSubConcessionParish", 65536L);

		columnBitmasks.put("occCompleteSurveyTechDesc", 131072L);

		columnBitmasks.put("occNorthBoundaries", 262144L);

		columnBitmasks.put("occEastBoundaries", 524288L);

		columnBitmasks.put("occWestBoundaries", 1048576L);

		columnBitmasks.put("occSouthBoundaries", 2097152L);

		columnBitmasks.put("occOwnership", 4194304L);

		columnBitmasks.put("occLeaseYears", 8388608L);

		columnBitmasks.put("occVolume", 16777216L);

		columnBitmasks.put("occFolio", 33554432L);

		columnBitmasks.put("occFloorNum", 67108864L);

		columnBitmasks.put("occUndertakenService", 134217728L);

		columnBitmasks.put("occUndertakenManufacturing", 268435456L);

		columnBitmasks.put("occSeaPortDistanceKM", 536870912L);

		columnBitmasks.put("occSeaPortDistanceMI", 1073741824L);

		columnBitmasks.put("occAirportDistanceKM", 2147483648L);

		columnBitmasks.put("occAirportDistanceMI", 4294967296L);

		columnBitmasks.put("occRoadDistanceKM", 8589934592L);

		columnBitmasks.put("occRoadDistanceMI", 17179869184L);

		columnBitmasks.put("occRailDistanceKM", 34359738368L);

		columnBitmasks.put("occRailDistanceMI", 68719476736L);

		columnBitmasks.put("occCustomDistanceKM", 137438953472L);

		columnBitmasks.put("occCustomDistanceMI", 274877906944L);

		columnBitmasks.put("sezStatusApplicationId", 549755813888L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezOccupantExistingProposedProjectBriefInfo _escapedModel;

}