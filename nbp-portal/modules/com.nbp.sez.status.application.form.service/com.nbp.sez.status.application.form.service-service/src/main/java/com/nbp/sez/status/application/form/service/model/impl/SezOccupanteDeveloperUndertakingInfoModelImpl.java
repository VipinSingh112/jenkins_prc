/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezOccupanteDeveloperUndertakingInfo;
import com.nbp.sez.status.application.form.service.model.SezOccupanteDeveloperUndertakingInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezOccupanteDeveloperUndertakingInfo service. Represents a row in the &quot;nbp_sez_occ_dev_under_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezOccupanteDeveloperUndertakingInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezOccupanteDeveloperUndertakingInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezOccupanteDeveloperUndertakingInfoImpl
 * @generated
 */
@JSON(strict = true)
public class SezOccupanteDeveloperUndertakingInfoModelImpl
	extends BaseModelImpl<SezOccupanteDeveloperUndertakingInfo>
	implements SezOccupanteDeveloperUndertakingInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez occupante developer undertaking info model instance should use the <code>SezOccupanteDeveloperUndertakingInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_occ_dev_under_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezOccDevUnderId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"occUndertakingDevName", Types.VARCHAR},
		{"occUndertakingApprLetter", Types.VARCHAR},
		{"occUndertakingDate", Types.TIMESTAMP},
		{"occUndertakingAgreeNum", Types.VARCHAR},
		{"occUndertakingAgreeDate", Types.TIMESTAMP},
		{"occUndertakingControlNum", Types.VARCHAR},
		{"occDevApplicantTitle", Types.VARCHAR},
		{"occDevApplicantName", Types.VARCHAR},
		{"occDevApplicantTele", Types.VARCHAR},
		{"occDevApplicantEmail", Types.VARCHAR},
		{"occDevApplicantSignDate", Types.TIMESTAMP},
		{"occDevPublicNotaryName", Types.VARCHAR},
		{"occDevPublicNotarySignDate", Types.TIMESTAMP},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezOccDevUnderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occUndertakingDevName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occUndertakingApprLetter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occUndertakingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occUndertakingAgreeNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occUndertakingAgreeDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occUndertakingControlNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDevApplicantTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDevApplicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDevApplicantTele", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDevApplicantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDevApplicantSignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occDevPublicNotaryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDevPublicNotarySignDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_occ_dev_under_info (sezOccDevUnderId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,occUndertakingDevName VARCHAR(75) null,occUndertakingApprLetter VARCHAR(75) null,occUndertakingDate DATE null,occUndertakingAgreeNum VARCHAR(75) null,occUndertakingAgreeDate DATE null,occUndertakingControlNum VARCHAR(75) null,occDevApplicantTitle VARCHAR(75) null,occDevApplicantName VARCHAR(75) null,occDevApplicantTele VARCHAR(75) null,occDevApplicantEmail VARCHAR(75) null,occDevApplicantSignDate DATE null,occDevPublicNotaryName VARCHAR(75) null,occDevPublicNotarySignDate DATE null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_occ_dev_under_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezOccupanteDeveloperUndertakingInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_occ_dev_under_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezOccupanteDeveloperUndertakingInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezOccDevUnderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezOccDevUnderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezOccDevUnderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezOccupanteDeveloperUndertakingInfo.class;
	}

	@Override
	public String getModelClassName() {
		return SezOccupanteDeveloperUndertakingInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SezOccupanteDeveloperUndertakingInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<SezOccupanteDeveloperUndertakingInfo, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupanteDeveloperUndertakingInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(SezOccupanteDeveloperUndertakingInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SezOccupanteDeveloperUndertakingInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezOccupanteDeveloperUndertakingInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezOccupanteDeveloperUndertakingInfo)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<SezOccupanteDeveloperUndertakingInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SezOccupanteDeveloperUndertakingInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<SezOccupanteDeveloperUndertakingInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<SezOccupanteDeveloperUndertakingInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function
							 <SezOccupanteDeveloperUndertakingInfo, Object>>();

			attributeGetterFunctions.put(
				"sezOccDevUnderId",
				SezOccupanteDeveloperUndertakingInfo::getSezOccDevUnderId);
			attributeGetterFunctions.put(
				"groupId", SezOccupanteDeveloperUndertakingInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId",
				SezOccupanteDeveloperUndertakingInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", SezOccupanteDeveloperUndertakingInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", SezOccupanteDeveloperUndertakingInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				SezOccupanteDeveloperUndertakingInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				SezOccupanteDeveloperUndertakingInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"occUndertakingDevName",
				SezOccupanteDeveloperUndertakingInfo::getOccUndertakingDevName);
			attributeGetterFunctions.put(
				"occUndertakingApprLetter",
				SezOccupanteDeveloperUndertakingInfo::
					getOccUndertakingApprLetter);
			attributeGetterFunctions.put(
				"occUndertakingDate",
				SezOccupanteDeveloperUndertakingInfo::getOccUndertakingDate);
			attributeGetterFunctions.put(
				"occUndertakingAgreeNum",
				SezOccupanteDeveloperUndertakingInfo::
					getOccUndertakingAgreeNum);
			attributeGetterFunctions.put(
				"occUndertakingAgreeDate",
				SezOccupanteDeveloperUndertakingInfo::
					getOccUndertakingAgreeDate);
			attributeGetterFunctions.put(
				"occUndertakingControlNum",
				SezOccupanteDeveloperUndertakingInfo::
					getOccUndertakingControlNum);
			attributeGetterFunctions.put(
				"occDevApplicantTitle",
				SezOccupanteDeveloperUndertakingInfo::getOccDevApplicantTitle);
			attributeGetterFunctions.put(
				"occDevApplicantName",
				SezOccupanteDeveloperUndertakingInfo::getOccDevApplicantName);
			attributeGetterFunctions.put(
				"occDevApplicantTele",
				SezOccupanteDeveloperUndertakingInfo::getOccDevApplicantTele);
			attributeGetterFunctions.put(
				"occDevApplicantEmail",
				SezOccupanteDeveloperUndertakingInfo::getOccDevApplicantEmail);
			attributeGetterFunctions.put(
				"occDevApplicantSignDate",
				SezOccupanteDeveloperUndertakingInfo::
					getOccDevApplicantSignDate);
			attributeGetterFunctions.put(
				"occDevPublicNotaryName",
				SezOccupanteDeveloperUndertakingInfo::
					getOccDevPublicNotaryName);
			attributeGetterFunctions.put(
				"occDevPublicNotarySignDate",
				SezOccupanteDeveloperUndertakingInfo::
					getOccDevPublicNotarySignDate);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezOccupanteDeveloperUndertakingInfo::
					getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<SezOccupanteDeveloperUndertakingInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SezOccupanteDeveloperUndertakingInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<SezOccupanteDeveloperUndertakingInfo, ?>>();

			attributeSetterBiConsumers.put(
				"sezOccDevUnderId",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Long>)
					SezOccupanteDeveloperUndertakingInfo::setSezOccDevUnderId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Long>)
					SezOccupanteDeveloperUndertakingInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Long>)
					SezOccupanteDeveloperUndertakingInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Long>)
					SezOccupanteDeveloperUndertakingInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Date>)
					SezOccupanteDeveloperUndertakingInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Date>)
					SezOccupanteDeveloperUndertakingInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"occUndertakingDevName",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccUndertakingDevName);
			attributeSetterBiConsumers.put(
				"occUndertakingApprLetter",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccUndertakingApprLetter);
			attributeSetterBiConsumers.put(
				"occUndertakingDate",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Date>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccUndertakingDate);
			attributeSetterBiConsumers.put(
				"occUndertakingAgreeNum",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccUndertakingAgreeNum);
			attributeSetterBiConsumers.put(
				"occUndertakingAgreeDate",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Date>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccUndertakingAgreeDate);
			attributeSetterBiConsumers.put(
				"occUndertakingControlNum",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccUndertakingControlNum);
			attributeSetterBiConsumers.put(
				"occDevApplicantTitle",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccDevApplicantTitle);
			attributeSetterBiConsumers.put(
				"occDevApplicantName",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccDevApplicantName);
			attributeSetterBiConsumers.put(
				"occDevApplicantTele",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccDevApplicantTele);
			attributeSetterBiConsumers.put(
				"occDevApplicantEmail",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccDevApplicantEmail);
			attributeSetterBiConsumers.put(
				"occDevApplicantSignDate",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Date>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccDevApplicantSignDate);
			attributeSetterBiConsumers.put(
				"occDevPublicNotaryName",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, String>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccDevPublicNotaryName);
			attributeSetterBiConsumers.put(
				"occDevPublicNotarySignDate",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Date>)
					SezOccupanteDeveloperUndertakingInfo::
						setOccDevPublicNotarySignDate);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezOccupanteDeveloperUndertakingInfo, Long>)
					SezOccupanteDeveloperUndertakingInfo::
						setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezOccDevUnderId() {
		return _sezOccDevUnderId;
	}

	@Override
	public void setSezOccDevUnderId(long sezOccDevUnderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezOccDevUnderId = sezOccDevUnderId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOccUndertakingDevName() {
		if (_occUndertakingDevName == null) {
			return "";
		}
		else {
			return _occUndertakingDevName;
		}
	}

	@Override
	public void setOccUndertakingDevName(String occUndertakingDevName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occUndertakingDevName = occUndertakingDevName;
	}

	@JSON
	@Override
	public String getOccUndertakingApprLetter() {
		if (_occUndertakingApprLetter == null) {
			return "";
		}
		else {
			return _occUndertakingApprLetter;
		}
	}

	@Override
	public void setOccUndertakingApprLetter(String occUndertakingApprLetter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occUndertakingApprLetter = occUndertakingApprLetter;
	}

	@JSON
	@Override
	public Date getOccUndertakingDate() {
		return _occUndertakingDate;
	}

	@Override
	public void setOccUndertakingDate(Date occUndertakingDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occUndertakingDate = occUndertakingDate;
	}

	@JSON
	@Override
	public String getOccUndertakingAgreeNum() {
		if (_occUndertakingAgreeNum == null) {
			return "";
		}
		else {
			return _occUndertakingAgreeNum;
		}
	}

	@Override
	public void setOccUndertakingAgreeNum(String occUndertakingAgreeNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occUndertakingAgreeNum = occUndertakingAgreeNum;
	}

	@JSON
	@Override
	public Date getOccUndertakingAgreeDate() {
		return _occUndertakingAgreeDate;
	}

	@Override
	public void setOccUndertakingAgreeDate(Date occUndertakingAgreeDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occUndertakingAgreeDate = occUndertakingAgreeDate;
	}

	@JSON
	@Override
	public String getOccUndertakingControlNum() {
		if (_occUndertakingControlNum == null) {
			return "";
		}
		else {
			return _occUndertakingControlNum;
		}
	}

	@Override
	public void setOccUndertakingControlNum(String occUndertakingControlNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occUndertakingControlNum = occUndertakingControlNum;
	}

	@JSON
	@Override
	public String getOccDevApplicantTitle() {
		if (_occDevApplicantTitle == null) {
			return "";
		}
		else {
			return _occDevApplicantTitle;
		}
	}

	@Override
	public void setOccDevApplicantTitle(String occDevApplicantTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDevApplicantTitle = occDevApplicantTitle;
	}

	@JSON
	@Override
	public String getOccDevApplicantName() {
		if (_occDevApplicantName == null) {
			return "";
		}
		else {
			return _occDevApplicantName;
		}
	}

	@Override
	public void setOccDevApplicantName(String occDevApplicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDevApplicantName = occDevApplicantName;
	}

	@JSON
	@Override
	public String getOccDevApplicantTele() {
		if (_occDevApplicantTele == null) {
			return "";
		}
		else {
			return _occDevApplicantTele;
		}
	}

	@Override
	public void setOccDevApplicantTele(String occDevApplicantTele) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDevApplicantTele = occDevApplicantTele;
	}

	@JSON
	@Override
	public String getOccDevApplicantEmail() {
		if (_occDevApplicantEmail == null) {
			return "";
		}
		else {
			return _occDevApplicantEmail;
		}
	}

	@Override
	public void setOccDevApplicantEmail(String occDevApplicantEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDevApplicantEmail = occDevApplicantEmail;
	}

	@JSON
	@Override
	public Date getOccDevApplicantSignDate() {
		return _occDevApplicantSignDate;
	}

	@Override
	public void setOccDevApplicantSignDate(Date occDevApplicantSignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDevApplicantSignDate = occDevApplicantSignDate;
	}

	@JSON
	@Override
	public String getOccDevPublicNotaryName() {
		if (_occDevPublicNotaryName == null) {
			return "";
		}
		else {
			return _occDevPublicNotaryName;
		}
	}

	@Override
	public void setOccDevPublicNotaryName(String occDevPublicNotaryName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDevPublicNotaryName = occDevPublicNotaryName;
	}

	@JSON
	@Override
	public Date getOccDevPublicNotarySignDate() {
		return _occDevPublicNotarySignDate;
	}

	@Override
	public void setOccDevPublicNotarySignDate(Date occDevPublicNotarySignDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDevPublicNotarySignDate = occDevPublicNotarySignDate;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(),
			SezOccupanteDeveloperUndertakingInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezOccupanteDeveloperUndertakingInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SezOccupanteDeveloperUndertakingInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezOccupanteDeveloperUndertakingInfoImpl
			sezOccupanteDeveloperUndertakingInfoImpl =
				new SezOccupanteDeveloperUndertakingInfoImpl();

		sezOccupanteDeveloperUndertakingInfoImpl.setSezOccDevUnderId(
			getSezOccDevUnderId());
		sezOccupanteDeveloperUndertakingInfoImpl.setGroupId(getGroupId());
		sezOccupanteDeveloperUndertakingInfoImpl.setCompanyId(getCompanyId());
		sezOccupanteDeveloperUndertakingInfoImpl.setUserId(getUserId());
		sezOccupanteDeveloperUndertakingInfoImpl.setUserName(getUserName());
		sezOccupanteDeveloperUndertakingInfoImpl.setCreateDate(getCreateDate());
		sezOccupanteDeveloperUndertakingInfoImpl.setModifiedDate(
			getModifiedDate());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingDevName(
			getOccUndertakingDevName());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingApprLetter(
			getOccUndertakingApprLetter());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingDate(
			getOccUndertakingDate());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingAgreeNum(
			getOccUndertakingAgreeNum());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingAgreeDate(
			getOccUndertakingAgreeDate());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingControlNum(
			getOccUndertakingControlNum());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantTitle(
			getOccDevApplicantTitle());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantName(
			getOccDevApplicantName());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantTele(
			getOccDevApplicantTele());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantEmail(
			getOccDevApplicantEmail());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantSignDate(
			getOccDevApplicantSignDate());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevPublicNotaryName(
			getOccDevPublicNotaryName());
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevPublicNotarySignDate(
			getOccDevPublicNotarySignDate());
		sezOccupanteDeveloperUndertakingInfoImpl.setSezStatusApplicationId(
			getSezStatusApplicationId());

		sezOccupanteDeveloperUndertakingInfoImpl.resetOriginalValues();

		return sezOccupanteDeveloperUndertakingInfoImpl;
	}

	@Override
	public SezOccupanteDeveloperUndertakingInfo cloneWithOriginalValues() {
		SezOccupanteDeveloperUndertakingInfoImpl
			sezOccupanteDeveloperUndertakingInfoImpl =
				new SezOccupanteDeveloperUndertakingInfoImpl();

		sezOccupanteDeveloperUndertakingInfoImpl.setSezOccDevUnderId(
			this.<Long>getColumnOriginalValue("sezOccDevUnderId"));
		sezOccupanteDeveloperUndertakingInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezOccupanteDeveloperUndertakingInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezOccupanteDeveloperUndertakingInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezOccupanteDeveloperUndertakingInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezOccupanteDeveloperUndertakingInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezOccupanteDeveloperUndertakingInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingDevName(
			this.<String>getColumnOriginalValue("occUndertakingDevName"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingApprLetter(
			this.<String>getColumnOriginalValue("occUndertakingApprLetter"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingDate(
			this.<Date>getColumnOriginalValue("occUndertakingDate"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingAgreeNum(
			this.<String>getColumnOriginalValue("occUndertakingAgreeNum"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingAgreeDate(
			this.<Date>getColumnOriginalValue("occUndertakingAgreeDate"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccUndertakingControlNum(
			this.<String>getColumnOriginalValue("occUndertakingControlNum"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantTitle(
			this.<String>getColumnOriginalValue("occDevApplicantTitle"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantName(
			this.<String>getColumnOriginalValue("occDevApplicantName"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantTele(
			this.<String>getColumnOriginalValue("occDevApplicantTele"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantEmail(
			this.<String>getColumnOriginalValue("occDevApplicantEmail"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevApplicantSignDate(
			this.<Date>getColumnOriginalValue("occDevApplicantSignDate"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevPublicNotaryName(
			this.<String>getColumnOriginalValue("occDevPublicNotaryName"));
		sezOccupanteDeveloperUndertakingInfoImpl.setOccDevPublicNotarySignDate(
			this.<Date>getColumnOriginalValue("occDevPublicNotarySignDate"));
		sezOccupanteDeveloperUndertakingInfoImpl.setSezStatusApplicationId(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezOccupanteDeveloperUndertakingInfoImpl;
	}

	@Override
	public int compareTo(
		SezOccupanteDeveloperUndertakingInfo
			sezOccupanteDeveloperUndertakingInfo) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(),
			sezOccupanteDeveloperUndertakingInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezOccupanteDeveloperUndertakingInfo)) {
			return false;
		}

		SezOccupanteDeveloperUndertakingInfo
			sezOccupanteDeveloperUndertakingInfo =
				(SezOccupanteDeveloperUndertakingInfo)object;

		long primaryKey = sezOccupanteDeveloperUndertakingInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezOccupanteDeveloperUndertakingInfo> toCacheModel() {
		SezOccupanteDeveloperUndertakingInfoCacheModel
			sezOccupanteDeveloperUndertakingInfoCacheModel =
				new SezOccupanteDeveloperUndertakingInfoCacheModel();

		sezOccupanteDeveloperUndertakingInfoCacheModel.sezOccDevUnderId =
			getSezOccDevUnderId();

		sezOccupanteDeveloperUndertakingInfoCacheModel.groupId = getGroupId();

		sezOccupanteDeveloperUndertakingInfoCacheModel.companyId =
			getCompanyId();

		sezOccupanteDeveloperUndertakingInfoCacheModel.userId = getUserId();

		sezOccupanteDeveloperUndertakingInfoCacheModel.userName = getUserName();

		String userName =
			sezOccupanteDeveloperUndertakingInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezOccupanteDeveloperUndertakingInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezOccupanteDeveloperUndertakingInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			sezOccupanteDeveloperUndertakingInfoCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezOccupanteDeveloperUndertakingInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sezOccupanteDeveloperUndertakingInfoCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.occUndertakingDevName =
			getOccUndertakingDevName();

		String occUndertakingDevName =
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingDevName;

		if ((occUndertakingDevName != null) &&
			(occUndertakingDevName.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingDevName = null;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.
			occUndertakingApprLetter = getOccUndertakingApprLetter();

		String occUndertakingApprLetter =
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingApprLetter;

		if ((occUndertakingApprLetter != null) &&
			(occUndertakingApprLetter.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingApprLetter = null;
		}

		Date occUndertakingDate = getOccUndertakingDate();

		if (occUndertakingDate != null) {
			sezOccupanteDeveloperUndertakingInfoCacheModel.occUndertakingDate =
				occUndertakingDate.getTime();
		}
		else {
			sezOccupanteDeveloperUndertakingInfoCacheModel.occUndertakingDate =
				Long.MIN_VALUE;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.occUndertakingAgreeNum =
			getOccUndertakingAgreeNum();

		String occUndertakingAgreeNum =
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingAgreeNum;

		if ((occUndertakingAgreeNum != null) &&
			(occUndertakingAgreeNum.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingAgreeNum = null;
		}

		Date occUndertakingAgreeDate = getOccUndertakingAgreeDate();

		if (occUndertakingAgreeDate != null) {
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingAgreeDate = occUndertakingAgreeDate.getTime();
		}
		else {
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingAgreeDate = Long.MIN_VALUE;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.
			occUndertakingControlNum = getOccUndertakingControlNum();

		String occUndertakingControlNum =
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingControlNum;

		if ((occUndertakingControlNum != null) &&
			(occUndertakingControlNum.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occUndertakingControlNum = null;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantTitle =
			getOccDevApplicantTitle();

		String occDevApplicantTitle =
			sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantTitle;

		if ((occDevApplicantTitle != null) &&
			(occDevApplicantTitle.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occDevApplicantTitle = null;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantName =
			getOccDevApplicantName();

		String occDevApplicantName =
			sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantName;

		if ((occDevApplicantName != null) &&
			(occDevApplicantName.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantName =
				null;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantTele =
			getOccDevApplicantTele();

		String occDevApplicantTele =
			sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantTele;

		if ((occDevApplicantTele != null) &&
			(occDevApplicantTele.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantTele =
				null;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantEmail =
			getOccDevApplicantEmail();

		String occDevApplicantEmail =
			sezOccupanteDeveloperUndertakingInfoCacheModel.occDevApplicantEmail;

		if ((occDevApplicantEmail != null) &&
			(occDevApplicantEmail.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occDevApplicantEmail = null;
		}

		Date occDevApplicantSignDate = getOccDevApplicantSignDate();

		if (occDevApplicantSignDate != null) {
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occDevApplicantSignDate = occDevApplicantSignDate.getTime();
		}
		else {
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occDevApplicantSignDate = Long.MIN_VALUE;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.occDevPublicNotaryName =
			getOccDevPublicNotaryName();

		String occDevPublicNotaryName =
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occDevPublicNotaryName;

		if ((occDevPublicNotaryName != null) &&
			(occDevPublicNotaryName.length() == 0)) {

			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occDevPublicNotaryName = null;
		}

		Date occDevPublicNotarySignDate = getOccDevPublicNotarySignDate();

		if (occDevPublicNotarySignDate != null) {
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occDevPublicNotarySignDate =
					occDevPublicNotarySignDate.getTime();
		}
		else {
			sezOccupanteDeveloperUndertakingInfoCacheModel.
				occDevPublicNotarySignDate = Long.MIN_VALUE;
		}

		sezOccupanteDeveloperUndertakingInfoCacheModel.sezStatusApplicationId =
			getSezStatusApplicationId();

		return sezOccupanteDeveloperUndertakingInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SezOccupanteDeveloperUndertakingInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<SezOccupanteDeveloperUndertakingInfo, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupanteDeveloperUndertakingInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezOccupanteDeveloperUndertakingInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SezOccupanteDeveloperUndertakingInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SezOccupanteDeveloperUndertakingInfo.class,
						ModelWrapper.class);

	}

	private long _sezOccDevUnderId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _occUndertakingDevName;
	private String _occUndertakingApprLetter;
	private Date _occUndertakingDate;
	private String _occUndertakingAgreeNum;
	private Date _occUndertakingAgreeDate;
	private String _occUndertakingControlNum;
	private String _occDevApplicantTitle;
	private String _occDevApplicantName;
	private String _occDevApplicantTele;
	private String _occDevApplicantEmail;
	private Date _occDevApplicantSignDate;
	private String _occDevPublicNotaryName;
	private Date _occDevPublicNotarySignDate;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezOccupanteDeveloperUndertakingInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SezOccupanteDeveloperUndertakingInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("sezOccDevUnderId", _sezOccDevUnderId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"occUndertakingDevName", _occUndertakingDevName);
		_columnOriginalValues.put(
			"occUndertakingApprLetter", _occUndertakingApprLetter);
		_columnOriginalValues.put("occUndertakingDate", _occUndertakingDate);
		_columnOriginalValues.put(
			"occUndertakingAgreeNum", _occUndertakingAgreeNum);
		_columnOriginalValues.put(
			"occUndertakingAgreeDate", _occUndertakingAgreeDate);
		_columnOriginalValues.put(
			"occUndertakingControlNum", _occUndertakingControlNum);
		_columnOriginalValues.put(
			"occDevApplicantTitle", _occDevApplicantTitle);
		_columnOriginalValues.put("occDevApplicantName", _occDevApplicantName);
		_columnOriginalValues.put("occDevApplicantTele", _occDevApplicantTele);
		_columnOriginalValues.put(
			"occDevApplicantEmail", _occDevApplicantEmail);
		_columnOriginalValues.put(
			"occDevApplicantSignDate", _occDevApplicantSignDate);
		_columnOriginalValues.put(
			"occDevPublicNotaryName", _occDevPublicNotaryName);
		_columnOriginalValues.put(
			"occDevPublicNotarySignDate", _occDevPublicNotarySignDate);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezOccDevUnderId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("occUndertakingDevName", 128L);

		columnBitmasks.put("occUndertakingApprLetter", 256L);

		columnBitmasks.put("occUndertakingDate", 512L);

		columnBitmasks.put("occUndertakingAgreeNum", 1024L);

		columnBitmasks.put("occUndertakingAgreeDate", 2048L);

		columnBitmasks.put("occUndertakingControlNum", 4096L);

		columnBitmasks.put("occDevApplicantTitle", 8192L);

		columnBitmasks.put("occDevApplicantName", 16384L);

		columnBitmasks.put("occDevApplicantTele", 32768L);

		columnBitmasks.put("occDevApplicantEmail", 65536L);

		columnBitmasks.put("occDevApplicantSignDate", 131072L);

		columnBitmasks.put("occDevPublicNotaryName", 262144L);

		columnBitmasks.put("occDevPublicNotarySignDate", 524288L);

		columnBitmasks.put("sezStatusApplicationId", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezOccupanteDeveloperUndertakingInfo _escapedModel;

}