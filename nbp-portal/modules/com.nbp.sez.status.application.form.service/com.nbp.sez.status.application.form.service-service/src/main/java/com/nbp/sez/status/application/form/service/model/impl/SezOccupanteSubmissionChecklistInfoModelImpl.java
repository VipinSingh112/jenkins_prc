/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezOccupanteSubmissionChecklistInfo;
import com.nbp.sez.status.application.form.service.model.SezOccupanteSubmissionChecklistInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezOccupanteSubmissionChecklistInfo service. Represents a row in the &quot;nbp_sez_occ_sub_check_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezOccupanteSubmissionChecklistInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezOccupanteSubmissionChecklistInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezOccupanteSubmissionChecklistInfoImpl
 * @generated
 */
@JSON(strict = true)
public class SezOccupanteSubmissionChecklistInfoModelImpl
	extends BaseModelImpl<SezOccupanteSubmissionChecklistInfo>
	implements SezOccupanteSubmissionChecklistInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez occupante submission checklist info model instance should use the <code>SezOccupanteSubmissionChecklistInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_occ_sub_check_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezOccCheckSubmitId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"occNameReq", Types.VARCHAR},
		{"occDateReq", Types.VARCHAR}, {"occGeneral", Types.VARCHAR},
		{"occComInfoRequest", Types.VARCHAR},
		{"occSwanStateRequest", Types.VARCHAR},
		{"occSelectedRequest", Types.VARCHAR},
		{"occSelectedFacilityRequest", Types.VARCHAR},
		{"occSelectedApprovals", Types.VARCHAR},
		{"occSelectedSecurityRequest", Types.VARCHAR},
		{"occSelectedSDetailedBussiness", Types.VARCHAR},
		{"occPaidShareCapProof", Types.VARCHAR},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezOccCheckSubmitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occNameReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occDateReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occGeneral", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occComInfoRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSwanStateRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSelectedRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSelectedFacilityRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSelectedApprovals", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSelectedSecurityRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occSelectedSDetailedBussiness", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occPaidShareCapProof", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_occ_sub_check_info (sezOccCheckSubmitId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,occNameReq VARCHAR(1000) null,occDateReq VARCHAR(1000) null,occGeneral VARCHAR(1000) null,occComInfoRequest VARCHAR(1000) null,occSwanStateRequest VARCHAR(1000) null,occSelectedRequest VARCHAR(1000) null,occSelectedFacilityRequest VARCHAR(1000) null,occSelectedApprovals VARCHAR(1000) null,occSelectedSecurityRequest VARCHAR(1000) null,occSelectedSDetailedBussiness VARCHAR(1000) null,occPaidShareCapProof VARCHAR(1000) null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_occ_sub_check_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezOccupanteSubmissionChecklistInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_occ_sub_check_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezOccupanteSubmissionChecklistInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezOccCheckSubmitId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezOccCheckSubmitId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezOccCheckSubmitId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezOccupanteSubmissionChecklistInfo.class;
	}

	@Override
	public String getModelClassName() {
		return SezOccupanteSubmissionChecklistInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SezOccupanteSubmissionChecklistInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<SezOccupanteSubmissionChecklistInfo, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupanteSubmissionChecklistInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(SezOccupanteSubmissionChecklistInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SezOccupanteSubmissionChecklistInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezOccupanteSubmissionChecklistInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezOccupanteSubmissionChecklistInfo)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<SezOccupanteSubmissionChecklistInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SezOccupanteSubmissionChecklistInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<SezOccupanteSubmissionChecklistInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<SezOccupanteSubmissionChecklistInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function
							 <SezOccupanteSubmissionChecklistInfo, Object>>();

			attributeGetterFunctions.put(
				"sezOccCheckSubmitId",
				SezOccupanteSubmissionChecklistInfo::getSezOccCheckSubmitId);
			attributeGetterFunctions.put(
				"groupId", SezOccupanteSubmissionChecklistInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", SezOccupanteSubmissionChecklistInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", SezOccupanteSubmissionChecklistInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", SezOccupanteSubmissionChecklistInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				SezOccupanteSubmissionChecklistInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				SezOccupanteSubmissionChecklistInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"occNameReq",
				SezOccupanteSubmissionChecklistInfo::getOccNameReq);
			attributeGetterFunctions.put(
				"occDateReq",
				SezOccupanteSubmissionChecklistInfo::getOccDateReq);
			attributeGetterFunctions.put(
				"occGeneral",
				SezOccupanteSubmissionChecklistInfo::getOccGeneral);
			attributeGetterFunctions.put(
				"occComInfoRequest",
				SezOccupanteSubmissionChecklistInfo::getOccComInfoRequest);
			attributeGetterFunctions.put(
				"occSwanStateRequest",
				SezOccupanteSubmissionChecklistInfo::getOccSwanStateRequest);
			attributeGetterFunctions.put(
				"occSelectedRequest",
				SezOccupanteSubmissionChecklistInfo::getOccSelectedRequest);
			attributeGetterFunctions.put(
				"occSelectedFacilityRequest",
				SezOccupanteSubmissionChecklistInfo::
					getOccSelectedFacilityRequest);
			attributeGetterFunctions.put(
				"occSelectedApprovals",
				SezOccupanteSubmissionChecklistInfo::getOccSelectedApprovals);
			attributeGetterFunctions.put(
				"occSelectedSecurityRequest",
				SezOccupanteSubmissionChecklistInfo::
					getOccSelectedSecurityRequest);
			attributeGetterFunctions.put(
				"occSelectedSDetailedBussiness",
				SezOccupanteSubmissionChecklistInfo::
					getOccSelectedSDetailedBussiness);
			attributeGetterFunctions.put(
				"occPaidShareCapProof",
				SezOccupanteSubmissionChecklistInfo::getOccPaidShareCapProof);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezOccupanteSubmissionChecklistInfo::getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<SezOccupanteSubmissionChecklistInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SezOccupanteSubmissionChecklistInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<SezOccupanteSubmissionChecklistInfo, ?>>();

			attributeSetterBiConsumers.put(
				"sezOccCheckSubmitId",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, Long>)
					SezOccupanteSubmissionChecklistInfo::
						setSezOccCheckSubmitId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, Long>)
					SezOccupanteSubmissionChecklistInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, Long>)
					SezOccupanteSubmissionChecklistInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, Long>)
					SezOccupanteSubmissionChecklistInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, Date>)
					SezOccupanteSubmissionChecklistInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, Date>)
					SezOccupanteSubmissionChecklistInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"occNameReq",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::setOccNameReq);
			attributeSetterBiConsumers.put(
				"occDateReq",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::setOccDateReq);
			attributeSetterBiConsumers.put(
				"occGeneral",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::setOccGeneral);
			attributeSetterBiConsumers.put(
				"occComInfoRequest",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::setOccComInfoRequest);
			attributeSetterBiConsumers.put(
				"occSwanStateRequest",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::
						setOccSwanStateRequest);
			attributeSetterBiConsumers.put(
				"occSelectedRequest",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::setOccSelectedRequest);
			attributeSetterBiConsumers.put(
				"occSelectedFacilityRequest",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::
						setOccSelectedFacilityRequest);
			attributeSetterBiConsumers.put(
				"occSelectedApprovals",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::
						setOccSelectedApprovals);
			attributeSetterBiConsumers.put(
				"occSelectedSecurityRequest",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::
						setOccSelectedSecurityRequest);
			attributeSetterBiConsumers.put(
				"occSelectedSDetailedBussiness",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::
						setOccSelectedSDetailedBussiness);
			attributeSetterBiConsumers.put(
				"occPaidShareCapProof",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, String>)
					SezOccupanteSubmissionChecklistInfo::
						setOccPaidShareCapProof);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezOccupanteSubmissionChecklistInfo, Long>)
					SezOccupanteSubmissionChecklistInfo::
						setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezOccCheckSubmitId() {
		return _sezOccCheckSubmitId;
	}

	@Override
	public void setSezOccCheckSubmitId(long sezOccCheckSubmitId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezOccCheckSubmitId = sezOccCheckSubmitId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOccNameReq() {
		if (_occNameReq == null) {
			return "";
		}
		else {
			return _occNameReq;
		}
	}

	@Override
	public void setOccNameReq(String occNameReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occNameReq = occNameReq;
	}

	@JSON
	@Override
	public String getOccDateReq() {
		if (_occDateReq == null) {
			return "";
		}
		else {
			return _occDateReq;
		}
	}

	@Override
	public void setOccDateReq(String occDateReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occDateReq = occDateReq;
	}

	@JSON
	@Override
	public String getOccGeneral() {
		if (_occGeneral == null) {
			return "";
		}
		else {
			return _occGeneral;
		}
	}

	@Override
	public void setOccGeneral(String occGeneral) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occGeneral = occGeneral;
	}

	@JSON
	@Override
	public String getOccComInfoRequest() {
		if (_occComInfoRequest == null) {
			return "";
		}
		else {
			return _occComInfoRequest;
		}
	}

	@Override
	public void setOccComInfoRequest(String occComInfoRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occComInfoRequest = occComInfoRequest;
	}

	@JSON
	@Override
	public String getOccSwanStateRequest() {
		if (_occSwanStateRequest == null) {
			return "";
		}
		else {
			return _occSwanStateRequest;
		}
	}

	@Override
	public void setOccSwanStateRequest(String occSwanStateRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSwanStateRequest = occSwanStateRequest;
	}

	@JSON
	@Override
	public String getOccSelectedRequest() {
		if (_occSelectedRequest == null) {
			return "";
		}
		else {
			return _occSelectedRequest;
		}
	}

	@Override
	public void setOccSelectedRequest(String occSelectedRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSelectedRequest = occSelectedRequest;
	}

	@JSON
	@Override
	public String getOccSelectedFacilityRequest() {
		if (_occSelectedFacilityRequest == null) {
			return "";
		}
		else {
			return _occSelectedFacilityRequest;
		}
	}

	@Override
	public void setOccSelectedFacilityRequest(
		String occSelectedFacilityRequest) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSelectedFacilityRequest = occSelectedFacilityRequest;
	}

	@JSON
	@Override
	public String getOccSelectedApprovals() {
		if (_occSelectedApprovals == null) {
			return "";
		}
		else {
			return _occSelectedApprovals;
		}
	}

	@Override
	public void setOccSelectedApprovals(String occSelectedApprovals) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSelectedApprovals = occSelectedApprovals;
	}

	@JSON
	@Override
	public String getOccSelectedSecurityRequest() {
		if (_occSelectedSecurityRequest == null) {
			return "";
		}
		else {
			return _occSelectedSecurityRequest;
		}
	}

	@Override
	public void setOccSelectedSecurityRequest(
		String occSelectedSecurityRequest) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSelectedSecurityRequest = occSelectedSecurityRequest;
	}

	@JSON
	@Override
	public String getOccSelectedSDetailedBussiness() {
		if (_occSelectedSDetailedBussiness == null) {
			return "";
		}
		else {
			return _occSelectedSDetailedBussiness;
		}
	}

	@Override
	public void setOccSelectedSDetailedBussiness(
		String occSelectedSDetailedBussiness) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occSelectedSDetailedBussiness = occSelectedSDetailedBussiness;
	}

	@JSON
	@Override
	public String getOccPaidShareCapProof() {
		if (_occPaidShareCapProof == null) {
			return "";
		}
		else {
			return _occPaidShareCapProof;
		}
	}

	@Override
	public void setOccPaidShareCapProof(String occPaidShareCapProof) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occPaidShareCapProof = occPaidShareCapProof;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SezOccupanteSubmissionChecklistInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezOccupanteSubmissionChecklistInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SezOccupanteSubmissionChecklistInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezOccupanteSubmissionChecklistInfoImpl
			sezOccupanteSubmissionChecklistInfoImpl =
				new SezOccupanteSubmissionChecklistInfoImpl();

		sezOccupanteSubmissionChecklistInfoImpl.setSezOccCheckSubmitId(
			getSezOccCheckSubmitId());
		sezOccupanteSubmissionChecklistInfoImpl.setGroupId(getGroupId());
		sezOccupanteSubmissionChecklistInfoImpl.setCompanyId(getCompanyId());
		sezOccupanteSubmissionChecklistInfoImpl.setUserId(getUserId());
		sezOccupanteSubmissionChecklistInfoImpl.setUserName(getUserName());
		sezOccupanteSubmissionChecklistInfoImpl.setCreateDate(getCreateDate());
		sezOccupanteSubmissionChecklistInfoImpl.setModifiedDate(
			getModifiedDate());
		sezOccupanteSubmissionChecklistInfoImpl.setOccNameReq(getOccNameReq());
		sezOccupanteSubmissionChecklistInfoImpl.setOccDateReq(getOccDateReq());
		sezOccupanteSubmissionChecklistInfoImpl.setOccGeneral(getOccGeneral());
		sezOccupanteSubmissionChecklistInfoImpl.setOccComInfoRequest(
			getOccComInfoRequest());
		sezOccupanteSubmissionChecklistInfoImpl.setOccSwanStateRequest(
			getOccSwanStateRequest());
		sezOccupanteSubmissionChecklistInfoImpl.setOccSelectedRequest(
			getOccSelectedRequest());
		sezOccupanteSubmissionChecklistInfoImpl.setOccSelectedFacilityRequest(
			getOccSelectedFacilityRequest());
		sezOccupanteSubmissionChecklistInfoImpl.setOccSelectedApprovals(
			getOccSelectedApprovals());
		sezOccupanteSubmissionChecklistInfoImpl.setOccSelectedSecurityRequest(
			getOccSelectedSecurityRequest());
		sezOccupanteSubmissionChecklistInfoImpl.
			setOccSelectedSDetailedBussiness(
				getOccSelectedSDetailedBussiness());
		sezOccupanteSubmissionChecklistInfoImpl.setOccPaidShareCapProof(
			getOccPaidShareCapProof());
		sezOccupanteSubmissionChecklistInfoImpl.setSezStatusApplicationId(
			getSezStatusApplicationId());

		sezOccupanteSubmissionChecklistInfoImpl.resetOriginalValues();

		return sezOccupanteSubmissionChecklistInfoImpl;
	}

	@Override
	public SezOccupanteSubmissionChecklistInfo cloneWithOriginalValues() {
		SezOccupanteSubmissionChecklistInfoImpl
			sezOccupanteSubmissionChecklistInfoImpl =
				new SezOccupanteSubmissionChecklistInfoImpl();

		sezOccupanteSubmissionChecklistInfoImpl.setSezOccCheckSubmitId(
			this.<Long>getColumnOriginalValue("sezOccCheckSubmitId"));
		sezOccupanteSubmissionChecklistInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezOccupanteSubmissionChecklistInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezOccupanteSubmissionChecklistInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezOccupanteSubmissionChecklistInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezOccupanteSubmissionChecklistInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezOccupanteSubmissionChecklistInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccNameReq(
			this.<String>getColumnOriginalValue("occNameReq"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccDateReq(
			this.<String>getColumnOriginalValue("occDateReq"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccGeneral(
			this.<String>getColumnOriginalValue("occGeneral"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccComInfoRequest(
			this.<String>getColumnOriginalValue("occComInfoRequest"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccSwanStateRequest(
			this.<String>getColumnOriginalValue("occSwanStateRequest"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccSelectedRequest(
			this.<String>getColumnOriginalValue("occSelectedRequest"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccSelectedFacilityRequest(
			this.<String>getColumnOriginalValue("occSelectedFacilityRequest"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccSelectedApprovals(
			this.<String>getColumnOriginalValue("occSelectedApprovals"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccSelectedSecurityRequest(
			this.<String>getColumnOriginalValue("occSelectedSecurityRequest"));
		sezOccupanteSubmissionChecklistInfoImpl.
			setOccSelectedSDetailedBussiness(
				this.<String>getColumnOriginalValue(
					"occSelectedSDetailedBussiness"));
		sezOccupanteSubmissionChecklistInfoImpl.setOccPaidShareCapProof(
			this.<String>getColumnOriginalValue("occPaidShareCapProof"));
		sezOccupanteSubmissionChecklistInfoImpl.setSezStatusApplicationId(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezOccupanteSubmissionChecklistInfoImpl;
	}

	@Override
	public int compareTo(
		SezOccupanteSubmissionChecklistInfo
			sezOccupanteSubmissionChecklistInfo) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(),
			sezOccupanteSubmissionChecklistInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezOccupanteSubmissionChecklistInfo)) {
			return false;
		}

		SezOccupanteSubmissionChecklistInfo
			sezOccupanteSubmissionChecklistInfo =
				(SezOccupanteSubmissionChecklistInfo)object;

		long primaryKey = sezOccupanteSubmissionChecklistInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezOccupanteSubmissionChecklistInfo> toCacheModel() {
		SezOccupanteSubmissionChecklistInfoCacheModel
			sezOccupanteSubmissionChecklistInfoCacheModel =
				new SezOccupanteSubmissionChecklistInfoCacheModel();

		sezOccupanteSubmissionChecklistInfoCacheModel.sezOccCheckSubmitId =
			getSezOccCheckSubmitId();

		sezOccupanteSubmissionChecklistInfoCacheModel.groupId = getGroupId();

		sezOccupanteSubmissionChecklistInfoCacheModel.companyId =
			getCompanyId();

		sezOccupanteSubmissionChecklistInfoCacheModel.userId = getUserId();

		sezOccupanteSubmissionChecklistInfoCacheModel.userName = getUserName();

		String userName =
			sezOccupanteSubmissionChecklistInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezOccupanteSubmissionChecklistInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezOccupanteSubmissionChecklistInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			sezOccupanteSubmissionChecklistInfoCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezOccupanteSubmissionChecklistInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sezOccupanteSubmissionChecklistInfoCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.occNameReq =
			getOccNameReq();

		String occNameReq =
			sezOccupanteSubmissionChecklistInfoCacheModel.occNameReq;

		if ((occNameReq != null) && (occNameReq.length() == 0)) {
			sezOccupanteSubmissionChecklistInfoCacheModel.occNameReq = null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.occDateReq =
			getOccDateReq();

		String occDateReq =
			sezOccupanteSubmissionChecklistInfoCacheModel.occDateReq;

		if ((occDateReq != null) && (occDateReq.length() == 0)) {
			sezOccupanteSubmissionChecklistInfoCacheModel.occDateReq = null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.occGeneral =
			getOccGeneral();

		String occGeneral =
			sezOccupanteSubmissionChecklistInfoCacheModel.occGeneral;

		if ((occGeneral != null) && (occGeneral.length() == 0)) {
			sezOccupanteSubmissionChecklistInfoCacheModel.occGeneral = null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.occComInfoRequest =
			getOccComInfoRequest();

		String occComInfoRequest =
			sezOccupanteSubmissionChecklistInfoCacheModel.occComInfoRequest;

		if ((occComInfoRequest != null) && (occComInfoRequest.length() == 0)) {
			sezOccupanteSubmissionChecklistInfoCacheModel.occComInfoRequest =
				null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.occSwanStateRequest =
			getOccSwanStateRequest();

		String occSwanStateRequest =
			sezOccupanteSubmissionChecklistInfoCacheModel.occSwanStateRequest;

		if ((occSwanStateRequest != null) &&
			(occSwanStateRequest.length() == 0)) {

			sezOccupanteSubmissionChecklistInfoCacheModel.occSwanStateRequest =
				null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.occSelectedRequest =
			getOccSelectedRequest();

		String occSelectedRequest =
			sezOccupanteSubmissionChecklistInfoCacheModel.occSelectedRequest;

		if ((occSelectedRequest != null) &&
			(occSelectedRequest.length() == 0)) {

			sezOccupanteSubmissionChecklistInfoCacheModel.occSelectedRequest =
				null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.
			occSelectedFacilityRequest = getOccSelectedFacilityRequest();

		String occSelectedFacilityRequest =
			sezOccupanteSubmissionChecklistInfoCacheModel.
				occSelectedFacilityRequest;

		if ((occSelectedFacilityRequest != null) &&
			(occSelectedFacilityRequest.length() == 0)) {

			sezOccupanteSubmissionChecklistInfoCacheModel.
				occSelectedFacilityRequest = null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.occSelectedApprovals =
			getOccSelectedApprovals();

		String occSelectedApprovals =
			sezOccupanteSubmissionChecklistInfoCacheModel.occSelectedApprovals;

		if ((occSelectedApprovals != null) &&
			(occSelectedApprovals.length() == 0)) {

			sezOccupanteSubmissionChecklistInfoCacheModel.occSelectedApprovals =
				null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.
			occSelectedSecurityRequest = getOccSelectedSecurityRequest();

		String occSelectedSecurityRequest =
			sezOccupanteSubmissionChecklistInfoCacheModel.
				occSelectedSecurityRequest;

		if ((occSelectedSecurityRequest != null) &&
			(occSelectedSecurityRequest.length() == 0)) {

			sezOccupanteSubmissionChecklistInfoCacheModel.
				occSelectedSecurityRequest = null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.
			occSelectedSDetailedBussiness = getOccSelectedSDetailedBussiness();

		String occSelectedSDetailedBussiness =
			sezOccupanteSubmissionChecklistInfoCacheModel.
				occSelectedSDetailedBussiness;

		if ((occSelectedSDetailedBussiness != null) &&
			(occSelectedSDetailedBussiness.length() == 0)) {

			sezOccupanteSubmissionChecklistInfoCacheModel.
				occSelectedSDetailedBussiness = null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.occPaidShareCapProof =
			getOccPaidShareCapProof();

		String occPaidShareCapProof =
			sezOccupanteSubmissionChecklistInfoCacheModel.occPaidShareCapProof;

		if ((occPaidShareCapProof != null) &&
			(occPaidShareCapProof.length() == 0)) {

			sezOccupanteSubmissionChecklistInfoCacheModel.occPaidShareCapProof =
				null;
		}

		sezOccupanteSubmissionChecklistInfoCacheModel.sezStatusApplicationId =
			getSezStatusApplicationId();

		return sezOccupanteSubmissionChecklistInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SezOccupanteSubmissionChecklistInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<SezOccupanteSubmissionChecklistInfo, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupanteSubmissionChecklistInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezOccupanteSubmissionChecklistInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SezOccupanteSubmissionChecklistInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SezOccupanteSubmissionChecklistInfo.class,
						ModelWrapper.class);

	}

	private long _sezOccCheckSubmitId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _occNameReq;
	private String _occDateReq;
	private String _occGeneral;
	private String _occComInfoRequest;
	private String _occSwanStateRequest;
	private String _occSelectedRequest;
	private String _occSelectedFacilityRequest;
	private String _occSelectedApprovals;
	private String _occSelectedSecurityRequest;
	private String _occSelectedSDetailedBussiness;
	private String _occPaidShareCapProof;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezOccupanteSubmissionChecklistInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SezOccupanteSubmissionChecklistInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("sezOccCheckSubmitId", _sezOccCheckSubmitId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("occNameReq", _occNameReq);
		_columnOriginalValues.put("occDateReq", _occDateReq);
		_columnOriginalValues.put("occGeneral", _occGeneral);
		_columnOriginalValues.put("occComInfoRequest", _occComInfoRequest);
		_columnOriginalValues.put("occSwanStateRequest", _occSwanStateRequest);
		_columnOriginalValues.put("occSelectedRequest", _occSelectedRequest);
		_columnOriginalValues.put(
			"occSelectedFacilityRequest", _occSelectedFacilityRequest);
		_columnOriginalValues.put(
			"occSelectedApprovals", _occSelectedApprovals);
		_columnOriginalValues.put(
			"occSelectedSecurityRequest", _occSelectedSecurityRequest);
		_columnOriginalValues.put(
			"occSelectedSDetailedBussiness", _occSelectedSDetailedBussiness);
		_columnOriginalValues.put(
			"occPaidShareCapProof", _occPaidShareCapProof);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezOccCheckSubmitId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("occNameReq", 128L);

		columnBitmasks.put("occDateReq", 256L);

		columnBitmasks.put("occGeneral", 512L);

		columnBitmasks.put("occComInfoRequest", 1024L);

		columnBitmasks.put("occSwanStateRequest", 2048L);

		columnBitmasks.put("occSelectedRequest", 4096L);

		columnBitmasks.put("occSelectedFacilityRequest", 8192L);

		columnBitmasks.put("occSelectedApprovals", 16384L);

		columnBitmasks.put("occSelectedSecurityRequest", 32768L);

		columnBitmasks.put("occSelectedSDetailedBussiness", 65536L);

		columnBitmasks.put("occPaidShareCapProof", 131072L);

		columnBitmasks.put("sezStatusApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezOccupanteSubmissionChecklistInfo _escapedModel;

}