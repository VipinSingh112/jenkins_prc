/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezOccupantProposedAreaDevelopmentPlanInfo;
import com.nbp.sez.status.application.form.service.model.SezOccupantProposedAreaDevelopmentPlanInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezOccupantProposedAreaDevelopmentPlanInfo service. Represents a row in the &quot;nbp_sez_occ_prop_area_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezOccupantProposedAreaDevelopmentPlanInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezOccupantProposedAreaDevelopmentPlanInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezOccupantProposedAreaDevelopmentPlanInfoImpl
 * @generated
 */
@JSON(strict = true)
public class SezOccupantProposedAreaDevelopmentPlanInfoModelImpl
	extends BaseModelImpl<SezOccupantProposedAreaDevelopmentPlanInfo>
	implements SezOccupantProposedAreaDevelopmentPlanInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez occupant proposed area development plan info model instance should use the <code>SezOccupantProposedAreaDevelopmentPlanInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_occ_prop_area_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezOccPropAreaId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"occProcessingArea", Types.VARCHAR},
		{"occNonProcessingArea", Types.VARCHAR},
		{"occOfficeRequirement", Types.VARCHAR},
		{"occFactoryRequirement", Types.VARCHAR},
		{"otherBuildUpRequirement", Types.VARCHAR},
		{"occOtherAreaReqName", Types.VARCHAR},
		{"occOtherAreaRequirement", Types.VARCHAR},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezOccPropAreaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("occProcessingArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occNonProcessingArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occOfficeRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occFactoryRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherBuildUpRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occOtherAreaReqName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occOtherAreaRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_occ_prop_area_info (sezOccPropAreaId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,occProcessingArea VARCHAR(75) null,occNonProcessingArea VARCHAR(75) null,occOfficeRequirement VARCHAR(75) null,occFactoryRequirement VARCHAR(75) null,otherBuildUpRequirement VARCHAR(75) null,occOtherAreaReqName VARCHAR(75) null,occOtherAreaRequirement VARCHAR(75) null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_occ_prop_area_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezOccupantProposedAreaDevelopmentPlanInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_occ_prop_area_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezOccupantProposedAreaDevelopmentPlanInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezOccPropAreaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezOccPropAreaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezOccPropAreaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezOccupantProposedAreaDevelopmentPlanInfo.class;
	}

	@Override
	public String getModelClassName() {
		return SezOccupantProposedAreaDevelopmentPlanInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map
			<String,
			 Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
				attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String,
				 Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(SezOccupantProposedAreaDevelopmentPlanInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map
			<String,
			 BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
				attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezOccupantProposedAreaDevelopmentPlanInfo)this,
					entry.getValue());
			}
		}
	}

	public Map
		<String, Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
			getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map
		<String, BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
			getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String,
			 Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map
				<String,
				 Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
					attributeGetterFunctions =
						new LinkedHashMap
							<String,
							 Function
								 <SezOccupantProposedAreaDevelopmentPlanInfo,
								  Object>>();

			attributeGetterFunctions.put(
				"sezOccPropAreaId",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getSezOccPropAreaId);
			attributeGetterFunctions.put(
				"groupId",
				SezOccupantProposedAreaDevelopmentPlanInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId",
				SezOccupantProposedAreaDevelopmentPlanInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId",
				SezOccupantProposedAreaDevelopmentPlanInfo::getUserId);
			attributeGetterFunctions.put(
				"userName",
				SezOccupantProposedAreaDevelopmentPlanInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				SezOccupantProposedAreaDevelopmentPlanInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				SezOccupantProposedAreaDevelopmentPlanInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"occProcessingArea",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getOccProcessingArea);
			attributeGetterFunctions.put(
				"occNonProcessingArea",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getOccNonProcessingArea);
			attributeGetterFunctions.put(
				"occOfficeRequirement",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getOccOfficeRequirement);
			attributeGetterFunctions.put(
				"occFactoryRequirement",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getOccFactoryRequirement);
			attributeGetterFunctions.put(
				"otherBuildUpRequirement",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getOtherBuildUpRequirement);
			attributeGetterFunctions.put(
				"occOtherAreaReqName",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getOccOtherAreaReqName);
			attributeGetterFunctions.put(
				"occOtherAreaRequirement",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getOccOtherAreaRequirement);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezOccupantProposedAreaDevelopmentPlanInfo::
					getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String,
			 BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map
				<String,
				 BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, ?>>
					attributeSetterBiConsumers =
						new LinkedHashMap
							<String,
							 BiConsumer
								 <SezOccupantProposedAreaDevelopmentPlanInfo,
								  ?>>();

			attributeSetterBiConsumers.put(
				"sezOccPropAreaId",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Long>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setSezOccPropAreaId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Long>)
					SezOccupantProposedAreaDevelopmentPlanInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Long>)
					SezOccupantProposedAreaDevelopmentPlanInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Long>)
					SezOccupantProposedAreaDevelopmentPlanInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, String>)
					SezOccupantProposedAreaDevelopmentPlanInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Date>)
					SezOccupantProposedAreaDevelopmentPlanInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Date>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setModifiedDate);
			attributeSetterBiConsumers.put(
				"occProcessingArea",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, String>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setOccProcessingArea);
			attributeSetterBiConsumers.put(
				"occNonProcessingArea",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, String>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setOccNonProcessingArea);
			attributeSetterBiConsumers.put(
				"occOfficeRequirement",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, String>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setOccOfficeRequirement);
			attributeSetterBiConsumers.put(
				"occFactoryRequirement",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, String>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setOccFactoryRequirement);
			attributeSetterBiConsumers.put(
				"otherBuildUpRequirement",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, String>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setOtherBuildUpRequirement);
			attributeSetterBiConsumers.put(
				"occOtherAreaReqName",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, String>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setOccOtherAreaReqName);
			attributeSetterBiConsumers.put(
				"occOtherAreaRequirement",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, String>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setOccOtherAreaRequirement);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezOccupantProposedAreaDevelopmentPlanInfo, Long>)
					SezOccupantProposedAreaDevelopmentPlanInfo::
						setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezOccPropAreaId() {
		return _sezOccPropAreaId;
	}

	@Override
	public void setSezOccPropAreaId(long sezOccPropAreaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezOccPropAreaId = sezOccPropAreaId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOccProcessingArea() {
		if (_occProcessingArea == null) {
			return "";
		}
		else {
			return _occProcessingArea;
		}
	}

	@Override
	public void setOccProcessingArea(String occProcessingArea) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occProcessingArea = occProcessingArea;
	}

	@JSON
	@Override
	public String getOccNonProcessingArea() {
		if (_occNonProcessingArea == null) {
			return "";
		}
		else {
			return _occNonProcessingArea;
		}
	}

	@Override
	public void setOccNonProcessingArea(String occNonProcessingArea) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occNonProcessingArea = occNonProcessingArea;
	}

	@JSON
	@Override
	public String getOccOfficeRequirement() {
		if (_occOfficeRequirement == null) {
			return "";
		}
		else {
			return _occOfficeRequirement;
		}
	}

	@Override
	public void setOccOfficeRequirement(String occOfficeRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occOfficeRequirement = occOfficeRequirement;
	}

	@JSON
	@Override
	public String getOccFactoryRequirement() {
		if (_occFactoryRequirement == null) {
			return "";
		}
		else {
			return _occFactoryRequirement;
		}
	}

	@Override
	public void setOccFactoryRequirement(String occFactoryRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occFactoryRequirement = occFactoryRequirement;
	}

	@JSON
	@Override
	public String getOtherBuildUpRequirement() {
		if (_otherBuildUpRequirement == null) {
			return "";
		}
		else {
			return _otherBuildUpRequirement;
		}
	}

	@Override
	public void setOtherBuildUpRequirement(String otherBuildUpRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherBuildUpRequirement = otherBuildUpRequirement;
	}

	@JSON
	@Override
	public String getOccOtherAreaReqName() {
		if (_occOtherAreaReqName == null) {
			return "";
		}
		else {
			return _occOtherAreaReqName;
		}
	}

	@Override
	public void setOccOtherAreaReqName(String occOtherAreaReqName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occOtherAreaReqName = occOtherAreaReqName;
	}

	@JSON
	@Override
	public String getOccOtherAreaRequirement() {
		if (_occOtherAreaRequirement == null) {
			return "";
		}
		else {
			return _occOtherAreaRequirement;
		}
	}

	@Override
	public void setOccOtherAreaRequirement(String occOtherAreaRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occOtherAreaRequirement = occOtherAreaRequirement;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(),
			SezOccupantProposedAreaDevelopmentPlanInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezOccupantProposedAreaDevelopmentPlanInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function
				<InvocationHandler, SezOccupantProposedAreaDevelopmentPlanInfo>
					escapedModelProxyProviderFunction =
						EscapedModelProxyProviderFunctionHolder.
							_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezOccupantProposedAreaDevelopmentPlanInfoImpl
			sezOccupantProposedAreaDevelopmentPlanInfoImpl =
				new SezOccupantProposedAreaDevelopmentPlanInfoImpl();

		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setSezOccPropAreaId(
			getSezOccPropAreaId());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setGroupId(getGroupId());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setCompanyId(
			getCompanyId());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setUserId(getUserId());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setUserName(
			getUserName());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setCreateDate(
			getCreateDate());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setModifiedDate(
			getModifiedDate());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccProcessingArea(
			getOccProcessingArea());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccNonProcessingArea(
			getOccNonProcessingArea());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccOfficeRequirement(
			getOccOfficeRequirement());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccFactoryRequirement(
			getOccFactoryRequirement());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.
			setOtherBuildUpRequirement(getOtherBuildUpRequirement());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccOtherAreaReqName(
			getOccOtherAreaReqName());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.
			setOccOtherAreaRequirement(getOccOtherAreaRequirement());
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.
			setSezStatusApplicationId(getSezStatusApplicationId());

		sezOccupantProposedAreaDevelopmentPlanInfoImpl.resetOriginalValues();

		return sezOccupantProposedAreaDevelopmentPlanInfoImpl;
	}

	@Override
	public SezOccupantProposedAreaDevelopmentPlanInfo
		cloneWithOriginalValues() {

		SezOccupantProposedAreaDevelopmentPlanInfoImpl
			sezOccupantProposedAreaDevelopmentPlanInfoImpl =
				new SezOccupantProposedAreaDevelopmentPlanInfoImpl();

		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setSezOccPropAreaId(
			this.<Long>getColumnOriginalValue("sezOccPropAreaId"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccProcessingArea(
			this.<String>getColumnOriginalValue("occProcessingArea"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccNonProcessingArea(
			this.<String>getColumnOriginalValue("occNonProcessingArea"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccOfficeRequirement(
			this.<String>getColumnOriginalValue("occOfficeRequirement"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccFactoryRequirement(
			this.<String>getColumnOriginalValue("occFactoryRequirement"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.
			setOtherBuildUpRequirement(
				this.<String>getColumnOriginalValue("otherBuildUpRequirement"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.setOccOtherAreaReqName(
			this.<String>getColumnOriginalValue("occOtherAreaReqName"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.
			setOccOtherAreaRequirement(
				this.<String>getColumnOriginalValue("occOtherAreaRequirement"));
		sezOccupantProposedAreaDevelopmentPlanInfoImpl.
			setSezStatusApplicationId(
				this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezOccupantProposedAreaDevelopmentPlanInfoImpl;
	}

	@Override
	public int compareTo(
		SezOccupantProposedAreaDevelopmentPlanInfo
			sezOccupantProposedAreaDevelopmentPlanInfo) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(),
			sezOccupantProposedAreaDevelopmentPlanInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezOccupantProposedAreaDevelopmentPlanInfo)) {
			return false;
		}

		SezOccupantProposedAreaDevelopmentPlanInfo
			sezOccupantProposedAreaDevelopmentPlanInfo =
				(SezOccupantProposedAreaDevelopmentPlanInfo)object;

		long primaryKey =
			sezOccupantProposedAreaDevelopmentPlanInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezOccupantProposedAreaDevelopmentPlanInfo>
		toCacheModel() {

		SezOccupantProposedAreaDevelopmentPlanInfoCacheModel
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel =
				new SezOccupantProposedAreaDevelopmentPlanInfoCacheModel();

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.sezOccPropAreaId =
			getSezOccPropAreaId();

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.groupId =
			getGroupId();

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.companyId =
			getCompanyId();

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.userId =
			getUserId();

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.userName =
			getUserName();

		String userName =
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.userName =
				null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.occProcessingArea =
			getOccProcessingArea();

		String occProcessingArea =
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occProcessingArea;

		if ((occProcessingArea != null) && (occProcessingArea.length() == 0)) {
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occProcessingArea = null;
		}

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
			occNonProcessingArea = getOccNonProcessingArea();

		String occNonProcessingArea =
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occNonProcessingArea;

		if ((occNonProcessingArea != null) &&
			(occNonProcessingArea.length() == 0)) {

			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occNonProcessingArea = null;
		}

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
			occOfficeRequirement = getOccOfficeRequirement();

		String occOfficeRequirement =
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occOfficeRequirement;

		if ((occOfficeRequirement != null) &&
			(occOfficeRequirement.length() == 0)) {

			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occOfficeRequirement = null;
		}

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
			occFactoryRequirement = getOccFactoryRequirement();

		String occFactoryRequirement =
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occFactoryRequirement;

		if ((occFactoryRequirement != null) &&
			(occFactoryRequirement.length() == 0)) {

			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occFactoryRequirement = null;
		}

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
			otherBuildUpRequirement = getOtherBuildUpRequirement();

		String otherBuildUpRequirement =
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				otherBuildUpRequirement;

		if ((otherBuildUpRequirement != null) &&
			(otherBuildUpRequirement.length() == 0)) {

			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				otherBuildUpRequirement = null;
		}

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
			occOtherAreaReqName = getOccOtherAreaReqName();

		String occOtherAreaReqName =
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occOtherAreaReqName;

		if ((occOtherAreaReqName != null) &&
			(occOtherAreaReqName.length() == 0)) {

			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occOtherAreaReqName = null;
		}

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
			occOtherAreaRequirement = getOccOtherAreaRequirement();

		String occOtherAreaRequirement =
			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occOtherAreaRequirement;

		if ((occOtherAreaRequirement != null) &&
			(occOtherAreaRequirement.length() == 0)) {

			sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
				occOtherAreaRequirement = null;
		}

		sezOccupantProposedAreaDevelopmentPlanInfoCacheModel.
			sezStatusApplicationId = getSezStatusApplicationId();

		return sezOccupantProposedAreaDevelopmentPlanInfoCacheModel;
	}

	@Override
	public String toString() {
		Map
			<String,
			 Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
				attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String,
				 Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezOccupantProposedAreaDevelopmentPlanInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SezOccupantProposedAreaDevelopmentPlanInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SezOccupantProposedAreaDevelopmentPlanInfo.class,
						ModelWrapper.class);

	}

	private long _sezOccPropAreaId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _occProcessingArea;
	private String _occNonProcessingArea;
	private String _occOfficeRequirement;
	private String _occFactoryRequirement;
	private String _otherBuildUpRequirement;
	private String _occOtherAreaReqName;
	private String _occOtherAreaRequirement;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezOccupantProposedAreaDevelopmentPlanInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply(
			(SezOccupantProposedAreaDevelopmentPlanInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("sezOccPropAreaId", _sezOccPropAreaId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("occProcessingArea", _occProcessingArea);
		_columnOriginalValues.put(
			"occNonProcessingArea", _occNonProcessingArea);
		_columnOriginalValues.put(
			"occOfficeRequirement", _occOfficeRequirement);
		_columnOriginalValues.put(
			"occFactoryRequirement", _occFactoryRequirement);
		_columnOriginalValues.put(
			"otherBuildUpRequirement", _otherBuildUpRequirement);
		_columnOriginalValues.put("occOtherAreaReqName", _occOtherAreaReqName);
		_columnOriginalValues.put(
			"occOtherAreaRequirement", _occOtherAreaRequirement);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezOccPropAreaId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("occProcessingArea", 128L);

		columnBitmasks.put("occNonProcessingArea", 256L);

		columnBitmasks.put("occOfficeRequirement", 512L);

		columnBitmasks.put("occFactoryRequirement", 1024L);

		columnBitmasks.put("otherBuildUpRequirement", 2048L);

		columnBitmasks.put("occOtherAreaReqName", 4096L);

		columnBitmasks.put("occOtherAreaRequirement", 8192L);

		columnBitmasks.put("sezStatusApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezOccupantProposedAreaDevelopmentPlanInfo _escapedModel;

}