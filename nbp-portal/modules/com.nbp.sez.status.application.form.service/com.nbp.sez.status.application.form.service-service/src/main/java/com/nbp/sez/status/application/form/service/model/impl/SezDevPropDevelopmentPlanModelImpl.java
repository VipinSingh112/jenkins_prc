/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.sez.status.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.sez.status.application.form.service.model.SezDevPropDevelopmentPlan;
import com.nbp.sez.status.application.form.service.model.SezDevPropDevelopmentPlanModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SezDevPropDevelopmentPlan service. Represents a row in the &quot;nbp_sez_dev_Pro_develop_plan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SezDevPropDevelopmentPlanModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SezDevPropDevelopmentPlanImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SezDevPropDevelopmentPlanImpl
 * @generated
 */
@JSON(strict = true)
public class SezDevPropDevelopmentPlanModelImpl
	extends BaseModelImpl<SezDevPropDevelopmentPlan>
	implements SezDevPropDevelopmentPlanModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sez dev prop development plan model instance should use the <code>SezDevPropDevelopmentPlan</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_sez_dev_Pro_develop_plan";

	public static final Object[][] TABLE_COLUMNS = {
		{"sezDevPropDevelopmentPlanId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"existingBuilding", Types.VARCHAR},
		{"existingBuildingForBusiDetail", Types.VARCHAR},
		{"activitiesForSingleEntity", Types.VARCHAR}, {"volume", Types.VARCHAR},
		{"folio", Types.VARCHAR}, {"buildingNum", Types.VARCHAR},
		{"townCity", Types.VARCHAR}, {"zipCode", Types.VARCHAR},
		{"zoningClassification", Types.VARCHAR}, {"landUse", Types.VARCHAR},
		{"sezAreaHectares", Types.VARCHAR}, {"sezAreaAcres", Types.VARCHAR},
		{"customsHectares", Types.VARCHAR}, {"customsAcres", Types.VARCHAR},
		{"topography", Types.VARCHAR}, {"northBoundaries", Types.VARCHAR},
		{"eastBoundaries", Types.VARCHAR}, {"westBoundaries", Types.VARCHAR},
		{"southBoundaries", Types.VARCHAR},
		{"customLandMeasurement", Types.VARCHAR},
		{"customPercent", Types.VARCHAR},
		{"commonLandMeasurement", Types.VARCHAR},
		{"commonPercent", Types.VARCHAR},
		{"bufferLandMeasurement", Types.VARCHAR},
		{"bufferPercent", Types.VARCHAR},
		{"zoneLandMeasurement", Types.VARCHAR}, {"zonePercent", Types.VARCHAR},
		{"ResidentialLandMeasurement", Types.VARCHAR},
		{"ResidentialPercent", Types.VARCHAR},
		{"totalLandMeasurement", Types.VARCHAR},
		{"totalPercent", Types.VARCHAR}, {"industrialProcess", Types.VARCHAR},
		{"drinkingPurpose", Types.VARCHAR}, {"otherSpecify", Types.VARCHAR},
		{"totalRequirement", Types.VARCHAR},
		{"quantumAndNature", Types.VARCHAR},
		{"specifyWhetherOwn", Types.VARCHAR}, {"reqOfPower", Types.VARCHAR},
		{"mainRoadRowWidth", Types.VARCHAR},
		{"mainRoadTypeOfPavement", Types.VARCHAR},
		{"secondRowWidhth", Types.VARCHAR},
		{"secondTypeOfPavement", Types.VARCHAR},
		{"tertiaryRowWidhth", Types.VARCHAR},
		{"tertiaryTypeOfPavement", Types.VARCHAR},
		{"waterInstallationReq", Types.VARCHAR},
		{"powerInstallationReq", Types.VARCHAR},
		{"teleComInstallationReq", Types.VARCHAR},
		{"cctvInstallationReq", Types.VARCHAR},
		{"securityInterconnection", Types.VARCHAR},
		{"fireFightingInstallationReq", Types.VARCHAR},
		{"sezStatusApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sezDevPropDevelopmentPlanId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("existingBuilding", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("existingBuildingForBusiDetail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activitiesForSingleEntity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("volume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("folio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("buildingNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("townCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zoningClassification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("landUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezAreaHectares", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezAreaAcres", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customsHectares", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customsAcres", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("topography", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("northBoundaries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eastBoundaries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("westBoundaries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("southBoundaries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customLandMeasurement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customPercent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commonLandMeasurement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commonPercent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bufferLandMeasurement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bufferPercent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zoneLandMeasurement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zonePercent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ResidentialLandMeasurement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ResidentialPercent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalLandMeasurement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalPercent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("industrialProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("drinkingPurpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherSpecify", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantumAndNature", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specifyWhetherOwn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reqOfPower", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mainRoadRowWidth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mainRoadTypeOfPavement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondRowWidhth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondTypeOfPavement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tertiaryRowWidhth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tertiaryTypeOfPavement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("waterInstallationReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("powerInstallationReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("teleComInstallationReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cctvInstallationReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityInterconnection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fireFightingInstallationReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sezStatusApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_sez_dev_Pro_develop_plan (sezDevPropDevelopmentPlanId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,existingBuilding VARCHAR(75) null,existingBuildingForBusiDetail VARCHAR(75) null,activitiesForSingleEntity VARCHAR(75) null,volume VARCHAR(75) null,folio VARCHAR(75) null,buildingNum VARCHAR(75) null,townCity VARCHAR(75) null,zipCode VARCHAR(75) null,zoningClassification VARCHAR(75) null,landUse VARCHAR(75) null,sezAreaHectares VARCHAR(75) null,sezAreaAcres VARCHAR(75) null,customsHectares VARCHAR(75) null,customsAcres VARCHAR(75) null,topography VARCHAR(75) null,northBoundaries VARCHAR(75) null,eastBoundaries VARCHAR(75) null,westBoundaries VARCHAR(75) null,southBoundaries VARCHAR(75) null,customLandMeasurement VARCHAR(75) null,customPercent VARCHAR(75) null,commonLandMeasurement VARCHAR(75) null,commonPercent VARCHAR(75) null,bufferLandMeasurement VARCHAR(75) null,bufferPercent VARCHAR(75) null,zoneLandMeasurement VARCHAR(75) null,zonePercent VARCHAR(75) null,ResidentialLandMeasurement VARCHAR(75) null,ResidentialPercent VARCHAR(75) null,totalLandMeasurement VARCHAR(75) null,totalPercent VARCHAR(75) null,industrialProcess VARCHAR(75) null,drinkingPurpose VARCHAR(75) null,otherSpecify VARCHAR(75) null,totalRequirement VARCHAR(75) null,quantumAndNature VARCHAR(75) null,specifyWhetherOwn VARCHAR(75) null,reqOfPower VARCHAR(75) null,mainRoadRowWidth VARCHAR(75) null,mainRoadTypeOfPavement VARCHAR(75) null,secondRowWidhth VARCHAR(75) null,secondTypeOfPavement VARCHAR(75) null,tertiaryRowWidhth VARCHAR(75) null,tertiaryTypeOfPavement VARCHAR(75) null,waterInstallationReq VARCHAR(75) null,powerInstallationReq VARCHAR(75) null,teleComInstallationReq VARCHAR(75) null,cctvInstallationReq VARCHAR(75) null,securityInterconnection VARCHAR(75) null,fireFightingInstallationReq VARCHAR(75) null,sezStatusApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_sez_dev_Pro_develop_plan";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sezDevPropDevelopmentPlan.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_sez_dev_Pro_develop_plan.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SEZSTATUSAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SezDevPropDevelopmentPlanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sezDevPropDevelopmentPlanId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSezDevPropDevelopmentPlanId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sezDevPropDevelopmentPlanId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SezDevPropDevelopmentPlan.class;
	}

	@Override
	public String getModelClassName() {
		return SezDevPropDevelopmentPlan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SezDevPropDevelopmentPlan, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SezDevPropDevelopmentPlan, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezDevPropDevelopmentPlan, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SezDevPropDevelopmentPlan)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SezDevPropDevelopmentPlan, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SezDevPropDevelopmentPlan, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SezDevPropDevelopmentPlan)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SezDevPropDevelopmentPlan, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SezDevPropDevelopmentPlan, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<SezDevPropDevelopmentPlan, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<SezDevPropDevelopmentPlan, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<SezDevPropDevelopmentPlan, Object>>();

			attributeGetterFunctions.put(
				"sezDevPropDevelopmentPlanId",
				SezDevPropDevelopmentPlan::getSezDevPropDevelopmentPlanId);
			attributeGetterFunctions.put(
				"groupId", SezDevPropDevelopmentPlan::getGroupId);
			attributeGetterFunctions.put(
				"companyId", SezDevPropDevelopmentPlan::getCompanyId);
			attributeGetterFunctions.put(
				"userId", SezDevPropDevelopmentPlan::getUserId);
			attributeGetterFunctions.put(
				"userName", SezDevPropDevelopmentPlan::getUserName);
			attributeGetterFunctions.put(
				"createDate", SezDevPropDevelopmentPlan::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", SezDevPropDevelopmentPlan::getModifiedDate);
			attributeGetterFunctions.put(
				"existingBuilding",
				SezDevPropDevelopmentPlan::getExistingBuilding);
			attributeGetterFunctions.put(
				"existingBuildingForBusiDetail",
				SezDevPropDevelopmentPlan::getExistingBuildingForBusiDetail);
			attributeGetterFunctions.put(
				"activitiesForSingleEntity",
				SezDevPropDevelopmentPlan::getActivitiesForSingleEntity);
			attributeGetterFunctions.put(
				"volume", SezDevPropDevelopmentPlan::getVolume);
			attributeGetterFunctions.put(
				"folio", SezDevPropDevelopmentPlan::getFolio);
			attributeGetterFunctions.put(
				"buildingNum", SezDevPropDevelopmentPlan::getBuildingNum);
			attributeGetterFunctions.put(
				"townCity", SezDevPropDevelopmentPlan::getTownCity);
			attributeGetterFunctions.put(
				"zipCode", SezDevPropDevelopmentPlan::getZipCode);
			attributeGetterFunctions.put(
				"zoningClassification",
				SezDevPropDevelopmentPlan::getZoningClassification);
			attributeGetterFunctions.put(
				"landUse", SezDevPropDevelopmentPlan::getLandUse);
			attributeGetterFunctions.put(
				"sezAreaHectares",
				SezDevPropDevelopmentPlan::getSezAreaHectares);
			attributeGetterFunctions.put(
				"sezAreaAcres", SezDevPropDevelopmentPlan::getSezAreaAcres);
			attributeGetterFunctions.put(
				"customsHectares",
				SezDevPropDevelopmentPlan::getCustomsHectares);
			attributeGetterFunctions.put(
				"customsAcres", SezDevPropDevelopmentPlan::getCustomsAcres);
			attributeGetterFunctions.put(
				"topography", SezDevPropDevelopmentPlan::getTopography);
			attributeGetterFunctions.put(
				"northBoundaries",
				SezDevPropDevelopmentPlan::getNorthBoundaries);
			attributeGetterFunctions.put(
				"eastBoundaries", SezDevPropDevelopmentPlan::getEastBoundaries);
			attributeGetterFunctions.put(
				"westBoundaries", SezDevPropDevelopmentPlan::getWestBoundaries);
			attributeGetterFunctions.put(
				"southBoundaries",
				SezDevPropDevelopmentPlan::getSouthBoundaries);
			attributeGetterFunctions.put(
				"customLandMeasurement",
				SezDevPropDevelopmentPlan::getCustomLandMeasurement);
			attributeGetterFunctions.put(
				"customPercent", SezDevPropDevelopmentPlan::getCustomPercent);
			attributeGetterFunctions.put(
				"commonLandMeasurement",
				SezDevPropDevelopmentPlan::getCommonLandMeasurement);
			attributeGetterFunctions.put(
				"commonPercent", SezDevPropDevelopmentPlan::getCommonPercent);
			attributeGetterFunctions.put(
				"bufferLandMeasurement",
				SezDevPropDevelopmentPlan::getBufferLandMeasurement);
			attributeGetterFunctions.put(
				"bufferPercent", SezDevPropDevelopmentPlan::getBufferPercent);
			attributeGetterFunctions.put(
				"zoneLandMeasurement",
				SezDevPropDevelopmentPlan::getZoneLandMeasurement);
			attributeGetterFunctions.put(
				"zonePercent", SezDevPropDevelopmentPlan::getZonePercent);
			attributeGetterFunctions.put(
				"ResidentialLandMeasurement",
				SezDevPropDevelopmentPlan::getResidentialLandMeasurement);
			attributeGetterFunctions.put(
				"ResidentialPercent",
				SezDevPropDevelopmentPlan::getResidentialPercent);
			attributeGetterFunctions.put(
				"totalLandMeasurement",
				SezDevPropDevelopmentPlan::getTotalLandMeasurement);
			attributeGetterFunctions.put(
				"totalPercent", SezDevPropDevelopmentPlan::getTotalPercent);
			attributeGetterFunctions.put(
				"industrialProcess",
				SezDevPropDevelopmentPlan::getIndustrialProcess);
			attributeGetterFunctions.put(
				"drinkingPurpose",
				SezDevPropDevelopmentPlan::getDrinkingPurpose);
			attributeGetterFunctions.put(
				"otherSpecify", SezDevPropDevelopmentPlan::getOtherSpecify);
			attributeGetterFunctions.put(
				"totalRequirement",
				SezDevPropDevelopmentPlan::getTotalRequirement);
			attributeGetterFunctions.put(
				"quantumAndNature",
				SezDevPropDevelopmentPlan::getQuantumAndNature);
			attributeGetterFunctions.put(
				"specifyWhetherOwn",
				SezDevPropDevelopmentPlan::getSpecifyWhetherOwn);
			attributeGetterFunctions.put(
				"reqOfPower", SezDevPropDevelopmentPlan::getReqOfPower);
			attributeGetterFunctions.put(
				"mainRoadRowWidth",
				SezDevPropDevelopmentPlan::getMainRoadRowWidth);
			attributeGetterFunctions.put(
				"mainRoadTypeOfPavement",
				SezDevPropDevelopmentPlan::getMainRoadTypeOfPavement);
			attributeGetterFunctions.put(
				"secondRowWidhth",
				SezDevPropDevelopmentPlan::getSecondRowWidhth);
			attributeGetterFunctions.put(
				"secondTypeOfPavement",
				SezDevPropDevelopmentPlan::getSecondTypeOfPavement);
			attributeGetterFunctions.put(
				"tertiaryRowWidhth",
				SezDevPropDevelopmentPlan::getTertiaryRowWidhth);
			attributeGetterFunctions.put(
				"tertiaryTypeOfPavement",
				SezDevPropDevelopmentPlan::getTertiaryTypeOfPavement);
			attributeGetterFunctions.put(
				"waterInstallationReq",
				SezDevPropDevelopmentPlan::getWaterInstallationReq);
			attributeGetterFunctions.put(
				"powerInstallationReq",
				SezDevPropDevelopmentPlan::getPowerInstallationReq);
			attributeGetterFunctions.put(
				"teleComInstallationReq",
				SezDevPropDevelopmentPlan::getTeleComInstallationReq);
			attributeGetterFunctions.put(
				"cctvInstallationReq",
				SezDevPropDevelopmentPlan::getCctvInstallationReq);
			attributeGetterFunctions.put(
				"securityInterconnection",
				SezDevPropDevelopmentPlan::getSecurityInterconnection);
			attributeGetterFunctions.put(
				"fireFightingInstallationReq",
				SezDevPropDevelopmentPlan::getFireFightingInstallationReq);
			attributeGetterFunctions.put(
				"sezStatusApplicationId",
				SezDevPropDevelopmentPlan::getSezStatusApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<SezDevPropDevelopmentPlan, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SezDevPropDevelopmentPlan, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<SezDevPropDevelopmentPlan, ?>>();

			attributeSetterBiConsumers.put(
				"sezDevPropDevelopmentPlanId",
				(BiConsumer<SezDevPropDevelopmentPlan, Long>)
					SezDevPropDevelopmentPlan::setSezDevPropDevelopmentPlanId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SezDevPropDevelopmentPlan, Long>)
					SezDevPropDevelopmentPlan::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SezDevPropDevelopmentPlan, Long>)
					SezDevPropDevelopmentPlan::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SezDevPropDevelopmentPlan, Long>)
					SezDevPropDevelopmentPlan::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SezDevPropDevelopmentPlan, Date>)
					SezDevPropDevelopmentPlan::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SezDevPropDevelopmentPlan, Date>)
					SezDevPropDevelopmentPlan::setModifiedDate);
			attributeSetterBiConsumers.put(
				"existingBuilding",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setExistingBuilding);
			attributeSetterBiConsumers.put(
				"existingBuildingForBusiDetail",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::
						setExistingBuildingForBusiDetail);
			attributeSetterBiConsumers.put(
				"activitiesForSingleEntity",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setActivitiesForSingleEntity);
			attributeSetterBiConsumers.put(
				"volume",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setVolume);
			attributeSetterBiConsumers.put(
				"folio",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setFolio);
			attributeSetterBiConsumers.put(
				"buildingNum",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setBuildingNum);
			attributeSetterBiConsumers.put(
				"townCity",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setTownCity);
			attributeSetterBiConsumers.put(
				"zipCode",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setZipCode);
			attributeSetterBiConsumers.put(
				"zoningClassification",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setZoningClassification);
			attributeSetterBiConsumers.put(
				"landUse",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setLandUse);
			attributeSetterBiConsumers.put(
				"sezAreaHectares",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setSezAreaHectares);
			attributeSetterBiConsumers.put(
				"sezAreaAcres",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setSezAreaAcres);
			attributeSetterBiConsumers.put(
				"customsHectares",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setCustomsHectares);
			attributeSetterBiConsumers.put(
				"customsAcres",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setCustomsAcres);
			attributeSetterBiConsumers.put(
				"topography",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setTopography);
			attributeSetterBiConsumers.put(
				"northBoundaries",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setNorthBoundaries);
			attributeSetterBiConsumers.put(
				"eastBoundaries",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setEastBoundaries);
			attributeSetterBiConsumers.put(
				"westBoundaries",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setWestBoundaries);
			attributeSetterBiConsumers.put(
				"southBoundaries",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setSouthBoundaries);
			attributeSetterBiConsumers.put(
				"customLandMeasurement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setCustomLandMeasurement);
			attributeSetterBiConsumers.put(
				"customPercent",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setCustomPercent);
			attributeSetterBiConsumers.put(
				"commonLandMeasurement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setCommonLandMeasurement);
			attributeSetterBiConsumers.put(
				"commonPercent",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setCommonPercent);
			attributeSetterBiConsumers.put(
				"bufferLandMeasurement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setBufferLandMeasurement);
			attributeSetterBiConsumers.put(
				"bufferPercent",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setBufferPercent);
			attributeSetterBiConsumers.put(
				"zoneLandMeasurement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setZoneLandMeasurement);
			attributeSetterBiConsumers.put(
				"zonePercent",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setZonePercent);
			attributeSetterBiConsumers.put(
				"ResidentialLandMeasurement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setResidentialLandMeasurement);
			attributeSetterBiConsumers.put(
				"ResidentialPercent",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setResidentialPercent);
			attributeSetterBiConsumers.put(
				"totalLandMeasurement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setTotalLandMeasurement);
			attributeSetterBiConsumers.put(
				"totalPercent",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setTotalPercent);
			attributeSetterBiConsumers.put(
				"industrialProcess",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setIndustrialProcess);
			attributeSetterBiConsumers.put(
				"drinkingPurpose",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setDrinkingPurpose);
			attributeSetterBiConsumers.put(
				"otherSpecify",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setOtherSpecify);
			attributeSetterBiConsumers.put(
				"totalRequirement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setTotalRequirement);
			attributeSetterBiConsumers.put(
				"quantumAndNature",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setQuantumAndNature);
			attributeSetterBiConsumers.put(
				"specifyWhetherOwn",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setSpecifyWhetherOwn);
			attributeSetterBiConsumers.put(
				"reqOfPower",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setReqOfPower);
			attributeSetterBiConsumers.put(
				"mainRoadRowWidth",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setMainRoadRowWidth);
			attributeSetterBiConsumers.put(
				"mainRoadTypeOfPavement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setMainRoadTypeOfPavement);
			attributeSetterBiConsumers.put(
				"secondRowWidhth",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setSecondRowWidhth);
			attributeSetterBiConsumers.put(
				"secondTypeOfPavement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setSecondTypeOfPavement);
			attributeSetterBiConsumers.put(
				"tertiaryRowWidhth",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setTertiaryRowWidhth);
			attributeSetterBiConsumers.put(
				"tertiaryTypeOfPavement",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setTertiaryTypeOfPavement);
			attributeSetterBiConsumers.put(
				"waterInstallationReq",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setWaterInstallationReq);
			attributeSetterBiConsumers.put(
				"powerInstallationReq",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setPowerInstallationReq);
			attributeSetterBiConsumers.put(
				"teleComInstallationReq",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setTeleComInstallationReq);
			attributeSetterBiConsumers.put(
				"cctvInstallationReq",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setCctvInstallationReq);
			attributeSetterBiConsumers.put(
				"securityInterconnection",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setSecurityInterconnection);
			attributeSetterBiConsumers.put(
				"fireFightingInstallationReq",
				(BiConsumer<SezDevPropDevelopmentPlan, String>)
					SezDevPropDevelopmentPlan::setFireFightingInstallationReq);
			attributeSetterBiConsumers.put(
				"sezStatusApplicationId",
				(BiConsumer<SezDevPropDevelopmentPlan, Long>)
					SezDevPropDevelopmentPlan::setSezStatusApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSezDevPropDevelopmentPlanId() {
		return _sezDevPropDevelopmentPlanId;
	}

	@Override
	public void setSezDevPropDevelopmentPlanId(
		long sezDevPropDevelopmentPlanId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezDevPropDevelopmentPlanId = sezDevPropDevelopmentPlanId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getExistingBuilding() {
		if (_existingBuilding == null) {
			return "";
		}
		else {
			return _existingBuilding;
		}
	}

	@Override
	public void setExistingBuilding(String existingBuilding) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_existingBuilding = existingBuilding;
	}

	@JSON
	@Override
	public String getExistingBuildingForBusiDetail() {
		if (_existingBuildingForBusiDetail == null) {
			return "";
		}
		else {
			return _existingBuildingForBusiDetail;
		}
	}

	@Override
	public void setExistingBuildingForBusiDetail(
		String existingBuildingForBusiDetail) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_existingBuildingForBusiDetail = existingBuildingForBusiDetail;
	}

	@JSON
	@Override
	public String getActivitiesForSingleEntity() {
		if (_activitiesForSingleEntity == null) {
			return "";
		}
		else {
			return _activitiesForSingleEntity;
		}
	}

	@Override
	public void setActivitiesForSingleEntity(String activitiesForSingleEntity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activitiesForSingleEntity = activitiesForSingleEntity;
	}

	@JSON
	@Override
	public String getVolume() {
		if (_volume == null) {
			return "";
		}
		else {
			return _volume;
		}
	}

	@Override
	public void setVolume(String volume) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_volume = volume;
	}

	@JSON
	@Override
	public String getFolio() {
		if (_folio == null) {
			return "";
		}
		else {
			return _folio;
		}
	}

	@Override
	public void setFolio(String folio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folio = folio;
	}

	@JSON
	@Override
	public String getBuildingNum() {
		if (_buildingNum == null) {
			return "";
		}
		else {
			return _buildingNum;
		}
	}

	@Override
	public void setBuildingNum(String buildingNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_buildingNum = buildingNum;
	}

	@JSON
	@Override
	public String getTownCity() {
		if (_townCity == null) {
			return "";
		}
		else {
			return _townCity;
		}
	}

	@Override
	public void setTownCity(String townCity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_townCity = townCity;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getZoningClassification() {
		if (_zoningClassification == null) {
			return "";
		}
		else {
			return _zoningClassification;
		}
	}

	@Override
	public void setZoningClassification(String zoningClassification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zoningClassification = zoningClassification;
	}

	@JSON
	@Override
	public String getLandUse() {
		if (_landUse == null) {
			return "";
		}
		else {
			return _landUse;
		}
	}

	@Override
	public void setLandUse(String landUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landUse = landUse;
	}

	@JSON
	@Override
	public String getSezAreaHectares() {
		if (_sezAreaHectares == null) {
			return "";
		}
		else {
			return _sezAreaHectares;
		}
	}

	@Override
	public void setSezAreaHectares(String sezAreaHectares) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezAreaHectares = sezAreaHectares;
	}

	@JSON
	@Override
	public String getSezAreaAcres() {
		if (_sezAreaAcres == null) {
			return "";
		}
		else {
			return _sezAreaAcres;
		}
	}

	@Override
	public void setSezAreaAcres(String sezAreaAcres) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezAreaAcres = sezAreaAcres;
	}

	@JSON
	@Override
	public String getCustomsHectares() {
		if (_customsHectares == null) {
			return "";
		}
		else {
			return _customsHectares;
		}
	}

	@Override
	public void setCustomsHectares(String customsHectares) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customsHectares = customsHectares;
	}

	@JSON
	@Override
	public String getCustomsAcres() {
		if (_customsAcres == null) {
			return "";
		}
		else {
			return _customsAcres;
		}
	}

	@Override
	public void setCustomsAcres(String customsAcres) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customsAcres = customsAcres;
	}

	@JSON
	@Override
	public String getTopography() {
		if (_topography == null) {
			return "";
		}
		else {
			return _topography;
		}
	}

	@Override
	public void setTopography(String topography) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_topography = topography;
	}

	@JSON
	@Override
	public String getNorthBoundaries() {
		if (_northBoundaries == null) {
			return "";
		}
		else {
			return _northBoundaries;
		}
	}

	@Override
	public void setNorthBoundaries(String northBoundaries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_northBoundaries = northBoundaries;
	}

	@JSON
	@Override
	public String getEastBoundaries() {
		if (_eastBoundaries == null) {
			return "";
		}
		else {
			return _eastBoundaries;
		}
	}

	@Override
	public void setEastBoundaries(String eastBoundaries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eastBoundaries = eastBoundaries;
	}

	@JSON
	@Override
	public String getWestBoundaries() {
		if (_westBoundaries == null) {
			return "";
		}
		else {
			return _westBoundaries;
		}
	}

	@Override
	public void setWestBoundaries(String westBoundaries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_westBoundaries = westBoundaries;
	}

	@JSON
	@Override
	public String getSouthBoundaries() {
		if (_southBoundaries == null) {
			return "";
		}
		else {
			return _southBoundaries;
		}
	}

	@Override
	public void setSouthBoundaries(String southBoundaries) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_southBoundaries = southBoundaries;
	}

	@JSON
	@Override
	public String getCustomLandMeasurement() {
		if (_customLandMeasurement == null) {
			return "";
		}
		else {
			return _customLandMeasurement;
		}
	}

	@Override
	public void setCustomLandMeasurement(String customLandMeasurement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customLandMeasurement = customLandMeasurement;
	}

	@JSON
	@Override
	public String getCustomPercent() {
		if (_customPercent == null) {
			return "";
		}
		else {
			return _customPercent;
		}
	}

	@Override
	public void setCustomPercent(String customPercent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customPercent = customPercent;
	}

	@JSON
	@Override
	public String getCommonLandMeasurement() {
		if (_commonLandMeasurement == null) {
			return "";
		}
		else {
			return _commonLandMeasurement;
		}
	}

	@Override
	public void setCommonLandMeasurement(String commonLandMeasurement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commonLandMeasurement = commonLandMeasurement;
	}

	@JSON
	@Override
	public String getCommonPercent() {
		if (_commonPercent == null) {
			return "";
		}
		else {
			return _commonPercent;
		}
	}

	@Override
	public void setCommonPercent(String commonPercent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commonPercent = commonPercent;
	}

	@JSON
	@Override
	public String getBufferLandMeasurement() {
		if (_bufferLandMeasurement == null) {
			return "";
		}
		else {
			return _bufferLandMeasurement;
		}
	}

	@Override
	public void setBufferLandMeasurement(String bufferLandMeasurement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bufferLandMeasurement = bufferLandMeasurement;
	}

	@JSON
	@Override
	public String getBufferPercent() {
		if (_bufferPercent == null) {
			return "";
		}
		else {
			return _bufferPercent;
		}
	}

	@Override
	public void setBufferPercent(String bufferPercent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bufferPercent = bufferPercent;
	}

	@JSON
	@Override
	public String getZoneLandMeasurement() {
		if (_zoneLandMeasurement == null) {
			return "";
		}
		else {
			return _zoneLandMeasurement;
		}
	}

	@Override
	public void setZoneLandMeasurement(String zoneLandMeasurement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zoneLandMeasurement = zoneLandMeasurement;
	}

	@JSON
	@Override
	public String getZonePercent() {
		if (_zonePercent == null) {
			return "";
		}
		else {
			return _zonePercent;
		}
	}

	@Override
	public void setZonePercent(String zonePercent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zonePercent = zonePercent;
	}

	@JSON
	@Override
	public String getResidentialLandMeasurement() {
		if (_ResidentialLandMeasurement == null) {
			return "";
		}
		else {
			return _ResidentialLandMeasurement;
		}
	}

	@Override
	public void setResidentialLandMeasurement(
		String ResidentialLandMeasurement) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ResidentialLandMeasurement = ResidentialLandMeasurement;
	}

	@JSON
	@Override
	public String getResidentialPercent() {
		if (_ResidentialPercent == null) {
			return "";
		}
		else {
			return _ResidentialPercent;
		}
	}

	@Override
	public void setResidentialPercent(String ResidentialPercent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ResidentialPercent = ResidentialPercent;
	}

	@JSON
	@Override
	public String getTotalLandMeasurement() {
		if (_totalLandMeasurement == null) {
			return "";
		}
		else {
			return _totalLandMeasurement;
		}
	}

	@Override
	public void setTotalLandMeasurement(String totalLandMeasurement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalLandMeasurement = totalLandMeasurement;
	}

	@JSON
	@Override
	public String getTotalPercent() {
		if (_totalPercent == null) {
			return "";
		}
		else {
			return _totalPercent;
		}
	}

	@Override
	public void setTotalPercent(String totalPercent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalPercent = totalPercent;
	}

	@JSON
	@Override
	public String getIndustrialProcess() {
		if (_industrialProcess == null) {
			return "";
		}
		else {
			return _industrialProcess;
		}
	}

	@Override
	public void setIndustrialProcess(String industrialProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_industrialProcess = industrialProcess;
	}

	@JSON
	@Override
	public String getDrinkingPurpose() {
		if (_drinkingPurpose == null) {
			return "";
		}
		else {
			return _drinkingPurpose;
		}
	}

	@Override
	public void setDrinkingPurpose(String drinkingPurpose) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_drinkingPurpose = drinkingPurpose;
	}

	@JSON
	@Override
	public String getOtherSpecify() {
		if (_otherSpecify == null) {
			return "";
		}
		else {
			return _otherSpecify;
		}
	}

	@Override
	public void setOtherSpecify(String otherSpecify) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherSpecify = otherSpecify;
	}

	@JSON
	@Override
	public String getTotalRequirement() {
		if (_totalRequirement == null) {
			return "";
		}
		else {
			return _totalRequirement;
		}
	}

	@Override
	public void setTotalRequirement(String totalRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalRequirement = totalRequirement;
	}

	@JSON
	@Override
	public String getQuantumAndNature() {
		if (_quantumAndNature == null) {
			return "";
		}
		else {
			return _quantumAndNature;
		}
	}

	@Override
	public void setQuantumAndNature(String quantumAndNature) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantumAndNature = quantumAndNature;
	}

	@JSON
	@Override
	public String getSpecifyWhetherOwn() {
		if (_specifyWhetherOwn == null) {
			return "";
		}
		else {
			return _specifyWhetherOwn;
		}
	}

	@Override
	public void setSpecifyWhetherOwn(String specifyWhetherOwn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specifyWhetherOwn = specifyWhetherOwn;
	}

	@JSON
	@Override
	public String getReqOfPower() {
		if (_reqOfPower == null) {
			return "";
		}
		else {
			return _reqOfPower;
		}
	}

	@Override
	public void setReqOfPower(String reqOfPower) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reqOfPower = reqOfPower;
	}

	@JSON
	@Override
	public String getMainRoadRowWidth() {
		if (_mainRoadRowWidth == null) {
			return "";
		}
		else {
			return _mainRoadRowWidth;
		}
	}

	@Override
	public void setMainRoadRowWidth(String mainRoadRowWidth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mainRoadRowWidth = mainRoadRowWidth;
	}

	@JSON
	@Override
	public String getMainRoadTypeOfPavement() {
		if (_mainRoadTypeOfPavement == null) {
			return "";
		}
		else {
			return _mainRoadTypeOfPavement;
		}
	}

	@Override
	public void setMainRoadTypeOfPavement(String mainRoadTypeOfPavement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mainRoadTypeOfPavement = mainRoadTypeOfPavement;
	}

	@JSON
	@Override
	public String getSecondRowWidhth() {
		if (_secondRowWidhth == null) {
			return "";
		}
		else {
			return _secondRowWidhth;
		}
	}

	@Override
	public void setSecondRowWidhth(String secondRowWidhth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondRowWidhth = secondRowWidhth;
	}

	@JSON
	@Override
	public String getSecondTypeOfPavement() {
		if (_secondTypeOfPavement == null) {
			return "";
		}
		else {
			return _secondTypeOfPavement;
		}
	}

	@Override
	public void setSecondTypeOfPavement(String secondTypeOfPavement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondTypeOfPavement = secondTypeOfPavement;
	}

	@JSON
	@Override
	public String getTertiaryRowWidhth() {
		if (_tertiaryRowWidhth == null) {
			return "";
		}
		else {
			return _tertiaryRowWidhth;
		}
	}

	@Override
	public void setTertiaryRowWidhth(String tertiaryRowWidhth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tertiaryRowWidhth = tertiaryRowWidhth;
	}

	@JSON
	@Override
	public String getTertiaryTypeOfPavement() {
		if (_tertiaryTypeOfPavement == null) {
			return "";
		}
		else {
			return _tertiaryTypeOfPavement;
		}
	}

	@Override
	public void setTertiaryTypeOfPavement(String tertiaryTypeOfPavement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tertiaryTypeOfPavement = tertiaryTypeOfPavement;
	}

	@JSON
	@Override
	public String getWaterInstallationReq() {
		if (_waterInstallationReq == null) {
			return "";
		}
		else {
			return _waterInstallationReq;
		}
	}

	@Override
	public void setWaterInstallationReq(String waterInstallationReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_waterInstallationReq = waterInstallationReq;
	}

	@JSON
	@Override
	public String getPowerInstallationReq() {
		if (_powerInstallationReq == null) {
			return "";
		}
		else {
			return _powerInstallationReq;
		}
	}

	@Override
	public void setPowerInstallationReq(String powerInstallationReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_powerInstallationReq = powerInstallationReq;
	}

	@JSON
	@Override
	public String getTeleComInstallationReq() {
		if (_teleComInstallationReq == null) {
			return "";
		}
		else {
			return _teleComInstallationReq;
		}
	}

	@Override
	public void setTeleComInstallationReq(String teleComInstallationReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_teleComInstallationReq = teleComInstallationReq;
	}

	@JSON
	@Override
	public String getCctvInstallationReq() {
		if (_cctvInstallationReq == null) {
			return "";
		}
		else {
			return _cctvInstallationReq;
		}
	}

	@Override
	public void setCctvInstallationReq(String cctvInstallationReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cctvInstallationReq = cctvInstallationReq;
	}

	@JSON
	@Override
	public String getSecurityInterconnection() {
		if (_securityInterconnection == null) {
			return "";
		}
		else {
			return _securityInterconnection;
		}
	}

	@Override
	public void setSecurityInterconnection(String securityInterconnection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityInterconnection = securityInterconnection;
	}

	@JSON
	@Override
	public String getFireFightingInstallationReq() {
		if (_fireFightingInstallationReq == null) {
			return "";
		}
		else {
			return _fireFightingInstallationReq;
		}
	}

	@Override
	public void setFireFightingInstallationReq(
		String fireFightingInstallationReq) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fireFightingInstallationReq = fireFightingInstallationReq;
	}

	@JSON
	@Override
	public long getSezStatusApplicationId() {
		return _sezStatusApplicationId;
	}

	@Override
	public void setSezStatusApplicationId(long sezStatusApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sezStatusApplicationId = sezStatusApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSezStatusApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SezDevPropDevelopmentPlan.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SezDevPropDevelopmentPlan toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SezDevPropDevelopmentPlan>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SezDevPropDevelopmentPlanImpl sezDevPropDevelopmentPlanImpl =
			new SezDevPropDevelopmentPlanImpl();

		sezDevPropDevelopmentPlanImpl.setSezDevPropDevelopmentPlanId(
			getSezDevPropDevelopmentPlanId());
		sezDevPropDevelopmentPlanImpl.setGroupId(getGroupId());
		sezDevPropDevelopmentPlanImpl.setCompanyId(getCompanyId());
		sezDevPropDevelopmentPlanImpl.setUserId(getUserId());
		sezDevPropDevelopmentPlanImpl.setUserName(getUserName());
		sezDevPropDevelopmentPlanImpl.setCreateDate(getCreateDate());
		sezDevPropDevelopmentPlanImpl.setModifiedDate(getModifiedDate());
		sezDevPropDevelopmentPlanImpl.setExistingBuilding(
			getExistingBuilding());
		sezDevPropDevelopmentPlanImpl.setExistingBuildingForBusiDetail(
			getExistingBuildingForBusiDetail());
		sezDevPropDevelopmentPlanImpl.setActivitiesForSingleEntity(
			getActivitiesForSingleEntity());
		sezDevPropDevelopmentPlanImpl.setVolume(getVolume());
		sezDevPropDevelopmentPlanImpl.setFolio(getFolio());
		sezDevPropDevelopmentPlanImpl.setBuildingNum(getBuildingNum());
		sezDevPropDevelopmentPlanImpl.setTownCity(getTownCity());
		sezDevPropDevelopmentPlanImpl.setZipCode(getZipCode());
		sezDevPropDevelopmentPlanImpl.setZoningClassification(
			getZoningClassification());
		sezDevPropDevelopmentPlanImpl.setLandUse(getLandUse());
		sezDevPropDevelopmentPlanImpl.setSezAreaHectares(getSezAreaHectares());
		sezDevPropDevelopmentPlanImpl.setSezAreaAcres(getSezAreaAcres());
		sezDevPropDevelopmentPlanImpl.setCustomsHectares(getCustomsHectares());
		sezDevPropDevelopmentPlanImpl.setCustomsAcres(getCustomsAcres());
		sezDevPropDevelopmentPlanImpl.setTopography(getTopography());
		sezDevPropDevelopmentPlanImpl.setNorthBoundaries(getNorthBoundaries());
		sezDevPropDevelopmentPlanImpl.setEastBoundaries(getEastBoundaries());
		sezDevPropDevelopmentPlanImpl.setWestBoundaries(getWestBoundaries());
		sezDevPropDevelopmentPlanImpl.setSouthBoundaries(getSouthBoundaries());
		sezDevPropDevelopmentPlanImpl.setCustomLandMeasurement(
			getCustomLandMeasurement());
		sezDevPropDevelopmentPlanImpl.setCustomPercent(getCustomPercent());
		sezDevPropDevelopmentPlanImpl.setCommonLandMeasurement(
			getCommonLandMeasurement());
		sezDevPropDevelopmentPlanImpl.setCommonPercent(getCommonPercent());
		sezDevPropDevelopmentPlanImpl.setBufferLandMeasurement(
			getBufferLandMeasurement());
		sezDevPropDevelopmentPlanImpl.setBufferPercent(getBufferPercent());
		sezDevPropDevelopmentPlanImpl.setZoneLandMeasurement(
			getZoneLandMeasurement());
		sezDevPropDevelopmentPlanImpl.setZonePercent(getZonePercent());
		sezDevPropDevelopmentPlanImpl.setResidentialLandMeasurement(
			getResidentialLandMeasurement());
		sezDevPropDevelopmentPlanImpl.setResidentialPercent(
			getResidentialPercent());
		sezDevPropDevelopmentPlanImpl.setTotalLandMeasurement(
			getTotalLandMeasurement());
		sezDevPropDevelopmentPlanImpl.setTotalPercent(getTotalPercent());
		sezDevPropDevelopmentPlanImpl.setIndustrialProcess(
			getIndustrialProcess());
		sezDevPropDevelopmentPlanImpl.setDrinkingPurpose(getDrinkingPurpose());
		sezDevPropDevelopmentPlanImpl.setOtherSpecify(getOtherSpecify());
		sezDevPropDevelopmentPlanImpl.setTotalRequirement(
			getTotalRequirement());
		sezDevPropDevelopmentPlanImpl.setQuantumAndNature(
			getQuantumAndNature());
		sezDevPropDevelopmentPlanImpl.setSpecifyWhetherOwn(
			getSpecifyWhetherOwn());
		sezDevPropDevelopmentPlanImpl.setReqOfPower(getReqOfPower());
		sezDevPropDevelopmentPlanImpl.setMainRoadRowWidth(
			getMainRoadRowWidth());
		sezDevPropDevelopmentPlanImpl.setMainRoadTypeOfPavement(
			getMainRoadTypeOfPavement());
		sezDevPropDevelopmentPlanImpl.setSecondRowWidhth(getSecondRowWidhth());
		sezDevPropDevelopmentPlanImpl.setSecondTypeOfPavement(
			getSecondTypeOfPavement());
		sezDevPropDevelopmentPlanImpl.setTertiaryRowWidhth(
			getTertiaryRowWidhth());
		sezDevPropDevelopmentPlanImpl.setTertiaryTypeOfPavement(
			getTertiaryTypeOfPavement());
		sezDevPropDevelopmentPlanImpl.setWaterInstallationReq(
			getWaterInstallationReq());
		sezDevPropDevelopmentPlanImpl.setPowerInstallationReq(
			getPowerInstallationReq());
		sezDevPropDevelopmentPlanImpl.setTeleComInstallationReq(
			getTeleComInstallationReq());
		sezDevPropDevelopmentPlanImpl.setCctvInstallationReq(
			getCctvInstallationReq());
		sezDevPropDevelopmentPlanImpl.setSecurityInterconnection(
			getSecurityInterconnection());
		sezDevPropDevelopmentPlanImpl.setFireFightingInstallationReq(
			getFireFightingInstallationReq());
		sezDevPropDevelopmentPlanImpl.setSezStatusApplicationId(
			getSezStatusApplicationId());

		sezDevPropDevelopmentPlanImpl.resetOriginalValues();

		return sezDevPropDevelopmentPlanImpl;
	}

	@Override
	public SezDevPropDevelopmentPlan cloneWithOriginalValues() {
		SezDevPropDevelopmentPlanImpl sezDevPropDevelopmentPlanImpl =
			new SezDevPropDevelopmentPlanImpl();

		sezDevPropDevelopmentPlanImpl.setSezDevPropDevelopmentPlanId(
			this.<Long>getColumnOriginalValue("sezDevPropDevelopmentPlanId"));
		sezDevPropDevelopmentPlanImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		sezDevPropDevelopmentPlanImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		sezDevPropDevelopmentPlanImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		sezDevPropDevelopmentPlanImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		sezDevPropDevelopmentPlanImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		sezDevPropDevelopmentPlanImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		sezDevPropDevelopmentPlanImpl.setExistingBuilding(
			this.<String>getColumnOriginalValue("existingBuilding"));
		sezDevPropDevelopmentPlanImpl.setExistingBuildingForBusiDetail(
			this.<String>getColumnOriginalValue(
				"existingBuildingForBusiDetail"));
		sezDevPropDevelopmentPlanImpl.setActivitiesForSingleEntity(
			this.<String>getColumnOriginalValue("activitiesForSingleEntity"));
		sezDevPropDevelopmentPlanImpl.setVolume(
			this.<String>getColumnOriginalValue("volume"));
		sezDevPropDevelopmentPlanImpl.setFolio(
			this.<String>getColumnOriginalValue("folio"));
		sezDevPropDevelopmentPlanImpl.setBuildingNum(
			this.<String>getColumnOriginalValue("buildingNum"));
		sezDevPropDevelopmentPlanImpl.setTownCity(
			this.<String>getColumnOriginalValue("townCity"));
		sezDevPropDevelopmentPlanImpl.setZipCode(
			this.<String>getColumnOriginalValue("zipCode"));
		sezDevPropDevelopmentPlanImpl.setZoningClassification(
			this.<String>getColumnOriginalValue("zoningClassification"));
		sezDevPropDevelopmentPlanImpl.setLandUse(
			this.<String>getColumnOriginalValue("landUse"));
		sezDevPropDevelopmentPlanImpl.setSezAreaHectares(
			this.<String>getColumnOriginalValue("sezAreaHectares"));
		sezDevPropDevelopmentPlanImpl.setSezAreaAcres(
			this.<String>getColumnOriginalValue("sezAreaAcres"));
		sezDevPropDevelopmentPlanImpl.setCustomsHectares(
			this.<String>getColumnOriginalValue("customsHectares"));
		sezDevPropDevelopmentPlanImpl.setCustomsAcres(
			this.<String>getColumnOriginalValue("customsAcres"));
		sezDevPropDevelopmentPlanImpl.setTopography(
			this.<String>getColumnOriginalValue("topography"));
		sezDevPropDevelopmentPlanImpl.setNorthBoundaries(
			this.<String>getColumnOriginalValue("northBoundaries"));
		sezDevPropDevelopmentPlanImpl.setEastBoundaries(
			this.<String>getColumnOriginalValue("eastBoundaries"));
		sezDevPropDevelopmentPlanImpl.setWestBoundaries(
			this.<String>getColumnOriginalValue("westBoundaries"));
		sezDevPropDevelopmentPlanImpl.setSouthBoundaries(
			this.<String>getColumnOriginalValue("southBoundaries"));
		sezDevPropDevelopmentPlanImpl.setCustomLandMeasurement(
			this.<String>getColumnOriginalValue("customLandMeasurement"));
		sezDevPropDevelopmentPlanImpl.setCustomPercent(
			this.<String>getColumnOriginalValue("customPercent"));
		sezDevPropDevelopmentPlanImpl.setCommonLandMeasurement(
			this.<String>getColumnOriginalValue("commonLandMeasurement"));
		sezDevPropDevelopmentPlanImpl.setCommonPercent(
			this.<String>getColumnOriginalValue("commonPercent"));
		sezDevPropDevelopmentPlanImpl.setBufferLandMeasurement(
			this.<String>getColumnOriginalValue("bufferLandMeasurement"));
		sezDevPropDevelopmentPlanImpl.setBufferPercent(
			this.<String>getColumnOriginalValue("bufferPercent"));
		sezDevPropDevelopmentPlanImpl.setZoneLandMeasurement(
			this.<String>getColumnOriginalValue("zoneLandMeasurement"));
		sezDevPropDevelopmentPlanImpl.setZonePercent(
			this.<String>getColumnOriginalValue("zonePercent"));
		sezDevPropDevelopmentPlanImpl.setResidentialLandMeasurement(
			this.<String>getColumnOriginalValue("ResidentialLandMeasurement"));
		sezDevPropDevelopmentPlanImpl.setResidentialPercent(
			this.<String>getColumnOriginalValue("ResidentialPercent"));
		sezDevPropDevelopmentPlanImpl.setTotalLandMeasurement(
			this.<String>getColumnOriginalValue("totalLandMeasurement"));
		sezDevPropDevelopmentPlanImpl.setTotalPercent(
			this.<String>getColumnOriginalValue("totalPercent"));
		sezDevPropDevelopmentPlanImpl.setIndustrialProcess(
			this.<String>getColumnOriginalValue("industrialProcess"));
		sezDevPropDevelopmentPlanImpl.setDrinkingPurpose(
			this.<String>getColumnOriginalValue("drinkingPurpose"));
		sezDevPropDevelopmentPlanImpl.setOtherSpecify(
			this.<String>getColumnOriginalValue("otherSpecify"));
		sezDevPropDevelopmentPlanImpl.setTotalRequirement(
			this.<String>getColumnOriginalValue("totalRequirement"));
		sezDevPropDevelopmentPlanImpl.setQuantumAndNature(
			this.<String>getColumnOriginalValue("quantumAndNature"));
		sezDevPropDevelopmentPlanImpl.setSpecifyWhetherOwn(
			this.<String>getColumnOriginalValue("specifyWhetherOwn"));
		sezDevPropDevelopmentPlanImpl.setReqOfPower(
			this.<String>getColumnOriginalValue("reqOfPower"));
		sezDevPropDevelopmentPlanImpl.setMainRoadRowWidth(
			this.<String>getColumnOriginalValue("mainRoadRowWidth"));
		sezDevPropDevelopmentPlanImpl.setMainRoadTypeOfPavement(
			this.<String>getColumnOriginalValue("mainRoadTypeOfPavement"));
		sezDevPropDevelopmentPlanImpl.setSecondRowWidhth(
			this.<String>getColumnOriginalValue("secondRowWidhth"));
		sezDevPropDevelopmentPlanImpl.setSecondTypeOfPavement(
			this.<String>getColumnOriginalValue("secondTypeOfPavement"));
		sezDevPropDevelopmentPlanImpl.setTertiaryRowWidhth(
			this.<String>getColumnOriginalValue("tertiaryRowWidhth"));
		sezDevPropDevelopmentPlanImpl.setTertiaryTypeOfPavement(
			this.<String>getColumnOriginalValue("tertiaryTypeOfPavement"));
		sezDevPropDevelopmentPlanImpl.setWaterInstallationReq(
			this.<String>getColumnOriginalValue("waterInstallationReq"));
		sezDevPropDevelopmentPlanImpl.setPowerInstallationReq(
			this.<String>getColumnOriginalValue("powerInstallationReq"));
		sezDevPropDevelopmentPlanImpl.setTeleComInstallationReq(
			this.<String>getColumnOriginalValue("teleComInstallationReq"));
		sezDevPropDevelopmentPlanImpl.setCctvInstallationReq(
			this.<String>getColumnOriginalValue("cctvInstallationReq"));
		sezDevPropDevelopmentPlanImpl.setSecurityInterconnection(
			this.<String>getColumnOriginalValue("securityInterconnection"));
		sezDevPropDevelopmentPlanImpl.setFireFightingInstallationReq(
			this.<String>getColumnOriginalValue("fireFightingInstallationReq"));
		sezDevPropDevelopmentPlanImpl.setSezStatusApplicationId(
			this.<Long>getColumnOriginalValue("sezStatusApplicationId"));

		return sezDevPropDevelopmentPlanImpl;
	}

	@Override
	public int compareTo(SezDevPropDevelopmentPlan sezDevPropDevelopmentPlan) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), sezDevPropDevelopmentPlan.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SezDevPropDevelopmentPlan)) {
			return false;
		}

		SezDevPropDevelopmentPlan sezDevPropDevelopmentPlan =
			(SezDevPropDevelopmentPlan)object;

		long primaryKey = sezDevPropDevelopmentPlan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SezDevPropDevelopmentPlan> toCacheModel() {
		SezDevPropDevelopmentPlanCacheModel
			sezDevPropDevelopmentPlanCacheModel =
				new SezDevPropDevelopmentPlanCacheModel();

		sezDevPropDevelopmentPlanCacheModel.sezDevPropDevelopmentPlanId =
			getSezDevPropDevelopmentPlanId();

		sezDevPropDevelopmentPlanCacheModel.groupId = getGroupId();

		sezDevPropDevelopmentPlanCacheModel.companyId = getCompanyId();

		sezDevPropDevelopmentPlanCacheModel.userId = getUserId();

		sezDevPropDevelopmentPlanCacheModel.userName = getUserName();

		String userName = sezDevPropDevelopmentPlanCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sezDevPropDevelopmentPlanCacheModel.createDate =
				createDate.getTime();
		}
		else {
			sezDevPropDevelopmentPlanCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sezDevPropDevelopmentPlanCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			sezDevPropDevelopmentPlanCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		sezDevPropDevelopmentPlanCacheModel.existingBuilding =
			getExistingBuilding();

		String existingBuilding =
			sezDevPropDevelopmentPlanCacheModel.existingBuilding;

		if ((existingBuilding != null) && (existingBuilding.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.existingBuilding = null;
		}

		sezDevPropDevelopmentPlanCacheModel.existingBuildingForBusiDetail =
			getExistingBuildingForBusiDetail();

		String existingBuildingForBusiDetail =
			sezDevPropDevelopmentPlanCacheModel.existingBuildingForBusiDetail;

		if ((existingBuildingForBusiDetail != null) &&
			(existingBuildingForBusiDetail.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.existingBuildingForBusiDetail =
				null;
		}

		sezDevPropDevelopmentPlanCacheModel.activitiesForSingleEntity =
			getActivitiesForSingleEntity();

		String activitiesForSingleEntity =
			sezDevPropDevelopmentPlanCacheModel.activitiesForSingleEntity;

		if ((activitiesForSingleEntity != null) &&
			(activitiesForSingleEntity.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.activitiesForSingleEntity =
				null;
		}

		sezDevPropDevelopmentPlanCacheModel.volume = getVolume();

		String volume = sezDevPropDevelopmentPlanCacheModel.volume;

		if ((volume != null) && (volume.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.volume = null;
		}

		sezDevPropDevelopmentPlanCacheModel.folio = getFolio();

		String folio = sezDevPropDevelopmentPlanCacheModel.folio;

		if ((folio != null) && (folio.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.folio = null;
		}

		sezDevPropDevelopmentPlanCacheModel.buildingNum = getBuildingNum();

		String buildingNum = sezDevPropDevelopmentPlanCacheModel.buildingNum;

		if ((buildingNum != null) && (buildingNum.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.buildingNum = null;
		}

		sezDevPropDevelopmentPlanCacheModel.townCity = getTownCity();

		String townCity = sezDevPropDevelopmentPlanCacheModel.townCity;

		if ((townCity != null) && (townCity.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.townCity = null;
		}

		sezDevPropDevelopmentPlanCacheModel.zipCode = getZipCode();

		String zipCode = sezDevPropDevelopmentPlanCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.zipCode = null;
		}

		sezDevPropDevelopmentPlanCacheModel.zoningClassification =
			getZoningClassification();

		String zoningClassification =
			sezDevPropDevelopmentPlanCacheModel.zoningClassification;

		if ((zoningClassification != null) &&
			(zoningClassification.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.zoningClassification = null;
		}

		sezDevPropDevelopmentPlanCacheModel.landUse = getLandUse();

		String landUse = sezDevPropDevelopmentPlanCacheModel.landUse;

		if ((landUse != null) && (landUse.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.landUse = null;
		}

		sezDevPropDevelopmentPlanCacheModel.sezAreaHectares =
			getSezAreaHectares();

		String sezAreaHectares =
			sezDevPropDevelopmentPlanCacheModel.sezAreaHectares;

		if ((sezAreaHectares != null) && (sezAreaHectares.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.sezAreaHectares = null;
		}

		sezDevPropDevelopmentPlanCacheModel.sezAreaAcres = getSezAreaAcres();

		String sezAreaAcres = sezDevPropDevelopmentPlanCacheModel.sezAreaAcres;

		if ((sezAreaAcres != null) && (sezAreaAcres.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.sezAreaAcres = null;
		}

		sezDevPropDevelopmentPlanCacheModel.customsHectares =
			getCustomsHectares();

		String customsHectares =
			sezDevPropDevelopmentPlanCacheModel.customsHectares;

		if ((customsHectares != null) && (customsHectares.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.customsHectares = null;
		}

		sezDevPropDevelopmentPlanCacheModel.customsAcres = getCustomsAcres();

		String customsAcres = sezDevPropDevelopmentPlanCacheModel.customsAcres;

		if ((customsAcres != null) && (customsAcres.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.customsAcres = null;
		}

		sezDevPropDevelopmentPlanCacheModel.topography = getTopography();

		String topography = sezDevPropDevelopmentPlanCacheModel.topography;

		if ((topography != null) && (topography.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.topography = null;
		}

		sezDevPropDevelopmentPlanCacheModel.northBoundaries =
			getNorthBoundaries();

		String northBoundaries =
			sezDevPropDevelopmentPlanCacheModel.northBoundaries;

		if ((northBoundaries != null) && (northBoundaries.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.northBoundaries = null;
		}

		sezDevPropDevelopmentPlanCacheModel.eastBoundaries =
			getEastBoundaries();

		String eastBoundaries =
			sezDevPropDevelopmentPlanCacheModel.eastBoundaries;

		if ((eastBoundaries != null) && (eastBoundaries.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.eastBoundaries = null;
		}

		sezDevPropDevelopmentPlanCacheModel.westBoundaries =
			getWestBoundaries();

		String westBoundaries =
			sezDevPropDevelopmentPlanCacheModel.westBoundaries;

		if ((westBoundaries != null) && (westBoundaries.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.westBoundaries = null;
		}

		sezDevPropDevelopmentPlanCacheModel.southBoundaries =
			getSouthBoundaries();

		String southBoundaries =
			sezDevPropDevelopmentPlanCacheModel.southBoundaries;

		if ((southBoundaries != null) && (southBoundaries.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.southBoundaries = null;
		}

		sezDevPropDevelopmentPlanCacheModel.customLandMeasurement =
			getCustomLandMeasurement();

		String customLandMeasurement =
			sezDevPropDevelopmentPlanCacheModel.customLandMeasurement;

		if ((customLandMeasurement != null) &&
			(customLandMeasurement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.customLandMeasurement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.customPercent = getCustomPercent();

		String customPercent =
			sezDevPropDevelopmentPlanCacheModel.customPercent;

		if ((customPercent != null) && (customPercent.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.customPercent = null;
		}

		sezDevPropDevelopmentPlanCacheModel.commonLandMeasurement =
			getCommonLandMeasurement();

		String commonLandMeasurement =
			sezDevPropDevelopmentPlanCacheModel.commonLandMeasurement;

		if ((commonLandMeasurement != null) &&
			(commonLandMeasurement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.commonLandMeasurement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.commonPercent = getCommonPercent();

		String commonPercent =
			sezDevPropDevelopmentPlanCacheModel.commonPercent;

		if ((commonPercent != null) && (commonPercent.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.commonPercent = null;
		}

		sezDevPropDevelopmentPlanCacheModel.bufferLandMeasurement =
			getBufferLandMeasurement();

		String bufferLandMeasurement =
			sezDevPropDevelopmentPlanCacheModel.bufferLandMeasurement;

		if ((bufferLandMeasurement != null) &&
			(bufferLandMeasurement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.bufferLandMeasurement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.bufferPercent = getBufferPercent();

		String bufferPercent =
			sezDevPropDevelopmentPlanCacheModel.bufferPercent;

		if ((bufferPercent != null) && (bufferPercent.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.bufferPercent = null;
		}

		sezDevPropDevelopmentPlanCacheModel.zoneLandMeasurement =
			getZoneLandMeasurement();

		String zoneLandMeasurement =
			sezDevPropDevelopmentPlanCacheModel.zoneLandMeasurement;

		if ((zoneLandMeasurement != null) &&
			(zoneLandMeasurement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.zoneLandMeasurement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.zonePercent = getZonePercent();

		String zonePercent = sezDevPropDevelopmentPlanCacheModel.zonePercent;

		if ((zonePercent != null) && (zonePercent.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.zonePercent = null;
		}

		sezDevPropDevelopmentPlanCacheModel.ResidentialLandMeasurement =
			getResidentialLandMeasurement();

		String ResidentialLandMeasurement =
			sezDevPropDevelopmentPlanCacheModel.ResidentialLandMeasurement;

		if ((ResidentialLandMeasurement != null) &&
			(ResidentialLandMeasurement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.ResidentialLandMeasurement =
				null;
		}

		sezDevPropDevelopmentPlanCacheModel.ResidentialPercent =
			getResidentialPercent();

		String ResidentialPercent =
			sezDevPropDevelopmentPlanCacheModel.ResidentialPercent;

		if ((ResidentialPercent != null) &&
			(ResidentialPercent.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.ResidentialPercent = null;
		}

		sezDevPropDevelopmentPlanCacheModel.totalLandMeasurement =
			getTotalLandMeasurement();

		String totalLandMeasurement =
			sezDevPropDevelopmentPlanCacheModel.totalLandMeasurement;

		if ((totalLandMeasurement != null) &&
			(totalLandMeasurement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.totalLandMeasurement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.totalPercent = getTotalPercent();

		String totalPercent = sezDevPropDevelopmentPlanCacheModel.totalPercent;

		if ((totalPercent != null) && (totalPercent.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.totalPercent = null;
		}

		sezDevPropDevelopmentPlanCacheModel.industrialProcess =
			getIndustrialProcess();

		String industrialProcess =
			sezDevPropDevelopmentPlanCacheModel.industrialProcess;

		if ((industrialProcess != null) && (industrialProcess.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.industrialProcess = null;
		}

		sezDevPropDevelopmentPlanCacheModel.drinkingPurpose =
			getDrinkingPurpose();

		String drinkingPurpose =
			sezDevPropDevelopmentPlanCacheModel.drinkingPurpose;

		if ((drinkingPurpose != null) && (drinkingPurpose.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.drinkingPurpose = null;
		}

		sezDevPropDevelopmentPlanCacheModel.otherSpecify = getOtherSpecify();

		String otherSpecify = sezDevPropDevelopmentPlanCacheModel.otherSpecify;

		if ((otherSpecify != null) && (otherSpecify.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.otherSpecify = null;
		}

		sezDevPropDevelopmentPlanCacheModel.totalRequirement =
			getTotalRequirement();

		String totalRequirement =
			sezDevPropDevelopmentPlanCacheModel.totalRequirement;

		if ((totalRequirement != null) && (totalRequirement.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.totalRequirement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.quantumAndNature =
			getQuantumAndNature();

		String quantumAndNature =
			sezDevPropDevelopmentPlanCacheModel.quantumAndNature;

		if ((quantumAndNature != null) && (quantumAndNature.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.quantumAndNature = null;
		}

		sezDevPropDevelopmentPlanCacheModel.specifyWhetherOwn =
			getSpecifyWhetherOwn();

		String specifyWhetherOwn =
			sezDevPropDevelopmentPlanCacheModel.specifyWhetherOwn;

		if ((specifyWhetherOwn != null) && (specifyWhetherOwn.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.specifyWhetherOwn = null;
		}

		sezDevPropDevelopmentPlanCacheModel.reqOfPower = getReqOfPower();

		String reqOfPower = sezDevPropDevelopmentPlanCacheModel.reqOfPower;

		if ((reqOfPower != null) && (reqOfPower.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.reqOfPower = null;
		}

		sezDevPropDevelopmentPlanCacheModel.mainRoadRowWidth =
			getMainRoadRowWidth();

		String mainRoadRowWidth =
			sezDevPropDevelopmentPlanCacheModel.mainRoadRowWidth;

		if ((mainRoadRowWidth != null) && (mainRoadRowWidth.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.mainRoadRowWidth = null;
		}

		sezDevPropDevelopmentPlanCacheModel.mainRoadTypeOfPavement =
			getMainRoadTypeOfPavement();

		String mainRoadTypeOfPavement =
			sezDevPropDevelopmentPlanCacheModel.mainRoadTypeOfPavement;

		if ((mainRoadTypeOfPavement != null) &&
			(mainRoadTypeOfPavement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.mainRoadTypeOfPavement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.secondRowWidhth =
			getSecondRowWidhth();

		String secondRowWidhth =
			sezDevPropDevelopmentPlanCacheModel.secondRowWidhth;

		if ((secondRowWidhth != null) && (secondRowWidhth.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.secondRowWidhth = null;
		}

		sezDevPropDevelopmentPlanCacheModel.secondTypeOfPavement =
			getSecondTypeOfPavement();

		String secondTypeOfPavement =
			sezDevPropDevelopmentPlanCacheModel.secondTypeOfPavement;

		if ((secondTypeOfPavement != null) &&
			(secondTypeOfPavement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.secondTypeOfPavement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.tertiaryRowWidhth =
			getTertiaryRowWidhth();

		String tertiaryRowWidhth =
			sezDevPropDevelopmentPlanCacheModel.tertiaryRowWidhth;

		if ((tertiaryRowWidhth != null) && (tertiaryRowWidhth.length() == 0)) {
			sezDevPropDevelopmentPlanCacheModel.tertiaryRowWidhth = null;
		}

		sezDevPropDevelopmentPlanCacheModel.tertiaryTypeOfPavement =
			getTertiaryTypeOfPavement();

		String tertiaryTypeOfPavement =
			sezDevPropDevelopmentPlanCacheModel.tertiaryTypeOfPavement;

		if ((tertiaryTypeOfPavement != null) &&
			(tertiaryTypeOfPavement.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.tertiaryTypeOfPavement = null;
		}

		sezDevPropDevelopmentPlanCacheModel.waterInstallationReq =
			getWaterInstallationReq();

		String waterInstallationReq =
			sezDevPropDevelopmentPlanCacheModel.waterInstallationReq;

		if ((waterInstallationReq != null) &&
			(waterInstallationReq.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.waterInstallationReq = null;
		}

		sezDevPropDevelopmentPlanCacheModel.powerInstallationReq =
			getPowerInstallationReq();

		String powerInstallationReq =
			sezDevPropDevelopmentPlanCacheModel.powerInstallationReq;

		if ((powerInstallationReq != null) &&
			(powerInstallationReq.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.powerInstallationReq = null;
		}

		sezDevPropDevelopmentPlanCacheModel.teleComInstallationReq =
			getTeleComInstallationReq();

		String teleComInstallationReq =
			sezDevPropDevelopmentPlanCacheModel.teleComInstallationReq;

		if ((teleComInstallationReq != null) &&
			(teleComInstallationReq.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.teleComInstallationReq = null;
		}

		sezDevPropDevelopmentPlanCacheModel.cctvInstallationReq =
			getCctvInstallationReq();

		String cctvInstallationReq =
			sezDevPropDevelopmentPlanCacheModel.cctvInstallationReq;

		if ((cctvInstallationReq != null) &&
			(cctvInstallationReq.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.cctvInstallationReq = null;
		}

		sezDevPropDevelopmentPlanCacheModel.securityInterconnection =
			getSecurityInterconnection();

		String securityInterconnection =
			sezDevPropDevelopmentPlanCacheModel.securityInterconnection;

		if ((securityInterconnection != null) &&
			(securityInterconnection.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.securityInterconnection = null;
		}

		sezDevPropDevelopmentPlanCacheModel.fireFightingInstallationReq =
			getFireFightingInstallationReq();

		String fireFightingInstallationReq =
			sezDevPropDevelopmentPlanCacheModel.fireFightingInstallationReq;

		if ((fireFightingInstallationReq != null) &&
			(fireFightingInstallationReq.length() == 0)) {

			sezDevPropDevelopmentPlanCacheModel.fireFightingInstallationReq =
				null;
		}

		sezDevPropDevelopmentPlanCacheModel.sezStatusApplicationId =
			getSezStatusApplicationId();

		return sezDevPropDevelopmentPlanCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SezDevPropDevelopmentPlan, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SezDevPropDevelopmentPlan, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SezDevPropDevelopmentPlan, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SezDevPropDevelopmentPlan)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SezDevPropDevelopmentPlan>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SezDevPropDevelopmentPlan.class, ModelWrapper.class);

	}

	private long _sezDevPropDevelopmentPlanId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _existingBuilding;
	private String _existingBuildingForBusiDetail;
	private String _activitiesForSingleEntity;
	private String _volume;
	private String _folio;
	private String _buildingNum;
	private String _townCity;
	private String _zipCode;
	private String _zoningClassification;
	private String _landUse;
	private String _sezAreaHectares;
	private String _sezAreaAcres;
	private String _customsHectares;
	private String _customsAcres;
	private String _topography;
	private String _northBoundaries;
	private String _eastBoundaries;
	private String _westBoundaries;
	private String _southBoundaries;
	private String _customLandMeasurement;
	private String _customPercent;
	private String _commonLandMeasurement;
	private String _commonPercent;
	private String _bufferLandMeasurement;
	private String _bufferPercent;
	private String _zoneLandMeasurement;
	private String _zonePercent;
	private String _ResidentialLandMeasurement;
	private String _ResidentialPercent;
	private String _totalLandMeasurement;
	private String _totalPercent;
	private String _industrialProcess;
	private String _drinkingPurpose;
	private String _otherSpecify;
	private String _totalRequirement;
	private String _quantumAndNature;
	private String _specifyWhetherOwn;
	private String _reqOfPower;
	private String _mainRoadRowWidth;
	private String _mainRoadTypeOfPavement;
	private String _secondRowWidhth;
	private String _secondTypeOfPavement;
	private String _tertiaryRowWidhth;
	private String _tertiaryTypeOfPavement;
	private String _waterInstallationReq;
	private String _powerInstallationReq;
	private String _teleComInstallationReq;
	private String _cctvInstallationReq;
	private String _securityInterconnection;
	private String _fireFightingInstallationReq;
	private long _sezStatusApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SezDevPropDevelopmentPlan, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SezDevPropDevelopmentPlan)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"sezDevPropDevelopmentPlanId", _sezDevPropDevelopmentPlanId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("existingBuilding", _existingBuilding);
		_columnOriginalValues.put(
			"existingBuildingForBusiDetail", _existingBuildingForBusiDetail);
		_columnOriginalValues.put(
			"activitiesForSingleEntity", _activitiesForSingleEntity);
		_columnOriginalValues.put("volume", _volume);
		_columnOriginalValues.put("folio", _folio);
		_columnOriginalValues.put("buildingNum", _buildingNum);
		_columnOriginalValues.put("townCity", _townCity);
		_columnOriginalValues.put("zipCode", _zipCode);
		_columnOriginalValues.put(
			"zoningClassification", _zoningClassification);
		_columnOriginalValues.put("landUse", _landUse);
		_columnOriginalValues.put("sezAreaHectares", _sezAreaHectares);
		_columnOriginalValues.put("sezAreaAcres", _sezAreaAcres);
		_columnOriginalValues.put("customsHectares", _customsHectares);
		_columnOriginalValues.put("customsAcres", _customsAcres);
		_columnOriginalValues.put("topography", _topography);
		_columnOriginalValues.put("northBoundaries", _northBoundaries);
		_columnOriginalValues.put("eastBoundaries", _eastBoundaries);
		_columnOriginalValues.put("westBoundaries", _westBoundaries);
		_columnOriginalValues.put("southBoundaries", _southBoundaries);
		_columnOriginalValues.put(
			"customLandMeasurement", _customLandMeasurement);
		_columnOriginalValues.put("customPercent", _customPercent);
		_columnOriginalValues.put(
			"commonLandMeasurement", _commonLandMeasurement);
		_columnOriginalValues.put("commonPercent", _commonPercent);
		_columnOriginalValues.put(
			"bufferLandMeasurement", _bufferLandMeasurement);
		_columnOriginalValues.put("bufferPercent", _bufferPercent);
		_columnOriginalValues.put("zoneLandMeasurement", _zoneLandMeasurement);
		_columnOriginalValues.put("zonePercent", _zonePercent);
		_columnOriginalValues.put(
			"ResidentialLandMeasurement", _ResidentialLandMeasurement);
		_columnOriginalValues.put("ResidentialPercent", _ResidentialPercent);
		_columnOriginalValues.put(
			"totalLandMeasurement", _totalLandMeasurement);
		_columnOriginalValues.put("totalPercent", _totalPercent);
		_columnOriginalValues.put("industrialProcess", _industrialProcess);
		_columnOriginalValues.put("drinkingPurpose", _drinkingPurpose);
		_columnOriginalValues.put("otherSpecify", _otherSpecify);
		_columnOriginalValues.put("totalRequirement", _totalRequirement);
		_columnOriginalValues.put("quantumAndNature", _quantumAndNature);
		_columnOriginalValues.put("specifyWhetherOwn", _specifyWhetherOwn);
		_columnOriginalValues.put("reqOfPower", _reqOfPower);
		_columnOriginalValues.put("mainRoadRowWidth", _mainRoadRowWidth);
		_columnOriginalValues.put(
			"mainRoadTypeOfPavement", _mainRoadTypeOfPavement);
		_columnOriginalValues.put("secondRowWidhth", _secondRowWidhth);
		_columnOriginalValues.put(
			"secondTypeOfPavement", _secondTypeOfPavement);
		_columnOriginalValues.put("tertiaryRowWidhth", _tertiaryRowWidhth);
		_columnOriginalValues.put(
			"tertiaryTypeOfPavement", _tertiaryTypeOfPavement);
		_columnOriginalValues.put(
			"waterInstallationReq", _waterInstallationReq);
		_columnOriginalValues.put(
			"powerInstallationReq", _powerInstallationReq);
		_columnOriginalValues.put(
			"teleComInstallationReq", _teleComInstallationReq);
		_columnOriginalValues.put("cctvInstallationReq", _cctvInstallationReq);
		_columnOriginalValues.put(
			"securityInterconnection", _securityInterconnection);
		_columnOriginalValues.put(
			"fireFightingInstallationReq", _fireFightingInstallationReq);
		_columnOriginalValues.put(
			"sezStatusApplicationId", _sezStatusApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sezDevPropDevelopmentPlanId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("existingBuilding", 128L);

		columnBitmasks.put("existingBuildingForBusiDetail", 256L);

		columnBitmasks.put("activitiesForSingleEntity", 512L);

		columnBitmasks.put("volume", 1024L);

		columnBitmasks.put("folio", 2048L);

		columnBitmasks.put("buildingNum", 4096L);

		columnBitmasks.put("townCity", 8192L);

		columnBitmasks.put("zipCode", 16384L);

		columnBitmasks.put("zoningClassification", 32768L);

		columnBitmasks.put("landUse", 65536L);

		columnBitmasks.put("sezAreaHectares", 131072L);

		columnBitmasks.put("sezAreaAcres", 262144L);

		columnBitmasks.put("customsHectares", 524288L);

		columnBitmasks.put("customsAcres", 1048576L);

		columnBitmasks.put("topography", 2097152L);

		columnBitmasks.put("northBoundaries", 4194304L);

		columnBitmasks.put("eastBoundaries", 8388608L);

		columnBitmasks.put("westBoundaries", 16777216L);

		columnBitmasks.put("southBoundaries", 33554432L);

		columnBitmasks.put("customLandMeasurement", 67108864L);

		columnBitmasks.put("customPercent", 134217728L);

		columnBitmasks.put("commonLandMeasurement", 268435456L);

		columnBitmasks.put("commonPercent", 536870912L);

		columnBitmasks.put("bufferLandMeasurement", 1073741824L);

		columnBitmasks.put("bufferPercent", 2147483648L);

		columnBitmasks.put("zoneLandMeasurement", 4294967296L);

		columnBitmasks.put("zonePercent", 8589934592L);

		columnBitmasks.put("ResidentialLandMeasurement", 17179869184L);

		columnBitmasks.put("ResidentialPercent", 34359738368L);

		columnBitmasks.put("totalLandMeasurement", 68719476736L);

		columnBitmasks.put("totalPercent", 137438953472L);

		columnBitmasks.put("industrialProcess", 274877906944L);

		columnBitmasks.put("drinkingPurpose", 549755813888L);

		columnBitmasks.put("otherSpecify", 1099511627776L);

		columnBitmasks.put("totalRequirement", 2199023255552L);

		columnBitmasks.put("quantumAndNature", 4398046511104L);

		columnBitmasks.put("specifyWhetherOwn", 8796093022208L);

		columnBitmasks.put("reqOfPower", 17592186044416L);

		columnBitmasks.put("mainRoadRowWidth", 35184372088832L);

		columnBitmasks.put("mainRoadTypeOfPavement", 70368744177664L);

		columnBitmasks.put("secondRowWidhth", 140737488355328L);

		columnBitmasks.put("secondTypeOfPavement", 281474976710656L);

		columnBitmasks.put("tertiaryRowWidhth", 562949953421312L);

		columnBitmasks.put("tertiaryTypeOfPavement", 1125899906842624L);

		columnBitmasks.put("waterInstallationReq", 2251799813685248L);

		columnBitmasks.put("powerInstallationReq", 4503599627370496L);

		columnBitmasks.put("teleComInstallationReq", 9007199254740992L);

		columnBitmasks.put("cctvInstallationReq", 18014398509481984L);

		columnBitmasks.put("securityInterconnection", 36028797018963968L);

		columnBitmasks.put("fireFightingInstallationReq", 72057594037927936L);

		columnBitmasks.put("sezStatusApplicationId", 144115188075855872L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SezDevPropDevelopmentPlan _escapedModel;

}