/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.entity.information.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.entity.information.services.model.EntityInformation;
import com.nbp.entity.information.services.model.EntityInformationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EntityInformation service. Represents a row in the &quot;nbp_entity_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EntityInformationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityInformationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityInformationImpl
 * @generated
 */
@JSON(strict = true)
public class EntityInformationModelImpl
	extends BaseModelImpl<EntityInformation> implements EntityInformationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entity information model instance should use the <code>EntityInformation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_entity_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"entityInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"entityName", Types.VARCHAR}, {"entityAddressOne", Types.VARCHAR},
		{"entityAddressTwo", Types.VARCHAR}, {"telephone", Types.VARCHAR},
		{"mailingAdd", Types.VARCHAR}, {"permanentAdd", Types.VARCHAR},
		{"fax", Types.VARCHAR}, {"website", Types.VARCHAR},
		{"postalCode", Types.VARCHAR}, {"parish", Types.VARCHAR},
		{"officeEmail", Types.VARCHAR}, {"country", Types.VARCHAR},
		{"incorporationDate", Types.TIMESTAMP},
		{"incorporationPlace", Types.VARCHAR},
		{"isUserPrimaryUser", Types.VARCHAR}, {"entityNumber", Types.VARCHAR},
		{"userType", Types.VARCHAR}, {"trn", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityAddressOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityAddressTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mailingAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permanentAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("website", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officeEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("incorporationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("incorporationPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isUserPrimaryUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trn", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_entity_info (uuid_ VARCHAR(75) null,entityInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityName VARCHAR(75) null,entityAddressOne VARCHAR(75) null,entityAddressTwo VARCHAR(75) null,telephone VARCHAR(75) null,mailingAdd VARCHAR(75) null,permanentAdd VARCHAR(75) null,fax VARCHAR(75) null,website VARCHAR(75) null,postalCode VARCHAR(75) null,parish VARCHAR(75) null,officeEmail VARCHAR(75) null,country VARCHAR(75) null,incorporationDate DATE null,incorporationPlace VARCHAR(75) null,isUserPrimaryUser VARCHAR(75) null,entityNumber VARCHAR(75) null,userType VARCHAR(75) null,trn VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table nbp_entity_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY entityInformation.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_entity_info.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENTITYNUMBER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EntityInformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entityInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntityInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entityInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EntityInformation.class;
	}

	@Override
	public String getModelClassName() {
		return EntityInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EntityInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EntityInformation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EntityInformation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EntityInformation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EntityInformation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EntityInformation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EntityInformation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EntityInformation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EntityInformation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<EntityInformation, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<EntityInformation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<EntityInformation, Object>>();

			attributeGetterFunctions.put("uuid", EntityInformation::getUuid);
			attributeGetterFunctions.put(
				"entityInfoId", EntityInformation::getEntityInfoId);
			attributeGetterFunctions.put(
				"groupId", EntityInformation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", EntityInformation::getCompanyId);
			attributeGetterFunctions.put(
				"userId", EntityInformation::getUserId);
			attributeGetterFunctions.put(
				"userName", EntityInformation::getUserName);
			attributeGetterFunctions.put(
				"createDate", EntityInformation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", EntityInformation::getModifiedDate);
			attributeGetterFunctions.put(
				"entityName", EntityInformation::getEntityName);
			attributeGetterFunctions.put(
				"entityAddressOne", EntityInformation::getEntityAddressOne);
			attributeGetterFunctions.put(
				"entityAddressTwo", EntityInformation::getEntityAddressTwo);
			attributeGetterFunctions.put(
				"telephone", EntityInformation::getTelephone);
			attributeGetterFunctions.put(
				"mailingAdd", EntityInformation::getMailingAdd);
			attributeGetterFunctions.put(
				"permanentAdd", EntityInformation::getPermanentAdd);
			attributeGetterFunctions.put("fax", EntityInformation::getFax);
			attributeGetterFunctions.put(
				"website", EntityInformation::getWebsite);
			attributeGetterFunctions.put(
				"postalCode", EntityInformation::getPostalCode);
			attributeGetterFunctions.put(
				"parish", EntityInformation::getParish);
			attributeGetterFunctions.put(
				"officeEmail", EntityInformation::getOfficeEmail);
			attributeGetterFunctions.put(
				"country", EntityInformation::getCountry);
			attributeGetterFunctions.put(
				"incorporationDate", EntityInformation::getIncorporationDate);
			attributeGetterFunctions.put(
				"incorporationPlace", EntityInformation::getIncorporationPlace);
			attributeGetterFunctions.put(
				"isUserPrimaryUser", EntityInformation::getIsUserPrimaryUser);
			attributeGetterFunctions.put(
				"entityNumber", EntityInformation::getEntityNumber);
			attributeGetterFunctions.put(
				"userType", EntityInformation::getUserType);
			attributeGetterFunctions.put("trn", EntityInformation::getTrn);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<EntityInformation, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<EntityInformation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<EntityInformation, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setUuid);
			attributeSetterBiConsumers.put(
				"entityInfoId",
				(BiConsumer<EntityInformation, Long>)
					EntityInformation::setEntityInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<EntityInformation, Long>)
					EntityInformation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<EntityInformation, Long>)
					EntityInformation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<EntityInformation, Long>)
					EntityInformation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<EntityInformation, Date>)
					EntityInformation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<EntityInformation, Date>)
					EntityInformation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityName",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setEntityName);
			attributeSetterBiConsumers.put(
				"entityAddressOne",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setEntityAddressOne);
			attributeSetterBiConsumers.put(
				"entityAddressTwo",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setEntityAddressTwo);
			attributeSetterBiConsumers.put(
				"telephone",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setTelephone);
			attributeSetterBiConsumers.put(
				"mailingAdd",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setMailingAdd);
			attributeSetterBiConsumers.put(
				"permanentAdd",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setPermanentAdd);
			attributeSetterBiConsumers.put(
				"fax",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setFax);
			attributeSetterBiConsumers.put(
				"website",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setWebsite);
			attributeSetterBiConsumers.put(
				"postalCode",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setPostalCode);
			attributeSetterBiConsumers.put(
				"parish",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setParish);
			attributeSetterBiConsumers.put(
				"officeEmail",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setOfficeEmail);
			attributeSetterBiConsumers.put(
				"country",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setCountry);
			attributeSetterBiConsumers.put(
				"incorporationDate",
				(BiConsumer<EntityInformation, Date>)
					EntityInformation::setIncorporationDate);
			attributeSetterBiConsumers.put(
				"incorporationPlace",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setIncorporationPlace);
			attributeSetterBiConsumers.put(
				"isUserPrimaryUser",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setIsUserPrimaryUser);
			attributeSetterBiConsumers.put(
				"entityNumber",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setEntityNumber);
			attributeSetterBiConsumers.put(
				"userType",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setUserType);
			attributeSetterBiConsumers.put(
				"trn",
				(BiConsumer<EntityInformation, String>)
					EntityInformation::setTrn);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEntityInfoId() {
		return _entityInfoId;
	}

	@Override
	public void setEntityInfoId(long entityInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityInfoId = entityInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return "";
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityName = entityName;
	}

	@JSON
	@Override
	public String getEntityAddressOne() {
		if (_entityAddressOne == null) {
			return "";
		}
		else {
			return _entityAddressOne;
		}
	}

	@Override
	public void setEntityAddressOne(String entityAddressOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityAddressOne = entityAddressOne;
	}

	@JSON
	@Override
	public String getEntityAddressTwo() {
		if (_entityAddressTwo == null) {
			return "";
		}
		else {
			return _entityAddressTwo;
		}
	}

	@Override
	public void setEntityAddressTwo(String entityAddressTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityAddressTwo = entityAddressTwo;
	}

	@JSON
	@Override
	public String getTelephone() {
		if (_telephone == null) {
			return "";
		}
		else {
			return _telephone;
		}
	}

	@Override
	public void setTelephone(String telephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone = telephone;
	}

	@JSON
	@Override
	public String getMailingAdd() {
		if (_mailingAdd == null) {
			return "";
		}
		else {
			return _mailingAdd;
		}
	}

	@Override
	public void setMailingAdd(String mailingAdd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mailingAdd = mailingAdd;
	}

	@JSON
	@Override
	public String getPermanentAdd() {
		if (_permanentAdd == null) {
			return "";
		}
		else {
			return _permanentAdd;
		}
	}

	@Override
	public void setPermanentAdd(String permanentAdd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permanentAdd = permanentAdd;
	}

	@JSON
	@Override
	public String getFax() {
		if (_fax == null) {
			return "";
		}
		else {
			return _fax;
		}
	}

	@Override
	public void setFax(String fax) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fax = fax;
	}

	@JSON
	@Override
	public String getWebsite() {
		if (_website == null) {
			return "";
		}
		else {
			return _website;
		}
	}

	@Override
	public void setWebsite(String website) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_website = website;
	}

	@JSON
	@Override
	public String getPostalCode() {
		if (_postalCode == null) {
			return "";
		}
		else {
			return _postalCode;
		}
	}

	@Override
	public void setPostalCode(String postalCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postalCode = postalCode;
	}

	@JSON
	@Override
	public String getParish() {
		if (_parish == null) {
			return "";
		}
		else {
			return _parish;
		}
	}

	@Override
	public void setParish(String parish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parish = parish;
	}

	@JSON
	@Override
	public String getOfficeEmail() {
		if (_officeEmail == null) {
			return "";
		}
		else {
			return _officeEmail;
		}
	}

	@Override
	public void setOfficeEmail(String officeEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officeEmail = officeEmail;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@JSON
	@Override
	public Date getIncorporationDate() {
		return _incorporationDate;
	}

	@Override
	public void setIncorporationDate(Date incorporationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_incorporationDate = incorporationDate;
	}

	@JSON
	@Override
	public String getIncorporationPlace() {
		if (_incorporationPlace == null) {
			return "";
		}
		else {
			return _incorporationPlace;
		}
	}

	@Override
	public void setIncorporationPlace(String incorporationPlace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_incorporationPlace = incorporationPlace;
	}

	@JSON
	@Override
	public String getIsUserPrimaryUser() {
		if (_isUserPrimaryUser == null) {
			return "";
		}
		else {
			return _isUserPrimaryUser;
		}
	}

	@Override
	public void setIsUserPrimaryUser(String isUserPrimaryUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isUserPrimaryUser = isUserPrimaryUser;
	}

	@JSON
	@Override
	public String getEntityNumber() {
		if (_entityNumber == null) {
			return "";
		}
		else {
			return _entityNumber;
		}
	}

	@Override
	public void setEntityNumber(String entityNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityNumber = entityNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEntityNumber() {
		return getColumnOriginalValue("entityNumber");
	}

	@JSON
	@Override
	public String getUserType() {
		if (_userType == null) {
			return "";
		}
		else {
			return _userType;
		}
	}

	@Override
	public void setUserType(String userType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userType = userType;
	}

	@JSON
	@Override
	public String getTrn() {
		if (_trn == null) {
			return "";
		}
		else {
			return _trn;
		}
	}

	@Override
	public void setTrn(String trn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trn = trn;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(EntityInformation.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EntityInformation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EntityInformation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EntityInformation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntityInformationImpl entityInformationImpl =
			new EntityInformationImpl();

		entityInformationImpl.setUuid(getUuid());
		entityInformationImpl.setEntityInfoId(getEntityInfoId());
		entityInformationImpl.setGroupId(getGroupId());
		entityInformationImpl.setCompanyId(getCompanyId());
		entityInformationImpl.setUserId(getUserId());
		entityInformationImpl.setUserName(getUserName());
		entityInformationImpl.setCreateDate(getCreateDate());
		entityInformationImpl.setModifiedDate(getModifiedDate());
		entityInformationImpl.setEntityName(getEntityName());
		entityInformationImpl.setEntityAddressOne(getEntityAddressOne());
		entityInformationImpl.setEntityAddressTwo(getEntityAddressTwo());
		entityInformationImpl.setTelephone(getTelephone());
		entityInformationImpl.setMailingAdd(getMailingAdd());
		entityInformationImpl.setPermanentAdd(getPermanentAdd());
		entityInformationImpl.setFax(getFax());
		entityInformationImpl.setWebsite(getWebsite());
		entityInformationImpl.setPostalCode(getPostalCode());
		entityInformationImpl.setParish(getParish());
		entityInformationImpl.setOfficeEmail(getOfficeEmail());
		entityInformationImpl.setCountry(getCountry());
		entityInformationImpl.setIncorporationDate(getIncorporationDate());
		entityInformationImpl.setIncorporationPlace(getIncorporationPlace());
		entityInformationImpl.setIsUserPrimaryUser(getIsUserPrimaryUser());
		entityInformationImpl.setEntityNumber(getEntityNumber());
		entityInformationImpl.setUserType(getUserType());
		entityInformationImpl.setTrn(getTrn());

		entityInformationImpl.resetOriginalValues();

		return entityInformationImpl;
	}

	@Override
	public EntityInformation cloneWithOriginalValues() {
		EntityInformationImpl entityInformationImpl =
			new EntityInformationImpl();

		entityInformationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		entityInformationImpl.setEntityInfoId(
			this.<Long>getColumnOriginalValue("entityInfoId"));
		entityInformationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		entityInformationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		entityInformationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		entityInformationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		entityInformationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		entityInformationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		entityInformationImpl.setEntityName(
			this.<String>getColumnOriginalValue("entityName"));
		entityInformationImpl.setEntityAddressOne(
			this.<String>getColumnOriginalValue("entityAddressOne"));
		entityInformationImpl.setEntityAddressTwo(
			this.<String>getColumnOriginalValue("entityAddressTwo"));
		entityInformationImpl.setTelephone(
			this.<String>getColumnOriginalValue("telephone"));
		entityInformationImpl.setMailingAdd(
			this.<String>getColumnOriginalValue("mailingAdd"));
		entityInformationImpl.setPermanentAdd(
			this.<String>getColumnOriginalValue("permanentAdd"));
		entityInformationImpl.setFax(
			this.<String>getColumnOriginalValue("fax"));
		entityInformationImpl.setWebsite(
			this.<String>getColumnOriginalValue("website"));
		entityInformationImpl.setPostalCode(
			this.<String>getColumnOriginalValue("postalCode"));
		entityInformationImpl.setParish(
			this.<String>getColumnOriginalValue("parish"));
		entityInformationImpl.setOfficeEmail(
			this.<String>getColumnOriginalValue("officeEmail"));
		entityInformationImpl.setCountry(
			this.<String>getColumnOriginalValue("country"));
		entityInformationImpl.setIncorporationDate(
			this.<Date>getColumnOriginalValue("incorporationDate"));
		entityInformationImpl.setIncorporationPlace(
			this.<String>getColumnOriginalValue("incorporationPlace"));
		entityInformationImpl.setIsUserPrimaryUser(
			this.<String>getColumnOriginalValue("isUserPrimaryUser"));
		entityInformationImpl.setEntityNumber(
			this.<String>getColumnOriginalValue("entityNumber"));
		entityInformationImpl.setUserType(
			this.<String>getColumnOriginalValue("userType"));
		entityInformationImpl.setTrn(
			this.<String>getColumnOriginalValue("trn"));

		return entityInformationImpl;
	}

	@Override
	public int compareTo(EntityInformation entityInformation) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), entityInformation.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EntityInformation)) {
			return false;
		}

		EntityInformation entityInformation = (EntityInformation)object;

		long primaryKey = entityInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EntityInformation> toCacheModel() {
		EntityInformationCacheModel entityInformationCacheModel =
			new EntityInformationCacheModel();

		entityInformationCacheModel.uuid = getUuid();

		String uuid = entityInformationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			entityInformationCacheModel.uuid = null;
		}

		entityInformationCacheModel.entityInfoId = getEntityInfoId();

		entityInformationCacheModel.groupId = getGroupId();

		entityInformationCacheModel.companyId = getCompanyId();

		entityInformationCacheModel.userId = getUserId();

		entityInformationCacheModel.userName = getUserName();

		String userName = entityInformationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			entityInformationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			entityInformationCacheModel.createDate = createDate.getTime();
		}
		else {
			entityInformationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			entityInformationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			entityInformationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		entityInformationCacheModel.entityName = getEntityName();

		String entityName = entityInformationCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			entityInformationCacheModel.entityName = null;
		}

		entityInformationCacheModel.entityAddressOne = getEntityAddressOne();

		String entityAddressOne = entityInformationCacheModel.entityAddressOne;

		if ((entityAddressOne != null) && (entityAddressOne.length() == 0)) {
			entityInformationCacheModel.entityAddressOne = null;
		}

		entityInformationCacheModel.entityAddressTwo = getEntityAddressTwo();

		String entityAddressTwo = entityInformationCacheModel.entityAddressTwo;

		if ((entityAddressTwo != null) && (entityAddressTwo.length() == 0)) {
			entityInformationCacheModel.entityAddressTwo = null;
		}

		entityInformationCacheModel.telephone = getTelephone();

		String telephone = entityInformationCacheModel.telephone;

		if ((telephone != null) && (telephone.length() == 0)) {
			entityInformationCacheModel.telephone = null;
		}

		entityInformationCacheModel.mailingAdd = getMailingAdd();

		String mailingAdd = entityInformationCacheModel.mailingAdd;

		if ((mailingAdd != null) && (mailingAdd.length() == 0)) {
			entityInformationCacheModel.mailingAdd = null;
		}

		entityInformationCacheModel.permanentAdd = getPermanentAdd();

		String permanentAdd = entityInformationCacheModel.permanentAdd;

		if ((permanentAdd != null) && (permanentAdd.length() == 0)) {
			entityInformationCacheModel.permanentAdd = null;
		}

		entityInformationCacheModel.fax = getFax();

		String fax = entityInformationCacheModel.fax;

		if ((fax != null) && (fax.length() == 0)) {
			entityInformationCacheModel.fax = null;
		}

		entityInformationCacheModel.website = getWebsite();

		String website = entityInformationCacheModel.website;

		if ((website != null) && (website.length() == 0)) {
			entityInformationCacheModel.website = null;
		}

		entityInformationCacheModel.postalCode = getPostalCode();

		String postalCode = entityInformationCacheModel.postalCode;

		if ((postalCode != null) && (postalCode.length() == 0)) {
			entityInformationCacheModel.postalCode = null;
		}

		entityInformationCacheModel.parish = getParish();

		String parish = entityInformationCacheModel.parish;

		if ((parish != null) && (parish.length() == 0)) {
			entityInformationCacheModel.parish = null;
		}

		entityInformationCacheModel.officeEmail = getOfficeEmail();

		String officeEmail = entityInformationCacheModel.officeEmail;

		if ((officeEmail != null) && (officeEmail.length() == 0)) {
			entityInformationCacheModel.officeEmail = null;
		}

		entityInformationCacheModel.country = getCountry();

		String country = entityInformationCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			entityInformationCacheModel.country = null;
		}

		Date incorporationDate = getIncorporationDate();

		if (incorporationDate != null) {
			entityInformationCacheModel.incorporationDate =
				incorporationDate.getTime();
		}
		else {
			entityInformationCacheModel.incorporationDate = Long.MIN_VALUE;
		}

		entityInformationCacheModel.incorporationPlace =
			getIncorporationPlace();

		String incorporationPlace =
			entityInformationCacheModel.incorporationPlace;

		if ((incorporationPlace != null) &&
			(incorporationPlace.length() == 0)) {

			entityInformationCacheModel.incorporationPlace = null;
		}

		entityInformationCacheModel.isUserPrimaryUser = getIsUserPrimaryUser();

		String isUserPrimaryUser =
			entityInformationCacheModel.isUserPrimaryUser;

		if ((isUserPrimaryUser != null) && (isUserPrimaryUser.length() == 0)) {
			entityInformationCacheModel.isUserPrimaryUser = null;
		}

		entityInformationCacheModel.entityNumber = getEntityNumber();

		String entityNumber = entityInformationCacheModel.entityNumber;

		if ((entityNumber != null) && (entityNumber.length() == 0)) {
			entityInformationCacheModel.entityNumber = null;
		}

		entityInformationCacheModel.userType = getUserType();

		String userType = entityInformationCacheModel.userType;

		if ((userType != null) && (userType.length() == 0)) {
			entityInformationCacheModel.userType = null;
		}

		entityInformationCacheModel.trn = getTrn();

		String trn = entityInformationCacheModel.trn;

		if ((trn != null) && (trn.length() == 0)) {
			entityInformationCacheModel.trn = null;
		}

		return entityInformationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EntityInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EntityInformation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EntityInformation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(EntityInformation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EntityInformation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EntityInformation.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _entityInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityName;
	private String _entityAddressOne;
	private String _entityAddressTwo;
	private String _telephone;
	private String _mailingAdd;
	private String _permanentAdd;
	private String _fax;
	private String _website;
	private String _postalCode;
	private String _parish;
	private String _officeEmail;
	private String _country;
	private Date _incorporationDate;
	private String _incorporationPlace;
	private String _isUserPrimaryUser;
	private String _entityNumber;
	private String _userType;
	private String _trn;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EntityInformation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EntityInformation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("entityInfoId", _entityInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityName", _entityName);
		_columnOriginalValues.put("entityAddressOne", _entityAddressOne);
		_columnOriginalValues.put("entityAddressTwo", _entityAddressTwo);
		_columnOriginalValues.put("telephone", _telephone);
		_columnOriginalValues.put("mailingAdd", _mailingAdd);
		_columnOriginalValues.put("permanentAdd", _permanentAdd);
		_columnOriginalValues.put("fax", _fax);
		_columnOriginalValues.put("website", _website);
		_columnOriginalValues.put("postalCode", _postalCode);
		_columnOriginalValues.put("parish", _parish);
		_columnOriginalValues.put("officeEmail", _officeEmail);
		_columnOriginalValues.put("country", _country);
		_columnOriginalValues.put("incorporationDate", _incorporationDate);
		_columnOriginalValues.put("incorporationPlace", _incorporationPlace);
		_columnOriginalValues.put("isUserPrimaryUser", _isUserPrimaryUser);
		_columnOriginalValues.put("entityNumber", _entityNumber);
		_columnOriginalValues.put("userType", _userType);
		_columnOriginalValues.put("trn", _trn);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("entityInfoId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("entityName", 256L);

		columnBitmasks.put("entityAddressOne", 512L);

		columnBitmasks.put("entityAddressTwo", 1024L);

		columnBitmasks.put("telephone", 2048L);

		columnBitmasks.put("mailingAdd", 4096L);

		columnBitmasks.put("permanentAdd", 8192L);

		columnBitmasks.put("fax", 16384L);

		columnBitmasks.put("website", 32768L);

		columnBitmasks.put("postalCode", 65536L);

		columnBitmasks.put("parish", 131072L);

		columnBitmasks.put("officeEmail", 262144L);

		columnBitmasks.put("country", 524288L);

		columnBitmasks.put("incorporationDate", 1048576L);

		columnBitmasks.put("incorporationPlace", 2097152L);

		columnBitmasks.put("isUserPrimaryUser", 4194304L);

		columnBitmasks.put("entityNumber", 8388608L);

		columnBitmasks.put("userType", 16777216L);

		columnBitmasks.put("trn", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EntityInformation _escapedModel;

}