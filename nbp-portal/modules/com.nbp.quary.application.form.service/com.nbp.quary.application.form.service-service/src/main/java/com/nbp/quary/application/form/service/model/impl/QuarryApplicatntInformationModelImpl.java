/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.quary.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.quary.application.form.service.model.QuarryApplicatntInformation;
import com.nbp.quary.application.form.service.model.QuarryApplicatntInformationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuarryApplicatntInformation service. Represents a row in the &quot;nbp_quarry_applicant_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuarryApplicatntInformationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuarryApplicatntInformationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuarryApplicatntInformationImpl
 * @generated
 */
@JSON(strict = true)
public class QuarryApplicatntInformationModelImpl
	extends BaseModelImpl<QuarryApplicatntInformation>
	implements QuarryApplicatntInformationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quarry applicatnt information model instance should use the <code>QuarryApplicatntInformation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_quarry_applicant_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"auarryApplicantId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"nameOfApplicant", Types.VARCHAR},
		{"addressOfApplicant", Types.VARCHAR},
		{"telephoneOfApplicant", Types.VARCHAR},
		{"emailOfApplicant", Types.VARCHAR}, {"trnAndTcc", Types.VARCHAR},
		{"quarryApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("auarryApplicantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nameOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephoneOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trnAndTcc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quarryApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_quarry_applicant_info (auarryApplicantId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nameOfApplicant VARCHAR(75) null,addressOfApplicant VARCHAR(500) null,telephoneOfApplicant VARCHAR(75) null,emailOfApplicant VARCHAR(75) null,trnAndTcc VARCHAR(75) null,quarryApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_quarry_applicant_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quarryApplicatntInformation.auarryApplicantId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_quarry_applicant_info.auarryApplicantId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUARRYAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AUARRYAPPLICANTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public QuarryApplicatntInformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _auarryApplicantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuarryApplicantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _auarryApplicantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuarryApplicatntInformation.class;
	}

	@Override
	public String getModelClassName() {
		return QuarryApplicatntInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuarryApplicatntInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuarryApplicatntInformation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryApplicatntInformation, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(QuarryApplicatntInformation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuarryApplicatntInformation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuarryApplicatntInformation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuarryApplicatntInformation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuarryApplicatntInformation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuarryApplicatntInformation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<QuarryApplicatntInformation, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<QuarryApplicatntInformation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<QuarryApplicatntInformation, Object>>();

			attributeGetterFunctions.put(
				"auarryApplicantId",
				QuarryApplicatntInformation::getAuarryApplicantId);
			attributeGetterFunctions.put(
				"groupId", QuarryApplicatntInformation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", QuarryApplicatntInformation::getCompanyId);
			attributeGetterFunctions.put(
				"userId", QuarryApplicatntInformation::getUserId);
			attributeGetterFunctions.put(
				"userName", QuarryApplicatntInformation::getUserName);
			attributeGetterFunctions.put(
				"createDate", QuarryApplicatntInformation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", QuarryApplicatntInformation::getModifiedDate);
			attributeGetterFunctions.put(
				"nameOfApplicant",
				QuarryApplicatntInformation::getNameOfApplicant);
			attributeGetterFunctions.put(
				"addressOfApplicant",
				QuarryApplicatntInformation::getAddressOfApplicant);
			attributeGetterFunctions.put(
				"telephoneOfApplicant",
				QuarryApplicatntInformation::getTelephoneOfApplicant);
			attributeGetterFunctions.put(
				"emailOfApplicant",
				QuarryApplicatntInformation::getEmailOfApplicant);
			attributeGetterFunctions.put(
				"trnAndTcc", QuarryApplicatntInformation::getTrnAndTcc);
			attributeGetterFunctions.put(
				"quarryApplicationId",
				QuarryApplicatntInformation::getQuarryApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<QuarryApplicatntInformation, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<QuarryApplicatntInformation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<QuarryApplicatntInformation, ?>>();

			attributeSetterBiConsumers.put(
				"auarryApplicantId",
				(BiConsumer<QuarryApplicatntInformation, Long>)
					QuarryApplicatntInformation::setAuarryApplicantId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<QuarryApplicatntInformation, Long>)
					QuarryApplicatntInformation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<QuarryApplicatntInformation, Long>)
					QuarryApplicatntInformation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<QuarryApplicatntInformation, Long>)
					QuarryApplicatntInformation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<QuarryApplicatntInformation, String>)
					QuarryApplicatntInformation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<QuarryApplicatntInformation, Date>)
					QuarryApplicatntInformation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<QuarryApplicatntInformation, Date>)
					QuarryApplicatntInformation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nameOfApplicant",
				(BiConsumer<QuarryApplicatntInformation, String>)
					QuarryApplicatntInformation::setNameOfApplicant);
			attributeSetterBiConsumers.put(
				"addressOfApplicant",
				(BiConsumer<QuarryApplicatntInformation, String>)
					QuarryApplicatntInformation::setAddressOfApplicant);
			attributeSetterBiConsumers.put(
				"telephoneOfApplicant",
				(BiConsumer<QuarryApplicatntInformation, String>)
					QuarryApplicatntInformation::setTelephoneOfApplicant);
			attributeSetterBiConsumers.put(
				"emailOfApplicant",
				(BiConsumer<QuarryApplicatntInformation, String>)
					QuarryApplicatntInformation::setEmailOfApplicant);
			attributeSetterBiConsumers.put(
				"trnAndTcc",
				(BiConsumer<QuarryApplicatntInformation, String>)
					QuarryApplicatntInformation::setTrnAndTcc);
			attributeSetterBiConsumers.put(
				"quarryApplicationId",
				(BiConsumer<QuarryApplicatntInformation, Long>)
					QuarryApplicatntInformation::setQuarryApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAuarryApplicantId() {
		return _auarryApplicantId;
	}

	@Override
	public void setAuarryApplicantId(long auarryApplicantId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auarryApplicantId = auarryApplicantId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNameOfApplicant() {
		if (_nameOfApplicant == null) {
			return "";
		}
		else {
			return _nameOfApplicant;
		}
	}

	@Override
	public void setNameOfApplicant(String nameOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfApplicant = nameOfApplicant;
	}

	@JSON
	@Override
	public String getAddressOfApplicant() {
		if (_addressOfApplicant == null) {
			return "";
		}
		else {
			return _addressOfApplicant;
		}
	}

	@Override
	public void setAddressOfApplicant(String addressOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressOfApplicant = addressOfApplicant;
	}

	@JSON
	@Override
	public String getTelephoneOfApplicant() {
		if (_telephoneOfApplicant == null) {
			return "";
		}
		else {
			return _telephoneOfApplicant;
		}
	}

	@Override
	public void setTelephoneOfApplicant(String telephoneOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephoneOfApplicant = telephoneOfApplicant;
	}

	@JSON
	@Override
	public String getEmailOfApplicant() {
		if (_emailOfApplicant == null) {
			return "";
		}
		else {
			return _emailOfApplicant;
		}
	}

	@Override
	public void setEmailOfApplicant(String emailOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailOfApplicant = emailOfApplicant;
	}

	@JSON
	@Override
	public String getTrnAndTcc() {
		if (_trnAndTcc == null) {
			return "";
		}
		else {
			return _trnAndTcc;
		}
	}

	@Override
	public void setTrnAndTcc(String trnAndTcc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trnAndTcc = trnAndTcc;
	}

	@JSON
	@Override
	public long getQuarryApplicationId() {
		return _quarryApplicationId;
	}

	@Override
	public void setQuarryApplicationId(long quarryApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quarryApplicationId = quarryApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuarryApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("quarryApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), QuarryApplicatntInformation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuarryApplicatntInformation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuarryApplicatntInformation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuarryApplicatntInformationImpl quarryApplicatntInformationImpl =
			new QuarryApplicatntInformationImpl();

		quarryApplicatntInformationImpl.setAuarryApplicantId(
			getAuarryApplicantId());
		quarryApplicatntInformationImpl.setGroupId(getGroupId());
		quarryApplicatntInformationImpl.setCompanyId(getCompanyId());
		quarryApplicatntInformationImpl.setUserId(getUserId());
		quarryApplicatntInformationImpl.setUserName(getUserName());
		quarryApplicatntInformationImpl.setCreateDate(getCreateDate());
		quarryApplicatntInformationImpl.setModifiedDate(getModifiedDate());
		quarryApplicatntInformationImpl.setNameOfApplicant(
			getNameOfApplicant());
		quarryApplicatntInformationImpl.setAddressOfApplicant(
			getAddressOfApplicant());
		quarryApplicatntInformationImpl.setTelephoneOfApplicant(
			getTelephoneOfApplicant());
		quarryApplicatntInformationImpl.setEmailOfApplicant(
			getEmailOfApplicant());
		quarryApplicatntInformationImpl.setTrnAndTcc(getTrnAndTcc());
		quarryApplicatntInformationImpl.setQuarryApplicationId(
			getQuarryApplicationId());

		quarryApplicatntInformationImpl.resetOriginalValues();

		return quarryApplicatntInformationImpl;
	}

	@Override
	public QuarryApplicatntInformation cloneWithOriginalValues() {
		QuarryApplicatntInformationImpl quarryApplicatntInformationImpl =
			new QuarryApplicatntInformationImpl();

		quarryApplicatntInformationImpl.setAuarryApplicantId(
			this.<Long>getColumnOriginalValue("auarryApplicantId"));
		quarryApplicatntInformationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		quarryApplicatntInformationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		quarryApplicatntInformationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		quarryApplicatntInformationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		quarryApplicatntInformationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		quarryApplicatntInformationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		quarryApplicatntInformationImpl.setNameOfApplicant(
			this.<String>getColumnOriginalValue("nameOfApplicant"));
		quarryApplicatntInformationImpl.setAddressOfApplicant(
			this.<String>getColumnOriginalValue("addressOfApplicant"));
		quarryApplicatntInformationImpl.setTelephoneOfApplicant(
			this.<String>getColumnOriginalValue("telephoneOfApplicant"));
		quarryApplicatntInformationImpl.setEmailOfApplicant(
			this.<String>getColumnOriginalValue("emailOfApplicant"));
		quarryApplicatntInformationImpl.setTrnAndTcc(
			this.<String>getColumnOriginalValue("trnAndTcc"));
		quarryApplicatntInformationImpl.setQuarryApplicationId(
			this.<Long>getColumnOriginalValue("quarryApplicationId"));

		return quarryApplicatntInformationImpl;
	}

	@Override
	public int compareTo(
		QuarryApplicatntInformation quarryApplicatntInformation) {

		long primaryKey = quarryApplicatntInformation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuarryApplicatntInformation)) {
			return false;
		}

		QuarryApplicatntInformation quarryApplicatntInformation =
			(QuarryApplicatntInformation)object;

		long primaryKey = quarryApplicatntInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuarryApplicatntInformation> toCacheModel() {
		QuarryApplicatntInformationCacheModel
			quarryApplicatntInformationCacheModel =
				new QuarryApplicatntInformationCacheModel();

		quarryApplicatntInformationCacheModel.auarryApplicantId =
			getAuarryApplicantId();

		quarryApplicatntInformationCacheModel.groupId = getGroupId();

		quarryApplicatntInformationCacheModel.companyId = getCompanyId();

		quarryApplicatntInformationCacheModel.userId = getUserId();

		quarryApplicatntInformationCacheModel.userName = getUserName();

		String userName = quarryApplicatntInformationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			quarryApplicatntInformationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			quarryApplicatntInformationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			quarryApplicatntInformationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			quarryApplicatntInformationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			quarryApplicatntInformationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		quarryApplicatntInformationCacheModel.nameOfApplicant =
			getNameOfApplicant();

		String nameOfApplicant =
			quarryApplicatntInformationCacheModel.nameOfApplicant;

		if ((nameOfApplicant != null) && (nameOfApplicant.length() == 0)) {
			quarryApplicatntInformationCacheModel.nameOfApplicant = null;
		}

		quarryApplicatntInformationCacheModel.addressOfApplicant =
			getAddressOfApplicant();

		String addressOfApplicant =
			quarryApplicatntInformationCacheModel.addressOfApplicant;

		if ((addressOfApplicant != null) &&
			(addressOfApplicant.length() == 0)) {

			quarryApplicatntInformationCacheModel.addressOfApplicant = null;
		}

		quarryApplicatntInformationCacheModel.telephoneOfApplicant =
			getTelephoneOfApplicant();

		String telephoneOfApplicant =
			quarryApplicatntInformationCacheModel.telephoneOfApplicant;

		if ((telephoneOfApplicant != null) &&
			(telephoneOfApplicant.length() == 0)) {

			quarryApplicatntInformationCacheModel.telephoneOfApplicant = null;
		}

		quarryApplicatntInformationCacheModel.emailOfApplicant =
			getEmailOfApplicant();

		String emailOfApplicant =
			quarryApplicatntInformationCacheModel.emailOfApplicant;

		if ((emailOfApplicant != null) && (emailOfApplicant.length() == 0)) {
			quarryApplicatntInformationCacheModel.emailOfApplicant = null;
		}

		quarryApplicatntInformationCacheModel.trnAndTcc = getTrnAndTcc();

		String trnAndTcc = quarryApplicatntInformationCacheModel.trnAndTcc;

		if ((trnAndTcc != null) && (trnAndTcc.length() == 0)) {
			quarryApplicatntInformationCacheModel.trnAndTcc = null;
		}

		quarryApplicatntInformationCacheModel.quarryApplicationId =
			getQuarryApplicationId();

		return quarryApplicatntInformationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuarryApplicatntInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QuarryApplicatntInformation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryApplicatntInformation, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(QuarryApplicatntInformation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, QuarryApplicatntInformation>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						QuarryApplicatntInformation.class, ModelWrapper.class);

	}

	private long _auarryApplicantId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nameOfApplicant;
	private String _addressOfApplicant;
	private String _telephoneOfApplicant;
	private String _emailOfApplicant;
	private String _trnAndTcc;
	private long _quarryApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<QuarryApplicatntInformation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuarryApplicatntInformation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("auarryApplicantId", _auarryApplicantId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nameOfApplicant", _nameOfApplicant);
		_columnOriginalValues.put("addressOfApplicant", _addressOfApplicant);
		_columnOriginalValues.put(
			"telephoneOfApplicant", _telephoneOfApplicant);
		_columnOriginalValues.put("emailOfApplicant", _emailOfApplicant);
		_columnOriginalValues.put("trnAndTcc", _trnAndTcc);
		_columnOriginalValues.put("quarryApplicationId", _quarryApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("auarryApplicantId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("nameOfApplicant", 128L);

		columnBitmasks.put("addressOfApplicant", 256L);

		columnBitmasks.put("telephoneOfApplicant", 512L);

		columnBitmasks.put("emailOfApplicant", 1024L);

		columnBitmasks.put("trnAndTcc", 2048L);

		columnBitmasks.put("quarryApplicationId", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuarryApplicatntInformation _escapedModel;

}