/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.quary.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.quary.application.form.service.model.QuarryMaterialInformation;
import com.nbp.quary.application.form.service.model.QuarryMaterialInformationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuarryMaterialInformation service. Represents a row in the &quot;nbp_quarry_material_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuarryMaterialInformationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuarryMaterialInformationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuarryMaterialInformationImpl
 * @generated
 */
@JSON(strict = true)
public class QuarryMaterialInformationModelImpl
	extends BaseModelImpl<QuarryMaterialInformation>
	implements QuarryMaterialInformationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quarry material information model instance should use the <code>QuarryMaterialInformation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_quarry_material_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"materialInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"typeOfMaterial", Types.VARCHAR},
		{"reserveEstimate", Types.VARCHAR},
		{"estimateDailyProd", Types.VARCHAR},
		{"actualSizeOfQuary", Types.VARCHAR},
		{"hasQuarrySubmitted", Types.VARCHAR},
		{"sixCopiesOfLocation", Types.VARCHAR},
		{"legalAccessToLand", Types.VARCHAR},
		{"ownerShipEnclosed", Types.VARCHAR},
		{"adjacentPropOwner", Types.VARCHAR},
		{"quarryApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("materialInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeOfMaterial", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reserveEstimate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estimateDailyProd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actualSizeOfQuary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hasQuarrySubmitted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sixCopiesOfLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("legalAccessToLand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerShipEnclosed", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("adjacentPropOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quarryApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_quarry_material_info (materialInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,typeOfMaterial VARCHAR(75) null,reserveEstimate VARCHAR(75) null,estimateDailyProd VARCHAR(75) null,actualSizeOfQuary VARCHAR(75) null,hasQuarrySubmitted VARCHAR(75) null,sixCopiesOfLocation VARCHAR(500) null,legalAccessToLand VARCHAR(75) null,ownerShipEnclosed VARCHAR(75) null,adjacentPropOwner VARCHAR(75) null,quarryApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_quarry_material_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quarryMaterialInformation.materialInfoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_quarry_material_info.materialInfoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUARRYAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MATERIALINFOID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public QuarryMaterialInformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _materialInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMaterialInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _materialInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuarryMaterialInformation.class;
	}

	@Override
	public String getModelClassName() {
		return QuarryMaterialInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuarryMaterialInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuarryMaterialInformation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryMaterialInformation, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuarryMaterialInformation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuarryMaterialInformation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuarryMaterialInformation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuarryMaterialInformation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuarryMaterialInformation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuarryMaterialInformation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<QuarryMaterialInformation, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<QuarryMaterialInformation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<QuarryMaterialInformation, Object>>();

			attributeGetterFunctions.put(
				"materialInfoId", QuarryMaterialInformation::getMaterialInfoId);
			attributeGetterFunctions.put(
				"groupId", QuarryMaterialInformation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", QuarryMaterialInformation::getCompanyId);
			attributeGetterFunctions.put(
				"userId", QuarryMaterialInformation::getUserId);
			attributeGetterFunctions.put(
				"userName", QuarryMaterialInformation::getUserName);
			attributeGetterFunctions.put(
				"createDate", QuarryMaterialInformation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", QuarryMaterialInformation::getModifiedDate);
			attributeGetterFunctions.put(
				"typeOfMaterial", QuarryMaterialInformation::getTypeOfMaterial);
			attributeGetterFunctions.put(
				"reserveEstimate",
				QuarryMaterialInformation::getReserveEstimate);
			attributeGetterFunctions.put(
				"estimateDailyProd",
				QuarryMaterialInformation::getEstimateDailyProd);
			attributeGetterFunctions.put(
				"actualSizeOfQuary",
				QuarryMaterialInformation::getActualSizeOfQuary);
			attributeGetterFunctions.put(
				"hasQuarrySubmitted",
				QuarryMaterialInformation::getHasQuarrySubmitted);
			attributeGetterFunctions.put(
				"sixCopiesOfLocation",
				QuarryMaterialInformation::getSixCopiesOfLocation);
			attributeGetterFunctions.put(
				"legalAccessToLand",
				QuarryMaterialInformation::getLegalAccessToLand);
			attributeGetterFunctions.put(
				"ownerShipEnclosed",
				QuarryMaterialInformation::getOwnerShipEnclosed);
			attributeGetterFunctions.put(
				"adjacentPropOwner",
				QuarryMaterialInformation::getAdjacentPropOwner);
			attributeGetterFunctions.put(
				"quarryApplicationId",
				QuarryMaterialInformation::getQuarryApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<QuarryMaterialInformation, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<QuarryMaterialInformation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<QuarryMaterialInformation, ?>>();

			attributeSetterBiConsumers.put(
				"materialInfoId",
				(BiConsumer<QuarryMaterialInformation, Long>)
					QuarryMaterialInformation::setMaterialInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<QuarryMaterialInformation, Long>)
					QuarryMaterialInformation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<QuarryMaterialInformation, Long>)
					QuarryMaterialInformation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<QuarryMaterialInformation, Long>)
					QuarryMaterialInformation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<QuarryMaterialInformation, Date>)
					QuarryMaterialInformation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<QuarryMaterialInformation, Date>)
					QuarryMaterialInformation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"typeOfMaterial",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setTypeOfMaterial);
			attributeSetterBiConsumers.put(
				"reserveEstimate",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setReserveEstimate);
			attributeSetterBiConsumers.put(
				"estimateDailyProd",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setEstimateDailyProd);
			attributeSetterBiConsumers.put(
				"actualSizeOfQuary",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setActualSizeOfQuary);
			attributeSetterBiConsumers.put(
				"hasQuarrySubmitted",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setHasQuarrySubmitted);
			attributeSetterBiConsumers.put(
				"sixCopiesOfLocation",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setSixCopiesOfLocation);
			attributeSetterBiConsumers.put(
				"legalAccessToLand",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setLegalAccessToLand);
			attributeSetterBiConsumers.put(
				"ownerShipEnclosed",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setOwnerShipEnclosed);
			attributeSetterBiConsumers.put(
				"adjacentPropOwner",
				(BiConsumer<QuarryMaterialInformation, String>)
					QuarryMaterialInformation::setAdjacentPropOwner);
			attributeSetterBiConsumers.put(
				"quarryApplicationId",
				(BiConsumer<QuarryMaterialInformation, Long>)
					QuarryMaterialInformation::setQuarryApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMaterialInfoId() {
		return _materialInfoId;
	}

	@Override
	public void setMaterialInfoId(long materialInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_materialInfoId = materialInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTypeOfMaterial() {
		if (_typeOfMaterial == null) {
			return "";
		}
		else {
			return _typeOfMaterial;
		}
	}

	@Override
	public void setTypeOfMaterial(String typeOfMaterial) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfMaterial = typeOfMaterial;
	}

	@JSON
	@Override
	public String getReserveEstimate() {
		if (_reserveEstimate == null) {
			return "";
		}
		else {
			return _reserveEstimate;
		}
	}

	@Override
	public void setReserveEstimate(String reserveEstimate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reserveEstimate = reserveEstimate;
	}

	@JSON
	@Override
	public String getEstimateDailyProd() {
		if (_estimateDailyProd == null) {
			return "";
		}
		else {
			return _estimateDailyProd;
		}
	}

	@Override
	public void setEstimateDailyProd(String estimateDailyProd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estimateDailyProd = estimateDailyProd;
	}

	@JSON
	@Override
	public String getActualSizeOfQuary() {
		if (_actualSizeOfQuary == null) {
			return "";
		}
		else {
			return _actualSizeOfQuary;
		}
	}

	@Override
	public void setActualSizeOfQuary(String actualSizeOfQuary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_actualSizeOfQuary = actualSizeOfQuary;
	}

	@JSON
	@Override
	public String getHasQuarrySubmitted() {
		if (_hasQuarrySubmitted == null) {
			return "";
		}
		else {
			return _hasQuarrySubmitted;
		}
	}

	@Override
	public void setHasQuarrySubmitted(String hasQuarrySubmitted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hasQuarrySubmitted = hasQuarrySubmitted;
	}

	@JSON
	@Override
	public String getSixCopiesOfLocation() {
		if (_sixCopiesOfLocation == null) {
			return "";
		}
		else {
			return _sixCopiesOfLocation;
		}
	}

	@Override
	public void setSixCopiesOfLocation(String sixCopiesOfLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sixCopiesOfLocation = sixCopiesOfLocation;
	}

	@JSON
	@Override
	public String getLegalAccessToLand() {
		if (_legalAccessToLand == null) {
			return "";
		}
		else {
			return _legalAccessToLand;
		}
	}

	@Override
	public void setLegalAccessToLand(String legalAccessToLand) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_legalAccessToLand = legalAccessToLand;
	}

	@JSON
	@Override
	public String getOwnerShipEnclosed() {
		if (_ownerShipEnclosed == null) {
			return "";
		}
		else {
			return _ownerShipEnclosed;
		}
	}

	@Override
	public void setOwnerShipEnclosed(String ownerShipEnclosed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerShipEnclosed = ownerShipEnclosed;
	}

	@JSON
	@Override
	public String getAdjacentPropOwner() {
		if (_adjacentPropOwner == null) {
			return "";
		}
		else {
			return _adjacentPropOwner;
		}
	}

	@Override
	public void setAdjacentPropOwner(String adjacentPropOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_adjacentPropOwner = adjacentPropOwner;
	}

	@JSON
	@Override
	public long getQuarryApplicationId() {
		return _quarryApplicationId;
	}

	@Override
	public void setQuarryApplicationId(long quarryApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quarryApplicationId = quarryApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuarryApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("quarryApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), QuarryMaterialInformation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuarryMaterialInformation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuarryMaterialInformation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuarryMaterialInformationImpl quarryMaterialInformationImpl =
			new QuarryMaterialInformationImpl();

		quarryMaterialInformationImpl.setMaterialInfoId(getMaterialInfoId());
		quarryMaterialInformationImpl.setGroupId(getGroupId());
		quarryMaterialInformationImpl.setCompanyId(getCompanyId());
		quarryMaterialInformationImpl.setUserId(getUserId());
		quarryMaterialInformationImpl.setUserName(getUserName());
		quarryMaterialInformationImpl.setCreateDate(getCreateDate());
		quarryMaterialInformationImpl.setModifiedDate(getModifiedDate());
		quarryMaterialInformationImpl.setTypeOfMaterial(getTypeOfMaterial());
		quarryMaterialInformationImpl.setReserveEstimate(getReserveEstimate());
		quarryMaterialInformationImpl.setEstimateDailyProd(
			getEstimateDailyProd());
		quarryMaterialInformationImpl.setActualSizeOfQuary(
			getActualSizeOfQuary());
		quarryMaterialInformationImpl.setHasQuarrySubmitted(
			getHasQuarrySubmitted());
		quarryMaterialInformationImpl.setSixCopiesOfLocation(
			getSixCopiesOfLocation());
		quarryMaterialInformationImpl.setLegalAccessToLand(
			getLegalAccessToLand());
		quarryMaterialInformationImpl.setOwnerShipEnclosed(
			getOwnerShipEnclosed());
		quarryMaterialInformationImpl.setAdjacentPropOwner(
			getAdjacentPropOwner());
		quarryMaterialInformationImpl.setQuarryApplicationId(
			getQuarryApplicationId());

		quarryMaterialInformationImpl.resetOriginalValues();

		return quarryMaterialInformationImpl;
	}

	@Override
	public QuarryMaterialInformation cloneWithOriginalValues() {
		QuarryMaterialInformationImpl quarryMaterialInformationImpl =
			new QuarryMaterialInformationImpl();

		quarryMaterialInformationImpl.setMaterialInfoId(
			this.<Long>getColumnOriginalValue("materialInfoId"));
		quarryMaterialInformationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		quarryMaterialInformationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		quarryMaterialInformationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		quarryMaterialInformationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		quarryMaterialInformationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		quarryMaterialInformationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		quarryMaterialInformationImpl.setTypeOfMaterial(
			this.<String>getColumnOriginalValue("typeOfMaterial"));
		quarryMaterialInformationImpl.setReserveEstimate(
			this.<String>getColumnOriginalValue("reserveEstimate"));
		quarryMaterialInformationImpl.setEstimateDailyProd(
			this.<String>getColumnOriginalValue("estimateDailyProd"));
		quarryMaterialInformationImpl.setActualSizeOfQuary(
			this.<String>getColumnOriginalValue("actualSizeOfQuary"));
		quarryMaterialInformationImpl.setHasQuarrySubmitted(
			this.<String>getColumnOriginalValue("hasQuarrySubmitted"));
		quarryMaterialInformationImpl.setSixCopiesOfLocation(
			this.<String>getColumnOriginalValue("sixCopiesOfLocation"));
		quarryMaterialInformationImpl.setLegalAccessToLand(
			this.<String>getColumnOriginalValue("legalAccessToLand"));
		quarryMaterialInformationImpl.setOwnerShipEnclosed(
			this.<String>getColumnOriginalValue("ownerShipEnclosed"));
		quarryMaterialInformationImpl.setAdjacentPropOwner(
			this.<String>getColumnOriginalValue("adjacentPropOwner"));
		quarryMaterialInformationImpl.setQuarryApplicationId(
			this.<Long>getColumnOriginalValue("quarryApplicationId"));

		return quarryMaterialInformationImpl;
	}

	@Override
	public int compareTo(QuarryMaterialInformation quarryMaterialInformation) {
		long primaryKey = quarryMaterialInformation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuarryMaterialInformation)) {
			return false;
		}

		QuarryMaterialInformation quarryMaterialInformation =
			(QuarryMaterialInformation)object;

		long primaryKey = quarryMaterialInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuarryMaterialInformation> toCacheModel() {
		QuarryMaterialInformationCacheModel
			quarryMaterialInformationCacheModel =
				new QuarryMaterialInformationCacheModel();

		quarryMaterialInformationCacheModel.materialInfoId =
			getMaterialInfoId();

		quarryMaterialInformationCacheModel.groupId = getGroupId();

		quarryMaterialInformationCacheModel.companyId = getCompanyId();

		quarryMaterialInformationCacheModel.userId = getUserId();

		quarryMaterialInformationCacheModel.userName = getUserName();

		String userName = quarryMaterialInformationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			quarryMaterialInformationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			quarryMaterialInformationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			quarryMaterialInformationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			quarryMaterialInformationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			quarryMaterialInformationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		quarryMaterialInformationCacheModel.typeOfMaterial =
			getTypeOfMaterial();

		String typeOfMaterial =
			quarryMaterialInformationCacheModel.typeOfMaterial;

		if ((typeOfMaterial != null) && (typeOfMaterial.length() == 0)) {
			quarryMaterialInformationCacheModel.typeOfMaterial = null;
		}

		quarryMaterialInformationCacheModel.reserveEstimate =
			getReserveEstimate();

		String reserveEstimate =
			quarryMaterialInformationCacheModel.reserveEstimate;

		if ((reserveEstimate != null) && (reserveEstimate.length() == 0)) {
			quarryMaterialInformationCacheModel.reserveEstimate = null;
		}

		quarryMaterialInformationCacheModel.estimateDailyProd =
			getEstimateDailyProd();

		String estimateDailyProd =
			quarryMaterialInformationCacheModel.estimateDailyProd;

		if ((estimateDailyProd != null) && (estimateDailyProd.length() == 0)) {
			quarryMaterialInformationCacheModel.estimateDailyProd = null;
		}

		quarryMaterialInformationCacheModel.actualSizeOfQuary =
			getActualSizeOfQuary();

		String actualSizeOfQuary =
			quarryMaterialInformationCacheModel.actualSizeOfQuary;

		if ((actualSizeOfQuary != null) && (actualSizeOfQuary.length() == 0)) {
			quarryMaterialInformationCacheModel.actualSizeOfQuary = null;
		}

		quarryMaterialInformationCacheModel.hasQuarrySubmitted =
			getHasQuarrySubmitted();

		String hasQuarrySubmitted =
			quarryMaterialInformationCacheModel.hasQuarrySubmitted;

		if ((hasQuarrySubmitted != null) &&
			(hasQuarrySubmitted.length() == 0)) {

			quarryMaterialInformationCacheModel.hasQuarrySubmitted = null;
		}

		quarryMaterialInformationCacheModel.sixCopiesOfLocation =
			getSixCopiesOfLocation();

		String sixCopiesOfLocation =
			quarryMaterialInformationCacheModel.sixCopiesOfLocation;

		if ((sixCopiesOfLocation != null) &&
			(sixCopiesOfLocation.length() == 0)) {

			quarryMaterialInformationCacheModel.sixCopiesOfLocation = null;
		}

		quarryMaterialInformationCacheModel.legalAccessToLand =
			getLegalAccessToLand();

		String legalAccessToLand =
			quarryMaterialInformationCacheModel.legalAccessToLand;

		if ((legalAccessToLand != null) && (legalAccessToLand.length() == 0)) {
			quarryMaterialInformationCacheModel.legalAccessToLand = null;
		}

		quarryMaterialInformationCacheModel.ownerShipEnclosed =
			getOwnerShipEnclosed();

		String ownerShipEnclosed =
			quarryMaterialInformationCacheModel.ownerShipEnclosed;

		if ((ownerShipEnclosed != null) && (ownerShipEnclosed.length() == 0)) {
			quarryMaterialInformationCacheModel.ownerShipEnclosed = null;
		}

		quarryMaterialInformationCacheModel.adjacentPropOwner =
			getAdjacentPropOwner();

		String adjacentPropOwner =
			quarryMaterialInformationCacheModel.adjacentPropOwner;

		if ((adjacentPropOwner != null) && (adjacentPropOwner.length() == 0)) {
			quarryMaterialInformationCacheModel.adjacentPropOwner = null;
		}

		quarryMaterialInformationCacheModel.quarryApplicationId =
			getQuarryApplicationId();

		return quarryMaterialInformationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuarryMaterialInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QuarryMaterialInformation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryMaterialInformation, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(QuarryMaterialInformation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, QuarryMaterialInformation>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						QuarryMaterialInformation.class, ModelWrapper.class);

	}

	private long _materialInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _typeOfMaterial;
	private String _reserveEstimate;
	private String _estimateDailyProd;
	private String _actualSizeOfQuary;
	private String _hasQuarrySubmitted;
	private String _sixCopiesOfLocation;
	private String _legalAccessToLand;
	private String _ownerShipEnclosed;
	private String _adjacentPropOwner;
	private long _quarryApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<QuarryMaterialInformation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuarryMaterialInformation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("materialInfoId", _materialInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("typeOfMaterial", _typeOfMaterial);
		_columnOriginalValues.put("reserveEstimate", _reserveEstimate);
		_columnOriginalValues.put("estimateDailyProd", _estimateDailyProd);
		_columnOriginalValues.put("actualSizeOfQuary", _actualSizeOfQuary);
		_columnOriginalValues.put("hasQuarrySubmitted", _hasQuarrySubmitted);
		_columnOriginalValues.put("sixCopiesOfLocation", _sixCopiesOfLocation);
		_columnOriginalValues.put("legalAccessToLand", _legalAccessToLand);
		_columnOriginalValues.put("ownerShipEnclosed", _ownerShipEnclosed);
		_columnOriginalValues.put("adjacentPropOwner", _adjacentPropOwner);
		_columnOriginalValues.put("quarryApplicationId", _quarryApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("materialInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("typeOfMaterial", 128L);

		columnBitmasks.put("reserveEstimate", 256L);

		columnBitmasks.put("estimateDailyProd", 512L);

		columnBitmasks.put("actualSizeOfQuary", 1024L);

		columnBitmasks.put("hasQuarrySubmitted", 2048L);

		columnBitmasks.put("sixCopiesOfLocation", 4096L);

		columnBitmasks.put("legalAccessToLand", 8192L);

		columnBitmasks.put("ownerShipEnclosed", 16384L);

		columnBitmasks.put("adjacentPropOwner", 32768L);

		columnBitmasks.put("quarryApplicationId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuarryMaterialInformation _escapedModel;

}