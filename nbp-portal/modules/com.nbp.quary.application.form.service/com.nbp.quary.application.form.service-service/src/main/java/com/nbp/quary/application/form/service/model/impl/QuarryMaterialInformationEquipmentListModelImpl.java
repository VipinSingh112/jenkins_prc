/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.quary.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.quary.application.form.service.model.QuarryMaterialInformationEquipmentList;
import com.nbp.quary.application.form.service.model.QuarryMaterialInformationEquipmentListModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuarryMaterialInformationEquipmentList service. Represents a row in the &quot;nbp_quarry_material_List_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuarryMaterialInformationEquipmentListModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuarryMaterialInformationEquipmentListImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuarryMaterialInformationEquipmentListImpl
 * @generated
 */
@JSON(strict = true)
public class QuarryMaterialInformationEquipmentListModelImpl
	extends BaseModelImpl<QuarryMaterialInformationEquipmentList>
	implements QuarryMaterialInformationEquipmentListModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quarry material information equipment list model instance should use the <code>QuarryMaterialInformationEquipmentList</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_quarry_material_List_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"materialInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"machineName", Types.VARCHAR},
		{"quantity", Types.VARCHAR}, {"locatedOnPermises", Types.VARCHAR},
		{"isManchineNameChecked", Types.VARCHAR}, {"otherValue", Types.VARCHAR},
		{"quarryApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("materialInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("machineName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locatedOnPermises", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isManchineNameChecked", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quarryApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_quarry_material_List_info (materialInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,machineName VARCHAR(75) null,quantity VARCHAR(75) null,locatedOnPermises VARCHAR(500) null,isManchineNameChecked VARCHAR(75) null,otherValue VARCHAR(75) null,quarryApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_quarry_material_List_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quarryMaterialInformationEquipmentList.machineName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_quarry_material_List_info.machineName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MACHINENAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUARRYAPPLICATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public QuarryMaterialInformationEquipmentListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _materialInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMaterialInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _materialInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuarryMaterialInformationEquipmentList.class;
	}

	@Override
	public String getModelClassName() {
		return QuarryMaterialInformationEquipmentList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuarryMaterialInformationEquipmentList, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String,
				 Function<QuarryMaterialInformationEquipmentList, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryMaterialInformationEquipmentList, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(QuarryMaterialInformationEquipmentList)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuarryMaterialInformationEquipmentList, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuarryMaterialInformationEquipmentList, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuarryMaterialInformationEquipmentList)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<QuarryMaterialInformationEquipmentList, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map
		<String, BiConsumer<QuarryMaterialInformationEquipmentList, Object>>
			getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<QuarryMaterialInformationEquipmentList, Object>>
				_attributeGetterFunctions;

		static {
			Map
				<String,
				 Function<QuarryMaterialInformationEquipmentList, Object>>
					attributeGetterFunctions =
						new LinkedHashMap
							<String,
							 Function
								 <QuarryMaterialInformationEquipmentList,
								  Object>>();

			attributeGetterFunctions.put(
				"materialInfoId",
				QuarryMaterialInformationEquipmentList::getMaterialInfoId);
			attributeGetterFunctions.put(
				"groupId", QuarryMaterialInformationEquipmentList::getGroupId);
			attributeGetterFunctions.put(
				"companyId",
				QuarryMaterialInformationEquipmentList::getCompanyId);
			attributeGetterFunctions.put(
				"userId", QuarryMaterialInformationEquipmentList::getUserId);
			attributeGetterFunctions.put(
				"userName",
				QuarryMaterialInformationEquipmentList::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				QuarryMaterialInformationEquipmentList::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				QuarryMaterialInformationEquipmentList::getModifiedDate);
			attributeGetterFunctions.put(
				"machineName",
				QuarryMaterialInformationEquipmentList::getMachineName);
			attributeGetterFunctions.put(
				"quantity",
				QuarryMaterialInformationEquipmentList::getQuantity);
			attributeGetterFunctions.put(
				"locatedOnPermises",
				QuarryMaterialInformationEquipmentList::getLocatedOnPermises);
			attributeGetterFunctions.put(
				"isManchineNameChecked",
				QuarryMaterialInformationEquipmentList::
					getIsManchineNameChecked);
			attributeGetterFunctions.put(
				"otherValue",
				QuarryMaterialInformationEquipmentList::getOtherValue);
			attributeGetterFunctions.put(
				"quarryApplicationId",
				QuarryMaterialInformationEquipmentList::getQuarryApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<QuarryMaterialInformationEquipmentList, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<QuarryMaterialInformationEquipmentList, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer
							 <QuarryMaterialInformationEquipmentList, ?>>();

			attributeSetterBiConsumers.put(
				"materialInfoId",
				(BiConsumer<QuarryMaterialInformationEquipmentList, Long>)
					QuarryMaterialInformationEquipmentList::setMaterialInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<QuarryMaterialInformationEquipmentList, Long>)
					QuarryMaterialInformationEquipmentList::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<QuarryMaterialInformationEquipmentList, Long>)
					QuarryMaterialInformationEquipmentList::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<QuarryMaterialInformationEquipmentList, Long>)
					QuarryMaterialInformationEquipmentList::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<QuarryMaterialInformationEquipmentList, String>)
					QuarryMaterialInformationEquipmentList::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<QuarryMaterialInformationEquipmentList, Date>)
					QuarryMaterialInformationEquipmentList::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<QuarryMaterialInformationEquipmentList, Date>)
					QuarryMaterialInformationEquipmentList::setModifiedDate);
			attributeSetterBiConsumers.put(
				"machineName",
				(BiConsumer<QuarryMaterialInformationEquipmentList, String>)
					QuarryMaterialInformationEquipmentList::setMachineName);
			attributeSetterBiConsumers.put(
				"quantity",
				(BiConsumer<QuarryMaterialInformationEquipmentList, String>)
					QuarryMaterialInformationEquipmentList::setQuantity);
			attributeSetterBiConsumers.put(
				"locatedOnPermises",
				(BiConsumer<QuarryMaterialInformationEquipmentList, String>)
					QuarryMaterialInformationEquipmentList::
						setLocatedOnPermises);
			attributeSetterBiConsumers.put(
				"isManchineNameChecked",
				(BiConsumer<QuarryMaterialInformationEquipmentList, String>)
					QuarryMaterialInformationEquipmentList::
						setIsManchineNameChecked);
			attributeSetterBiConsumers.put(
				"otherValue",
				(BiConsumer<QuarryMaterialInformationEquipmentList, String>)
					QuarryMaterialInformationEquipmentList::setOtherValue);
			attributeSetterBiConsumers.put(
				"quarryApplicationId",
				(BiConsumer<QuarryMaterialInformationEquipmentList, Long>)
					QuarryMaterialInformationEquipmentList::
						setQuarryApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMaterialInfoId() {
		return _materialInfoId;
	}

	@Override
	public void setMaterialInfoId(long materialInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_materialInfoId = materialInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getMachineName() {
		if (_machineName == null) {
			return "";
		}
		else {
			return _machineName;
		}
	}

	@Override
	public void setMachineName(String machineName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_machineName = machineName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalMachineName() {
		return getColumnOriginalValue("machineName");
	}

	@JSON
	@Override
	public String getQuantity() {
		if (_quantity == null) {
			return "";
		}
		else {
			return _quantity;
		}
	}

	@Override
	public void setQuantity(String quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@JSON
	@Override
	public String getLocatedOnPermises() {
		if (_locatedOnPermises == null) {
			return "";
		}
		else {
			return _locatedOnPermises;
		}
	}

	@Override
	public void setLocatedOnPermises(String locatedOnPermises) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locatedOnPermises = locatedOnPermises;
	}

	@JSON
	@Override
	public String getIsManchineNameChecked() {
		if (_isManchineNameChecked == null) {
			return "";
		}
		else {
			return _isManchineNameChecked;
		}
	}

	@Override
	public void setIsManchineNameChecked(String isManchineNameChecked) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isManchineNameChecked = isManchineNameChecked;
	}

	@JSON
	@Override
	public String getOtherValue() {
		if (_otherValue == null) {
			return "";
		}
		else {
			return _otherValue;
		}
	}

	@Override
	public void setOtherValue(String otherValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherValue = otherValue;
	}

	@JSON
	@Override
	public long getQuarryApplicationId() {
		return _quarryApplicationId;
	}

	@Override
	public void setQuarryApplicationId(long quarryApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quarryApplicationId = quarryApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuarryApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("quarryApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(),
			QuarryMaterialInformationEquipmentList.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuarryMaterialInformationEquipmentList toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuarryMaterialInformationEquipmentList>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuarryMaterialInformationEquipmentListImpl
			quarryMaterialInformationEquipmentListImpl =
				new QuarryMaterialInformationEquipmentListImpl();

		quarryMaterialInformationEquipmentListImpl.setMaterialInfoId(
			getMaterialInfoId());
		quarryMaterialInformationEquipmentListImpl.setGroupId(getGroupId());
		quarryMaterialInformationEquipmentListImpl.setCompanyId(getCompanyId());
		quarryMaterialInformationEquipmentListImpl.setUserId(getUserId());
		quarryMaterialInformationEquipmentListImpl.setUserName(getUserName());
		quarryMaterialInformationEquipmentListImpl.setCreateDate(
			getCreateDate());
		quarryMaterialInformationEquipmentListImpl.setModifiedDate(
			getModifiedDate());
		quarryMaterialInformationEquipmentListImpl.setMachineName(
			getMachineName());
		quarryMaterialInformationEquipmentListImpl.setQuantity(getQuantity());
		quarryMaterialInformationEquipmentListImpl.setLocatedOnPermises(
			getLocatedOnPermises());
		quarryMaterialInformationEquipmentListImpl.setIsManchineNameChecked(
			getIsManchineNameChecked());
		quarryMaterialInformationEquipmentListImpl.setOtherValue(
			getOtherValue());
		quarryMaterialInformationEquipmentListImpl.setQuarryApplicationId(
			getQuarryApplicationId());

		quarryMaterialInformationEquipmentListImpl.resetOriginalValues();

		return quarryMaterialInformationEquipmentListImpl;
	}

	@Override
	public QuarryMaterialInformationEquipmentList cloneWithOriginalValues() {
		QuarryMaterialInformationEquipmentListImpl
			quarryMaterialInformationEquipmentListImpl =
				new QuarryMaterialInformationEquipmentListImpl();

		quarryMaterialInformationEquipmentListImpl.setMaterialInfoId(
			this.<Long>getColumnOriginalValue("materialInfoId"));
		quarryMaterialInformationEquipmentListImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		quarryMaterialInformationEquipmentListImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		quarryMaterialInformationEquipmentListImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		quarryMaterialInformationEquipmentListImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		quarryMaterialInformationEquipmentListImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		quarryMaterialInformationEquipmentListImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		quarryMaterialInformationEquipmentListImpl.setMachineName(
			this.<String>getColumnOriginalValue("machineName"));
		quarryMaterialInformationEquipmentListImpl.setQuantity(
			this.<String>getColumnOriginalValue("quantity"));
		quarryMaterialInformationEquipmentListImpl.setLocatedOnPermises(
			this.<String>getColumnOriginalValue("locatedOnPermises"));
		quarryMaterialInformationEquipmentListImpl.setIsManchineNameChecked(
			this.<String>getColumnOriginalValue("isManchineNameChecked"));
		quarryMaterialInformationEquipmentListImpl.setOtherValue(
			this.<String>getColumnOriginalValue("otherValue"));
		quarryMaterialInformationEquipmentListImpl.setQuarryApplicationId(
			this.<Long>getColumnOriginalValue("quarryApplicationId"));

		return quarryMaterialInformationEquipmentListImpl;
	}

	@Override
	public int compareTo(
		QuarryMaterialInformationEquipmentList
			quarryMaterialInformationEquipmentList) {

		int value = 0;

		value = getMachineName().compareTo(
			quarryMaterialInformationEquipmentList.getMachineName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuarryMaterialInformationEquipmentList)) {
			return false;
		}

		QuarryMaterialInformationEquipmentList
			quarryMaterialInformationEquipmentList =
				(QuarryMaterialInformationEquipmentList)object;

		long primaryKey =
			quarryMaterialInformationEquipmentList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuarryMaterialInformationEquipmentList> toCacheModel() {
		QuarryMaterialInformationEquipmentListCacheModel
			quarryMaterialInformationEquipmentListCacheModel =
				new QuarryMaterialInformationEquipmentListCacheModel();

		quarryMaterialInformationEquipmentListCacheModel.materialInfoId =
			getMaterialInfoId();

		quarryMaterialInformationEquipmentListCacheModel.groupId = getGroupId();

		quarryMaterialInformationEquipmentListCacheModel.companyId =
			getCompanyId();

		quarryMaterialInformationEquipmentListCacheModel.userId = getUserId();

		quarryMaterialInformationEquipmentListCacheModel.userName =
			getUserName();

		String userName =
			quarryMaterialInformationEquipmentListCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			quarryMaterialInformationEquipmentListCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			quarryMaterialInformationEquipmentListCacheModel.createDate =
				createDate.getTime();
		}
		else {
			quarryMaterialInformationEquipmentListCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			quarryMaterialInformationEquipmentListCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			quarryMaterialInformationEquipmentListCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		quarryMaterialInformationEquipmentListCacheModel.machineName =
			getMachineName();

		String machineName =
			quarryMaterialInformationEquipmentListCacheModel.machineName;

		if ((machineName != null) && (machineName.length() == 0)) {
			quarryMaterialInformationEquipmentListCacheModel.machineName = null;
		}

		quarryMaterialInformationEquipmentListCacheModel.quantity =
			getQuantity();

		String quantity =
			quarryMaterialInformationEquipmentListCacheModel.quantity;

		if ((quantity != null) && (quantity.length() == 0)) {
			quarryMaterialInformationEquipmentListCacheModel.quantity = null;
		}

		quarryMaterialInformationEquipmentListCacheModel.locatedOnPermises =
			getLocatedOnPermises();

		String locatedOnPermises =
			quarryMaterialInformationEquipmentListCacheModel.locatedOnPermises;

		if ((locatedOnPermises != null) && (locatedOnPermises.length() == 0)) {
			quarryMaterialInformationEquipmentListCacheModel.locatedOnPermises =
				null;
		}

		quarryMaterialInformationEquipmentListCacheModel.isManchineNameChecked =
			getIsManchineNameChecked();

		String isManchineNameChecked =
			quarryMaterialInformationEquipmentListCacheModel.
				isManchineNameChecked;

		if ((isManchineNameChecked != null) &&
			(isManchineNameChecked.length() == 0)) {

			quarryMaterialInformationEquipmentListCacheModel.
				isManchineNameChecked = null;
		}

		quarryMaterialInformationEquipmentListCacheModel.otherValue =
			getOtherValue();

		String otherValue =
			quarryMaterialInformationEquipmentListCacheModel.otherValue;

		if ((otherValue != null) && (otherValue.length() == 0)) {
			quarryMaterialInformationEquipmentListCacheModel.otherValue = null;
		}

		quarryMaterialInformationEquipmentListCacheModel.quarryApplicationId =
			getQuarryApplicationId();

		return quarryMaterialInformationEquipmentListCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuarryMaterialInformationEquipmentList, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String,
				 Function<QuarryMaterialInformationEquipmentList, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryMaterialInformationEquipmentList, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(QuarryMaterialInformationEquipmentList)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, QuarryMaterialInformationEquipmentList>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						QuarryMaterialInformationEquipmentList.class,
						ModelWrapper.class);

	}

	private long _materialInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _machineName;
	private String _quantity;
	private String _locatedOnPermises;
	private String _isManchineNameChecked;
	private String _otherValue;
	private long _quarryApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<QuarryMaterialInformationEquipmentList, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuarryMaterialInformationEquipmentList)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("materialInfoId", _materialInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("machineName", _machineName);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("locatedOnPermises", _locatedOnPermises);
		_columnOriginalValues.put(
			"isManchineNameChecked", _isManchineNameChecked);
		_columnOriginalValues.put("otherValue", _otherValue);
		_columnOriginalValues.put("quarryApplicationId", _quarryApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("materialInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("machineName", 128L);

		columnBitmasks.put("quantity", 256L);

		columnBitmasks.put("locatedOnPermises", 512L);

		columnBitmasks.put("isManchineNameChecked", 1024L);

		columnBitmasks.put("otherValue", 2048L);

		columnBitmasks.put("quarryApplicationId", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuarryMaterialInformationEquipmentList _escapedModel;

}