/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.quary.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.quary.application.form.service.model.QuarryTransferApplicantInfo;
import com.nbp.quary.application.form.service.model.QuarryTransferApplicantInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuarryTransferApplicantInfo service. Represents a row in the &quot;nbp_quarry_transfer_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuarryTransferApplicantInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuarryTransferApplicantInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuarryTransferApplicantInfoImpl
 * @generated
 */
@JSON(strict = true)
public class QuarryTransferApplicantInfoModelImpl
	extends BaseModelImpl<QuarryTransferApplicantInfo>
	implements QuarryTransferApplicantInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quarry transfer applicant info model instance should use the <code>QuarryTransferApplicantInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_quarry_transfer_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"quarryTransferInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"transferCompanyName", Types.VARCHAR},
		{"transferLicenceNumber", Types.VARCHAR},
		{"transferLicenseLease", Types.VARCHAR},
		{"transferLeaseReason", Types.VARCHAR},
		{"nameOfApplicant", Types.VARCHAR}, {"telephone", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"nationalityOfApplicant", Types.VARCHAR},
		{"addressInJamaica", Types.VARCHAR}, {"nameOfDirector", Types.VARCHAR},
		{"nationalityOfDirector", Types.VARCHAR},
		{"dateOfTransfer", Types.TIMESTAMP}, {"trnAndTcc", Types.VARCHAR},
		{"quarryApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("quarryTransferInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("transferCompanyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transferLicenceNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transferLicenseLease", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transferLeaseReason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalityOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressInJamaica", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfDirector", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalityOfDirector", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfTransfer", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("trnAndTcc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quarryApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_quarry_transfer_info (quarryTransferInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,transferCompanyName VARCHAR(75) null,transferLicenceNumber VARCHAR(75) null,transferLicenseLease VARCHAR(75) null,transferLeaseReason VARCHAR(75) null,nameOfApplicant VARCHAR(75) null,telephone VARCHAR(75) null,email VARCHAR(75) null,nationalityOfApplicant VARCHAR(75) null,addressInJamaica VARCHAR(500) null,nameOfDirector VARCHAR(75) null,nationalityOfDirector VARCHAR(75) null,dateOfTransfer DATE null,trnAndTcc VARCHAR(75) null,quarryApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_quarry_transfer_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quarryTransferApplicantInfo.quarryTransferInfoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_quarry_transfer_info.quarryTransferInfoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUARRYAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUARRYTRANSFERINFOID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public QuarryTransferApplicantInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _quarryTransferInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQuarryTransferInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _quarryTransferInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuarryTransferApplicantInfo.class;
	}

	@Override
	public String getModelClassName() {
		return QuarryTransferApplicantInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuarryTransferApplicantInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuarryTransferApplicantInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryTransferApplicantInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(QuarryTransferApplicantInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuarryTransferApplicantInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuarryTransferApplicantInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuarryTransferApplicantInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuarryTransferApplicantInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuarryTransferApplicantInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<QuarryTransferApplicantInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<QuarryTransferApplicantInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<QuarryTransferApplicantInfo, Object>>();

			attributeGetterFunctions.put(
				"quarryTransferInfoId",
				QuarryTransferApplicantInfo::getQuarryTransferInfoId);
			attributeGetterFunctions.put(
				"groupId", QuarryTransferApplicantInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", QuarryTransferApplicantInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", QuarryTransferApplicantInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", QuarryTransferApplicantInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", QuarryTransferApplicantInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", QuarryTransferApplicantInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"transferCompanyName",
				QuarryTransferApplicantInfo::getTransferCompanyName);
			attributeGetterFunctions.put(
				"transferLicenceNumber",
				QuarryTransferApplicantInfo::getTransferLicenceNumber);
			attributeGetterFunctions.put(
				"transferLicenseLease",
				QuarryTransferApplicantInfo::getTransferLicenseLease);
			attributeGetterFunctions.put(
				"transferLeaseReason",
				QuarryTransferApplicantInfo::getTransferLeaseReason);
			attributeGetterFunctions.put(
				"nameOfApplicant",
				QuarryTransferApplicantInfo::getNameOfApplicant);
			attributeGetterFunctions.put(
				"telephone", QuarryTransferApplicantInfo::getTelephone);
			attributeGetterFunctions.put(
				"email", QuarryTransferApplicantInfo::getEmail);
			attributeGetterFunctions.put(
				"nationalityOfApplicant",
				QuarryTransferApplicantInfo::getNationalityOfApplicant);
			attributeGetterFunctions.put(
				"addressInJamaica",
				QuarryTransferApplicantInfo::getAddressInJamaica);
			attributeGetterFunctions.put(
				"nameOfDirector",
				QuarryTransferApplicantInfo::getNameOfDirector);
			attributeGetterFunctions.put(
				"nationalityOfDirector",
				QuarryTransferApplicantInfo::getNationalityOfDirector);
			attributeGetterFunctions.put(
				"dateOfTransfer",
				QuarryTransferApplicantInfo::getDateOfTransfer);
			attributeGetterFunctions.put(
				"trnAndTcc", QuarryTransferApplicantInfo::getTrnAndTcc);
			attributeGetterFunctions.put(
				"quarryApplicationId",
				QuarryTransferApplicantInfo::getQuarryApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<QuarryTransferApplicantInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<QuarryTransferApplicantInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<QuarryTransferApplicantInfo, ?>>();

			attributeSetterBiConsumers.put(
				"quarryTransferInfoId",
				(BiConsumer<QuarryTransferApplicantInfo, Long>)
					QuarryTransferApplicantInfo::setQuarryTransferInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<QuarryTransferApplicantInfo, Long>)
					QuarryTransferApplicantInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<QuarryTransferApplicantInfo, Long>)
					QuarryTransferApplicantInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<QuarryTransferApplicantInfo, Long>)
					QuarryTransferApplicantInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<QuarryTransferApplicantInfo, Date>)
					QuarryTransferApplicantInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<QuarryTransferApplicantInfo, Date>)
					QuarryTransferApplicantInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"transferCompanyName",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setTransferCompanyName);
			attributeSetterBiConsumers.put(
				"transferLicenceNumber",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setTransferLicenceNumber);
			attributeSetterBiConsumers.put(
				"transferLicenseLease",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setTransferLicenseLease);
			attributeSetterBiConsumers.put(
				"transferLeaseReason",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setTransferLeaseReason);
			attributeSetterBiConsumers.put(
				"nameOfApplicant",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setNameOfApplicant);
			attributeSetterBiConsumers.put(
				"telephone",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setTelephone);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setEmail);
			attributeSetterBiConsumers.put(
				"nationalityOfApplicant",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setNationalityOfApplicant);
			attributeSetterBiConsumers.put(
				"addressInJamaica",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setAddressInJamaica);
			attributeSetterBiConsumers.put(
				"nameOfDirector",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setNameOfDirector);
			attributeSetterBiConsumers.put(
				"nationalityOfDirector",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setNationalityOfDirector);
			attributeSetterBiConsumers.put(
				"dateOfTransfer",
				(BiConsumer<QuarryTransferApplicantInfo, Date>)
					QuarryTransferApplicantInfo::setDateOfTransfer);
			attributeSetterBiConsumers.put(
				"trnAndTcc",
				(BiConsumer<QuarryTransferApplicantInfo, String>)
					QuarryTransferApplicantInfo::setTrnAndTcc);
			attributeSetterBiConsumers.put(
				"quarryApplicationId",
				(BiConsumer<QuarryTransferApplicantInfo, Long>)
					QuarryTransferApplicantInfo::setQuarryApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getQuarryTransferInfoId() {
		return _quarryTransferInfoId;
	}

	@Override
	public void setQuarryTransferInfoId(long quarryTransferInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quarryTransferInfoId = quarryTransferInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTransferCompanyName() {
		if (_transferCompanyName == null) {
			return "";
		}
		else {
			return _transferCompanyName;
		}
	}

	@Override
	public void setTransferCompanyName(String transferCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferCompanyName = transferCompanyName;
	}

	@JSON
	@Override
	public String getTransferLicenceNumber() {
		if (_transferLicenceNumber == null) {
			return "";
		}
		else {
			return _transferLicenceNumber;
		}
	}

	@Override
	public void setTransferLicenceNumber(String transferLicenceNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferLicenceNumber = transferLicenceNumber;
	}

	@JSON
	@Override
	public String getTransferLicenseLease() {
		if (_transferLicenseLease == null) {
			return "";
		}
		else {
			return _transferLicenseLease;
		}
	}

	@Override
	public void setTransferLicenseLease(String transferLicenseLease) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferLicenseLease = transferLicenseLease;
	}

	@JSON
	@Override
	public String getTransferLeaseReason() {
		if (_transferLeaseReason == null) {
			return "";
		}
		else {
			return _transferLeaseReason;
		}
	}

	@Override
	public void setTransferLeaseReason(String transferLeaseReason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferLeaseReason = transferLeaseReason;
	}

	@JSON
	@Override
	public String getNameOfApplicant() {
		if (_nameOfApplicant == null) {
			return "";
		}
		else {
			return _nameOfApplicant;
		}
	}

	@Override
	public void setNameOfApplicant(String nameOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfApplicant = nameOfApplicant;
	}

	@JSON
	@Override
	public String getTelephone() {
		if (_telephone == null) {
			return "";
		}
		else {
			return _telephone;
		}
	}

	@Override
	public void setTelephone(String telephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone = telephone;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getNationalityOfApplicant() {
		if (_nationalityOfApplicant == null) {
			return "";
		}
		else {
			return _nationalityOfApplicant;
		}
	}

	@Override
	public void setNationalityOfApplicant(String nationalityOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalityOfApplicant = nationalityOfApplicant;
	}

	@JSON
	@Override
	public String getAddressInJamaica() {
		if (_addressInJamaica == null) {
			return "";
		}
		else {
			return _addressInJamaica;
		}
	}

	@Override
	public void setAddressInJamaica(String addressInJamaica) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressInJamaica = addressInJamaica;
	}

	@JSON
	@Override
	public String getNameOfDirector() {
		if (_nameOfDirector == null) {
			return "";
		}
		else {
			return _nameOfDirector;
		}
	}

	@Override
	public void setNameOfDirector(String nameOfDirector) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfDirector = nameOfDirector;
	}

	@JSON
	@Override
	public String getNationalityOfDirector() {
		if (_nationalityOfDirector == null) {
			return "";
		}
		else {
			return _nationalityOfDirector;
		}
	}

	@Override
	public void setNationalityOfDirector(String nationalityOfDirector) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalityOfDirector = nationalityOfDirector;
	}

	@JSON
	@Override
	public Date getDateOfTransfer() {
		return _dateOfTransfer;
	}

	@Override
	public void setDateOfTransfer(Date dateOfTransfer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfTransfer = dateOfTransfer;
	}

	@JSON
	@Override
	public String getTrnAndTcc() {
		if (_trnAndTcc == null) {
			return "";
		}
		else {
			return _trnAndTcc;
		}
	}

	@Override
	public void setTrnAndTcc(String trnAndTcc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trnAndTcc = trnAndTcc;
	}

	@JSON
	@Override
	public long getQuarryApplicationId() {
		return _quarryApplicationId;
	}

	@Override
	public void setQuarryApplicationId(long quarryApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quarryApplicationId = quarryApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuarryApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("quarryApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), QuarryTransferApplicantInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuarryTransferApplicantInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuarryTransferApplicantInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuarryTransferApplicantInfoImpl quarryTransferApplicantInfoImpl =
			new QuarryTransferApplicantInfoImpl();

		quarryTransferApplicantInfoImpl.setQuarryTransferInfoId(
			getQuarryTransferInfoId());
		quarryTransferApplicantInfoImpl.setGroupId(getGroupId());
		quarryTransferApplicantInfoImpl.setCompanyId(getCompanyId());
		quarryTransferApplicantInfoImpl.setUserId(getUserId());
		quarryTransferApplicantInfoImpl.setUserName(getUserName());
		quarryTransferApplicantInfoImpl.setCreateDate(getCreateDate());
		quarryTransferApplicantInfoImpl.setModifiedDate(getModifiedDate());
		quarryTransferApplicantInfoImpl.setTransferCompanyName(
			getTransferCompanyName());
		quarryTransferApplicantInfoImpl.setTransferLicenceNumber(
			getTransferLicenceNumber());
		quarryTransferApplicantInfoImpl.setTransferLicenseLease(
			getTransferLicenseLease());
		quarryTransferApplicantInfoImpl.setTransferLeaseReason(
			getTransferLeaseReason());
		quarryTransferApplicantInfoImpl.setNameOfApplicant(
			getNameOfApplicant());
		quarryTransferApplicantInfoImpl.setTelephone(getTelephone());
		quarryTransferApplicantInfoImpl.setEmail(getEmail());
		quarryTransferApplicantInfoImpl.setNationalityOfApplicant(
			getNationalityOfApplicant());
		quarryTransferApplicantInfoImpl.setAddressInJamaica(
			getAddressInJamaica());
		quarryTransferApplicantInfoImpl.setNameOfDirector(getNameOfDirector());
		quarryTransferApplicantInfoImpl.setNationalityOfDirector(
			getNationalityOfDirector());
		quarryTransferApplicantInfoImpl.setDateOfTransfer(getDateOfTransfer());
		quarryTransferApplicantInfoImpl.setTrnAndTcc(getTrnAndTcc());
		quarryTransferApplicantInfoImpl.setQuarryApplicationId(
			getQuarryApplicationId());

		quarryTransferApplicantInfoImpl.resetOriginalValues();

		return quarryTransferApplicantInfoImpl;
	}

	@Override
	public QuarryTransferApplicantInfo cloneWithOriginalValues() {
		QuarryTransferApplicantInfoImpl quarryTransferApplicantInfoImpl =
			new QuarryTransferApplicantInfoImpl();

		quarryTransferApplicantInfoImpl.setQuarryTransferInfoId(
			this.<Long>getColumnOriginalValue("quarryTransferInfoId"));
		quarryTransferApplicantInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		quarryTransferApplicantInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		quarryTransferApplicantInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		quarryTransferApplicantInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		quarryTransferApplicantInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		quarryTransferApplicantInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		quarryTransferApplicantInfoImpl.setTransferCompanyName(
			this.<String>getColumnOriginalValue("transferCompanyName"));
		quarryTransferApplicantInfoImpl.setTransferLicenceNumber(
			this.<String>getColumnOriginalValue("transferLicenceNumber"));
		quarryTransferApplicantInfoImpl.setTransferLicenseLease(
			this.<String>getColumnOriginalValue("transferLicenseLease"));
		quarryTransferApplicantInfoImpl.setTransferLeaseReason(
			this.<String>getColumnOriginalValue("transferLeaseReason"));
		quarryTransferApplicantInfoImpl.setNameOfApplicant(
			this.<String>getColumnOriginalValue("nameOfApplicant"));
		quarryTransferApplicantInfoImpl.setTelephone(
			this.<String>getColumnOriginalValue("telephone"));
		quarryTransferApplicantInfoImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		quarryTransferApplicantInfoImpl.setNationalityOfApplicant(
			this.<String>getColumnOriginalValue("nationalityOfApplicant"));
		quarryTransferApplicantInfoImpl.setAddressInJamaica(
			this.<String>getColumnOriginalValue("addressInJamaica"));
		quarryTransferApplicantInfoImpl.setNameOfDirector(
			this.<String>getColumnOriginalValue("nameOfDirector"));
		quarryTransferApplicantInfoImpl.setNationalityOfDirector(
			this.<String>getColumnOriginalValue("nationalityOfDirector"));
		quarryTransferApplicantInfoImpl.setDateOfTransfer(
			this.<Date>getColumnOriginalValue("dateOfTransfer"));
		quarryTransferApplicantInfoImpl.setTrnAndTcc(
			this.<String>getColumnOriginalValue("trnAndTcc"));
		quarryTransferApplicantInfoImpl.setQuarryApplicationId(
			this.<Long>getColumnOriginalValue("quarryApplicationId"));

		return quarryTransferApplicantInfoImpl;
	}

	@Override
	public int compareTo(
		QuarryTransferApplicantInfo quarryTransferApplicantInfo) {

		long primaryKey = quarryTransferApplicantInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuarryTransferApplicantInfo)) {
			return false;
		}

		QuarryTransferApplicantInfo quarryTransferApplicantInfo =
			(QuarryTransferApplicantInfo)object;

		long primaryKey = quarryTransferApplicantInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuarryTransferApplicantInfo> toCacheModel() {
		QuarryTransferApplicantInfoCacheModel
			quarryTransferApplicantInfoCacheModel =
				new QuarryTransferApplicantInfoCacheModel();

		quarryTransferApplicantInfoCacheModel.quarryTransferInfoId =
			getQuarryTransferInfoId();

		quarryTransferApplicantInfoCacheModel.groupId = getGroupId();

		quarryTransferApplicantInfoCacheModel.companyId = getCompanyId();

		quarryTransferApplicantInfoCacheModel.userId = getUserId();

		quarryTransferApplicantInfoCacheModel.userName = getUserName();

		String userName = quarryTransferApplicantInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			quarryTransferApplicantInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			quarryTransferApplicantInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			quarryTransferApplicantInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			quarryTransferApplicantInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			quarryTransferApplicantInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		quarryTransferApplicantInfoCacheModel.transferCompanyName =
			getTransferCompanyName();

		String transferCompanyName =
			quarryTransferApplicantInfoCacheModel.transferCompanyName;

		if ((transferCompanyName != null) &&
			(transferCompanyName.length() == 0)) {

			quarryTransferApplicantInfoCacheModel.transferCompanyName = null;
		}

		quarryTransferApplicantInfoCacheModel.transferLicenceNumber =
			getTransferLicenceNumber();

		String transferLicenceNumber =
			quarryTransferApplicantInfoCacheModel.transferLicenceNumber;

		if ((transferLicenceNumber != null) &&
			(transferLicenceNumber.length() == 0)) {

			quarryTransferApplicantInfoCacheModel.transferLicenceNumber = null;
		}

		quarryTransferApplicantInfoCacheModel.transferLicenseLease =
			getTransferLicenseLease();

		String transferLicenseLease =
			quarryTransferApplicantInfoCacheModel.transferLicenseLease;

		if ((transferLicenseLease != null) &&
			(transferLicenseLease.length() == 0)) {

			quarryTransferApplicantInfoCacheModel.transferLicenseLease = null;
		}

		quarryTransferApplicantInfoCacheModel.transferLeaseReason =
			getTransferLeaseReason();

		String transferLeaseReason =
			quarryTransferApplicantInfoCacheModel.transferLeaseReason;

		if ((transferLeaseReason != null) &&
			(transferLeaseReason.length() == 0)) {

			quarryTransferApplicantInfoCacheModel.transferLeaseReason = null;
		}

		quarryTransferApplicantInfoCacheModel.nameOfApplicant =
			getNameOfApplicant();

		String nameOfApplicant =
			quarryTransferApplicantInfoCacheModel.nameOfApplicant;

		if ((nameOfApplicant != null) && (nameOfApplicant.length() == 0)) {
			quarryTransferApplicantInfoCacheModel.nameOfApplicant = null;
		}

		quarryTransferApplicantInfoCacheModel.telephone = getTelephone();

		String telephone = quarryTransferApplicantInfoCacheModel.telephone;

		if ((telephone != null) && (telephone.length() == 0)) {
			quarryTransferApplicantInfoCacheModel.telephone = null;
		}

		quarryTransferApplicantInfoCacheModel.email = getEmail();

		String email = quarryTransferApplicantInfoCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			quarryTransferApplicantInfoCacheModel.email = null;
		}

		quarryTransferApplicantInfoCacheModel.nationalityOfApplicant =
			getNationalityOfApplicant();

		String nationalityOfApplicant =
			quarryTransferApplicantInfoCacheModel.nationalityOfApplicant;

		if ((nationalityOfApplicant != null) &&
			(nationalityOfApplicant.length() == 0)) {

			quarryTransferApplicantInfoCacheModel.nationalityOfApplicant = null;
		}

		quarryTransferApplicantInfoCacheModel.addressInJamaica =
			getAddressInJamaica();

		String addressInJamaica =
			quarryTransferApplicantInfoCacheModel.addressInJamaica;

		if ((addressInJamaica != null) && (addressInJamaica.length() == 0)) {
			quarryTransferApplicantInfoCacheModel.addressInJamaica = null;
		}

		quarryTransferApplicantInfoCacheModel.nameOfDirector =
			getNameOfDirector();

		String nameOfDirector =
			quarryTransferApplicantInfoCacheModel.nameOfDirector;

		if ((nameOfDirector != null) && (nameOfDirector.length() == 0)) {
			quarryTransferApplicantInfoCacheModel.nameOfDirector = null;
		}

		quarryTransferApplicantInfoCacheModel.nationalityOfDirector =
			getNationalityOfDirector();

		String nationalityOfDirector =
			quarryTransferApplicantInfoCacheModel.nationalityOfDirector;

		if ((nationalityOfDirector != null) &&
			(nationalityOfDirector.length() == 0)) {

			quarryTransferApplicantInfoCacheModel.nationalityOfDirector = null;
		}

		Date dateOfTransfer = getDateOfTransfer();

		if (dateOfTransfer != null) {
			quarryTransferApplicantInfoCacheModel.dateOfTransfer =
				dateOfTransfer.getTime();
		}
		else {
			quarryTransferApplicantInfoCacheModel.dateOfTransfer =
				Long.MIN_VALUE;
		}

		quarryTransferApplicantInfoCacheModel.trnAndTcc = getTrnAndTcc();

		String trnAndTcc = quarryTransferApplicantInfoCacheModel.trnAndTcc;

		if ((trnAndTcc != null) && (trnAndTcc.length() == 0)) {
			quarryTransferApplicantInfoCacheModel.trnAndTcc = null;
		}

		quarryTransferApplicantInfoCacheModel.quarryApplicationId =
			getQuarryApplicationId();

		return quarryTransferApplicantInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuarryTransferApplicantInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QuarryTransferApplicantInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryTransferApplicantInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(QuarryTransferApplicantInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, QuarryTransferApplicantInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						QuarryTransferApplicantInfo.class, ModelWrapper.class);

	}

	private long _quarryTransferInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _transferCompanyName;
	private String _transferLicenceNumber;
	private String _transferLicenseLease;
	private String _transferLeaseReason;
	private String _nameOfApplicant;
	private String _telephone;
	private String _email;
	private String _nationalityOfApplicant;
	private String _addressInJamaica;
	private String _nameOfDirector;
	private String _nationalityOfDirector;
	private Date _dateOfTransfer;
	private String _trnAndTcc;
	private long _quarryApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<QuarryTransferApplicantInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuarryTransferApplicantInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"quarryTransferInfoId", _quarryTransferInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("transferCompanyName", _transferCompanyName);
		_columnOriginalValues.put(
			"transferLicenceNumber", _transferLicenceNumber);
		_columnOriginalValues.put(
			"transferLicenseLease", _transferLicenseLease);
		_columnOriginalValues.put("transferLeaseReason", _transferLeaseReason);
		_columnOriginalValues.put("nameOfApplicant", _nameOfApplicant);
		_columnOriginalValues.put("telephone", _telephone);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put(
			"nationalityOfApplicant", _nationalityOfApplicant);
		_columnOriginalValues.put("addressInJamaica", _addressInJamaica);
		_columnOriginalValues.put("nameOfDirector", _nameOfDirector);
		_columnOriginalValues.put(
			"nationalityOfDirector", _nationalityOfDirector);
		_columnOriginalValues.put("dateOfTransfer", _dateOfTransfer);
		_columnOriginalValues.put("trnAndTcc", _trnAndTcc);
		_columnOriginalValues.put("quarryApplicationId", _quarryApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("quarryTransferInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("transferCompanyName", 128L);

		columnBitmasks.put("transferLicenceNumber", 256L);

		columnBitmasks.put("transferLicenseLease", 512L);

		columnBitmasks.put("transferLeaseReason", 1024L);

		columnBitmasks.put("nameOfApplicant", 2048L);

		columnBitmasks.put("telephone", 4096L);

		columnBitmasks.put("email", 8192L);

		columnBitmasks.put("nationalityOfApplicant", 16384L);

		columnBitmasks.put("addressInJamaica", 32768L);

		columnBitmasks.put("nameOfDirector", 65536L);

		columnBitmasks.put("nationalityOfDirector", 131072L);

		columnBitmasks.put("dateOfTransfer", 262144L);

		columnBitmasks.put("trnAndTcc", 524288L);

		columnBitmasks.put("quarryApplicationId", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuarryTransferApplicantInfo _escapedModel;

}