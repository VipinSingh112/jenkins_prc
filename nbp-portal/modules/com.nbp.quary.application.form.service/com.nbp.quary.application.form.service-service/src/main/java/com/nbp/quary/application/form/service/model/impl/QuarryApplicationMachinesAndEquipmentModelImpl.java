/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.quary.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.quary.application.form.service.model.QuarryApplicationMachinesAndEquipment;
import com.nbp.quary.application.form.service.model.QuarryApplicationMachinesAndEquipmentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuarryApplicationMachinesAndEquipment service. Represents a row in the &quot;nbp_quarry_machines_equip&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuarryApplicationMachinesAndEquipmentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuarryApplicationMachinesAndEquipmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuarryApplicationMachinesAndEquipmentImpl
 * @generated
 */
@JSON(strict = true)
public class QuarryApplicationMachinesAndEquipmentModelImpl
	extends BaseModelImpl<QuarryApplicationMachinesAndEquipment>
	implements QuarryApplicationMachinesAndEquipmentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quarry application machines and equipment model instance should use the <code>QuarryApplicationMachinesAndEquipment</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_quarry_machines_equip";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"quarryApplicationMachinId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"manchineName", Types.VARCHAR},
		{"isManchineNameChecked", Types.VARCHAR}, {"quantity", Types.VARCHAR},
		{"locationOfPermises", Types.VARCHAR},
		{"locatedOnLocation", Types.VARCHAR}, {"otherValue", Types.VARCHAR},
		{"quarryApplicationId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quarryApplicationMachinId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("manchineName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isManchineNameChecked", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationOfPermises", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locatedOnLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quarryApplicationId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_quarry_machines_equip (uuid_ VARCHAR(75) null,quarryApplicationMachinId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,manchineName VARCHAR(75) null,isManchineNameChecked VARCHAR(75) null,quantity VARCHAR(75) null,locationOfPermises VARCHAR(500) null,locatedOnLocation VARCHAR(500) null,otherValue VARCHAR(75) null,quarryApplicationId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_quarry_machines_equip";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quarryApplicationMachinesAndEquipment.manchineName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_quarry_machines_equip.manchineName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANCHINENAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUARRYAPPLICATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public QuarryApplicationMachinesAndEquipmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _quarryApplicationMachinId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQuarryApplicationMachinId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _quarryApplicationMachinId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuarryApplicationMachinesAndEquipment.class;
	}

	@Override
	public String getModelClassName() {
		return QuarryApplicationMachinesAndEquipment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuarryApplicationMachinesAndEquipment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String,
				 Function<QuarryApplicationMachinesAndEquipment, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryApplicationMachinesAndEquipment, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(QuarryApplicationMachinesAndEquipment)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuarryApplicationMachinesAndEquipment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuarryApplicationMachinesAndEquipment, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuarryApplicationMachinesAndEquipment)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<QuarryApplicationMachinesAndEquipment, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map
		<String, BiConsumer<QuarryApplicationMachinesAndEquipment, Object>>
			getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<QuarryApplicationMachinesAndEquipment, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<QuarryApplicationMachinesAndEquipment, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function
							 <QuarryApplicationMachinesAndEquipment, Object>>();

			attributeGetterFunctions.put(
				"uuid", QuarryApplicationMachinesAndEquipment::getUuid);
			attributeGetterFunctions.put(
				"quarryApplicationMachinId",
				QuarryApplicationMachinesAndEquipment::
					getQuarryApplicationMachinId);
			attributeGetterFunctions.put(
				"groupId", QuarryApplicationMachinesAndEquipment::getGroupId);
			attributeGetterFunctions.put(
				"companyId",
				QuarryApplicationMachinesAndEquipment::getCompanyId);
			attributeGetterFunctions.put(
				"userId", QuarryApplicationMachinesAndEquipment::getUserId);
			attributeGetterFunctions.put(
				"userName", QuarryApplicationMachinesAndEquipment::getUserName);
			attributeGetterFunctions.put(
				"createDate",
				QuarryApplicationMachinesAndEquipment::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				QuarryApplicationMachinesAndEquipment::getModifiedDate);
			attributeGetterFunctions.put(
				"manchineName",
				QuarryApplicationMachinesAndEquipment::getManchineName);
			attributeGetterFunctions.put(
				"isManchineNameChecked",
				QuarryApplicationMachinesAndEquipment::
					getIsManchineNameChecked);
			attributeGetterFunctions.put(
				"quantity", QuarryApplicationMachinesAndEquipment::getQuantity);
			attributeGetterFunctions.put(
				"locationOfPermises",
				QuarryApplicationMachinesAndEquipment::getLocationOfPermises);
			attributeGetterFunctions.put(
				"locatedOnLocation",
				QuarryApplicationMachinesAndEquipment::getLocatedOnLocation);
			attributeGetterFunctions.put(
				"otherValue",
				QuarryApplicationMachinesAndEquipment::getOtherValue);
			attributeGetterFunctions.put(
				"quarryApplicationId",
				QuarryApplicationMachinesAndEquipment::getQuarryApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<QuarryApplicationMachinesAndEquipment, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<QuarryApplicationMachinesAndEquipment, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer
							 <QuarryApplicationMachinesAndEquipment, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::setUuid);
			attributeSetterBiConsumers.put(
				"quarryApplicationMachinId",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, Long>)
					QuarryApplicationMachinesAndEquipment::
						setQuarryApplicationMachinId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, Long>)
					QuarryApplicationMachinesAndEquipment::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, Long>)
					QuarryApplicationMachinesAndEquipment::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, Long>)
					QuarryApplicationMachinesAndEquipment::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, Date>)
					QuarryApplicationMachinesAndEquipment::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, Date>)
					QuarryApplicationMachinesAndEquipment::setModifiedDate);
			attributeSetterBiConsumers.put(
				"manchineName",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::setManchineName);
			attributeSetterBiConsumers.put(
				"isManchineNameChecked",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::
						setIsManchineNameChecked);
			attributeSetterBiConsumers.put(
				"quantity",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::setQuantity);
			attributeSetterBiConsumers.put(
				"locationOfPermises",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::
						setLocationOfPermises);
			attributeSetterBiConsumers.put(
				"locatedOnLocation",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::
						setLocatedOnLocation);
			attributeSetterBiConsumers.put(
				"otherValue",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::setOtherValue);
			attributeSetterBiConsumers.put(
				"quarryApplicationId",
				(BiConsumer<QuarryApplicationMachinesAndEquipment, String>)
					QuarryApplicationMachinesAndEquipment::
						setQuarryApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getQuarryApplicationMachinId() {
		return _quarryApplicationMachinId;
	}

	@Override
	public void setQuarryApplicationMachinId(long quarryApplicationMachinId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quarryApplicationMachinId = quarryApplicationMachinId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getManchineName() {
		if (_manchineName == null) {
			return "";
		}
		else {
			return _manchineName;
		}
	}

	@Override
	public void setManchineName(String manchineName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manchineName = manchineName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalManchineName() {
		return getColumnOriginalValue("manchineName");
	}

	@JSON
	@Override
	public String getIsManchineNameChecked() {
		if (_isManchineNameChecked == null) {
			return "";
		}
		else {
			return _isManchineNameChecked;
		}
	}

	@Override
	public void setIsManchineNameChecked(String isManchineNameChecked) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isManchineNameChecked = isManchineNameChecked;
	}

	@JSON
	@Override
	public String getQuantity() {
		if (_quantity == null) {
			return "";
		}
		else {
			return _quantity;
		}
	}

	@Override
	public void setQuantity(String quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@JSON
	@Override
	public String getLocationOfPermises() {
		if (_locationOfPermises == null) {
			return "";
		}
		else {
			return _locationOfPermises;
		}
	}

	@Override
	public void setLocationOfPermises(String locationOfPermises) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locationOfPermises = locationOfPermises;
	}

	@JSON
	@Override
	public String getLocatedOnLocation() {
		if (_locatedOnLocation == null) {
			return "";
		}
		else {
			return _locatedOnLocation;
		}
	}

	@Override
	public void setLocatedOnLocation(String locatedOnLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locatedOnLocation = locatedOnLocation;
	}

	@JSON
	@Override
	public String getOtherValue() {
		if (_otherValue == null) {
			return "";
		}
		else {
			return _otherValue;
		}
	}

	@Override
	public void setOtherValue(String otherValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherValue = otherValue;
	}

	@JSON
	@Override
	public String getQuarryApplicationId() {
		if (_quarryApplicationId == null) {
			return "";
		}
		else {
			return _quarryApplicationId;
		}
	}

	@Override
	public void setQuarryApplicationId(String quarryApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quarryApplicationId = quarryApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalQuarryApplicationId() {
		return getColumnOriginalValue("quarryApplicationId");
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				QuarryApplicationMachinesAndEquipment.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(),
			QuarryApplicationMachinesAndEquipment.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuarryApplicationMachinesAndEquipment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuarryApplicationMachinesAndEquipment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuarryApplicationMachinesAndEquipmentImpl
			quarryApplicationMachinesAndEquipmentImpl =
				new QuarryApplicationMachinesAndEquipmentImpl();

		quarryApplicationMachinesAndEquipmentImpl.setUuid(getUuid());
		quarryApplicationMachinesAndEquipmentImpl.setQuarryApplicationMachinId(
			getQuarryApplicationMachinId());
		quarryApplicationMachinesAndEquipmentImpl.setGroupId(getGroupId());
		quarryApplicationMachinesAndEquipmentImpl.setCompanyId(getCompanyId());
		quarryApplicationMachinesAndEquipmentImpl.setUserId(getUserId());
		quarryApplicationMachinesAndEquipmentImpl.setUserName(getUserName());
		quarryApplicationMachinesAndEquipmentImpl.setCreateDate(
			getCreateDate());
		quarryApplicationMachinesAndEquipmentImpl.setModifiedDate(
			getModifiedDate());
		quarryApplicationMachinesAndEquipmentImpl.setManchineName(
			getManchineName());
		quarryApplicationMachinesAndEquipmentImpl.setIsManchineNameChecked(
			getIsManchineNameChecked());
		quarryApplicationMachinesAndEquipmentImpl.setQuantity(getQuantity());
		quarryApplicationMachinesAndEquipmentImpl.setLocationOfPermises(
			getLocationOfPermises());
		quarryApplicationMachinesAndEquipmentImpl.setLocatedOnLocation(
			getLocatedOnLocation());
		quarryApplicationMachinesAndEquipmentImpl.setOtherValue(
			getOtherValue());
		quarryApplicationMachinesAndEquipmentImpl.setQuarryApplicationId(
			getQuarryApplicationId());

		quarryApplicationMachinesAndEquipmentImpl.resetOriginalValues();

		return quarryApplicationMachinesAndEquipmentImpl;
	}

	@Override
	public QuarryApplicationMachinesAndEquipment cloneWithOriginalValues() {
		QuarryApplicationMachinesAndEquipmentImpl
			quarryApplicationMachinesAndEquipmentImpl =
				new QuarryApplicationMachinesAndEquipmentImpl();

		quarryApplicationMachinesAndEquipmentImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		quarryApplicationMachinesAndEquipmentImpl.setQuarryApplicationMachinId(
			this.<Long>getColumnOriginalValue("quarryApplicationMachinId"));
		quarryApplicationMachinesAndEquipmentImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		quarryApplicationMachinesAndEquipmentImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		quarryApplicationMachinesAndEquipmentImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		quarryApplicationMachinesAndEquipmentImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		quarryApplicationMachinesAndEquipmentImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		quarryApplicationMachinesAndEquipmentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		quarryApplicationMachinesAndEquipmentImpl.setManchineName(
			this.<String>getColumnOriginalValue("manchineName"));
		quarryApplicationMachinesAndEquipmentImpl.setIsManchineNameChecked(
			this.<String>getColumnOriginalValue("isManchineNameChecked"));
		quarryApplicationMachinesAndEquipmentImpl.setQuantity(
			this.<String>getColumnOriginalValue("quantity"));
		quarryApplicationMachinesAndEquipmentImpl.setLocationOfPermises(
			this.<String>getColumnOriginalValue("locationOfPermises"));
		quarryApplicationMachinesAndEquipmentImpl.setLocatedOnLocation(
			this.<String>getColumnOriginalValue("locatedOnLocation"));
		quarryApplicationMachinesAndEquipmentImpl.setOtherValue(
			this.<String>getColumnOriginalValue("otherValue"));
		quarryApplicationMachinesAndEquipmentImpl.setQuarryApplicationId(
			this.<String>getColumnOriginalValue("quarryApplicationId"));

		return quarryApplicationMachinesAndEquipmentImpl;
	}

	@Override
	public int compareTo(
		QuarryApplicationMachinesAndEquipment
			quarryApplicationMachinesAndEquipment) {

		int value = 0;

		value = getManchineName().compareTo(
			quarryApplicationMachinesAndEquipment.getManchineName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuarryApplicationMachinesAndEquipment)) {
			return false;
		}

		QuarryApplicationMachinesAndEquipment
			quarryApplicationMachinesAndEquipment =
				(QuarryApplicationMachinesAndEquipment)object;

		long primaryKey = quarryApplicationMachinesAndEquipment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuarryApplicationMachinesAndEquipment> toCacheModel() {
		QuarryApplicationMachinesAndEquipmentCacheModel
			quarryApplicationMachinesAndEquipmentCacheModel =
				new QuarryApplicationMachinesAndEquipmentCacheModel();

		quarryApplicationMachinesAndEquipmentCacheModel.uuid = getUuid();

		String uuid = quarryApplicationMachinesAndEquipmentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			quarryApplicationMachinesAndEquipmentCacheModel.uuid = null;
		}

		quarryApplicationMachinesAndEquipmentCacheModel.
			quarryApplicationMachinId = getQuarryApplicationMachinId();

		quarryApplicationMachinesAndEquipmentCacheModel.groupId = getGroupId();

		quarryApplicationMachinesAndEquipmentCacheModel.companyId =
			getCompanyId();

		quarryApplicationMachinesAndEquipmentCacheModel.userId = getUserId();

		quarryApplicationMachinesAndEquipmentCacheModel.userName =
			getUserName();

		String userName =
			quarryApplicationMachinesAndEquipmentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			quarryApplicationMachinesAndEquipmentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			quarryApplicationMachinesAndEquipmentCacheModel.createDate =
				createDate.getTime();
		}
		else {
			quarryApplicationMachinesAndEquipmentCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			quarryApplicationMachinesAndEquipmentCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			quarryApplicationMachinesAndEquipmentCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		quarryApplicationMachinesAndEquipmentCacheModel.manchineName =
			getManchineName();

		String manchineName =
			quarryApplicationMachinesAndEquipmentCacheModel.manchineName;

		if ((manchineName != null) && (manchineName.length() == 0)) {
			quarryApplicationMachinesAndEquipmentCacheModel.manchineName = null;
		}

		quarryApplicationMachinesAndEquipmentCacheModel.isManchineNameChecked =
			getIsManchineNameChecked();

		String isManchineNameChecked =
			quarryApplicationMachinesAndEquipmentCacheModel.
				isManchineNameChecked;

		if ((isManchineNameChecked != null) &&
			(isManchineNameChecked.length() == 0)) {

			quarryApplicationMachinesAndEquipmentCacheModel.
				isManchineNameChecked = null;
		}

		quarryApplicationMachinesAndEquipmentCacheModel.quantity =
			getQuantity();

		String quantity =
			quarryApplicationMachinesAndEquipmentCacheModel.quantity;

		if ((quantity != null) && (quantity.length() == 0)) {
			quarryApplicationMachinesAndEquipmentCacheModel.quantity = null;
		}

		quarryApplicationMachinesAndEquipmentCacheModel.locationOfPermises =
			getLocationOfPermises();

		String locationOfPermises =
			quarryApplicationMachinesAndEquipmentCacheModel.locationOfPermises;

		if ((locationOfPermises != null) &&
			(locationOfPermises.length() == 0)) {

			quarryApplicationMachinesAndEquipmentCacheModel.locationOfPermises =
				null;
		}

		quarryApplicationMachinesAndEquipmentCacheModel.locatedOnLocation =
			getLocatedOnLocation();

		String locatedOnLocation =
			quarryApplicationMachinesAndEquipmentCacheModel.locatedOnLocation;

		if ((locatedOnLocation != null) && (locatedOnLocation.length() == 0)) {
			quarryApplicationMachinesAndEquipmentCacheModel.locatedOnLocation =
				null;
		}

		quarryApplicationMachinesAndEquipmentCacheModel.otherValue =
			getOtherValue();

		String otherValue =
			quarryApplicationMachinesAndEquipmentCacheModel.otherValue;

		if ((otherValue != null) && (otherValue.length() == 0)) {
			quarryApplicationMachinesAndEquipmentCacheModel.otherValue = null;
		}

		quarryApplicationMachinesAndEquipmentCacheModel.quarryApplicationId =
			getQuarryApplicationId();

		String quarryApplicationId =
			quarryApplicationMachinesAndEquipmentCacheModel.quarryApplicationId;

		if ((quarryApplicationId != null) &&
			(quarryApplicationId.length() == 0)) {

			quarryApplicationMachinesAndEquipmentCacheModel.
				quarryApplicationId = null;
		}

		return quarryApplicationMachinesAndEquipmentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuarryApplicationMachinesAndEquipment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String,
				 Function<QuarryApplicationMachinesAndEquipment, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuarryApplicationMachinesAndEquipment, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(QuarryApplicationMachinesAndEquipment)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, QuarryApplicationMachinesAndEquipment>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						QuarryApplicationMachinesAndEquipment.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _quarryApplicationMachinId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _manchineName;
	private String _isManchineNameChecked;
	private String _quantity;
	private String _locationOfPermises;
	private String _locatedOnLocation;
	private String _otherValue;
	private String _quarryApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuarryApplicationMachinesAndEquipment, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuarryApplicationMachinesAndEquipment)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"quarryApplicationMachinId", _quarryApplicationMachinId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("manchineName", _manchineName);
		_columnOriginalValues.put(
			"isManchineNameChecked", _isManchineNameChecked);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("locationOfPermises", _locationOfPermises);
		_columnOriginalValues.put("locatedOnLocation", _locatedOnLocation);
		_columnOriginalValues.put("otherValue", _otherValue);
		_columnOriginalValues.put("quarryApplicationId", _quarryApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("quarryApplicationMachinId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("manchineName", 256L);

		columnBitmasks.put("isManchineNameChecked", 512L);

		columnBitmasks.put("quantity", 1024L);

		columnBitmasks.put("locationOfPermises", 2048L);

		columnBitmasks.put("locatedOnLocation", 4096L);

		columnBitmasks.put("otherValue", 8192L);

		columnBitmasks.put("quarryApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuarryApplicationMachinesAndEquipment _escapedModel;

}