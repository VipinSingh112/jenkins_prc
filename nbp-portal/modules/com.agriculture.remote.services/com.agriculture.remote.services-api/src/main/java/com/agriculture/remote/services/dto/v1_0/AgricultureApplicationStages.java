package com.agriculture.remote.services.dto.v1_0;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import com.liferay.petra.function.UnsafeSupplier;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.vulcan.graphql.annotation.GraphQLField;
import com.liferay.portal.vulcan.graphql.annotation.GraphQLName;
import com.liferay.portal.vulcan.util.ObjectMapperUtil;

import io.swagger.v3.oas.annotations.media.Schema;

import java.io.Serializable;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Supplier;

import javax.annotation.Generated;

import javax.validation.Valid;

import javax.xml.bind.annotation.XmlRootElement;

/**
 * @author Yogesh Chandra
 * @generated
 */
@Generated("")
@GraphQLName(
	description = "Contain all data for Agriculture Application Stage.",
	value = "AgricultureApplicationStages"
)
@JsonFilter("Liferay.Vulcan")
@XmlRootElement(name = "AgricultureApplicationStages")
public class AgricultureApplicationStages implements Serializable {

	public static AgricultureApplicationStages toDTO(String json) {
		return ObjectMapperUtil.readValue(
			AgricultureApplicationStages.class, json);
	}

	public static AgricultureApplicationStages unsafeToDTO(String json) {
		return ObjectMapperUtil.unsafeReadValue(
			AgricultureApplicationStages.class, json);
	}

	@Schema(description = "CaseId generated by BPM")
	public String getCaseId() {
		if (_caseIdSupplier != null) {
			caseId = _caseIdSupplier.get();

			_caseIdSupplier = null;
		}

		return caseId;
	}

	public void setCaseId(String caseId) {
		this.caseId = caseId;

		_caseIdSupplier = null;
	}

	@JsonIgnore
	public void setCaseId(
		UnsafeSupplier<String, Exception> caseIdUnsafeSupplier) {

		_caseIdSupplier = () -> {
			try {
				return caseIdUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "CaseId generated by BPM")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected String caseId;

	@JsonIgnore
	private Supplier<String> _caseIdSupplier;

	@Schema(
		description = "Total duration of stage between started and end date."
	)
	public String getDuration() {
		if (_durationSupplier != null) {
			duration = _durationSupplier.get();

			_durationSupplier = null;
		}

		return duration;
	}

	public void setDuration(String duration) {
		this.duration = duration;

		_durationSupplier = null;
	}

	@JsonIgnore
	public void setDuration(
		UnsafeSupplier<String, Exception> durationUnsafeSupplier) {

		_durationSupplier = () -> {
			try {
				return durationUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(
		description = "Total duration of stage between started and end date."
	)
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected String duration;

	@JsonIgnore
	private Supplier<String> _durationSupplier;

	@Schema(description = "End date of Agriculture application stage")
	public Date getStageEndDate() {
		if (_stageEndDateSupplier != null) {
			stageEndDate = _stageEndDateSupplier.get();

			_stageEndDateSupplier = null;
		}

		return stageEndDate;
	}

	public void setStageEndDate(Date stageEndDate) {
		this.stageEndDate = stageEndDate;

		_stageEndDateSupplier = null;
	}

	@JsonIgnore
	public void setStageEndDate(
		UnsafeSupplier<Date, Exception> stageEndDateUnsafeSupplier) {

		_stageEndDateSupplier = () -> {
			try {
				return stageEndDateUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "End date of Agriculture application stage")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected Date stageEndDate;

	@JsonIgnore
	private Supplier<Date> _stageEndDateSupplier;

	@JsonGetter("stageName")
	@Schema(description = "Name of the Agriculture application stage.")
	@Valid
	public StageName getStageName() {
		if (_stageNameSupplier != null) {
			stageName = _stageNameSupplier.get();

			_stageNameSupplier = null;
		}

		return stageName;
	}

	@JsonIgnore
	public String getStageNameAsString() {
		StageName stageName = getStageName();

		if (stageName == null) {
			return null;
		}

		return stageName.toString();
	}

	public void setStageName(StageName stageName) {
		this.stageName = stageName;

		_stageNameSupplier = null;
	}

	@JsonIgnore
	public void setStageName(
		UnsafeSupplier<StageName, Exception> stageNameUnsafeSupplier) {

		_stageNameSupplier = () -> {
			try {
				return stageNameUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "Name of the Agriculture application stage.")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected StageName stageName;

	@JsonIgnore
	private Supplier<StageName> _stageNameSupplier;

	@Schema(description = "Start date of Agriculture application stage")
	public Date getStageStartDate() {
		if (_stageStartDateSupplier != null) {
			stageStartDate = _stageStartDateSupplier.get();

			_stageStartDateSupplier = null;
		}

		return stageStartDate;
	}

	public void setStageStartDate(Date stageStartDate) {
		this.stageStartDate = stageStartDate;

		_stageStartDateSupplier = null;
	}

	@JsonIgnore
	public void setStageStartDate(
		UnsafeSupplier<Date, Exception> stageStartDateUnsafeSupplier) {

		_stageStartDateSupplier = () -> {
			try {
				return stageStartDateUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "Start date of Agriculture application stage")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected Date stageStartDate;

	@JsonIgnore
	private Supplier<Date> _stageStartDateSupplier;

	@JsonGetter("status")
	@Schema(description = "status of the Agriculture application stage")
	@Valid
	public Status getStatus() {
		if (_statusSupplier != null) {
			status = _statusSupplier.get();

			_statusSupplier = null;
		}

		return status;
	}

	@JsonIgnore
	public String getStatusAsString() {
		Status status = getStatus();

		if (status == null) {
			return null;
		}

		return status.toString();
	}

	public void setStatus(Status status) {
		this.status = status;

		_statusSupplier = null;
	}

	@JsonIgnore
	public void setStatus(
		UnsafeSupplier<Status, Exception> statusUnsafeSupplier) {

		_statusSupplier = () -> {
			try {
				return statusUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "status of the Agriculture application stage")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected Status status;

	@JsonIgnore
	private Supplier<Status> _statusSupplier;

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AgricultureApplicationStages)) {
			return false;
		}

		AgricultureApplicationStages agricultureApplicationStages =
			(AgricultureApplicationStages)object;

		return Objects.equals(
			toString(), agricultureApplicationStages.toString());
	}

	@Override
	public int hashCode() {
		String string = toString();

		return string.hashCode();
	}

	public String toString() {
		StringBundler sb = new StringBundler();

		sb.append("{");

		DateFormat liferayToJSONDateFormat = new SimpleDateFormat(
			"yyyy-MM-dd'T'HH:mm:ss'Z'");

		String caseId = getCaseId();

		if (caseId != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"caseId\": ");

			sb.append("\"");

			sb.append(_escape(caseId));

			sb.append("\"");
		}

		String duration = getDuration();

		if (duration != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"duration\": ");

			sb.append("\"");

			sb.append(_escape(duration));

			sb.append("\"");
		}

		Date stageEndDate = getStageEndDate();

		if (stageEndDate != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"stageEndDate\": ");

			sb.append("\"");

			sb.append(liferayToJSONDateFormat.format(stageEndDate));

			sb.append("\"");
		}

		StageName stageName = getStageName();

		if (stageName != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"stageName\": ");

			sb.append("\"");

			sb.append(stageName);

			sb.append("\"");
		}

		Date stageStartDate = getStageStartDate();

		if (stageStartDate != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"stageStartDate\": ");

			sb.append("\"");

			sb.append(liferayToJSONDateFormat.format(stageStartDate));

			sb.append("\"");
		}

		Status status = getStatus();

		if (status != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"status\": ");

			sb.append("\"");

			sb.append(status);

			sb.append("\"");
		}

		sb.append("}");

		return sb.toString();
	}

	@Schema(
		accessMode = Schema.AccessMode.READ_ONLY,
		defaultValue = "com.agriculture.remote.services.dto.v1_0.AgricultureApplicationStages",
		name = "x-class-name"
	)
	public String xClassName;

	@GraphQLName("StageName")
	public static enum StageName {

		DATA_VERIFICATION("Data Verification"),
		INSPECTION_RADA("Inspection (RADA)"),
		REFERRAL_TO_JCA("Referral to JCA"),
		JCA_RECOMMENDATIONS("JCA Recommendations"),
		ISSUANCE_OF_PERMIT_EXEMPTION_CERTIFICATE_OR_REFUSAL_LETTER(
			"Issuance of Permit(Exemption Certificate) or Refusal Letter");

		@JsonCreator
		public static StageName create(String value) {
			if ((value == null) || value.equals("")) {
				return null;
			}

			for (StageName stageName : values()) {
				if (Objects.equals(stageName.getValue(), value)) {
					return stageName;
				}
			}

			throw new IllegalArgumentException("Invalid enum value: " + value);
		}

		@JsonValue
		public String getValue() {
			return _value;
		}

		@Override
		public String toString() {
			return _value;
		}

		private StageName(String value) {
			_value = value;
		}

		private final String _value;

	}

	@GraphQLName("Status")
	public static enum Status {

		OPEN("Open"), IN_PROGRESS("In-Progress"), ON_HOLD("On-Hold"),
		CLOSED("Closed");

		@JsonCreator
		public static Status create(String value) {
			if ((value == null) || value.equals("")) {
				return null;
			}

			for (Status status : values()) {
				if (Objects.equals(status.getValue(), value)) {
					return status;
				}
			}

			throw new IllegalArgumentException("Invalid enum value: " + value);
		}

		@JsonValue
		public String getValue() {
			return _value;
		}

		@Override
		public String toString() {
			return _value;
		}

		private Status(String value) {
			_value = value;
		}

		private final String _value;

	}

	private static String _escape(Object object) {
		return StringUtil.replace(
			String.valueOf(object), _JSON_ESCAPE_STRINGS[0],
			_JSON_ESCAPE_STRINGS[1]);
	}

	private static boolean _isArray(Object value) {
		if (value == null) {
			return false;
		}

		Class<?> clazz = value.getClass();

		return clazz.isArray();
	}

	private static String _toJSON(Map<String, ?> map) {
		StringBuilder sb = new StringBuilder("{");

		@SuppressWarnings("unchecked")
		Set set = map.entrySet();

		@SuppressWarnings("unchecked")
		Iterator<Map.Entry<String, ?>> iterator = set.iterator();

		while (iterator.hasNext()) {
			Map.Entry<String, ?> entry = iterator.next();

			sb.append("\"");
			sb.append(_escape(entry.getKey()));
			sb.append("\": ");

			Object value = entry.getValue();

			if (_isArray(value)) {
				sb.append("[");

				Object[] valueArray = (Object[])value;

				for (int i = 0; i < valueArray.length; i++) {
					if (valueArray[i] instanceof Map) {
						sb.append(_toJSON((Map<String, ?>)valueArray[i]));
					}
					else if (valueArray[i] instanceof String) {
						sb.append("\"");
						sb.append(valueArray[i]);
						sb.append("\"");
					}
					else {
						sb.append(valueArray[i]);
					}

					if ((i + 1) < valueArray.length) {
						sb.append(", ");
					}
				}

				sb.append("]");
			}
			else if (value instanceof Map) {
				sb.append(_toJSON((Map<String, ?>)value));
			}
			else if (value instanceof String) {
				sb.append("\"");
				sb.append(_escape(value));
				sb.append("\"");
			}
			else {
				sb.append(value);
			}

			if (iterator.hasNext()) {
				sb.append(", ");
			}
		}

		sb.append("}");

		return sb.toString();
	}

	private static final String[][] _JSON_ESCAPE_STRINGS = {
		{"\\", "\"", "\b", "\f", "\n", "\r", "\t"},
		{"\\\\", "\\\"", "\\b", "\\f", "\\n", "\\r", "\\t"}
	};

	private Map<String, Serializable> _extendedProperties;

}