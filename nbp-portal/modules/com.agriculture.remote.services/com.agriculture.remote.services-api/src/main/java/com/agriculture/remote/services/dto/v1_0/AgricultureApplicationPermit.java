package com.agriculture.remote.services.dto.v1_0;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import com.liferay.petra.function.UnsafeSupplier;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.vulcan.graphql.annotation.GraphQLField;
import com.liferay.portal.vulcan.graphql.annotation.GraphQLName;
import com.liferay.portal.vulcan.util.ObjectMapperUtil;

import io.swagger.v3.oas.annotations.media.Schema;

import java.io.Serializable;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Supplier;

import javax.annotation.Generated;

import javax.xml.bind.annotation.XmlRootElement;

/**
 * @author Yogesh Chandra
 * @generated
 */
@Generated("")
@GraphQLName(
	description = "Contain all data for permit stage of agriculture application.",
	value = "AgricultureApplicationPermit"
)
@JsonFilter("Liferay.Vulcan")
@XmlRootElement(name = "AgricultureApplicationPermit")
public class AgricultureApplicationPermit implements Serializable {

	public static AgricultureApplicationPermit toDTO(String json) {
		return ObjectMapperUtil.readValue(
			AgricultureApplicationPermit.class, json);
	}

	public static AgricultureApplicationPermit unsafeToDTO(String json) {
		return ObjectMapperUtil.unsafeReadValue(
			AgricultureApplicationPermit.class, json);
	}

	@Schema(description = "Duration Of Permit.")
	public String getPIRPermitCertificate() {
		if (_PIRPermitCertificateSupplier != null) {
			PIRPermitCertificate = _PIRPermitCertificateSupplier.get();

			_PIRPermitCertificateSupplier = null;
		}

		return PIRPermitCertificate;
	}

	public void setPIRPermitCertificate(String PIRPermitCertificate) {
		this.PIRPermitCertificate = PIRPermitCertificate;

		_PIRPermitCertificateSupplier = null;
	}

	@JsonIgnore
	public void setPIRPermitCertificate(
		UnsafeSupplier<String, Exception> PIRPermitCertificateUnsafeSupplier) {

		_PIRPermitCertificateSupplier = () -> {
			try {
				return PIRPermitCertificateUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "Duration Of Permit.")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected String PIRPermitCertificate;

	@JsonIgnore
	private Supplier<String> _PIRPermitCertificateSupplier;

	@Schema(description = "CaseId generated by BPM")
	public String getCaseId() {
		if (_caseIdSupplier != null) {
			caseId = _caseIdSupplier.get();

			_caseIdSupplier = null;
		}

		return caseId;
	}

	public void setCaseId(String caseId) {
		this.caseId = caseId;

		_caseIdSupplier = null;
	}

	@JsonIgnore
	public void setCaseId(
		UnsafeSupplier<String, Exception> caseIdUnsafeSupplier) {

		_caseIdSupplier = () -> {
			try {
				return caseIdUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "CaseId generated by BPM")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected String caseId;

	@JsonIgnore
	private Supplier<String> _caseIdSupplier;

	@Schema(description = "Date Of Expiration.")
	public Date getDateOfExpiration() {
		if (_dateOfExpirationSupplier != null) {
			dateOfExpiration = _dateOfExpirationSupplier.get();

			_dateOfExpirationSupplier = null;
		}

		return dateOfExpiration;
	}

	public void setDateOfExpiration(Date dateOfExpiration) {
		this.dateOfExpiration = dateOfExpiration;

		_dateOfExpirationSupplier = null;
	}

	@JsonIgnore
	public void setDateOfExpiration(
		UnsafeSupplier<Date, Exception> dateOfExpirationUnsafeSupplier) {

		_dateOfExpirationSupplier = () -> {
			try {
				return dateOfExpirationUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "Date Of Expiration.")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected Date dateOfExpiration;

	@JsonIgnore
	private Supplier<Date> _dateOfExpirationSupplier;

	@Schema(description = "Date Of Issue.")
	public Date getDateOfIssue() {
		if (_dateOfIssueSupplier != null) {
			dateOfIssue = _dateOfIssueSupplier.get();

			_dateOfIssueSupplier = null;
		}

		return dateOfIssue;
	}

	public void setDateOfIssue(Date dateOfIssue) {
		this.dateOfIssue = dateOfIssue;

		_dateOfIssueSupplier = null;
	}

	@JsonIgnore
	public void setDateOfIssue(
		UnsafeSupplier<Date, Exception> dateOfIssueUnsafeSupplier) {

		_dateOfIssueSupplier = () -> {
			try {
				return dateOfIssueUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "Date Of Issue.")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected Date dateOfIssue;

	@JsonIgnore
	private Supplier<Date> _dateOfIssueSupplier;

	@Schema(description = "Duration Of Permit.")
	public String getDurationOfPermit() {
		if (_durationOfPermitSupplier != null) {
			durationOfPermit = _durationOfPermitSupplier.get();

			_durationOfPermitSupplier = null;
		}

		return durationOfPermit;
	}

	public void setDurationOfPermit(String durationOfPermit) {
		this.durationOfPermit = durationOfPermit;

		_durationOfPermitSupplier = null;
	}

	@JsonIgnore
	public void setDurationOfPermit(
		UnsafeSupplier<String, Exception> durationOfPermitUnsafeSupplier) {

		_durationOfPermitSupplier = () -> {
			try {
				return durationOfPermitUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "Duration Of Permit.")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected String durationOfPermit;

	@JsonIgnore
	private Supplier<String> _durationOfPermitSupplier;

	@Schema(description = "PIR Permit Number.")
	public String getPirPermitNumber() {
		if (_pirPermitNumberSupplier != null) {
			pirPermitNumber = _pirPermitNumberSupplier.get();

			_pirPermitNumberSupplier = null;
		}

		return pirPermitNumber;
	}

	public void setPirPermitNumber(String pirPermitNumber) {
		this.pirPermitNumber = pirPermitNumber;

		_pirPermitNumberSupplier = null;
	}

	@JsonIgnore
	public void setPirPermitNumber(
		UnsafeSupplier<String, Exception> pirPermitNumberUnsafeSupplier) {

		_pirPermitNumberSupplier = () -> {
			try {
				return pirPermitNumberUnsafeSupplier.get();
			}
			catch (RuntimeException runtimeException) {
				throw runtimeException;
			}
			catch (Exception exception) {
				throw new RuntimeException(exception);
			}
		};
	}

	@GraphQLField(description = "PIR Permit Number.")
	@JsonProperty(access = JsonProperty.Access.READ_WRITE)
	protected String pirPermitNumber;

	@JsonIgnore
	private Supplier<String> _pirPermitNumberSupplier;

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AgricultureApplicationPermit)) {
			return false;
		}

		AgricultureApplicationPermit agricultureApplicationPermit =
			(AgricultureApplicationPermit)object;

		return Objects.equals(
			toString(), agricultureApplicationPermit.toString());
	}

	@Override
	public int hashCode() {
		String string = toString();

		return string.hashCode();
	}

	public String toString() {
		StringBundler sb = new StringBundler();

		sb.append("{");

		DateFormat liferayToJSONDateFormat = new SimpleDateFormat(
			"yyyy-MM-dd'T'HH:mm:ss'Z'");

		String PIRPermitCertificate = getPIRPermitCertificate();

		if (PIRPermitCertificate != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"PIRPermitCertificate\": ");

			sb.append("\"");

			sb.append(_escape(PIRPermitCertificate));

			sb.append("\"");
		}

		String caseId = getCaseId();

		if (caseId != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"caseId\": ");

			sb.append("\"");

			sb.append(_escape(caseId));

			sb.append("\"");
		}

		Date dateOfExpiration = getDateOfExpiration();

		if (dateOfExpiration != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"dateOfExpiration\": ");

			sb.append("\"");

			sb.append(liferayToJSONDateFormat.format(dateOfExpiration));

			sb.append("\"");
		}

		Date dateOfIssue = getDateOfIssue();

		if (dateOfIssue != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"dateOfIssue\": ");

			sb.append("\"");

			sb.append(liferayToJSONDateFormat.format(dateOfIssue));

			sb.append("\"");
		}

		String durationOfPermit = getDurationOfPermit();

		if (durationOfPermit != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"durationOfPermit\": ");

			sb.append("\"");

			sb.append(_escape(durationOfPermit));

			sb.append("\"");
		}

		String pirPermitNumber = getPirPermitNumber();

		if (pirPermitNumber != null) {
			if (sb.length() > 1) {
				sb.append(", ");
			}

			sb.append("\"pirPermitNumber\": ");

			sb.append("\"");

			sb.append(_escape(pirPermitNumber));

			sb.append("\"");
		}

		sb.append("}");

		return sb.toString();
	}

	@Schema(
		accessMode = Schema.AccessMode.READ_ONLY,
		defaultValue = "com.agriculture.remote.services.dto.v1_0.AgricultureApplicationPermit",
		name = "x-class-name"
	)
	public String xClassName;

	private static String _escape(Object object) {
		return StringUtil.replace(
			String.valueOf(object), _JSON_ESCAPE_STRINGS[0],
			_JSON_ESCAPE_STRINGS[1]);
	}

	private static boolean _isArray(Object value) {
		if (value == null) {
			return false;
		}

		Class<?> clazz = value.getClass();

		return clazz.isArray();
	}

	private static String _toJSON(Map<String, ?> map) {
		StringBuilder sb = new StringBuilder("{");

		@SuppressWarnings("unchecked")
		Set set = map.entrySet();

		@SuppressWarnings("unchecked")
		Iterator<Map.Entry<String, ?>> iterator = set.iterator();

		while (iterator.hasNext()) {
			Map.Entry<String, ?> entry = iterator.next();

			sb.append("\"");
			sb.append(_escape(entry.getKey()));
			sb.append("\": ");

			Object value = entry.getValue();

			if (_isArray(value)) {
				sb.append("[");

				Object[] valueArray = (Object[])value;

				for (int i = 0; i < valueArray.length; i++) {
					if (valueArray[i] instanceof Map) {
						sb.append(_toJSON((Map<String, ?>)valueArray[i]));
					}
					else if (valueArray[i] instanceof String) {
						sb.append("\"");
						sb.append(valueArray[i]);
						sb.append("\"");
					}
					else {
						sb.append(valueArray[i]);
					}

					if ((i + 1) < valueArray.length) {
						sb.append(", ");
					}
				}

				sb.append("]");
			}
			else if (value instanceof Map) {
				sb.append(_toJSON((Map<String, ?>)value));
			}
			else if (value instanceof String) {
				sb.append("\"");
				sb.append(_escape(value));
				sb.append("\"");
			}
			else {
				sb.append(value);
			}

			if (iterator.hasNext()) {
				sb.append(", ");
			}
		}

		sb.append("}");

		return sb.toString();
	}

	private static final String[][] _JSON_ESCAPE_STRINGS = {
		{"\\", "\"", "\b", "\f", "\n", "\r", "\t"},
		{"\\\\", "\\\"", "\\b", "\\f", "\\n", "\\r", "\\t"}
	};

	private Map<String, Serializable> _extendedProperties;

}