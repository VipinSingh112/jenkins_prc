/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.collaboration.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.collaboration.services.model.Collobartion;
import com.nbp.collaboration.services.model.CollobartionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Collobartion service. Represents a row in the &quot;nbp_collaboration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CollobartionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CollobartionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CollobartionImpl
 * @generated
 */
@JSON(strict = true)
public class CollobartionModelImpl
	extends BaseModelImpl<Collobartion> implements CollobartionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a collobartion model instance should use the <code>Collobartion</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_collaboration";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"collaborationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"stageName", Types.VARCHAR}, {"userType", Types.VARCHAR},
		{"comment_", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"uploadedDocId", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"applicationId", Types.VARCHAR}, {"archived", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("collaborationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadedDocId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("archived", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_collaboration (uuid_ VARCHAR(75) null,collaborationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,stageName VARCHAR(75) null,userType VARCHAR(75) null,comment_ VARCHAR(75) null,status VARCHAR(75) null,uploadedDocId VARCHAR(75) null,caseId VARCHAR(75) null,applicationId VARCHAR(75) null,archived INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table nbp_collaboration";

	public static final String ORDER_BY_JPQL =
		" ORDER BY collobartion.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_collaboration.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ARCHIVED_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STAGENAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERTYPE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CollobartionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _collaborationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCollaborationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _collaborationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Collobartion.class;
	}

	@Override
	public String getModelClassName() {
		return Collobartion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Collobartion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Collobartion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Collobartion, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Collobartion)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Collobartion, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Collobartion, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Collobartion)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Collobartion, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Collobartion, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Collobartion, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Collobartion, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Collobartion, Object>>();

			attributeGetterFunctions.put("uuid", Collobartion::getUuid);
			attributeGetterFunctions.put(
				"collaborationId", Collobartion::getCollaborationId);
			attributeGetterFunctions.put("groupId", Collobartion::getGroupId);
			attributeGetterFunctions.put(
				"companyId", Collobartion::getCompanyId);
			attributeGetterFunctions.put("userId", Collobartion::getUserId);
			attributeGetterFunctions.put("userName", Collobartion::getUserName);
			attributeGetterFunctions.put(
				"createDate", Collobartion::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Collobartion::getModifiedDate);
			attributeGetterFunctions.put(
				"stageName", Collobartion::getStageName);
			attributeGetterFunctions.put("userType", Collobartion::getUserType);
			attributeGetterFunctions.put("comment", Collobartion::getComment);
			attributeGetterFunctions.put("status", Collobartion::getStatus);
			attributeGetterFunctions.put(
				"uploadedDocId", Collobartion::getUploadedDocId);
			attributeGetterFunctions.put("caseId", Collobartion::getCaseId);
			attributeGetterFunctions.put(
				"applicationId", Collobartion::getApplicationId);
			attributeGetterFunctions.put("archived", Collobartion::getArchived);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Collobartion, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Collobartion, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<Collobartion, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<Collobartion, String>)Collobartion::setUuid);
			attributeSetterBiConsumers.put(
				"collaborationId",
				(BiConsumer<Collobartion, Long>)
					Collobartion::setCollaborationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<Collobartion, Long>)Collobartion::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Collobartion, Long>)Collobartion::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<Collobartion, Long>)Collobartion::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Collobartion, String>)Collobartion::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Collobartion, Date>)Collobartion::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Collobartion, Date>)Collobartion::setModifiedDate);
			attributeSetterBiConsumers.put(
				"stageName",
				(BiConsumer<Collobartion, String>)Collobartion::setStageName);
			attributeSetterBiConsumers.put(
				"userType",
				(BiConsumer<Collobartion, String>)Collobartion::setUserType);
			attributeSetterBiConsumers.put(
				"comment",
				(BiConsumer<Collobartion, String>)Collobartion::setComment);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<Collobartion, String>)Collobartion::setStatus);
			attributeSetterBiConsumers.put(
				"uploadedDocId",
				(BiConsumer<Collobartion, String>)
					Collobartion::setUploadedDocId);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<Collobartion, String>)Collobartion::setCaseId);
			attributeSetterBiConsumers.put(
				"applicationId",
				(BiConsumer<Collobartion, String>)
					Collobartion::setApplicationId);
			attributeSetterBiConsumers.put(
				"archived",
				(BiConsumer<Collobartion, Integer>)Collobartion::setArchived);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCollaborationId() {
		return _collaborationId;
	}

	@Override
	public void setCollaborationId(long collaborationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_collaborationId = collaborationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getStageName() {
		if (_stageName == null) {
			return "";
		}
		else {
			return _stageName;
		}
	}

	@Override
	public void setStageName(String stageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageName = stageName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStageName() {
		return getColumnOriginalValue("stageName");
	}

	@JSON
	@Override
	public String getUserType() {
		if (_userType == null) {
			return "";
		}
		else {
			return _userType;
		}
	}

	@Override
	public void setUserType(String userType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userType = userType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserType() {
		return getColumnOriginalValue("userType");
	}

	@JSON
	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comment = comment;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getUploadedDocId() {
		if (_uploadedDocId == null) {
			return "";
		}
		else {
			return _uploadedDocId;
		}
	}

	@Override
	public void setUploadedDocId(String uploadedDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uploadedDocId = uploadedDocId;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getApplicationId() {
		if (_applicationId == null) {
			return "";
		}
		else {
			return _applicationId;
		}
	}

	@Override
	public void setApplicationId(String applicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationId = applicationId;
	}

	@JSON
	@Override
	public int getArchived() {
		return _archived;
	}

	@Override
	public void setArchived(int archived) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_archived = archived;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalArchived() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("archived"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Collobartion.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Collobartion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Collobartion toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Collobartion>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CollobartionImpl collobartionImpl = new CollobartionImpl();

		collobartionImpl.setUuid(getUuid());
		collobartionImpl.setCollaborationId(getCollaborationId());
		collobartionImpl.setGroupId(getGroupId());
		collobartionImpl.setCompanyId(getCompanyId());
		collobartionImpl.setUserId(getUserId());
		collobartionImpl.setUserName(getUserName());
		collobartionImpl.setCreateDate(getCreateDate());
		collobartionImpl.setModifiedDate(getModifiedDate());
		collobartionImpl.setStageName(getStageName());
		collobartionImpl.setUserType(getUserType());
		collobartionImpl.setComment(getComment());
		collobartionImpl.setStatus(getStatus());
		collobartionImpl.setUploadedDocId(getUploadedDocId());
		collobartionImpl.setCaseId(getCaseId());
		collobartionImpl.setApplicationId(getApplicationId());
		collobartionImpl.setArchived(getArchived());

		collobartionImpl.resetOriginalValues();

		return collobartionImpl;
	}

	@Override
	public Collobartion cloneWithOriginalValues() {
		CollobartionImpl collobartionImpl = new CollobartionImpl();

		collobartionImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		collobartionImpl.setCollaborationId(
			this.<Long>getColumnOriginalValue("collaborationId"));
		collobartionImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		collobartionImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		collobartionImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		collobartionImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		collobartionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		collobartionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		collobartionImpl.setStageName(
			this.<String>getColumnOriginalValue("stageName"));
		collobartionImpl.setUserType(
			this.<String>getColumnOriginalValue("userType"));
		collobartionImpl.setComment(
			this.<String>getColumnOriginalValue("comment_"));
		collobartionImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		collobartionImpl.setUploadedDocId(
			this.<String>getColumnOriginalValue("uploadedDocId"));
		collobartionImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		collobartionImpl.setApplicationId(
			this.<String>getColumnOriginalValue("applicationId"));
		collobartionImpl.setArchived(
			this.<Integer>getColumnOriginalValue("archived"));

		return collobartionImpl;
	}

	@Override
	public int compareTo(Collobartion collobartion) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), collobartion.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Collobartion)) {
			return false;
		}

		Collobartion collobartion = (Collobartion)object;

		long primaryKey = collobartion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Collobartion> toCacheModel() {
		CollobartionCacheModel collobartionCacheModel =
			new CollobartionCacheModel();

		collobartionCacheModel.uuid = getUuid();

		String uuid = collobartionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			collobartionCacheModel.uuid = null;
		}

		collobartionCacheModel.collaborationId = getCollaborationId();

		collobartionCacheModel.groupId = getGroupId();

		collobartionCacheModel.companyId = getCompanyId();

		collobartionCacheModel.userId = getUserId();

		collobartionCacheModel.userName = getUserName();

		String userName = collobartionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			collobartionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			collobartionCacheModel.createDate = createDate.getTime();
		}
		else {
			collobartionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			collobartionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			collobartionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		collobartionCacheModel.stageName = getStageName();

		String stageName = collobartionCacheModel.stageName;

		if ((stageName != null) && (stageName.length() == 0)) {
			collobartionCacheModel.stageName = null;
		}

		collobartionCacheModel.userType = getUserType();

		String userType = collobartionCacheModel.userType;

		if ((userType != null) && (userType.length() == 0)) {
			collobartionCacheModel.userType = null;
		}

		collobartionCacheModel.comment = getComment();

		String comment = collobartionCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			collobartionCacheModel.comment = null;
		}

		collobartionCacheModel.status = getStatus();

		String status = collobartionCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			collobartionCacheModel.status = null;
		}

		collobartionCacheModel.uploadedDocId = getUploadedDocId();

		String uploadedDocId = collobartionCacheModel.uploadedDocId;

		if ((uploadedDocId != null) && (uploadedDocId.length() == 0)) {
			collobartionCacheModel.uploadedDocId = null;
		}

		collobartionCacheModel.caseId = getCaseId();

		String caseId = collobartionCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			collobartionCacheModel.caseId = null;
		}

		collobartionCacheModel.applicationId = getApplicationId();

		String applicationId = collobartionCacheModel.applicationId;

		if ((applicationId != null) && (applicationId.length() == 0)) {
			collobartionCacheModel.applicationId = null;
		}

		collobartionCacheModel.archived = getArchived();

		return collobartionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Collobartion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Collobartion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Collobartion, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Collobartion)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Collobartion>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Collobartion.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _collaborationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _stageName;
	private String _userType;
	private String _comment;
	private String _status;
	private String _uploadedDocId;
	private String _caseId;
	private String _applicationId;
	private int _archived;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Collobartion, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Collobartion)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("collaborationId", _collaborationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("stageName", _stageName);
		_columnOriginalValues.put("userType", _userType);
		_columnOriginalValues.put("comment_", _comment);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("uploadedDocId", _uploadedDocId);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("applicationId", _applicationId);
		_columnOriginalValues.put("archived", _archived);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("comment_", "comment");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("collaborationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("stageName", 256L);

		columnBitmasks.put("userType", 512L);

		columnBitmasks.put("comment_", 1024L);

		columnBitmasks.put("status", 2048L);

		columnBitmasks.put("uploadedDocId", 4096L);

		columnBitmasks.put("caseId", 8192L);

		columnBitmasks.put("applicationId", 16384L);

		columnBitmasks.put("archived", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Collobartion _escapedModel;

}