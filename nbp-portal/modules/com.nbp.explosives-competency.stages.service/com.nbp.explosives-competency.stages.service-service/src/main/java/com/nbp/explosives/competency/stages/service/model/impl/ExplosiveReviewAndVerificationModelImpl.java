/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.explosives.competency.stages.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.explosives.competency.stages.service.model.ExplosiveReviewAndVerification;
import com.nbp.explosives.competency.stages.service.model.ExplosiveReviewAndVerificationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ExplosiveReviewAndVerification service. Represents a row in the &quot;nbp_explosive_rev_ver&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ExplosiveReviewAndVerificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExplosiveReviewAndVerificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExplosiveReviewAndVerificationImpl
 * @generated
 */
@JSON(strict = true)
public class ExplosiveReviewAndVerificationModelImpl
	extends BaseModelImpl<ExplosiveReviewAndVerification>
	implements ExplosiveReviewAndVerificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a explosive review and verification model instance should use the <code>ExplosiveReviewAndVerification</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_explosive_rev_ver";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"issuanceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"caseId", Types.VARCHAR}, {"amountDue", Types.VARCHAR},
		{"dateReceived", Types.TIMESTAMP}, {"amountreceived", Types.VARCHAR},
		{"receivedNumber", Types.VARCHAR}, {"comments", Types.VARCHAR},
		{"amountOutstanding", Types.VARCHAR}, {"dueDate", Types.TIMESTAMP},
		{"status", Types.VARCHAR}, {"paymentreceiptFileEntryId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issuanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amountDue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateReceived", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("amountreceived", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivedNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amountOutstanding", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentreceiptFileEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_explosive_rev_ver (uuid_ VARCHAR(75) null,issuanceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,amountDue VARCHAR(75) null,dateReceived DATE null,amountreceived VARCHAR(75) null,receivedNumber VARCHAR(75) null,comments VARCHAR(75) null,amountOutstanding VARCHAR(75) null,dueDate DATE null,status VARCHAR(75) null,paymentreceiptFileEntryId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_explosive_rev_ver";

	public static final String ORDER_BY_JPQL =
		" ORDER BY explosiveReviewAndVerification.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_explosive_rev_ver.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ExplosiveReviewAndVerificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _issuanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIssuanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _issuanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExplosiveReviewAndVerification.class;
	}

	@Override
	public String getModelClassName() {
		return ExplosiveReviewAndVerification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ExplosiveReviewAndVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ExplosiveReviewAndVerification, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExplosiveReviewAndVerification, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(ExplosiveReviewAndVerification)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ExplosiveReviewAndVerification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ExplosiveReviewAndVerification, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ExplosiveReviewAndVerification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ExplosiveReviewAndVerification, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ExplosiveReviewAndVerification, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<ExplosiveReviewAndVerification, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<ExplosiveReviewAndVerification, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<ExplosiveReviewAndVerification, Object>>();

			attributeGetterFunctions.put(
				"uuid", ExplosiveReviewAndVerification::getUuid);
			attributeGetterFunctions.put(
				"issuanceId", ExplosiveReviewAndVerification::getIssuanceId);
			attributeGetterFunctions.put(
				"groupId", ExplosiveReviewAndVerification::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ExplosiveReviewAndVerification::getCompanyId);
			attributeGetterFunctions.put(
				"userId", ExplosiveReviewAndVerification::getUserId);
			attributeGetterFunctions.put(
				"userName", ExplosiveReviewAndVerification::getUserName);
			attributeGetterFunctions.put(
				"createDate", ExplosiveReviewAndVerification::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate",
				ExplosiveReviewAndVerification::getModifiedDate);
			attributeGetterFunctions.put(
				"caseId", ExplosiveReviewAndVerification::getCaseId);
			attributeGetterFunctions.put(
				"amountDue", ExplosiveReviewAndVerification::getAmountDue);
			attributeGetterFunctions.put(
				"dateReceived",
				ExplosiveReviewAndVerification::getDateReceived);
			attributeGetterFunctions.put(
				"amountreceived",
				ExplosiveReviewAndVerification::getAmountreceived);
			attributeGetterFunctions.put(
				"receivedNumber",
				ExplosiveReviewAndVerification::getReceivedNumber);
			attributeGetterFunctions.put(
				"comments", ExplosiveReviewAndVerification::getComments);
			attributeGetterFunctions.put(
				"amountOutstanding",
				ExplosiveReviewAndVerification::getAmountOutstanding);
			attributeGetterFunctions.put(
				"dueDate", ExplosiveReviewAndVerification::getDueDate);
			attributeGetterFunctions.put(
				"status", ExplosiveReviewAndVerification::getStatus);
			attributeGetterFunctions.put(
				"paymentreceiptFileEntryId",
				ExplosiveReviewAndVerification::getPaymentreceiptFileEntryId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ExplosiveReviewAndVerification, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ExplosiveReviewAndVerification, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String,
						 BiConsumer<ExplosiveReviewAndVerification, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setUuid);
			attributeSetterBiConsumers.put(
				"issuanceId",
				(BiConsumer<ExplosiveReviewAndVerification, Long>)
					ExplosiveReviewAndVerification::setIssuanceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ExplosiveReviewAndVerification, Long>)
					ExplosiveReviewAndVerification::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ExplosiveReviewAndVerification, Long>)
					ExplosiveReviewAndVerification::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ExplosiveReviewAndVerification, Long>)
					ExplosiveReviewAndVerification::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ExplosiveReviewAndVerification, Date>)
					ExplosiveReviewAndVerification::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ExplosiveReviewAndVerification, Date>)
					ExplosiveReviewAndVerification::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setCaseId);
			attributeSetterBiConsumers.put(
				"amountDue",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setAmountDue);
			attributeSetterBiConsumers.put(
				"dateReceived",
				(BiConsumer<ExplosiveReviewAndVerification, Date>)
					ExplosiveReviewAndVerification::setDateReceived);
			attributeSetterBiConsumers.put(
				"amountreceived",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setAmountreceived);
			attributeSetterBiConsumers.put(
				"receivedNumber",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setReceivedNumber);
			attributeSetterBiConsumers.put(
				"comments",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setComments);
			attributeSetterBiConsumers.put(
				"amountOutstanding",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setAmountOutstanding);
			attributeSetterBiConsumers.put(
				"dueDate",
				(BiConsumer<ExplosiveReviewAndVerification, Date>)
					ExplosiveReviewAndVerification::setDueDate);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<ExplosiveReviewAndVerification, String>)
					ExplosiveReviewAndVerification::setStatus);
			attributeSetterBiConsumers.put(
				"paymentreceiptFileEntryId",
				(BiConsumer<ExplosiveReviewAndVerification, Long>)
					ExplosiveReviewAndVerification::
						setPaymentreceiptFileEntryId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getIssuanceId() {
		return _issuanceId;
	}

	@Override
	public void setIssuanceId(long issuanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_issuanceId = issuanceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getAmountDue() {
		if (_amountDue == null) {
			return "";
		}
		else {
			return _amountDue;
		}
	}

	@Override
	public void setAmountDue(String amountDue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amountDue = amountDue;
	}

	@JSON
	@Override
	public Date getDateReceived() {
		return _dateReceived;
	}

	@Override
	public void setDateReceived(Date dateReceived) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateReceived = dateReceived;
	}

	@JSON
	@Override
	public String getAmountreceived() {
		if (_amountreceived == null) {
			return "";
		}
		else {
			return _amountreceived;
		}
	}

	@Override
	public void setAmountreceived(String amountreceived) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amountreceived = amountreceived;
	}

	@JSON
	@Override
	public String getReceivedNumber() {
		if (_receivedNumber == null) {
			return "";
		}
		else {
			return _receivedNumber;
		}
	}

	@Override
	public void setReceivedNumber(String receivedNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivedNumber = receivedNumber;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comments = comments;
	}

	@JSON
	@Override
	public String getAmountOutstanding() {
		if (_amountOutstanding == null) {
			return "";
		}
		else {
			return _amountOutstanding;
		}
	}

	@Override
	public void setAmountOutstanding(String amountOutstanding) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amountOutstanding = amountOutstanding;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dueDate = dueDate;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getPaymentreceiptFileEntryId() {
		return _paymentreceiptFileEntryId;
	}

	@Override
	public void setPaymentreceiptFileEntryId(long paymentreceiptFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentreceiptFileEntryId = paymentreceiptFileEntryId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				ExplosiveReviewAndVerification.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ExplosiveReviewAndVerification.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExplosiveReviewAndVerification toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ExplosiveReviewAndVerification>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExplosiveReviewAndVerificationImpl explosiveReviewAndVerificationImpl =
			new ExplosiveReviewAndVerificationImpl();

		explosiveReviewAndVerificationImpl.setUuid(getUuid());
		explosiveReviewAndVerificationImpl.setIssuanceId(getIssuanceId());
		explosiveReviewAndVerificationImpl.setGroupId(getGroupId());
		explosiveReviewAndVerificationImpl.setCompanyId(getCompanyId());
		explosiveReviewAndVerificationImpl.setUserId(getUserId());
		explosiveReviewAndVerificationImpl.setUserName(getUserName());
		explosiveReviewAndVerificationImpl.setCreateDate(getCreateDate());
		explosiveReviewAndVerificationImpl.setModifiedDate(getModifiedDate());
		explosiveReviewAndVerificationImpl.setCaseId(getCaseId());
		explosiveReviewAndVerificationImpl.setAmountDue(getAmountDue());
		explosiveReviewAndVerificationImpl.setDateReceived(getDateReceived());
		explosiveReviewAndVerificationImpl.setAmountreceived(
			getAmountreceived());
		explosiveReviewAndVerificationImpl.setReceivedNumber(
			getReceivedNumber());
		explosiveReviewAndVerificationImpl.setComments(getComments());
		explosiveReviewAndVerificationImpl.setAmountOutstanding(
			getAmountOutstanding());
		explosiveReviewAndVerificationImpl.setDueDate(getDueDate());
		explosiveReviewAndVerificationImpl.setStatus(getStatus());
		explosiveReviewAndVerificationImpl.setPaymentreceiptFileEntryId(
			getPaymentreceiptFileEntryId());

		explosiveReviewAndVerificationImpl.resetOriginalValues();

		return explosiveReviewAndVerificationImpl;
	}

	@Override
	public ExplosiveReviewAndVerification cloneWithOriginalValues() {
		ExplosiveReviewAndVerificationImpl explosiveReviewAndVerificationImpl =
			new ExplosiveReviewAndVerificationImpl();

		explosiveReviewAndVerificationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		explosiveReviewAndVerificationImpl.setIssuanceId(
			this.<Long>getColumnOriginalValue("issuanceId"));
		explosiveReviewAndVerificationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		explosiveReviewAndVerificationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		explosiveReviewAndVerificationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		explosiveReviewAndVerificationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		explosiveReviewAndVerificationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		explosiveReviewAndVerificationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		explosiveReviewAndVerificationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		explosiveReviewAndVerificationImpl.setAmountDue(
			this.<String>getColumnOriginalValue("amountDue"));
		explosiveReviewAndVerificationImpl.setDateReceived(
			this.<Date>getColumnOriginalValue("dateReceived"));
		explosiveReviewAndVerificationImpl.setAmountreceived(
			this.<String>getColumnOriginalValue("amountreceived"));
		explosiveReviewAndVerificationImpl.setReceivedNumber(
			this.<String>getColumnOriginalValue("receivedNumber"));
		explosiveReviewAndVerificationImpl.setComments(
			this.<String>getColumnOriginalValue("comments"));
		explosiveReviewAndVerificationImpl.setAmountOutstanding(
			this.<String>getColumnOriginalValue("amountOutstanding"));
		explosiveReviewAndVerificationImpl.setDueDate(
			this.<Date>getColumnOriginalValue("dueDate"));
		explosiveReviewAndVerificationImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		explosiveReviewAndVerificationImpl.setPaymentreceiptFileEntryId(
			this.<Long>getColumnOriginalValue("paymentreceiptFileEntryId"));

		return explosiveReviewAndVerificationImpl;
	}

	@Override
	public int compareTo(
		ExplosiveReviewAndVerification explosiveReviewAndVerification) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), explosiveReviewAndVerification.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ExplosiveReviewAndVerification)) {
			return false;
		}

		ExplosiveReviewAndVerification explosiveReviewAndVerification =
			(ExplosiveReviewAndVerification)object;

		long primaryKey = explosiveReviewAndVerification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ExplosiveReviewAndVerification> toCacheModel() {
		ExplosiveReviewAndVerificationCacheModel
			explosiveReviewAndVerificationCacheModel =
				new ExplosiveReviewAndVerificationCacheModel();

		explosiveReviewAndVerificationCacheModel.uuid = getUuid();

		String uuid = explosiveReviewAndVerificationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.uuid = null;
		}

		explosiveReviewAndVerificationCacheModel.issuanceId = getIssuanceId();

		explosiveReviewAndVerificationCacheModel.groupId = getGroupId();

		explosiveReviewAndVerificationCacheModel.companyId = getCompanyId();

		explosiveReviewAndVerificationCacheModel.userId = getUserId();

		explosiveReviewAndVerificationCacheModel.userName = getUserName();

		String userName = explosiveReviewAndVerificationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			explosiveReviewAndVerificationCacheModel.createDate =
				createDate.getTime();
		}
		else {
			explosiveReviewAndVerificationCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			explosiveReviewAndVerificationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			explosiveReviewAndVerificationCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		explosiveReviewAndVerificationCacheModel.caseId = getCaseId();

		String caseId = explosiveReviewAndVerificationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.caseId = null;
		}

		explosiveReviewAndVerificationCacheModel.amountDue = getAmountDue();

		String amountDue = explosiveReviewAndVerificationCacheModel.amountDue;

		if ((amountDue != null) && (amountDue.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.amountDue = null;
		}

		Date dateReceived = getDateReceived();

		if (dateReceived != null) {
			explosiveReviewAndVerificationCacheModel.dateReceived =
				dateReceived.getTime();
		}
		else {
			explosiveReviewAndVerificationCacheModel.dateReceived =
				Long.MIN_VALUE;
		}

		explosiveReviewAndVerificationCacheModel.amountreceived =
			getAmountreceived();

		String amountreceived =
			explosiveReviewAndVerificationCacheModel.amountreceived;

		if ((amountreceived != null) && (amountreceived.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.amountreceived = null;
		}

		explosiveReviewAndVerificationCacheModel.receivedNumber =
			getReceivedNumber();

		String receivedNumber =
			explosiveReviewAndVerificationCacheModel.receivedNumber;

		if ((receivedNumber != null) && (receivedNumber.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.receivedNumber = null;
		}

		explosiveReviewAndVerificationCacheModel.comments = getComments();

		String comments = explosiveReviewAndVerificationCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.comments = null;
		}

		explosiveReviewAndVerificationCacheModel.amountOutstanding =
			getAmountOutstanding();

		String amountOutstanding =
			explosiveReviewAndVerificationCacheModel.amountOutstanding;

		if ((amountOutstanding != null) && (amountOutstanding.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.amountOutstanding = null;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			explosiveReviewAndVerificationCacheModel.dueDate =
				dueDate.getTime();
		}
		else {
			explosiveReviewAndVerificationCacheModel.dueDate = Long.MIN_VALUE;
		}

		explosiveReviewAndVerificationCacheModel.status = getStatus();

		String status = explosiveReviewAndVerificationCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			explosiveReviewAndVerificationCacheModel.status = null;
		}

		explosiveReviewAndVerificationCacheModel.paymentreceiptFileEntryId =
			getPaymentreceiptFileEntryId();

		return explosiveReviewAndVerificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ExplosiveReviewAndVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ExplosiveReviewAndVerification, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ExplosiveReviewAndVerification, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ExplosiveReviewAndVerification)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, ExplosiveReviewAndVerification>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						ExplosiveReviewAndVerification.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _issuanceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _amountDue;
	private Date _dateReceived;
	private String _amountreceived;
	private String _receivedNumber;
	private String _comments;
	private String _amountOutstanding;
	private Date _dueDate;
	private String _status;
	private long _paymentreceiptFileEntryId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ExplosiveReviewAndVerification, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ExplosiveReviewAndVerification)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("issuanceId", _issuanceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("amountDue", _amountDue);
		_columnOriginalValues.put("dateReceived", _dateReceived);
		_columnOriginalValues.put("amountreceived", _amountreceived);
		_columnOriginalValues.put("receivedNumber", _receivedNumber);
		_columnOriginalValues.put("comments", _comments);
		_columnOriginalValues.put("amountOutstanding", _amountOutstanding);
		_columnOriginalValues.put("dueDate", _dueDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put(
			"paymentreceiptFileEntryId", _paymentreceiptFileEntryId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("issuanceId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("caseId", 256L);

		columnBitmasks.put("amountDue", 512L);

		columnBitmasks.put("dateReceived", 1024L);

		columnBitmasks.put("amountreceived", 2048L);

		columnBitmasks.put("receivedNumber", 4096L);

		columnBitmasks.put("comments", 8192L);

		columnBitmasks.put("amountOutstanding", 16384L);

		columnBitmasks.put("dueDate", 32768L);

		columnBitmasks.put("status", 65536L);

		columnBitmasks.put("paymentreceiptFileEntryId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ExplosiveReviewAndVerification _escapedModel;

}