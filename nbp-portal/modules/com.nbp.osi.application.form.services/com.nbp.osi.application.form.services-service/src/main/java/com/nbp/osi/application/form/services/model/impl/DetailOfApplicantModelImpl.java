/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.application.form.services.model.DetailOfApplicant;
import com.nbp.osi.application.form.services.model.DetailOfApplicantModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DetailOfApplicant service. Represents a row in the &quot;nbp_osi_applicant_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DetailOfApplicantModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DetailOfApplicantImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DetailOfApplicantImpl
 * @generated
 */
@JSON(strict = true)
public class DetailOfApplicantModelImpl
	extends BaseModelImpl<DetailOfApplicant> implements DetailOfApplicantModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a detail of applicant model instance should use the <code>DetailOfApplicant</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_applicant_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"detailOfApplicantId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"applicantName", Types.VARCHAR},
		{"applicantMiddleName", Types.VARCHAR},
		{"applicantLastName", Types.VARCHAR},
		{"applicantAddress", Types.VARCHAR}, {"applicantEmail", Types.VARCHAR},
		{"applicantTeleNum", Types.VARCHAR}, {"applicantTrn", Types.VARCHAR},
		{"applicantIdNumber", Types.VARCHAR}, {"applicantDob", Types.TIMESTAMP},
		{"applicantOccupation", Types.VARCHAR},
		{"osiApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("detailOfApplicantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantMiddleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTeleNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTrn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantIdNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantDob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantOccupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_applicant_details (uuid_ VARCHAR(75) null,detailOfApplicantId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicantName VARCHAR(75) null,applicantMiddleName VARCHAR(75) null,applicantLastName VARCHAR(75) null,applicantAddress VARCHAR(500) null,applicantEmail VARCHAR(75) null,applicantTeleNum VARCHAR(75) null,applicantTrn VARCHAR(75) null,applicantIdNumber VARCHAR(75) null,applicantDob DATE null,applicantOccupation VARCHAR(75) null,osiApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_applicant_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY detailOfApplicant.detailOfApplicantId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_applicant_details.detailOfApplicantId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DETAILOFAPPLICANTID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DetailOfApplicantModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _detailOfApplicantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDetailOfApplicantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _detailOfApplicantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DetailOfApplicant.class;
	}

	@Override
	public String getModelClassName() {
		return DetailOfApplicant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DetailOfApplicant, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DetailOfApplicant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DetailOfApplicant, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DetailOfApplicant)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DetailOfApplicant, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DetailOfApplicant, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DetailOfApplicant)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DetailOfApplicant, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DetailOfApplicant, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<DetailOfApplicant, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<DetailOfApplicant, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<DetailOfApplicant, Object>>();

			attributeGetterFunctions.put("uuid", DetailOfApplicant::getUuid);
			attributeGetterFunctions.put(
				"detailOfApplicantId",
				DetailOfApplicant::getDetailOfApplicantId);
			attributeGetterFunctions.put(
				"groupId", DetailOfApplicant::getGroupId);
			attributeGetterFunctions.put(
				"companyId", DetailOfApplicant::getCompanyId);
			attributeGetterFunctions.put(
				"userId", DetailOfApplicant::getUserId);
			attributeGetterFunctions.put(
				"userName", DetailOfApplicant::getUserName);
			attributeGetterFunctions.put(
				"createDate", DetailOfApplicant::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", DetailOfApplicant::getModifiedDate);
			attributeGetterFunctions.put(
				"applicantName", DetailOfApplicant::getApplicantName);
			attributeGetterFunctions.put(
				"applicantMiddleName",
				DetailOfApplicant::getApplicantMiddleName);
			attributeGetterFunctions.put(
				"applicantLastName", DetailOfApplicant::getApplicantLastName);
			attributeGetterFunctions.put(
				"applicantAddress", DetailOfApplicant::getApplicantAddress);
			attributeGetterFunctions.put(
				"applicantEmail", DetailOfApplicant::getApplicantEmail);
			attributeGetterFunctions.put(
				"applicantTeleNum", DetailOfApplicant::getApplicantTeleNum);
			attributeGetterFunctions.put(
				"applicantTrn", DetailOfApplicant::getApplicantTrn);
			attributeGetterFunctions.put(
				"applicantIdNumber", DetailOfApplicant::getApplicantIdNumber);
			attributeGetterFunctions.put(
				"applicantDob", DetailOfApplicant::getApplicantDob);
			attributeGetterFunctions.put(
				"applicantOccupation",
				DetailOfApplicant::getApplicantOccupation);
			attributeGetterFunctions.put(
				"osiApplicationId", DetailOfApplicant::getOsiApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<DetailOfApplicant, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<DetailOfApplicant, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<DetailOfApplicant, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setUuid);
			attributeSetterBiConsumers.put(
				"detailOfApplicantId",
				(BiConsumer<DetailOfApplicant, Long>)
					DetailOfApplicant::setDetailOfApplicantId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<DetailOfApplicant, Long>)
					DetailOfApplicant::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<DetailOfApplicant, Long>)
					DetailOfApplicant::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<DetailOfApplicant, Long>)
					DetailOfApplicant::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<DetailOfApplicant, Date>)
					DetailOfApplicant::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<DetailOfApplicant, Date>)
					DetailOfApplicant::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicantName",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantName);
			attributeSetterBiConsumers.put(
				"applicantMiddleName",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantMiddleName);
			attributeSetterBiConsumers.put(
				"applicantLastName",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantLastName);
			attributeSetterBiConsumers.put(
				"applicantAddress",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantAddress);
			attributeSetterBiConsumers.put(
				"applicantEmail",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantEmail);
			attributeSetterBiConsumers.put(
				"applicantTeleNum",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantTeleNum);
			attributeSetterBiConsumers.put(
				"applicantTrn",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantTrn);
			attributeSetterBiConsumers.put(
				"applicantIdNumber",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantIdNumber);
			attributeSetterBiConsumers.put(
				"applicantDob",
				(BiConsumer<DetailOfApplicant, Date>)
					DetailOfApplicant::setApplicantDob);
			attributeSetterBiConsumers.put(
				"applicantOccupation",
				(BiConsumer<DetailOfApplicant, String>)
					DetailOfApplicant::setApplicantOccupation);
			attributeSetterBiConsumers.put(
				"osiApplicationId",
				(BiConsumer<DetailOfApplicant, Long>)
					DetailOfApplicant::setOsiApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDetailOfApplicantId() {
		return _detailOfApplicantId;
	}

	@Override
	public void setDetailOfApplicantId(long detailOfApplicantId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_detailOfApplicantId = detailOfApplicantId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getApplicantMiddleName() {
		if (_applicantMiddleName == null) {
			return "";
		}
		else {
			return _applicantMiddleName;
		}
	}

	@Override
	public void setApplicantMiddleName(String applicantMiddleName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantMiddleName = applicantMiddleName;
	}

	@JSON
	@Override
	public String getApplicantLastName() {
		if (_applicantLastName == null) {
			return "";
		}
		else {
			return _applicantLastName;
		}
	}

	@Override
	public void setApplicantLastName(String applicantLastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantLastName = applicantLastName;
	}

	@JSON
	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return "";
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantAddress = applicantAddress;
	}

	@JSON
	@Override
	public String getApplicantEmail() {
		if (_applicantEmail == null) {
			return "";
		}
		else {
			return _applicantEmail;
		}
	}

	@Override
	public void setApplicantEmail(String applicantEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantEmail = applicantEmail;
	}

	@JSON
	@Override
	public String getApplicantTeleNum() {
		if (_applicantTeleNum == null) {
			return "";
		}
		else {
			return _applicantTeleNum;
		}
	}

	@Override
	public void setApplicantTeleNum(String applicantTeleNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantTeleNum = applicantTeleNum;
	}

	@JSON
	@Override
	public String getApplicantTrn() {
		if (_applicantTrn == null) {
			return "";
		}
		else {
			return _applicantTrn;
		}
	}

	@Override
	public void setApplicantTrn(String applicantTrn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantTrn = applicantTrn;
	}

	@JSON
	@Override
	public String getApplicantIdNumber() {
		if (_applicantIdNumber == null) {
			return "";
		}
		else {
			return _applicantIdNumber;
		}
	}

	@Override
	public void setApplicantIdNumber(String applicantIdNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantIdNumber = applicantIdNumber;
	}

	@JSON
	@Override
	public Date getApplicantDob() {
		return _applicantDob;
	}

	@Override
	public void setApplicantDob(Date applicantDob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantDob = applicantDob;
	}

	@JSON
	@Override
	public String getApplicantOccupation() {
		if (_applicantOccupation == null) {
			return "";
		}
		else {
			return _applicantOccupation;
		}
	}

	@Override
	public void setApplicantOccupation(String applicantOccupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantOccupation = applicantOccupation;
	}

	@JSON
	@Override
	public long getOsiApplicationId() {
		return _osiApplicationId;
	}

	@Override
	public void setOsiApplicationId(long osiApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiApplicationId = osiApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(DetailOfApplicant.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DetailOfApplicant.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DetailOfApplicant toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DetailOfApplicant>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DetailOfApplicantImpl detailOfApplicantImpl =
			new DetailOfApplicantImpl();

		detailOfApplicantImpl.setUuid(getUuid());
		detailOfApplicantImpl.setDetailOfApplicantId(getDetailOfApplicantId());
		detailOfApplicantImpl.setGroupId(getGroupId());
		detailOfApplicantImpl.setCompanyId(getCompanyId());
		detailOfApplicantImpl.setUserId(getUserId());
		detailOfApplicantImpl.setUserName(getUserName());
		detailOfApplicantImpl.setCreateDate(getCreateDate());
		detailOfApplicantImpl.setModifiedDate(getModifiedDate());
		detailOfApplicantImpl.setApplicantName(getApplicantName());
		detailOfApplicantImpl.setApplicantMiddleName(getApplicantMiddleName());
		detailOfApplicantImpl.setApplicantLastName(getApplicantLastName());
		detailOfApplicantImpl.setApplicantAddress(getApplicantAddress());
		detailOfApplicantImpl.setApplicantEmail(getApplicantEmail());
		detailOfApplicantImpl.setApplicantTeleNum(getApplicantTeleNum());
		detailOfApplicantImpl.setApplicantTrn(getApplicantTrn());
		detailOfApplicantImpl.setApplicantIdNumber(getApplicantIdNumber());
		detailOfApplicantImpl.setApplicantDob(getApplicantDob());
		detailOfApplicantImpl.setApplicantOccupation(getApplicantOccupation());
		detailOfApplicantImpl.setOsiApplicationId(getOsiApplicationId());

		detailOfApplicantImpl.resetOriginalValues();

		return detailOfApplicantImpl;
	}

	@Override
	public DetailOfApplicant cloneWithOriginalValues() {
		DetailOfApplicantImpl detailOfApplicantImpl =
			new DetailOfApplicantImpl();

		detailOfApplicantImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		detailOfApplicantImpl.setDetailOfApplicantId(
			this.<Long>getColumnOriginalValue("detailOfApplicantId"));
		detailOfApplicantImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		detailOfApplicantImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		detailOfApplicantImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		detailOfApplicantImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		detailOfApplicantImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		detailOfApplicantImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		detailOfApplicantImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		detailOfApplicantImpl.setApplicantMiddleName(
			this.<String>getColumnOriginalValue("applicantMiddleName"));
		detailOfApplicantImpl.setApplicantLastName(
			this.<String>getColumnOriginalValue("applicantLastName"));
		detailOfApplicantImpl.setApplicantAddress(
			this.<String>getColumnOriginalValue("applicantAddress"));
		detailOfApplicantImpl.setApplicantEmail(
			this.<String>getColumnOriginalValue("applicantEmail"));
		detailOfApplicantImpl.setApplicantTeleNum(
			this.<String>getColumnOriginalValue("applicantTeleNum"));
		detailOfApplicantImpl.setApplicantTrn(
			this.<String>getColumnOriginalValue("applicantTrn"));
		detailOfApplicantImpl.setApplicantIdNumber(
			this.<String>getColumnOriginalValue("applicantIdNumber"));
		detailOfApplicantImpl.setApplicantDob(
			this.<Date>getColumnOriginalValue("applicantDob"));
		detailOfApplicantImpl.setApplicantOccupation(
			this.<String>getColumnOriginalValue("applicantOccupation"));
		detailOfApplicantImpl.setOsiApplicationId(
			this.<Long>getColumnOriginalValue("osiApplicationId"));

		return detailOfApplicantImpl;
	}

	@Override
	public int compareTo(DetailOfApplicant detailOfApplicant) {
		long primaryKey = detailOfApplicant.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DetailOfApplicant)) {
			return false;
		}

		DetailOfApplicant detailOfApplicant = (DetailOfApplicant)object;

		long primaryKey = detailOfApplicant.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DetailOfApplicant> toCacheModel() {
		DetailOfApplicantCacheModel detailOfApplicantCacheModel =
			new DetailOfApplicantCacheModel();

		detailOfApplicantCacheModel.uuid = getUuid();

		String uuid = detailOfApplicantCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			detailOfApplicantCacheModel.uuid = null;
		}

		detailOfApplicantCacheModel.detailOfApplicantId =
			getDetailOfApplicantId();

		detailOfApplicantCacheModel.groupId = getGroupId();

		detailOfApplicantCacheModel.companyId = getCompanyId();

		detailOfApplicantCacheModel.userId = getUserId();

		detailOfApplicantCacheModel.userName = getUserName();

		String userName = detailOfApplicantCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			detailOfApplicantCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			detailOfApplicantCacheModel.createDate = createDate.getTime();
		}
		else {
			detailOfApplicantCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			detailOfApplicantCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			detailOfApplicantCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		detailOfApplicantCacheModel.applicantName = getApplicantName();

		String applicantName = detailOfApplicantCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			detailOfApplicantCacheModel.applicantName = null;
		}

		detailOfApplicantCacheModel.applicantMiddleName =
			getApplicantMiddleName();

		String applicantMiddleName =
			detailOfApplicantCacheModel.applicantMiddleName;

		if ((applicantMiddleName != null) &&
			(applicantMiddleName.length() == 0)) {

			detailOfApplicantCacheModel.applicantMiddleName = null;
		}

		detailOfApplicantCacheModel.applicantLastName = getApplicantLastName();

		String applicantLastName =
			detailOfApplicantCacheModel.applicantLastName;

		if ((applicantLastName != null) && (applicantLastName.length() == 0)) {
			detailOfApplicantCacheModel.applicantLastName = null;
		}

		detailOfApplicantCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = detailOfApplicantCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			detailOfApplicantCacheModel.applicantAddress = null;
		}

		detailOfApplicantCacheModel.applicantEmail = getApplicantEmail();

		String applicantEmail = detailOfApplicantCacheModel.applicantEmail;

		if ((applicantEmail != null) && (applicantEmail.length() == 0)) {
			detailOfApplicantCacheModel.applicantEmail = null;
		}

		detailOfApplicantCacheModel.applicantTeleNum = getApplicantTeleNum();

		String applicantTeleNum = detailOfApplicantCacheModel.applicantTeleNum;

		if ((applicantTeleNum != null) && (applicantTeleNum.length() == 0)) {
			detailOfApplicantCacheModel.applicantTeleNum = null;
		}

		detailOfApplicantCacheModel.applicantTrn = getApplicantTrn();

		String applicantTrn = detailOfApplicantCacheModel.applicantTrn;

		if ((applicantTrn != null) && (applicantTrn.length() == 0)) {
			detailOfApplicantCacheModel.applicantTrn = null;
		}

		detailOfApplicantCacheModel.applicantIdNumber = getApplicantIdNumber();

		String applicantIdNumber =
			detailOfApplicantCacheModel.applicantIdNumber;

		if ((applicantIdNumber != null) && (applicantIdNumber.length() == 0)) {
			detailOfApplicantCacheModel.applicantIdNumber = null;
		}

		Date applicantDob = getApplicantDob();

		if (applicantDob != null) {
			detailOfApplicantCacheModel.applicantDob = applicantDob.getTime();
		}
		else {
			detailOfApplicantCacheModel.applicantDob = Long.MIN_VALUE;
		}

		detailOfApplicantCacheModel.applicantOccupation =
			getApplicantOccupation();

		String applicantOccupation =
			detailOfApplicantCacheModel.applicantOccupation;

		if ((applicantOccupation != null) &&
			(applicantOccupation.length() == 0)) {

			detailOfApplicantCacheModel.applicantOccupation = null;
		}

		detailOfApplicantCacheModel.osiApplicationId = getOsiApplicationId();

		return detailOfApplicantCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DetailOfApplicant, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DetailOfApplicant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DetailOfApplicant, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DetailOfApplicant)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DetailOfApplicant>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DetailOfApplicant.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _detailOfApplicantId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicantName;
	private String _applicantMiddleName;
	private String _applicantLastName;
	private String _applicantAddress;
	private String _applicantEmail;
	private String _applicantTeleNum;
	private String _applicantTrn;
	private String _applicantIdNumber;
	private Date _applicantDob;
	private String _applicantOccupation;
	private long _osiApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DetailOfApplicant, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DetailOfApplicant)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("detailOfApplicantId", _detailOfApplicantId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("applicantMiddleName", _applicantMiddleName);
		_columnOriginalValues.put("applicantLastName", _applicantLastName);
		_columnOriginalValues.put("applicantAddress", _applicantAddress);
		_columnOriginalValues.put("applicantEmail", _applicantEmail);
		_columnOriginalValues.put("applicantTeleNum", _applicantTeleNum);
		_columnOriginalValues.put("applicantTrn", _applicantTrn);
		_columnOriginalValues.put("applicantIdNumber", _applicantIdNumber);
		_columnOriginalValues.put("applicantDob", _applicantDob);
		_columnOriginalValues.put("applicantOccupation", _applicantOccupation);
		_columnOriginalValues.put("osiApplicationId", _osiApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("detailOfApplicantId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("applicantName", 256L);

		columnBitmasks.put("applicantMiddleName", 512L);

		columnBitmasks.put("applicantLastName", 1024L);

		columnBitmasks.put("applicantAddress", 2048L);

		columnBitmasks.put("applicantEmail", 4096L);

		columnBitmasks.put("applicantTeleNum", 8192L);

		columnBitmasks.put("applicantTrn", 16384L);

		columnBitmasks.put("applicantIdNumber", 32768L);

		columnBitmasks.put("applicantDob", 65536L);

		columnBitmasks.put("applicantOccupation", 131072L);

		columnBitmasks.put("osiApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DetailOfApplicant _escapedModel;

}