/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.osi.application.form.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.osi.application.form.services.model.CounsellingExperience;
import com.nbp.osi.application.form.services.model.CounsellingExperienceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CounsellingExperience service. Represents a row in the &quot;nbp_osi_counselling&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CounsellingExperienceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CounsellingExperienceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CounsellingExperienceImpl
 * @generated
 */
@JSON(strict = true)
public class CounsellingExperienceModelImpl
	extends BaseModelImpl<CounsellingExperience>
	implements CounsellingExperienceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a counselling experience model instance should use the <code>CounsellingExperience</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_osi_counselling";

	public static final Object[][] TABLE_COLUMNS = {
		{"counsellingExperienceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"company", Types.VARCHAR},
		{"position", Types.VARCHAR}, {"counsellingType", Types.VARCHAR},
		{"serviceLength", Types.VARCHAR}, {"counter", Types.VARCHAR},
		{"osiApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("counsellingExperienceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("company", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counsellingType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceLength", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osiApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_osi_counselling (counsellingExperienceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,company VARCHAR(75) null,position VARCHAR(75) null,counsellingType VARCHAR(75) null,serviceLength VARCHAR(75) null,counter VARCHAR(75) null,osiApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_osi_counselling";

	public static final String ORDER_BY_JPQL =
		" ORDER BY counsellingExperience.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_osi_counselling.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OSIAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CounsellingExperienceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _counsellingExperienceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCounsellingExperienceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _counsellingExperienceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CounsellingExperience.class;
	}

	@Override
	public String getModelClassName() {
		return CounsellingExperience.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CounsellingExperience, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CounsellingExperience, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CounsellingExperience, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CounsellingExperience)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CounsellingExperience, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CounsellingExperience, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CounsellingExperience)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CounsellingExperience, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CounsellingExperience, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<CounsellingExperience, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<CounsellingExperience, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CounsellingExperience, Object>>();

			attributeGetterFunctions.put(
				"counsellingExperienceId",
				CounsellingExperience::getCounsellingExperienceId);
			attributeGetterFunctions.put(
				"groupId", CounsellingExperience::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CounsellingExperience::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CounsellingExperience::getUserId);
			attributeGetterFunctions.put(
				"userName", CounsellingExperience::getUserName);
			attributeGetterFunctions.put(
				"createDate", CounsellingExperience::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CounsellingExperience::getModifiedDate);
			attributeGetterFunctions.put(
				"company", CounsellingExperience::getCompany);
			attributeGetterFunctions.put(
				"position", CounsellingExperience::getPosition);
			attributeGetterFunctions.put(
				"counsellingType", CounsellingExperience::getCounsellingType);
			attributeGetterFunctions.put(
				"serviceLength", CounsellingExperience::getServiceLength);
			attributeGetterFunctions.put(
				"counter", CounsellingExperience::getCounter);
			attributeGetterFunctions.put(
				"osiApplicationId", CounsellingExperience::getOsiApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CounsellingExperience, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CounsellingExperience, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CounsellingExperience, ?>>();

			attributeSetterBiConsumers.put(
				"counsellingExperienceId",
				(BiConsumer<CounsellingExperience, Long>)
					CounsellingExperience::setCounsellingExperienceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CounsellingExperience, Long>)
					CounsellingExperience::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CounsellingExperience, Long>)
					CounsellingExperience::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CounsellingExperience, Long>)
					CounsellingExperience::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CounsellingExperience, String>)
					CounsellingExperience::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CounsellingExperience, Date>)
					CounsellingExperience::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CounsellingExperience, Date>)
					CounsellingExperience::setModifiedDate);
			attributeSetterBiConsumers.put(
				"company",
				(BiConsumer<CounsellingExperience, String>)
					CounsellingExperience::setCompany);
			attributeSetterBiConsumers.put(
				"position",
				(BiConsumer<CounsellingExperience, String>)
					CounsellingExperience::setPosition);
			attributeSetterBiConsumers.put(
				"counsellingType",
				(BiConsumer<CounsellingExperience, String>)
					CounsellingExperience::setCounsellingType);
			attributeSetterBiConsumers.put(
				"serviceLength",
				(BiConsumer<CounsellingExperience, String>)
					CounsellingExperience::setServiceLength);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<CounsellingExperience, String>)
					CounsellingExperience::setCounter);
			attributeSetterBiConsumers.put(
				"osiApplicationId",
				(BiConsumer<CounsellingExperience, Long>)
					CounsellingExperience::setOsiApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getCounsellingExperienceId() {
		return _counsellingExperienceId;
	}

	@Override
	public void setCounsellingExperienceId(long counsellingExperienceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counsellingExperienceId = counsellingExperienceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return "";
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_company = company;
	}

	@JSON
	@Override
	public String getPosition() {
		if (_position == null) {
			return "";
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_position = position;
	}

	@JSON
	@Override
	public String getCounsellingType() {
		if (_counsellingType == null) {
			return "";
		}
		else {
			return _counsellingType;
		}
	}

	@Override
	public void setCounsellingType(String counsellingType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counsellingType = counsellingType;
	}

	@JSON
	@Override
	public String getServiceLength() {
		if (_serviceLength == null) {
			return "";
		}
		else {
			return _serviceLength;
		}
	}

	@Override
	public void setServiceLength(String serviceLength) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceLength = serviceLength;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	@JSON
	@Override
	public long getOsiApplicationId() {
		return _osiApplicationId;
	}

	@Override
	public void setOsiApplicationId(long osiApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_osiApplicationId = osiApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOsiApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("osiApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CounsellingExperience.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CounsellingExperience toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CounsellingExperience>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CounsellingExperienceImpl counsellingExperienceImpl =
			new CounsellingExperienceImpl();

		counsellingExperienceImpl.setCounsellingExperienceId(
			getCounsellingExperienceId());
		counsellingExperienceImpl.setGroupId(getGroupId());
		counsellingExperienceImpl.setCompanyId(getCompanyId());
		counsellingExperienceImpl.setUserId(getUserId());
		counsellingExperienceImpl.setUserName(getUserName());
		counsellingExperienceImpl.setCreateDate(getCreateDate());
		counsellingExperienceImpl.setModifiedDate(getModifiedDate());
		counsellingExperienceImpl.setCompany(getCompany());
		counsellingExperienceImpl.setPosition(getPosition());
		counsellingExperienceImpl.setCounsellingType(getCounsellingType());
		counsellingExperienceImpl.setServiceLength(getServiceLength());
		counsellingExperienceImpl.setCounter(getCounter());
		counsellingExperienceImpl.setOsiApplicationId(getOsiApplicationId());

		counsellingExperienceImpl.resetOriginalValues();

		return counsellingExperienceImpl;
	}

	@Override
	public CounsellingExperience cloneWithOriginalValues() {
		CounsellingExperienceImpl counsellingExperienceImpl =
			new CounsellingExperienceImpl();

		counsellingExperienceImpl.setCounsellingExperienceId(
			this.<Long>getColumnOriginalValue("counsellingExperienceId"));
		counsellingExperienceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		counsellingExperienceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		counsellingExperienceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		counsellingExperienceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		counsellingExperienceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		counsellingExperienceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		counsellingExperienceImpl.setCompany(
			this.<String>getColumnOriginalValue("company"));
		counsellingExperienceImpl.setPosition(
			this.<String>getColumnOriginalValue("position"));
		counsellingExperienceImpl.setCounsellingType(
			this.<String>getColumnOriginalValue("counsellingType"));
		counsellingExperienceImpl.setServiceLength(
			this.<String>getColumnOriginalValue("serviceLength"));
		counsellingExperienceImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));
		counsellingExperienceImpl.setOsiApplicationId(
			this.<Long>getColumnOriginalValue("osiApplicationId"));

		return counsellingExperienceImpl;
	}

	@Override
	public int compareTo(CounsellingExperience counsellingExperience) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), counsellingExperience.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CounsellingExperience)) {
			return false;
		}

		CounsellingExperience counsellingExperience =
			(CounsellingExperience)object;

		long primaryKey = counsellingExperience.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CounsellingExperience> toCacheModel() {
		CounsellingExperienceCacheModel counsellingExperienceCacheModel =
			new CounsellingExperienceCacheModel();

		counsellingExperienceCacheModel.counsellingExperienceId =
			getCounsellingExperienceId();

		counsellingExperienceCacheModel.groupId = getGroupId();

		counsellingExperienceCacheModel.companyId = getCompanyId();

		counsellingExperienceCacheModel.userId = getUserId();

		counsellingExperienceCacheModel.userName = getUserName();

		String userName = counsellingExperienceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			counsellingExperienceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			counsellingExperienceCacheModel.createDate = createDate.getTime();
		}
		else {
			counsellingExperienceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			counsellingExperienceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			counsellingExperienceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		counsellingExperienceCacheModel.company = getCompany();

		String company = counsellingExperienceCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			counsellingExperienceCacheModel.company = null;
		}

		counsellingExperienceCacheModel.position = getPosition();

		String position = counsellingExperienceCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			counsellingExperienceCacheModel.position = null;
		}

		counsellingExperienceCacheModel.counsellingType = getCounsellingType();

		String counsellingType =
			counsellingExperienceCacheModel.counsellingType;

		if ((counsellingType != null) && (counsellingType.length() == 0)) {
			counsellingExperienceCacheModel.counsellingType = null;
		}

		counsellingExperienceCacheModel.serviceLength = getServiceLength();

		String serviceLength = counsellingExperienceCacheModel.serviceLength;

		if ((serviceLength != null) && (serviceLength.length() == 0)) {
			counsellingExperienceCacheModel.serviceLength = null;
		}

		counsellingExperienceCacheModel.counter = getCounter();

		String counter = counsellingExperienceCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			counsellingExperienceCacheModel.counter = null;
		}

		counsellingExperienceCacheModel.osiApplicationId =
			getOsiApplicationId();

		return counsellingExperienceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CounsellingExperience, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CounsellingExperience, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CounsellingExperience, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CounsellingExperience)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CounsellingExperience>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CounsellingExperience.class, ModelWrapper.class);

	}

	private long _counsellingExperienceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _company;
	private String _position;
	private String _counsellingType;
	private String _serviceLength;
	private String _counter;
	private long _osiApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<CounsellingExperience, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CounsellingExperience)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"counsellingExperienceId", _counsellingExperienceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("company", _company);
		_columnOriginalValues.put("position", _position);
		_columnOriginalValues.put("counsellingType", _counsellingType);
		_columnOriginalValues.put("serviceLength", _serviceLength);
		_columnOriginalValues.put("counter", _counter);
		_columnOriginalValues.put("osiApplicationId", _osiApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("counsellingExperienceId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("company", 128L);

		columnBitmasks.put("position", 256L);

		columnBitmasks.put("counsellingType", 512L);

		columnBitmasks.put("serviceLength", 1024L);

		columnBitmasks.put("counter", 2048L);

		columnBitmasks.put("osiApplicationId", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CounsellingExperience _escapedModel;

}