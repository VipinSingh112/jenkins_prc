/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ncbj.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ncbj.application.form.service.model.NcbjNumberEffectiveAdd;
import com.nbp.ncbj.application.form.service.model.NcbjNumberEffectiveAddModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NcbjNumberEffectiveAdd service. Represents a row in the &quot;nbp_ncbj_number_effective_add&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NcbjNumberEffectiveAddModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NcbjNumberEffectiveAddImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NcbjNumberEffectiveAddImpl
 * @generated
 */
@JSON(strict = true)
public class NcbjNumberEffectiveAddModelImpl
	extends BaseModelImpl<NcbjNumberEffectiveAdd>
	implements NcbjNumberEffectiveAddModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ncbj number effective add model instance should use the <code>NcbjNumberEffectiveAdd</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ncbj_number_effective_add";

	public static final Object[][] TABLE_COLUMNS = {
		{"ncbjNumberEffectiveAddId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"numberOfFullTimeEmployees", Types.VARCHAR},
		{"numberOfPartTimeEmployees", Types.VARCHAR},
		{"department", Types.VARCHAR}, {"numberOfcontractors", Types.VARCHAR},
		{"numberOfContractedWorkers", Types.VARCHAR},
		{"counter", Types.VARCHAR}, {"ncbjApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ncbjNumberEffectiveAddId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("numberOfFullTimeEmployees", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfPartTimeEmployees", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfcontractors", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfContractedWorkers", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncbjApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ncbj_number_effective_add (ncbjNumberEffectiveAddId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,numberOfFullTimeEmployees VARCHAR(75) null,numberOfPartTimeEmployees VARCHAR(75) null,department VARCHAR(75) null,numberOfcontractors VARCHAR(75) null,numberOfContractedWorkers VARCHAR(75) null,counter VARCHAR(75) null,ncbjApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ncbj_number_effective_add";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ncbjNumberEffectiveAdd.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ncbj_number_effective_add.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NCBJAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NcbjNumberEffectiveAddModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ncbjNumberEffectiveAddId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNcbjNumberEffectiveAddId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ncbjNumberEffectiveAddId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NcbjNumberEffectiveAdd.class;
	}

	@Override
	public String getModelClassName() {
		return NcbjNumberEffectiveAdd.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NcbjNumberEffectiveAdd, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NcbjNumberEffectiveAdd, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjNumberEffectiveAdd, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NcbjNumberEffectiveAdd)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NcbjNumberEffectiveAdd, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NcbjNumberEffectiveAdd, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NcbjNumberEffectiveAdd)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NcbjNumberEffectiveAdd, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NcbjNumberEffectiveAdd, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<NcbjNumberEffectiveAdd, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<NcbjNumberEffectiveAdd, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<NcbjNumberEffectiveAdd, Object>>();

			attributeGetterFunctions.put(
				"ncbjNumberEffectiveAddId",
				NcbjNumberEffectiveAdd::getNcbjNumberEffectiveAddId);
			attributeGetterFunctions.put(
				"groupId", NcbjNumberEffectiveAdd::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NcbjNumberEffectiveAdd::getCompanyId);
			attributeGetterFunctions.put(
				"userId", NcbjNumberEffectiveAdd::getUserId);
			attributeGetterFunctions.put(
				"userName", NcbjNumberEffectiveAdd::getUserName);
			attributeGetterFunctions.put(
				"createDate", NcbjNumberEffectiveAdd::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NcbjNumberEffectiveAdd::getModifiedDate);
			attributeGetterFunctions.put(
				"numberOfFullTimeEmployees",
				NcbjNumberEffectiveAdd::getNumberOfFullTimeEmployees);
			attributeGetterFunctions.put(
				"numberOfPartTimeEmployees",
				NcbjNumberEffectiveAdd::getNumberOfPartTimeEmployees);
			attributeGetterFunctions.put(
				"department", NcbjNumberEffectiveAdd::getDepartment);
			attributeGetterFunctions.put(
				"numberOfcontractors",
				NcbjNumberEffectiveAdd::getNumberOfcontractors);
			attributeGetterFunctions.put(
				"numberOfContractedWorkers",
				NcbjNumberEffectiveAdd::getNumberOfContractedWorkers);
			attributeGetterFunctions.put(
				"counter", NcbjNumberEffectiveAdd::getCounter);
			attributeGetterFunctions.put(
				"ncbjApplicationId",
				NcbjNumberEffectiveAdd::getNcbjApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<NcbjNumberEffectiveAdd, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NcbjNumberEffectiveAdd, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<NcbjNumberEffectiveAdd, ?>>();

			attributeSetterBiConsumers.put(
				"ncbjNumberEffectiveAddId",
				(BiConsumer<NcbjNumberEffectiveAdd, Long>)
					NcbjNumberEffectiveAdd::setNcbjNumberEffectiveAddId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NcbjNumberEffectiveAdd, Long>)
					NcbjNumberEffectiveAdd::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NcbjNumberEffectiveAdd, Long>)
					NcbjNumberEffectiveAdd::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NcbjNumberEffectiveAdd, Long>)
					NcbjNumberEffectiveAdd::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NcbjNumberEffectiveAdd, String>)
					NcbjNumberEffectiveAdd::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NcbjNumberEffectiveAdd, Date>)
					NcbjNumberEffectiveAdd::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NcbjNumberEffectiveAdd, Date>)
					NcbjNumberEffectiveAdd::setModifiedDate);
			attributeSetterBiConsumers.put(
				"numberOfFullTimeEmployees",
				(BiConsumer<NcbjNumberEffectiveAdd, String>)
					NcbjNumberEffectiveAdd::setNumberOfFullTimeEmployees);
			attributeSetterBiConsumers.put(
				"numberOfPartTimeEmployees",
				(BiConsumer<NcbjNumberEffectiveAdd, String>)
					NcbjNumberEffectiveAdd::setNumberOfPartTimeEmployees);
			attributeSetterBiConsumers.put(
				"department",
				(BiConsumer<NcbjNumberEffectiveAdd, String>)
					NcbjNumberEffectiveAdd::setDepartment);
			attributeSetterBiConsumers.put(
				"numberOfcontractors",
				(BiConsumer<NcbjNumberEffectiveAdd, String>)
					NcbjNumberEffectiveAdd::setNumberOfcontractors);
			attributeSetterBiConsumers.put(
				"numberOfContractedWorkers",
				(BiConsumer<NcbjNumberEffectiveAdd, String>)
					NcbjNumberEffectiveAdd::setNumberOfContractedWorkers);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<NcbjNumberEffectiveAdd, String>)
					NcbjNumberEffectiveAdd::setCounter);
			attributeSetterBiConsumers.put(
				"ncbjApplicationId",
				(BiConsumer<NcbjNumberEffectiveAdd, Long>)
					NcbjNumberEffectiveAdd::setNcbjApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getNcbjNumberEffectiveAddId() {
		return _ncbjNumberEffectiveAddId;
	}

	@Override
	public void setNcbjNumberEffectiveAddId(long ncbjNumberEffectiveAddId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjNumberEffectiveAddId = ncbjNumberEffectiveAddId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNumberOfFullTimeEmployees() {
		if (_numberOfFullTimeEmployees == null) {
			return "";
		}
		else {
			return _numberOfFullTimeEmployees;
		}
	}

	@Override
	public void setNumberOfFullTimeEmployees(String numberOfFullTimeEmployees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfFullTimeEmployees = numberOfFullTimeEmployees;
	}

	@JSON
	@Override
	public String getNumberOfPartTimeEmployees() {
		if (_numberOfPartTimeEmployees == null) {
			return "";
		}
		else {
			return _numberOfPartTimeEmployees;
		}
	}

	@Override
	public void setNumberOfPartTimeEmployees(String numberOfPartTimeEmployees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfPartTimeEmployees = numberOfPartTimeEmployees;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return "";
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_department = department;
	}

	@JSON
	@Override
	public String getNumberOfcontractors() {
		if (_numberOfcontractors == null) {
			return "";
		}
		else {
			return _numberOfcontractors;
		}
	}

	@Override
	public void setNumberOfcontractors(String numberOfcontractors) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfcontractors = numberOfcontractors;
	}

	@JSON
	@Override
	public String getNumberOfContractedWorkers() {
		if (_numberOfContractedWorkers == null) {
			return "";
		}
		else {
			return _numberOfContractedWorkers;
		}
	}

	@Override
	public void setNumberOfContractedWorkers(String numberOfContractedWorkers) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfContractedWorkers = numberOfContractedWorkers;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	@JSON
	@Override
	public long getNcbjApplicationId() {
		return _ncbjApplicationId;
	}

	@Override
	public void setNcbjApplicationId(long ncbjApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjApplicationId = ncbjApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNcbjApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NcbjNumberEffectiveAdd.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NcbjNumberEffectiveAdd toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NcbjNumberEffectiveAdd>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NcbjNumberEffectiveAddImpl ncbjNumberEffectiveAddImpl =
			new NcbjNumberEffectiveAddImpl();

		ncbjNumberEffectiveAddImpl.setNcbjNumberEffectiveAddId(
			getNcbjNumberEffectiveAddId());
		ncbjNumberEffectiveAddImpl.setGroupId(getGroupId());
		ncbjNumberEffectiveAddImpl.setCompanyId(getCompanyId());
		ncbjNumberEffectiveAddImpl.setUserId(getUserId());
		ncbjNumberEffectiveAddImpl.setUserName(getUserName());
		ncbjNumberEffectiveAddImpl.setCreateDate(getCreateDate());
		ncbjNumberEffectiveAddImpl.setModifiedDate(getModifiedDate());
		ncbjNumberEffectiveAddImpl.setNumberOfFullTimeEmployees(
			getNumberOfFullTimeEmployees());
		ncbjNumberEffectiveAddImpl.setNumberOfPartTimeEmployees(
			getNumberOfPartTimeEmployees());
		ncbjNumberEffectiveAddImpl.setDepartment(getDepartment());
		ncbjNumberEffectiveAddImpl.setNumberOfcontractors(
			getNumberOfcontractors());
		ncbjNumberEffectiveAddImpl.setNumberOfContractedWorkers(
			getNumberOfContractedWorkers());
		ncbjNumberEffectiveAddImpl.setCounter(getCounter());
		ncbjNumberEffectiveAddImpl.setNcbjApplicationId(getNcbjApplicationId());

		ncbjNumberEffectiveAddImpl.resetOriginalValues();

		return ncbjNumberEffectiveAddImpl;
	}

	@Override
	public NcbjNumberEffectiveAdd cloneWithOriginalValues() {
		NcbjNumberEffectiveAddImpl ncbjNumberEffectiveAddImpl =
			new NcbjNumberEffectiveAddImpl();

		ncbjNumberEffectiveAddImpl.setNcbjNumberEffectiveAddId(
			this.<Long>getColumnOriginalValue("ncbjNumberEffectiveAddId"));
		ncbjNumberEffectiveAddImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ncbjNumberEffectiveAddImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ncbjNumberEffectiveAddImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ncbjNumberEffectiveAddImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ncbjNumberEffectiveAddImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ncbjNumberEffectiveAddImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ncbjNumberEffectiveAddImpl.setNumberOfFullTimeEmployees(
			this.<String>getColumnOriginalValue("numberOfFullTimeEmployees"));
		ncbjNumberEffectiveAddImpl.setNumberOfPartTimeEmployees(
			this.<String>getColumnOriginalValue("numberOfPartTimeEmployees"));
		ncbjNumberEffectiveAddImpl.setDepartment(
			this.<String>getColumnOriginalValue("department"));
		ncbjNumberEffectiveAddImpl.setNumberOfcontractors(
			this.<String>getColumnOriginalValue("numberOfcontractors"));
		ncbjNumberEffectiveAddImpl.setNumberOfContractedWorkers(
			this.<String>getColumnOriginalValue("numberOfContractedWorkers"));
		ncbjNumberEffectiveAddImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));
		ncbjNumberEffectiveAddImpl.setNcbjApplicationId(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));

		return ncbjNumberEffectiveAddImpl;
	}

	@Override
	public int compareTo(NcbjNumberEffectiveAdd ncbjNumberEffectiveAdd) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ncbjNumberEffectiveAdd.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NcbjNumberEffectiveAdd)) {
			return false;
		}

		NcbjNumberEffectiveAdd ncbjNumberEffectiveAdd =
			(NcbjNumberEffectiveAdd)object;

		long primaryKey = ncbjNumberEffectiveAdd.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NcbjNumberEffectiveAdd> toCacheModel() {
		NcbjNumberEffectiveAddCacheModel ncbjNumberEffectiveAddCacheModel =
			new NcbjNumberEffectiveAddCacheModel();

		ncbjNumberEffectiveAddCacheModel.ncbjNumberEffectiveAddId =
			getNcbjNumberEffectiveAddId();

		ncbjNumberEffectiveAddCacheModel.groupId = getGroupId();

		ncbjNumberEffectiveAddCacheModel.companyId = getCompanyId();

		ncbjNumberEffectiveAddCacheModel.userId = getUserId();

		ncbjNumberEffectiveAddCacheModel.userName = getUserName();

		String userName = ncbjNumberEffectiveAddCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ncbjNumberEffectiveAddCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ncbjNumberEffectiveAddCacheModel.createDate = createDate.getTime();
		}
		else {
			ncbjNumberEffectiveAddCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ncbjNumberEffectiveAddCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			ncbjNumberEffectiveAddCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ncbjNumberEffectiveAddCacheModel.numberOfFullTimeEmployees =
			getNumberOfFullTimeEmployees();

		String numberOfFullTimeEmployees =
			ncbjNumberEffectiveAddCacheModel.numberOfFullTimeEmployees;

		if ((numberOfFullTimeEmployees != null) &&
			(numberOfFullTimeEmployees.length() == 0)) {

			ncbjNumberEffectiveAddCacheModel.numberOfFullTimeEmployees = null;
		}

		ncbjNumberEffectiveAddCacheModel.numberOfPartTimeEmployees =
			getNumberOfPartTimeEmployees();

		String numberOfPartTimeEmployees =
			ncbjNumberEffectiveAddCacheModel.numberOfPartTimeEmployees;

		if ((numberOfPartTimeEmployees != null) &&
			(numberOfPartTimeEmployees.length() == 0)) {

			ncbjNumberEffectiveAddCacheModel.numberOfPartTimeEmployees = null;
		}

		ncbjNumberEffectiveAddCacheModel.department = getDepartment();

		String department = ncbjNumberEffectiveAddCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			ncbjNumberEffectiveAddCacheModel.department = null;
		}

		ncbjNumberEffectiveAddCacheModel.numberOfcontractors =
			getNumberOfcontractors();

		String numberOfcontractors =
			ncbjNumberEffectiveAddCacheModel.numberOfcontractors;

		if ((numberOfcontractors != null) &&
			(numberOfcontractors.length() == 0)) {

			ncbjNumberEffectiveAddCacheModel.numberOfcontractors = null;
		}

		ncbjNumberEffectiveAddCacheModel.numberOfContractedWorkers =
			getNumberOfContractedWorkers();

		String numberOfContractedWorkers =
			ncbjNumberEffectiveAddCacheModel.numberOfContractedWorkers;

		if ((numberOfContractedWorkers != null) &&
			(numberOfContractedWorkers.length() == 0)) {

			ncbjNumberEffectiveAddCacheModel.numberOfContractedWorkers = null;
		}

		ncbjNumberEffectiveAddCacheModel.counter = getCounter();

		String counter = ncbjNumberEffectiveAddCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			ncbjNumberEffectiveAddCacheModel.counter = null;
		}

		ncbjNumberEffectiveAddCacheModel.ncbjApplicationId =
			getNcbjApplicationId();

		return ncbjNumberEffectiveAddCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NcbjNumberEffectiveAdd, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NcbjNumberEffectiveAdd, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjNumberEffectiveAdd, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(NcbjNumberEffectiveAdd)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NcbjNumberEffectiveAdd>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					NcbjNumberEffectiveAdd.class, ModelWrapper.class);

	}

	private long _ncbjNumberEffectiveAddId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _numberOfFullTimeEmployees;
	private String _numberOfPartTimeEmployees;
	private String _department;
	private String _numberOfcontractors;
	private String _numberOfContractedWorkers;
	private String _counter;
	private long _ncbjApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<NcbjNumberEffectiveAdd, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NcbjNumberEffectiveAdd)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"ncbjNumberEffectiveAddId", _ncbjNumberEffectiveAddId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"numberOfFullTimeEmployees", _numberOfFullTimeEmployees);
		_columnOriginalValues.put(
			"numberOfPartTimeEmployees", _numberOfPartTimeEmployees);
		_columnOriginalValues.put("department", _department);
		_columnOriginalValues.put("numberOfcontractors", _numberOfcontractors);
		_columnOriginalValues.put(
			"numberOfContractedWorkers", _numberOfContractedWorkers);
		_columnOriginalValues.put("counter", _counter);
		_columnOriginalValues.put("ncbjApplicationId", _ncbjApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ncbjNumberEffectiveAddId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("numberOfFullTimeEmployees", 128L);

		columnBitmasks.put("numberOfPartTimeEmployees", 256L);

		columnBitmasks.put("department", 512L);

		columnBitmasks.put("numberOfcontractors", 1024L);

		columnBitmasks.put("numberOfContractedWorkers", 2048L);

		columnBitmasks.put("counter", 4096L);

		columnBitmasks.put("ncbjApplicationId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NcbjNumberEffectiveAdd _escapedModel;

}