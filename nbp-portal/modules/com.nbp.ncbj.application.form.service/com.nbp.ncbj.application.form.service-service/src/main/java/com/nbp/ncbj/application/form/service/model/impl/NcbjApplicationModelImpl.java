/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ncbj.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ncbj.application.form.service.model.NcbjApplication;
import com.nbp.ncbj.application.form.service.model.NcbjApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NcbjApplication service. Represents a row in the &quot;nbp_ncbj_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NcbjApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NcbjApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NcbjApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class NcbjApplicationModelImpl
	extends BaseModelImpl<NcbjApplication> implements NcbjApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ncbj application model instance should use the <code>NcbjApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ncbj_application";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"ncbjApplicationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"typeOfCertification", Types.VARCHAR},
		{"typeOfTransaction", Types.VARCHAR}, {"typeOfServices", Types.VARCHAR},
		{"subCategoryServices", Types.VARCHAR},
		{"iso9001CertificationValue", Types.VARCHAR},
		{"numberOfSite", Types.VARCHAR},
		{"iso22000CertificationValue", Types.VARCHAR},
		{"status", Types.INTEGER}, {"applicationNumber", Types.VARCHAR},
		{"transferReason", Types.VARCHAR},
		{"expiredLicenseAppNumber", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"icmDocumentsPath", Types.VARCHAR}, {"pdfFileEntryId", Types.BIGINT},
		{"dateOfExpiration", Types.TIMESTAMP},
		{"appCurrentStageName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncbjApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeOfCertification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfTransaction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfServices", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subCategoryServices", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("iso9001CertificationValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfSite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("iso22000CertificationValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transferReason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredLicenseAppNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentsPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateOfExpiration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ncbj_application (uuid_ VARCHAR(75) null,ncbjApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,typeOfCertification VARCHAR(500) null,typeOfTransaction VARCHAR(75) null,typeOfServices VARCHAR(75) null,subCategoryServices VARCHAR(75) null,iso9001CertificationValue VARCHAR(500) null,numberOfSite VARCHAR(75) null,iso22000CertificationValue TEXT null,status INTEGER,applicationNumber VARCHAR(75) null,transferReason VARCHAR(75) null,expiredLicenseAppNumber VARCHAR(75) null,caseId VARCHAR(500) null,icmDocumentsPath VARCHAR(500) null,pdfFileEntryId LONG,dateOfExpiration DATE null,appCurrentStageName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ncbj_application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ncbjApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ncbj_application.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPIREDLICENSEAPPNUMBER_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPEOFSERVICES_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NcbjApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ncbjApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNcbjApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ncbjApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NcbjApplication.class;
	}

	@Override
	public String getModelClassName() {
		return NcbjApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NcbjApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NcbjApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NcbjApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NcbjApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NcbjApplication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NcbjApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NcbjApplication, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NcbjApplication, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<NcbjApplication, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<NcbjApplication, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<NcbjApplication, Object>>();

			attributeGetterFunctions.put("uuid", NcbjApplication::getUuid);
			attributeGetterFunctions.put(
				"ncbjApplicationId", NcbjApplication::getNcbjApplicationId);
			attributeGetterFunctions.put(
				"groupId", NcbjApplication::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NcbjApplication::getCompanyId);
			attributeGetterFunctions.put("userId", NcbjApplication::getUserId);
			attributeGetterFunctions.put(
				"userName", NcbjApplication::getUserName);
			attributeGetterFunctions.put(
				"createDate", NcbjApplication::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NcbjApplication::getModifiedDate);
			attributeGetterFunctions.put(
				"typeOfCertification", NcbjApplication::getTypeOfCertification);
			attributeGetterFunctions.put(
				"typeOfTransaction", NcbjApplication::getTypeOfTransaction);
			attributeGetterFunctions.put(
				"typeOfServices", NcbjApplication::getTypeOfServices);
			attributeGetterFunctions.put(
				"subCategoryServices", NcbjApplication::getSubCategoryServices);
			attributeGetterFunctions.put(
				"iso9001CertificationValue",
				NcbjApplication::getIso9001CertificationValue);
			attributeGetterFunctions.put(
				"numberOfSite", NcbjApplication::getNumberOfSite);
			attributeGetterFunctions.put(
				"iso22000CertificationValue",
				NcbjApplication::getIso22000CertificationValue);
			attributeGetterFunctions.put("status", NcbjApplication::getStatus);
			attributeGetterFunctions.put(
				"applicationNumber", NcbjApplication::getApplicationNumber);
			attributeGetterFunctions.put(
				"transferReason", NcbjApplication::getTransferReason);
			attributeGetterFunctions.put(
				"expiredLicenseAppNumber",
				NcbjApplication::getExpiredLicenseAppNumber);
			attributeGetterFunctions.put("caseId", NcbjApplication::getCaseId);
			attributeGetterFunctions.put(
				"icmDocumentsPath", NcbjApplication::getIcmDocumentsPath);
			attributeGetterFunctions.put(
				"pdfFileEntryId", NcbjApplication::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"dateOfExpiration", NcbjApplication::getDateOfExpiration);
			attributeGetterFunctions.put(
				"appCurrentStageName", NcbjApplication::getAppCurrentStageName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<NcbjApplication, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NcbjApplication, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<NcbjApplication, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<NcbjApplication, String>)NcbjApplication::setUuid);
			attributeSetterBiConsumers.put(
				"ncbjApplicationId",
				(BiConsumer<NcbjApplication, Long>)
					NcbjApplication::setNcbjApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NcbjApplication, Long>)NcbjApplication::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NcbjApplication, Long>)
					NcbjApplication::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NcbjApplication, Long>)NcbjApplication::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NcbjApplication, Date>)
					NcbjApplication::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NcbjApplication, Date>)
					NcbjApplication::setModifiedDate);
			attributeSetterBiConsumers.put(
				"typeOfCertification",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setTypeOfCertification);
			attributeSetterBiConsumers.put(
				"typeOfTransaction",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setTypeOfTransaction);
			attributeSetterBiConsumers.put(
				"typeOfServices",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setTypeOfServices);
			attributeSetterBiConsumers.put(
				"subCategoryServices",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setSubCategoryServices);
			attributeSetterBiConsumers.put(
				"iso9001CertificationValue",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setIso9001CertificationValue);
			attributeSetterBiConsumers.put(
				"numberOfSite",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setNumberOfSite);
			attributeSetterBiConsumers.put(
				"iso22000CertificationValue",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setIso22000CertificationValue);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<NcbjApplication, Integer>)
					NcbjApplication::setStatus);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"transferReason",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setTransferReason);
			attributeSetterBiConsumers.put(
				"expiredLicenseAppNumber",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setExpiredLicenseAppNumber);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setCaseId);
			attributeSetterBiConsumers.put(
				"icmDocumentsPath",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setIcmDocumentsPath);
			attributeSetterBiConsumers.put(
				"pdfFileEntryId",
				(BiConsumer<NcbjApplication, Long>)
					NcbjApplication::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"dateOfExpiration",
				(BiConsumer<NcbjApplication, Date>)
					NcbjApplication::setDateOfExpiration);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<NcbjApplication, String>)
					NcbjApplication::setAppCurrentStageName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getNcbjApplicationId() {
		return _ncbjApplicationId;
	}

	@Override
	public void setNcbjApplicationId(long ncbjApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjApplicationId = ncbjApplicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTypeOfCertification() {
		if (_typeOfCertification == null) {
			return "";
		}
		else {
			return _typeOfCertification;
		}
	}

	@Override
	public void setTypeOfCertification(String typeOfCertification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfCertification = typeOfCertification;
	}

	@JSON
	@Override
	public String getTypeOfTransaction() {
		if (_typeOfTransaction == null) {
			return "";
		}
		else {
			return _typeOfTransaction;
		}
	}

	@Override
	public void setTypeOfTransaction(String typeOfTransaction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfTransaction = typeOfTransaction;
	}

	@JSON
	@Override
	public String getTypeOfServices() {
		if (_typeOfServices == null) {
			return "";
		}
		else {
			return _typeOfServices;
		}
	}

	@Override
	public void setTypeOfServices(String typeOfServices) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfServices = typeOfServices;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTypeOfServices() {
		return getColumnOriginalValue("typeOfServices");
	}

	@JSON
	@Override
	public String getSubCategoryServices() {
		if (_subCategoryServices == null) {
			return "";
		}
		else {
			return _subCategoryServices;
		}
	}

	@Override
	public void setSubCategoryServices(String subCategoryServices) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subCategoryServices = subCategoryServices;
	}

	@JSON
	@Override
	public String getIso9001CertificationValue() {
		if (_iso9001CertificationValue == null) {
			return "";
		}
		else {
			return _iso9001CertificationValue;
		}
	}

	@Override
	public void setIso9001CertificationValue(String iso9001CertificationValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_iso9001CertificationValue = iso9001CertificationValue;
	}

	@JSON
	@Override
	public String getNumberOfSite() {
		if (_numberOfSite == null) {
			return "";
		}
		else {
			return _numberOfSite;
		}
	}

	@Override
	public void setNumberOfSite(String numberOfSite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfSite = numberOfSite;
	}

	@JSON
	@Override
	public String getIso22000CertificationValue() {
		if (_iso22000CertificationValue == null) {
			return "";
		}
		else {
			return _iso22000CertificationValue;
		}
	}

	@Override
	public void setIso22000CertificationValue(
		String iso22000CertificationValue) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_iso22000CertificationValue = iso22000CertificationValue;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getTransferReason() {
		if (_transferReason == null) {
			return "";
		}
		else {
			return _transferReason;
		}
	}

	@Override
	public void setTransferReason(String transferReason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferReason = transferReason;
	}

	@JSON
	@Override
	public String getExpiredLicenseAppNumber() {
		if (_expiredLicenseAppNumber == null) {
			return "";
		}
		else {
			return _expiredLicenseAppNumber;
		}
	}

	@Override
	public void setExpiredLicenseAppNumber(String expiredLicenseAppNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredLicenseAppNumber = expiredLicenseAppNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExpiredLicenseAppNumber() {
		return getColumnOriginalValue("expiredLicenseAppNumber");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getIcmDocumentsPath() {
		if (_icmDocumentsPath == null) {
			return "";
		}
		else {
			return _icmDocumentsPath;
		}
	}

	@Override
	public void setIcmDocumentsPath(String icmDocumentsPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentsPath = icmDocumentsPath;
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _pdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long pdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pdfFileEntryId = pdfFileEntryId;
	}

	@JSON
	@Override
	public Date getDateOfExpiration() {
		return _dateOfExpiration;
	}

	@Override
	public void setDateOfExpiration(Date dateOfExpiration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfExpiration = dateOfExpiration;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(NcbjApplication.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NcbjApplication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NcbjApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NcbjApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NcbjApplicationImpl ncbjApplicationImpl = new NcbjApplicationImpl();

		ncbjApplicationImpl.setUuid(getUuid());
		ncbjApplicationImpl.setNcbjApplicationId(getNcbjApplicationId());
		ncbjApplicationImpl.setGroupId(getGroupId());
		ncbjApplicationImpl.setCompanyId(getCompanyId());
		ncbjApplicationImpl.setUserId(getUserId());
		ncbjApplicationImpl.setUserName(getUserName());
		ncbjApplicationImpl.setCreateDate(getCreateDate());
		ncbjApplicationImpl.setModifiedDate(getModifiedDate());
		ncbjApplicationImpl.setTypeOfCertification(getTypeOfCertification());
		ncbjApplicationImpl.setTypeOfTransaction(getTypeOfTransaction());
		ncbjApplicationImpl.setTypeOfServices(getTypeOfServices());
		ncbjApplicationImpl.setSubCategoryServices(getSubCategoryServices());
		ncbjApplicationImpl.setIso9001CertificationValue(
			getIso9001CertificationValue());
		ncbjApplicationImpl.setNumberOfSite(getNumberOfSite());
		ncbjApplicationImpl.setIso22000CertificationValue(
			getIso22000CertificationValue());
		ncbjApplicationImpl.setStatus(getStatus());
		ncbjApplicationImpl.setApplicationNumber(getApplicationNumber());
		ncbjApplicationImpl.setTransferReason(getTransferReason());
		ncbjApplicationImpl.setExpiredLicenseAppNumber(
			getExpiredLicenseAppNumber());
		ncbjApplicationImpl.setCaseId(getCaseId());
		ncbjApplicationImpl.setIcmDocumentsPath(getIcmDocumentsPath());
		ncbjApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		ncbjApplicationImpl.setDateOfExpiration(getDateOfExpiration());
		ncbjApplicationImpl.setAppCurrentStageName(getAppCurrentStageName());

		ncbjApplicationImpl.resetOriginalValues();

		return ncbjApplicationImpl;
	}

	@Override
	public NcbjApplication cloneWithOriginalValues() {
		NcbjApplicationImpl ncbjApplicationImpl = new NcbjApplicationImpl();

		ncbjApplicationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		ncbjApplicationImpl.setNcbjApplicationId(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));
		ncbjApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ncbjApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ncbjApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ncbjApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ncbjApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ncbjApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ncbjApplicationImpl.setTypeOfCertification(
			this.<String>getColumnOriginalValue("typeOfCertification"));
		ncbjApplicationImpl.setTypeOfTransaction(
			this.<String>getColumnOriginalValue("typeOfTransaction"));
		ncbjApplicationImpl.setTypeOfServices(
			this.<String>getColumnOriginalValue("typeOfServices"));
		ncbjApplicationImpl.setSubCategoryServices(
			this.<String>getColumnOriginalValue("subCategoryServices"));
		ncbjApplicationImpl.setIso9001CertificationValue(
			this.<String>getColumnOriginalValue("iso9001CertificationValue"));
		ncbjApplicationImpl.setNumberOfSite(
			this.<String>getColumnOriginalValue("numberOfSite"));
		ncbjApplicationImpl.setIso22000CertificationValue(
			this.<String>getColumnOriginalValue("iso22000CertificationValue"));
		ncbjApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		ncbjApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		ncbjApplicationImpl.setTransferReason(
			this.<String>getColumnOriginalValue("transferReason"));
		ncbjApplicationImpl.setExpiredLicenseAppNumber(
			this.<String>getColumnOriginalValue("expiredLicenseAppNumber"));
		ncbjApplicationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		ncbjApplicationImpl.setIcmDocumentsPath(
			this.<String>getColumnOriginalValue("icmDocumentsPath"));
		ncbjApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("pdfFileEntryId"));
		ncbjApplicationImpl.setDateOfExpiration(
			this.<Date>getColumnOriginalValue("dateOfExpiration"));
		ncbjApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));

		return ncbjApplicationImpl;
	}

	@Override
	public int compareTo(NcbjApplication ncbjApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ncbjApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NcbjApplication)) {
			return false;
		}

		NcbjApplication ncbjApplication = (NcbjApplication)object;

		long primaryKey = ncbjApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NcbjApplication> toCacheModel() {
		NcbjApplicationCacheModel ncbjApplicationCacheModel =
			new NcbjApplicationCacheModel();

		ncbjApplicationCacheModel.uuid = getUuid();

		String uuid = ncbjApplicationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ncbjApplicationCacheModel.uuid = null;
		}

		ncbjApplicationCacheModel.ncbjApplicationId = getNcbjApplicationId();

		ncbjApplicationCacheModel.groupId = getGroupId();

		ncbjApplicationCacheModel.companyId = getCompanyId();

		ncbjApplicationCacheModel.userId = getUserId();

		ncbjApplicationCacheModel.userName = getUserName();

		String userName = ncbjApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ncbjApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ncbjApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			ncbjApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ncbjApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ncbjApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ncbjApplicationCacheModel.typeOfCertification =
			getTypeOfCertification();

		String typeOfCertification =
			ncbjApplicationCacheModel.typeOfCertification;

		if ((typeOfCertification != null) &&
			(typeOfCertification.length() == 0)) {

			ncbjApplicationCacheModel.typeOfCertification = null;
		}

		ncbjApplicationCacheModel.typeOfTransaction = getTypeOfTransaction();

		String typeOfTransaction = ncbjApplicationCacheModel.typeOfTransaction;

		if ((typeOfTransaction != null) && (typeOfTransaction.length() == 0)) {
			ncbjApplicationCacheModel.typeOfTransaction = null;
		}

		ncbjApplicationCacheModel.typeOfServices = getTypeOfServices();

		String typeOfServices = ncbjApplicationCacheModel.typeOfServices;

		if ((typeOfServices != null) && (typeOfServices.length() == 0)) {
			ncbjApplicationCacheModel.typeOfServices = null;
		}

		ncbjApplicationCacheModel.subCategoryServices =
			getSubCategoryServices();

		String subCategoryServices =
			ncbjApplicationCacheModel.subCategoryServices;

		if ((subCategoryServices != null) &&
			(subCategoryServices.length() == 0)) {

			ncbjApplicationCacheModel.subCategoryServices = null;
		}

		ncbjApplicationCacheModel.iso9001CertificationValue =
			getIso9001CertificationValue();

		String iso9001CertificationValue =
			ncbjApplicationCacheModel.iso9001CertificationValue;

		if ((iso9001CertificationValue != null) &&
			(iso9001CertificationValue.length() == 0)) {

			ncbjApplicationCacheModel.iso9001CertificationValue = null;
		}

		ncbjApplicationCacheModel.numberOfSite = getNumberOfSite();

		String numberOfSite = ncbjApplicationCacheModel.numberOfSite;

		if ((numberOfSite != null) && (numberOfSite.length() == 0)) {
			ncbjApplicationCacheModel.numberOfSite = null;
		}

		ncbjApplicationCacheModel.iso22000CertificationValue =
			getIso22000CertificationValue();

		String iso22000CertificationValue =
			ncbjApplicationCacheModel.iso22000CertificationValue;

		if ((iso22000CertificationValue != null) &&
			(iso22000CertificationValue.length() == 0)) {

			ncbjApplicationCacheModel.iso22000CertificationValue = null;
		}

		ncbjApplicationCacheModel.status = getStatus();

		ncbjApplicationCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber = ncbjApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			ncbjApplicationCacheModel.applicationNumber = null;
		}

		ncbjApplicationCacheModel.transferReason = getTransferReason();

		String transferReason = ncbjApplicationCacheModel.transferReason;

		if ((transferReason != null) && (transferReason.length() == 0)) {
			ncbjApplicationCacheModel.transferReason = null;
		}

		ncbjApplicationCacheModel.expiredLicenseAppNumber =
			getExpiredLicenseAppNumber();

		String expiredLicenseAppNumber =
			ncbjApplicationCacheModel.expiredLicenseAppNumber;

		if ((expiredLicenseAppNumber != null) &&
			(expiredLicenseAppNumber.length() == 0)) {

			ncbjApplicationCacheModel.expiredLicenseAppNumber = null;
		}

		ncbjApplicationCacheModel.caseId = getCaseId();

		String caseId = ncbjApplicationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			ncbjApplicationCacheModel.caseId = null;
		}

		ncbjApplicationCacheModel.icmDocumentsPath = getIcmDocumentsPath();

		String icmDocumentsPath = ncbjApplicationCacheModel.icmDocumentsPath;

		if ((icmDocumentsPath != null) && (icmDocumentsPath.length() == 0)) {
			ncbjApplicationCacheModel.icmDocumentsPath = null;
		}

		ncbjApplicationCacheModel.pdfFileEntryId = getPdfFileEntryId();

		Date dateOfExpiration = getDateOfExpiration();

		if (dateOfExpiration != null) {
			ncbjApplicationCacheModel.dateOfExpiration =
				dateOfExpiration.getTime();
		}
		else {
			ncbjApplicationCacheModel.dateOfExpiration = Long.MIN_VALUE;
		}

		ncbjApplicationCacheModel.appCurrentStageName =
			getAppCurrentStageName();

		String appCurrentStageName =
			ncbjApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			ncbjApplicationCacheModel.appCurrentStageName = null;
		}

		return ncbjApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NcbjApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NcbjApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((NcbjApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NcbjApplication>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					NcbjApplication.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _ncbjApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _typeOfCertification;
	private String _typeOfTransaction;
	private String _typeOfServices;
	private String _subCategoryServices;
	private String _iso9001CertificationValue;
	private String _numberOfSite;
	private String _iso22000CertificationValue;
	private int _status;
	private String _applicationNumber;
	private String _transferReason;
	private String _expiredLicenseAppNumber;
	private String _caseId;
	private String _icmDocumentsPath;
	private long _pdfFileEntryId;
	private Date _dateOfExpiration;
	private String _appCurrentStageName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<NcbjApplication, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NcbjApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("ncbjApplicationId", _ncbjApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("typeOfCertification", _typeOfCertification);
		_columnOriginalValues.put("typeOfTransaction", _typeOfTransaction);
		_columnOriginalValues.put("typeOfServices", _typeOfServices);
		_columnOriginalValues.put("subCategoryServices", _subCategoryServices);
		_columnOriginalValues.put(
			"iso9001CertificationValue", _iso9001CertificationValue);
		_columnOriginalValues.put("numberOfSite", _numberOfSite);
		_columnOriginalValues.put(
			"iso22000CertificationValue", _iso22000CertificationValue);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("transferReason", _transferReason);
		_columnOriginalValues.put(
			"expiredLicenseAppNumber", _expiredLicenseAppNumber);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("icmDocumentsPath", _icmDocumentsPath);
		_columnOriginalValues.put("pdfFileEntryId", _pdfFileEntryId);
		_columnOriginalValues.put("dateOfExpiration", _dateOfExpiration);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("ncbjApplicationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("typeOfCertification", 256L);

		columnBitmasks.put("typeOfTransaction", 512L);

		columnBitmasks.put("typeOfServices", 1024L);

		columnBitmasks.put("subCategoryServices", 2048L);

		columnBitmasks.put("iso9001CertificationValue", 4096L);

		columnBitmasks.put("numberOfSite", 8192L);

		columnBitmasks.put("iso22000CertificationValue", 16384L);

		columnBitmasks.put("status", 32768L);

		columnBitmasks.put("applicationNumber", 65536L);

		columnBitmasks.put("transferReason", 131072L);

		columnBitmasks.put("expiredLicenseAppNumber", 262144L);

		columnBitmasks.put("caseId", 524288L);

		columnBitmasks.put("icmDocumentsPath", 1048576L);

		columnBitmasks.put("pdfFileEntryId", 2097152L);

		columnBitmasks.put("dateOfExpiration", 4194304L);

		columnBitmasks.put("appCurrentStageName", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NcbjApplication _escapedModel;

}