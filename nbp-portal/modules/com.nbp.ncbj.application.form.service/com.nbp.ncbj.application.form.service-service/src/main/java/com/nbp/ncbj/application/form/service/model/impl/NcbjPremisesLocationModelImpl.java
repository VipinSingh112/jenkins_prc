/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ncbj.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ncbj.application.form.service.model.NcbjPremisesLocation;
import com.nbp.ncbj.application.form.service.model.NcbjPremisesLocationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NcbjPremisesLocation service. Represents a row in the &quot;nbp_ncbj_premises_location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NcbjPremisesLocationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NcbjPremisesLocationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NcbjPremisesLocationImpl
 * @generated
 */
@JSON(strict = true)
public class NcbjPremisesLocationModelImpl
	extends BaseModelImpl<NcbjPremisesLocation>
	implements NcbjPremisesLocationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ncbj premises location model instance should use the <code>NcbjPremisesLocation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ncbj_premises_location";

	public static final Object[][] TABLE_COLUMNS = {
		{"ncbjPremisesLocationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"transferReasonDraft", Types.VARCHAR},
		{"activityExclusion", Types.VARCHAR},
		{"transferReasonAct", Types.VARCHAR},
		{"productionFacilitySize", Types.VARCHAR},
		{"warehouseFacilitySize", Types.VARCHAR},
		{"facilitiesLocation", Types.VARCHAR},
		{"detailForDiffManagement", Types.VARCHAR},
		{"ncbjApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ncbjPremisesLocationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("transferReasonDraft", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityExclusion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transferReasonAct", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionFacilitySize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("warehouseFacilitySize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facilitiesLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("detailForDiffManagement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ncbjApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ncbj_premises_location (ncbjPremisesLocationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,transferReasonDraft VARCHAR(500) null,activityExclusion VARCHAR(75) null,transferReasonAct VARCHAR(500) null,productionFacilitySize VARCHAR(75) null,warehouseFacilitySize VARCHAR(75) null,facilitiesLocation VARCHAR(500) null,detailForDiffManagement VARCHAR(500) null,ncbjApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ncbj_premises_location";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ncbjPremisesLocation.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ncbj_premises_location.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NCBJAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NcbjPremisesLocationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ncbjPremisesLocationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNcbjPremisesLocationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ncbjPremisesLocationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NcbjPremisesLocation.class;
	}

	@Override
	public String getModelClassName() {
		return NcbjPremisesLocation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NcbjPremisesLocation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NcbjPremisesLocation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjPremisesLocation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NcbjPremisesLocation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NcbjPremisesLocation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NcbjPremisesLocation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NcbjPremisesLocation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NcbjPremisesLocation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NcbjPremisesLocation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<NcbjPremisesLocation, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<NcbjPremisesLocation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<NcbjPremisesLocation, Object>>();

			attributeGetterFunctions.put(
				"ncbjPremisesLocationId",
				NcbjPremisesLocation::getNcbjPremisesLocationId);
			attributeGetterFunctions.put(
				"groupId", NcbjPremisesLocation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NcbjPremisesLocation::getCompanyId);
			attributeGetterFunctions.put(
				"userId", NcbjPremisesLocation::getUserId);
			attributeGetterFunctions.put(
				"userName", NcbjPremisesLocation::getUserName);
			attributeGetterFunctions.put(
				"createDate", NcbjPremisesLocation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NcbjPremisesLocation::getModifiedDate);
			attributeGetterFunctions.put(
				"transferReasonDraft",
				NcbjPremisesLocation::getTransferReasonDraft);
			attributeGetterFunctions.put(
				"activityExclusion",
				NcbjPremisesLocation::getActivityExclusion);
			attributeGetterFunctions.put(
				"transferReasonAct",
				NcbjPremisesLocation::getTransferReasonAct);
			attributeGetterFunctions.put(
				"productionFacilitySize",
				NcbjPremisesLocation::getProductionFacilitySize);
			attributeGetterFunctions.put(
				"warehouseFacilitySize",
				NcbjPremisesLocation::getWarehouseFacilitySize);
			attributeGetterFunctions.put(
				"facilitiesLocation",
				NcbjPremisesLocation::getFacilitiesLocation);
			attributeGetterFunctions.put(
				"detailForDiffManagement",
				NcbjPremisesLocation::getDetailForDiffManagement);
			attributeGetterFunctions.put(
				"ncbjApplicationId",
				NcbjPremisesLocation::getNcbjApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<NcbjPremisesLocation, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NcbjPremisesLocation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<NcbjPremisesLocation, ?>>();

			attributeSetterBiConsumers.put(
				"ncbjPremisesLocationId",
				(BiConsumer<NcbjPremisesLocation, Long>)
					NcbjPremisesLocation::setNcbjPremisesLocationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NcbjPremisesLocation, Long>)
					NcbjPremisesLocation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NcbjPremisesLocation, Long>)
					NcbjPremisesLocation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NcbjPremisesLocation, Long>)
					NcbjPremisesLocation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NcbjPremisesLocation, String>)
					NcbjPremisesLocation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NcbjPremisesLocation, Date>)
					NcbjPremisesLocation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NcbjPremisesLocation, Date>)
					NcbjPremisesLocation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"transferReasonDraft",
				(BiConsumer<NcbjPremisesLocation, String>)
					NcbjPremisesLocation::setTransferReasonDraft);
			attributeSetterBiConsumers.put(
				"activityExclusion",
				(BiConsumer<NcbjPremisesLocation, String>)
					NcbjPremisesLocation::setActivityExclusion);
			attributeSetterBiConsumers.put(
				"transferReasonAct",
				(BiConsumer<NcbjPremisesLocation, String>)
					NcbjPremisesLocation::setTransferReasonAct);
			attributeSetterBiConsumers.put(
				"productionFacilitySize",
				(BiConsumer<NcbjPremisesLocation, String>)
					NcbjPremisesLocation::setProductionFacilitySize);
			attributeSetterBiConsumers.put(
				"warehouseFacilitySize",
				(BiConsumer<NcbjPremisesLocation, String>)
					NcbjPremisesLocation::setWarehouseFacilitySize);
			attributeSetterBiConsumers.put(
				"facilitiesLocation",
				(BiConsumer<NcbjPremisesLocation, String>)
					NcbjPremisesLocation::setFacilitiesLocation);
			attributeSetterBiConsumers.put(
				"detailForDiffManagement",
				(BiConsumer<NcbjPremisesLocation, String>)
					NcbjPremisesLocation::setDetailForDiffManagement);
			attributeSetterBiConsumers.put(
				"ncbjApplicationId",
				(BiConsumer<NcbjPremisesLocation, Long>)
					NcbjPremisesLocation::setNcbjApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getNcbjPremisesLocationId() {
		return _ncbjPremisesLocationId;
	}

	@Override
	public void setNcbjPremisesLocationId(long ncbjPremisesLocationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjPremisesLocationId = ncbjPremisesLocationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTransferReasonDraft() {
		if (_transferReasonDraft == null) {
			return "";
		}
		else {
			return _transferReasonDraft;
		}
	}

	@Override
	public void setTransferReasonDraft(String transferReasonDraft) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferReasonDraft = transferReasonDraft;
	}

	@JSON
	@Override
	public String getActivityExclusion() {
		if (_activityExclusion == null) {
			return "";
		}
		else {
			return _activityExclusion;
		}
	}

	@Override
	public void setActivityExclusion(String activityExclusion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activityExclusion = activityExclusion;
	}

	@JSON
	@Override
	public String getTransferReasonAct() {
		if (_transferReasonAct == null) {
			return "";
		}
		else {
			return _transferReasonAct;
		}
	}

	@Override
	public void setTransferReasonAct(String transferReasonAct) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferReasonAct = transferReasonAct;
	}

	@JSON
	@Override
	public String getProductionFacilitySize() {
		if (_productionFacilitySize == null) {
			return "";
		}
		else {
			return _productionFacilitySize;
		}
	}

	@Override
	public void setProductionFacilitySize(String productionFacilitySize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionFacilitySize = productionFacilitySize;
	}

	@JSON
	@Override
	public String getWarehouseFacilitySize() {
		if (_warehouseFacilitySize == null) {
			return "";
		}
		else {
			return _warehouseFacilitySize;
		}
	}

	@Override
	public void setWarehouseFacilitySize(String warehouseFacilitySize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_warehouseFacilitySize = warehouseFacilitySize;
	}

	@JSON
	@Override
	public String getFacilitiesLocation() {
		if (_facilitiesLocation == null) {
			return "";
		}
		else {
			return _facilitiesLocation;
		}
	}

	@Override
	public void setFacilitiesLocation(String facilitiesLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_facilitiesLocation = facilitiesLocation;
	}

	@JSON
	@Override
	public String getDetailForDiffManagement() {
		if (_detailForDiffManagement == null) {
			return "";
		}
		else {
			return _detailForDiffManagement;
		}
	}

	@Override
	public void setDetailForDiffManagement(String detailForDiffManagement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_detailForDiffManagement = detailForDiffManagement;
	}

	@JSON
	@Override
	public long getNcbjApplicationId() {
		return _ncbjApplicationId;
	}

	@Override
	public void setNcbjApplicationId(long ncbjApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjApplicationId = ncbjApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNcbjApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NcbjPremisesLocation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NcbjPremisesLocation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NcbjPremisesLocation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NcbjPremisesLocationImpl ncbjPremisesLocationImpl =
			new NcbjPremisesLocationImpl();

		ncbjPremisesLocationImpl.setNcbjPremisesLocationId(
			getNcbjPremisesLocationId());
		ncbjPremisesLocationImpl.setGroupId(getGroupId());
		ncbjPremisesLocationImpl.setCompanyId(getCompanyId());
		ncbjPremisesLocationImpl.setUserId(getUserId());
		ncbjPremisesLocationImpl.setUserName(getUserName());
		ncbjPremisesLocationImpl.setCreateDate(getCreateDate());
		ncbjPremisesLocationImpl.setModifiedDate(getModifiedDate());
		ncbjPremisesLocationImpl.setTransferReasonDraft(
			getTransferReasonDraft());
		ncbjPremisesLocationImpl.setActivityExclusion(getActivityExclusion());
		ncbjPremisesLocationImpl.setTransferReasonAct(getTransferReasonAct());
		ncbjPremisesLocationImpl.setProductionFacilitySize(
			getProductionFacilitySize());
		ncbjPremisesLocationImpl.setWarehouseFacilitySize(
			getWarehouseFacilitySize());
		ncbjPremisesLocationImpl.setFacilitiesLocation(getFacilitiesLocation());
		ncbjPremisesLocationImpl.setDetailForDiffManagement(
			getDetailForDiffManagement());
		ncbjPremisesLocationImpl.setNcbjApplicationId(getNcbjApplicationId());

		ncbjPremisesLocationImpl.resetOriginalValues();

		return ncbjPremisesLocationImpl;
	}

	@Override
	public NcbjPremisesLocation cloneWithOriginalValues() {
		NcbjPremisesLocationImpl ncbjPremisesLocationImpl =
			new NcbjPremisesLocationImpl();

		ncbjPremisesLocationImpl.setNcbjPremisesLocationId(
			this.<Long>getColumnOriginalValue("ncbjPremisesLocationId"));
		ncbjPremisesLocationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ncbjPremisesLocationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ncbjPremisesLocationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ncbjPremisesLocationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ncbjPremisesLocationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ncbjPremisesLocationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ncbjPremisesLocationImpl.setTransferReasonDraft(
			this.<String>getColumnOriginalValue("transferReasonDraft"));
		ncbjPremisesLocationImpl.setActivityExclusion(
			this.<String>getColumnOriginalValue("activityExclusion"));
		ncbjPremisesLocationImpl.setTransferReasonAct(
			this.<String>getColumnOriginalValue("transferReasonAct"));
		ncbjPremisesLocationImpl.setProductionFacilitySize(
			this.<String>getColumnOriginalValue("productionFacilitySize"));
		ncbjPremisesLocationImpl.setWarehouseFacilitySize(
			this.<String>getColumnOriginalValue("warehouseFacilitySize"));
		ncbjPremisesLocationImpl.setFacilitiesLocation(
			this.<String>getColumnOriginalValue("facilitiesLocation"));
		ncbjPremisesLocationImpl.setDetailForDiffManagement(
			this.<String>getColumnOriginalValue("detailForDiffManagement"));
		ncbjPremisesLocationImpl.setNcbjApplicationId(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));

		return ncbjPremisesLocationImpl;
	}

	@Override
	public int compareTo(NcbjPremisesLocation ncbjPremisesLocation) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ncbjPremisesLocation.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NcbjPremisesLocation)) {
			return false;
		}

		NcbjPremisesLocation ncbjPremisesLocation =
			(NcbjPremisesLocation)object;

		long primaryKey = ncbjPremisesLocation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NcbjPremisesLocation> toCacheModel() {
		NcbjPremisesLocationCacheModel ncbjPremisesLocationCacheModel =
			new NcbjPremisesLocationCacheModel();

		ncbjPremisesLocationCacheModel.ncbjPremisesLocationId =
			getNcbjPremisesLocationId();

		ncbjPremisesLocationCacheModel.groupId = getGroupId();

		ncbjPremisesLocationCacheModel.companyId = getCompanyId();

		ncbjPremisesLocationCacheModel.userId = getUserId();

		ncbjPremisesLocationCacheModel.userName = getUserName();

		String userName = ncbjPremisesLocationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ncbjPremisesLocationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ncbjPremisesLocationCacheModel.createDate = createDate.getTime();
		}
		else {
			ncbjPremisesLocationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ncbjPremisesLocationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			ncbjPremisesLocationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ncbjPremisesLocationCacheModel.transferReasonDraft =
			getTransferReasonDraft();

		String transferReasonDraft =
			ncbjPremisesLocationCacheModel.transferReasonDraft;

		if ((transferReasonDraft != null) &&
			(transferReasonDraft.length() == 0)) {

			ncbjPremisesLocationCacheModel.transferReasonDraft = null;
		}

		ncbjPremisesLocationCacheModel.activityExclusion =
			getActivityExclusion();

		String activityExclusion =
			ncbjPremisesLocationCacheModel.activityExclusion;

		if ((activityExclusion != null) && (activityExclusion.length() == 0)) {
			ncbjPremisesLocationCacheModel.activityExclusion = null;
		}

		ncbjPremisesLocationCacheModel.transferReasonAct =
			getTransferReasonAct();

		String transferReasonAct =
			ncbjPremisesLocationCacheModel.transferReasonAct;

		if ((transferReasonAct != null) && (transferReasonAct.length() == 0)) {
			ncbjPremisesLocationCacheModel.transferReasonAct = null;
		}

		ncbjPremisesLocationCacheModel.productionFacilitySize =
			getProductionFacilitySize();

		String productionFacilitySize =
			ncbjPremisesLocationCacheModel.productionFacilitySize;

		if ((productionFacilitySize != null) &&
			(productionFacilitySize.length() == 0)) {

			ncbjPremisesLocationCacheModel.productionFacilitySize = null;
		}

		ncbjPremisesLocationCacheModel.warehouseFacilitySize =
			getWarehouseFacilitySize();

		String warehouseFacilitySize =
			ncbjPremisesLocationCacheModel.warehouseFacilitySize;

		if ((warehouseFacilitySize != null) &&
			(warehouseFacilitySize.length() == 0)) {

			ncbjPremisesLocationCacheModel.warehouseFacilitySize = null;
		}

		ncbjPremisesLocationCacheModel.facilitiesLocation =
			getFacilitiesLocation();

		String facilitiesLocation =
			ncbjPremisesLocationCacheModel.facilitiesLocation;

		if ((facilitiesLocation != null) &&
			(facilitiesLocation.length() == 0)) {

			ncbjPremisesLocationCacheModel.facilitiesLocation = null;
		}

		ncbjPremisesLocationCacheModel.detailForDiffManagement =
			getDetailForDiffManagement();

		String detailForDiffManagement =
			ncbjPremisesLocationCacheModel.detailForDiffManagement;

		if ((detailForDiffManagement != null) &&
			(detailForDiffManagement.length() == 0)) {

			ncbjPremisesLocationCacheModel.detailForDiffManagement = null;
		}

		ncbjPremisesLocationCacheModel.ncbjApplicationId =
			getNcbjApplicationId();

		return ncbjPremisesLocationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NcbjPremisesLocation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NcbjPremisesLocation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjPremisesLocation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(NcbjPremisesLocation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NcbjPremisesLocation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					NcbjPremisesLocation.class, ModelWrapper.class);

	}

	private long _ncbjPremisesLocationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _transferReasonDraft;
	private String _activityExclusion;
	private String _transferReasonAct;
	private String _productionFacilitySize;
	private String _warehouseFacilitySize;
	private String _facilitiesLocation;
	private String _detailForDiffManagement;
	private long _ncbjApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<NcbjPremisesLocation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NcbjPremisesLocation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"ncbjPremisesLocationId", _ncbjPremisesLocationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("transferReasonDraft", _transferReasonDraft);
		_columnOriginalValues.put("activityExclusion", _activityExclusion);
		_columnOriginalValues.put("transferReasonAct", _transferReasonAct);
		_columnOriginalValues.put(
			"productionFacilitySize", _productionFacilitySize);
		_columnOriginalValues.put(
			"warehouseFacilitySize", _warehouseFacilitySize);
		_columnOriginalValues.put("facilitiesLocation", _facilitiesLocation);
		_columnOriginalValues.put(
			"detailForDiffManagement", _detailForDiffManagement);
		_columnOriginalValues.put("ncbjApplicationId", _ncbjApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ncbjPremisesLocationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("transferReasonDraft", 128L);

		columnBitmasks.put("activityExclusion", 256L);

		columnBitmasks.put("transferReasonAct", 512L);

		columnBitmasks.put("productionFacilitySize", 1024L);

		columnBitmasks.put("warehouseFacilitySize", 2048L);

		columnBitmasks.put("facilitiesLocation", 4096L);

		columnBitmasks.put("detailForDiffManagement", 8192L);

		columnBitmasks.put("ncbjApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NcbjPremisesLocation _escapedModel;

}