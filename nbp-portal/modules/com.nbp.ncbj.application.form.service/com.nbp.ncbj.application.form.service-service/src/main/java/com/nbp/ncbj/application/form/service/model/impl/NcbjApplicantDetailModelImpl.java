/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ncbj.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ncbj.application.form.service.model.NcbjApplicantDetail;
import com.nbp.ncbj.application.form.service.model.NcbjApplicantDetailModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NcbjApplicantDetail service. Represents a row in the &quot;nbp_ncbj_applicant_detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NcbjApplicantDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NcbjApplicantDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NcbjApplicantDetailImpl
 * @generated
 */
@JSON(strict = true)
public class NcbjApplicantDetailModelImpl
	extends BaseModelImpl<NcbjApplicantDetail>
	implements NcbjApplicantDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ncbj applicant detail model instance should use the <code>NcbjApplicantDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ncbj_applicant_detail";

	public static final Object[][] TABLE_COLUMNS = {
		{"ncbjApplicantDetailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"stageOne", Types.TIMESTAMP},
		{"stageTwo", Types.TIMESTAMP}, {"surveillanceAudit", Types.TIMESTAMP},
		{"recertificationAudit", Types.TIMESTAMP},
		{"preAassessmentAudit", Types.TIMESTAMP},
		{"anyOtherService ", Types.TIMESTAMP},
		{"ncbjApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ncbjApplicantDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stageOne", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stageTwo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("surveillanceAudit", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("recertificationAudit", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("preAassessmentAudit", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("anyOtherService ", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ncbjApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ncbj_applicant_detail (ncbjApplicantDetailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,stageOne DATE null,stageTwo DATE null,surveillanceAudit DATE null,recertificationAudit DATE null,preAassessmentAudit DATE null,anyOtherService  DATE null,ncbjApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ncbj_applicant_detail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ncbjApplicantDetail.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ncbj_applicant_detail.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NCBJAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NcbjApplicantDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ncbjApplicantDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNcbjApplicantDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ncbjApplicantDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NcbjApplicantDetail.class;
	}

	@Override
	public String getModelClassName() {
		return NcbjApplicantDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NcbjApplicantDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NcbjApplicantDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjApplicantDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NcbjApplicantDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NcbjApplicantDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NcbjApplicantDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NcbjApplicantDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NcbjApplicantDetail, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NcbjApplicantDetail, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<NcbjApplicantDetail, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<NcbjApplicantDetail, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<NcbjApplicantDetail, Object>>();

			attributeGetterFunctions.put(
				"ncbjApplicantDetailId",
				NcbjApplicantDetail::getNcbjApplicantDetailId);
			attributeGetterFunctions.put(
				"groupId", NcbjApplicantDetail::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NcbjApplicantDetail::getCompanyId);
			attributeGetterFunctions.put(
				"userId", NcbjApplicantDetail::getUserId);
			attributeGetterFunctions.put(
				"userName", NcbjApplicantDetail::getUserName);
			attributeGetterFunctions.put(
				"createDate", NcbjApplicantDetail::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NcbjApplicantDetail::getModifiedDate);
			attributeGetterFunctions.put(
				"stageOne", NcbjApplicantDetail::getStageOne);
			attributeGetterFunctions.put(
				"stageTwo", NcbjApplicantDetail::getStageTwo);
			attributeGetterFunctions.put(
				"surveillanceAudit", NcbjApplicantDetail::getSurveillanceAudit);
			attributeGetterFunctions.put(
				"recertificationAudit",
				NcbjApplicantDetail::getRecertificationAudit);
			attributeGetterFunctions.put(
				"preAassessmentAudit",
				NcbjApplicantDetail::getPreAassessmentAudit);
			attributeGetterFunctions.put(
				"anyOtherService ", NcbjApplicantDetail::getAnyOtherService);
			attributeGetterFunctions.put(
				"ncbjApplicationId", NcbjApplicantDetail::getNcbjApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<NcbjApplicantDetail, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NcbjApplicantDetail, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<NcbjApplicantDetail, ?>>();

			attributeSetterBiConsumers.put(
				"ncbjApplicantDetailId",
				(BiConsumer<NcbjApplicantDetail, Long>)
					NcbjApplicantDetail::setNcbjApplicantDetailId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NcbjApplicantDetail, Long>)
					NcbjApplicantDetail::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NcbjApplicantDetail, Long>)
					NcbjApplicantDetail::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NcbjApplicantDetail, Long>)
					NcbjApplicantDetail::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NcbjApplicantDetail, String>)
					NcbjApplicantDetail::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NcbjApplicantDetail, Date>)
					NcbjApplicantDetail::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NcbjApplicantDetail, Date>)
					NcbjApplicantDetail::setModifiedDate);
			attributeSetterBiConsumers.put(
				"stageOne",
				(BiConsumer<NcbjApplicantDetail, Date>)
					NcbjApplicantDetail::setStageOne);
			attributeSetterBiConsumers.put(
				"stageTwo",
				(BiConsumer<NcbjApplicantDetail, Date>)
					NcbjApplicantDetail::setStageTwo);
			attributeSetterBiConsumers.put(
				"surveillanceAudit",
				(BiConsumer<NcbjApplicantDetail, Date>)
					NcbjApplicantDetail::setSurveillanceAudit);
			attributeSetterBiConsumers.put(
				"recertificationAudit",
				(BiConsumer<NcbjApplicantDetail, Date>)
					NcbjApplicantDetail::setRecertificationAudit);
			attributeSetterBiConsumers.put(
				"preAassessmentAudit",
				(BiConsumer<NcbjApplicantDetail, Date>)
					NcbjApplicantDetail::setPreAassessmentAudit);
			attributeSetterBiConsumers.put(
				"anyOtherService ",
				(BiConsumer<NcbjApplicantDetail, Date>)
					NcbjApplicantDetail::setAnyOtherService);
			attributeSetterBiConsumers.put(
				"ncbjApplicationId",
				(BiConsumer<NcbjApplicantDetail, Long>)
					NcbjApplicantDetail::setNcbjApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getNcbjApplicantDetailId() {
		return _ncbjApplicantDetailId;
	}

	@Override
	public void setNcbjApplicantDetailId(long ncbjApplicantDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjApplicantDetailId = ncbjApplicantDetailId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getStageOne() {
		return _stageOne;
	}

	@Override
	public void setStageOne(Date stageOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageOne = stageOne;
	}

	@JSON
	@Override
	public Date getStageTwo() {
		return _stageTwo;
	}

	@Override
	public void setStageTwo(Date stageTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stageTwo = stageTwo;
	}

	@JSON
	@Override
	public Date getSurveillanceAudit() {
		return _surveillanceAudit;
	}

	@Override
	public void setSurveillanceAudit(Date surveillanceAudit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surveillanceAudit = surveillanceAudit;
	}

	@JSON
	@Override
	public Date getRecertificationAudit() {
		return _recertificationAudit;
	}

	@Override
	public void setRecertificationAudit(Date recertificationAudit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recertificationAudit = recertificationAudit;
	}

	@JSON
	@Override
	public Date getPreAassessmentAudit() {
		return _preAassessmentAudit;
	}

	@Override
	public void setPreAassessmentAudit(Date preAassessmentAudit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preAassessmentAudit = preAassessmentAudit;
	}

	@JSON
	@Override
	public Date getAnyOtherService() {
		return _anyOtherService;
	}

	@Override
	public void setAnyOtherService(Date anyOtherService) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_anyOtherService = anyOtherService;
	}

	@JSON
	@Override
	public long getNcbjApplicationId() {
		return _ncbjApplicationId;
	}

	@Override
	public void setNcbjApplicationId(long ncbjApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjApplicationId = ncbjApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNcbjApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NcbjApplicantDetail.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NcbjApplicantDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NcbjApplicantDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NcbjApplicantDetailImpl ncbjApplicantDetailImpl =
			new NcbjApplicantDetailImpl();

		ncbjApplicantDetailImpl.setNcbjApplicantDetailId(
			getNcbjApplicantDetailId());
		ncbjApplicantDetailImpl.setGroupId(getGroupId());
		ncbjApplicantDetailImpl.setCompanyId(getCompanyId());
		ncbjApplicantDetailImpl.setUserId(getUserId());
		ncbjApplicantDetailImpl.setUserName(getUserName());
		ncbjApplicantDetailImpl.setCreateDate(getCreateDate());
		ncbjApplicantDetailImpl.setModifiedDate(getModifiedDate());
		ncbjApplicantDetailImpl.setStageOne(getStageOne());
		ncbjApplicantDetailImpl.setStageTwo(getStageTwo());
		ncbjApplicantDetailImpl.setSurveillanceAudit(getSurveillanceAudit());
		ncbjApplicantDetailImpl.setRecertificationAudit(
			getRecertificationAudit());
		ncbjApplicantDetailImpl.setPreAassessmentAudit(
			getPreAassessmentAudit());
		ncbjApplicantDetailImpl.setAnyOtherService(getAnyOtherService());
		ncbjApplicantDetailImpl.setNcbjApplicationId(getNcbjApplicationId());

		ncbjApplicantDetailImpl.resetOriginalValues();

		return ncbjApplicantDetailImpl;
	}

	@Override
	public NcbjApplicantDetail cloneWithOriginalValues() {
		NcbjApplicantDetailImpl ncbjApplicantDetailImpl =
			new NcbjApplicantDetailImpl();

		ncbjApplicantDetailImpl.setNcbjApplicantDetailId(
			this.<Long>getColumnOriginalValue("ncbjApplicantDetailId"));
		ncbjApplicantDetailImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ncbjApplicantDetailImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ncbjApplicantDetailImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ncbjApplicantDetailImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ncbjApplicantDetailImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ncbjApplicantDetailImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ncbjApplicantDetailImpl.setStageOne(
			this.<Date>getColumnOriginalValue("stageOne"));
		ncbjApplicantDetailImpl.setStageTwo(
			this.<Date>getColumnOriginalValue("stageTwo"));
		ncbjApplicantDetailImpl.setSurveillanceAudit(
			this.<Date>getColumnOriginalValue("surveillanceAudit"));
		ncbjApplicantDetailImpl.setRecertificationAudit(
			this.<Date>getColumnOriginalValue("recertificationAudit"));
		ncbjApplicantDetailImpl.setPreAassessmentAudit(
			this.<Date>getColumnOriginalValue("preAassessmentAudit"));
		ncbjApplicantDetailImpl.setAnyOtherService(
			this.<Date>getColumnOriginalValue("anyOtherService "));
		ncbjApplicantDetailImpl.setNcbjApplicationId(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));

		return ncbjApplicantDetailImpl;
	}

	@Override
	public int compareTo(NcbjApplicantDetail ncbjApplicantDetail) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ncbjApplicantDetail.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NcbjApplicantDetail)) {
			return false;
		}

		NcbjApplicantDetail ncbjApplicantDetail = (NcbjApplicantDetail)object;

		long primaryKey = ncbjApplicantDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NcbjApplicantDetail> toCacheModel() {
		NcbjApplicantDetailCacheModel ncbjApplicantDetailCacheModel =
			new NcbjApplicantDetailCacheModel();

		ncbjApplicantDetailCacheModel.ncbjApplicantDetailId =
			getNcbjApplicantDetailId();

		ncbjApplicantDetailCacheModel.groupId = getGroupId();

		ncbjApplicantDetailCacheModel.companyId = getCompanyId();

		ncbjApplicantDetailCacheModel.userId = getUserId();

		ncbjApplicantDetailCacheModel.userName = getUserName();

		String userName = ncbjApplicantDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ncbjApplicantDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ncbjApplicantDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			ncbjApplicantDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ncbjApplicantDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ncbjApplicantDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date stageOne = getStageOne();

		if (stageOne != null) {
			ncbjApplicantDetailCacheModel.stageOne = stageOne.getTime();
		}
		else {
			ncbjApplicantDetailCacheModel.stageOne = Long.MIN_VALUE;
		}

		Date stageTwo = getStageTwo();

		if (stageTwo != null) {
			ncbjApplicantDetailCacheModel.stageTwo = stageTwo.getTime();
		}
		else {
			ncbjApplicantDetailCacheModel.stageTwo = Long.MIN_VALUE;
		}

		Date surveillanceAudit = getSurveillanceAudit();

		if (surveillanceAudit != null) {
			ncbjApplicantDetailCacheModel.surveillanceAudit =
				surveillanceAudit.getTime();
		}
		else {
			ncbjApplicantDetailCacheModel.surveillanceAudit = Long.MIN_VALUE;
		}

		Date recertificationAudit = getRecertificationAudit();

		if (recertificationAudit != null) {
			ncbjApplicantDetailCacheModel.recertificationAudit =
				recertificationAudit.getTime();
		}
		else {
			ncbjApplicantDetailCacheModel.recertificationAudit = Long.MIN_VALUE;
		}

		Date preAassessmentAudit = getPreAassessmentAudit();

		if (preAassessmentAudit != null) {
			ncbjApplicantDetailCacheModel.preAassessmentAudit =
				preAassessmentAudit.getTime();
		}
		else {
			ncbjApplicantDetailCacheModel.preAassessmentAudit = Long.MIN_VALUE;
		}

		Date anyOtherService = getAnyOtherService();

		if (anyOtherService != null) {
			ncbjApplicantDetailCacheModel.anyOtherService =
				anyOtherService.getTime();
		}
		else {
			ncbjApplicantDetailCacheModel.anyOtherService = Long.MIN_VALUE;
		}

		ncbjApplicantDetailCacheModel.ncbjApplicationId =
			getNcbjApplicationId();

		return ncbjApplicantDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NcbjApplicantDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NcbjApplicantDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjApplicantDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(NcbjApplicantDetail)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NcbjApplicantDetail>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					NcbjApplicantDetail.class, ModelWrapper.class);

	}

	private long _ncbjApplicantDetailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _stageOne;
	private Date _stageTwo;
	private Date _surveillanceAudit;
	private Date _recertificationAudit;
	private Date _preAassessmentAudit;
	private Date _anyOtherService;
	private long _ncbjApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<NcbjApplicantDetail, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NcbjApplicantDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"ncbjApplicantDetailId", _ncbjApplicantDetailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("stageOne", _stageOne);
		_columnOriginalValues.put("stageTwo", _stageTwo);
		_columnOriginalValues.put("surveillanceAudit", _surveillanceAudit);
		_columnOriginalValues.put(
			"recertificationAudit", _recertificationAudit);
		_columnOriginalValues.put("preAassessmentAudit", _preAassessmentAudit);
		_columnOriginalValues.put("anyOtherService ", _anyOtherService);
		_columnOriginalValues.put("ncbjApplicationId", _ncbjApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ncbjApplicantDetailId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("stageOne", 128L);

		columnBitmasks.put("stageTwo", 256L);

		columnBitmasks.put("surveillanceAudit", 512L);

		columnBitmasks.put("recertificationAudit", 1024L);

		columnBitmasks.put("preAassessmentAudit", 2048L);

		columnBitmasks.put("anyOtherService ", 4096L);

		columnBitmasks.put("ncbjApplicationId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NcbjApplicantDetail _escapedModel;

}