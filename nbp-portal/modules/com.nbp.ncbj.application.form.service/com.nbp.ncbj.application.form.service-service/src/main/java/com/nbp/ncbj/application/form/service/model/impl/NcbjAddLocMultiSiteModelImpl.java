/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.ncbj.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.ncbj.application.form.service.model.NcbjAddLocMultiSite;
import com.nbp.ncbj.application.form.service.model.NcbjAddLocMultiSiteModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NcbjAddLocMultiSite service. Represents a row in the &quot;nbp_ncbj_additional_loc&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NcbjAddLocMultiSiteModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NcbjAddLocMultiSiteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NcbjAddLocMultiSiteImpl
 * @generated
 */
@JSON(strict = true)
public class NcbjAddLocMultiSiteModelImpl
	extends BaseModelImpl<NcbjAddLocMultiSite>
	implements NcbjAddLocMultiSiteModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ncbj add loc multi site model instance should use the <code>NcbjAddLocMultiSite</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_ncbj_additional_loc";

	public static final Object[][] TABLE_COLUMNS = {
		{"ncbjAddLocMultiSiteId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"signatureName", Types.VARCHAR},
		{"centralOfficeLink", Types.VARCHAR},
		{"commonManagementSystem", Types.VARCHAR},
		{"substantiallySameProcess", Types.VARCHAR},
		{"siteSimilarMethod", Types.VARCHAR}, {"siteUnderAudit", Types.VARCHAR},
		{"siteCorrectiveRight", Types.VARCHAR},
		{"changesAuthority", Types.VARCHAR}, {"position", Types.VARCHAR},
		{"date_", Types.TIMESTAMP}, {"ncbjApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ncbjAddLocMultiSiteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("signatureName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("centralOfficeLink", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commonManagementSystem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("substantiallySameProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteSimilarMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteUnderAudit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteCorrectiveRight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("changesAuthority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ncbjApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_ncbj_additional_loc (ncbjAddLocMultiSiteId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,signatureName VARCHAR(75) null,centralOfficeLink VARCHAR(75) null,commonManagementSystem VARCHAR(75) null,substantiallySameProcess VARCHAR(75) null,siteSimilarMethod VARCHAR(75) null,siteUnderAudit VARCHAR(75) null,siteCorrectiveRight VARCHAR(75) null,changesAuthority VARCHAR(75) null,position VARCHAR(75) null,date_ DATE null,ncbjApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_ncbj_additional_loc";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ncbjAddLocMultiSite.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_ncbj_additional_loc.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NCBJAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NcbjAddLocMultiSiteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ncbjAddLocMultiSiteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNcbjAddLocMultiSiteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ncbjAddLocMultiSiteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NcbjAddLocMultiSite.class;
	}

	@Override
	public String getModelClassName() {
		return NcbjAddLocMultiSite.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NcbjAddLocMultiSite, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NcbjAddLocMultiSite, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjAddLocMultiSite, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NcbjAddLocMultiSite)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NcbjAddLocMultiSite, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NcbjAddLocMultiSite, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NcbjAddLocMultiSite)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NcbjAddLocMultiSite, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NcbjAddLocMultiSite, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<NcbjAddLocMultiSite, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<NcbjAddLocMultiSite, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<NcbjAddLocMultiSite, Object>>();

			attributeGetterFunctions.put(
				"ncbjAddLocMultiSiteId",
				NcbjAddLocMultiSite::getNcbjAddLocMultiSiteId);
			attributeGetterFunctions.put(
				"groupId", NcbjAddLocMultiSite::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NcbjAddLocMultiSite::getCompanyId);
			attributeGetterFunctions.put(
				"userId", NcbjAddLocMultiSite::getUserId);
			attributeGetterFunctions.put(
				"userName", NcbjAddLocMultiSite::getUserName);
			attributeGetterFunctions.put(
				"createDate", NcbjAddLocMultiSite::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NcbjAddLocMultiSite::getModifiedDate);
			attributeGetterFunctions.put(
				"signatureName", NcbjAddLocMultiSite::getSignatureName);
			attributeGetterFunctions.put(
				"centralOfficeLink", NcbjAddLocMultiSite::getCentralOfficeLink);
			attributeGetterFunctions.put(
				"commonManagementSystem",
				NcbjAddLocMultiSite::getCommonManagementSystem);
			attributeGetterFunctions.put(
				"substantiallySameProcess",
				NcbjAddLocMultiSite::getSubstantiallySameProcess);
			attributeGetterFunctions.put(
				"siteSimilarMethod", NcbjAddLocMultiSite::getSiteSimilarMethod);
			attributeGetterFunctions.put(
				"siteUnderAudit", NcbjAddLocMultiSite::getSiteUnderAudit);
			attributeGetterFunctions.put(
				"siteCorrectiveRight",
				NcbjAddLocMultiSite::getSiteCorrectiveRight);
			attributeGetterFunctions.put(
				"changesAuthority", NcbjAddLocMultiSite::getChangesAuthority);
			attributeGetterFunctions.put(
				"position", NcbjAddLocMultiSite::getPosition);
			attributeGetterFunctions.put("date", NcbjAddLocMultiSite::getDate);
			attributeGetterFunctions.put(
				"ncbjApplicationId", NcbjAddLocMultiSite::getNcbjApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<NcbjAddLocMultiSite, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NcbjAddLocMultiSite, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<NcbjAddLocMultiSite, ?>>();

			attributeSetterBiConsumers.put(
				"ncbjAddLocMultiSiteId",
				(BiConsumer<NcbjAddLocMultiSite, Long>)
					NcbjAddLocMultiSite::setNcbjAddLocMultiSiteId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NcbjAddLocMultiSite, Long>)
					NcbjAddLocMultiSite::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NcbjAddLocMultiSite, Long>)
					NcbjAddLocMultiSite::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NcbjAddLocMultiSite, Long>)
					NcbjAddLocMultiSite::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NcbjAddLocMultiSite, Date>)
					NcbjAddLocMultiSite::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NcbjAddLocMultiSite, Date>)
					NcbjAddLocMultiSite::setModifiedDate);
			attributeSetterBiConsumers.put(
				"signatureName",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setSignatureName);
			attributeSetterBiConsumers.put(
				"centralOfficeLink",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setCentralOfficeLink);
			attributeSetterBiConsumers.put(
				"commonManagementSystem",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setCommonManagementSystem);
			attributeSetterBiConsumers.put(
				"substantiallySameProcess",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setSubstantiallySameProcess);
			attributeSetterBiConsumers.put(
				"siteSimilarMethod",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setSiteSimilarMethod);
			attributeSetterBiConsumers.put(
				"siteUnderAudit",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setSiteUnderAudit);
			attributeSetterBiConsumers.put(
				"siteCorrectiveRight",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setSiteCorrectiveRight);
			attributeSetterBiConsumers.put(
				"changesAuthority",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setChangesAuthority);
			attributeSetterBiConsumers.put(
				"position",
				(BiConsumer<NcbjAddLocMultiSite, String>)
					NcbjAddLocMultiSite::setPosition);
			attributeSetterBiConsumers.put(
				"date",
				(BiConsumer<NcbjAddLocMultiSite, Date>)
					NcbjAddLocMultiSite::setDate);
			attributeSetterBiConsumers.put(
				"ncbjApplicationId",
				(BiConsumer<NcbjAddLocMultiSite, Long>)
					NcbjAddLocMultiSite::setNcbjApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getNcbjAddLocMultiSiteId() {
		return _ncbjAddLocMultiSiteId;
	}

	@Override
	public void setNcbjAddLocMultiSiteId(long ncbjAddLocMultiSiteId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjAddLocMultiSiteId = ncbjAddLocMultiSiteId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSignatureName() {
		if (_signatureName == null) {
			return "";
		}
		else {
			return _signatureName;
		}
	}

	@Override
	public void setSignatureName(String signatureName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatureName = signatureName;
	}

	@JSON
	@Override
	public String getCentralOfficeLink() {
		if (_centralOfficeLink == null) {
			return "";
		}
		else {
			return _centralOfficeLink;
		}
	}

	@Override
	public void setCentralOfficeLink(String centralOfficeLink) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_centralOfficeLink = centralOfficeLink;
	}

	@JSON
	@Override
	public String getCommonManagementSystem() {
		if (_commonManagementSystem == null) {
			return "";
		}
		else {
			return _commonManagementSystem;
		}
	}

	@Override
	public void setCommonManagementSystem(String commonManagementSystem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commonManagementSystem = commonManagementSystem;
	}

	@JSON
	@Override
	public String getSubstantiallySameProcess() {
		if (_substantiallySameProcess == null) {
			return "";
		}
		else {
			return _substantiallySameProcess;
		}
	}

	@Override
	public void setSubstantiallySameProcess(String substantiallySameProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_substantiallySameProcess = substantiallySameProcess;
	}

	@JSON
	@Override
	public String getSiteSimilarMethod() {
		if (_siteSimilarMethod == null) {
			return "";
		}
		else {
			return _siteSimilarMethod;
		}
	}

	@Override
	public void setSiteSimilarMethod(String siteSimilarMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_siteSimilarMethod = siteSimilarMethod;
	}

	@JSON
	@Override
	public String getSiteUnderAudit() {
		if (_siteUnderAudit == null) {
			return "";
		}
		else {
			return _siteUnderAudit;
		}
	}

	@Override
	public void setSiteUnderAudit(String siteUnderAudit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_siteUnderAudit = siteUnderAudit;
	}

	@JSON
	@Override
	public String getSiteCorrectiveRight() {
		if (_siteCorrectiveRight == null) {
			return "";
		}
		else {
			return _siteCorrectiveRight;
		}
	}

	@Override
	public void setSiteCorrectiveRight(String siteCorrectiveRight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_siteCorrectiveRight = siteCorrectiveRight;
	}

	@JSON
	@Override
	public String getChangesAuthority() {
		if (_changesAuthority == null) {
			return "";
		}
		else {
			return _changesAuthority;
		}
	}

	@Override
	public void setChangesAuthority(String changesAuthority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_changesAuthority = changesAuthority;
	}

	@JSON
	@Override
	public String getPosition() {
		if (_position == null) {
			return "";
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_position = position;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	@JSON
	@Override
	public long getNcbjApplicationId() {
		return _ncbjApplicationId;
	}

	@Override
	public void setNcbjApplicationId(long ncbjApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncbjApplicationId = ncbjApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNcbjApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NcbjAddLocMultiSite.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NcbjAddLocMultiSite toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NcbjAddLocMultiSite>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NcbjAddLocMultiSiteImpl ncbjAddLocMultiSiteImpl =
			new NcbjAddLocMultiSiteImpl();

		ncbjAddLocMultiSiteImpl.setNcbjAddLocMultiSiteId(
			getNcbjAddLocMultiSiteId());
		ncbjAddLocMultiSiteImpl.setGroupId(getGroupId());
		ncbjAddLocMultiSiteImpl.setCompanyId(getCompanyId());
		ncbjAddLocMultiSiteImpl.setUserId(getUserId());
		ncbjAddLocMultiSiteImpl.setUserName(getUserName());
		ncbjAddLocMultiSiteImpl.setCreateDate(getCreateDate());
		ncbjAddLocMultiSiteImpl.setModifiedDate(getModifiedDate());
		ncbjAddLocMultiSiteImpl.setSignatureName(getSignatureName());
		ncbjAddLocMultiSiteImpl.setCentralOfficeLink(getCentralOfficeLink());
		ncbjAddLocMultiSiteImpl.setCommonManagementSystem(
			getCommonManagementSystem());
		ncbjAddLocMultiSiteImpl.setSubstantiallySameProcess(
			getSubstantiallySameProcess());
		ncbjAddLocMultiSiteImpl.setSiteSimilarMethod(getSiteSimilarMethod());
		ncbjAddLocMultiSiteImpl.setSiteUnderAudit(getSiteUnderAudit());
		ncbjAddLocMultiSiteImpl.setSiteCorrectiveRight(
			getSiteCorrectiveRight());
		ncbjAddLocMultiSiteImpl.setChangesAuthority(getChangesAuthority());
		ncbjAddLocMultiSiteImpl.setPosition(getPosition());
		ncbjAddLocMultiSiteImpl.setDate(getDate());
		ncbjAddLocMultiSiteImpl.setNcbjApplicationId(getNcbjApplicationId());

		ncbjAddLocMultiSiteImpl.resetOriginalValues();

		return ncbjAddLocMultiSiteImpl;
	}

	@Override
	public NcbjAddLocMultiSite cloneWithOriginalValues() {
		NcbjAddLocMultiSiteImpl ncbjAddLocMultiSiteImpl =
			new NcbjAddLocMultiSiteImpl();

		ncbjAddLocMultiSiteImpl.setNcbjAddLocMultiSiteId(
			this.<Long>getColumnOriginalValue("ncbjAddLocMultiSiteId"));
		ncbjAddLocMultiSiteImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ncbjAddLocMultiSiteImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ncbjAddLocMultiSiteImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		ncbjAddLocMultiSiteImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		ncbjAddLocMultiSiteImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ncbjAddLocMultiSiteImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ncbjAddLocMultiSiteImpl.setSignatureName(
			this.<String>getColumnOriginalValue("signatureName"));
		ncbjAddLocMultiSiteImpl.setCentralOfficeLink(
			this.<String>getColumnOriginalValue("centralOfficeLink"));
		ncbjAddLocMultiSiteImpl.setCommonManagementSystem(
			this.<String>getColumnOriginalValue("commonManagementSystem"));
		ncbjAddLocMultiSiteImpl.setSubstantiallySameProcess(
			this.<String>getColumnOriginalValue("substantiallySameProcess"));
		ncbjAddLocMultiSiteImpl.setSiteSimilarMethod(
			this.<String>getColumnOriginalValue("siteSimilarMethod"));
		ncbjAddLocMultiSiteImpl.setSiteUnderAudit(
			this.<String>getColumnOriginalValue("siteUnderAudit"));
		ncbjAddLocMultiSiteImpl.setSiteCorrectiveRight(
			this.<String>getColumnOriginalValue("siteCorrectiveRight"));
		ncbjAddLocMultiSiteImpl.setChangesAuthority(
			this.<String>getColumnOriginalValue("changesAuthority"));
		ncbjAddLocMultiSiteImpl.setPosition(
			this.<String>getColumnOriginalValue("position"));
		ncbjAddLocMultiSiteImpl.setDate(
			this.<Date>getColumnOriginalValue("date_"));
		ncbjAddLocMultiSiteImpl.setNcbjApplicationId(
			this.<Long>getColumnOriginalValue("ncbjApplicationId"));

		return ncbjAddLocMultiSiteImpl;
	}

	@Override
	public int compareTo(NcbjAddLocMultiSite ncbjAddLocMultiSite) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ncbjAddLocMultiSite.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NcbjAddLocMultiSite)) {
			return false;
		}

		NcbjAddLocMultiSite ncbjAddLocMultiSite = (NcbjAddLocMultiSite)object;

		long primaryKey = ncbjAddLocMultiSite.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NcbjAddLocMultiSite> toCacheModel() {
		NcbjAddLocMultiSiteCacheModel ncbjAddLocMultiSiteCacheModel =
			new NcbjAddLocMultiSiteCacheModel();

		ncbjAddLocMultiSiteCacheModel.ncbjAddLocMultiSiteId =
			getNcbjAddLocMultiSiteId();

		ncbjAddLocMultiSiteCacheModel.groupId = getGroupId();

		ncbjAddLocMultiSiteCacheModel.companyId = getCompanyId();

		ncbjAddLocMultiSiteCacheModel.userId = getUserId();

		ncbjAddLocMultiSiteCacheModel.userName = getUserName();

		String userName = ncbjAddLocMultiSiteCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ncbjAddLocMultiSiteCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ncbjAddLocMultiSiteCacheModel.createDate = createDate.getTime();
		}
		else {
			ncbjAddLocMultiSiteCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ncbjAddLocMultiSiteCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ncbjAddLocMultiSiteCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ncbjAddLocMultiSiteCacheModel.signatureName = getSignatureName();

		String signatureName = ncbjAddLocMultiSiteCacheModel.signatureName;

		if ((signatureName != null) && (signatureName.length() == 0)) {
			ncbjAddLocMultiSiteCacheModel.signatureName = null;
		}

		ncbjAddLocMultiSiteCacheModel.centralOfficeLink =
			getCentralOfficeLink();

		String centralOfficeLink =
			ncbjAddLocMultiSiteCacheModel.centralOfficeLink;

		if ((centralOfficeLink != null) && (centralOfficeLink.length() == 0)) {
			ncbjAddLocMultiSiteCacheModel.centralOfficeLink = null;
		}

		ncbjAddLocMultiSiteCacheModel.commonManagementSystem =
			getCommonManagementSystem();

		String commonManagementSystem =
			ncbjAddLocMultiSiteCacheModel.commonManagementSystem;

		if ((commonManagementSystem != null) &&
			(commonManagementSystem.length() == 0)) {

			ncbjAddLocMultiSiteCacheModel.commonManagementSystem = null;
		}

		ncbjAddLocMultiSiteCacheModel.substantiallySameProcess =
			getSubstantiallySameProcess();

		String substantiallySameProcess =
			ncbjAddLocMultiSiteCacheModel.substantiallySameProcess;

		if ((substantiallySameProcess != null) &&
			(substantiallySameProcess.length() == 0)) {

			ncbjAddLocMultiSiteCacheModel.substantiallySameProcess = null;
		}

		ncbjAddLocMultiSiteCacheModel.siteSimilarMethod =
			getSiteSimilarMethod();

		String siteSimilarMethod =
			ncbjAddLocMultiSiteCacheModel.siteSimilarMethod;

		if ((siteSimilarMethod != null) && (siteSimilarMethod.length() == 0)) {
			ncbjAddLocMultiSiteCacheModel.siteSimilarMethod = null;
		}

		ncbjAddLocMultiSiteCacheModel.siteUnderAudit = getSiteUnderAudit();

		String siteUnderAudit = ncbjAddLocMultiSiteCacheModel.siteUnderAudit;

		if ((siteUnderAudit != null) && (siteUnderAudit.length() == 0)) {
			ncbjAddLocMultiSiteCacheModel.siteUnderAudit = null;
		}

		ncbjAddLocMultiSiteCacheModel.siteCorrectiveRight =
			getSiteCorrectiveRight();

		String siteCorrectiveRight =
			ncbjAddLocMultiSiteCacheModel.siteCorrectiveRight;

		if ((siteCorrectiveRight != null) &&
			(siteCorrectiveRight.length() == 0)) {

			ncbjAddLocMultiSiteCacheModel.siteCorrectiveRight = null;
		}

		ncbjAddLocMultiSiteCacheModel.changesAuthority = getChangesAuthority();

		String changesAuthority =
			ncbjAddLocMultiSiteCacheModel.changesAuthority;

		if ((changesAuthority != null) && (changesAuthority.length() == 0)) {
			ncbjAddLocMultiSiteCacheModel.changesAuthority = null;
		}

		ncbjAddLocMultiSiteCacheModel.position = getPosition();

		String position = ncbjAddLocMultiSiteCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			ncbjAddLocMultiSiteCacheModel.position = null;
		}

		Date date = getDate();

		if (date != null) {
			ncbjAddLocMultiSiteCacheModel.date = date.getTime();
		}
		else {
			ncbjAddLocMultiSiteCacheModel.date = Long.MIN_VALUE;
		}

		ncbjAddLocMultiSiteCacheModel.ncbjApplicationId =
			getNcbjApplicationId();

		return ncbjAddLocMultiSiteCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NcbjAddLocMultiSite, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NcbjAddLocMultiSite, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NcbjAddLocMultiSite, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(NcbjAddLocMultiSite)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NcbjAddLocMultiSite>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					NcbjAddLocMultiSite.class, ModelWrapper.class);

	}

	private long _ncbjAddLocMultiSiteId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _signatureName;
	private String _centralOfficeLink;
	private String _commonManagementSystem;
	private String _substantiallySameProcess;
	private String _siteSimilarMethod;
	private String _siteUnderAudit;
	private String _siteCorrectiveRight;
	private String _changesAuthority;
	private String _position;
	private Date _date;
	private long _ncbjApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<NcbjAddLocMultiSite, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NcbjAddLocMultiSite)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"ncbjAddLocMultiSiteId", _ncbjAddLocMultiSiteId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("signatureName", _signatureName);
		_columnOriginalValues.put("centralOfficeLink", _centralOfficeLink);
		_columnOriginalValues.put(
			"commonManagementSystem", _commonManagementSystem);
		_columnOriginalValues.put(
			"substantiallySameProcess", _substantiallySameProcess);
		_columnOriginalValues.put("siteSimilarMethod", _siteSimilarMethod);
		_columnOriginalValues.put("siteUnderAudit", _siteUnderAudit);
		_columnOriginalValues.put("siteCorrectiveRight", _siteCorrectiveRight);
		_columnOriginalValues.put("changesAuthority", _changesAuthority);
		_columnOriginalValues.put("position", _position);
		_columnOriginalValues.put("date_", _date);
		_columnOriginalValues.put("ncbjApplicationId", _ncbjApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("date_", "date");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ncbjAddLocMultiSiteId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("signatureName", 128L);

		columnBitmasks.put("centralOfficeLink", 256L);

		columnBitmasks.put("commonManagementSystem", 512L);

		columnBitmasks.put("substantiallySameProcess", 1024L);

		columnBitmasks.put("siteSimilarMethod", 2048L);

		columnBitmasks.put("siteUnderAudit", 4096L);

		columnBitmasks.put("siteCorrectiveRight", 8192L);

		columnBitmasks.put("changesAuthority", 16384L);

		columnBitmasks.put("position", 32768L);

		columnBitmasks.put("date_", 65536L);

		columnBitmasks.put("ncbjApplicationId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NcbjAddLocMultiSite _escapedModel;

}