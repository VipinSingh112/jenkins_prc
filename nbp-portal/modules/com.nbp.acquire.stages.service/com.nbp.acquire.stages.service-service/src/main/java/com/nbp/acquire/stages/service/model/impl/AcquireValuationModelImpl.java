/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.acquire.stages.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.acquire.stages.service.model.AcquireValuation;
import com.nbp.acquire.stages.service.model.AcquireValuationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcquireValuation service. Represents a row in the &quot;nbp_acquire_valuation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcquireValuationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcquireValuationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcquireValuationImpl
 * @generated
 */
@JSON(strict = true)
public class AcquireValuationModelImpl
	extends BaseModelImpl<AcquireValuation> implements AcquireValuationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acquire valuation model instance should use the <code>AcquireValuation</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_acquire_valuation";

	public static final Object[][] TABLE_COLUMNS = {
		{"acquireValuationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"valuationNumber", Types.VARCHAR}, {"valuationVolume", Types.VARCHAR},
		{"valuationFolio", Types.VARCHAR}, {"valuationStatus", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("acquireValuationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("valuationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("valuationVolume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("valuationFolio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("valuationStatus", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_acquire_valuation (acquireValuationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,valuationNumber VARCHAR(75) null,valuationVolume VARCHAR(75) null,valuationFolio VARCHAR(75) null,valuationStatus VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_acquire_valuation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acquireValuation.acquireValuationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_acquire_valuation.acquireValuationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACQUIREVALUATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcquireValuationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _acquireValuationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAcquireValuationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _acquireValuationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcquireValuation.class;
	}

	@Override
	public String getModelClassName() {
		return AcquireValuation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcquireValuation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcquireValuation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireValuation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AcquireValuation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcquireValuation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcquireValuation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcquireValuation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcquireValuation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcquireValuation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AcquireValuation, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AcquireValuation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AcquireValuation, Object>>();

			attributeGetterFunctions.put(
				"acquireValuationId", AcquireValuation::getAcquireValuationId);
			attributeGetterFunctions.put(
				"groupId", AcquireValuation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AcquireValuation::getCompanyId);
			attributeGetterFunctions.put("userId", AcquireValuation::getUserId);
			attributeGetterFunctions.put(
				"userName", AcquireValuation::getUserName);
			attributeGetterFunctions.put(
				"createDate", AcquireValuation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AcquireValuation::getModifiedDate);
			attributeGetterFunctions.put("caseId", AcquireValuation::getCaseId);
			attributeGetterFunctions.put(
				"valuationNumber", AcquireValuation::getValuationNumber);
			attributeGetterFunctions.put(
				"valuationVolume", AcquireValuation::getValuationVolume);
			attributeGetterFunctions.put(
				"valuationFolio", AcquireValuation::getValuationFolio);
			attributeGetterFunctions.put(
				"valuationStatus", AcquireValuation::getValuationStatus);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AcquireValuation, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcquireValuation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AcquireValuation, ?>>();

			attributeSetterBiConsumers.put(
				"acquireValuationId",
				(BiConsumer<AcquireValuation, Long>)
					AcquireValuation::setAcquireValuationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AcquireValuation, Long>)
					AcquireValuation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AcquireValuation, Long>)
					AcquireValuation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AcquireValuation, Long>)
					AcquireValuation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AcquireValuation, String>)
					AcquireValuation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AcquireValuation, Date>)
					AcquireValuation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AcquireValuation, Date>)
					AcquireValuation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<AcquireValuation, String>)
					AcquireValuation::setCaseId);
			attributeSetterBiConsumers.put(
				"valuationNumber",
				(BiConsumer<AcquireValuation, String>)
					AcquireValuation::setValuationNumber);
			attributeSetterBiConsumers.put(
				"valuationVolume",
				(BiConsumer<AcquireValuation, String>)
					AcquireValuation::setValuationVolume);
			attributeSetterBiConsumers.put(
				"valuationFolio",
				(BiConsumer<AcquireValuation, String>)
					AcquireValuation::setValuationFolio);
			attributeSetterBiConsumers.put(
				"valuationStatus",
				(BiConsumer<AcquireValuation, String>)
					AcquireValuation::setValuationStatus);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAcquireValuationId() {
		return _acquireValuationId;
	}

	@Override
	public void setAcquireValuationId(long acquireValuationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireValuationId = acquireValuationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getValuationNumber() {
		if (_valuationNumber == null) {
			return "";
		}
		else {
			return _valuationNumber;
		}
	}

	@Override
	public void setValuationNumber(String valuationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_valuationNumber = valuationNumber;
	}

	@JSON
	@Override
	public String getValuationVolume() {
		if (_valuationVolume == null) {
			return "";
		}
		else {
			return _valuationVolume;
		}
	}

	@Override
	public void setValuationVolume(String valuationVolume) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_valuationVolume = valuationVolume;
	}

	@JSON
	@Override
	public String getValuationFolio() {
		if (_valuationFolio == null) {
			return "";
		}
		else {
			return _valuationFolio;
		}
	}

	@Override
	public void setValuationFolio(String valuationFolio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_valuationFolio = valuationFolio;
	}

	@JSON
	@Override
	public String getValuationStatus() {
		if (_valuationStatus == null) {
			return "";
		}
		else {
			return _valuationStatus;
		}
	}

	@Override
	public void setValuationStatus(String valuationStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_valuationStatus = valuationStatus;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AcquireValuation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcquireValuation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcquireValuation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcquireValuationImpl acquireValuationImpl = new AcquireValuationImpl();

		acquireValuationImpl.setAcquireValuationId(getAcquireValuationId());
		acquireValuationImpl.setGroupId(getGroupId());
		acquireValuationImpl.setCompanyId(getCompanyId());
		acquireValuationImpl.setUserId(getUserId());
		acquireValuationImpl.setUserName(getUserName());
		acquireValuationImpl.setCreateDate(getCreateDate());
		acquireValuationImpl.setModifiedDate(getModifiedDate());
		acquireValuationImpl.setCaseId(getCaseId());
		acquireValuationImpl.setValuationNumber(getValuationNumber());
		acquireValuationImpl.setValuationVolume(getValuationVolume());
		acquireValuationImpl.setValuationFolio(getValuationFolio());
		acquireValuationImpl.setValuationStatus(getValuationStatus());

		acquireValuationImpl.resetOriginalValues();

		return acquireValuationImpl;
	}

	@Override
	public AcquireValuation cloneWithOriginalValues() {
		AcquireValuationImpl acquireValuationImpl = new AcquireValuationImpl();

		acquireValuationImpl.setAcquireValuationId(
			this.<Long>getColumnOriginalValue("acquireValuationId"));
		acquireValuationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		acquireValuationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		acquireValuationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		acquireValuationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		acquireValuationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		acquireValuationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		acquireValuationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		acquireValuationImpl.setValuationNumber(
			this.<String>getColumnOriginalValue("valuationNumber"));
		acquireValuationImpl.setValuationVolume(
			this.<String>getColumnOriginalValue("valuationVolume"));
		acquireValuationImpl.setValuationFolio(
			this.<String>getColumnOriginalValue("valuationFolio"));
		acquireValuationImpl.setValuationStatus(
			this.<String>getColumnOriginalValue("valuationStatus"));

		return acquireValuationImpl;
	}

	@Override
	public int compareTo(AcquireValuation acquireValuation) {
		long primaryKey = acquireValuation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcquireValuation)) {
			return false;
		}

		AcquireValuation acquireValuation = (AcquireValuation)object;

		long primaryKey = acquireValuation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcquireValuation> toCacheModel() {
		AcquireValuationCacheModel acquireValuationCacheModel =
			new AcquireValuationCacheModel();

		acquireValuationCacheModel.acquireValuationId = getAcquireValuationId();

		acquireValuationCacheModel.groupId = getGroupId();

		acquireValuationCacheModel.companyId = getCompanyId();

		acquireValuationCacheModel.userId = getUserId();

		acquireValuationCacheModel.userName = getUserName();

		String userName = acquireValuationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			acquireValuationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			acquireValuationCacheModel.createDate = createDate.getTime();
		}
		else {
			acquireValuationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			acquireValuationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			acquireValuationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		acquireValuationCacheModel.caseId = getCaseId();

		String caseId = acquireValuationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			acquireValuationCacheModel.caseId = null;
		}

		acquireValuationCacheModel.valuationNumber = getValuationNumber();

		String valuationNumber = acquireValuationCacheModel.valuationNumber;

		if ((valuationNumber != null) && (valuationNumber.length() == 0)) {
			acquireValuationCacheModel.valuationNumber = null;
		}

		acquireValuationCacheModel.valuationVolume = getValuationVolume();

		String valuationVolume = acquireValuationCacheModel.valuationVolume;

		if ((valuationVolume != null) && (valuationVolume.length() == 0)) {
			acquireValuationCacheModel.valuationVolume = null;
		}

		acquireValuationCacheModel.valuationFolio = getValuationFolio();

		String valuationFolio = acquireValuationCacheModel.valuationFolio;

		if ((valuationFolio != null) && (valuationFolio.length() == 0)) {
			acquireValuationCacheModel.valuationFolio = null;
		}

		acquireValuationCacheModel.valuationStatus = getValuationStatus();

		String valuationStatus = acquireValuationCacheModel.valuationStatus;

		if ((valuationStatus != null) && (valuationStatus.length() == 0)) {
			acquireValuationCacheModel.valuationStatus = null;
		}

		return acquireValuationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcquireValuation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcquireValuation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireValuation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AcquireValuation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AcquireValuation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AcquireValuation.class, ModelWrapper.class);

	}

	private long _acquireValuationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _valuationNumber;
	private String _valuationVolume;
	private String _valuationFolio;
	private String _valuationStatus;

	public <T> T getColumnValue(String columnName) {
		Function<AcquireValuation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcquireValuation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("acquireValuationId", _acquireValuationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("valuationNumber", _valuationNumber);
		_columnOriginalValues.put("valuationVolume", _valuationVolume);
		_columnOriginalValues.put("valuationFolio", _valuationFolio);
		_columnOriginalValues.put("valuationStatus", _valuationStatus);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("acquireValuationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("valuationNumber", 256L);

		columnBitmasks.put("valuationVolume", 512L);

		columnBitmasks.put("valuationFolio", 1024L);

		columnBitmasks.put("valuationStatus", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcquireValuation _escapedModel;

}