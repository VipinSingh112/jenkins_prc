/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.acquire.stages.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.acquire.stages.service.model.AcquireTendering;
import com.nbp.acquire.stages.service.model.AcquireTenderingModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcquireTendering service. Represents a row in the &quot;nbp_acquire_tendering&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcquireTenderingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcquireTenderingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcquireTenderingImpl
 * @generated
 */
@JSON(strict = true)
public class AcquireTenderingModelImpl
	extends BaseModelImpl<AcquireTendering> implements AcquireTenderingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acquire tendering model instance should use the <code>AcquireTendering</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_acquire_tendering";

	public static final Object[][] TABLE_COLUMNS = {
		{"acquireTenderingId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"nameOfEachBidders", Types.VARCHAR},
		{"bidPriceofeachBid", Types.VARCHAR},
		{"minPriceOfTenderOffer", Types.VARCHAR},
		{"meetsMinimum", Types.VARCHAR}, {"highestOffer", Types.VARCHAR},
		{"status", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("acquireTenderingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfEachBidders", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bidPriceofeachBid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("minPriceOfTenderOffer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meetsMinimum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("highestOffer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_acquire_tendering (acquireTenderingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,nameOfEachBidders VARCHAR(75) null,bidPriceofeachBid VARCHAR(75) null,minPriceOfTenderOffer VARCHAR(75) null,meetsMinimum VARCHAR(75) null,highestOffer VARCHAR(75) null,status VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_acquire_tendering";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acquireTendering.acquireTenderingId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_acquire_tendering.acquireTenderingId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACQUIRETENDERINGID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcquireTenderingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _acquireTenderingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAcquireTenderingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _acquireTenderingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcquireTendering.class;
	}

	@Override
	public String getModelClassName() {
		return AcquireTendering.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcquireTendering, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcquireTendering, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireTendering, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AcquireTendering)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcquireTendering, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcquireTendering, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcquireTendering)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcquireTendering, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcquireTendering, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AcquireTendering, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AcquireTendering, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AcquireTendering, Object>>();

			attributeGetterFunctions.put(
				"acquireTenderingId", AcquireTendering::getAcquireTenderingId);
			attributeGetterFunctions.put(
				"groupId", AcquireTendering::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AcquireTendering::getCompanyId);
			attributeGetterFunctions.put("userId", AcquireTendering::getUserId);
			attributeGetterFunctions.put(
				"userName", AcquireTendering::getUserName);
			attributeGetterFunctions.put(
				"createDate", AcquireTendering::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AcquireTendering::getModifiedDate);
			attributeGetterFunctions.put("caseId", AcquireTendering::getCaseId);
			attributeGetterFunctions.put(
				"nameOfEachBidders", AcquireTendering::getNameOfEachBidders);
			attributeGetterFunctions.put(
				"bidPriceofeachBid", AcquireTendering::getBidPriceofeachBid);
			attributeGetterFunctions.put(
				"minPriceOfTenderOffer",
				AcquireTendering::getMinPriceOfTenderOffer);
			attributeGetterFunctions.put(
				"meetsMinimum", AcquireTendering::getMeetsMinimum);
			attributeGetterFunctions.put(
				"highestOffer", AcquireTendering::getHighestOffer);
			attributeGetterFunctions.put("status", AcquireTendering::getStatus);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AcquireTendering, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcquireTendering, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AcquireTendering, ?>>();

			attributeSetterBiConsumers.put(
				"acquireTenderingId",
				(BiConsumer<AcquireTendering, Long>)
					AcquireTendering::setAcquireTenderingId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AcquireTendering, Long>)
					AcquireTendering::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AcquireTendering, Long>)
					AcquireTendering::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AcquireTendering, Long>)
					AcquireTendering::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AcquireTendering, String>)
					AcquireTendering::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AcquireTendering, Date>)
					AcquireTendering::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AcquireTendering, Date>)
					AcquireTendering::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<AcquireTendering, String>)
					AcquireTendering::setCaseId);
			attributeSetterBiConsumers.put(
				"nameOfEachBidders",
				(BiConsumer<AcquireTendering, String>)
					AcquireTendering::setNameOfEachBidders);
			attributeSetterBiConsumers.put(
				"bidPriceofeachBid",
				(BiConsumer<AcquireTendering, String>)
					AcquireTendering::setBidPriceofeachBid);
			attributeSetterBiConsumers.put(
				"minPriceOfTenderOffer",
				(BiConsumer<AcquireTendering, String>)
					AcquireTendering::setMinPriceOfTenderOffer);
			attributeSetterBiConsumers.put(
				"meetsMinimum",
				(BiConsumer<AcquireTendering, String>)
					AcquireTendering::setMeetsMinimum);
			attributeSetterBiConsumers.put(
				"highestOffer",
				(BiConsumer<AcquireTendering, String>)
					AcquireTendering::setHighestOffer);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<AcquireTendering, String>)
					AcquireTendering::setStatus);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAcquireTenderingId() {
		return _acquireTenderingId;
	}

	@Override
	public void setAcquireTenderingId(long acquireTenderingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireTenderingId = acquireTenderingId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getNameOfEachBidders() {
		if (_nameOfEachBidders == null) {
			return "";
		}
		else {
			return _nameOfEachBidders;
		}
	}

	@Override
	public void setNameOfEachBidders(String nameOfEachBidders) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfEachBidders = nameOfEachBidders;
	}

	@JSON
	@Override
	public String getBidPriceofeachBid() {
		if (_bidPriceofeachBid == null) {
			return "";
		}
		else {
			return _bidPriceofeachBid;
		}
	}

	@Override
	public void setBidPriceofeachBid(String bidPriceofeachBid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bidPriceofeachBid = bidPriceofeachBid;
	}

	@JSON
	@Override
	public String getMinPriceOfTenderOffer() {
		if (_minPriceOfTenderOffer == null) {
			return "";
		}
		else {
			return _minPriceOfTenderOffer;
		}
	}

	@Override
	public void setMinPriceOfTenderOffer(String minPriceOfTenderOffer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minPriceOfTenderOffer = minPriceOfTenderOffer;
	}

	@JSON
	@Override
	public String getMeetsMinimum() {
		if (_meetsMinimum == null) {
			return "";
		}
		else {
			return _meetsMinimum;
		}
	}

	@Override
	public void setMeetsMinimum(String meetsMinimum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_meetsMinimum = meetsMinimum;
	}

	@JSON
	@Override
	public String getHighestOffer() {
		if (_highestOffer == null) {
			return "";
		}
		else {
			return _highestOffer;
		}
	}

	@Override
	public void setHighestOffer(String highestOffer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_highestOffer = highestOffer;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AcquireTendering.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcquireTendering toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcquireTendering>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcquireTenderingImpl acquireTenderingImpl = new AcquireTenderingImpl();

		acquireTenderingImpl.setAcquireTenderingId(getAcquireTenderingId());
		acquireTenderingImpl.setGroupId(getGroupId());
		acquireTenderingImpl.setCompanyId(getCompanyId());
		acquireTenderingImpl.setUserId(getUserId());
		acquireTenderingImpl.setUserName(getUserName());
		acquireTenderingImpl.setCreateDate(getCreateDate());
		acquireTenderingImpl.setModifiedDate(getModifiedDate());
		acquireTenderingImpl.setCaseId(getCaseId());
		acquireTenderingImpl.setNameOfEachBidders(getNameOfEachBidders());
		acquireTenderingImpl.setBidPriceofeachBid(getBidPriceofeachBid());
		acquireTenderingImpl.setMinPriceOfTenderOffer(
			getMinPriceOfTenderOffer());
		acquireTenderingImpl.setMeetsMinimum(getMeetsMinimum());
		acquireTenderingImpl.setHighestOffer(getHighestOffer());
		acquireTenderingImpl.setStatus(getStatus());

		acquireTenderingImpl.resetOriginalValues();

		return acquireTenderingImpl;
	}

	@Override
	public AcquireTendering cloneWithOriginalValues() {
		AcquireTenderingImpl acquireTenderingImpl = new AcquireTenderingImpl();

		acquireTenderingImpl.setAcquireTenderingId(
			this.<Long>getColumnOriginalValue("acquireTenderingId"));
		acquireTenderingImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		acquireTenderingImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		acquireTenderingImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		acquireTenderingImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		acquireTenderingImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		acquireTenderingImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		acquireTenderingImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		acquireTenderingImpl.setNameOfEachBidders(
			this.<String>getColumnOriginalValue("nameOfEachBidders"));
		acquireTenderingImpl.setBidPriceofeachBid(
			this.<String>getColumnOriginalValue("bidPriceofeachBid"));
		acquireTenderingImpl.setMinPriceOfTenderOffer(
			this.<String>getColumnOriginalValue("minPriceOfTenderOffer"));
		acquireTenderingImpl.setMeetsMinimum(
			this.<String>getColumnOriginalValue("meetsMinimum"));
		acquireTenderingImpl.setHighestOffer(
			this.<String>getColumnOriginalValue("highestOffer"));
		acquireTenderingImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));

		return acquireTenderingImpl;
	}

	@Override
	public int compareTo(AcquireTendering acquireTendering) {
		long primaryKey = acquireTendering.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcquireTendering)) {
			return false;
		}

		AcquireTendering acquireTendering = (AcquireTendering)object;

		long primaryKey = acquireTendering.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcquireTendering> toCacheModel() {
		AcquireTenderingCacheModel acquireTenderingCacheModel =
			new AcquireTenderingCacheModel();

		acquireTenderingCacheModel.acquireTenderingId = getAcquireTenderingId();

		acquireTenderingCacheModel.groupId = getGroupId();

		acquireTenderingCacheModel.companyId = getCompanyId();

		acquireTenderingCacheModel.userId = getUserId();

		acquireTenderingCacheModel.userName = getUserName();

		String userName = acquireTenderingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			acquireTenderingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			acquireTenderingCacheModel.createDate = createDate.getTime();
		}
		else {
			acquireTenderingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			acquireTenderingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			acquireTenderingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		acquireTenderingCacheModel.caseId = getCaseId();

		String caseId = acquireTenderingCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			acquireTenderingCacheModel.caseId = null;
		}

		acquireTenderingCacheModel.nameOfEachBidders = getNameOfEachBidders();

		String nameOfEachBidders = acquireTenderingCacheModel.nameOfEachBidders;

		if ((nameOfEachBidders != null) && (nameOfEachBidders.length() == 0)) {
			acquireTenderingCacheModel.nameOfEachBidders = null;
		}

		acquireTenderingCacheModel.bidPriceofeachBid = getBidPriceofeachBid();

		String bidPriceofeachBid = acquireTenderingCacheModel.bidPriceofeachBid;

		if ((bidPriceofeachBid != null) && (bidPriceofeachBid.length() == 0)) {
			acquireTenderingCacheModel.bidPriceofeachBid = null;
		}

		acquireTenderingCacheModel.minPriceOfTenderOffer =
			getMinPriceOfTenderOffer();

		String minPriceOfTenderOffer =
			acquireTenderingCacheModel.minPriceOfTenderOffer;

		if ((minPriceOfTenderOffer != null) &&
			(minPriceOfTenderOffer.length() == 0)) {

			acquireTenderingCacheModel.minPriceOfTenderOffer = null;
		}

		acquireTenderingCacheModel.meetsMinimum = getMeetsMinimum();

		String meetsMinimum = acquireTenderingCacheModel.meetsMinimum;

		if ((meetsMinimum != null) && (meetsMinimum.length() == 0)) {
			acquireTenderingCacheModel.meetsMinimum = null;
		}

		acquireTenderingCacheModel.highestOffer = getHighestOffer();

		String highestOffer = acquireTenderingCacheModel.highestOffer;

		if ((highestOffer != null) && (highestOffer.length() == 0)) {
			acquireTenderingCacheModel.highestOffer = null;
		}

		acquireTenderingCacheModel.status = getStatus();

		String status = acquireTenderingCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			acquireTenderingCacheModel.status = null;
		}

		return acquireTenderingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcquireTendering, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcquireTendering, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireTendering, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AcquireTendering)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AcquireTendering>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AcquireTendering.class, ModelWrapper.class);

	}

	private long _acquireTenderingId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _nameOfEachBidders;
	private String _bidPriceofeachBid;
	private String _minPriceOfTenderOffer;
	private String _meetsMinimum;
	private String _highestOffer;
	private String _status;

	public <T> T getColumnValue(String columnName) {
		Function<AcquireTendering, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcquireTendering)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("acquireTenderingId", _acquireTenderingId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("nameOfEachBidders", _nameOfEachBidders);
		_columnOriginalValues.put("bidPriceofeachBid", _bidPriceofeachBid);
		_columnOriginalValues.put(
			"minPriceOfTenderOffer", _minPriceOfTenderOffer);
		_columnOriginalValues.put("meetsMinimum", _meetsMinimum);
		_columnOriginalValues.put("highestOffer", _highestOffer);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("acquireTenderingId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("nameOfEachBidders", 256L);

		columnBitmasks.put("bidPriceofeachBid", 512L);

		columnBitmasks.put("minPriceOfTenderOffer", 1024L);

		columnBitmasks.put("meetsMinimum", 2048L);

		columnBitmasks.put("highestOffer", 4096L);

		columnBitmasks.put("status", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcquireTendering _escapedModel;

}