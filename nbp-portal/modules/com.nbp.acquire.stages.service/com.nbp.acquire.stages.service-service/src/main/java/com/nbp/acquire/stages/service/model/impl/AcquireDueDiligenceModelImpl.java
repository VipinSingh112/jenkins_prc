/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.acquire.stages.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.acquire.stages.service.model.AcquireDueDiligence;
import com.nbp.acquire.stages.service.model.AcquireDueDiligenceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcquireDueDiligence service. Represents a row in the &quot;nbp_acquire_duediligence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcquireDueDiligenceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcquireDueDiligenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcquireDueDiligenceImpl
 * @generated
 */
@JSON(strict = true)
public class AcquireDueDiligenceModelImpl
	extends BaseModelImpl<AcquireDueDiligence>
	implements AcquireDueDiligenceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acquire due diligence model instance should use the <code>AcquireDueDiligence</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_acquire_duediligence";

	public static final Object[][] TABLE_COLUMNS = {
		{"sampleId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"siteVisitRequired", Types.VARCHAR},
		{"preferredSitVisitDate", Types.TIMESTAMP},
		{"agencySubmissionStatus", Types.VARCHAR},
		{"nameOfAgency", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"dateSubmittedToAgency", Types.TIMESTAMP},
		{"agencyRecommendations", Types.VARCHAR},
		{"dateFeedbackReceived", Types.TIMESTAMP},
		{"acquireApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sampleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("siteVisitRequired", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("preferredSitVisitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("agencySubmissionStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfAgency", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateSubmittedToAgency", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("agencyRecommendations", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateFeedbackReceived", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("acquireApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_acquire_duediligence (sampleId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,siteVisitRequired VARCHAR(75) null,preferredSitVisitDate DATE null,agencySubmissionStatus VARCHAR(75) null,nameOfAgency VARCHAR(75) null,caseId VARCHAR(75) null,dateSubmittedToAgency DATE null,agencyRecommendations VARCHAR(75) null,dateFeedbackReceived DATE null,acquireApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_acquire_duediligence";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acquireDueDiligence.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_acquire_duediligence.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACQUIREAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAMEOFAGENCY_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcquireDueDiligenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sampleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSampleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sampleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcquireDueDiligence.class;
	}

	@Override
	public String getModelClassName() {
		return AcquireDueDiligence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcquireDueDiligence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcquireDueDiligence, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireDueDiligence, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AcquireDueDiligence)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcquireDueDiligence, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcquireDueDiligence, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcquireDueDiligence)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcquireDueDiligence, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcquireDueDiligence, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AcquireDueDiligence, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AcquireDueDiligence, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AcquireDueDiligence, Object>>();

			attributeGetterFunctions.put(
				"sampleId", AcquireDueDiligence::getSampleId);
			attributeGetterFunctions.put(
				"groupId", AcquireDueDiligence::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AcquireDueDiligence::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AcquireDueDiligence::getUserId);
			attributeGetterFunctions.put(
				"userName", AcquireDueDiligence::getUserName);
			attributeGetterFunctions.put(
				"createDate", AcquireDueDiligence::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AcquireDueDiligence::getModifiedDate);
			attributeGetterFunctions.put(
				"siteVisitRequired", AcquireDueDiligence::getSiteVisitRequired);
			attributeGetterFunctions.put(
				"preferredSitVisitDate",
				AcquireDueDiligence::getPreferredSitVisitDate);
			attributeGetterFunctions.put(
				"agencySubmissionStatus",
				AcquireDueDiligence::getAgencySubmissionStatus);
			attributeGetterFunctions.put(
				"nameOfAgency", AcquireDueDiligence::getNameOfAgency);
			attributeGetterFunctions.put(
				"caseId", AcquireDueDiligence::getCaseId);
			attributeGetterFunctions.put(
				"dateSubmittedToAgency",
				AcquireDueDiligence::getDateSubmittedToAgency);
			attributeGetterFunctions.put(
				"agencyRecommendations",
				AcquireDueDiligence::getAgencyRecommendations);
			attributeGetterFunctions.put(
				"dateFeedbackReceived",
				AcquireDueDiligence::getDateFeedbackReceived);
			attributeGetterFunctions.put(
				"acquireApplicationId",
				AcquireDueDiligence::getAcquireApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AcquireDueDiligence, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcquireDueDiligence, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AcquireDueDiligence, ?>>();

			attributeSetterBiConsumers.put(
				"sampleId",
				(BiConsumer<AcquireDueDiligence, Long>)
					AcquireDueDiligence::setSampleId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AcquireDueDiligence, Long>)
					AcquireDueDiligence::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AcquireDueDiligence, Long>)
					AcquireDueDiligence::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AcquireDueDiligence, Long>)
					AcquireDueDiligence::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AcquireDueDiligence, String>)
					AcquireDueDiligence::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AcquireDueDiligence, Date>)
					AcquireDueDiligence::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AcquireDueDiligence, Date>)
					AcquireDueDiligence::setModifiedDate);
			attributeSetterBiConsumers.put(
				"siteVisitRequired",
				(BiConsumer<AcquireDueDiligence, String>)
					AcquireDueDiligence::setSiteVisitRequired);
			attributeSetterBiConsumers.put(
				"preferredSitVisitDate",
				(BiConsumer<AcquireDueDiligence, Date>)
					AcquireDueDiligence::setPreferredSitVisitDate);
			attributeSetterBiConsumers.put(
				"agencySubmissionStatus",
				(BiConsumer<AcquireDueDiligence, String>)
					AcquireDueDiligence::setAgencySubmissionStatus);
			attributeSetterBiConsumers.put(
				"nameOfAgency",
				(BiConsumer<AcquireDueDiligence, String>)
					AcquireDueDiligence::setNameOfAgency);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<AcquireDueDiligence, String>)
					AcquireDueDiligence::setCaseId);
			attributeSetterBiConsumers.put(
				"dateSubmittedToAgency",
				(BiConsumer<AcquireDueDiligence, Date>)
					AcquireDueDiligence::setDateSubmittedToAgency);
			attributeSetterBiConsumers.put(
				"agencyRecommendations",
				(BiConsumer<AcquireDueDiligence, String>)
					AcquireDueDiligence::setAgencyRecommendations);
			attributeSetterBiConsumers.put(
				"dateFeedbackReceived",
				(BiConsumer<AcquireDueDiligence, Date>)
					AcquireDueDiligence::setDateFeedbackReceived);
			attributeSetterBiConsumers.put(
				"acquireApplicationId",
				(BiConsumer<AcquireDueDiligence, Long>)
					AcquireDueDiligence::setAcquireApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSampleId() {
		return _sampleId;
	}

	@Override
	public void setSampleId(long sampleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sampleId = sampleId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSiteVisitRequired() {
		if (_siteVisitRequired == null) {
			return "";
		}
		else {
			return _siteVisitRequired;
		}
	}

	@Override
	public void setSiteVisitRequired(String siteVisitRequired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_siteVisitRequired = siteVisitRequired;
	}

	@JSON
	@Override
	public Date getPreferredSitVisitDate() {
		return _preferredSitVisitDate;
	}

	@Override
	public void setPreferredSitVisitDate(Date preferredSitVisitDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preferredSitVisitDate = preferredSitVisitDate;
	}

	@JSON
	@Override
	public String getAgencySubmissionStatus() {
		if (_agencySubmissionStatus == null) {
			return "";
		}
		else {
			return _agencySubmissionStatus;
		}
	}

	@Override
	public void setAgencySubmissionStatus(String agencySubmissionStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencySubmissionStatus = agencySubmissionStatus;
	}

	@JSON
	@Override
	public String getNameOfAgency() {
		if (_nameOfAgency == null) {
			return "";
		}
		else {
			return _nameOfAgency;
		}
	}

	@Override
	public void setNameOfAgency(String nameOfAgency) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfAgency = nameOfAgency;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNameOfAgency() {
		return getColumnOriginalValue("nameOfAgency");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public Date getDateSubmittedToAgency() {
		return _dateSubmittedToAgency;
	}

	@Override
	public void setDateSubmittedToAgency(Date dateSubmittedToAgency) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateSubmittedToAgency = dateSubmittedToAgency;
	}

	@JSON
	@Override
	public String getAgencyRecommendations() {
		if (_agencyRecommendations == null) {
			return "";
		}
		else {
			return _agencyRecommendations;
		}
	}

	@Override
	public void setAgencyRecommendations(String agencyRecommendations) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyRecommendations = agencyRecommendations;
	}

	@JSON
	@Override
	public Date getDateFeedbackReceived() {
		return _dateFeedbackReceived;
	}

	@Override
	public void setDateFeedbackReceived(Date dateFeedbackReceived) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateFeedbackReceived = dateFeedbackReceived;
	}

	@JSON
	@Override
	public long getAcquireApplicationId() {
		return _acquireApplicationId;
	}

	@Override
	public void setAcquireApplicationId(long acquireApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acquireApplicationId = acquireApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAcquireApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AcquireDueDiligence.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcquireDueDiligence toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcquireDueDiligence>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcquireDueDiligenceImpl acquireDueDiligenceImpl =
			new AcquireDueDiligenceImpl();

		acquireDueDiligenceImpl.setSampleId(getSampleId());
		acquireDueDiligenceImpl.setGroupId(getGroupId());
		acquireDueDiligenceImpl.setCompanyId(getCompanyId());
		acquireDueDiligenceImpl.setUserId(getUserId());
		acquireDueDiligenceImpl.setUserName(getUserName());
		acquireDueDiligenceImpl.setCreateDate(getCreateDate());
		acquireDueDiligenceImpl.setModifiedDate(getModifiedDate());
		acquireDueDiligenceImpl.setSiteVisitRequired(getSiteVisitRequired());
		acquireDueDiligenceImpl.setPreferredSitVisitDate(
			getPreferredSitVisitDate());
		acquireDueDiligenceImpl.setAgencySubmissionStatus(
			getAgencySubmissionStatus());
		acquireDueDiligenceImpl.setNameOfAgency(getNameOfAgency());
		acquireDueDiligenceImpl.setCaseId(getCaseId());
		acquireDueDiligenceImpl.setDateSubmittedToAgency(
			getDateSubmittedToAgency());
		acquireDueDiligenceImpl.setAgencyRecommendations(
			getAgencyRecommendations());
		acquireDueDiligenceImpl.setDateFeedbackReceived(
			getDateFeedbackReceived());
		acquireDueDiligenceImpl.setAcquireApplicationId(
			getAcquireApplicationId());

		acquireDueDiligenceImpl.resetOriginalValues();

		return acquireDueDiligenceImpl;
	}

	@Override
	public AcquireDueDiligence cloneWithOriginalValues() {
		AcquireDueDiligenceImpl acquireDueDiligenceImpl =
			new AcquireDueDiligenceImpl();

		acquireDueDiligenceImpl.setSampleId(
			this.<Long>getColumnOriginalValue("sampleId"));
		acquireDueDiligenceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		acquireDueDiligenceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		acquireDueDiligenceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		acquireDueDiligenceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		acquireDueDiligenceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		acquireDueDiligenceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		acquireDueDiligenceImpl.setSiteVisitRequired(
			this.<String>getColumnOriginalValue("siteVisitRequired"));
		acquireDueDiligenceImpl.setPreferredSitVisitDate(
			this.<Date>getColumnOriginalValue("preferredSitVisitDate"));
		acquireDueDiligenceImpl.setAgencySubmissionStatus(
			this.<String>getColumnOriginalValue("agencySubmissionStatus"));
		acquireDueDiligenceImpl.setNameOfAgency(
			this.<String>getColumnOriginalValue("nameOfAgency"));
		acquireDueDiligenceImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		acquireDueDiligenceImpl.setDateSubmittedToAgency(
			this.<Date>getColumnOriginalValue("dateSubmittedToAgency"));
		acquireDueDiligenceImpl.setAgencyRecommendations(
			this.<String>getColumnOriginalValue("agencyRecommendations"));
		acquireDueDiligenceImpl.setDateFeedbackReceived(
			this.<Date>getColumnOriginalValue("dateFeedbackReceived"));
		acquireDueDiligenceImpl.setAcquireApplicationId(
			this.<Long>getColumnOriginalValue("acquireApplicationId"));

		return acquireDueDiligenceImpl;
	}

	@Override
	public int compareTo(AcquireDueDiligence acquireDueDiligence) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), acquireDueDiligence.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcquireDueDiligence)) {
			return false;
		}

		AcquireDueDiligence acquireDueDiligence = (AcquireDueDiligence)object;

		long primaryKey = acquireDueDiligence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcquireDueDiligence> toCacheModel() {
		AcquireDueDiligenceCacheModel acquireDueDiligenceCacheModel =
			new AcquireDueDiligenceCacheModel();

		acquireDueDiligenceCacheModel.sampleId = getSampleId();

		acquireDueDiligenceCacheModel.groupId = getGroupId();

		acquireDueDiligenceCacheModel.companyId = getCompanyId();

		acquireDueDiligenceCacheModel.userId = getUserId();

		acquireDueDiligenceCacheModel.userName = getUserName();

		String userName = acquireDueDiligenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			acquireDueDiligenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			acquireDueDiligenceCacheModel.createDate = createDate.getTime();
		}
		else {
			acquireDueDiligenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			acquireDueDiligenceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			acquireDueDiligenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		acquireDueDiligenceCacheModel.siteVisitRequired =
			getSiteVisitRequired();

		String siteVisitRequired =
			acquireDueDiligenceCacheModel.siteVisitRequired;

		if ((siteVisitRequired != null) && (siteVisitRequired.length() == 0)) {
			acquireDueDiligenceCacheModel.siteVisitRequired = null;
		}

		Date preferredSitVisitDate = getPreferredSitVisitDate();

		if (preferredSitVisitDate != null) {
			acquireDueDiligenceCacheModel.preferredSitVisitDate =
				preferredSitVisitDate.getTime();
		}
		else {
			acquireDueDiligenceCacheModel.preferredSitVisitDate =
				Long.MIN_VALUE;
		}

		acquireDueDiligenceCacheModel.agencySubmissionStatus =
			getAgencySubmissionStatus();

		String agencySubmissionStatus =
			acquireDueDiligenceCacheModel.agencySubmissionStatus;

		if ((agencySubmissionStatus != null) &&
			(agencySubmissionStatus.length() == 0)) {

			acquireDueDiligenceCacheModel.agencySubmissionStatus = null;
		}

		acquireDueDiligenceCacheModel.nameOfAgency = getNameOfAgency();

		String nameOfAgency = acquireDueDiligenceCacheModel.nameOfAgency;

		if ((nameOfAgency != null) && (nameOfAgency.length() == 0)) {
			acquireDueDiligenceCacheModel.nameOfAgency = null;
		}

		acquireDueDiligenceCacheModel.caseId = getCaseId();

		String caseId = acquireDueDiligenceCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			acquireDueDiligenceCacheModel.caseId = null;
		}

		Date dateSubmittedToAgency = getDateSubmittedToAgency();

		if (dateSubmittedToAgency != null) {
			acquireDueDiligenceCacheModel.dateSubmittedToAgency =
				dateSubmittedToAgency.getTime();
		}
		else {
			acquireDueDiligenceCacheModel.dateSubmittedToAgency =
				Long.MIN_VALUE;
		}

		acquireDueDiligenceCacheModel.agencyRecommendations =
			getAgencyRecommendations();

		String agencyRecommendations =
			acquireDueDiligenceCacheModel.agencyRecommendations;

		if ((agencyRecommendations != null) &&
			(agencyRecommendations.length() == 0)) {

			acquireDueDiligenceCacheModel.agencyRecommendations = null;
		}

		Date dateFeedbackReceived = getDateFeedbackReceived();

		if (dateFeedbackReceived != null) {
			acquireDueDiligenceCacheModel.dateFeedbackReceived =
				dateFeedbackReceived.getTime();
		}
		else {
			acquireDueDiligenceCacheModel.dateFeedbackReceived = Long.MIN_VALUE;
		}

		acquireDueDiligenceCacheModel.acquireApplicationId =
			getAcquireApplicationId();

		return acquireDueDiligenceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcquireDueDiligence, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcquireDueDiligence, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcquireDueDiligence, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AcquireDueDiligence)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AcquireDueDiligence>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AcquireDueDiligence.class, ModelWrapper.class);

	}

	private long _sampleId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _siteVisitRequired;
	private Date _preferredSitVisitDate;
	private String _agencySubmissionStatus;
	private String _nameOfAgency;
	private String _caseId;
	private Date _dateSubmittedToAgency;
	private String _agencyRecommendations;
	private Date _dateFeedbackReceived;
	private long _acquireApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<AcquireDueDiligence, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcquireDueDiligence)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("sampleId", _sampleId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("siteVisitRequired", _siteVisitRequired);
		_columnOriginalValues.put(
			"preferredSitVisitDate", _preferredSitVisitDate);
		_columnOriginalValues.put(
			"agencySubmissionStatus", _agencySubmissionStatus);
		_columnOriginalValues.put("nameOfAgency", _nameOfAgency);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put(
			"dateSubmittedToAgency", _dateSubmittedToAgency);
		_columnOriginalValues.put(
			"agencyRecommendations", _agencyRecommendations);
		_columnOriginalValues.put(
			"dateFeedbackReceived", _dateFeedbackReceived);
		_columnOriginalValues.put(
			"acquireApplicationId", _acquireApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("sampleId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("siteVisitRequired", 128L);

		columnBitmasks.put("preferredSitVisitDate", 256L);

		columnBitmasks.put("agencySubmissionStatus", 512L);

		columnBitmasks.put("nameOfAgency", 1024L);

		columnBitmasks.put("caseId", 2048L);

		columnBitmasks.put("dateSubmittedToAgency", 4096L);

		columnBitmasks.put("agencyRecommendations", 8192L);

		columnBitmasks.put("dateFeedbackReceived", 16384L);

		columnBitmasks.put("acquireApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcquireDueDiligence _escapedModel;

}