/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.medical.facilities.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.medical.facilities.application.form.service.model.MedicalFacilitiesHomeInfo;
import com.nbp.medical.facilities.application.form.service.model.MedicalFacilitiesHomeInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MedicalFacilitiesHomeInfo service. Represents a row in the &quot;nbp_medical_home_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MedicalFacilitiesHomeInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MedicalFacilitiesHomeInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MedicalFacilitiesHomeInfoImpl
 * @generated
 */
@JSON(strict = true)
public class MedicalFacilitiesHomeInfoModelImpl
	extends BaseModelImpl<MedicalFacilitiesHomeInfo>
	implements MedicalFacilitiesHomeInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a medical facilities home info model instance should use the <code>MedicalFacilitiesHomeInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_medical_home_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"medicalFacilitiesHomeInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nameOfOwner", Types.VARCHAR}, {"homeAddress", Types.VARCHAR},
		{"homeTelephoneNumber", Types.VARCHAR},
		{"homeEmailAddress", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"otherBusinessDetails", Types.VARCHAR},
		{"maternityPatients", Types.VARCHAR}, {"otherPatients", Types.VARCHAR},
		{"counter", Types.VARCHAR}, {"medicalFacilitiesAppId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medicalFacilitiesHomeInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nameOfOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeTelephoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeEmailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherBusinessDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maternityPatients", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherPatients", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medicalFacilitiesAppId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_medical_home_info (uuid_ VARCHAR(75) null,medicalFacilitiesHomeInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nameOfOwner VARCHAR(75) null,homeAddress VARCHAR(500) null,homeTelephoneNumber VARCHAR(75) null,homeEmailAddress VARCHAR(75) null,description VARCHAR(500) null,otherBusinessDetails VARCHAR(75) null,maternityPatients VARCHAR(75) null,otherPatients VARCHAR(75) null,counter VARCHAR(75) null,medicalFacilitiesAppId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_medical_home_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY medicalFacilitiesHomeInfo.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_medical_home_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MEDICALFACILITIESAPPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MedicalFacilitiesHomeInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _medicalFacilitiesHomeInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMedicalFacilitiesHomeInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _medicalFacilitiesHomeInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MedicalFacilitiesHomeInfo.class;
	}

	@Override
	public String getModelClassName() {
		return MedicalFacilitiesHomeInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MedicalFacilitiesHomeInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MedicalFacilitiesHomeInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MedicalFacilitiesHomeInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MedicalFacilitiesHomeInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MedicalFacilitiesHomeInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MedicalFacilitiesHomeInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MedicalFacilitiesHomeInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MedicalFacilitiesHomeInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MedicalFacilitiesHomeInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<MedicalFacilitiesHomeInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<MedicalFacilitiesHomeInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<MedicalFacilitiesHomeInfo, Object>>();

			attributeGetterFunctions.put(
				"uuid", MedicalFacilitiesHomeInfo::getUuid);
			attributeGetterFunctions.put(
				"medicalFacilitiesHomeInfoId",
				MedicalFacilitiesHomeInfo::getMedicalFacilitiesHomeInfoId);
			attributeGetterFunctions.put(
				"groupId", MedicalFacilitiesHomeInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", MedicalFacilitiesHomeInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", MedicalFacilitiesHomeInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", MedicalFacilitiesHomeInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", MedicalFacilitiesHomeInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", MedicalFacilitiesHomeInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"nameOfOwner", MedicalFacilitiesHomeInfo::getNameOfOwner);
			attributeGetterFunctions.put(
				"homeAddress", MedicalFacilitiesHomeInfo::getHomeAddress);
			attributeGetterFunctions.put(
				"homeTelephoneNumber",
				MedicalFacilitiesHomeInfo::getHomeTelephoneNumber);
			attributeGetterFunctions.put(
				"homeEmailAddress",
				MedicalFacilitiesHomeInfo::getHomeEmailAddress);
			attributeGetterFunctions.put(
				"description", MedicalFacilitiesHomeInfo::getDescription);
			attributeGetterFunctions.put(
				"otherBusinessDetails",
				MedicalFacilitiesHomeInfo::getOtherBusinessDetails);
			attributeGetterFunctions.put(
				"maternityPatients",
				MedicalFacilitiesHomeInfo::getMaternityPatients);
			attributeGetterFunctions.put(
				"otherPatients", MedicalFacilitiesHomeInfo::getOtherPatients);
			attributeGetterFunctions.put(
				"counter", MedicalFacilitiesHomeInfo::getCounter);
			attributeGetterFunctions.put(
				"medicalFacilitiesAppId",
				MedicalFacilitiesHomeInfo::getMedicalFacilitiesAppId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<MedicalFacilitiesHomeInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<MedicalFacilitiesHomeInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<MedicalFacilitiesHomeInfo, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setUuid);
			attributeSetterBiConsumers.put(
				"medicalFacilitiesHomeInfoId",
				(BiConsumer<MedicalFacilitiesHomeInfo, Long>)
					MedicalFacilitiesHomeInfo::setMedicalFacilitiesHomeInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<MedicalFacilitiesHomeInfo, Long>)
					MedicalFacilitiesHomeInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<MedicalFacilitiesHomeInfo, Long>)
					MedicalFacilitiesHomeInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<MedicalFacilitiesHomeInfo, Long>)
					MedicalFacilitiesHomeInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<MedicalFacilitiesHomeInfo, Date>)
					MedicalFacilitiesHomeInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<MedicalFacilitiesHomeInfo, Date>)
					MedicalFacilitiesHomeInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nameOfOwner",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setNameOfOwner);
			attributeSetterBiConsumers.put(
				"homeAddress",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setHomeAddress);
			attributeSetterBiConsumers.put(
				"homeTelephoneNumber",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setHomeTelephoneNumber);
			attributeSetterBiConsumers.put(
				"homeEmailAddress",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setHomeEmailAddress);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setDescription);
			attributeSetterBiConsumers.put(
				"otherBusinessDetails",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setOtherBusinessDetails);
			attributeSetterBiConsumers.put(
				"maternityPatients",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setMaternityPatients);
			attributeSetterBiConsumers.put(
				"otherPatients",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setOtherPatients);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<MedicalFacilitiesHomeInfo, String>)
					MedicalFacilitiesHomeInfo::setCounter);
			attributeSetterBiConsumers.put(
				"medicalFacilitiesAppId",
				(BiConsumer<MedicalFacilitiesHomeInfo, Long>)
					MedicalFacilitiesHomeInfo::setMedicalFacilitiesAppId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getMedicalFacilitiesHomeInfoId() {
		return _medicalFacilitiesHomeInfoId;
	}

	@Override
	public void setMedicalFacilitiesHomeInfoId(
		long medicalFacilitiesHomeInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_medicalFacilitiesHomeInfoId = medicalFacilitiesHomeInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNameOfOwner() {
		if (_nameOfOwner == null) {
			return "";
		}
		else {
			return _nameOfOwner;
		}
	}

	@Override
	public void setNameOfOwner(String nameOfOwner) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfOwner = nameOfOwner;
	}

	@JSON
	@Override
	public String getHomeAddress() {
		if (_homeAddress == null) {
			return "";
		}
		else {
			return _homeAddress;
		}
	}

	@Override
	public void setHomeAddress(String homeAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeAddress = homeAddress;
	}

	@JSON
	@Override
	public String getHomeTelephoneNumber() {
		if (_homeTelephoneNumber == null) {
			return "";
		}
		else {
			return _homeTelephoneNumber;
		}
	}

	@Override
	public void setHomeTelephoneNumber(String homeTelephoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeTelephoneNumber = homeTelephoneNumber;
	}

	@JSON
	@Override
	public String getHomeEmailAddress() {
		if (_homeEmailAddress == null) {
			return "";
		}
		else {
			return _homeEmailAddress;
		}
	}

	@Override
	public void setHomeEmailAddress(String homeEmailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homeEmailAddress = homeEmailAddress;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getOtherBusinessDetails() {
		if (_otherBusinessDetails == null) {
			return "";
		}
		else {
			return _otherBusinessDetails;
		}
	}

	@Override
	public void setOtherBusinessDetails(String otherBusinessDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherBusinessDetails = otherBusinessDetails;
	}

	@JSON
	@Override
	public String getMaternityPatients() {
		if (_maternityPatients == null) {
			return "";
		}
		else {
			return _maternityPatients;
		}
	}

	@Override
	public void setMaternityPatients(String maternityPatients) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maternityPatients = maternityPatients;
	}

	@JSON
	@Override
	public String getOtherPatients() {
		if (_otherPatients == null) {
			return "";
		}
		else {
			return _otherPatients;
		}
	}

	@Override
	public void setOtherPatients(String otherPatients) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherPatients = otherPatients;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	@JSON
	@Override
	public long getMedicalFacilitiesAppId() {
		return _medicalFacilitiesAppId;
	}

	@Override
	public void setMedicalFacilitiesAppId(long medicalFacilitiesAppId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_medicalFacilitiesAppId = medicalFacilitiesAppId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMedicalFacilitiesAppId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("medicalFacilitiesAppId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				MedicalFacilitiesHomeInfo.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MedicalFacilitiesHomeInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MedicalFacilitiesHomeInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MedicalFacilitiesHomeInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MedicalFacilitiesHomeInfoImpl medicalFacilitiesHomeInfoImpl =
			new MedicalFacilitiesHomeInfoImpl();

		medicalFacilitiesHomeInfoImpl.setUuid(getUuid());
		medicalFacilitiesHomeInfoImpl.setMedicalFacilitiesHomeInfoId(
			getMedicalFacilitiesHomeInfoId());
		medicalFacilitiesHomeInfoImpl.setGroupId(getGroupId());
		medicalFacilitiesHomeInfoImpl.setCompanyId(getCompanyId());
		medicalFacilitiesHomeInfoImpl.setUserId(getUserId());
		medicalFacilitiesHomeInfoImpl.setUserName(getUserName());
		medicalFacilitiesHomeInfoImpl.setCreateDate(getCreateDate());
		medicalFacilitiesHomeInfoImpl.setModifiedDate(getModifiedDate());
		medicalFacilitiesHomeInfoImpl.setNameOfOwner(getNameOfOwner());
		medicalFacilitiesHomeInfoImpl.setHomeAddress(getHomeAddress());
		medicalFacilitiesHomeInfoImpl.setHomeTelephoneNumber(
			getHomeTelephoneNumber());
		medicalFacilitiesHomeInfoImpl.setHomeEmailAddress(
			getHomeEmailAddress());
		medicalFacilitiesHomeInfoImpl.setDescription(getDescription());
		medicalFacilitiesHomeInfoImpl.setOtherBusinessDetails(
			getOtherBusinessDetails());
		medicalFacilitiesHomeInfoImpl.setMaternityPatients(
			getMaternityPatients());
		medicalFacilitiesHomeInfoImpl.setOtherPatients(getOtherPatients());
		medicalFacilitiesHomeInfoImpl.setCounter(getCounter());
		medicalFacilitiesHomeInfoImpl.setMedicalFacilitiesAppId(
			getMedicalFacilitiesAppId());

		medicalFacilitiesHomeInfoImpl.resetOriginalValues();

		return medicalFacilitiesHomeInfoImpl;
	}

	@Override
	public MedicalFacilitiesHomeInfo cloneWithOriginalValues() {
		MedicalFacilitiesHomeInfoImpl medicalFacilitiesHomeInfoImpl =
			new MedicalFacilitiesHomeInfoImpl();

		medicalFacilitiesHomeInfoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		medicalFacilitiesHomeInfoImpl.setMedicalFacilitiesHomeInfoId(
			this.<Long>getColumnOriginalValue("medicalFacilitiesHomeInfoId"));
		medicalFacilitiesHomeInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		medicalFacilitiesHomeInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		medicalFacilitiesHomeInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		medicalFacilitiesHomeInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		medicalFacilitiesHomeInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		medicalFacilitiesHomeInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		medicalFacilitiesHomeInfoImpl.setNameOfOwner(
			this.<String>getColumnOriginalValue("nameOfOwner"));
		medicalFacilitiesHomeInfoImpl.setHomeAddress(
			this.<String>getColumnOriginalValue("homeAddress"));
		medicalFacilitiesHomeInfoImpl.setHomeTelephoneNumber(
			this.<String>getColumnOriginalValue("homeTelephoneNumber"));
		medicalFacilitiesHomeInfoImpl.setHomeEmailAddress(
			this.<String>getColumnOriginalValue("homeEmailAddress"));
		medicalFacilitiesHomeInfoImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		medicalFacilitiesHomeInfoImpl.setOtherBusinessDetails(
			this.<String>getColumnOriginalValue("otherBusinessDetails"));
		medicalFacilitiesHomeInfoImpl.setMaternityPatients(
			this.<String>getColumnOriginalValue("maternityPatients"));
		medicalFacilitiesHomeInfoImpl.setOtherPatients(
			this.<String>getColumnOriginalValue("otherPatients"));
		medicalFacilitiesHomeInfoImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));
		medicalFacilitiesHomeInfoImpl.setMedicalFacilitiesAppId(
			this.<Long>getColumnOriginalValue("medicalFacilitiesAppId"));

		return medicalFacilitiesHomeInfoImpl;
	}

	@Override
	public int compareTo(MedicalFacilitiesHomeInfo medicalFacilitiesHomeInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), medicalFacilitiesHomeInfo.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MedicalFacilitiesHomeInfo)) {
			return false;
		}

		MedicalFacilitiesHomeInfo medicalFacilitiesHomeInfo =
			(MedicalFacilitiesHomeInfo)object;

		long primaryKey = medicalFacilitiesHomeInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MedicalFacilitiesHomeInfo> toCacheModel() {
		MedicalFacilitiesHomeInfoCacheModel
			medicalFacilitiesHomeInfoCacheModel =
				new MedicalFacilitiesHomeInfoCacheModel();

		medicalFacilitiesHomeInfoCacheModel.uuid = getUuid();

		String uuid = medicalFacilitiesHomeInfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.uuid = null;
		}

		medicalFacilitiesHomeInfoCacheModel.medicalFacilitiesHomeInfoId =
			getMedicalFacilitiesHomeInfoId();

		medicalFacilitiesHomeInfoCacheModel.groupId = getGroupId();

		medicalFacilitiesHomeInfoCacheModel.companyId = getCompanyId();

		medicalFacilitiesHomeInfoCacheModel.userId = getUserId();

		medicalFacilitiesHomeInfoCacheModel.userName = getUserName();

		String userName = medicalFacilitiesHomeInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			medicalFacilitiesHomeInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			medicalFacilitiesHomeInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			medicalFacilitiesHomeInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			medicalFacilitiesHomeInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		medicalFacilitiesHomeInfoCacheModel.nameOfOwner = getNameOfOwner();

		String nameOfOwner = medicalFacilitiesHomeInfoCacheModel.nameOfOwner;

		if ((nameOfOwner != null) && (nameOfOwner.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.nameOfOwner = null;
		}

		medicalFacilitiesHomeInfoCacheModel.homeAddress = getHomeAddress();

		String homeAddress = medicalFacilitiesHomeInfoCacheModel.homeAddress;

		if ((homeAddress != null) && (homeAddress.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.homeAddress = null;
		}

		medicalFacilitiesHomeInfoCacheModel.homeTelephoneNumber =
			getHomeTelephoneNumber();

		String homeTelephoneNumber =
			medicalFacilitiesHomeInfoCacheModel.homeTelephoneNumber;

		if ((homeTelephoneNumber != null) &&
			(homeTelephoneNumber.length() == 0)) {

			medicalFacilitiesHomeInfoCacheModel.homeTelephoneNumber = null;
		}

		medicalFacilitiesHomeInfoCacheModel.homeEmailAddress =
			getHomeEmailAddress();

		String homeEmailAddress =
			medicalFacilitiesHomeInfoCacheModel.homeEmailAddress;

		if ((homeEmailAddress != null) && (homeEmailAddress.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.homeEmailAddress = null;
		}

		medicalFacilitiesHomeInfoCacheModel.description = getDescription();

		String description = medicalFacilitiesHomeInfoCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.description = null;
		}

		medicalFacilitiesHomeInfoCacheModel.otherBusinessDetails =
			getOtherBusinessDetails();

		String otherBusinessDetails =
			medicalFacilitiesHomeInfoCacheModel.otherBusinessDetails;

		if ((otherBusinessDetails != null) &&
			(otherBusinessDetails.length() == 0)) {

			medicalFacilitiesHomeInfoCacheModel.otherBusinessDetails = null;
		}

		medicalFacilitiesHomeInfoCacheModel.maternityPatients =
			getMaternityPatients();

		String maternityPatients =
			medicalFacilitiesHomeInfoCacheModel.maternityPatients;

		if ((maternityPatients != null) && (maternityPatients.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.maternityPatients = null;
		}

		medicalFacilitiesHomeInfoCacheModel.otherPatients = getOtherPatients();

		String otherPatients =
			medicalFacilitiesHomeInfoCacheModel.otherPatients;

		if ((otherPatients != null) && (otherPatients.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.otherPatients = null;
		}

		medicalFacilitiesHomeInfoCacheModel.counter = getCounter();

		String counter = medicalFacilitiesHomeInfoCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			medicalFacilitiesHomeInfoCacheModel.counter = null;
		}

		medicalFacilitiesHomeInfoCacheModel.medicalFacilitiesAppId =
			getMedicalFacilitiesAppId();

		return medicalFacilitiesHomeInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MedicalFacilitiesHomeInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MedicalFacilitiesHomeInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MedicalFacilitiesHomeInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(MedicalFacilitiesHomeInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, MedicalFacilitiesHomeInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						MedicalFacilitiesHomeInfo.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _medicalFacilitiesHomeInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nameOfOwner;
	private String _homeAddress;
	private String _homeTelephoneNumber;
	private String _homeEmailAddress;
	private String _description;
	private String _otherBusinessDetails;
	private String _maternityPatients;
	private String _otherPatients;
	private String _counter;
	private long _medicalFacilitiesAppId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<MedicalFacilitiesHomeInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MedicalFacilitiesHomeInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"medicalFacilitiesHomeInfoId", _medicalFacilitiesHomeInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nameOfOwner", _nameOfOwner);
		_columnOriginalValues.put("homeAddress", _homeAddress);
		_columnOriginalValues.put("homeTelephoneNumber", _homeTelephoneNumber);
		_columnOriginalValues.put("homeEmailAddress", _homeEmailAddress);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put(
			"otherBusinessDetails", _otherBusinessDetails);
		_columnOriginalValues.put("maternityPatients", _maternityPatients);
		_columnOriginalValues.put("otherPatients", _otherPatients);
		_columnOriginalValues.put("counter", _counter);
		_columnOriginalValues.put(
			"medicalFacilitiesAppId", _medicalFacilitiesAppId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("medicalFacilitiesHomeInfoId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("nameOfOwner", 256L);

		columnBitmasks.put("homeAddress", 512L);

		columnBitmasks.put("homeTelephoneNumber", 1024L);

		columnBitmasks.put("homeEmailAddress", 2048L);

		columnBitmasks.put("description", 4096L);

		columnBitmasks.put("otherBusinessDetails", 8192L);

		columnBitmasks.put("maternityPatients", 16384L);

		columnBitmasks.put("otherPatients", 32768L);

		columnBitmasks.put("counter", 65536L);

		columnBitmasks.put("medicalFacilitiesAppId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MedicalFacilitiesHomeInfo _escapedModel;

}