/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccMediLabPhysicalResource;
import com.nbp.janaac.application.form.service.model.AccMediLabPhysicalResourceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccMediLabPhysicalResource service. Represents a row in the &quot;nbp_janaac_acc_medi_physical&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccMediLabPhysicalResourceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccMediLabPhysicalResourceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccMediLabPhysicalResourceImpl
 * @generated
 */
@JSON(strict = true)
public class AccMediLabPhysicalResourceModelImpl
	extends BaseModelImpl<AccMediLabPhysicalResource>
	implements AccMediLabPhysicalResourceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc medi lab physical resource model instance should use the <code>AccMediLabPhysicalResource</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_medi_physical";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR},
		{"accMediLabPhysicalResourceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"laboratoryfacilities", Types.VARCHAR},
		{"safetyFeatures", Types.VARCHAR},
		{"specialEnvironment", Types.VARCHAR},
		{"monitoringActivities", Types.VARCHAR},
		{"securityArrangements", Types.VARCHAR},
		{"laboratoryDocumented", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accMediLabPhysicalResourceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("laboratoryfacilities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("safetyFeatures", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specialEnvironment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("monitoringActivities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityArrangements", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("laboratoryDocumented", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_medi_physical (uuid_ VARCHAR(75) null,accMediLabPhysicalResourceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,laboratoryfacilities VARCHAR(75) null,safetyFeatures VARCHAR(75) null,specialEnvironment VARCHAR(75) null,monitoringActivities VARCHAR(75) null,securityArrangements VARCHAR(75) null,laboratoryDocumented VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_medi_physical";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accMediLabPhysicalResource.accMediLabPhysicalResourceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_medi_physical.accMediLabPhysicalResourceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCMEDILABPHYSICALRESOURCEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccMediLabPhysicalResourceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accMediLabPhysicalResourceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccMediLabPhysicalResourceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accMediLabPhysicalResourceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccMediLabPhysicalResource.class;
	}

	@Override
	public String getModelClassName() {
		return AccMediLabPhysicalResource.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccMediLabPhysicalResource, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccMediLabPhysicalResource, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabPhysicalResource, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(AccMediLabPhysicalResource)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccMediLabPhysicalResource, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccMediLabPhysicalResource, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccMediLabPhysicalResource)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccMediLabPhysicalResource, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccMediLabPhysicalResource, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccMediLabPhysicalResource, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccMediLabPhysicalResource, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<AccMediLabPhysicalResource, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccMediLabPhysicalResource::getUuid);
			attributeGetterFunctions.put(
				"accMediLabPhysicalResourceId",
				AccMediLabPhysicalResource::getAccMediLabPhysicalResourceId);
			attributeGetterFunctions.put(
				"groupId", AccMediLabPhysicalResource::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccMediLabPhysicalResource::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccMediLabPhysicalResource::getUserId);
			attributeGetterFunctions.put(
				"userName", AccMediLabPhysicalResource::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccMediLabPhysicalResource::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccMediLabPhysicalResource::getModifiedDate);
			attributeGetterFunctions.put(
				"laboratoryfacilities",
				AccMediLabPhysicalResource::getLaboratoryfacilities);
			attributeGetterFunctions.put(
				"safetyFeatures",
				AccMediLabPhysicalResource::getSafetyFeatures);
			attributeGetterFunctions.put(
				"specialEnvironment",
				AccMediLabPhysicalResource::getSpecialEnvironment);
			attributeGetterFunctions.put(
				"monitoringActivities",
				AccMediLabPhysicalResource::getMonitoringActivities);
			attributeGetterFunctions.put(
				"securityArrangements",
				AccMediLabPhysicalResource::getSecurityArrangements);
			attributeGetterFunctions.put(
				"laboratoryDocumented",
				AccMediLabPhysicalResource::getLaboratoryDocumented);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccMediLabPhysicalResource::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccMediLabPhysicalResource, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccMediLabPhysicalResource, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccMediLabPhysicalResource, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccMediLabPhysicalResource, String>)
					AccMediLabPhysicalResource::setUuid);
			attributeSetterBiConsumers.put(
				"accMediLabPhysicalResourceId",
				(BiConsumer<AccMediLabPhysicalResource, Long>)
					AccMediLabPhysicalResource::
						setAccMediLabPhysicalResourceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccMediLabPhysicalResource, Long>)
					AccMediLabPhysicalResource::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccMediLabPhysicalResource, Long>)
					AccMediLabPhysicalResource::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccMediLabPhysicalResource, Long>)
					AccMediLabPhysicalResource::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccMediLabPhysicalResource, String>)
					AccMediLabPhysicalResource::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccMediLabPhysicalResource, Date>)
					AccMediLabPhysicalResource::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccMediLabPhysicalResource, Date>)
					AccMediLabPhysicalResource::setModifiedDate);
			attributeSetterBiConsumers.put(
				"laboratoryfacilities",
				(BiConsumer<AccMediLabPhysicalResource, String>)
					AccMediLabPhysicalResource::setLaboratoryfacilities);
			attributeSetterBiConsumers.put(
				"safetyFeatures",
				(BiConsumer<AccMediLabPhysicalResource, String>)
					AccMediLabPhysicalResource::setSafetyFeatures);
			attributeSetterBiConsumers.put(
				"specialEnvironment",
				(BiConsumer<AccMediLabPhysicalResource, String>)
					AccMediLabPhysicalResource::setSpecialEnvironment);
			attributeSetterBiConsumers.put(
				"monitoringActivities",
				(BiConsumer<AccMediLabPhysicalResource, String>)
					AccMediLabPhysicalResource::setMonitoringActivities);
			attributeSetterBiConsumers.put(
				"securityArrangements",
				(BiConsumer<AccMediLabPhysicalResource, String>)
					AccMediLabPhysicalResource::setSecurityArrangements);
			attributeSetterBiConsumers.put(
				"laboratoryDocumented",
				(BiConsumer<AccMediLabPhysicalResource, String>)
					AccMediLabPhysicalResource::setLaboratoryDocumented);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccMediLabPhysicalResource, Long>)
					AccMediLabPhysicalResource::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccMediLabPhysicalResourceId() {
		return _accMediLabPhysicalResourceId;
	}

	@Override
	public void setAccMediLabPhysicalResourceId(
		long accMediLabPhysicalResourceId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accMediLabPhysicalResourceId = accMediLabPhysicalResourceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLaboratoryfacilities() {
		if (_laboratoryfacilities == null) {
			return "";
		}
		else {
			return _laboratoryfacilities;
		}
	}

	@Override
	public void setLaboratoryfacilities(String laboratoryfacilities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_laboratoryfacilities = laboratoryfacilities;
	}

	@JSON
	@Override
	public String getSafetyFeatures() {
		if (_safetyFeatures == null) {
			return "";
		}
		else {
			return _safetyFeatures;
		}
	}

	@Override
	public void setSafetyFeatures(String safetyFeatures) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_safetyFeatures = safetyFeatures;
	}

	@JSON
	@Override
	public String getSpecialEnvironment() {
		if (_specialEnvironment == null) {
			return "";
		}
		else {
			return _specialEnvironment;
		}
	}

	@Override
	public void setSpecialEnvironment(String specialEnvironment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specialEnvironment = specialEnvironment;
	}

	@JSON
	@Override
	public String getMonitoringActivities() {
		if (_monitoringActivities == null) {
			return "";
		}
		else {
			return _monitoringActivities;
		}
	}

	@Override
	public void setMonitoringActivities(String monitoringActivities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monitoringActivities = monitoringActivities;
	}

	@JSON
	@Override
	public String getSecurityArrangements() {
		if (_securityArrangements == null) {
			return "";
		}
		else {
			return _securityArrangements;
		}
	}

	@Override
	public void setSecurityArrangements(String securityArrangements) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityArrangements = securityArrangements;
	}

	@JSON
	@Override
	public String getLaboratoryDocumented() {
		if (_laboratoryDocumented == null) {
			return "";
		}
		else {
			return _laboratoryDocumented;
		}
	}

	@Override
	public void setLaboratoryDocumented(String laboratoryDocumented) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_laboratoryDocumented = laboratoryDocumented;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				AccMediLabPhysicalResource.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccMediLabPhysicalResource.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccMediLabPhysicalResource toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccMediLabPhysicalResource>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccMediLabPhysicalResourceImpl accMediLabPhysicalResourceImpl =
			new AccMediLabPhysicalResourceImpl();

		accMediLabPhysicalResourceImpl.setUuid(getUuid());
		accMediLabPhysicalResourceImpl.setAccMediLabPhysicalResourceId(
			getAccMediLabPhysicalResourceId());
		accMediLabPhysicalResourceImpl.setGroupId(getGroupId());
		accMediLabPhysicalResourceImpl.setCompanyId(getCompanyId());
		accMediLabPhysicalResourceImpl.setUserId(getUserId());
		accMediLabPhysicalResourceImpl.setUserName(getUserName());
		accMediLabPhysicalResourceImpl.setCreateDate(getCreateDate());
		accMediLabPhysicalResourceImpl.setModifiedDate(getModifiedDate());
		accMediLabPhysicalResourceImpl.setLaboratoryfacilities(
			getLaboratoryfacilities());
		accMediLabPhysicalResourceImpl.setSafetyFeatures(getSafetyFeatures());
		accMediLabPhysicalResourceImpl.setSpecialEnvironment(
			getSpecialEnvironment());
		accMediLabPhysicalResourceImpl.setMonitoringActivities(
			getMonitoringActivities());
		accMediLabPhysicalResourceImpl.setSecurityArrangements(
			getSecurityArrangements());
		accMediLabPhysicalResourceImpl.setLaboratoryDocumented(
			getLaboratoryDocumented());
		accMediLabPhysicalResourceImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accMediLabPhysicalResourceImpl.resetOriginalValues();

		return accMediLabPhysicalResourceImpl;
	}

	@Override
	public AccMediLabPhysicalResource cloneWithOriginalValues() {
		AccMediLabPhysicalResourceImpl accMediLabPhysicalResourceImpl =
			new AccMediLabPhysicalResourceImpl();

		accMediLabPhysicalResourceImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accMediLabPhysicalResourceImpl.setAccMediLabPhysicalResourceId(
			this.<Long>getColumnOriginalValue("accMediLabPhysicalResourceId"));
		accMediLabPhysicalResourceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accMediLabPhysicalResourceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accMediLabPhysicalResourceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accMediLabPhysicalResourceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accMediLabPhysicalResourceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accMediLabPhysicalResourceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accMediLabPhysicalResourceImpl.setLaboratoryfacilities(
			this.<String>getColumnOriginalValue("laboratoryfacilities"));
		accMediLabPhysicalResourceImpl.setSafetyFeatures(
			this.<String>getColumnOriginalValue("safetyFeatures"));
		accMediLabPhysicalResourceImpl.setSpecialEnvironment(
			this.<String>getColumnOriginalValue("specialEnvironment"));
		accMediLabPhysicalResourceImpl.setMonitoringActivities(
			this.<String>getColumnOriginalValue("monitoringActivities"));
		accMediLabPhysicalResourceImpl.setSecurityArrangements(
			this.<String>getColumnOriginalValue("securityArrangements"));
		accMediLabPhysicalResourceImpl.setLaboratoryDocumented(
			this.<String>getColumnOriginalValue("laboratoryDocumented"));
		accMediLabPhysicalResourceImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accMediLabPhysicalResourceImpl;
	}

	@Override
	public int compareTo(
		AccMediLabPhysicalResource accMediLabPhysicalResource) {

		long primaryKey = accMediLabPhysicalResource.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccMediLabPhysicalResource)) {
			return false;
		}

		AccMediLabPhysicalResource accMediLabPhysicalResource =
			(AccMediLabPhysicalResource)object;

		long primaryKey = accMediLabPhysicalResource.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccMediLabPhysicalResource> toCacheModel() {
		AccMediLabPhysicalResourceCacheModel
			accMediLabPhysicalResourceCacheModel =
				new AccMediLabPhysicalResourceCacheModel();

		accMediLabPhysicalResourceCacheModel.uuid = getUuid();

		String uuid = accMediLabPhysicalResourceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accMediLabPhysicalResourceCacheModel.uuid = null;
		}

		accMediLabPhysicalResourceCacheModel.accMediLabPhysicalResourceId =
			getAccMediLabPhysicalResourceId();

		accMediLabPhysicalResourceCacheModel.groupId = getGroupId();

		accMediLabPhysicalResourceCacheModel.companyId = getCompanyId();

		accMediLabPhysicalResourceCacheModel.userId = getUserId();

		accMediLabPhysicalResourceCacheModel.userName = getUserName();

		String userName = accMediLabPhysicalResourceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accMediLabPhysicalResourceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accMediLabPhysicalResourceCacheModel.createDate =
				createDate.getTime();
		}
		else {
			accMediLabPhysicalResourceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accMediLabPhysicalResourceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accMediLabPhysicalResourceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accMediLabPhysicalResourceCacheModel.laboratoryfacilities =
			getLaboratoryfacilities();

		String laboratoryfacilities =
			accMediLabPhysicalResourceCacheModel.laboratoryfacilities;

		if ((laboratoryfacilities != null) &&
			(laboratoryfacilities.length() == 0)) {

			accMediLabPhysicalResourceCacheModel.laboratoryfacilities = null;
		}

		accMediLabPhysicalResourceCacheModel.safetyFeatures =
			getSafetyFeatures();

		String safetyFeatures =
			accMediLabPhysicalResourceCacheModel.safetyFeatures;

		if ((safetyFeatures != null) && (safetyFeatures.length() == 0)) {
			accMediLabPhysicalResourceCacheModel.safetyFeatures = null;
		}

		accMediLabPhysicalResourceCacheModel.specialEnvironment =
			getSpecialEnvironment();

		String specialEnvironment =
			accMediLabPhysicalResourceCacheModel.specialEnvironment;

		if ((specialEnvironment != null) &&
			(specialEnvironment.length() == 0)) {

			accMediLabPhysicalResourceCacheModel.specialEnvironment = null;
		}

		accMediLabPhysicalResourceCacheModel.monitoringActivities =
			getMonitoringActivities();

		String monitoringActivities =
			accMediLabPhysicalResourceCacheModel.monitoringActivities;

		if ((monitoringActivities != null) &&
			(monitoringActivities.length() == 0)) {

			accMediLabPhysicalResourceCacheModel.monitoringActivities = null;
		}

		accMediLabPhysicalResourceCacheModel.securityArrangements =
			getSecurityArrangements();

		String securityArrangements =
			accMediLabPhysicalResourceCacheModel.securityArrangements;

		if ((securityArrangements != null) &&
			(securityArrangements.length() == 0)) {

			accMediLabPhysicalResourceCacheModel.securityArrangements = null;
		}

		accMediLabPhysicalResourceCacheModel.laboratoryDocumented =
			getLaboratoryDocumented();

		String laboratoryDocumented =
			accMediLabPhysicalResourceCacheModel.laboratoryDocumented;

		if ((laboratoryDocumented != null) &&
			(laboratoryDocumented.length() == 0)) {

			accMediLabPhysicalResourceCacheModel.laboratoryDocumented = null;
		}

		accMediLabPhysicalResourceCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accMediLabPhysicalResourceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccMediLabPhysicalResource, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccMediLabPhysicalResource, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabPhysicalResource, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccMediLabPhysicalResource)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AccMediLabPhysicalResource>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AccMediLabPhysicalResource.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accMediLabPhysicalResourceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _laboratoryfacilities;
	private String _safetyFeatures;
	private String _specialEnvironment;
	private String _monitoringActivities;
	private String _securityArrangements;
	private String _laboratoryDocumented;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccMediLabPhysicalResource, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccMediLabPhysicalResource)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accMediLabPhysicalResourceId", _accMediLabPhysicalResourceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"laboratoryfacilities", _laboratoryfacilities);
		_columnOriginalValues.put("safetyFeatures", _safetyFeatures);
		_columnOriginalValues.put("specialEnvironment", _specialEnvironment);
		_columnOriginalValues.put(
			"monitoringActivities", _monitoringActivities);
		_columnOriginalValues.put(
			"securityArrangements", _securityArrangements);
		_columnOriginalValues.put(
			"laboratoryDocumented", _laboratoryDocumented);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accMediLabPhysicalResourceId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("laboratoryfacilities", 256L);

		columnBitmasks.put("safetyFeatures", 512L);

		columnBitmasks.put("specialEnvironment", 1024L);

		columnBitmasks.put("monitoringActivities", 2048L);

		columnBitmasks.put("securityArrangements", 4096L);

		columnBitmasks.put("laboratoryDocumented", 8192L);

		columnBitmasks.put("janaacApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccMediLabPhysicalResource _escapedModel;

}