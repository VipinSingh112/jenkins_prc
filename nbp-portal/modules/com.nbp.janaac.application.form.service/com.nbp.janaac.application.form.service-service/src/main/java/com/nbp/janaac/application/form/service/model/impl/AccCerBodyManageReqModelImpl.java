/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccCerBodyManageReq;
import com.nbp.janaac.application.form.service.model.AccCerBodyManageReqModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccCerBodyManageReq service. Represents a row in the &quot;nbp_janaac_acc_cer_manage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccCerBodyManageReqModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccCerBodyManageReqImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccCerBodyManageReqImpl
 * @generated
 */
@JSON(strict = true)
public class AccCerBodyManageReqModelImpl
	extends BaseModelImpl<AccCerBodyManageReq>
	implements AccCerBodyManageReqModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc cer body manage req model instance should use the <code>AccCerBodyManageReq</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_cer_manage";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accCerBodyManageReqId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"optionFollow", Types.VARCHAR}, {"impartialityPolicy", Types.VARCHAR},
		{"qMRefImpartiality", Types.VARCHAR}, {"riskAssessment", Types.VARCHAR},
		{"qMRefRisk", Types.VARCHAR}, {"orgStructure", Types.VARCHAR},
		{"qMRefOrgStruct", Types.VARCHAR}, {"termsOfReference", Types.VARCHAR},
		{"qMRefTerms", Types.VARCHAR}, {"processForControl", Types.VARCHAR},
		{"qMRefProcess", Types.VARCHAR}, {"criteriaReq", Types.VARCHAR},
		{"qMRefCriteria", Types.VARCHAR}, {"initialCompetence", Types.VARCHAR},
		{"qMRefInitial", Types.VARCHAR}, {"selectingTraining", Types.VARCHAR},
		{"qMRefSelecting", Types.VARCHAR},
		{"monitoringCompetence", Types.VARCHAR},
		{"qMRefMonitoring", Types.VARCHAR}, {"writtenAgreement", Types.VARCHAR},
		{"qMRefWritten", Types.VARCHAR}, {"descOfProcess", Types.VARCHAR},
		{"qMRefDescProcess", Types.VARCHAR},
		{"processForMonitor", Types.VARCHAR},
		{"qMRefMonitorProcess", Types.VARCHAR}, {"auditProcess", Types.VARCHAR},
		{"qMRefAuditProcess", Types.VARCHAR},
		{"processGranting", Types.VARCHAR}, {"qMRefGranting", Types.VARCHAR},
		{"managemntSys", Types.VARCHAR}, {"qMRefManagemnt", Types.VARCHAR},
		{"useOfCertification", Types.VARCHAR},
		{"qMRefUseOfCerti", Types.VARCHAR}, {"handlingReq", Types.VARCHAR},
		{"qMRefHandling", Types.VARCHAR},
		{"impartialityPolicies", Types.VARCHAR},
		{"qMRefImpartPolicy", Types.VARCHAR},
		{"provisionInform", Types.VARCHAR}, {"qMRefProvision", Types.VARCHAR},
		{"certificationDoc", Types.VARCHAR},
		{"qMRefCertification", Types.VARCHAR},
		{"rulesGoverning", Types.VARCHAR}, {"qMRefGoverning", Types.VARCHAR},
		{"enforcableArrangements", Types.VARCHAR},
		{"qMRefEnforcable", Types.VARCHAR},
		{"ensureConfidential", Types.VARCHAR},
		{"qMRefEnsureConfid", Types.VARCHAR},
		{"informingMechanism", Types.VARCHAR},
		{"qMRefInforming", Types.VARCHAR},
		{"applicationProcess", Types.VARCHAR},
		{"qMRefApplication", Types.VARCHAR},
		{"applicationReview", Types.VARCHAR}, {"qMRefReview", Types.VARCHAR},
		{"certificationCycle", Types.VARCHAR},
		{"qMRefCertiCycle", Types.VARCHAR}, {"auditTime", Types.VARCHAR},
		{"qMRefAuditTime", Types.VARCHAR}, {"samplingProgram", Types.VARCHAR},
		{"qMRefSampling", Types.VARCHAR}, {"auditPlanning", Types.VARCHAR},
		{"qMRefPlanning", Types.VARCHAR}, {"auditTeam", Types.VARCHAR},
		{"qMRefAuditTeam", Types.VARCHAR}, {"onSiteAudit", Types.VARCHAR},
		{"qMRefonSiteAudit", Types.VARCHAR}, {"auditReport", Types.VARCHAR},
		{"qMRefAuditReport", Types.VARCHAR},
		{"correctiveActions", Types.VARCHAR},
		{"qMRefCorrective", Types.VARCHAR},
		{"reviewPriorDecision", Types.VARCHAR},
		{"qMRefReviewPrior", Types.VARCHAR},
		{"transferCertification", Types.VARCHAR},
		{"qMRefTransfer", Types.VARCHAR}, {"suspensionPolicies", Types.VARCHAR},
		{"qMRefSuspension", Types.VARCHAR},
		{"suspensionProcedure", Types.VARCHAR},
		{"qMRefSuspensionProc", Types.VARCHAR},
		{"decisionOnAppeals", Types.VARCHAR}, {"qMRefDecision", Types.VARCHAR},
		{"handlingComplaints", Types.VARCHAR},
		{"qMRefComplaints", Types.VARCHAR},
		{"recordRetentionPolicy", Types.VARCHAR},
		{"qMRefRetentionPolicy", Types.VARCHAR},
		{"recordRetentionProc", Types.VARCHAR},
		{"qMRefRetentionProc", Types.VARCHAR},
		{"manageSysPolicies", Types.VARCHAR}, {"qMRefPolicies", Types.VARCHAR},
		{"manageSysObjective", Types.VARCHAR},
		{"qMRefObjective", Types.VARCHAR}, {"manageSysManual", Types.VARCHAR},
		{"qMRefManual", Types.VARCHAR}, {"docControlProcedure", Types.VARCHAR},
		{"qMRefDocControl", Types.VARCHAR}, {"recControlProc", Types.VARCHAR},
		{"qMRefRecControl", Types.VARCHAR}, {"managementReview", Types.VARCHAR},
		{"qMRefManagementRev", Types.VARCHAR},
		{"internalAudits", Types.VARCHAR}, {"qMRefInternal", Types.VARCHAR},
		{"identificationProc", Types.VARCHAR},
		{"qMRefIdentification", Types.VARCHAR}, {"qMSScopeB", Types.VARCHAR},
		{"qMRefQMSScopeB", Types.VARCHAR}, {"designDevB", Types.VARCHAR},
		{"qMRefDesignB", Types.VARCHAR},
		{"interestedPartyNeedsB", Types.VARCHAR},
		{"qMRefInterestedB", Types.VARCHAR},
		{"managementReviewB", Types.VARCHAR},
		{"qMRefmanagementReviewB", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accCerBodyManageReqId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("optionFollow", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("impartialityPolicy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefImpartiality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("riskAssessment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefRisk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgStructure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefOrgStruct", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("termsOfReference", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefTerms", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processForControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("criteriaReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCriteria", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("initialCompetence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefInitial", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("selectingTraining", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSelecting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("monitoringCompetence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefMonitoring", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("writtenAgreement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefWritten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descOfProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDescProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processForMonitor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefMonitorProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefAuditProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processGranting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefGranting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managemntSys", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefManagemnt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("useOfCertification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefUseOfCerti", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("handlingReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefHandling", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("impartialityPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefImpartPolicy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("provisionInform", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefProvision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificationDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCertification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rulesGoverning", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefGoverning", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("enforcableArrangements", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefEnforcable", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ensureConfidential", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefEnsureConfid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("informingMechanism", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefInforming", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefApplication", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificationCycle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCertiCycle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefAuditTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("samplingProgram", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSampling", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditPlanning", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPlanning", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditTeam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefAuditTeam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("onSiteAudit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefonSiteAudit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditReport", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefAuditReport", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("correctiveActions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCorrective", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reviewPriorDecision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefReviewPrior", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transferCertification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefTransfer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("suspensionPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSuspension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("suspensionProcedure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSuspensionProc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("decisionOnAppeals", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDecision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("handlingComplaints", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefComplaints", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordRetentionPolicy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefRetentionPolicy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordRetentionProc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefRetentionProc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manageSysPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manageSysObjective", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefObjective", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manageSysManual", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefManual", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docControlProcedure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDocControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recControlProc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefRecControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managementReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefManagementRev", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("internalAudits", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefInternal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("identificationProc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefIdentification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMSScopeB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefQMSScopeB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designDevB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDesignB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("interestedPartyNeedsB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefInterestedB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managementReviewB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefmanagementReviewB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_cer_manage (uuid_ VARCHAR(75) null,accCerBodyManageReqId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,optionFollow VARCHAR(75) null,impartialityPolicy VARCHAR(75) null,qMRefImpartiality VARCHAR(75) null,riskAssessment VARCHAR(75) null,qMRefRisk VARCHAR(75) null,orgStructure VARCHAR(75) null,qMRefOrgStruct VARCHAR(75) null,termsOfReference VARCHAR(75) null,qMRefTerms VARCHAR(75) null,processForControl VARCHAR(75) null,qMRefProcess VARCHAR(75) null,criteriaReq VARCHAR(75) null,qMRefCriteria VARCHAR(75) null,initialCompetence VARCHAR(75) null,qMRefInitial VARCHAR(75) null,selectingTraining VARCHAR(75) null,qMRefSelecting VARCHAR(75) null,monitoringCompetence VARCHAR(75) null,qMRefMonitoring VARCHAR(75) null,writtenAgreement VARCHAR(75) null,qMRefWritten VARCHAR(75) null,descOfProcess VARCHAR(75) null,qMRefDescProcess VARCHAR(75) null,processForMonitor VARCHAR(75) null,qMRefMonitorProcess VARCHAR(75) null,auditProcess VARCHAR(75) null,qMRefAuditProcess VARCHAR(75) null,processGranting VARCHAR(75) null,qMRefGranting VARCHAR(75) null,managemntSys VARCHAR(75) null,qMRefManagemnt VARCHAR(75) null,useOfCertification VARCHAR(75) null,qMRefUseOfCerti VARCHAR(75) null,handlingReq VARCHAR(75) null,qMRefHandling VARCHAR(75) null,impartialityPolicies VARCHAR(75) null,qMRefImpartPolicy VARCHAR(75) null,provisionInform VARCHAR(75) null,qMRefProvision VARCHAR(75) null,certificationDoc VARCHAR(75) null,qMRefCertification VARCHAR(75) null,rulesGoverning VARCHAR(75) null,qMRefGoverning VARCHAR(75) null,enforcableArrangements VARCHAR(75) null,qMRefEnforcable VARCHAR(75) null,ensureConfidential VARCHAR(75) null,qMRefEnsureConfid VARCHAR(75) null,informingMechanism VARCHAR(75) null,qMRefInforming VARCHAR(75) null,applicationProcess VARCHAR(75) null,qMRefApplication VARCHAR(75) null,applicationReview VARCHAR(75) null,qMRefReview VARCHAR(75) null,certificationCycle VARCHAR(75) null,qMRefCertiCycle VARCHAR(75) null,auditTime VARCHAR(75) null,qMRefAuditTime VARCHAR(75) null,samplingProgram VARCHAR(75) null,qMRefSampling VARCHAR(75) null,auditPlanning VARCHAR(75) null,qMRefPlanning VARCHAR(75) null,auditTeam VARCHAR(75) null,qMRefAuditTeam VARCHAR(75) null,onSiteAudit VARCHAR(75) null,qMRefonSiteAudit VARCHAR(75) null,auditReport VARCHAR(75) null,qMRefAuditReport VARCHAR(75) null,correctiveActions VARCHAR(75) null,qMRefCorrective VARCHAR(75) null,reviewPriorDecision VARCHAR(75) null,qMRefReviewPrior VARCHAR(75) null,transferCertification VARCHAR(75) null,qMRefTransfer VARCHAR(75) null,suspensionPolicies VARCHAR(75) null,qMRefSuspension VARCHAR(75) null,suspensionProcedure VARCHAR(75) null,qMRefSuspensionProc VARCHAR(75) null,decisionOnAppeals VARCHAR(75) null,qMRefDecision VARCHAR(75) null,handlingComplaints VARCHAR(75) null,qMRefComplaints VARCHAR(75) null,recordRetentionPolicy VARCHAR(75) null,qMRefRetentionPolicy VARCHAR(75) null,recordRetentionProc VARCHAR(75) null,qMRefRetentionProc VARCHAR(75) null,manageSysPolicies VARCHAR(75) null,qMRefPolicies VARCHAR(75) null,manageSysObjective VARCHAR(75) null,qMRefObjective VARCHAR(75) null,manageSysManual VARCHAR(75) null,qMRefManual VARCHAR(75) null,docControlProcedure VARCHAR(75) null,qMRefDocControl VARCHAR(75) null,recControlProc VARCHAR(75) null,qMRefRecControl VARCHAR(75) null,managementReview VARCHAR(75) null,qMRefManagementRev VARCHAR(75) null,internalAudits VARCHAR(75) null,qMRefInternal VARCHAR(75) null,identificationProc VARCHAR(75) null,qMRefIdentification VARCHAR(75) null,qMSScopeB VARCHAR(75) null,qMRefQMSScopeB VARCHAR(75) null,designDevB VARCHAR(75) null,qMRefDesignB VARCHAR(75) null,interestedPartyNeedsB VARCHAR(75) null,qMRefInterestedB VARCHAR(75) null,managementReviewB VARCHAR(75) null,qMRefmanagementReviewB VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_cer_manage";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accCerBodyManageReq.accCerBodyManageReqId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_cer_manage.accCerBodyManageReqId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccCerBodyManageReqModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accCerBodyManageReqId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccCerBodyManageReqId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accCerBodyManageReqId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccCerBodyManageReq.class;
	}

	@Override
	public String getModelClassName() {
		return AccCerBodyManageReq.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccCerBodyManageReq, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccCerBodyManageReq, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccCerBodyManageReq, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccCerBodyManageReq)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccCerBodyManageReq, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccCerBodyManageReq, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccCerBodyManageReq)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccCerBodyManageReq, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccCerBodyManageReq, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccCerBodyManageReq, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccCerBodyManageReq, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccCerBodyManageReq, Object>>();

			attributeGetterFunctions.put("uuid", AccCerBodyManageReq::getUuid);
			attributeGetterFunctions.put(
				"accCerBodyManageReqId",
				AccCerBodyManageReq::getAccCerBodyManageReqId);
			attributeGetterFunctions.put(
				"groupId", AccCerBodyManageReq::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccCerBodyManageReq::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccCerBodyManageReq::getUserId);
			attributeGetterFunctions.put(
				"userName", AccCerBodyManageReq::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccCerBodyManageReq::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccCerBodyManageReq::getModifiedDate);
			attributeGetterFunctions.put(
				"optionFollow", AccCerBodyManageReq::getOptionFollow);
			attributeGetterFunctions.put(
				"impartialityPolicy",
				AccCerBodyManageReq::getImpartialityPolicy);
			attributeGetterFunctions.put(
				"qMRefImpartiality", AccCerBodyManageReq::getQMRefImpartiality);
			attributeGetterFunctions.put(
				"riskAssessment", AccCerBodyManageReq::getRiskAssessment);
			attributeGetterFunctions.put(
				"qMRefRisk", AccCerBodyManageReq::getQMRefRisk);
			attributeGetterFunctions.put(
				"orgStructure", AccCerBodyManageReq::getOrgStructure);
			attributeGetterFunctions.put(
				"qMRefOrgStruct", AccCerBodyManageReq::getQMRefOrgStruct);
			attributeGetterFunctions.put(
				"termsOfReference", AccCerBodyManageReq::getTermsOfReference);
			attributeGetterFunctions.put(
				"qMRefTerms", AccCerBodyManageReq::getQMRefTerms);
			attributeGetterFunctions.put(
				"processForControl", AccCerBodyManageReq::getProcessForControl);
			attributeGetterFunctions.put(
				"qMRefProcess", AccCerBodyManageReq::getQMRefProcess);
			attributeGetterFunctions.put(
				"criteriaReq", AccCerBodyManageReq::getCriteriaReq);
			attributeGetterFunctions.put(
				"qMRefCriteria", AccCerBodyManageReq::getQMRefCriteria);
			attributeGetterFunctions.put(
				"initialCompetence", AccCerBodyManageReq::getInitialCompetence);
			attributeGetterFunctions.put(
				"qMRefInitial", AccCerBodyManageReq::getQMRefInitial);
			attributeGetterFunctions.put(
				"selectingTraining", AccCerBodyManageReq::getSelectingTraining);
			attributeGetterFunctions.put(
				"qMRefSelecting", AccCerBodyManageReq::getQMRefSelecting);
			attributeGetterFunctions.put(
				"monitoringCompetence",
				AccCerBodyManageReq::getMonitoringCompetence);
			attributeGetterFunctions.put(
				"qMRefMonitoring", AccCerBodyManageReq::getQMRefMonitoring);
			attributeGetterFunctions.put(
				"writtenAgreement", AccCerBodyManageReq::getWrittenAgreement);
			attributeGetterFunctions.put(
				"qMRefWritten", AccCerBodyManageReq::getQMRefWritten);
			attributeGetterFunctions.put(
				"descOfProcess", AccCerBodyManageReq::getDescOfProcess);
			attributeGetterFunctions.put(
				"qMRefDescProcess", AccCerBodyManageReq::getQMRefDescProcess);
			attributeGetterFunctions.put(
				"processForMonitor", AccCerBodyManageReq::getProcessForMonitor);
			attributeGetterFunctions.put(
				"qMRefMonitorProcess",
				AccCerBodyManageReq::getQMRefMonitorProcess);
			attributeGetterFunctions.put(
				"auditProcess", AccCerBodyManageReq::getAuditProcess);
			attributeGetterFunctions.put(
				"qMRefAuditProcess", AccCerBodyManageReq::getQMRefAuditProcess);
			attributeGetterFunctions.put(
				"processGranting", AccCerBodyManageReq::getProcessGranting);
			attributeGetterFunctions.put(
				"qMRefGranting", AccCerBodyManageReq::getQMRefGranting);
			attributeGetterFunctions.put(
				"managemntSys", AccCerBodyManageReq::getManagemntSys);
			attributeGetterFunctions.put(
				"qMRefManagemnt", AccCerBodyManageReq::getQMRefManagemnt);
			attributeGetterFunctions.put(
				"useOfCertification",
				AccCerBodyManageReq::getUseOfCertification);
			attributeGetterFunctions.put(
				"qMRefUseOfCerti", AccCerBodyManageReq::getQMRefUseOfCerti);
			attributeGetterFunctions.put(
				"handlingReq", AccCerBodyManageReq::getHandlingReq);
			attributeGetterFunctions.put(
				"qMRefHandling", AccCerBodyManageReq::getQMRefHandling);
			attributeGetterFunctions.put(
				"impartialityPolicies",
				AccCerBodyManageReq::getImpartialityPolicies);
			attributeGetterFunctions.put(
				"qMRefImpartPolicy", AccCerBodyManageReq::getQMRefImpartPolicy);
			attributeGetterFunctions.put(
				"provisionInform", AccCerBodyManageReq::getProvisionInform);
			attributeGetterFunctions.put(
				"qMRefProvision", AccCerBodyManageReq::getQMRefProvision);
			attributeGetterFunctions.put(
				"certificationDoc", AccCerBodyManageReq::getCertificationDoc);
			attributeGetterFunctions.put(
				"qMRefCertification",
				AccCerBodyManageReq::getQMRefCertification);
			attributeGetterFunctions.put(
				"rulesGoverning", AccCerBodyManageReq::getRulesGoverning);
			attributeGetterFunctions.put(
				"qMRefGoverning", AccCerBodyManageReq::getQMRefGoverning);
			attributeGetterFunctions.put(
				"enforcableArrangements",
				AccCerBodyManageReq::getEnforcableArrangements);
			attributeGetterFunctions.put(
				"qMRefEnforcable", AccCerBodyManageReq::getQMRefEnforcable);
			attributeGetterFunctions.put(
				"ensureConfidential",
				AccCerBodyManageReq::getEnsureConfidential);
			attributeGetterFunctions.put(
				"qMRefEnsureConfid", AccCerBodyManageReq::getQMRefEnsureConfid);
			attributeGetterFunctions.put(
				"informingMechanism",
				AccCerBodyManageReq::getInformingMechanism);
			attributeGetterFunctions.put(
				"qMRefInforming", AccCerBodyManageReq::getQMRefInforming);
			attributeGetterFunctions.put(
				"applicationProcess",
				AccCerBodyManageReq::getApplicationProcess);
			attributeGetterFunctions.put(
				"qMRefApplication", AccCerBodyManageReq::getQMRefApplication);
			attributeGetterFunctions.put(
				"applicationReview", AccCerBodyManageReq::getApplicationReview);
			attributeGetterFunctions.put(
				"qMRefReview", AccCerBodyManageReq::getQMRefReview);
			attributeGetterFunctions.put(
				"certificationCycle",
				AccCerBodyManageReq::getCertificationCycle);
			attributeGetterFunctions.put(
				"qMRefCertiCycle", AccCerBodyManageReq::getQMRefCertiCycle);
			attributeGetterFunctions.put(
				"auditTime", AccCerBodyManageReq::getAuditTime);
			attributeGetterFunctions.put(
				"qMRefAuditTime", AccCerBodyManageReq::getQMRefAuditTime);
			attributeGetterFunctions.put(
				"samplingProgram", AccCerBodyManageReq::getSamplingProgram);
			attributeGetterFunctions.put(
				"qMRefSampling", AccCerBodyManageReq::getQMRefSampling);
			attributeGetterFunctions.put(
				"auditPlanning", AccCerBodyManageReq::getAuditPlanning);
			attributeGetterFunctions.put(
				"qMRefPlanning", AccCerBodyManageReq::getQMRefPlanning);
			attributeGetterFunctions.put(
				"auditTeam", AccCerBodyManageReq::getAuditTeam);
			attributeGetterFunctions.put(
				"qMRefAuditTeam", AccCerBodyManageReq::getQMRefAuditTeam);
			attributeGetterFunctions.put(
				"onSiteAudit", AccCerBodyManageReq::getOnSiteAudit);
			attributeGetterFunctions.put(
				"qMRefonSiteAudit", AccCerBodyManageReq::getQMRefonSiteAudit);
			attributeGetterFunctions.put(
				"auditReport", AccCerBodyManageReq::getAuditReport);
			attributeGetterFunctions.put(
				"qMRefAuditReport", AccCerBodyManageReq::getQMRefAuditReport);
			attributeGetterFunctions.put(
				"correctiveActions", AccCerBodyManageReq::getCorrectiveActions);
			attributeGetterFunctions.put(
				"qMRefCorrective", AccCerBodyManageReq::getQMRefCorrective);
			attributeGetterFunctions.put(
				"reviewPriorDecision",
				AccCerBodyManageReq::getReviewPriorDecision);
			attributeGetterFunctions.put(
				"qMRefReviewPrior", AccCerBodyManageReq::getQMRefReviewPrior);
			attributeGetterFunctions.put(
				"transferCertification",
				AccCerBodyManageReq::getTransferCertification);
			attributeGetterFunctions.put(
				"qMRefTransfer", AccCerBodyManageReq::getQMRefTransfer);
			attributeGetterFunctions.put(
				"suspensionPolicies",
				AccCerBodyManageReq::getSuspensionPolicies);
			attributeGetterFunctions.put(
				"qMRefSuspension", AccCerBodyManageReq::getQMRefSuspension);
			attributeGetterFunctions.put(
				"suspensionProcedure",
				AccCerBodyManageReq::getSuspensionProcedure);
			attributeGetterFunctions.put(
				"qMRefSuspensionProc",
				AccCerBodyManageReq::getQMRefSuspensionProc);
			attributeGetterFunctions.put(
				"decisionOnAppeals", AccCerBodyManageReq::getDecisionOnAppeals);
			attributeGetterFunctions.put(
				"qMRefDecision", AccCerBodyManageReq::getQMRefDecision);
			attributeGetterFunctions.put(
				"handlingComplaints",
				AccCerBodyManageReq::getHandlingComplaints);
			attributeGetterFunctions.put(
				"qMRefComplaints", AccCerBodyManageReq::getQMRefComplaints);
			attributeGetterFunctions.put(
				"recordRetentionPolicy",
				AccCerBodyManageReq::getRecordRetentionPolicy);
			attributeGetterFunctions.put(
				"qMRefRetentionPolicy",
				AccCerBodyManageReq::getQMRefRetentionPolicy);
			attributeGetterFunctions.put(
				"recordRetentionProc",
				AccCerBodyManageReq::getRecordRetentionProc);
			attributeGetterFunctions.put(
				"qMRefRetentionProc",
				AccCerBodyManageReq::getQMRefRetentionProc);
			attributeGetterFunctions.put(
				"manageSysPolicies", AccCerBodyManageReq::getManageSysPolicies);
			attributeGetterFunctions.put(
				"qMRefPolicies", AccCerBodyManageReq::getQMRefPolicies);
			attributeGetterFunctions.put(
				"manageSysObjective",
				AccCerBodyManageReq::getManageSysObjective);
			attributeGetterFunctions.put(
				"qMRefObjective", AccCerBodyManageReq::getQMRefObjective);
			attributeGetterFunctions.put(
				"manageSysManual", AccCerBodyManageReq::getManageSysManual);
			attributeGetterFunctions.put(
				"qMRefManual", AccCerBodyManageReq::getQMRefManual);
			attributeGetterFunctions.put(
				"docControlProcedure",
				AccCerBodyManageReq::getDocControlProcedure);
			attributeGetterFunctions.put(
				"qMRefDocControl", AccCerBodyManageReq::getQMRefDocControl);
			attributeGetterFunctions.put(
				"recControlProc", AccCerBodyManageReq::getRecControlProc);
			attributeGetterFunctions.put(
				"qMRefRecControl", AccCerBodyManageReq::getQMRefRecControl);
			attributeGetterFunctions.put(
				"managementReview", AccCerBodyManageReq::getManagementReview);
			attributeGetterFunctions.put(
				"qMRefManagementRev",
				AccCerBodyManageReq::getQMRefManagementRev);
			attributeGetterFunctions.put(
				"internalAudits", AccCerBodyManageReq::getInternalAudits);
			attributeGetterFunctions.put(
				"qMRefInternal", AccCerBodyManageReq::getQMRefInternal);
			attributeGetterFunctions.put(
				"identificationProc",
				AccCerBodyManageReq::getIdentificationProc);
			attributeGetterFunctions.put(
				"qMRefIdentification",
				AccCerBodyManageReq::getQMRefIdentification);
			attributeGetterFunctions.put(
				"qMSScopeB", AccCerBodyManageReq::getQMSScopeB);
			attributeGetterFunctions.put(
				"qMRefQMSScopeB", AccCerBodyManageReq::getQMRefQMSScopeB);
			attributeGetterFunctions.put(
				"designDevB", AccCerBodyManageReq::getDesignDevB);
			attributeGetterFunctions.put(
				"qMRefDesignB", AccCerBodyManageReq::getQMRefDesignB);
			attributeGetterFunctions.put(
				"interestedPartyNeedsB",
				AccCerBodyManageReq::getInterestedPartyNeedsB);
			attributeGetterFunctions.put(
				"qMRefInterestedB", AccCerBodyManageReq::getQMRefInterestedB);
			attributeGetterFunctions.put(
				"managementReviewB", AccCerBodyManageReq::getManagementReviewB);
			attributeGetterFunctions.put(
				"qMRefmanagementReviewB",
				AccCerBodyManageReq::getQMRefmanagementReviewB);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccCerBodyManageReq::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccCerBodyManageReq, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccCerBodyManageReq, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccCerBodyManageReq, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setUuid);
			attributeSetterBiConsumers.put(
				"accCerBodyManageReqId",
				(BiConsumer<AccCerBodyManageReq, Long>)
					AccCerBodyManageReq::setAccCerBodyManageReqId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccCerBodyManageReq, Long>)
					AccCerBodyManageReq::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccCerBodyManageReq, Long>)
					AccCerBodyManageReq::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccCerBodyManageReq, Long>)
					AccCerBodyManageReq::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccCerBodyManageReq, Date>)
					AccCerBodyManageReq::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccCerBodyManageReq, Date>)
					AccCerBodyManageReq::setModifiedDate);
			attributeSetterBiConsumers.put(
				"optionFollow",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setOptionFollow);
			attributeSetterBiConsumers.put(
				"impartialityPolicy",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setImpartialityPolicy);
			attributeSetterBiConsumers.put(
				"qMRefImpartiality",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefImpartiality);
			attributeSetterBiConsumers.put(
				"riskAssessment",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setRiskAssessment);
			attributeSetterBiConsumers.put(
				"qMRefRisk",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefRisk);
			attributeSetterBiConsumers.put(
				"orgStructure",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setOrgStructure);
			attributeSetterBiConsumers.put(
				"qMRefOrgStruct",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefOrgStruct);
			attributeSetterBiConsumers.put(
				"termsOfReference",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setTermsOfReference);
			attributeSetterBiConsumers.put(
				"qMRefTerms",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefTerms);
			attributeSetterBiConsumers.put(
				"processForControl",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setProcessForControl);
			attributeSetterBiConsumers.put(
				"qMRefProcess",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefProcess);
			attributeSetterBiConsumers.put(
				"criteriaReq",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setCriteriaReq);
			attributeSetterBiConsumers.put(
				"qMRefCriteria",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefCriteria);
			attributeSetterBiConsumers.put(
				"initialCompetence",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setInitialCompetence);
			attributeSetterBiConsumers.put(
				"qMRefInitial",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefInitial);
			attributeSetterBiConsumers.put(
				"selectingTraining",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setSelectingTraining);
			attributeSetterBiConsumers.put(
				"qMRefSelecting",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefSelecting);
			attributeSetterBiConsumers.put(
				"monitoringCompetence",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setMonitoringCompetence);
			attributeSetterBiConsumers.put(
				"qMRefMonitoring",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefMonitoring);
			attributeSetterBiConsumers.put(
				"writtenAgreement",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setWrittenAgreement);
			attributeSetterBiConsumers.put(
				"qMRefWritten",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefWritten);
			attributeSetterBiConsumers.put(
				"descOfProcess",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setDescOfProcess);
			attributeSetterBiConsumers.put(
				"qMRefDescProcess",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefDescProcess);
			attributeSetterBiConsumers.put(
				"processForMonitor",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setProcessForMonitor);
			attributeSetterBiConsumers.put(
				"qMRefMonitorProcess",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefMonitorProcess);
			attributeSetterBiConsumers.put(
				"auditProcess",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setAuditProcess);
			attributeSetterBiConsumers.put(
				"qMRefAuditProcess",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefAuditProcess);
			attributeSetterBiConsumers.put(
				"processGranting",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setProcessGranting);
			attributeSetterBiConsumers.put(
				"qMRefGranting",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefGranting);
			attributeSetterBiConsumers.put(
				"managemntSys",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setManagemntSys);
			attributeSetterBiConsumers.put(
				"qMRefManagemnt",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefManagemnt);
			attributeSetterBiConsumers.put(
				"useOfCertification",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setUseOfCertification);
			attributeSetterBiConsumers.put(
				"qMRefUseOfCerti",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefUseOfCerti);
			attributeSetterBiConsumers.put(
				"handlingReq",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setHandlingReq);
			attributeSetterBiConsumers.put(
				"qMRefHandling",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefHandling);
			attributeSetterBiConsumers.put(
				"impartialityPolicies",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setImpartialityPolicies);
			attributeSetterBiConsumers.put(
				"qMRefImpartPolicy",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefImpartPolicy);
			attributeSetterBiConsumers.put(
				"provisionInform",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setProvisionInform);
			attributeSetterBiConsumers.put(
				"qMRefProvision",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefProvision);
			attributeSetterBiConsumers.put(
				"certificationDoc",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setCertificationDoc);
			attributeSetterBiConsumers.put(
				"qMRefCertification",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefCertification);
			attributeSetterBiConsumers.put(
				"rulesGoverning",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setRulesGoverning);
			attributeSetterBiConsumers.put(
				"qMRefGoverning",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefGoverning);
			attributeSetterBiConsumers.put(
				"enforcableArrangements",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setEnforcableArrangements);
			attributeSetterBiConsumers.put(
				"qMRefEnforcable",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefEnforcable);
			attributeSetterBiConsumers.put(
				"ensureConfidential",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setEnsureConfidential);
			attributeSetterBiConsumers.put(
				"qMRefEnsureConfid",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefEnsureConfid);
			attributeSetterBiConsumers.put(
				"informingMechanism",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setInformingMechanism);
			attributeSetterBiConsumers.put(
				"qMRefInforming",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefInforming);
			attributeSetterBiConsumers.put(
				"applicationProcess",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setApplicationProcess);
			attributeSetterBiConsumers.put(
				"qMRefApplication",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefApplication);
			attributeSetterBiConsumers.put(
				"applicationReview",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setApplicationReview);
			attributeSetterBiConsumers.put(
				"qMRefReview",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefReview);
			attributeSetterBiConsumers.put(
				"certificationCycle",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setCertificationCycle);
			attributeSetterBiConsumers.put(
				"qMRefCertiCycle",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefCertiCycle);
			attributeSetterBiConsumers.put(
				"auditTime",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setAuditTime);
			attributeSetterBiConsumers.put(
				"qMRefAuditTime",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefAuditTime);
			attributeSetterBiConsumers.put(
				"samplingProgram",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setSamplingProgram);
			attributeSetterBiConsumers.put(
				"qMRefSampling",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefSampling);
			attributeSetterBiConsumers.put(
				"auditPlanning",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setAuditPlanning);
			attributeSetterBiConsumers.put(
				"qMRefPlanning",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefPlanning);
			attributeSetterBiConsumers.put(
				"auditTeam",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setAuditTeam);
			attributeSetterBiConsumers.put(
				"qMRefAuditTeam",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefAuditTeam);
			attributeSetterBiConsumers.put(
				"onSiteAudit",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setOnSiteAudit);
			attributeSetterBiConsumers.put(
				"qMRefonSiteAudit",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefonSiteAudit);
			attributeSetterBiConsumers.put(
				"auditReport",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setAuditReport);
			attributeSetterBiConsumers.put(
				"qMRefAuditReport",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefAuditReport);
			attributeSetterBiConsumers.put(
				"correctiveActions",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setCorrectiveActions);
			attributeSetterBiConsumers.put(
				"qMRefCorrective",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefCorrective);
			attributeSetterBiConsumers.put(
				"reviewPriorDecision",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setReviewPriorDecision);
			attributeSetterBiConsumers.put(
				"qMRefReviewPrior",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefReviewPrior);
			attributeSetterBiConsumers.put(
				"transferCertification",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setTransferCertification);
			attributeSetterBiConsumers.put(
				"qMRefTransfer",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefTransfer);
			attributeSetterBiConsumers.put(
				"suspensionPolicies",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setSuspensionPolicies);
			attributeSetterBiConsumers.put(
				"qMRefSuspension",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefSuspension);
			attributeSetterBiConsumers.put(
				"suspensionProcedure",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setSuspensionProcedure);
			attributeSetterBiConsumers.put(
				"qMRefSuspensionProc",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefSuspensionProc);
			attributeSetterBiConsumers.put(
				"decisionOnAppeals",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setDecisionOnAppeals);
			attributeSetterBiConsumers.put(
				"qMRefDecision",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefDecision);
			attributeSetterBiConsumers.put(
				"handlingComplaints",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setHandlingComplaints);
			attributeSetterBiConsumers.put(
				"qMRefComplaints",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefComplaints);
			attributeSetterBiConsumers.put(
				"recordRetentionPolicy",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setRecordRetentionPolicy);
			attributeSetterBiConsumers.put(
				"qMRefRetentionPolicy",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefRetentionPolicy);
			attributeSetterBiConsumers.put(
				"recordRetentionProc",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setRecordRetentionProc);
			attributeSetterBiConsumers.put(
				"qMRefRetentionProc",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefRetentionProc);
			attributeSetterBiConsumers.put(
				"manageSysPolicies",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setManageSysPolicies);
			attributeSetterBiConsumers.put(
				"qMRefPolicies",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefPolicies);
			attributeSetterBiConsumers.put(
				"manageSysObjective",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setManageSysObjective);
			attributeSetterBiConsumers.put(
				"qMRefObjective",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefObjective);
			attributeSetterBiConsumers.put(
				"manageSysManual",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setManageSysManual);
			attributeSetterBiConsumers.put(
				"qMRefManual",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefManual);
			attributeSetterBiConsumers.put(
				"docControlProcedure",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setDocControlProcedure);
			attributeSetterBiConsumers.put(
				"qMRefDocControl",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefDocControl);
			attributeSetterBiConsumers.put(
				"recControlProc",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setRecControlProc);
			attributeSetterBiConsumers.put(
				"qMRefRecControl",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefRecControl);
			attributeSetterBiConsumers.put(
				"managementReview",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setManagementReview);
			attributeSetterBiConsumers.put(
				"qMRefManagementRev",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefManagementRev);
			attributeSetterBiConsumers.put(
				"internalAudits",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setInternalAudits);
			attributeSetterBiConsumers.put(
				"qMRefInternal",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefInternal);
			attributeSetterBiConsumers.put(
				"identificationProc",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setIdentificationProc);
			attributeSetterBiConsumers.put(
				"qMRefIdentification",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefIdentification);
			attributeSetterBiConsumers.put(
				"qMSScopeB",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMSScopeB);
			attributeSetterBiConsumers.put(
				"qMRefQMSScopeB",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefQMSScopeB);
			attributeSetterBiConsumers.put(
				"designDevB",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setDesignDevB);
			attributeSetterBiConsumers.put(
				"qMRefDesignB",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefDesignB);
			attributeSetterBiConsumers.put(
				"interestedPartyNeedsB",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setInterestedPartyNeedsB);
			attributeSetterBiConsumers.put(
				"qMRefInterestedB",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefInterestedB);
			attributeSetterBiConsumers.put(
				"managementReviewB",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setManagementReviewB);
			attributeSetterBiConsumers.put(
				"qMRefmanagementReviewB",
				(BiConsumer<AccCerBodyManageReq, String>)
					AccCerBodyManageReq::setQMRefmanagementReviewB);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccCerBodyManageReq, Long>)
					AccCerBodyManageReq::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccCerBodyManageReqId() {
		return _accCerBodyManageReqId;
	}

	@Override
	public void setAccCerBodyManageReqId(long accCerBodyManageReqId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accCerBodyManageReqId = accCerBodyManageReqId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOptionFollow() {
		if (_optionFollow == null) {
			return "";
		}
		else {
			return _optionFollow;
		}
	}

	@Override
	public void setOptionFollow(String optionFollow) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_optionFollow = optionFollow;
	}

	@JSON
	@Override
	public String getImpartialityPolicy() {
		if (_impartialityPolicy == null) {
			return "";
		}
		else {
			return _impartialityPolicy;
		}
	}

	@Override
	public void setImpartialityPolicy(String impartialityPolicy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_impartialityPolicy = impartialityPolicy;
	}

	@JSON
	@Override
	public String getQMRefImpartiality() {
		if (_qMRefImpartiality == null) {
			return "";
		}
		else {
			return _qMRefImpartiality;
		}
	}

	@Override
	public void setQMRefImpartiality(String qMRefImpartiality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefImpartiality = qMRefImpartiality;
	}

	@JSON
	@Override
	public String getRiskAssessment() {
		if (_riskAssessment == null) {
			return "";
		}
		else {
			return _riskAssessment;
		}
	}

	@Override
	public void setRiskAssessment(String riskAssessment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_riskAssessment = riskAssessment;
	}

	@JSON
	@Override
	public String getQMRefRisk() {
		if (_qMRefRisk == null) {
			return "";
		}
		else {
			return _qMRefRisk;
		}
	}

	@Override
	public void setQMRefRisk(String qMRefRisk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefRisk = qMRefRisk;
	}

	@JSON
	@Override
	public String getOrgStructure() {
		if (_orgStructure == null) {
			return "";
		}
		else {
			return _orgStructure;
		}
	}

	@Override
	public void setOrgStructure(String orgStructure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgStructure = orgStructure;
	}

	@JSON
	@Override
	public String getQMRefOrgStruct() {
		if (_qMRefOrgStruct == null) {
			return "";
		}
		else {
			return _qMRefOrgStruct;
		}
	}

	@Override
	public void setQMRefOrgStruct(String qMRefOrgStruct) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefOrgStruct = qMRefOrgStruct;
	}

	@JSON
	@Override
	public String getTermsOfReference() {
		if (_termsOfReference == null) {
			return "";
		}
		else {
			return _termsOfReference;
		}
	}

	@Override
	public void setTermsOfReference(String termsOfReference) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_termsOfReference = termsOfReference;
	}

	@JSON
	@Override
	public String getQMRefTerms() {
		if (_qMRefTerms == null) {
			return "";
		}
		else {
			return _qMRefTerms;
		}
	}

	@Override
	public void setQMRefTerms(String qMRefTerms) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefTerms = qMRefTerms;
	}

	@JSON
	@Override
	public String getProcessForControl() {
		if (_processForControl == null) {
			return "";
		}
		else {
			return _processForControl;
		}
	}

	@Override
	public void setProcessForControl(String processForControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processForControl = processForControl;
	}

	@JSON
	@Override
	public String getQMRefProcess() {
		if (_qMRefProcess == null) {
			return "";
		}
		else {
			return _qMRefProcess;
		}
	}

	@Override
	public void setQMRefProcess(String qMRefProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefProcess = qMRefProcess;
	}

	@JSON
	@Override
	public String getCriteriaReq() {
		if (_criteriaReq == null) {
			return "";
		}
		else {
			return _criteriaReq;
		}
	}

	@Override
	public void setCriteriaReq(String criteriaReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_criteriaReq = criteriaReq;
	}

	@JSON
	@Override
	public String getQMRefCriteria() {
		if (_qMRefCriteria == null) {
			return "";
		}
		else {
			return _qMRefCriteria;
		}
	}

	@Override
	public void setQMRefCriteria(String qMRefCriteria) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCriteria = qMRefCriteria;
	}

	@JSON
	@Override
	public String getInitialCompetence() {
		if (_initialCompetence == null) {
			return "";
		}
		else {
			return _initialCompetence;
		}
	}

	@Override
	public void setInitialCompetence(String initialCompetence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_initialCompetence = initialCompetence;
	}

	@JSON
	@Override
	public String getQMRefInitial() {
		if (_qMRefInitial == null) {
			return "";
		}
		else {
			return _qMRefInitial;
		}
	}

	@Override
	public void setQMRefInitial(String qMRefInitial) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefInitial = qMRefInitial;
	}

	@JSON
	@Override
	public String getSelectingTraining() {
		if (_selectingTraining == null) {
			return "";
		}
		else {
			return _selectingTraining;
		}
	}

	@Override
	public void setSelectingTraining(String selectingTraining) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_selectingTraining = selectingTraining;
	}

	@JSON
	@Override
	public String getQMRefSelecting() {
		if (_qMRefSelecting == null) {
			return "";
		}
		else {
			return _qMRefSelecting;
		}
	}

	@Override
	public void setQMRefSelecting(String qMRefSelecting) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSelecting = qMRefSelecting;
	}

	@JSON
	@Override
	public String getMonitoringCompetence() {
		if (_monitoringCompetence == null) {
			return "";
		}
		else {
			return _monitoringCompetence;
		}
	}

	@Override
	public void setMonitoringCompetence(String monitoringCompetence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monitoringCompetence = monitoringCompetence;
	}

	@JSON
	@Override
	public String getQMRefMonitoring() {
		if (_qMRefMonitoring == null) {
			return "";
		}
		else {
			return _qMRefMonitoring;
		}
	}

	@Override
	public void setQMRefMonitoring(String qMRefMonitoring) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefMonitoring = qMRefMonitoring;
	}

	@JSON
	@Override
	public String getWrittenAgreement() {
		if (_writtenAgreement == null) {
			return "";
		}
		else {
			return _writtenAgreement;
		}
	}

	@Override
	public void setWrittenAgreement(String writtenAgreement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_writtenAgreement = writtenAgreement;
	}

	@JSON
	@Override
	public String getQMRefWritten() {
		if (_qMRefWritten == null) {
			return "";
		}
		else {
			return _qMRefWritten;
		}
	}

	@Override
	public void setQMRefWritten(String qMRefWritten) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefWritten = qMRefWritten;
	}

	@JSON
	@Override
	public String getDescOfProcess() {
		if (_descOfProcess == null) {
			return "";
		}
		else {
			return _descOfProcess;
		}
	}

	@Override
	public void setDescOfProcess(String descOfProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descOfProcess = descOfProcess;
	}

	@JSON
	@Override
	public String getQMRefDescProcess() {
		if (_qMRefDescProcess == null) {
			return "";
		}
		else {
			return _qMRefDescProcess;
		}
	}

	@Override
	public void setQMRefDescProcess(String qMRefDescProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDescProcess = qMRefDescProcess;
	}

	@JSON
	@Override
	public String getProcessForMonitor() {
		if (_processForMonitor == null) {
			return "";
		}
		else {
			return _processForMonitor;
		}
	}

	@Override
	public void setProcessForMonitor(String processForMonitor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processForMonitor = processForMonitor;
	}

	@JSON
	@Override
	public String getQMRefMonitorProcess() {
		if (_qMRefMonitorProcess == null) {
			return "";
		}
		else {
			return _qMRefMonitorProcess;
		}
	}

	@Override
	public void setQMRefMonitorProcess(String qMRefMonitorProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefMonitorProcess = qMRefMonitorProcess;
	}

	@JSON
	@Override
	public String getAuditProcess() {
		if (_auditProcess == null) {
			return "";
		}
		else {
			return _auditProcess;
		}
	}

	@Override
	public void setAuditProcess(String auditProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditProcess = auditProcess;
	}

	@JSON
	@Override
	public String getQMRefAuditProcess() {
		if (_qMRefAuditProcess == null) {
			return "";
		}
		else {
			return _qMRefAuditProcess;
		}
	}

	@Override
	public void setQMRefAuditProcess(String qMRefAuditProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefAuditProcess = qMRefAuditProcess;
	}

	@JSON
	@Override
	public String getProcessGranting() {
		if (_processGranting == null) {
			return "";
		}
		else {
			return _processGranting;
		}
	}

	@Override
	public void setProcessGranting(String processGranting) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processGranting = processGranting;
	}

	@JSON
	@Override
	public String getQMRefGranting() {
		if (_qMRefGranting == null) {
			return "";
		}
		else {
			return _qMRefGranting;
		}
	}

	@Override
	public void setQMRefGranting(String qMRefGranting) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefGranting = qMRefGranting;
	}

	@JSON
	@Override
	public String getManagemntSys() {
		if (_managemntSys == null) {
			return "";
		}
		else {
			return _managemntSys;
		}
	}

	@Override
	public void setManagemntSys(String managemntSys) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managemntSys = managemntSys;
	}

	@JSON
	@Override
	public String getQMRefManagemnt() {
		if (_qMRefManagemnt == null) {
			return "";
		}
		else {
			return _qMRefManagemnt;
		}
	}

	@Override
	public void setQMRefManagemnt(String qMRefManagemnt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefManagemnt = qMRefManagemnt;
	}

	@JSON
	@Override
	public String getUseOfCertification() {
		if (_useOfCertification == null) {
			return "";
		}
		else {
			return _useOfCertification;
		}
	}

	@Override
	public void setUseOfCertification(String useOfCertification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_useOfCertification = useOfCertification;
	}

	@JSON
	@Override
	public String getQMRefUseOfCerti() {
		if (_qMRefUseOfCerti == null) {
			return "";
		}
		else {
			return _qMRefUseOfCerti;
		}
	}

	@Override
	public void setQMRefUseOfCerti(String qMRefUseOfCerti) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefUseOfCerti = qMRefUseOfCerti;
	}

	@JSON
	@Override
	public String getHandlingReq() {
		if (_handlingReq == null) {
			return "";
		}
		else {
			return _handlingReq;
		}
	}

	@Override
	public void setHandlingReq(String handlingReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_handlingReq = handlingReq;
	}

	@JSON
	@Override
	public String getQMRefHandling() {
		if (_qMRefHandling == null) {
			return "";
		}
		else {
			return _qMRefHandling;
		}
	}

	@Override
	public void setQMRefHandling(String qMRefHandling) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefHandling = qMRefHandling;
	}

	@JSON
	@Override
	public String getImpartialityPolicies() {
		if (_impartialityPolicies == null) {
			return "";
		}
		else {
			return _impartialityPolicies;
		}
	}

	@Override
	public void setImpartialityPolicies(String impartialityPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_impartialityPolicies = impartialityPolicies;
	}

	@JSON
	@Override
	public String getQMRefImpartPolicy() {
		if (_qMRefImpartPolicy == null) {
			return "";
		}
		else {
			return _qMRefImpartPolicy;
		}
	}

	@Override
	public void setQMRefImpartPolicy(String qMRefImpartPolicy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefImpartPolicy = qMRefImpartPolicy;
	}

	@JSON
	@Override
	public String getProvisionInform() {
		if (_provisionInform == null) {
			return "";
		}
		else {
			return _provisionInform;
		}
	}

	@Override
	public void setProvisionInform(String provisionInform) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_provisionInform = provisionInform;
	}

	@JSON
	@Override
	public String getQMRefProvision() {
		if (_qMRefProvision == null) {
			return "";
		}
		else {
			return _qMRefProvision;
		}
	}

	@Override
	public void setQMRefProvision(String qMRefProvision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefProvision = qMRefProvision;
	}

	@JSON
	@Override
	public String getCertificationDoc() {
		if (_certificationDoc == null) {
			return "";
		}
		else {
			return _certificationDoc;
		}
	}

	@Override
	public void setCertificationDoc(String certificationDoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificationDoc = certificationDoc;
	}

	@JSON
	@Override
	public String getQMRefCertification() {
		if (_qMRefCertification == null) {
			return "";
		}
		else {
			return _qMRefCertification;
		}
	}

	@Override
	public void setQMRefCertification(String qMRefCertification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCertification = qMRefCertification;
	}

	@JSON
	@Override
	public String getRulesGoverning() {
		if (_rulesGoverning == null) {
			return "";
		}
		else {
			return _rulesGoverning;
		}
	}

	@Override
	public void setRulesGoverning(String rulesGoverning) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rulesGoverning = rulesGoverning;
	}

	@JSON
	@Override
	public String getQMRefGoverning() {
		if (_qMRefGoverning == null) {
			return "";
		}
		else {
			return _qMRefGoverning;
		}
	}

	@Override
	public void setQMRefGoverning(String qMRefGoverning) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefGoverning = qMRefGoverning;
	}

	@JSON
	@Override
	public String getEnforcableArrangements() {
		if (_enforcableArrangements == null) {
			return "";
		}
		else {
			return _enforcableArrangements;
		}
	}

	@Override
	public void setEnforcableArrangements(String enforcableArrangements) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enforcableArrangements = enforcableArrangements;
	}

	@JSON
	@Override
	public String getQMRefEnforcable() {
		if (_qMRefEnforcable == null) {
			return "";
		}
		else {
			return _qMRefEnforcable;
		}
	}

	@Override
	public void setQMRefEnforcable(String qMRefEnforcable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefEnforcable = qMRefEnforcable;
	}

	@JSON
	@Override
	public String getEnsureConfidential() {
		if (_ensureConfidential == null) {
			return "";
		}
		else {
			return _ensureConfidential;
		}
	}

	@Override
	public void setEnsureConfidential(String ensureConfidential) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ensureConfidential = ensureConfidential;
	}

	@JSON
	@Override
	public String getQMRefEnsureConfid() {
		if (_qMRefEnsureConfid == null) {
			return "";
		}
		else {
			return _qMRefEnsureConfid;
		}
	}

	@Override
	public void setQMRefEnsureConfid(String qMRefEnsureConfid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefEnsureConfid = qMRefEnsureConfid;
	}

	@JSON
	@Override
	public String getInformingMechanism() {
		if (_informingMechanism == null) {
			return "";
		}
		else {
			return _informingMechanism;
		}
	}

	@Override
	public void setInformingMechanism(String informingMechanism) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_informingMechanism = informingMechanism;
	}

	@JSON
	@Override
	public String getQMRefInforming() {
		if (_qMRefInforming == null) {
			return "";
		}
		else {
			return _qMRefInforming;
		}
	}

	@Override
	public void setQMRefInforming(String qMRefInforming) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefInforming = qMRefInforming;
	}

	@JSON
	@Override
	public String getApplicationProcess() {
		if (_applicationProcess == null) {
			return "";
		}
		else {
			return _applicationProcess;
		}
	}

	@Override
	public void setApplicationProcess(String applicationProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationProcess = applicationProcess;
	}

	@JSON
	@Override
	public String getQMRefApplication() {
		if (_qMRefApplication == null) {
			return "";
		}
		else {
			return _qMRefApplication;
		}
	}

	@Override
	public void setQMRefApplication(String qMRefApplication) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefApplication = qMRefApplication;
	}

	@JSON
	@Override
	public String getApplicationReview() {
		if (_applicationReview == null) {
			return "";
		}
		else {
			return _applicationReview;
		}
	}

	@Override
	public void setApplicationReview(String applicationReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationReview = applicationReview;
	}

	@JSON
	@Override
	public String getQMRefReview() {
		if (_qMRefReview == null) {
			return "";
		}
		else {
			return _qMRefReview;
		}
	}

	@Override
	public void setQMRefReview(String qMRefReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefReview = qMRefReview;
	}

	@JSON
	@Override
	public String getCertificationCycle() {
		if (_certificationCycle == null) {
			return "";
		}
		else {
			return _certificationCycle;
		}
	}

	@Override
	public void setCertificationCycle(String certificationCycle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificationCycle = certificationCycle;
	}

	@JSON
	@Override
	public String getQMRefCertiCycle() {
		if (_qMRefCertiCycle == null) {
			return "";
		}
		else {
			return _qMRefCertiCycle;
		}
	}

	@Override
	public void setQMRefCertiCycle(String qMRefCertiCycle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCertiCycle = qMRefCertiCycle;
	}

	@JSON
	@Override
	public String getAuditTime() {
		if (_auditTime == null) {
			return "";
		}
		else {
			return _auditTime;
		}
	}

	@Override
	public void setAuditTime(String auditTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditTime = auditTime;
	}

	@JSON
	@Override
	public String getQMRefAuditTime() {
		if (_qMRefAuditTime == null) {
			return "";
		}
		else {
			return _qMRefAuditTime;
		}
	}

	@Override
	public void setQMRefAuditTime(String qMRefAuditTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefAuditTime = qMRefAuditTime;
	}

	@JSON
	@Override
	public String getSamplingProgram() {
		if (_samplingProgram == null) {
			return "";
		}
		else {
			return _samplingProgram;
		}
	}

	@Override
	public void setSamplingProgram(String samplingProgram) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_samplingProgram = samplingProgram;
	}

	@JSON
	@Override
	public String getQMRefSampling() {
		if (_qMRefSampling == null) {
			return "";
		}
		else {
			return _qMRefSampling;
		}
	}

	@Override
	public void setQMRefSampling(String qMRefSampling) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSampling = qMRefSampling;
	}

	@JSON
	@Override
	public String getAuditPlanning() {
		if (_auditPlanning == null) {
			return "";
		}
		else {
			return _auditPlanning;
		}
	}

	@Override
	public void setAuditPlanning(String auditPlanning) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditPlanning = auditPlanning;
	}

	@JSON
	@Override
	public String getQMRefPlanning() {
		if (_qMRefPlanning == null) {
			return "";
		}
		else {
			return _qMRefPlanning;
		}
	}

	@Override
	public void setQMRefPlanning(String qMRefPlanning) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPlanning = qMRefPlanning;
	}

	@JSON
	@Override
	public String getAuditTeam() {
		if (_auditTeam == null) {
			return "";
		}
		else {
			return _auditTeam;
		}
	}

	@Override
	public void setAuditTeam(String auditTeam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditTeam = auditTeam;
	}

	@JSON
	@Override
	public String getQMRefAuditTeam() {
		if (_qMRefAuditTeam == null) {
			return "";
		}
		else {
			return _qMRefAuditTeam;
		}
	}

	@Override
	public void setQMRefAuditTeam(String qMRefAuditTeam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefAuditTeam = qMRefAuditTeam;
	}

	@JSON
	@Override
	public String getOnSiteAudit() {
		if (_onSiteAudit == null) {
			return "";
		}
		else {
			return _onSiteAudit;
		}
	}

	@Override
	public void setOnSiteAudit(String onSiteAudit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_onSiteAudit = onSiteAudit;
	}

	@JSON
	@Override
	public String getQMRefonSiteAudit() {
		if (_qMRefonSiteAudit == null) {
			return "";
		}
		else {
			return _qMRefonSiteAudit;
		}
	}

	@Override
	public void setQMRefonSiteAudit(String qMRefonSiteAudit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefonSiteAudit = qMRefonSiteAudit;
	}

	@JSON
	@Override
	public String getAuditReport() {
		if (_auditReport == null) {
			return "";
		}
		else {
			return _auditReport;
		}
	}

	@Override
	public void setAuditReport(String auditReport) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditReport = auditReport;
	}

	@JSON
	@Override
	public String getQMRefAuditReport() {
		if (_qMRefAuditReport == null) {
			return "";
		}
		else {
			return _qMRefAuditReport;
		}
	}

	@Override
	public void setQMRefAuditReport(String qMRefAuditReport) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefAuditReport = qMRefAuditReport;
	}

	@JSON
	@Override
	public String getCorrectiveActions() {
		if (_correctiveActions == null) {
			return "";
		}
		else {
			return _correctiveActions;
		}
	}

	@Override
	public void setCorrectiveActions(String correctiveActions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_correctiveActions = correctiveActions;
	}

	@JSON
	@Override
	public String getQMRefCorrective() {
		if (_qMRefCorrective == null) {
			return "";
		}
		else {
			return _qMRefCorrective;
		}
	}

	@Override
	public void setQMRefCorrective(String qMRefCorrective) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCorrective = qMRefCorrective;
	}

	@JSON
	@Override
	public String getReviewPriorDecision() {
		if (_reviewPriorDecision == null) {
			return "";
		}
		else {
			return _reviewPriorDecision;
		}
	}

	@Override
	public void setReviewPriorDecision(String reviewPriorDecision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewPriorDecision = reviewPriorDecision;
	}

	@JSON
	@Override
	public String getQMRefReviewPrior() {
		if (_qMRefReviewPrior == null) {
			return "";
		}
		else {
			return _qMRefReviewPrior;
		}
	}

	@Override
	public void setQMRefReviewPrior(String qMRefReviewPrior) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefReviewPrior = qMRefReviewPrior;
	}

	@JSON
	@Override
	public String getTransferCertification() {
		if (_transferCertification == null) {
			return "";
		}
		else {
			return _transferCertification;
		}
	}

	@Override
	public void setTransferCertification(String transferCertification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferCertification = transferCertification;
	}

	@JSON
	@Override
	public String getQMRefTransfer() {
		if (_qMRefTransfer == null) {
			return "";
		}
		else {
			return _qMRefTransfer;
		}
	}

	@Override
	public void setQMRefTransfer(String qMRefTransfer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefTransfer = qMRefTransfer;
	}

	@JSON
	@Override
	public String getSuspensionPolicies() {
		if (_suspensionPolicies == null) {
			return "";
		}
		else {
			return _suspensionPolicies;
		}
	}

	@Override
	public void setSuspensionPolicies(String suspensionPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_suspensionPolicies = suspensionPolicies;
	}

	@JSON
	@Override
	public String getQMRefSuspension() {
		if (_qMRefSuspension == null) {
			return "";
		}
		else {
			return _qMRefSuspension;
		}
	}

	@Override
	public void setQMRefSuspension(String qMRefSuspension) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSuspension = qMRefSuspension;
	}

	@JSON
	@Override
	public String getSuspensionProcedure() {
		if (_suspensionProcedure == null) {
			return "";
		}
		else {
			return _suspensionProcedure;
		}
	}

	@Override
	public void setSuspensionProcedure(String suspensionProcedure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_suspensionProcedure = suspensionProcedure;
	}

	@JSON
	@Override
	public String getQMRefSuspensionProc() {
		if (_qMRefSuspensionProc == null) {
			return "";
		}
		else {
			return _qMRefSuspensionProc;
		}
	}

	@Override
	public void setQMRefSuspensionProc(String qMRefSuspensionProc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSuspensionProc = qMRefSuspensionProc;
	}

	@JSON
	@Override
	public String getDecisionOnAppeals() {
		if (_decisionOnAppeals == null) {
			return "";
		}
		else {
			return _decisionOnAppeals;
		}
	}

	@Override
	public void setDecisionOnAppeals(String decisionOnAppeals) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_decisionOnAppeals = decisionOnAppeals;
	}

	@JSON
	@Override
	public String getQMRefDecision() {
		if (_qMRefDecision == null) {
			return "";
		}
		else {
			return _qMRefDecision;
		}
	}

	@Override
	public void setQMRefDecision(String qMRefDecision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDecision = qMRefDecision;
	}

	@JSON
	@Override
	public String getHandlingComplaints() {
		if (_handlingComplaints == null) {
			return "";
		}
		else {
			return _handlingComplaints;
		}
	}

	@Override
	public void setHandlingComplaints(String handlingComplaints) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_handlingComplaints = handlingComplaints;
	}

	@JSON
	@Override
	public String getQMRefComplaints() {
		if (_qMRefComplaints == null) {
			return "";
		}
		else {
			return _qMRefComplaints;
		}
	}

	@Override
	public void setQMRefComplaints(String qMRefComplaints) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefComplaints = qMRefComplaints;
	}

	@JSON
	@Override
	public String getRecordRetentionPolicy() {
		if (_recordRetentionPolicy == null) {
			return "";
		}
		else {
			return _recordRetentionPolicy;
		}
	}

	@Override
	public void setRecordRetentionPolicy(String recordRetentionPolicy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recordRetentionPolicy = recordRetentionPolicy;
	}

	@JSON
	@Override
	public String getQMRefRetentionPolicy() {
		if (_qMRefRetentionPolicy == null) {
			return "";
		}
		else {
			return _qMRefRetentionPolicy;
		}
	}

	@Override
	public void setQMRefRetentionPolicy(String qMRefRetentionPolicy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefRetentionPolicy = qMRefRetentionPolicy;
	}

	@JSON
	@Override
	public String getRecordRetentionProc() {
		if (_recordRetentionProc == null) {
			return "";
		}
		else {
			return _recordRetentionProc;
		}
	}

	@Override
	public void setRecordRetentionProc(String recordRetentionProc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recordRetentionProc = recordRetentionProc;
	}

	@JSON
	@Override
	public String getQMRefRetentionProc() {
		if (_qMRefRetentionProc == null) {
			return "";
		}
		else {
			return _qMRefRetentionProc;
		}
	}

	@Override
	public void setQMRefRetentionProc(String qMRefRetentionProc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefRetentionProc = qMRefRetentionProc;
	}

	@JSON
	@Override
	public String getManageSysPolicies() {
		if (_manageSysPolicies == null) {
			return "";
		}
		else {
			return _manageSysPolicies;
		}
	}

	@Override
	public void setManageSysPolicies(String manageSysPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manageSysPolicies = manageSysPolicies;
	}

	@JSON
	@Override
	public String getQMRefPolicies() {
		if (_qMRefPolicies == null) {
			return "";
		}
		else {
			return _qMRefPolicies;
		}
	}

	@Override
	public void setQMRefPolicies(String qMRefPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPolicies = qMRefPolicies;
	}

	@JSON
	@Override
	public String getManageSysObjective() {
		if (_manageSysObjective == null) {
			return "";
		}
		else {
			return _manageSysObjective;
		}
	}

	@Override
	public void setManageSysObjective(String manageSysObjective) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manageSysObjective = manageSysObjective;
	}

	@JSON
	@Override
	public String getQMRefObjective() {
		if (_qMRefObjective == null) {
			return "";
		}
		else {
			return _qMRefObjective;
		}
	}

	@Override
	public void setQMRefObjective(String qMRefObjective) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefObjective = qMRefObjective;
	}

	@JSON
	@Override
	public String getManageSysManual() {
		if (_manageSysManual == null) {
			return "";
		}
		else {
			return _manageSysManual;
		}
	}

	@Override
	public void setManageSysManual(String manageSysManual) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manageSysManual = manageSysManual;
	}

	@JSON
	@Override
	public String getQMRefManual() {
		if (_qMRefManual == null) {
			return "";
		}
		else {
			return _qMRefManual;
		}
	}

	@Override
	public void setQMRefManual(String qMRefManual) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefManual = qMRefManual;
	}

	@JSON
	@Override
	public String getDocControlProcedure() {
		if (_docControlProcedure == null) {
			return "";
		}
		else {
			return _docControlProcedure;
		}
	}

	@Override
	public void setDocControlProcedure(String docControlProcedure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docControlProcedure = docControlProcedure;
	}

	@JSON
	@Override
	public String getQMRefDocControl() {
		if (_qMRefDocControl == null) {
			return "";
		}
		else {
			return _qMRefDocControl;
		}
	}

	@Override
	public void setQMRefDocControl(String qMRefDocControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDocControl = qMRefDocControl;
	}

	@JSON
	@Override
	public String getRecControlProc() {
		if (_recControlProc == null) {
			return "";
		}
		else {
			return _recControlProc;
		}
	}

	@Override
	public void setRecControlProc(String recControlProc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recControlProc = recControlProc;
	}

	@JSON
	@Override
	public String getQMRefRecControl() {
		if (_qMRefRecControl == null) {
			return "";
		}
		else {
			return _qMRefRecControl;
		}
	}

	@Override
	public void setQMRefRecControl(String qMRefRecControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefRecControl = qMRefRecControl;
	}

	@JSON
	@Override
	public String getManagementReview() {
		if (_managementReview == null) {
			return "";
		}
		else {
			return _managementReview;
		}
	}

	@Override
	public void setManagementReview(String managementReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managementReview = managementReview;
	}

	@JSON
	@Override
	public String getQMRefManagementRev() {
		if (_qMRefManagementRev == null) {
			return "";
		}
		else {
			return _qMRefManagementRev;
		}
	}

	@Override
	public void setQMRefManagementRev(String qMRefManagementRev) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefManagementRev = qMRefManagementRev;
	}

	@JSON
	@Override
	public String getInternalAudits() {
		if (_internalAudits == null) {
			return "";
		}
		else {
			return _internalAudits;
		}
	}

	@Override
	public void setInternalAudits(String internalAudits) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_internalAudits = internalAudits;
	}

	@JSON
	@Override
	public String getQMRefInternal() {
		if (_qMRefInternal == null) {
			return "";
		}
		else {
			return _qMRefInternal;
		}
	}

	@Override
	public void setQMRefInternal(String qMRefInternal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefInternal = qMRefInternal;
	}

	@JSON
	@Override
	public String getIdentificationProc() {
		if (_identificationProc == null) {
			return "";
		}
		else {
			return _identificationProc;
		}
	}

	@Override
	public void setIdentificationProc(String identificationProc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_identificationProc = identificationProc;
	}

	@JSON
	@Override
	public String getQMRefIdentification() {
		if (_qMRefIdentification == null) {
			return "";
		}
		else {
			return _qMRefIdentification;
		}
	}

	@Override
	public void setQMRefIdentification(String qMRefIdentification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefIdentification = qMRefIdentification;
	}

	@JSON
	@Override
	public String getQMSScopeB() {
		if (_qMSScopeB == null) {
			return "";
		}
		else {
			return _qMSScopeB;
		}
	}

	@Override
	public void setQMSScopeB(String qMSScopeB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMSScopeB = qMSScopeB;
	}

	@JSON
	@Override
	public String getQMRefQMSScopeB() {
		if (_qMRefQMSScopeB == null) {
			return "";
		}
		else {
			return _qMRefQMSScopeB;
		}
	}

	@Override
	public void setQMRefQMSScopeB(String qMRefQMSScopeB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefQMSScopeB = qMRefQMSScopeB;
	}

	@JSON
	@Override
	public String getDesignDevB() {
		if (_designDevB == null) {
			return "";
		}
		else {
			return _designDevB;
		}
	}

	@Override
	public void setDesignDevB(String designDevB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designDevB = designDevB;
	}

	@JSON
	@Override
	public String getQMRefDesignB() {
		if (_qMRefDesignB == null) {
			return "";
		}
		else {
			return _qMRefDesignB;
		}
	}

	@Override
	public void setQMRefDesignB(String qMRefDesignB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDesignB = qMRefDesignB;
	}

	@JSON
	@Override
	public String getInterestedPartyNeedsB() {
		if (_interestedPartyNeedsB == null) {
			return "";
		}
		else {
			return _interestedPartyNeedsB;
		}
	}

	@Override
	public void setInterestedPartyNeedsB(String interestedPartyNeedsB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_interestedPartyNeedsB = interestedPartyNeedsB;
	}

	@JSON
	@Override
	public String getQMRefInterestedB() {
		if (_qMRefInterestedB == null) {
			return "";
		}
		else {
			return _qMRefInterestedB;
		}
	}

	@Override
	public void setQMRefInterestedB(String qMRefInterestedB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefInterestedB = qMRefInterestedB;
	}

	@JSON
	@Override
	public String getManagementReviewB() {
		if (_managementReviewB == null) {
			return "";
		}
		else {
			return _managementReviewB;
		}
	}

	@Override
	public void setManagementReviewB(String managementReviewB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managementReviewB = managementReviewB;
	}

	@JSON
	@Override
	public String getQMRefmanagementReviewB() {
		if (_qMRefmanagementReviewB == null) {
			return "";
		}
		else {
			return _qMRefmanagementReviewB;
		}
	}

	@Override
	public void setQMRefmanagementReviewB(String qMRefmanagementReviewB) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefmanagementReviewB = qMRefmanagementReviewB;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccCerBodyManageReq.class.getName()));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccCerBodyManageReq.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccCerBodyManageReq toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccCerBodyManageReq>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccCerBodyManageReqImpl accCerBodyManageReqImpl =
			new AccCerBodyManageReqImpl();

		accCerBodyManageReqImpl.setUuid(getUuid());
		accCerBodyManageReqImpl.setAccCerBodyManageReqId(
			getAccCerBodyManageReqId());
		accCerBodyManageReqImpl.setGroupId(getGroupId());
		accCerBodyManageReqImpl.setCompanyId(getCompanyId());
		accCerBodyManageReqImpl.setUserId(getUserId());
		accCerBodyManageReqImpl.setUserName(getUserName());
		accCerBodyManageReqImpl.setCreateDate(getCreateDate());
		accCerBodyManageReqImpl.setModifiedDate(getModifiedDate());
		accCerBodyManageReqImpl.setOptionFollow(getOptionFollow());
		accCerBodyManageReqImpl.setImpartialityPolicy(getImpartialityPolicy());
		accCerBodyManageReqImpl.setQMRefImpartiality(getQMRefImpartiality());
		accCerBodyManageReqImpl.setRiskAssessment(getRiskAssessment());
		accCerBodyManageReqImpl.setQMRefRisk(getQMRefRisk());
		accCerBodyManageReqImpl.setOrgStructure(getOrgStructure());
		accCerBodyManageReqImpl.setQMRefOrgStruct(getQMRefOrgStruct());
		accCerBodyManageReqImpl.setTermsOfReference(getTermsOfReference());
		accCerBodyManageReqImpl.setQMRefTerms(getQMRefTerms());
		accCerBodyManageReqImpl.setProcessForControl(getProcessForControl());
		accCerBodyManageReqImpl.setQMRefProcess(getQMRefProcess());
		accCerBodyManageReqImpl.setCriteriaReq(getCriteriaReq());
		accCerBodyManageReqImpl.setQMRefCriteria(getQMRefCriteria());
		accCerBodyManageReqImpl.setInitialCompetence(getInitialCompetence());
		accCerBodyManageReqImpl.setQMRefInitial(getQMRefInitial());
		accCerBodyManageReqImpl.setSelectingTraining(getSelectingTraining());
		accCerBodyManageReqImpl.setQMRefSelecting(getQMRefSelecting());
		accCerBodyManageReqImpl.setMonitoringCompetence(
			getMonitoringCompetence());
		accCerBodyManageReqImpl.setQMRefMonitoring(getQMRefMonitoring());
		accCerBodyManageReqImpl.setWrittenAgreement(getWrittenAgreement());
		accCerBodyManageReqImpl.setQMRefWritten(getQMRefWritten());
		accCerBodyManageReqImpl.setDescOfProcess(getDescOfProcess());
		accCerBodyManageReqImpl.setQMRefDescProcess(getQMRefDescProcess());
		accCerBodyManageReqImpl.setProcessForMonitor(getProcessForMonitor());
		accCerBodyManageReqImpl.setQMRefMonitorProcess(
			getQMRefMonitorProcess());
		accCerBodyManageReqImpl.setAuditProcess(getAuditProcess());
		accCerBodyManageReqImpl.setQMRefAuditProcess(getQMRefAuditProcess());
		accCerBodyManageReqImpl.setProcessGranting(getProcessGranting());
		accCerBodyManageReqImpl.setQMRefGranting(getQMRefGranting());
		accCerBodyManageReqImpl.setManagemntSys(getManagemntSys());
		accCerBodyManageReqImpl.setQMRefManagemnt(getQMRefManagemnt());
		accCerBodyManageReqImpl.setUseOfCertification(getUseOfCertification());
		accCerBodyManageReqImpl.setQMRefUseOfCerti(getQMRefUseOfCerti());
		accCerBodyManageReqImpl.setHandlingReq(getHandlingReq());
		accCerBodyManageReqImpl.setQMRefHandling(getQMRefHandling());
		accCerBodyManageReqImpl.setImpartialityPolicies(
			getImpartialityPolicies());
		accCerBodyManageReqImpl.setQMRefImpartPolicy(getQMRefImpartPolicy());
		accCerBodyManageReqImpl.setProvisionInform(getProvisionInform());
		accCerBodyManageReqImpl.setQMRefProvision(getQMRefProvision());
		accCerBodyManageReqImpl.setCertificationDoc(getCertificationDoc());
		accCerBodyManageReqImpl.setQMRefCertification(getQMRefCertification());
		accCerBodyManageReqImpl.setRulesGoverning(getRulesGoverning());
		accCerBodyManageReqImpl.setQMRefGoverning(getQMRefGoverning());
		accCerBodyManageReqImpl.setEnforcableArrangements(
			getEnforcableArrangements());
		accCerBodyManageReqImpl.setQMRefEnforcable(getQMRefEnforcable());
		accCerBodyManageReqImpl.setEnsureConfidential(getEnsureConfidential());
		accCerBodyManageReqImpl.setQMRefEnsureConfid(getQMRefEnsureConfid());
		accCerBodyManageReqImpl.setInformingMechanism(getInformingMechanism());
		accCerBodyManageReqImpl.setQMRefInforming(getQMRefInforming());
		accCerBodyManageReqImpl.setApplicationProcess(getApplicationProcess());
		accCerBodyManageReqImpl.setQMRefApplication(getQMRefApplication());
		accCerBodyManageReqImpl.setApplicationReview(getApplicationReview());
		accCerBodyManageReqImpl.setQMRefReview(getQMRefReview());
		accCerBodyManageReqImpl.setCertificationCycle(getCertificationCycle());
		accCerBodyManageReqImpl.setQMRefCertiCycle(getQMRefCertiCycle());
		accCerBodyManageReqImpl.setAuditTime(getAuditTime());
		accCerBodyManageReqImpl.setQMRefAuditTime(getQMRefAuditTime());
		accCerBodyManageReqImpl.setSamplingProgram(getSamplingProgram());
		accCerBodyManageReqImpl.setQMRefSampling(getQMRefSampling());
		accCerBodyManageReqImpl.setAuditPlanning(getAuditPlanning());
		accCerBodyManageReqImpl.setQMRefPlanning(getQMRefPlanning());
		accCerBodyManageReqImpl.setAuditTeam(getAuditTeam());
		accCerBodyManageReqImpl.setQMRefAuditTeam(getQMRefAuditTeam());
		accCerBodyManageReqImpl.setOnSiteAudit(getOnSiteAudit());
		accCerBodyManageReqImpl.setQMRefonSiteAudit(getQMRefonSiteAudit());
		accCerBodyManageReqImpl.setAuditReport(getAuditReport());
		accCerBodyManageReqImpl.setQMRefAuditReport(getQMRefAuditReport());
		accCerBodyManageReqImpl.setCorrectiveActions(getCorrectiveActions());
		accCerBodyManageReqImpl.setQMRefCorrective(getQMRefCorrective());
		accCerBodyManageReqImpl.setReviewPriorDecision(
			getReviewPriorDecision());
		accCerBodyManageReqImpl.setQMRefReviewPrior(getQMRefReviewPrior());
		accCerBodyManageReqImpl.setTransferCertification(
			getTransferCertification());
		accCerBodyManageReqImpl.setQMRefTransfer(getQMRefTransfer());
		accCerBodyManageReqImpl.setSuspensionPolicies(getSuspensionPolicies());
		accCerBodyManageReqImpl.setQMRefSuspension(getQMRefSuspension());
		accCerBodyManageReqImpl.setSuspensionProcedure(
			getSuspensionProcedure());
		accCerBodyManageReqImpl.setQMRefSuspensionProc(
			getQMRefSuspensionProc());
		accCerBodyManageReqImpl.setDecisionOnAppeals(getDecisionOnAppeals());
		accCerBodyManageReqImpl.setQMRefDecision(getQMRefDecision());
		accCerBodyManageReqImpl.setHandlingComplaints(getHandlingComplaints());
		accCerBodyManageReqImpl.setQMRefComplaints(getQMRefComplaints());
		accCerBodyManageReqImpl.setRecordRetentionPolicy(
			getRecordRetentionPolicy());
		accCerBodyManageReqImpl.setQMRefRetentionPolicy(
			getQMRefRetentionPolicy());
		accCerBodyManageReqImpl.setRecordRetentionProc(
			getRecordRetentionProc());
		accCerBodyManageReqImpl.setQMRefRetentionProc(getQMRefRetentionProc());
		accCerBodyManageReqImpl.setManageSysPolicies(getManageSysPolicies());
		accCerBodyManageReqImpl.setQMRefPolicies(getQMRefPolicies());
		accCerBodyManageReqImpl.setManageSysObjective(getManageSysObjective());
		accCerBodyManageReqImpl.setQMRefObjective(getQMRefObjective());
		accCerBodyManageReqImpl.setManageSysManual(getManageSysManual());
		accCerBodyManageReqImpl.setQMRefManual(getQMRefManual());
		accCerBodyManageReqImpl.setDocControlProcedure(
			getDocControlProcedure());
		accCerBodyManageReqImpl.setQMRefDocControl(getQMRefDocControl());
		accCerBodyManageReqImpl.setRecControlProc(getRecControlProc());
		accCerBodyManageReqImpl.setQMRefRecControl(getQMRefRecControl());
		accCerBodyManageReqImpl.setManagementReview(getManagementReview());
		accCerBodyManageReqImpl.setQMRefManagementRev(getQMRefManagementRev());
		accCerBodyManageReqImpl.setInternalAudits(getInternalAudits());
		accCerBodyManageReqImpl.setQMRefInternal(getQMRefInternal());
		accCerBodyManageReqImpl.setIdentificationProc(getIdentificationProc());
		accCerBodyManageReqImpl.setQMRefIdentification(
			getQMRefIdentification());
		accCerBodyManageReqImpl.setQMSScopeB(getQMSScopeB());
		accCerBodyManageReqImpl.setQMRefQMSScopeB(getQMRefQMSScopeB());
		accCerBodyManageReqImpl.setDesignDevB(getDesignDevB());
		accCerBodyManageReqImpl.setQMRefDesignB(getQMRefDesignB());
		accCerBodyManageReqImpl.setInterestedPartyNeedsB(
			getInterestedPartyNeedsB());
		accCerBodyManageReqImpl.setQMRefInterestedB(getQMRefInterestedB());
		accCerBodyManageReqImpl.setManagementReviewB(getManagementReviewB());
		accCerBodyManageReqImpl.setQMRefmanagementReviewB(
			getQMRefmanagementReviewB());
		accCerBodyManageReqImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accCerBodyManageReqImpl.resetOriginalValues();

		return accCerBodyManageReqImpl;
	}

	@Override
	public AccCerBodyManageReq cloneWithOriginalValues() {
		AccCerBodyManageReqImpl accCerBodyManageReqImpl =
			new AccCerBodyManageReqImpl();

		accCerBodyManageReqImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accCerBodyManageReqImpl.setAccCerBodyManageReqId(
			this.<Long>getColumnOriginalValue("accCerBodyManageReqId"));
		accCerBodyManageReqImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accCerBodyManageReqImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accCerBodyManageReqImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accCerBodyManageReqImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accCerBodyManageReqImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accCerBodyManageReqImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accCerBodyManageReqImpl.setOptionFollow(
			this.<String>getColumnOriginalValue("optionFollow"));
		accCerBodyManageReqImpl.setImpartialityPolicy(
			this.<String>getColumnOriginalValue("impartialityPolicy"));
		accCerBodyManageReqImpl.setQMRefImpartiality(
			this.<String>getColumnOriginalValue("qMRefImpartiality"));
		accCerBodyManageReqImpl.setRiskAssessment(
			this.<String>getColumnOriginalValue("riskAssessment"));
		accCerBodyManageReqImpl.setQMRefRisk(
			this.<String>getColumnOriginalValue("qMRefRisk"));
		accCerBodyManageReqImpl.setOrgStructure(
			this.<String>getColumnOriginalValue("orgStructure"));
		accCerBodyManageReqImpl.setQMRefOrgStruct(
			this.<String>getColumnOriginalValue("qMRefOrgStruct"));
		accCerBodyManageReqImpl.setTermsOfReference(
			this.<String>getColumnOriginalValue("termsOfReference"));
		accCerBodyManageReqImpl.setQMRefTerms(
			this.<String>getColumnOriginalValue("qMRefTerms"));
		accCerBodyManageReqImpl.setProcessForControl(
			this.<String>getColumnOriginalValue("processForControl"));
		accCerBodyManageReqImpl.setQMRefProcess(
			this.<String>getColumnOriginalValue("qMRefProcess"));
		accCerBodyManageReqImpl.setCriteriaReq(
			this.<String>getColumnOriginalValue("criteriaReq"));
		accCerBodyManageReqImpl.setQMRefCriteria(
			this.<String>getColumnOriginalValue("qMRefCriteria"));
		accCerBodyManageReqImpl.setInitialCompetence(
			this.<String>getColumnOriginalValue("initialCompetence"));
		accCerBodyManageReqImpl.setQMRefInitial(
			this.<String>getColumnOriginalValue("qMRefInitial"));
		accCerBodyManageReqImpl.setSelectingTraining(
			this.<String>getColumnOriginalValue("selectingTraining"));
		accCerBodyManageReqImpl.setQMRefSelecting(
			this.<String>getColumnOriginalValue("qMRefSelecting"));
		accCerBodyManageReqImpl.setMonitoringCompetence(
			this.<String>getColumnOriginalValue("monitoringCompetence"));
		accCerBodyManageReqImpl.setQMRefMonitoring(
			this.<String>getColumnOriginalValue("qMRefMonitoring"));
		accCerBodyManageReqImpl.setWrittenAgreement(
			this.<String>getColumnOriginalValue("writtenAgreement"));
		accCerBodyManageReqImpl.setQMRefWritten(
			this.<String>getColumnOriginalValue("qMRefWritten"));
		accCerBodyManageReqImpl.setDescOfProcess(
			this.<String>getColumnOriginalValue("descOfProcess"));
		accCerBodyManageReqImpl.setQMRefDescProcess(
			this.<String>getColumnOriginalValue("qMRefDescProcess"));
		accCerBodyManageReqImpl.setProcessForMonitor(
			this.<String>getColumnOriginalValue("processForMonitor"));
		accCerBodyManageReqImpl.setQMRefMonitorProcess(
			this.<String>getColumnOriginalValue("qMRefMonitorProcess"));
		accCerBodyManageReqImpl.setAuditProcess(
			this.<String>getColumnOriginalValue("auditProcess"));
		accCerBodyManageReqImpl.setQMRefAuditProcess(
			this.<String>getColumnOriginalValue("qMRefAuditProcess"));
		accCerBodyManageReqImpl.setProcessGranting(
			this.<String>getColumnOriginalValue("processGranting"));
		accCerBodyManageReqImpl.setQMRefGranting(
			this.<String>getColumnOriginalValue("qMRefGranting"));
		accCerBodyManageReqImpl.setManagemntSys(
			this.<String>getColumnOriginalValue("managemntSys"));
		accCerBodyManageReqImpl.setQMRefManagemnt(
			this.<String>getColumnOriginalValue("qMRefManagemnt"));
		accCerBodyManageReqImpl.setUseOfCertification(
			this.<String>getColumnOriginalValue("useOfCertification"));
		accCerBodyManageReqImpl.setQMRefUseOfCerti(
			this.<String>getColumnOriginalValue("qMRefUseOfCerti"));
		accCerBodyManageReqImpl.setHandlingReq(
			this.<String>getColumnOriginalValue("handlingReq"));
		accCerBodyManageReqImpl.setQMRefHandling(
			this.<String>getColumnOriginalValue("qMRefHandling"));
		accCerBodyManageReqImpl.setImpartialityPolicies(
			this.<String>getColumnOriginalValue("impartialityPolicies"));
		accCerBodyManageReqImpl.setQMRefImpartPolicy(
			this.<String>getColumnOriginalValue("qMRefImpartPolicy"));
		accCerBodyManageReqImpl.setProvisionInform(
			this.<String>getColumnOriginalValue("provisionInform"));
		accCerBodyManageReqImpl.setQMRefProvision(
			this.<String>getColumnOriginalValue("qMRefProvision"));
		accCerBodyManageReqImpl.setCertificationDoc(
			this.<String>getColumnOriginalValue("certificationDoc"));
		accCerBodyManageReqImpl.setQMRefCertification(
			this.<String>getColumnOriginalValue("qMRefCertification"));
		accCerBodyManageReqImpl.setRulesGoverning(
			this.<String>getColumnOriginalValue("rulesGoverning"));
		accCerBodyManageReqImpl.setQMRefGoverning(
			this.<String>getColumnOriginalValue("qMRefGoverning"));
		accCerBodyManageReqImpl.setEnforcableArrangements(
			this.<String>getColumnOriginalValue("enforcableArrangements"));
		accCerBodyManageReqImpl.setQMRefEnforcable(
			this.<String>getColumnOriginalValue("qMRefEnforcable"));
		accCerBodyManageReqImpl.setEnsureConfidential(
			this.<String>getColumnOriginalValue("ensureConfidential"));
		accCerBodyManageReqImpl.setQMRefEnsureConfid(
			this.<String>getColumnOriginalValue("qMRefEnsureConfid"));
		accCerBodyManageReqImpl.setInformingMechanism(
			this.<String>getColumnOriginalValue("informingMechanism"));
		accCerBodyManageReqImpl.setQMRefInforming(
			this.<String>getColumnOriginalValue("qMRefInforming"));
		accCerBodyManageReqImpl.setApplicationProcess(
			this.<String>getColumnOriginalValue("applicationProcess"));
		accCerBodyManageReqImpl.setQMRefApplication(
			this.<String>getColumnOriginalValue("qMRefApplication"));
		accCerBodyManageReqImpl.setApplicationReview(
			this.<String>getColumnOriginalValue("applicationReview"));
		accCerBodyManageReqImpl.setQMRefReview(
			this.<String>getColumnOriginalValue("qMRefReview"));
		accCerBodyManageReqImpl.setCertificationCycle(
			this.<String>getColumnOriginalValue("certificationCycle"));
		accCerBodyManageReqImpl.setQMRefCertiCycle(
			this.<String>getColumnOriginalValue("qMRefCertiCycle"));
		accCerBodyManageReqImpl.setAuditTime(
			this.<String>getColumnOriginalValue("auditTime"));
		accCerBodyManageReqImpl.setQMRefAuditTime(
			this.<String>getColumnOriginalValue("qMRefAuditTime"));
		accCerBodyManageReqImpl.setSamplingProgram(
			this.<String>getColumnOriginalValue("samplingProgram"));
		accCerBodyManageReqImpl.setQMRefSampling(
			this.<String>getColumnOriginalValue("qMRefSampling"));
		accCerBodyManageReqImpl.setAuditPlanning(
			this.<String>getColumnOriginalValue("auditPlanning"));
		accCerBodyManageReqImpl.setQMRefPlanning(
			this.<String>getColumnOriginalValue("qMRefPlanning"));
		accCerBodyManageReqImpl.setAuditTeam(
			this.<String>getColumnOriginalValue("auditTeam"));
		accCerBodyManageReqImpl.setQMRefAuditTeam(
			this.<String>getColumnOriginalValue("qMRefAuditTeam"));
		accCerBodyManageReqImpl.setOnSiteAudit(
			this.<String>getColumnOriginalValue("onSiteAudit"));
		accCerBodyManageReqImpl.setQMRefonSiteAudit(
			this.<String>getColumnOriginalValue("qMRefonSiteAudit"));
		accCerBodyManageReqImpl.setAuditReport(
			this.<String>getColumnOriginalValue("auditReport"));
		accCerBodyManageReqImpl.setQMRefAuditReport(
			this.<String>getColumnOriginalValue("qMRefAuditReport"));
		accCerBodyManageReqImpl.setCorrectiveActions(
			this.<String>getColumnOriginalValue("correctiveActions"));
		accCerBodyManageReqImpl.setQMRefCorrective(
			this.<String>getColumnOriginalValue("qMRefCorrective"));
		accCerBodyManageReqImpl.setReviewPriorDecision(
			this.<String>getColumnOriginalValue("reviewPriorDecision"));
		accCerBodyManageReqImpl.setQMRefReviewPrior(
			this.<String>getColumnOriginalValue("qMRefReviewPrior"));
		accCerBodyManageReqImpl.setTransferCertification(
			this.<String>getColumnOriginalValue("transferCertification"));
		accCerBodyManageReqImpl.setQMRefTransfer(
			this.<String>getColumnOriginalValue("qMRefTransfer"));
		accCerBodyManageReqImpl.setSuspensionPolicies(
			this.<String>getColumnOriginalValue("suspensionPolicies"));
		accCerBodyManageReqImpl.setQMRefSuspension(
			this.<String>getColumnOriginalValue("qMRefSuspension"));
		accCerBodyManageReqImpl.setSuspensionProcedure(
			this.<String>getColumnOriginalValue("suspensionProcedure"));
		accCerBodyManageReqImpl.setQMRefSuspensionProc(
			this.<String>getColumnOriginalValue("qMRefSuspensionProc"));
		accCerBodyManageReqImpl.setDecisionOnAppeals(
			this.<String>getColumnOriginalValue("decisionOnAppeals"));
		accCerBodyManageReqImpl.setQMRefDecision(
			this.<String>getColumnOriginalValue("qMRefDecision"));
		accCerBodyManageReqImpl.setHandlingComplaints(
			this.<String>getColumnOriginalValue("handlingComplaints"));
		accCerBodyManageReqImpl.setQMRefComplaints(
			this.<String>getColumnOriginalValue("qMRefComplaints"));
		accCerBodyManageReqImpl.setRecordRetentionPolicy(
			this.<String>getColumnOriginalValue("recordRetentionPolicy"));
		accCerBodyManageReqImpl.setQMRefRetentionPolicy(
			this.<String>getColumnOriginalValue("qMRefRetentionPolicy"));
		accCerBodyManageReqImpl.setRecordRetentionProc(
			this.<String>getColumnOriginalValue("recordRetentionProc"));
		accCerBodyManageReqImpl.setQMRefRetentionProc(
			this.<String>getColumnOriginalValue("qMRefRetentionProc"));
		accCerBodyManageReqImpl.setManageSysPolicies(
			this.<String>getColumnOriginalValue("manageSysPolicies"));
		accCerBodyManageReqImpl.setQMRefPolicies(
			this.<String>getColumnOriginalValue("qMRefPolicies"));
		accCerBodyManageReqImpl.setManageSysObjective(
			this.<String>getColumnOriginalValue("manageSysObjective"));
		accCerBodyManageReqImpl.setQMRefObjective(
			this.<String>getColumnOriginalValue("qMRefObjective"));
		accCerBodyManageReqImpl.setManageSysManual(
			this.<String>getColumnOriginalValue("manageSysManual"));
		accCerBodyManageReqImpl.setQMRefManual(
			this.<String>getColumnOriginalValue("qMRefManual"));
		accCerBodyManageReqImpl.setDocControlProcedure(
			this.<String>getColumnOriginalValue("docControlProcedure"));
		accCerBodyManageReqImpl.setQMRefDocControl(
			this.<String>getColumnOriginalValue("qMRefDocControl"));
		accCerBodyManageReqImpl.setRecControlProc(
			this.<String>getColumnOriginalValue("recControlProc"));
		accCerBodyManageReqImpl.setQMRefRecControl(
			this.<String>getColumnOriginalValue("qMRefRecControl"));
		accCerBodyManageReqImpl.setManagementReview(
			this.<String>getColumnOriginalValue("managementReview"));
		accCerBodyManageReqImpl.setQMRefManagementRev(
			this.<String>getColumnOriginalValue("qMRefManagementRev"));
		accCerBodyManageReqImpl.setInternalAudits(
			this.<String>getColumnOriginalValue("internalAudits"));
		accCerBodyManageReqImpl.setQMRefInternal(
			this.<String>getColumnOriginalValue("qMRefInternal"));
		accCerBodyManageReqImpl.setIdentificationProc(
			this.<String>getColumnOriginalValue("identificationProc"));
		accCerBodyManageReqImpl.setQMRefIdentification(
			this.<String>getColumnOriginalValue("qMRefIdentification"));
		accCerBodyManageReqImpl.setQMSScopeB(
			this.<String>getColumnOriginalValue("qMSScopeB"));
		accCerBodyManageReqImpl.setQMRefQMSScopeB(
			this.<String>getColumnOriginalValue("qMRefQMSScopeB"));
		accCerBodyManageReqImpl.setDesignDevB(
			this.<String>getColumnOriginalValue("designDevB"));
		accCerBodyManageReqImpl.setQMRefDesignB(
			this.<String>getColumnOriginalValue("qMRefDesignB"));
		accCerBodyManageReqImpl.setInterestedPartyNeedsB(
			this.<String>getColumnOriginalValue("interestedPartyNeedsB"));
		accCerBodyManageReqImpl.setQMRefInterestedB(
			this.<String>getColumnOriginalValue("qMRefInterestedB"));
		accCerBodyManageReqImpl.setManagementReviewB(
			this.<String>getColumnOriginalValue("managementReviewB"));
		accCerBodyManageReqImpl.setQMRefmanagementReviewB(
			this.<String>getColumnOriginalValue("qMRefmanagementReviewB"));
		accCerBodyManageReqImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accCerBodyManageReqImpl;
	}

	@Override
	public int compareTo(AccCerBodyManageReq accCerBodyManageReq) {
		long primaryKey = accCerBodyManageReq.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccCerBodyManageReq)) {
			return false;
		}

		AccCerBodyManageReq accCerBodyManageReq = (AccCerBodyManageReq)object;

		long primaryKey = accCerBodyManageReq.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;
	}

	@Override
	public CacheModel<AccCerBodyManageReq> toCacheModel() {
		AccCerBodyManageReqCacheModel accCerBodyManageReqCacheModel =
			new AccCerBodyManageReqCacheModel();

		accCerBodyManageReqCacheModel.uuid = getUuid();

		String uuid = accCerBodyManageReqCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accCerBodyManageReqCacheModel.uuid = null;
		}

		accCerBodyManageReqCacheModel.accCerBodyManageReqId =
			getAccCerBodyManageReqId();

		accCerBodyManageReqCacheModel.groupId = getGroupId();

		accCerBodyManageReqCacheModel.companyId = getCompanyId();

		accCerBodyManageReqCacheModel.userId = getUserId();

		accCerBodyManageReqCacheModel.userName = getUserName();

		String userName = accCerBodyManageReqCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accCerBodyManageReqCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accCerBodyManageReqCacheModel.createDate = createDate.getTime();
		}
		else {
			accCerBodyManageReqCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accCerBodyManageReqCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accCerBodyManageReqCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accCerBodyManageReqCacheModel.optionFollow = getOptionFollow();

		String optionFollow = accCerBodyManageReqCacheModel.optionFollow;

		if ((optionFollow != null) && (optionFollow.length() == 0)) {
			accCerBodyManageReqCacheModel.optionFollow = null;
		}

		accCerBodyManageReqCacheModel.impartialityPolicy =
			getImpartialityPolicy();

		String impartialityPolicy =
			accCerBodyManageReqCacheModel.impartialityPolicy;

		if ((impartialityPolicy != null) &&
			(impartialityPolicy.length() == 0)) {

			accCerBodyManageReqCacheModel.impartialityPolicy = null;
		}

		accCerBodyManageReqCacheModel.qMRefImpartiality =
			getQMRefImpartiality();

		String qMRefImpartiality =
			accCerBodyManageReqCacheModel.qMRefImpartiality;

		if ((qMRefImpartiality != null) && (qMRefImpartiality.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefImpartiality = null;
		}

		accCerBodyManageReqCacheModel.riskAssessment = getRiskAssessment();

		String riskAssessment = accCerBodyManageReqCacheModel.riskAssessment;

		if ((riskAssessment != null) && (riskAssessment.length() == 0)) {
			accCerBodyManageReqCacheModel.riskAssessment = null;
		}

		accCerBodyManageReqCacheModel.qMRefRisk = getQMRefRisk();

		String qMRefRisk = accCerBodyManageReqCacheModel.qMRefRisk;

		if ((qMRefRisk != null) && (qMRefRisk.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefRisk = null;
		}

		accCerBodyManageReqCacheModel.orgStructure = getOrgStructure();

		String orgStructure = accCerBodyManageReqCacheModel.orgStructure;

		if ((orgStructure != null) && (orgStructure.length() == 0)) {
			accCerBodyManageReqCacheModel.orgStructure = null;
		}

		accCerBodyManageReqCacheModel.qMRefOrgStruct = getQMRefOrgStruct();

		String qMRefOrgStruct = accCerBodyManageReqCacheModel.qMRefOrgStruct;

		if ((qMRefOrgStruct != null) && (qMRefOrgStruct.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefOrgStruct = null;
		}

		accCerBodyManageReqCacheModel.termsOfReference = getTermsOfReference();

		String termsOfReference =
			accCerBodyManageReqCacheModel.termsOfReference;

		if ((termsOfReference != null) && (termsOfReference.length() == 0)) {
			accCerBodyManageReqCacheModel.termsOfReference = null;
		}

		accCerBodyManageReqCacheModel.qMRefTerms = getQMRefTerms();

		String qMRefTerms = accCerBodyManageReqCacheModel.qMRefTerms;

		if ((qMRefTerms != null) && (qMRefTerms.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefTerms = null;
		}

		accCerBodyManageReqCacheModel.processForControl =
			getProcessForControl();

		String processForControl =
			accCerBodyManageReqCacheModel.processForControl;

		if ((processForControl != null) && (processForControl.length() == 0)) {
			accCerBodyManageReqCacheModel.processForControl = null;
		}

		accCerBodyManageReqCacheModel.qMRefProcess = getQMRefProcess();

		String qMRefProcess = accCerBodyManageReqCacheModel.qMRefProcess;

		if ((qMRefProcess != null) && (qMRefProcess.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefProcess = null;
		}

		accCerBodyManageReqCacheModel.criteriaReq = getCriteriaReq();

		String criteriaReq = accCerBodyManageReqCacheModel.criteriaReq;

		if ((criteriaReq != null) && (criteriaReq.length() == 0)) {
			accCerBodyManageReqCacheModel.criteriaReq = null;
		}

		accCerBodyManageReqCacheModel.qMRefCriteria = getQMRefCriteria();

		String qMRefCriteria = accCerBodyManageReqCacheModel.qMRefCriteria;

		if ((qMRefCriteria != null) && (qMRefCriteria.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefCriteria = null;
		}

		accCerBodyManageReqCacheModel.initialCompetence =
			getInitialCompetence();

		String initialCompetence =
			accCerBodyManageReqCacheModel.initialCompetence;

		if ((initialCompetence != null) && (initialCompetence.length() == 0)) {
			accCerBodyManageReqCacheModel.initialCompetence = null;
		}

		accCerBodyManageReqCacheModel.qMRefInitial = getQMRefInitial();

		String qMRefInitial = accCerBodyManageReqCacheModel.qMRefInitial;

		if ((qMRefInitial != null) && (qMRefInitial.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefInitial = null;
		}

		accCerBodyManageReqCacheModel.selectingTraining =
			getSelectingTraining();

		String selectingTraining =
			accCerBodyManageReqCacheModel.selectingTraining;

		if ((selectingTraining != null) && (selectingTraining.length() == 0)) {
			accCerBodyManageReqCacheModel.selectingTraining = null;
		}

		accCerBodyManageReqCacheModel.qMRefSelecting = getQMRefSelecting();

		String qMRefSelecting = accCerBodyManageReqCacheModel.qMRefSelecting;

		if ((qMRefSelecting != null) && (qMRefSelecting.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefSelecting = null;
		}

		accCerBodyManageReqCacheModel.monitoringCompetence =
			getMonitoringCompetence();

		String monitoringCompetence =
			accCerBodyManageReqCacheModel.monitoringCompetence;

		if ((monitoringCompetence != null) &&
			(monitoringCompetence.length() == 0)) {

			accCerBodyManageReqCacheModel.monitoringCompetence = null;
		}

		accCerBodyManageReqCacheModel.qMRefMonitoring = getQMRefMonitoring();

		String qMRefMonitoring = accCerBodyManageReqCacheModel.qMRefMonitoring;

		if ((qMRefMonitoring != null) && (qMRefMonitoring.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefMonitoring = null;
		}

		accCerBodyManageReqCacheModel.writtenAgreement = getWrittenAgreement();

		String writtenAgreement =
			accCerBodyManageReqCacheModel.writtenAgreement;

		if ((writtenAgreement != null) && (writtenAgreement.length() == 0)) {
			accCerBodyManageReqCacheModel.writtenAgreement = null;
		}

		accCerBodyManageReqCacheModel.qMRefWritten = getQMRefWritten();

		String qMRefWritten = accCerBodyManageReqCacheModel.qMRefWritten;

		if ((qMRefWritten != null) && (qMRefWritten.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefWritten = null;
		}

		accCerBodyManageReqCacheModel.descOfProcess = getDescOfProcess();

		String descOfProcess = accCerBodyManageReqCacheModel.descOfProcess;

		if ((descOfProcess != null) && (descOfProcess.length() == 0)) {
			accCerBodyManageReqCacheModel.descOfProcess = null;
		}

		accCerBodyManageReqCacheModel.qMRefDescProcess = getQMRefDescProcess();

		String qMRefDescProcess =
			accCerBodyManageReqCacheModel.qMRefDescProcess;

		if ((qMRefDescProcess != null) && (qMRefDescProcess.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefDescProcess = null;
		}

		accCerBodyManageReqCacheModel.processForMonitor =
			getProcessForMonitor();

		String processForMonitor =
			accCerBodyManageReqCacheModel.processForMonitor;

		if ((processForMonitor != null) && (processForMonitor.length() == 0)) {
			accCerBodyManageReqCacheModel.processForMonitor = null;
		}

		accCerBodyManageReqCacheModel.qMRefMonitorProcess =
			getQMRefMonitorProcess();

		String qMRefMonitorProcess =
			accCerBodyManageReqCacheModel.qMRefMonitorProcess;

		if ((qMRefMonitorProcess != null) &&
			(qMRefMonitorProcess.length() == 0)) {

			accCerBodyManageReqCacheModel.qMRefMonitorProcess = null;
		}

		accCerBodyManageReqCacheModel.auditProcess = getAuditProcess();

		String auditProcess = accCerBodyManageReqCacheModel.auditProcess;

		if ((auditProcess != null) && (auditProcess.length() == 0)) {
			accCerBodyManageReqCacheModel.auditProcess = null;
		}

		accCerBodyManageReqCacheModel.qMRefAuditProcess =
			getQMRefAuditProcess();

		String qMRefAuditProcess =
			accCerBodyManageReqCacheModel.qMRefAuditProcess;

		if ((qMRefAuditProcess != null) && (qMRefAuditProcess.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefAuditProcess = null;
		}

		accCerBodyManageReqCacheModel.processGranting = getProcessGranting();

		String processGranting = accCerBodyManageReqCacheModel.processGranting;

		if ((processGranting != null) && (processGranting.length() == 0)) {
			accCerBodyManageReqCacheModel.processGranting = null;
		}

		accCerBodyManageReqCacheModel.qMRefGranting = getQMRefGranting();

		String qMRefGranting = accCerBodyManageReqCacheModel.qMRefGranting;

		if ((qMRefGranting != null) && (qMRefGranting.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefGranting = null;
		}

		accCerBodyManageReqCacheModel.managemntSys = getManagemntSys();

		String managemntSys = accCerBodyManageReqCacheModel.managemntSys;

		if ((managemntSys != null) && (managemntSys.length() == 0)) {
			accCerBodyManageReqCacheModel.managemntSys = null;
		}

		accCerBodyManageReqCacheModel.qMRefManagemnt = getQMRefManagemnt();

		String qMRefManagemnt = accCerBodyManageReqCacheModel.qMRefManagemnt;

		if ((qMRefManagemnt != null) && (qMRefManagemnt.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefManagemnt = null;
		}

		accCerBodyManageReqCacheModel.useOfCertification =
			getUseOfCertification();

		String useOfCertification =
			accCerBodyManageReqCacheModel.useOfCertification;

		if ((useOfCertification != null) &&
			(useOfCertification.length() == 0)) {

			accCerBodyManageReqCacheModel.useOfCertification = null;
		}

		accCerBodyManageReqCacheModel.qMRefUseOfCerti = getQMRefUseOfCerti();

		String qMRefUseOfCerti = accCerBodyManageReqCacheModel.qMRefUseOfCerti;

		if ((qMRefUseOfCerti != null) && (qMRefUseOfCerti.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefUseOfCerti = null;
		}

		accCerBodyManageReqCacheModel.handlingReq = getHandlingReq();

		String handlingReq = accCerBodyManageReqCacheModel.handlingReq;

		if ((handlingReq != null) && (handlingReq.length() == 0)) {
			accCerBodyManageReqCacheModel.handlingReq = null;
		}

		accCerBodyManageReqCacheModel.qMRefHandling = getQMRefHandling();

		String qMRefHandling = accCerBodyManageReqCacheModel.qMRefHandling;

		if ((qMRefHandling != null) && (qMRefHandling.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefHandling = null;
		}

		accCerBodyManageReqCacheModel.impartialityPolicies =
			getImpartialityPolicies();

		String impartialityPolicies =
			accCerBodyManageReqCacheModel.impartialityPolicies;

		if ((impartialityPolicies != null) &&
			(impartialityPolicies.length() == 0)) {

			accCerBodyManageReqCacheModel.impartialityPolicies = null;
		}

		accCerBodyManageReqCacheModel.qMRefImpartPolicy =
			getQMRefImpartPolicy();

		String qMRefImpartPolicy =
			accCerBodyManageReqCacheModel.qMRefImpartPolicy;

		if ((qMRefImpartPolicy != null) && (qMRefImpartPolicy.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefImpartPolicy = null;
		}

		accCerBodyManageReqCacheModel.provisionInform = getProvisionInform();

		String provisionInform = accCerBodyManageReqCacheModel.provisionInform;

		if ((provisionInform != null) && (provisionInform.length() == 0)) {
			accCerBodyManageReqCacheModel.provisionInform = null;
		}

		accCerBodyManageReqCacheModel.qMRefProvision = getQMRefProvision();

		String qMRefProvision = accCerBodyManageReqCacheModel.qMRefProvision;

		if ((qMRefProvision != null) && (qMRefProvision.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefProvision = null;
		}

		accCerBodyManageReqCacheModel.certificationDoc = getCertificationDoc();

		String certificationDoc =
			accCerBodyManageReqCacheModel.certificationDoc;

		if ((certificationDoc != null) && (certificationDoc.length() == 0)) {
			accCerBodyManageReqCacheModel.certificationDoc = null;
		}

		accCerBodyManageReqCacheModel.qMRefCertification =
			getQMRefCertification();

		String qMRefCertification =
			accCerBodyManageReqCacheModel.qMRefCertification;

		if ((qMRefCertification != null) &&
			(qMRefCertification.length() == 0)) {

			accCerBodyManageReqCacheModel.qMRefCertification = null;
		}

		accCerBodyManageReqCacheModel.rulesGoverning = getRulesGoverning();

		String rulesGoverning = accCerBodyManageReqCacheModel.rulesGoverning;

		if ((rulesGoverning != null) && (rulesGoverning.length() == 0)) {
			accCerBodyManageReqCacheModel.rulesGoverning = null;
		}

		accCerBodyManageReqCacheModel.qMRefGoverning = getQMRefGoverning();

		String qMRefGoverning = accCerBodyManageReqCacheModel.qMRefGoverning;

		if ((qMRefGoverning != null) && (qMRefGoverning.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefGoverning = null;
		}

		accCerBodyManageReqCacheModel.enforcableArrangements =
			getEnforcableArrangements();

		String enforcableArrangements =
			accCerBodyManageReqCacheModel.enforcableArrangements;

		if ((enforcableArrangements != null) &&
			(enforcableArrangements.length() == 0)) {

			accCerBodyManageReqCacheModel.enforcableArrangements = null;
		}

		accCerBodyManageReqCacheModel.qMRefEnforcable = getQMRefEnforcable();

		String qMRefEnforcable = accCerBodyManageReqCacheModel.qMRefEnforcable;

		if ((qMRefEnforcable != null) && (qMRefEnforcable.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefEnforcable = null;
		}

		accCerBodyManageReqCacheModel.ensureConfidential =
			getEnsureConfidential();

		String ensureConfidential =
			accCerBodyManageReqCacheModel.ensureConfidential;

		if ((ensureConfidential != null) &&
			(ensureConfidential.length() == 0)) {

			accCerBodyManageReqCacheModel.ensureConfidential = null;
		}

		accCerBodyManageReqCacheModel.qMRefEnsureConfid =
			getQMRefEnsureConfid();

		String qMRefEnsureConfid =
			accCerBodyManageReqCacheModel.qMRefEnsureConfid;

		if ((qMRefEnsureConfid != null) && (qMRefEnsureConfid.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefEnsureConfid = null;
		}

		accCerBodyManageReqCacheModel.informingMechanism =
			getInformingMechanism();

		String informingMechanism =
			accCerBodyManageReqCacheModel.informingMechanism;

		if ((informingMechanism != null) &&
			(informingMechanism.length() == 0)) {

			accCerBodyManageReqCacheModel.informingMechanism = null;
		}

		accCerBodyManageReqCacheModel.qMRefInforming = getQMRefInforming();

		String qMRefInforming = accCerBodyManageReqCacheModel.qMRefInforming;

		if ((qMRefInforming != null) && (qMRefInforming.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefInforming = null;
		}

		accCerBodyManageReqCacheModel.applicationProcess =
			getApplicationProcess();

		String applicationProcess =
			accCerBodyManageReqCacheModel.applicationProcess;

		if ((applicationProcess != null) &&
			(applicationProcess.length() == 0)) {

			accCerBodyManageReqCacheModel.applicationProcess = null;
		}

		accCerBodyManageReqCacheModel.qMRefApplication = getQMRefApplication();

		String qMRefApplication =
			accCerBodyManageReqCacheModel.qMRefApplication;

		if ((qMRefApplication != null) && (qMRefApplication.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefApplication = null;
		}

		accCerBodyManageReqCacheModel.applicationReview =
			getApplicationReview();

		String applicationReview =
			accCerBodyManageReqCacheModel.applicationReview;

		if ((applicationReview != null) && (applicationReview.length() == 0)) {
			accCerBodyManageReqCacheModel.applicationReview = null;
		}

		accCerBodyManageReqCacheModel.qMRefReview = getQMRefReview();

		String qMRefReview = accCerBodyManageReqCacheModel.qMRefReview;

		if ((qMRefReview != null) && (qMRefReview.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefReview = null;
		}

		accCerBodyManageReqCacheModel.certificationCycle =
			getCertificationCycle();

		String certificationCycle =
			accCerBodyManageReqCacheModel.certificationCycle;

		if ((certificationCycle != null) &&
			(certificationCycle.length() == 0)) {

			accCerBodyManageReqCacheModel.certificationCycle = null;
		}

		accCerBodyManageReqCacheModel.qMRefCertiCycle = getQMRefCertiCycle();

		String qMRefCertiCycle = accCerBodyManageReqCacheModel.qMRefCertiCycle;

		if ((qMRefCertiCycle != null) && (qMRefCertiCycle.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefCertiCycle = null;
		}

		accCerBodyManageReqCacheModel.auditTime = getAuditTime();

		String auditTime = accCerBodyManageReqCacheModel.auditTime;

		if ((auditTime != null) && (auditTime.length() == 0)) {
			accCerBodyManageReqCacheModel.auditTime = null;
		}

		accCerBodyManageReqCacheModel.qMRefAuditTime = getQMRefAuditTime();

		String qMRefAuditTime = accCerBodyManageReqCacheModel.qMRefAuditTime;

		if ((qMRefAuditTime != null) && (qMRefAuditTime.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefAuditTime = null;
		}

		accCerBodyManageReqCacheModel.samplingProgram = getSamplingProgram();

		String samplingProgram = accCerBodyManageReqCacheModel.samplingProgram;

		if ((samplingProgram != null) && (samplingProgram.length() == 0)) {
			accCerBodyManageReqCacheModel.samplingProgram = null;
		}

		accCerBodyManageReqCacheModel.qMRefSampling = getQMRefSampling();

		String qMRefSampling = accCerBodyManageReqCacheModel.qMRefSampling;

		if ((qMRefSampling != null) && (qMRefSampling.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefSampling = null;
		}

		accCerBodyManageReqCacheModel.auditPlanning = getAuditPlanning();

		String auditPlanning = accCerBodyManageReqCacheModel.auditPlanning;

		if ((auditPlanning != null) && (auditPlanning.length() == 0)) {
			accCerBodyManageReqCacheModel.auditPlanning = null;
		}

		accCerBodyManageReqCacheModel.qMRefPlanning = getQMRefPlanning();

		String qMRefPlanning = accCerBodyManageReqCacheModel.qMRefPlanning;

		if ((qMRefPlanning != null) && (qMRefPlanning.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefPlanning = null;
		}

		accCerBodyManageReqCacheModel.auditTeam = getAuditTeam();

		String auditTeam = accCerBodyManageReqCacheModel.auditTeam;

		if ((auditTeam != null) && (auditTeam.length() == 0)) {
			accCerBodyManageReqCacheModel.auditTeam = null;
		}

		accCerBodyManageReqCacheModel.qMRefAuditTeam = getQMRefAuditTeam();

		String qMRefAuditTeam = accCerBodyManageReqCacheModel.qMRefAuditTeam;

		if ((qMRefAuditTeam != null) && (qMRefAuditTeam.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefAuditTeam = null;
		}

		accCerBodyManageReqCacheModel.onSiteAudit = getOnSiteAudit();

		String onSiteAudit = accCerBodyManageReqCacheModel.onSiteAudit;

		if ((onSiteAudit != null) && (onSiteAudit.length() == 0)) {
			accCerBodyManageReqCacheModel.onSiteAudit = null;
		}

		accCerBodyManageReqCacheModel.qMRefonSiteAudit = getQMRefonSiteAudit();

		String qMRefonSiteAudit =
			accCerBodyManageReqCacheModel.qMRefonSiteAudit;

		if ((qMRefonSiteAudit != null) && (qMRefonSiteAudit.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefonSiteAudit = null;
		}

		accCerBodyManageReqCacheModel.auditReport = getAuditReport();

		String auditReport = accCerBodyManageReqCacheModel.auditReport;

		if ((auditReport != null) && (auditReport.length() == 0)) {
			accCerBodyManageReqCacheModel.auditReport = null;
		}

		accCerBodyManageReqCacheModel.qMRefAuditReport = getQMRefAuditReport();

		String qMRefAuditReport =
			accCerBodyManageReqCacheModel.qMRefAuditReport;

		if ((qMRefAuditReport != null) && (qMRefAuditReport.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefAuditReport = null;
		}

		accCerBodyManageReqCacheModel.correctiveActions =
			getCorrectiveActions();

		String correctiveActions =
			accCerBodyManageReqCacheModel.correctiveActions;

		if ((correctiveActions != null) && (correctiveActions.length() == 0)) {
			accCerBodyManageReqCacheModel.correctiveActions = null;
		}

		accCerBodyManageReqCacheModel.qMRefCorrective = getQMRefCorrective();

		String qMRefCorrective = accCerBodyManageReqCacheModel.qMRefCorrective;

		if ((qMRefCorrective != null) && (qMRefCorrective.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefCorrective = null;
		}

		accCerBodyManageReqCacheModel.reviewPriorDecision =
			getReviewPriorDecision();

		String reviewPriorDecision =
			accCerBodyManageReqCacheModel.reviewPriorDecision;

		if ((reviewPriorDecision != null) &&
			(reviewPriorDecision.length() == 0)) {

			accCerBodyManageReqCacheModel.reviewPriorDecision = null;
		}

		accCerBodyManageReqCacheModel.qMRefReviewPrior = getQMRefReviewPrior();

		String qMRefReviewPrior =
			accCerBodyManageReqCacheModel.qMRefReviewPrior;

		if ((qMRefReviewPrior != null) && (qMRefReviewPrior.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefReviewPrior = null;
		}

		accCerBodyManageReqCacheModel.transferCertification =
			getTransferCertification();

		String transferCertification =
			accCerBodyManageReqCacheModel.transferCertification;

		if ((transferCertification != null) &&
			(transferCertification.length() == 0)) {

			accCerBodyManageReqCacheModel.transferCertification = null;
		}

		accCerBodyManageReqCacheModel.qMRefTransfer = getQMRefTransfer();

		String qMRefTransfer = accCerBodyManageReqCacheModel.qMRefTransfer;

		if ((qMRefTransfer != null) && (qMRefTransfer.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefTransfer = null;
		}

		accCerBodyManageReqCacheModel.suspensionPolicies =
			getSuspensionPolicies();

		String suspensionPolicies =
			accCerBodyManageReqCacheModel.suspensionPolicies;

		if ((suspensionPolicies != null) &&
			(suspensionPolicies.length() == 0)) {

			accCerBodyManageReqCacheModel.suspensionPolicies = null;
		}

		accCerBodyManageReqCacheModel.qMRefSuspension = getQMRefSuspension();

		String qMRefSuspension = accCerBodyManageReqCacheModel.qMRefSuspension;

		if ((qMRefSuspension != null) && (qMRefSuspension.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefSuspension = null;
		}

		accCerBodyManageReqCacheModel.suspensionProcedure =
			getSuspensionProcedure();

		String suspensionProcedure =
			accCerBodyManageReqCacheModel.suspensionProcedure;

		if ((suspensionProcedure != null) &&
			(suspensionProcedure.length() == 0)) {

			accCerBodyManageReqCacheModel.suspensionProcedure = null;
		}

		accCerBodyManageReqCacheModel.qMRefSuspensionProc =
			getQMRefSuspensionProc();

		String qMRefSuspensionProc =
			accCerBodyManageReqCacheModel.qMRefSuspensionProc;

		if ((qMRefSuspensionProc != null) &&
			(qMRefSuspensionProc.length() == 0)) {

			accCerBodyManageReqCacheModel.qMRefSuspensionProc = null;
		}

		accCerBodyManageReqCacheModel.decisionOnAppeals =
			getDecisionOnAppeals();

		String decisionOnAppeals =
			accCerBodyManageReqCacheModel.decisionOnAppeals;

		if ((decisionOnAppeals != null) && (decisionOnAppeals.length() == 0)) {
			accCerBodyManageReqCacheModel.decisionOnAppeals = null;
		}

		accCerBodyManageReqCacheModel.qMRefDecision = getQMRefDecision();

		String qMRefDecision = accCerBodyManageReqCacheModel.qMRefDecision;

		if ((qMRefDecision != null) && (qMRefDecision.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefDecision = null;
		}

		accCerBodyManageReqCacheModel.handlingComplaints =
			getHandlingComplaints();

		String handlingComplaints =
			accCerBodyManageReqCacheModel.handlingComplaints;

		if ((handlingComplaints != null) &&
			(handlingComplaints.length() == 0)) {

			accCerBodyManageReqCacheModel.handlingComplaints = null;
		}

		accCerBodyManageReqCacheModel.qMRefComplaints = getQMRefComplaints();

		String qMRefComplaints = accCerBodyManageReqCacheModel.qMRefComplaints;

		if ((qMRefComplaints != null) && (qMRefComplaints.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefComplaints = null;
		}

		accCerBodyManageReqCacheModel.recordRetentionPolicy =
			getRecordRetentionPolicy();

		String recordRetentionPolicy =
			accCerBodyManageReqCacheModel.recordRetentionPolicy;

		if ((recordRetentionPolicy != null) &&
			(recordRetentionPolicy.length() == 0)) {

			accCerBodyManageReqCacheModel.recordRetentionPolicy = null;
		}

		accCerBodyManageReqCacheModel.qMRefRetentionPolicy =
			getQMRefRetentionPolicy();

		String qMRefRetentionPolicy =
			accCerBodyManageReqCacheModel.qMRefRetentionPolicy;

		if ((qMRefRetentionPolicy != null) &&
			(qMRefRetentionPolicy.length() == 0)) {

			accCerBodyManageReqCacheModel.qMRefRetentionPolicy = null;
		}

		accCerBodyManageReqCacheModel.recordRetentionProc =
			getRecordRetentionProc();

		String recordRetentionProc =
			accCerBodyManageReqCacheModel.recordRetentionProc;

		if ((recordRetentionProc != null) &&
			(recordRetentionProc.length() == 0)) {

			accCerBodyManageReqCacheModel.recordRetentionProc = null;
		}

		accCerBodyManageReqCacheModel.qMRefRetentionProc =
			getQMRefRetentionProc();

		String qMRefRetentionProc =
			accCerBodyManageReqCacheModel.qMRefRetentionProc;

		if ((qMRefRetentionProc != null) &&
			(qMRefRetentionProc.length() == 0)) {

			accCerBodyManageReqCacheModel.qMRefRetentionProc = null;
		}

		accCerBodyManageReqCacheModel.manageSysPolicies =
			getManageSysPolicies();

		String manageSysPolicies =
			accCerBodyManageReqCacheModel.manageSysPolicies;

		if ((manageSysPolicies != null) && (manageSysPolicies.length() == 0)) {
			accCerBodyManageReqCacheModel.manageSysPolicies = null;
		}

		accCerBodyManageReqCacheModel.qMRefPolicies = getQMRefPolicies();

		String qMRefPolicies = accCerBodyManageReqCacheModel.qMRefPolicies;

		if ((qMRefPolicies != null) && (qMRefPolicies.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefPolicies = null;
		}

		accCerBodyManageReqCacheModel.manageSysObjective =
			getManageSysObjective();

		String manageSysObjective =
			accCerBodyManageReqCacheModel.manageSysObjective;

		if ((manageSysObjective != null) &&
			(manageSysObjective.length() == 0)) {

			accCerBodyManageReqCacheModel.manageSysObjective = null;
		}

		accCerBodyManageReqCacheModel.qMRefObjective = getQMRefObjective();

		String qMRefObjective = accCerBodyManageReqCacheModel.qMRefObjective;

		if ((qMRefObjective != null) && (qMRefObjective.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefObjective = null;
		}

		accCerBodyManageReqCacheModel.manageSysManual = getManageSysManual();

		String manageSysManual = accCerBodyManageReqCacheModel.manageSysManual;

		if ((manageSysManual != null) && (manageSysManual.length() == 0)) {
			accCerBodyManageReqCacheModel.manageSysManual = null;
		}

		accCerBodyManageReqCacheModel.qMRefManual = getQMRefManual();

		String qMRefManual = accCerBodyManageReqCacheModel.qMRefManual;

		if ((qMRefManual != null) && (qMRefManual.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefManual = null;
		}

		accCerBodyManageReqCacheModel.docControlProcedure =
			getDocControlProcedure();

		String docControlProcedure =
			accCerBodyManageReqCacheModel.docControlProcedure;

		if ((docControlProcedure != null) &&
			(docControlProcedure.length() == 0)) {

			accCerBodyManageReqCacheModel.docControlProcedure = null;
		}

		accCerBodyManageReqCacheModel.qMRefDocControl = getQMRefDocControl();

		String qMRefDocControl = accCerBodyManageReqCacheModel.qMRefDocControl;

		if ((qMRefDocControl != null) && (qMRefDocControl.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefDocControl = null;
		}

		accCerBodyManageReqCacheModel.recControlProc = getRecControlProc();

		String recControlProc = accCerBodyManageReqCacheModel.recControlProc;

		if ((recControlProc != null) && (recControlProc.length() == 0)) {
			accCerBodyManageReqCacheModel.recControlProc = null;
		}

		accCerBodyManageReqCacheModel.qMRefRecControl = getQMRefRecControl();

		String qMRefRecControl = accCerBodyManageReqCacheModel.qMRefRecControl;

		if ((qMRefRecControl != null) && (qMRefRecControl.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefRecControl = null;
		}

		accCerBodyManageReqCacheModel.managementReview = getManagementReview();

		String managementReview =
			accCerBodyManageReqCacheModel.managementReview;

		if ((managementReview != null) && (managementReview.length() == 0)) {
			accCerBodyManageReqCacheModel.managementReview = null;
		}

		accCerBodyManageReqCacheModel.qMRefManagementRev =
			getQMRefManagementRev();

		String qMRefManagementRev =
			accCerBodyManageReqCacheModel.qMRefManagementRev;

		if ((qMRefManagementRev != null) &&
			(qMRefManagementRev.length() == 0)) {

			accCerBodyManageReqCacheModel.qMRefManagementRev = null;
		}

		accCerBodyManageReqCacheModel.internalAudits = getInternalAudits();

		String internalAudits = accCerBodyManageReqCacheModel.internalAudits;

		if ((internalAudits != null) && (internalAudits.length() == 0)) {
			accCerBodyManageReqCacheModel.internalAudits = null;
		}

		accCerBodyManageReqCacheModel.qMRefInternal = getQMRefInternal();

		String qMRefInternal = accCerBodyManageReqCacheModel.qMRefInternal;

		if ((qMRefInternal != null) && (qMRefInternal.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefInternal = null;
		}

		accCerBodyManageReqCacheModel.identificationProc =
			getIdentificationProc();

		String identificationProc =
			accCerBodyManageReqCacheModel.identificationProc;

		if ((identificationProc != null) &&
			(identificationProc.length() == 0)) {

			accCerBodyManageReqCacheModel.identificationProc = null;
		}

		accCerBodyManageReqCacheModel.qMRefIdentification =
			getQMRefIdentification();

		String qMRefIdentification =
			accCerBodyManageReqCacheModel.qMRefIdentification;

		if ((qMRefIdentification != null) &&
			(qMRefIdentification.length() == 0)) {

			accCerBodyManageReqCacheModel.qMRefIdentification = null;
		}

		accCerBodyManageReqCacheModel.qMSScopeB = getQMSScopeB();

		String qMSScopeB = accCerBodyManageReqCacheModel.qMSScopeB;

		if ((qMSScopeB != null) && (qMSScopeB.length() == 0)) {
			accCerBodyManageReqCacheModel.qMSScopeB = null;
		}

		accCerBodyManageReqCacheModel.qMRefQMSScopeB = getQMRefQMSScopeB();

		String qMRefQMSScopeB = accCerBodyManageReqCacheModel.qMRefQMSScopeB;

		if ((qMRefQMSScopeB != null) && (qMRefQMSScopeB.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefQMSScopeB = null;
		}

		accCerBodyManageReqCacheModel.designDevB = getDesignDevB();

		String designDevB = accCerBodyManageReqCacheModel.designDevB;

		if ((designDevB != null) && (designDevB.length() == 0)) {
			accCerBodyManageReqCacheModel.designDevB = null;
		}

		accCerBodyManageReqCacheModel.qMRefDesignB = getQMRefDesignB();

		String qMRefDesignB = accCerBodyManageReqCacheModel.qMRefDesignB;

		if ((qMRefDesignB != null) && (qMRefDesignB.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefDesignB = null;
		}

		accCerBodyManageReqCacheModel.interestedPartyNeedsB =
			getInterestedPartyNeedsB();

		String interestedPartyNeedsB =
			accCerBodyManageReqCacheModel.interestedPartyNeedsB;

		if ((interestedPartyNeedsB != null) &&
			(interestedPartyNeedsB.length() == 0)) {

			accCerBodyManageReqCacheModel.interestedPartyNeedsB = null;
		}

		accCerBodyManageReqCacheModel.qMRefInterestedB = getQMRefInterestedB();

		String qMRefInterestedB =
			accCerBodyManageReqCacheModel.qMRefInterestedB;

		if ((qMRefInterestedB != null) && (qMRefInterestedB.length() == 0)) {
			accCerBodyManageReqCacheModel.qMRefInterestedB = null;
		}

		accCerBodyManageReqCacheModel.managementReviewB =
			getManagementReviewB();

		String managementReviewB =
			accCerBodyManageReqCacheModel.managementReviewB;

		if ((managementReviewB != null) && (managementReviewB.length() == 0)) {
			accCerBodyManageReqCacheModel.managementReviewB = null;
		}

		accCerBodyManageReqCacheModel.qMRefmanagementReviewB =
			getQMRefmanagementReviewB();

		String qMRefmanagementReviewB =
			accCerBodyManageReqCacheModel.qMRefmanagementReviewB;

		if ((qMRefmanagementReviewB != null) &&
			(qMRefmanagementReviewB.length() == 0)) {

			accCerBodyManageReqCacheModel.qMRefmanagementReviewB = null;
		}

		accCerBodyManageReqCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accCerBodyManageReqCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccCerBodyManageReq, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccCerBodyManageReq, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccCerBodyManageReq, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccCerBodyManageReq)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccCerBodyManageReq>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccCerBodyManageReq.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accCerBodyManageReqId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _optionFollow;
	private String _impartialityPolicy;
	private String _qMRefImpartiality;
	private String _riskAssessment;
	private String _qMRefRisk;
	private String _orgStructure;
	private String _qMRefOrgStruct;
	private String _termsOfReference;
	private String _qMRefTerms;
	private String _processForControl;
	private String _qMRefProcess;
	private String _criteriaReq;
	private String _qMRefCriteria;
	private String _initialCompetence;
	private String _qMRefInitial;
	private String _selectingTraining;
	private String _qMRefSelecting;
	private String _monitoringCompetence;
	private String _qMRefMonitoring;
	private String _writtenAgreement;
	private String _qMRefWritten;
	private String _descOfProcess;
	private String _qMRefDescProcess;
	private String _processForMonitor;
	private String _qMRefMonitorProcess;
	private String _auditProcess;
	private String _qMRefAuditProcess;
	private String _processGranting;
	private String _qMRefGranting;
	private String _managemntSys;
	private String _qMRefManagemnt;
	private String _useOfCertification;
	private String _qMRefUseOfCerti;
	private String _handlingReq;
	private String _qMRefHandling;
	private String _impartialityPolicies;
	private String _qMRefImpartPolicy;
	private String _provisionInform;
	private String _qMRefProvision;
	private String _certificationDoc;
	private String _qMRefCertification;
	private String _rulesGoverning;
	private String _qMRefGoverning;
	private String _enforcableArrangements;
	private String _qMRefEnforcable;
	private String _ensureConfidential;
	private String _qMRefEnsureConfid;
	private String _informingMechanism;
	private String _qMRefInforming;
	private String _applicationProcess;
	private String _qMRefApplication;
	private String _applicationReview;
	private String _qMRefReview;
	private String _certificationCycle;
	private String _qMRefCertiCycle;
	private String _auditTime;
	private String _qMRefAuditTime;
	private String _samplingProgram;
	private String _qMRefSampling;
	private String _auditPlanning;
	private String _qMRefPlanning;
	private String _auditTeam;
	private String _qMRefAuditTeam;
	private String _onSiteAudit;
	private String _qMRefonSiteAudit;
	private String _auditReport;
	private String _qMRefAuditReport;
	private String _correctiveActions;
	private String _qMRefCorrective;
	private String _reviewPriorDecision;
	private String _qMRefReviewPrior;
	private String _transferCertification;
	private String _qMRefTransfer;
	private String _suspensionPolicies;
	private String _qMRefSuspension;
	private String _suspensionProcedure;
	private String _qMRefSuspensionProc;
	private String _decisionOnAppeals;
	private String _qMRefDecision;
	private String _handlingComplaints;
	private String _qMRefComplaints;
	private String _recordRetentionPolicy;
	private String _qMRefRetentionPolicy;
	private String _recordRetentionProc;
	private String _qMRefRetentionProc;
	private String _manageSysPolicies;
	private String _qMRefPolicies;
	private String _manageSysObjective;
	private String _qMRefObjective;
	private String _manageSysManual;
	private String _qMRefManual;
	private String _docControlProcedure;
	private String _qMRefDocControl;
	private String _recControlProc;
	private String _qMRefRecControl;
	private String _managementReview;
	private String _qMRefManagementRev;
	private String _internalAudits;
	private String _qMRefInternal;
	private String _identificationProc;
	private String _qMRefIdentification;
	private String _qMSScopeB;
	private String _qMRefQMSScopeB;
	private String _designDevB;
	private String _qMRefDesignB;
	private String _interestedPartyNeedsB;
	private String _qMRefInterestedB;
	private String _managementReviewB;
	private String _qMRefmanagementReviewB;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccCerBodyManageReq, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccCerBodyManageReq)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accCerBodyManageReqId", _accCerBodyManageReqId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("optionFollow", _optionFollow);
		_columnOriginalValues.put("impartialityPolicy", _impartialityPolicy);
		_columnOriginalValues.put("qMRefImpartiality", _qMRefImpartiality);
		_columnOriginalValues.put("riskAssessment", _riskAssessment);
		_columnOriginalValues.put("qMRefRisk", _qMRefRisk);
		_columnOriginalValues.put("orgStructure", _orgStructure);
		_columnOriginalValues.put("qMRefOrgStruct", _qMRefOrgStruct);
		_columnOriginalValues.put("termsOfReference", _termsOfReference);
		_columnOriginalValues.put("qMRefTerms", _qMRefTerms);
		_columnOriginalValues.put("processForControl", _processForControl);
		_columnOriginalValues.put("qMRefProcess", _qMRefProcess);
		_columnOriginalValues.put("criteriaReq", _criteriaReq);
		_columnOriginalValues.put("qMRefCriteria", _qMRefCriteria);
		_columnOriginalValues.put("initialCompetence", _initialCompetence);
		_columnOriginalValues.put("qMRefInitial", _qMRefInitial);
		_columnOriginalValues.put("selectingTraining", _selectingTraining);
		_columnOriginalValues.put("qMRefSelecting", _qMRefSelecting);
		_columnOriginalValues.put(
			"monitoringCompetence", _monitoringCompetence);
		_columnOriginalValues.put("qMRefMonitoring", _qMRefMonitoring);
		_columnOriginalValues.put("writtenAgreement", _writtenAgreement);
		_columnOriginalValues.put("qMRefWritten", _qMRefWritten);
		_columnOriginalValues.put("descOfProcess", _descOfProcess);
		_columnOriginalValues.put("qMRefDescProcess", _qMRefDescProcess);
		_columnOriginalValues.put("processForMonitor", _processForMonitor);
		_columnOriginalValues.put("qMRefMonitorProcess", _qMRefMonitorProcess);
		_columnOriginalValues.put("auditProcess", _auditProcess);
		_columnOriginalValues.put("qMRefAuditProcess", _qMRefAuditProcess);
		_columnOriginalValues.put("processGranting", _processGranting);
		_columnOriginalValues.put("qMRefGranting", _qMRefGranting);
		_columnOriginalValues.put("managemntSys", _managemntSys);
		_columnOriginalValues.put("qMRefManagemnt", _qMRefManagemnt);
		_columnOriginalValues.put("useOfCertification", _useOfCertification);
		_columnOriginalValues.put("qMRefUseOfCerti", _qMRefUseOfCerti);
		_columnOriginalValues.put("handlingReq", _handlingReq);
		_columnOriginalValues.put("qMRefHandling", _qMRefHandling);
		_columnOriginalValues.put(
			"impartialityPolicies", _impartialityPolicies);
		_columnOriginalValues.put("qMRefImpartPolicy", _qMRefImpartPolicy);
		_columnOriginalValues.put("provisionInform", _provisionInform);
		_columnOriginalValues.put("qMRefProvision", _qMRefProvision);
		_columnOriginalValues.put("certificationDoc", _certificationDoc);
		_columnOriginalValues.put("qMRefCertification", _qMRefCertification);
		_columnOriginalValues.put("rulesGoverning", _rulesGoverning);
		_columnOriginalValues.put("qMRefGoverning", _qMRefGoverning);
		_columnOriginalValues.put(
			"enforcableArrangements", _enforcableArrangements);
		_columnOriginalValues.put("qMRefEnforcable", _qMRefEnforcable);
		_columnOriginalValues.put("ensureConfidential", _ensureConfidential);
		_columnOriginalValues.put("qMRefEnsureConfid", _qMRefEnsureConfid);
		_columnOriginalValues.put("informingMechanism", _informingMechanism);
		_columnOriginalValues.put("qMRefInforming", _qMRefInforming);
		_columnOriginalValues.put("applicationProcess", _applicationProcess);
		_columnOriginalValues.put("qMRefApplication", _qMRefApplication);
		_columnOriginalValues.put("applicationReview", _applicationReview);
		_columnOriginalValues.put("qMRefReview", _qMRefReview);
		_columnOriginalValues.put("certificationCycle", _certificationCycle);
		_columnOriginalValues.put("qMRefCertiCycle", _qMRefCertiCycle);
		_columnOriginalValues.put("auditTime", _auditTime);
		_columnOriginalValues.put("qMRefAuditTime", _qMRefAuditTime);
		_columnOriginalValues.put("samplingProgram", _samplingProgram);
		_columnOriginalValues.put("qMRefSampling", _qMRefSampling);
		_columnOriginalValues.put("auditPlanning", _auditPlanning);
		_columnOriginalValues.put("qMRefPlanning", _qMRefPlanning);
		_columnOriginalValues.put("auditTeam", _auditTeam);
		_columnOriginalValues.put("qMRefAuditTeam", _qMRefAuditTeam);
		_columnOriginalValues.put("onSiteAudit", _onSiteAudit);
		_columnOriginalValues.put("qMRefonSiteAudit", _qMRefonSiteAudit);
		_columnOriginalValues.put("auditReport", _auditReport);
		_columnOriginalValues.put("qMRefAuditReport", _qMRefAuditReport);
		_columnOriginalValues.put("correctiveActions", _correctiveActions);
		_columnOriginalValues.put("qMRefCorrective", _qMRefCorrective);
		_columnOriginalValues.put("reviewPriorDecision", _reviewPriorDecision);
		_columnOriginalValues.put("qMRefReviewPrior", _qMRefReviewPrior);
		_columnOriginalValues.put(
			"transferCertification", _transferCertification);
		_columnOriginalValues.put("qMRefTransfer", _qMRefTransfer);
		_columnOriginalValues.put("suspensionPolicies", _suspensionPolicies);
		_columnOriginalValues.put("qMRefSuspension", _qMRefSuspension);
		_columnOriginalValues.put("suspensionProcedure", _suspensionProcedure);
		_columnOriginalValues.put("qMRefSuspensionProc", _qMRefSuspensionProc);
		_columnOriginalValues.put("decisionOnAppeals", _decisionOnAppeals);
		_columnOriginalValues.put("qMRefDecision", _qMRefDecision);
		_columnOriginalValues.put("handlingComplaints", _handlingComplaints);
		_columnOriginalValues.put("qMRefComplaints", _qMRefComplaints);
		_columnOriginalValues.put(
			"recordRetentionPolicy", _recordRetentionPolicy);
		_columnOriginalValues.put(
			"qMRefRetentionPolicy", _qMRefRetentionPolicy);
		_columnOriginalValues.put("recordRetentionProc", _recordRetentionProc);
		_columnOriginalValues.put("qMRefRetentionProc", _qMRefRetentionProc);
		_columnOriginalValues.put("manageSysPolicies", _manageSysPolicies);
		_columnOriginalValues.put("qMRefPolicies", _qMRefPolicies);
		_columnOriginalValues.put("manageSysObjective", _manageSysObjective);
		_columnOriginalValues.put("qMRefObjective", _qMRefObjective);
		_columnOriginalValues.put("manageSysManual", _manageSysManual);
		_columnOriginalValues.put("qMRefManual", _qMRefManual);
		_columnOriginalValues.put("docControlProcedure", _docControlProcedure);
		_columnOriginalValues.put("qMRefDocControl", _qMRefDocControl);
		_columnOriginalValues.put("recControlProc", _recControlProc);
		_columnOriginalValues.put("qMRefRecControl", _qMRefRecControl);
		_columnOriginalValues.put("managementReview", _managementReview);
		_columnOriginalValues.put("qMRefManagementRev", _qMRefManagementRev);
		_columnOriginalValues.put("internalAudits", _internalAudits);
		_columnOriginalValues.put("qMRefInternal", _qMRefInternal);
		_columnOriginalValues.put("identificationProc", _identificationProc);
		_columnOriginalValues.put("qMRefIdentification", _qMRefIdentification);
		_columnOriginalValues.put("qMSScopeB", _qMSScopeB);
		_columnOriginalValues.put("qMRefQMSScopeB", _qMRefQMSScopeB);
		_columnOriginalValues.put("designDevB", _designDevB);
		_columnOriginalValues.put("qMRefDesignB", _qMRefDesignB);
		_columnOriginalValues.put(
			"interestedPartyNeedsB", _interestedPartyNeedsB);
		_columnOriginalValues.put("qMRefInterestedB", _qMRefInterestedB);
		_columnOriginalValues.put("managementReviewB", _managementReviewB);
		_columnOriginalValues.put(
			"qMRefmanagementReviewB", _qMRefmanagementReviewB);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private AccCerBodyManageReq _escapedModel;

}