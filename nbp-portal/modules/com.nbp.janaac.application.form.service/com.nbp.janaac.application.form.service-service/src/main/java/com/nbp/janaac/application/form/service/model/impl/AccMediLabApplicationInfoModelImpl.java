/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccMediLabApplicationInfo;
import com.nbp.janaac.application.form.service.model.AccMediLabApplicationInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccMediLabApplicationInfo service. Represents a row in the &quot;nbp_janaac_acc_medi_app_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccMediLabApplicationInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccMediLabApplicationInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccMediLabApplicationInfoImpl
 * @generated
 */
@JSON(strict = true)
public class AccMediLabApplicationInfoModelImpl
	extends BaseModelImpl<AccMediLabApplicationInfo>
	implements AccMediLabApplicationInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc medi lab application info model instance should use the <code>AccMediLabApplicationInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_medi_app_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accMediLabApplicationInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nameOfApplicant", Types.VARCHAR}, {"applicantAddress", Types.VARCHAR},
		{"appliTelephoneNo", Types.VARCHAR}, {"appliFaxNo", Types.VARCHAR},
		{"appliWebsite", Types.VARCHAR}, {"laboratoryName", Types.VARCHAR},
		{"laboratoryAddress", Types.VARCHAR}, {"nameOfIncharge", Types.VARCHAR},
		{"emailOfIncharge", Types.VARCHAR}, {"personnelQMName", Types.VARCHAR},
		{"personnelQMEmail", Types.VARCHAR},
		{"deputyInchargeName", Types.VARCHAR},
		{"deputyInchargeEmail", Types.VARCHAR},
		{"personnelFMName", Types.VARCHAR}, {"personnelFMEmail", Types.VARCHAR},
		{"accRequestType", Types.VARCHAR},
		{"authorizedPersonnelName", Types.VARCHAR},
		{"authorizedPosition", Types.VARCHAR},
		{"authorizedPersonnelDate", Types.TIMESTAMP},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accMediLabApplicationInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nameOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appliTelephoneNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appliFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appliWebsite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("laboratoryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("laboratoryAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfIncharge", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailOfIncharge", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelQMName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelQMEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputyInchargeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deputyInchargeEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelFMName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelFMEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accRequestType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedPersonnelName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedPersonnelDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_medi_app_info (uuid_ VARCHAR(75) null,accMediLabApplicationInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nameOfApplicant VARCHAR(75) null,applicantAddress VARCHAR(75) null,appliTelephoneNo VARCHAR(75) null,appliFaxNo VARCHAR(75) null,appliWebsite VARCHAR(75) null,laboratoryName VARCHAR(75) null,laboratoryAddress VARCHAR(75) null,nameOfIncharge VARCHAR(75) null,emailOfIncharge VARCHAR(75) null,personnelQMName VARCHAR(75) null,personnelQMEmail VARCHAR(75) null,deputyInchargeName VARCHAR(75) null,deputyInchargeEmail VARCHAR(75) null,personnelFMName VARCHAR(75) null,personnelFMEmail VARCHAR(75) null,accRequestType VARCHAR(75) null,authorizedPersonnelName VARCHAR(75) null,authorizedPosition VARCHAR(75) null,authorizedPersonnelDate DATE null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_medi_app_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accMediLabApplicationInfo.accMediLabApplicationInfoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_medi_app_info.accMediLabApplicationInfoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCMEDILABAPPLICATIONINFOID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccMediLabApplicationInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accMediLabApplicationInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccMediLabApplicationInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accMediLabApplicationInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccMediLabApplicationInfo.class;
	}

	@Override
	public String getModelClassName() {
		return AccMediLabApplicationInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccMediLabApplicationInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccMediLabApplicationInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabApplicationInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccMediLabApplicationInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccMediLabApplicationInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccMediLabApplicationInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccMediLabApplicationInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccMediLabApplicationInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccMediLabApplicationInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccMediLabApplicationInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccMediLabApplicationInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccMediLabApplicationInfo, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccMediLabApplicationInfo::getUuid);
			attributeGetterFunctions.put(
				"accMediLabApplicationInfoId",
				AccMediLabApplicationInfo::getAccMediLabApplicationInfoId);
			attributeGetterFunctions.put(
				"groupId", AccMediLabApplicationInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccMediLabApplicationInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccMediLabApplicationInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", AccMediLabApplicationInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccMediLabApplicationInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccMediLabApplicationInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"nameOfApplicant",
				AccMediLabApplicationInfo::getNameOfApplicant);
			attributeGetterFunctions.put(
				"applicantAddress",
				AccMediLabApplicationInfo::getApplicantAddress);
			attributeGetterFunctions.put(
				"appliTelephoneNo",
				AccMediLabApplicationInfo::getAppliTelephoneNo);
			attributeGetterFunctions.put(
				"appliFaxNo", AccMediLabApplicationInfo::getAppliFaxNo);
			attributeGetterFunctions.put(
				"appliWebsite", AccMediLabApplicationInfo::getAppliWebsite);
			attributeGetterFunctions.put(
				"laboratoryName", AccMediLabApplicationInfo::getLaboratoryName);
			attributeGetterFunctions.put(
				"laboratoryAddress",
				AccMediLabApplicationInfo::getLaboratoryAddress);
			attributeGetterFunctions.put(
				"nameOfIncharge", AccMediLabApplicationInfo::getNameOfIncharge);
			attributeGetterFunctions.put(
				"emailOfIncharge",
				AccMediLabApplicationInfo::getEmailOfIncharge);
			attributeGetterFunctions.put(
				"personnelQMName",
				AccMediLabApplicationInfo::getPersonnelQMName);
			attributeGetterFunctions.put(
				"personnelQMEmail",
				AccMediLabApplicationInfo::getPersonnelQMEmail);
			attributeGetterFunctions.put(
				"deputyInchargeName",
				AccMediLabApplicationInfo::getDeputyInchargeName);
			attributeGetterFunctions.put(
				"deputyInchargeEmail",
				AccMediLabApplicationInfo::getDeputyInchargeEmail);
			attributeGetterFunctions.put(
				"personnelFMName",
				AccMediLabApplicationInfo::getPersonnelFMName);
			attributeGetterFunctions.put(
				"personnelFMEmail",
				AccMediLabApplicationInfo::getPersonnelFMEmail);
			attributeGetterFunctions.put(
				"accRequestType", AccMediLabApplicationInfo::getAccRequestType);
			attributeGetterFunctions.put(
				"authorizedPersonnelName",
				AccMediLabApplicationInfo::getAuthorizedPersonnelName);
			attributeGetterFunctions.put(
				"authorizedPosition",
				AccMediLabApplicationInfo::getAuthorizedPosition);
			attributeGetterFunctions.put(
				"authorizedPersonnelDate",
				AccMediLabApplicationInfo::getAuthorizedPersonnelDate);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccMediLabApplicationInfo::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccMediLabApplicationInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccMediLabApplicationInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccMediLabApplicationInfo, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setUuid);
			attributeSetterBiConsumers.put(
				"accMediLabApplicationInfoId",
				(BiConsumer<AccMediLabApplicationInfo, Long>)
					AccMediLabApplicationInfo::setAccMediLabApplicationInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccMediLabApplicationInfo, Long>)
					AccMediLabApplicationInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccMediLabApplicationInfo, Long>)
					AccMediLabApplicationInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccMediLabApplicationInfo, Long>)
					AccMediLabApplicationInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccMediLabApplicationInfo, Date>)
					AccMediLabApplicationInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccMediLabApplicationInfo, Date>)
					AccMediLabApplicationInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nameOfApplicant",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setNameOfApplicant);
			attributeSetterBiConsumers.put(
				"applicantAddress",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setApplicantAddress);
			attributeSetterBiConsumers.put(
				"appliTelephoneNo",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setAppliTelephoneNo);
			attributeSetterBiConsumers.put(
				"appliFaxNo",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setAppliFaxNo);
			attributeSetterBiConsumers.put(
				"appliWebsite",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setAppliWebsite);
			attributeSetterBiConsumers.put(
				"laboratoryName",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setLaboratoryName);
			attributeSetterBiConsumers.put(
				"laboratoryAddress",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setLaboratoryAddress);
			attributeSetterBiConsumers.put(
				"nameOfIncharge",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setNameOfIncharge);
			attributeSetterBiConsumers.put(
				"emailOfIncharge",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setEmailOfIncharge);
			attributeSetterBiConsumers.put(
				"personnelQMName",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setPersonnelQMName);
			attributeSetterBiConsumers.put(
				"personnelQMEmail",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setPersonnelQMEmail);
			attributeSetterBiConsumers.put(
				"deputyInchargeName",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setDeputyInchargeName);
			attributeSetterBiConsumers.put(
				"deputyInchargeEmail",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setDeputyInchargeEmail);
			attributeSetterBiConsumers.put(
				"personnelFMName",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setPersonnelFMName);
			attributeSetterBiConsumers.put(
				"personnelFMEmail",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setPersonnelFMEmail);
			attributeSetterBiConsumers.put(
				"accRequestType",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setAccRequestType);
			attributeSetterBiConsumers.put(
				"authorizedPersonnelName",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setAuthorizedPersonnelName);
			attributeSetterBiConsumers.put(
				"authorizedPosition",
				(BiConsumer<AccMediLabApplicationInfo, String>)
					AccMediLabApplicationInfo::setAuthorizedPosition);
			attributeSetterBiConsumers.put(
				"authorizedPersonnelDate",
				(BiConsumer<AccMediLabApplicationInfo, Date>)
					AccMediLabApplicationInfo::setAuthorizedPersonnelDate);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccMediLabApplicationInfo, Long>)
					AccMediLabApplicationInfo::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccMediLabApplicationInfoId() {
		return _accMediLabApplicationInfoId;
	}

	@Override
	public void setAccMediLabApplicationInfoId(
		long accMediLabApplicationInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accMediLabApplicationInfoId = accMediLabApplicationInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNameOfApplicant() {
		if (_nameOfApplicant == null) {
			return "";
		}
		else {
			return _nameOfApplicant;
		}
	}

	@Override
	public void setNameOfApplicant(String nameOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfApplicant = nameOfApplicant;
	}

	@JSON
	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return "";
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantAddress = applicantAddress;
	}

	@JSON
	@Override
	public String getAppliTelephoneNo() {
		if (_appliTelephoneNo == null) {
			return "";
		}
		else {
			return _appliTelephoneNo;
		}
	}

	@Override
	public void setAppliTelephoneNo(String appliTelephoneNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appliTelephoneNo = appliTelephoneNo;
	}

	@JSON
	@Override
	public String getAppliFaxNo() {
		if (_appliFaxNo == null) {
			return "";
		}
		else {
			return _appliFaxNo;
		}
	}

	@Override
	public void setAppliFaxNo(String appliFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appliFaxNo = appliFaxNo;
	}

	@JSON
	@Override
	public String getAppliWebsite() {
		if (_appliWebsite == null) {
			return "";
		}
		else {
			return _appliWebsite;
		}
	}

	@Override
	public void setAppliWebsite(String appliWebsite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appliWebsite = appliWebsite;
	}

	@JSON
	@Override
	public String getLaboratoryName() {
		if (_laboratoryName == null) {
			return "";
		}
		else {
			return _laboratoryName;
		}
	}

	@Override
	public void setLaboratoryName(String laboratoryName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_laboratoryName = laboratoryName;
	}

	@JSON
	@Override
	public String getLaboratoryAddress() {
		if (_laboratoryAddress == null) {
			return "";
		}
		else {
			return _laboratoryAddress;
		}
	}

	@Override
	public void setLaboratoryAddress(String laboratoryAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_laboratoryAddress = laboratoryAddress;
	}

	@JSON
	@Override
	public String getNameOfIncharge() {
		if (_nameOfIncharge == null) {
			return "";
		}
		else {
			return _nameOfIncharge;
		}
	}

	@Override
	public void setNameOfIncharge(String nameOfIncharge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfIncharge = nameOfIncharge;
	}

	@JSON
	@Override
	public String getEmailOfIncharge() {
		if (_emailOfIncharge == null) {
			return "";
		}
		else {
			return _emailOfIncharge;
		}
	}

	@Override
	public void setEmailOfIncharge(String emailOfIncharge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailOfIncharge = emailOfIncharge;
	}

	@JSON
	@Override
	public String getPersonnelQMName() {
		if (_personnelQMName == null) {
			return "";
		}
		else {
			return _personnelQMName;
		}
	}

	@Override
	public void setPersonnelQMName(String personnelQMName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelQMName = personnelQMName;
	}

	@JSON
	@Override
	public String getPersonnelQMEmail() {
		if (_personnelQMEmail == null) {
			return "";
		}
		else {
			return _personnelQMEmail;
		}
	}

	@Override
	public void setPersonnelQMEmail(String personnelQMEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelQMEmail = personnelQMEmail;
	}

	@JSON
	@Override
	public String getDeputyInchargeName() {
		if (_deputyInchargeName == null) {
			return "";
		}
		else {
			return _deputyInchargeName;
		}
	}

	@Override
	public void setDeputyInchargeName(String deputyInchargeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputyInchargeName = deputyInchargeName;
	}

	@JSON
	@Override
	public String getDeputyInchargeEmail() {
		if (_deputyInchargeEmail == null) {
			return "";
		}
		else {
			return _deputyInchargeEmail;
		}
	}

	@Override
	public void setDeputyInchargeEmail(String deputyInchargeEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deputyInchargeEmail = deputyInchargeEmail;
	}

	@JSON
	@Override
	public String getPersonnelFMName() {
		if (_personnelFMName == null) {
			return "";
		}
		else {
			return _personnelFMName;
		}
	}

	@Override
	public void setPersonnelFMName(String personnelFMName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelFMName = personnelFMName;
	}

	@JSON
	@Override
	public String getPersonnelFMEmail() {
		if (_personnelFMEmail == null) {
			return "";
		}
		else {
			return _personnelFMEmail;
		}
	}

	@Override
	public void setPersonnelFMEmail(String personnelFMEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelFMEmail = personnelFMEmail;
	}

	@JSON
	@Override
	public String getAccRequestType() {
		if (_accRequestType == null) {
			return "";
		}
		else {
			return _accRequestType;
		}
	}

	@Override
	public void setAccRequestType(String accRequestType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accRequestType = accRequestType;
	}

	@JSON
	@Override
	public String getAuthorizedPersonnelName() {
		if (_authorizedPersonnelName == null) {
			return "";
		}
		else {
			return _authorizedPersonnelName;
		}
	}

	@Override
	public void setAuthorizedPersonnelName(String authorizedPersonnelName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorizedPersonnelName = authorizedPersonnelName;
	}

	@JSON
	@Override
	public String getAuthorizedPosition() {
		if (_authorizedPosition == null) {
			return "";
		}
		else {
			return _authorizedPosition;
		}
	}

	@Override
	public void setAuthorizedPosition(String authorizedPosition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorizedPosition = authorizedPosition;
	}

	@JSON
	@Override
	public Date getAuthorizedPersonnelDate() {
		return _authorizedPersonnelDate;
	}

	@Override
	public void setAuthorizedPersonnelDate(Date authorizedPersonnelDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorizedPersonnelDate = authorizedPersonnelDate;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				AccMediLabApplicationInfo.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccMediLabApplicationInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccMediLabApplicationInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccMediLabApplicationInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccMediLabApplicationInfoImpl accMediLabApplicationInfoImpl =
			new AccMediLabApplicationInfoImpl();

		accMediLabApplicationInfoImpl.setUuid(getUuid());
		accMediLabApplicationInfoImpl.setAccMediLabApplicationInfoId(
			getAccMediLabApplicationInfoId());
		accMediLabApplicationInfoImpl.setGroupId(getGroupId());
		accMediLabApplicationInfoImpl.setCompanyId(getCompanyId());
		accMediLabApplicationInfoImpl.setUserId(getUserId());
		accMediLabApplicationInfoImpl.setUserName(getUserName());
		accMediLabApplicationInfoImpl.setCreateDate(getCreateDate());
		accMediLabApplicationInfoImpl.setModifiedDate(getModifiedDate());
		accMediLabApplicationInfoImpl.setNameOfApplicant(getNameOfApplicant());
		accMediLabApplicationInfoImpl.setApplicantAddress(
			getApplicantAddress());
		accMediLabApplicationInfoImpl.setAppliTelephoneNo(
			getAppliTelephoneNo());
		accMediLabApplicationInfoImpl.setAppliFaxNo(getAppliFaxNo());
		accMediLabApplicationInfoImpl.setAppliWebsite(getAppliWebsite());
		accMediLabApplicationInfoImpl.setLaboratoryName(getLaboratoryName());
		accMediLabApplicationInfoImpl.setLaboratoryAddress(
			getLaboratoryAddress());
		accMediLabApplicationInfoImpl.setNameOfIncharge(getNameOfIncharge());
		accMediLabApplicationInfoImpl.setEmailOfIncharge(getEmailOfIncharge());
		accMediLabApplicationInfoImpl.setPersonnelQMName(getPersonnelQMName());
		accMediLabApplicationInfoImpl.setPersonnelQMEmail(
			getPersonnelQMEmail());
		accMediLabApplicationInfoImpl.setDeputyInchargeName(
			getDeputyInchargeName());
		accMediLabApplicationInfoImpl.setDeputyInchargeEmail(
			getDeputyInchargeEmail());
		accMediLabApplicationInfoImpl.setPersonnelFMName(getPersonnelFMName());
		accMediLabApplicationInfoImpl.setPersonnelFMEmail(
			getPersonnelFMEmail());
		accMediLabApplicationInfoImpl.setAccRequestType(getAccRequestType());
		accMediLabApplicationInfoImpl.setAuthorizedPersonnelName(
			getAuthorizedPersonnelName());
		accMediLabApplicationInfoImpl.setAuthorizedPosition(
			getAuthorizedPosition());
		accMediLabApplicationInfoImpl.setAuthorizedPersonnelDate(
			getAuthorizedPersonnelDate());
		accMediLabApplicationInfoImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accMediLabApplicationInfoImpl.resetOriginalValues();

		return accMediLabApplicationInfoImpl;
	}

	@Override
	public AccMediLabApplicationInfo cloneWithOriginalValues() {
		AccMediLabApplicationInfoImpl accMediLabApplicationInfoImpl =
			new AccMediLabApplicationInfoImpl();

		accMediLabApplicationInfoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accMediLabApplicationInfoImpl.setAccMediLabApplicationInfoId(
			this.<Long>getColumnOriginalValue("accMediLabApplicationInfoId"));
		accMediLabApplicationInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accMediLabApplicationInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accMediLabApplicationInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accMediLabApplicationInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accMediLabApplicationInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accMediLabApplicationInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accMediLabApplicationInfoImpl.setNameOfApplicant(
			this.<String>getColumnOriginalValue("nameOfApplicant"));
		accMediLabApplicationInfoImpl.setApplicantAddress(
			this.<String>getColumnOriginalValue("applicantAddress"));
		accMediLabApplicationInfoImpl.setAppliTelephoneNo(
			this.<String>getColumnOriginalValue("appliTelephoneNo"));
		accMediLabApplicationInfoImpl.setAppliFaxNo(
			this.<String>getColumnOriginalValue("appliFaxNo"));
		accMediLabApplicationInfoImpl.setAppliWebsite(
			this.<String>getColumnOriginalValue("appliWebsite"));
		accMediLabApplicationInfoImpl.setLaboratoryName(
			this.<String>getColumnOriginalValue("laboratoryName"));
		accMediLabApplicationInfoImpl.setLaboratoryAddress(
			this.<String>getColumnOriginalValue("laboratoryAddress"));
		accMediLabApplicationInfoImpl.setNameOfIncharge(
			this.<String>getColumnOriginalValue("nameOfIncharge"));
		accMediLabApplicationInfoImpl.setEmailOfIncharge(
			this.<String>getColumnOriginalValue("emailOfIncharge"));
		accMediLabApplicationInfoImpl.setPersonnelQMName(
			this.<String>getColumnOriginalValue("personnelQMName"));
		accMediLabApplicationInfoImpl.setPersonnelQMEmail(
			this.<String>getColumnOriginalValue("personnelQMEmail"));
		accMediLabApplicationInfoImpl.setDeputyInchargeName(
			this.<String>getColumnOriginalValue("deputyInchargeName"));
		accMediLabApplicationInfoImpl.setDeputyInchargeEmail(
			this.<String>getColumnOriginalValue("deputyInchargeEmail"));
		accMediLabApplicationInfoImpl.setPersonnelFMName(
			this.<String>getColumnOriginalValue("personnelFMName"));
		accMediLabApplicationInfoImpl.setPersonnelFMEmail(
			this.<String>getColumnOriginalValue("personnelFMEmail"));
		accMediLabApplicationInfoImpl.setAccRequestType(
			this.<String>getColumnOriginalValue("accRequestType"));
		accMediLabApplicationInfoImpl.setAuthorizedPersonnelName(
			this.<String>getColumnOriginalValue("authorizedPersonnelName"));
		accMediLabApplicationInfoImpl.setAuthorizedPosition(
			this.<String>getColumnOriginalValue("authorizedPosition"));
		accMediLabApplicationInfoImpl.setAuthorizedPersonnelDate(
			this.<Date>getColumnOriginalValue("authorizedPersonnelDate"));
		accMediLabApplicationInfoImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accMediLabApplicationInfoImpl;
	}

	@Override
	public int compareTo(AccMediLabApplicationInfo accMediLabApplicationInfo) {
		long primaryKey = accMediLabApplicationInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccMediLabApplicationInfo)) {
			return false;
		}

		AccMediLabApplicationInfo accMediLabApplicationInfo =
			(AccMediLabApplicationInfo)object;

		long primaryKey = accMediLabApplicationInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccMediLabApplicationInfo> toCacheModel() {
		AccMediLabApplicationInfoCacheModel
			accMediLabApplicationInfoCacheModel =
				new AccMediLabApplicationInfoCacheModel();

		accMediLabApplicationInfoCacheModel.uuid = getUuid();

		String uuid = accMediLabApplicationInfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accMediLabApplicationInfoCacheModel.uuid = null;
		}

		accMediLabApplicationInfoCacheModel.accMediLabApplicationInfoId =
			getAccMediLabApplicationInfoId();

		accMediLabApplicationInfoCacheModel.groupId = getGroupId();

		accMediLabApplicationInfoCacheModel.companyId = getCompanyId();

		accMediLabApplicationInfoCacheModel.userId = getUserId();

		accMediLabApplicationInfoCacheModel.userName = getUserName();

		String userName = accMediLabApplicationInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accMediLabApplicationInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accMediLabApplicationInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			accMediLabApplicationInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accMediLabApplicationInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accMediLabApplicationInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accMediLabApplicationInfoCacheModel.nameOfApplicant =
			getNameOfApplicant();

		String nameOfApplicant =
			accMediLabApplicationInfoCacheModel.nameOfApplicant;

		if ((nameOfApplicant != null) && (nameOfApplicant.length() == 0)) {
			accMediLabApplicationInfoCacheModel.nameOfApplicant = null;
		}

		accMediLabApplicationInfoCacheModel.applicantAddress =
			getApplicantAddress();

		String applicantAddress =
			accMediLabApplicationInfoCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			accMediLabApplicationInfoCacheModel.applicantAddress = null;
		}

		accMediLabApplicationInfoCacheModel.appliTelephoneNo =
			getAppliTelephoneNo();

		String appliTelephoneNo =
			accMediLabApplicationInfoCacheModel.appliTelephoneNo;

		if ((appliTelephoneNo != null) && (appliTelephoneNo.length() == 0)) {
			accMediLabApplicationInfoCacheModel.appliTelephoneNo = null;
		}

		accMediLabApplicationInfoCacheModel.appliFaxNo = getAppliFaxNo();

		String appliFaxNo = accMediLabApplicationInfoCacheModel.appliFaxNo;

		if ((appliFaxNo != null) && (appliFaxNo.length() == 0)) {
			accMediLabApplicationInfoCacheModel.appliFaxNo = null;
		}

		accMediLabApplicationInfoCacheModel.appliWebsite = getAppliWebsite();

		String appliWebsite = accMediLabApplicationInfoCacheModel.appliWebsite;

		if ((appliWebsite != null) && (appliWebsite.length() == 0)) {
			accMediLabApplicationInfoCacheModel.appliWebsite = null;
		}

		accMediLabApplicationInfoCacheModel.laboratoryName =
			getLaboratoryName();

		String laboratoryName =
			accMediLabApplicationInfoCacheModel.laboratoryName;

		if ((laboratoryName != null) && (laboratoryName.length() == 0)) {
			accMediLabApplicationInfoCacheModel.laboratoryName = null;
		}

		accMediLabApplicationInfoCacheModel.laboratoryAddress =
			getLaboratoryAddress();

		String laboratoryAddress =
			accMediLabApplicationInfoCacheModel.laboratoryAddress;

		if ((laboratoryAddress != null) && (laboratoryAddress.length() == 0)) {
			accMediLabApplicationInfoCacheModel.laboratoryAddress = null;
		}

		accMediLabApplicationInfoCacheModel.nameOfIncharge =
			getNameOfIncharge();

		String nameOfIncharge =
			accMediLabApplicationInfoCacheModel.nameOfIncharge;

		if ((nameOfIncharge != null) && (nameOfIncharge.length() == 0)) {
			accMediLabApplicationInfoCacheModel.nameOfIncharge = null;
		}

		accMediLabApplicationInfoCacheModel.emailOfIncharge =
			getEmailOfIncharge();

		String emailOfIncharge =
			accMediLabApplicationInfoCacheModel.emailOfIncharge;

		if ((emailOfIncharge != null) && (emailOfIncharge.length() == 0)) {
			accMediLabApplicationInfoCacheModel.emailOfIncharge = null;
		}

		accMediLabApplicationInfoCacheModel.personnelQMName =
			getPersonnelQMName();

		String personnelQMName =
			accMediLabApplicationInfoCacheModel.personnelQMName;

		if ((personnelQMName != null) && (personnelQMName.length() == 0)) {
			accMediLabApplicationInfoCacheModel.personnelQMName = null;
		}

		accMediLabApplicationInfoCacheModel.personnelQMEmail =
			getPersonnelQMEmail();

		String personnelQMEmail =
			accMediLabApplicationInfoCacheModel.personnelQMEmail;

		if ((personnelQMEmail != null) && (personnelQMEmail.length() == 0)) {
			accMediLabApplicationInfoCacheModel.personnelQMEmail = null;
		}

		accMediLabApplicationInfoCacheModel.deputyInchargeName =
			getDeputyInchargeName();

		String deputyInchargeName =
			accMediLabApplicationInfoCacheModel.deputyInchargeName;

		if ((deputyInchargeName != null) &&
			(deputyInchargeName.length() == 0)) {

			accMediLabApplicationInfoCacheModel.deputyInchargeName = null;
		}

		accMediLabApplicationInfoCacheModel.deputyInchargeEmail =
			getDeputyInchargeEmail();

		String deputyInchargeEmail =
			accMediLabApplicationInfoCacheModel.deputyInchargeEmail;

		if ((deputyInchargeEmail != null) &&
			(deputyInchargeEmail.length() == 0)) {

			accMediLabApplicationInfoCacheModel.deputyInchargeEmail = null;
		}

		accMediLabApplicationInfoCacheModel.personnelFMName =
			getPersonnelFMName();

		String personnelFMName =
			accMediLabApplicationInfoCacheModel.personnelFMName;

		if ((personnelFMName != null) && (personnelFMName.length() == 0)) {
			accMediLabApplicationInfoCacheModel.personnelFMName = null;
		}

		accMediLabApplicationInfoCacheModel.personnelFMEmail =
			getPersonnelFMEmail();

		String personnelFMEmail =
			accMediLabApplicationInfoCacheModel.personnelFMEmail;

		if ((personnelFMEmail != null) && (personnelFMEmail.length() == 0)) {
			accMediLabApplicationInfoCacheModel.personnelFMEmail = null;
		}

		accMediLabApplicationInfoCacheModel.accRequestType =
			getAccRequestType();

		String accRequestType =
			accMediLabApplicationInfoCacheModel.accRequestType;

		if ((accRequestType != null) && (accRequestType.length() == 0)) {
			accMediLabApplicationInfoCacheModel.accRequestType = null;
		}

		accMediLabApplicationInfoCacheModel.authorizedPersonnelName =
			getAuthorizedPersonnelName();

		String authorizedPersonnelName =
			accMediLabApplicationInfoCacheModel.authorizedPersonnelName;

		if ((authorizedPersonnelName != null) &&
			(authorizedPersonnelName.length() == 0)) {

			accMediLabApplicationInfoCacheModel.authorizedPersonnelName = null;
		}

		accMediLabApplicationInfoCacheModel.authorizedPosition =
			getAuthorizedPosition();

		String authorizedPosition =
			accMediLabApplicationInfoCacheModel.authorizedPosition;

		if ((authorizedPosition != null) &&
			(authorizedPosition.length() == 0)) {

			accMediLabApplicationInfoCacheModel.authorizedPosition = null;
		}

		Date authorizedPersonnelDate = getAuthorizedPersonnelDate();

		if (authorizedPersonnelDate != null) {
			accMediLabApplicationInfoCacheModel.authorizedPersonnelDate =
				authorizedPersonnelDate.getTime();
		}
		else {
			accMediLabApplicationInfoCacheModel.authorizedPersonnelDate =
				Long.MIN_VALUE;
		}

		accMediLabApplicationInfoCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accMediLabApplicationInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccMediLabApplicationInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccMediLabApplicationInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabApplicationInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccMediLabApplicationInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AccMediLabApplicationInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AccMediLabApplicationInfo.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accMediLabApplicationInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nameOfApplicant;
	private String _applicantAddress;
	private String _appliTelephoneNo;
	private String _appliFaxNo;
	private String _appliWebsite;
	private String _laboratoryName;
	private String _laboratoryAddress;
	private String _nameOfIncharge;
	private String _emailOfIncharge;
	private String _personnelQMName;
	private String _personnelQMEmail;
	private String _deputyInchargeName;
	private String _deputyInchargeEmail;
	private String _personnelFMName;
	private String _personnelFMEmail;
	private String _accRequestType;
	private String _authorizedPersonnelName;
	private String _authorizedPosition;
	private Date _authorizedPersonnelDate;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccMediLabApplicationInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccMediLabApplicationInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accMediLabApplicationInfoId", _accMediLabApplicationInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nameOfApplicant", _nameOfApplicant);
		_columnOriginalValues.put("applicantAddress", _applicantAddress);
		_columnOriginalValues.put("appliTelephoneNo", _appliTelephoneNo);
		_columnOriginalValues.put("appliFaxNo", _appliFaxNo);
		_columnOriginalValues.put("appliWebsite", _appliWebsite);
		_columnOriginalValues.put("laboratoryName", _laboratoryName);
		_columnOriginalValues.put("laboratoryAddress", _laboratoryAddress);
		_columnOriginalValues.put("nameOfIncharge", _nameOfIncharge);
		_columnOriginalValues.put("emailOfIncharge", _emailOfIncharge);
		_columnOriginalValues.put("personnelQMName", _personnelQMName);
		_columnOriginalValues.put("personnelQMEmail", _personnelQMEmail);
		_columnOriginalValues.put("deputyInchargeName", _deputyInchargeName);
		_columnOriginalValues.put("deputyInchargeEmail", _deputyInchargeEmail);
		_columnOriginalValues.put("personnelFMName", _personnelFMName);
		_columnOriginalValues.put("personnelFMEmail", _personnelFMEmail);
		_columnOriginalValues.put("accRequestType", _accRequestType);
		_columnOriginalValues.put(
			"authorizedPersonnelName", _authorizedPersonnelName);
		_columnOriginalValues.put("authorizedPosition", _authorizedPosition);
		_columnOriginalValues.put(
			"authorizedPersonnelDate", _authorizedPersonnelDate);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accMediLabApplicationInfoId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("nameOfApplicant", 256L);

		columnBitmasks.put("applicantAddress", 512L);

		columnBitmasks.put("appliTelephoneNo", 1024L);

		columnBitmasks.put("appliFaxNo", 2048L);

		columnBitmasks.put("appliWebsite", 4096L);

		columnBitmasks.put("laboratoryName", 8192L);

		columnBitmasks.put("laboratoryAddress", 16384L);

		columnBitmasks.put("nameOfIncharge", 32768L);

		columnBitmasks.put("emailOfIncharge", 65536L);

		columnBitmasks.put("personnelQMName", 131072L);

		columnBitmasks.put("personnelQMEmail", 262144L);

		columnBitmasks.put("deputyInchargeName", 524288L);

		columnBitmasks.put("deputyInchargeEmail", 1048576L);

		columnBitmasks.put("personnelFMName", 2097152L);

		columnBitmasks.put("personnelFMEmail", 4194304L);

		columnBitmasks.put("accRequestType", 8388608L);

		columnBitmasks.put("authorizedPersonnelName", 16777216L);

		columnBitmasks.put("authorizedPosition", 33554432L);

		columnBitmasks.put("authorizedPersonnelDate", 67108864L);

		columnBitmasks.put("janaacApplicationId", 134217728L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccMediLabApplicationInfo _escapedModel;

}