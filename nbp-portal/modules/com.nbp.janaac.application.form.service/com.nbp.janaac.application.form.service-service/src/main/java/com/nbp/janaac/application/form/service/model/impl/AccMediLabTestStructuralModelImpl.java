/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccMediLabTestStructural;
import com.nbp.janaac.application.form.service.model.AccMediLabTestStructuralModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccMediLabTestStructural service. Represents a row in the &quot;nbp_janaac_acc_med_test_struct&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccMediLabTestStructuralModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccMediLabTestStructuralImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccMediLabTestStructuralImpl
 * @generated
 */
@JSON(strict = true)
public class AccMediLabTestStructuralModelImpl
	extends BaseModelImpl<AccMediLabTestStructural>
	implements AccMediLabTestStructuralModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc medi lab test structural model instance should use the <code>AccMediLabTestStructural</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_med_test_struct";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accMediLabTestStructuralId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"testLabLegalEntity", Types.VARCHAR},
		{"testlegalStatus", Types.VARCHAR}, {"testlabPartOfOrg", Types.VARCHAR},
		{"testlabPartOfOrgName", Types.VARCHAR},
		{"testLabPartOfOrgPos", Types.VARCHAR},
		{"testMangerialStaff", Types.VARCHAR},
		{"testTechnicalStaff", Types.VARCHAR},
		{"testingRelevantDoc", Types.VARCHAR},
		{"testMajorIncome", Types.VARCHAR}, {"testLabClients", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accMediLabTestStructuralId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("testLabLegalEntity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testlegalStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testlabPartOfOrg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testlabPartOfOrgName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testLabPartOfOrgPos", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testMangerialStaff", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testTechnicalStaff", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testingRelevantDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testMajorIncome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testLabClients", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_med_test_struct (uuid_ VARCHAR(75) null,accMediLabTestStructuralId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,testLabLegalEntity VARCHAR(75) null,testlegalStatus VARCHAR(75) null,testlabPartOfOrg VARCHAR(75) null,testlabPartOfOrgName VARCHAR(75) null,testLabPartOfOrgPos VARCHAR(75) null,testMangerialStaff VARCHAR(75) null,testTechnicalStaff VARCHAR(75) null,testingRelevantDoc VARCHAR(75) null,testMajorIncome VARCHAR(75) null,testLabClients VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_med_test_struct";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accMediLabTestStructural.accMediLabTestStructuralId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_med_test_struct.accMediLabTestStructuralId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCMEDILABTESTSTRUCTURALID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccMediLabTestStructuralModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accMediLabTestStructuralId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccMediLabTestStructuralId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accMediLabTestStructuralId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccMediLabTestStructural.class;
	}

	@Override
	public String getModelClassName() {
		return AccMediLabTestStructural.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccMediLabTestStructural, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccMediLabTestStructural, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabTestStructural, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccMediLabTestStructural)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccMediLabTestStructural, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccMediLabTestStructural, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccMediLabTestStructural)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccMediLabTestStructural, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccMediLabTestStructural, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccMediLabTestStructural, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccMediLabTestStructural, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccMediLabTestStructural, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccMediLabTestStructural::getUuid);
			attributeGetterFunctions.put(
				"accMediLabTestStructuralId",
				AccMediLabTestStructural::getAccMediLabTestStructuralId);
			attributeGetterFunctions.put(
				"groupId", AccMediLabTestStructural::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccMediLabTestStructural::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccMediLabTestStructural::getUserId);
			attributeGetterFunctions.put(
				"userName", AccMediLabTestStructural::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccMediLabTestStructural::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccMediLabTestStructural::getModifiedDate);
			attributeGetterFunctions.put(
				"testLabLegalEntity",
				AccMediLabTestStructural::getTestLabLegalEntity);
			attributeGetterFunctions.put(
				"testlegalStatus",
				AccMediLabTestStructural::getTestlegalStatus);
			attributeGetterFunctions.put(
				"testlabPartOfOrg",
				AccMediLabTestStructural::getTestlabPartOfOrg);
			attributeGetterFunctions.put(
				"testlabPartOfOrgName",
				AccMediLabTestStructural::getTestlabPartOfOrgName);
			attributeGetterFunctions.put(
				"testLabPartOfOrgPos",
				AccMediLabTestStructural::getTestLabPartOfOrgPos);
			attributeGetterFunctions.put(
				"testMangerialStaff",
				AccMediLabTestStructural::getTestMangerialStaff);
			attributeGetterFunctions.put(
				"testTechnicalStaff",
				AccMediLabTestStructural::getTestTechnicalStaff);
			attributeGetterFunctions.put(
				"testingRelevantDoc",
				AccMediLabTestStructural::getTestingRelevantDoc);
			attributeGetterFunctions.put(
				"testMajorIncome",
				AccMediLabTestStructural::getTestMajorIncome);
			attributeGetterFunctions.put(
				"testLabClients", AccMediLabTestStructural::getTestLabClients);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccMediLabTestStructural::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccMediLabTestStructural, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccMediLabTestStructural, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccMediLabTestStructural, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setUuid);
			attributeSetterBiConsumers.put(
				"accMediLabTestStructuralId",
				(BiConsumer<AccMediLabTestStructural, Long>)
					AccMediLabTestStructural::setAccMediLabTestStructuralId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccMediLabTestStructural, Long>)
					AccMediLabTestStructural::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccMediLabTestStructural, Long>)
					AccMediLabTestStructural::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccMediLabTestStructural, Long>)
					AccMediLabTestStructural::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccMediLabTestStructural, Date>)
					AccMediLabTestStructural::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccMediLabTestStructural, Date>)
					AccMediLabTestStructural::setModifiedDate);
			attributeSetterBiConsumers.put(
				"testLabLegalEntity",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestLabLegalEntity);
			attributeSetterBiConsumers.put(
				"testlegalStatus",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestlegalStatus);
			attributeSetterBiConsumers.put(
				"testlabPartOfOrg",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestlabPartOfOrg);
			attributeSetterBiConsumers.put(
				"testlabPartOfOrgName",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestlabPartOfOrgName);
			attributeSetterBiConsumers.put(
				"testLabPartOfOrgPos",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestLabPartOfOrgPos);
			attributeSetterBiConsumers.put(
				"testMangerialStaff",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestMangerialStaff);
			attributeSetterBiConsumers.put(
				"testTechnicalStaff",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestTechnicalStaff);
			attributeSetterBiConsumers.put(
				"testingRelevantDoc",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestingRelevantDoc);
			attributeSetterBiConsumers.put(
				"testMajorIncome",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestMajorIncome);
			attributeSetterBiConsumers.put(
				"testLabClients",
				(BiConsumer<AccMediLabTestStructural, String>)
					AccMediLabTestStructural::setTestLabClients);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccMediLabTestStructural, Long>)
					AccMediLabTestStructural::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccMediLabTestStructuralId() {
		return _accMediLabTestStructuralId;
	}

	@Override
	public void setAccMediLabTestStructuralId(long accMediLabTestStructuralId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accMediLabTestStructuralId = accMediLabTestStructuralId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTestLabLegalEntity() {
		if (_testLabLegalEntity == null) {
			return "";
		}
		else {
			return _testLabLegalEntity;
		}
	}

	@Override
	public void setTestLabLegalEntity(String testLabLegalEntity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testLabLegalEntity = testLabLegalEntity;
	}

	@JSON
	@Override
	public String getTestlegalStatus() {
		if (_testlegalStatus == null) {
			return "";
		}
		else {
			return _testlegalStatus;
		}
	}

	@Override
	public void setTestlegalStatus(String testlegalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testlegalStatus = testlegalStatus;
	}

	@JSON
	@Override
	public String getTestlabPartOfOrg() {
		if (_testlabPartOfOrg == null) {
			return "";
		}
		else {
			return _testlabPartOfOrg;
		}
	}

	@Override
	public void setTestlabPartOfOrg(String testlabPartOfOrg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testlabPartOfOrg = testlabPartOfOrg;
	}

	@JSON
	@Override
	public String getTestlabPartOfOrgName() {
		if (_testlabPartOfOrgName == null) {
			return "";
		}
		else {
			return _testlabPartOfOrgName;
		}
	}

	@Override
	public void setTestlabPartOfOrgName(String testlabPartOfOrgName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testlabPartOfOrgName = testlabPartOfOrgName;
	}

	@JSON
	@Override
	public String getTestLabPartOfOrgPos() {
		if (_testLabPartOfOrgPos == null) {
			return "";
		}
		else {
			return _testLabPartOfOrgPos;
		}
	}

	@Override
	public void setTestLabPartOfOrgPos(String testLabPartOfOrgPos) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testLabPartOfOrgPos = testLabPartOfOrgPos;
	}

	@JSON
	@Override
	public String getTestMangerialStaff() {
		if (_testMangerialStaff == null) {
			return "";
		}
		else {
			return _testMangerialStaff;
		}
	}

	@Override
	public void setTestMangerialStaff(String testMangerialStaff) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testMangerialStaff = testMangerialStaff;
	}

	@JSON
	@Override
	public String getTestTechnicalStaff() {
		if (_testTechnicalStaff == null) {
			return "";
		}
		else {
			return _testTechnicalStaff;
		}
	}

	@Override
	public void setTestTechnicalStaff(String testTechnicalStaff) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testTechnicalStaff = testTechnicalStaff;
	}

	@JSON
	@Override
	public String getTestingRelevantDoc() {
		if (_testingRelevantDoc == null) {
			return "";
		}
		else {
			return _testingRelevantDoc;
		}
	}

	@Override
	public void setTestingRelevantDoc(String testingRelevantDoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testingRelevantDoc = testingRelevantDoc;
	}

	@JSON
	@Override
	public String getTestMajorIncome() {
		if (_testMajorIncome == null) {
			return "";
		}
		else {
			return _testMajorIncome;
		}
	}

	@Override
	public void setTestMajorIncome(String testMajorIncome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testMajorIncome = testMajorIncome;
	}

	@JSON
	@Override
	public String getTestLabClients() {
		if (_testLabClients == null) {
			return "";
		}
		else {
			return _testLabClients;
		}
	}

	@Override
	public void setTestLabClients(String testLabClients) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testLabClients = testLabClients;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				AccMediLabTestStructural.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccMediLabTestStructural.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccMediLabTestStructural toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccMediLabTestStructural>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccMediLabTestStructuralImpl accMediLabTestStructuralImpl =
			new AccMediLabTestStructuralImpl();

		accMediLabTestStructuralImpl.setUuid(getUuid());
		accMediLabTestStructuralImpl.setAccMediLabTestStructuralId(
			getAccMediLabTestStructuralId());
		accMediLabTestStructuralImpl.setGroupId(getGroupId());
		accMediLabTestStructuralImpl.setCompanyId(getCompanyId());
		accMediLabTestStructuralImpl.setUserId(getUserId());
		accMediLabTestStructuralImpl.setUserName(getUserName());
		accMediLabTestStructuralImpl.setCreateDate(getCreateDate());
		accMediLabTestStructuralImpl.setModifiedDate(getModifiedDate());
		accMediLabTestStructuralImpl.setTestLabLegalEntity(
			getTestLabLegalEntity());
		accMediLabTestStructuralImpl.setTestlegalStatus(getTestlegalStatus());
		accMediLabTestStructuralImpl.setTestlabPartOfOrg(getTestlabPartOfOrg());
		accMediLabTestStructuralImpl.setTestlabPartOfOrgName(
			getTestlabPartOfOrgName());
		accMediLabTestStructuralImpl.setTestLabPartOfOrgPos(
			getTestLabPartOfOrgPos());
		accMediLabTestStructuralImpl.setTestMangerialStaff(
			getTestMangerialStaff());
		accMediLabTestStructuralImpl.setTestTechnicalStaff(
			getTestTechnicalStaff());
		accMediLabTestStructuralImpl.setTestingRelevantDoc(
			getTestingRelevantDoc());
		accMediLabTestStructuralImpl.setTestMajorIncome(getTestMajorIncome());
		accMediLabTestStructuralImpl.setTestLabClients(getTestLabClients());
		accMediLabTestStructuralImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accMediLabTestStructuralImpl.resetOriginalValues();

		return accMediLabTestStructuralImpl;
	}

	@Override
	public AccMediLabTestStructural cloneWithOriginalValues() {
		AccMediLabTestStructuralImpl accMediLabTestStructuralImpl =
			new AccMediLabTestStructuralImpl();

		accMediLabTestStructuralImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accMediLabTestStructuralImpl.setAccMediLabTestStructuralId(
			this.<Long>getColumnOriginalValue("accMediLabTestStructuralId"));
		accMediLabTestStructuralImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accMediLabTestStructuralImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accMediLabTestStructuralImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accMediLabTestStructuralImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accMediLabTestStructuralImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accMediLabTestStructuralImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accMediLabTestStructuralImpl.setTestLabLegalEntity(
			this.<String>getColumnOriginalValue("testLabLegalEntity"));
		accMediLabTestStructuralImpl.setTestlegalStatus(
			this.<String>getColumnOriginalValue("testlegalStatus"));
		accMediLabTestStructuralImpl.setTestlabPartOfOrg(
			this.<String>getColumnOriginalValue("testlabPartOfOrg"));
		accMediLabTestStructuralImpl.setTestlabPartOfOrgName(
			this.<String>getColumnOriginalValue("testlabPartOfOrgName"));
		accMediLabTestStructuralImpl.setTestLabPartOfOrgPos(
			this.<String>getColumnOriginalValue("testLabPartOfOrgPos"));
		accMediLabTestStructuralImpl.setTestMangerialStaff(
			this.<String>getColumnOriginalValue("testMangerialStaff"));
		accMediLabTestStructuralImpl.setTestTechnicalStaff(
			this.<String>getColumnOriginalValue("testTechnicalStaff"));
		accMediLabTestStructuralImpl.setTestingRelevantDoc(
			this.<String>getColumnOriginalValue("testingRelevantDoc"));
		accMediLabTestStructuralImpl.setTestMajorIncome(
			this.<String>getColumnOriginalValue("testMajorIncome"));
		accMediLabTestStructuralImpl.setTestLabClients(
			this.<String>getColumnOriginalValue("testLabClients"));
		accMediLabTestStructuralImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accMediLabTestStructuralImpl;
	}

	@Override
	public int compareTo(AccMediLabTestStructural accMediLabTestStructural) {
		long primaryKey = accMediLabTestStructural.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccMediLabTestStructural)) {
			return false;
		}

		AccMediLabTestStructural accMediLabTestStructural =
			(AccMediLabTestStructural)object;

		long primaryKey = accMediLabTestStructural.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccMediLabTestStructural> toCacheModel() {
		AccMediLabTestStructuralCacheModel accMediLabTestStructuralCacheModel =
			new AccMediLabTestStructuralCacheModel();

		accMediLabTestStructuralCacheModel.uuid = getUuid();

		String uuid = accMediLabTestStructuralCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accMediLabTestStructuralCacheModel.uuid = null;
		}

		accMediLabTestStructuralCacheModel.accMediLabTestStructuralId =
			getAccMediLabTestStructuralId();

		accMediLabTestStructuralCacheModel.groupId = getGroupId();

		accMediLabTestStructuralCacheModel.companyId = getCompanyId();

		accMediLabTestStructuralCacheModel.userId = getUserId();

		accMediLabTestStructuralCacheModel.userName = getUserName();

		String userName = accMediLabTestStructuralCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accMediLabTestStructuralCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accMediLabTestStructuralCacheModel.createDate =
				createDate.getTime();
		}
		else {
			accMediLabTestStructuralCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accMediLabTestStructuralCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accMediLabTestStructuralCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accMediLabTestStructuralCacheModel.testLabLegalEntity =
			getTestLabLegalEntity();

		String testLabLegalEntity =
			accMediLabTestStructuralCacheModel.testLabLegalEntity;

		if ((testLabLegalEntity != null) &&
			(testLabLegalEntity.length() == 0)) {

			accMediLabTestStructuralCacheModel.testLabLegalEntity = null;
		}

		accMediLabTestStructuralCacheModel.testlegalStatus =
			getTestlegalStatus();

		String testlegalStatus =
			accMediLabTestStructuralCacheModel.testlegalStatus;

		if ((testlegalStatus != null) && (testlegalStatus.length() == 0)) {
			accMediLabTestStructuralCacheModel.testlegalStatus = null;
		}

		accMediLabTestStructuralCacheModel.testlabPartOfOrg =
			getTestlabPartOfOrg();

		String testlabPartOfOrg =
			accMediLabTestStructuralCacheModel.testlabPartOfOrg;

		if ((testlabPartOfOrg != null) && (testlabPartOfOrg.length() == 0)) {
			accMediLabTestStructuralCacheModel.testlabPartOfOrg = null;
		}

		accMediLabTestStructuralCacheModel.testlabPartOfOrgName =
			getTestlabPartOfOrgName();

		String testlabPartOfOrgName =
			accMediLabTestStructuralCacheModel.testlabPartOfOrgName;

		if ((testlabPartOfOrgName != null) &&
			(testlabPartOfOrgName.length() == 0)) {

			accMediLabTestStructuralCacheModel.testlabPartOfOrgName = null;
		}

		accMediLabTestStructuralCacheModel.testLabPartOfOrgPos =
			getTestLabPartOfOrgPos();

		String testLabPartOfOrgPos =
			accMediLabTestStructuralCacheModel.testLabPartOfOrgPos;

		if ((testLabPartOfOrgPos != null) &&
			(testLabPartOfOrgPos.length() == 0)) {

			accMediLabTestStructuralCacheModel.testLabPartOfOrgPos = null;
		}

		accMediLabTestStructuralCacheModel.testMangerialStaff =
			getTestMangerialStaff();

		String testMangerialStaff =
			accMediLabTestStructuralCacheModel.testMangerialStaff;

		if ((testMangerialStaff != null) &&
			(testMangerialStaff.length() == 0)) {

			accMediLabTestStructuralCacheModel.testMangerialStaff = null;
		}

		accMediLabTestStructuralCacheModel.testTechnicalStaff =
			getTestTechnicalStaff();

		String testTechnicalStaff =
			accMediLabTestStructuralCacheModel.testTechnicalStaff;

		if ((testTechnicalStaff != null) &&
			(testTechnicalStaff.length() == 0)) {

			accMediLabTestStructuralCacheModel.testTechnicalStaff = null;
		}

		accMediLabTestStructuralCacheModel.testingRelevantDoc =
			getTestingRelevantDoc();

		String testingRelevantDoc =
			accMediLabTestStructuralCacheModel.testingRelevantDoc;

		if ((testingRelevantDoc != null) &&
			(testingRelevantDoc.length() == 0)) {

			accMediLabTestStructuralCacheModel.testingRelevantDoc = null;
		}

		accMediLabTestStructuralCacheModel.testMajorIncome =
			getTestMajorIncome();

		String testMajorIncome =
			accMediLabTestStructuralCacheModel.testMajorIncome;

		if ((testMajorIncome != null) && (testMajorIncome.length() == 0)) {
			accMediLabTestStructuralCacheModel.testMajorIncome = null;
		}

		accMediLabTestStructuralCacheModel.testLabClients = getTestLabClients();

		String testLabClients =
			accMediLabTestStructuralCacheModel.testLabClients;

		if ((testLabClients != null) && (testLabClients.length() == 0)) {
			accMediLabTestStructuralCacheModel.testLabClients = null;
		}

		accMediLabTestStructuralCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accMediLabTestStructuralCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccMediLabTestStructural, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccMediLabTestStructural, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabTestStructural, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccMediLabTestStructural)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AccMediLabTestStructural>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AccMediLabTestStructural.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accMediLabTestStructuralId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _testLabLegalEntity;
	private String _testlegalStatus;
	private String _testlabPartOfOrg;
	private String _testlabPartOfOrgName;
	private String _testLabPartOfOrgPos;
	private String _testMangerialStaff;
	private String _testTechnicalStaff;
	private String _testingRelevantDoc;
	private String _testMajorIncome;
	private String _testLabClients;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccMediLabTestStructural, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccMediLabTestStructural)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accMediLabTestStructuralId", _accMediLabTestStructuralId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("testLabLegalEntity", _testLabLegalEntity);
		_columnOriginalValues.put("testlegalStatus", _testlegalStatus);
		_columnOriginalValues.put("testlabPartOfOrg", _testlabPartOfOrg);
		_columnOriginalValues.put(
			"testlabPartOfOrgName", _testlabPartOfOrgName);
		_columnOriginalValues.put("testLabPartOfOrgPos", _testLabPartOfOrgPos);
		_columnOriginalValues.put("testMangerialStaff", _testMangerialStaff);
		_columnOriginalValues.put("testTechnicalStaff", _testTechnicalStaff);
		_columnOriginalValues.put("testingRelevantDoc", _testingRelevantDoc);
		_columnOriginalValues.put("testMajorIncome", _testMajorIncome);
		_columnOriginalValues.put("testLabClients", _testLabClients);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accMediLabTestStructuralId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("testLabLegalEntity", 256L);

		columnBitmasks.put("testlegalStatus", 512L);

		columnBitmasks.put("testlabPartOfOrg", 1024L);

		columnBitmasks.put("testlabPartOfOrgName", 2048L);

		columnBitmasks.put("testLabPartOfOrgPos", 4096L);

		columnBitmasks.put("testMangerialStaff", 8192L);

		columnBitmasks.put("testTechnicalStaff", 16384L);

		columnBitmasks.put("testingRelevantDoc", 32768L);

		columnBitmasks.put("testMajorIncome", 65536L);

		columnBitmasks.put("testLabClients", 131072L);

		columnBitmasks.put("janaacApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccMediLabTestStructural _escapedModel;

}