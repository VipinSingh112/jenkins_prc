/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccThirdPartyAppliInfo;
import com.nbp.janaac.application.form.service.model.AccThirdPartyAppliInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccThirdPartyAppliInfo service. Represents a row in the &quot;nbp_janaac_acc_third_appli&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccThirdPartyAppliInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccThirdPartyAppliInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccThirdPartyAppliInfoImpl
 * @generated
 */
@JSON(strict = true)
public class AccThirdPartyAppliInfoModelImpl
	extends BaseModelImpl<AccThirdPartyAppliInfo>
	implements AccThirdPartyAppliInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc third party appli info model instance should use the <code>AccThirdPartyAppliInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_third_appli";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accThirdPartyAppliInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"applicantName", Types.VARCHAR}, {"applicantAddress", Types.VARCHAR},
		{"applicantTelephone", Types.VARCHAR},
		{"applicantFaxNo", Types.VARCHAR}, {"applicantWebsite", Types.VARCHAR},
		{"certificationName", Types.VARCHAR}, {"certiAddress", Types.VARCHAR},
		{"personnelName", Types.VARCHAR}, {"personnelEmail", Types.VARCHAR},
		{"personnelContactName", Types.VARCHAR},
		{"personnelContactEmail", Types.VARCHAR},
		{"personnelFMName", Types.VARCHAR}, {"personnelFMEmail", Types.VARCHAR},
		{"accreditationRequest", Types.VARCHAR},
		{"accFdaScheme", Types.VARCHAR}, {"specifyOther", Types.VARCHAR},
		{"supplementaryCertificate", Types.VARCHAR},
		{"supplementaryOther", Types.VARCHAR},
		{"listOfStandard", Types.VARCHAR},
		{"authorizedPersonnelName", Types.VARCHAR},
		{"authorizedPersonnelPos", Types.VARCHAR},
		{"authorizedPersonnelDate", Types.TIMESTAMP},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accThirdPartyAppliInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantFaxNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantWebsite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certiAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelContactEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelFMName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelFMEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accreditationRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accFdaScheme", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specifyOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("supplementaryCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("supplementaryOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("listOfStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedPersonnelName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedPersonnelPos", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedPersonnelDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_third_appli (uuid_ VARCHAR(75) null,accThirdPartyAppliInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicantName VARCHAR(75) null,applicantAddress VARCHAR(75) null,applicantTelephone VARCHAR(75) null,applicantFaxNo VARCHAR(75) null,applicantWebsite VARCHAR(75) null,certificationName VARCHAR(75) null,certiAddress VARCHAR(75) null,personnelName VARCHAR(75) null,personnelEmail VARCHAR(75) null,personnelContactName VARCHAR(75) null,personnelContactEmail VARCHAR(75) null,personnelFMName VARCHAR(75) null,personnelFMEmail VARCHAR(75) null,accreditationRequest VARCHAR(75) null,accFdaScheme VARCHAR(75) null,specifyOther VARCHAR(75) null,supplementaryCertificate VARCHAR(75) null,supplementaryOther VARCHAR(75) null,listOfStandard VARCHAR(75) null,authorizedPersonnelName VARCHAR(75) null,authorizedPersonnelPos VARCHAR(75) null,authorizedPersonnelDate DATE null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_third_appli";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accThirdPartyAppliInfo.accThirdPartyAppliInfoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_third_appli.accThirdPartyAppliInfoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCTHIRDPARTYAPPLIINFOID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccThirdPartyAppliInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accThirdPartyAppliInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccThirdPartyAppliInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accThirdPartyAppliInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccThirdPartyAppliInfo.class;
	}

	@Override
	public String getModelClassName() {
		return AccThirdPartyAppliInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccThirdPartyAppliInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccThirdPartyAppliInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccThirdPartyAppliInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccThirdPartyAppliInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccThirdPartyAppliInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccThirdPartyAppliInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccThirdPartyAppliInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccThirdPartyAppliInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccThirdPartyAppliInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccThirdPartyAppliInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccThirdPartyAppliInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccThirdPartyAppliInfo, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccThirdPartyAppliInfo::getUuid);
			attributeGetterFunctions.put(
				"accThirdPartyAppliInfoId",
				AccThirdPartyAppliInfo::getAccThirdPartyAppliInfoId);
			attributeGetterFunctions.put(
				"groupId", AccThirdPartyAppliInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccThirdPartyAppliInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccThirdPartyAppliInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", AccThirdPartyAppliInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccThirdPartyAppliInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccThirdPartyAppliInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"applicantName", AccThirdPartyAppliInfo::getApplicantName);
			attributeGetterFunctions.put(
				"applicantAddress",
				AccThirdPartyAppliInfo::getApplicantAddress);
			attributeGetterFunctions.put(
				"applicantTelephone",
				AccThirdPartyAppliInfo::getApplicantTelephone);
			attributeGetterFunctions.put(
				"applicantFaxNo", AccThirdPartyAppliInfo::getApplicantFaxNo);
			attributeGetterFunctions.put(
				"applicantWebsite",
				AccThirdPartyAppliInfo::getApplicantWebsite);
			attributeGetterFunctions.put(
				"certificationName",
				AccThirdPartyAppliInfo::getCertificationName);
			attributeGetterFunctions.put(
				"certiAddress", AccThirdPartyAppliInfo::getCertiAddress);
			attributeGetterFunctions.put(
				"personnelName", AccThirdPartyAppliInfo::getPersonnelName);
			attributeGetterFunctions.put(
				"personnelEmail", AccThirdPartyAppliInfo::getPersonnelEmail);
			attributeGetterFunctions.put(
				"personnelContactName",
				AccThirdPartyAppliInfo::getPersonnelContactName);
			attributeGetterFunctions.put(
				"personnelContactEmail",
				AccThirdPartyAppliInfo::getPersonnelContactEmail);
			attributeGetterFunctions.put(
				"personnelFMName", AccThirdPartyAppliInfo::getPersonnelFMName);
			attributeGetterFunctions.put(
				"personnelFMEmail",
				AccThirdPartyAppliInfo::getPersonnelFMEmail);
			attributeGetterFunctions.put(
				"accreditationRequest",
				AccThirdPartyAppliInfo::getAccreditationRequest);
			attributeGetterFunctions.put(
				"accFdaScheme", AccThirdPartyAppliInfo::getAccFdaScheme);
			attributeGetterFunctions.put(
				"specifyOther", AccThirdPartyAppliInfo::getSpecifyOther);
			attributeGetterFunctions.put(
				"supplementaryCertificate",
				AccThirdPartyAppliInfo::getSupplementaryCertificate);
			attributeGetterFunctions.put(
				"supplementaryOther",
				AccThirdPartyAppliInfo::getSupplementaryOther);
			attributeGetterFunctions.put(
				"listOfStandard", AccThirdPartyAppliInfo::getListOfStandard);
			attributeGetterFunctions.put(
				"authorizedPersonnelName",
				AccThirdPartyAppliInfo::getAuthorizedPersonnelName);
			attributeGetterFunctions.put(
				"authorizedPersonnelPos",
				AccThirdPartyAppliInfo::getAuthorizedPersonnelPos);
			attributeGetterFunctions.put(
				"authorizedPersonnelDate",
				AccThirdPartyAppliInfo::getAuthorizedPersonnelDate);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccThirdPartyAppliInfo::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccThirdPartyAppliInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccThirdPartyAppliInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccThirdPartyAppliInfo, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setUuid);
			attributeSetterBiConsumers.put(
				"accThirdPartyAppliInfoId",
				(BiConsumer<AccThirdPartyAppliInfo, Long>)
					AccThirdPartyAppliInfo::setAccThirdPartyAppliInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccThirdPartyAppliInfo, Long>)
					AccThirdPartyAppliInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccThirdPartyAppliInfo, Long>)
					AccThirdPartyAppliInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccThirdPartyAppliInfo, Long>)
					AccThirdPartyAppliInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccThirdPartyAppliInfo, Date>)
					AccThirdPartyAppliInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccThirdPartyAppliInfo, Date>)
					AccThirdPartyAppliInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicantName",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setApplicantName);
			attributeSetterBiConsumers.put(
				"applicantAddress",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setApplicantAddress);
			attributeSetterBiConsumers.put(
				"applicantTelephone",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setApplicantTelephone);
			attributeSetterBiConsumers.put(
				"applicantFaxNo",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setApplicantFaxNo);
			attributeSetterBiConsumers.put(
				"applicantWebsite",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setApplicantWebsite);
			attributeSetterBiConsumers.put(
				"certificationName",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setCertificationName);
			attributeSetterBiConsumers.put(
				"certiAddress",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setCertiAddress);
			attributeSetterBiConsumers.put(
				"personnelName",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setPersonnelName);
			attributeSetterBiConsumers.put(
				"personnelEmail",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setPersonnelEmail);
			attributeSetterBiConsumers.put(
				"personnelContactName",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setPersonnelContactName);
			attributeSetterBiConsumers.put(
				"personnelContactEmail",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setPersonnelContactEmail);
			attributeSetterBiConsumers.put(
				"personnelFMName",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setPersonnelFMName);
			attributeSetterBiConsumers.put(
				"personnelFMEmail",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setPersonnelFMEmail);
			attributeSetterBiConsumers.put(
				"accreditationRequest",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setAccreditationRequest);
			attributeSetterBiConsumers.put(
				"accFdaScheme",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setAccFdaScheme);
			attributeSetterBiConsumers.put(
				"specifyOther",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setSpecifyOther);
			attributeSetterBiConsumers.put(
				"supplementaryCertificate",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setSupplementaryCertificate);
			attributeSetterBiConsumers.put(
				"supplementaryOther",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setSupplementaryOther);
			attributeSetterBiConsumers.put(
				"listOfStandard",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setListOfStandard);
			attributeSetterBiConsumers.put(
				"authorizedPersonnelName",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setAuthorizedPersonnelName);
			attributeSetterBiConsumers.put(
				"authorizedPersonnelPos",
				(BiConsumer<AccThirdPartyAppliInfo, String>)
					AccThirdPartyAppliInfo::setAuthorizedPersonnelPos);
			attributeSetterBiConsumers.put(
				"authorizedPersonnelDate",
				(BiConsumer<AccThirdPartyAppliInfo, Date>)
					AccThirdPartyAppliInfo::setAuthorizedPersonnelDate);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccThirdPartyAppliInfo, Long>)
					AccThirdPartyAppliInfo::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccThirdPartyAppliInfoId() {
		return _accThirdPartyAppliInfoId;
	}

	@Override
	public void setAccThirdPartyAppliInfoId(long accThirdPartyAppliInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accThirdPartyAppliInfoId = accThirdPartyAppliInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return "";
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantAddress = applicantAddress;
	}

	@JSON
	@Override
	public String getApplicantTelephone() {
		if (_applicantTelephone == null) {
			return "";
		}
		else {
			return _applicantTelephone;
		}
	}

	@Override
	public void setApplicantTelephone(String applicantTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantTelephone = applicantTelephone;
	}

	@JSON
	@Override
	public String getApplicantFaxNo() {
		if (_applicantFaxNo == null) {
			return "";
		}
		else {
			return _applicantFaxNo;
		}
	}

	@Override
	public void setApplicantFaxNo(String applicantFaxNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantFaxNo = applicantFaxNo;
	}

	@JSON
	@Override
	public String getApplicantWebsite() {
		if (_applicantWebsite == null) {
			return "";
		}
		else {
			return _applicantWebsite;
		}
	}

	@Override
	public void setApplicantWebsite(String applicantWebsite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantWebsite = applicantWebsite;
	}

	@JSON
	@Override
	public String getCertificationName() {
		if (_certificationName == null) {
			return "";
		}
		else {
			return _certificationName;
		}
	}

	@Override
	public void setCertificationName(String certificationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificationName = certificationName;
	}

	@JSON
	@Override
	public String getCertiAddress() {
		if (_certiAddress == null) {
			return "";
		}
		else {
			return _certiAddress;
		}
	}

	@Override
	public void setCertiAddress(String certiAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certiAddress = certiAddress;
	}

	@JSON
	@Override
	public String getPersonnelName() {
		if (_personnelName == null) {
			return "";
		}
		else {
			return _personnelName;
		}
	}

	@Override
	public void setPersonnelName(String personnelName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelName = personnelName;
	}

	@JSON
	@Override
	public String getPersonnelEmail() {
		if (_personnelEmail == null) {
			return "";
		}
		else {
			return _personnelEmail;
		}
	}

	@Override
	public void setPersonnelEmail(String personnelEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelEmail = personnelEmail;
	}

	@JSON
	@Override
	public String getPersonnelContactName() {
		if (_personnelContactName == null) {
			return "";
		}
		else {
			return _personnelContactName;
		}
	}

	@Override
	public void setPersonnelContactName(String personnelContactName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelContactName = personnelContactName;
	}

	@JSON
	@Override
	public String getPersonnelContactEmail() {
		if (_personnelContactEmail == null) {
			return "";
		}
		else {
			return _personnelContactEmail;
		}
	}

	@Override
	public void setPersonnelContactEmail(String personnelContactEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelContactEmail = personnelContactEmail;
	}

	@JSON
	@Override
	public String getPersonnelFMName() {
		if (_personnelFMName == null) {
			return "";
		}
		else {
			return _personnelFMName;
		}
	}

	@Override
	public void setPersonnelFMName(String personnelFMName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelFMName = personnelFMName;
	}

	@JSON
	@Override
	public String getPersonnelFMEmail() {
		if (_personnelFMEmail == null) {
			return "";
		}
		else {
			return _personnelFMEmail;
		}
	}

	@Override
	public void setPersonnelFMEmail(String personnelFMEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnelFMEmail = personnelFMEmail;
	}

	@JSON
	@Override
	public String getAccreditationRequest() {
		if (_accreditationRequest == null) {
			return "";
		}
		else {
			return _accreditationRequest;
		}
	}

	@Override
	public void setAccreditationRequest(String accreditationRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accreditationRequest = accreditationRequest;
	}

	@JSON
	@Override
	public String getAccFdaScheme() {
		if (_accFdaScheme == null) {
			return "";
		}
		else {
			return _accFdaScheme;
		}
	}

	@Override
	public void setAccFdaScheme(String accFdaScheme) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accFdaScheme = accFdaScheme;
	}

	@JSON
	@Override
	public String getSpecifyOther() {
		if (_specifyOther == null) {
			return "";
		}
		else {
			return _specifyOther;
		}
	}

	@Override
	public void setSpecifyOther(String specifyOther) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specifyOther = specifyOther;
	}

	@JSON
	@Override
	public String getSupplementaryCertificate() {
		if (_supplementaryCertificate == null) {
			return "";
		}
		else {
			return _supplementaryCertificate;
		}
	}

	@Override
	public void setSupplementaryCertificate(String supplementaryCertificate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_supplementaryCertificate = supplementaryCertificate;
	}

	@JSON
	@Override
	public String getSupplementaryOther() {
		if (_supplementaryOther == null) {
			return "";
		}
		else {
			return _supplementaryOther;
		}
	}

	@Override
	public void setSupplementaryOther(String supplementaryOther) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_supplementaryOther = supplementaryOther;
	}

	@JSON
	@Override
	public String getListOfStandard() {
		if (_listOfStandard == null) {
			return "";
		}
		else {
			return _listOfStandard;
		}
	}

	@Override
	public void setListOfStandard(String listOfStandard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_listOfStandard = listOfStandard;
	}

	@JSON
	@Override
	public String getAuthorizedPersonnelName() {
		if (_authorizedPersonnelName == null) {
			return "";
		}
		else {
			return _authorizedPersonnelName;
		}
	}

	@Override
	public void setAuthorizedPersonnelName(String authorizedPersonnelName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorizedPersonnelName = authorizedPersonnelName;
	}

	@JSON
	@Override
	public String getAuthorizedPersonnelPos() {
		if (_authorizedPersonnelPos == null) {
			return "";
		}
		else {
			return _authorizedPersonnelPos;
		}
	}

	@Override
	public void setAuthorizedPersonnelPos(String authorizedPersonnelPos) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorizedPersonnelPos = authorizedPersonnelPos;
	}

	@JSON
	@Override
	public Date getAuthorizedPersonnelDate() {
		return _authorizedPersonnelDate;
	}

	@Override
	public void setAuthorizedPersonnelDate(Date authorizedPersonnelDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorizedPersonnelDate = authorizedPersonnelDate;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccThirdPartyAppliInfo.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccThirdPartyAppliInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccThirdPartyAppliInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccThirdPartyAppliInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccThirdPartyAppliInfoImpl accThirdPartyAppliInfoImpl =
			new AccThirdPartyAppliInfoImpl();

		accThirdPartyAppliInfoImpl.setUuid(getUuid());
		accThirdPartyAppliInfoImpl.setAccThirdPartyAppliInfoId(
			getAccThirdPartyAppliInfoId());
		accThirdPartyAppliInfoImpl.setGroupId(getGroupId());
		accThirdPartyAppliInfoImpl.setCompanyId(getCompanyId());
		accThirdPartyAppliInfoImpl.setUserId(getUserId());
		accThirdPartyAppliInfoImpl.setUserName(getUserName());
		accThirdPartyAppliInfoImpl.setCreateDate(getCreateDate());
		accThirdPartyAppliInfoImpl.setModifiedDate(getModifiedDate());
		accThirdPartyAppliInfoImpl.setApplicantName(getApplicantName());
		accThirdPartyAppliInfoImpl.setApplicantAddress(getApplicantAddress());
		accThirdPartyAppliInfoImpl.setApplicantTelephone(
			getApplicantTelephone());
		accThirdPartyAppliInfoImpl.setApplicantFaxNo(getApplicantFaxNo());
		accThirdPartyAppliInfoImpl.setApplicantWebsite(getApplicantWebsite());
		accThirdPartyAppliInfoImpl.setCertificationName(getCertificationName());
		accThirdPartyAppliInfoImpl.setCertiAddress(getCertiAddress());
		accThirdPartyAppliInfoImpl.setPersonnelName(getPersonnelName());
		accThirdPartyAppliInfoImpl.setPersonnelEmail(getPersonnelEmail());
		accThirdPartyAppliInfoImpl.setPersonnelContactName(
			getPersonnelContactName());
		accThirdPartyAppliInfoImpl.setPersonnelContactEmail(
			getPersonnelContactEmail());
		accThirdPartyAppliInfoImpl.setPersonnelFMName(getPersonnelFMName());
		accThirdPartyAppliInfoImpl.setPersonnelFMEmail(getPersonnelFMEmail());
		accThirdPartyAppliInfoImpl.setAccreditationRequest(
			getAccreditationRequest());
		accThirdPartyAppliInfoImpl.setAccFdaScheme(getAccFdaScheme());
		accThirdPartyAppliInfoImpl.setSpecifyOther(getSpecifyOther());
		accThirdPartyAppliInfoImpl.setSupplementaryCertificate(
			getSupplementaryCertificate());
		accThirdPartyAppliInfoImpl.setSupplementaryOther(
			getSupplementaryOther());
		accThirdPartyAppliInfoImpl.setListOfStandard(getListOfStandard());
		accThirdPartyAppliInfoImpl.setAuthorizedPersonnelName(
			getAuthorizedPersonnelName());
		accThirdPartyAppliInfoImpl.setAuthorizedPersonnelPos(
			getAuthorizedPersonnelPos());
		accThirdPartyAppliInfoImpl.setAuthorizedPersonnelDate(
			getAuthorizedPersonnelDate());
		accThirdPartyAppliInfoImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accThirdPartyAppliInfoImpl.resetOriginalValues();

		return accThirdPartyAppliInfoImpl;
	}

	@Override
	public AccThirdPartyAppliInfo cloneWithOriginalValues() {
		AccThirdPartyAppliInfoImpl accThirdPartyAppliInfoImpl =
			new AccThirdPartyAppliInfoImpl();

		accThirdPartyAppliInfoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accThirdPartyAppliInfoImpl.setAccThirdPartyAppliInfoId(
			this.<Long>getColumnOriginalValue("accThirdPartyAppliInfoId"));
		accThirdPartyAppliInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accThirdPartyAppliInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accThirdPartyAppliInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accThirdPartyAppliInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accThirdPartyAppliInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accThirdPartyAppliInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accThirdPartyAppliInfoImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		accThirdPartyAppliInfoImpl.setApplicantAddress(
			this.<String>getColumnOriginalValue("applicantAddress"));
		accThirdPartyAppliInfoImpl.setApplicantTelephone(
			this.<String>getColumnOriginalValue("applicantTelephone"));
		accThirdPartyAppliInfoImpl.setApplicantFaxNo(
			this.<String>getColumnOriginalValue("applicantFaxNo"));
		accThirdPartyAppliInfoImpl.setApplicantWebsite(
			this.<String>getColumnOriginalValue("applicantWebsite"));
		accThirdPartyAppliInfoImpl.setCertificationName(
			this.<String>getColumnOriginalValue("certificationName"));
		accThirdPartyAppliInfoImpl.setCertiAddress(
			this.<String>getColumnOriginalValue("certiAddress"));
		accThirdPartyAppliInfoImpl.setPersonnelName(
			this.<String>getColumnOriginalValue("personnelName"));
		accThirdPartyAppliInfoImpl.setPersonnelEmail(
			this.<String>getColumnOriginalValue("personnelEmail"));
		accThirdPartyAppliInfoImpl.setPersonnelContactName(
			this.<String>getColumnOriginalValue("personnelContactName"));
		accThirdPartyAppliInfoImpl.setPersonnelContactEmail(
			this.<String>getColumnOriginalValue("personnelContactEmail"));
		accThirdPartyAppliInfoImpl.setPersonnelFMName(
			this.<String>getColumnOriginalValue("personnelFMName"));
		accThirdPartyAppliInfoImpl.setPersonnelFMEmail(
			this.<String>getColumnOriginalValue("personnelFMEmail"));
		accThirdPartyAppliInfoImpl.setAccreditationRequest(
			this.<String>getColumnOriginalValue("accreditationRequest"));
		accThirdPartyAppliInfoImpl.setAccFdaScheme(
			this.<String>getColumnOriginalValue("accFdaScheme"));
		accThirdPartyAppliInfoImpl.setSpecifyOther(
			this.<String>getColumnOriginalValue("specifyOther"));
		accThirdPartyAppliInfoImpl.setSupplementaryCertificate(
			this.<String>getColumnOriginalValue("supplementaryCertificate"));
		accThirdPartyAppliInfoImpl.setSupplementaryOther(
			this.<String>getColumnOriginalValue("supplementaryOther"));
		accThirdPartyAppliInfoImpl.setListOfStandard(
			this.<String>getColumnOriginalValue("listOfStandard"));
		accThirdPartyAppliInfoImpl.setAuthorizedPersonnelName(
			this.<String>getColumnOriginalValue("authorizedPersonnelName"));
		accThirdPartyAppliInfoImpl.setAuthorizedPersonnelPos(
			this.<String>getColumnOriginalValue("authorizedPersonnelPos"));
		accThirdPartyAppliInfoImpl.setAuthorizedPersonnelDate(
			this.<Date>getColumnOriginalValue("authorizedPersonnelDate"));
		accThirdPartyAppliInfoImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accThirdPartyAppliInfoImpl;
	}

	@Override
	public int compareTo(AccThirdPartyAppliInfo accThirdPartyAppliInfo) {
		long primaryKey = accThirdPartyAppliInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccThirdPartyAppliInfo)) {
			return false;
		}

		AccThirdPartyAppliInfo accThirdPartyAppliInfo =
			(AccThirdPartyAppliInfo)object;

		long primaryKey = accThirdPartyAppliInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccThirdPartyAppliInfo> toCacheModel() {
		AccThirdPartyAppliInfoCacheModel accThirdPartyAppliInfoCacheModel =
			new AccThirdPartyAppliInfoCacheModel();

		accThirdPartyAppliInfoCacheModel.uuid = getUuid();

		String uuid = accThirdPartyAppliInfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.uuid = null;
		}

		accThirdPartyAppliInfoCacheModel.accThirdPartyAppliInfoId =
			getAccThirdPartyAppliInfoId();

		accThirdPartyAppliInfoCacheModel.groupId = getGroupId();

		accThirdPartyAppliInfoCacheModel.companyId = getCompanyId();

		accThirdPartyAppliInfoCacheModel.userId = getUserId();

		accThirdPartyAppliInfoCacheModel.userName = getUserName();

		String userName = accThirdPartyAppliInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accThirdPartyAppliInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			accThirdPartyAppliInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accThirdPartyAppliInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accThirdPartyAppliInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accThirdPartyAppliInfoCacheModel.applicantName = getApplicantName();

		String applicantName = accThirdPartyAppliInfoCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.applicantName = null;
		}

		accThirdPartyAppliInfoCacheModel.applicantAddress =
			getApplicantAddress();

		String applicantAddress =
			accThirdPartyAppliInfoCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.applicantAddress = null;
		}

		accThirdPartyAppliInfoCacheModel.applicantTelephone =
			getApplicantTelephone();

		String applicantTelephone =
			accThirdPartyAppliInfoCacheModel.applicantTelephone;

		if ((applicantTelephone != null) &&
			(applicantTelephone.length() == 0)) {

			accThirdPartyAppliInfoCacheModel.applicantTelephone = null;
		}

		accThirdPartyAppliInfoCacheModel.applicantFaxNo = getApplicantFaxNo();

		String applicantFaxNo = accThirdPartyAppliInfoCacheModel.applicantFaxNo;

		if ((applicantFaxNo != null) && (applicantFaxNo.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.applicantFaxNo = null;
		}

		accThirdPartyAppliInfoCacheModel.applicantWebsite =
			getApplicantWebsite();

		String applicantWebsite =
			accThirdPartyAppliInfoCacheModel.applicantWebsite;

		if ((applicantWebsite != null) && (applicantWebsite.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.applicantWebsite = null;
		}

		accThirdPartyAppliInfoCacheModel.certificationName =
			getCertificationName();

		String certificationName =
			accThirdPartyAppliInfoCacheModel.certificationName;

		if ((certificationName != null) && (certificationName.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.certificationName = null;
		}

		accThirdPartyAppliInfoCacheModel.certiAddress = getCertiAddress();

		String certiAddress = accThirdPartyAppliInfoCacheModel.certiAddress;

		if ((certiAddress != null) && (certiAddress.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.certiAddress = null;
		}

		accThirdPartyAppliInfoCacheModel.personnelName = getPersonnelName();

		String personnelName = accThirdPartyAppliInfoCacheModel.personnelName;

		if ((personnelName != null) && (personnelName.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.personnelName = null;
		}

		accThirdPartyAppliInfoCacheModel.personnelEmail = getPersonnelEmail();

		String personnelEmail = accThirdPartyAppliInfoCacheModel.personnelEmail;

		if ((personnelEmail != null) && (personnelEmail.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.personnelEmail = null;
		}

		accThirdPartyAppliInfoCacheModel.personnelContactName =
			getPersonnelContactName();

		String personnelContactName =
			accThirdPartyAppliInfoCacheModel.personnelContactName;

		if ((personnelContactName != null) &&
			(personnelContactName.length() == 0)) {

			accThirdPartyAppliInfoCacheModel.personnelContactName = null;
		}

		accThirdPartyAppliInfoCacheModel.personnelContactEmail =
			getPersonnelContactEmail();

		String personnelContactEmail =
			accThirdPartyAppliInfoCacheModel.personnelContactEmail;

		if ((personnelContactEmail != null) &&
			(personnelContactEmail.length() == 0)) {

			accThirdPartyAppliInfoCacheModel.personnelContactEmail = null;
		}

		accThirdPartyAppliInfoCacheModel.personnelFMName = getPersonnelFMName();

		String personnelFMName =
			accThirdPartyAppliInfoCacheModel.personnelFMName;

		if ((personnelFMName != null) && (personnelFMName.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.personnelFMName = null;
		}

		accThirdPartyAppliInfoCacheModel.personnelFMEmail =
			getPersonnelFMEmail();

		String personnelFMEmail =
			accThirdPartyAppliInfoCacheModel.personnelFMEmail;

		if ((personnelFMEmail != null) && (personnelFMEmail.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.personnelFMEmail = null;
		}

		accThirdPartyAppliInfoCacheModel.accreditationRequest =
			getAccreditationRequest();

		String accreditationRequest =
			accThirdPartyAppliInfoCacheModel.accreditationRequest;

		if ((accreditationRequest != null) &&
			(accreditationRequest.length() == 0)) {

			accThirdPartyAppliInfoCacheModel.accreditationRequest = null;
		}

		accThirdPartyAppliInfoCacheModel.accFdaScheme = getAccFdaScheme();

		String accFdaScheme = accThirdPartyAppliInfoCacheModel.accFdaScheme;

		if ((accFdaScheme != null) && (accFdaScheme.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.accFdaScheme = null;
		}

		accThirdPartyAppliInfoCacheModel.specifyOther = getSpecifyOther();

		String specifyOther = accThirdPartyAppliInfoCacheModel.specifyOther;

		if ((specifyOther != null) && (specifyOther.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.specifyOther = null;
		}

		accThirdPartyAppliInfoCacheModel.supplementaryCertificate =
			getSupplementaryCertificate();

		String supplementaryCertificate =
			accThirdPartyAppliInfoCacheModel.supplementaryCertificate;

		if ((supplementaryCertificate != null) &&
			(supplementaryCertificate.length() == 0)) {

			accThirdPartyAppliInfoCacheModel.supplementaryCertificate = null;
		}

		accThirdPartyAppliInfoCacheModel.supplementaryOther =
			getSupplementaryOther();

		String supplementaryOther =
			accThirdPartyAppliInfoCacheModel.supplementaryOther;

		if ((supplementaryOther != null) &&
			(supplementaryOther.length() == 0)) {

			accThirdPartyAppliInfoCacheModel.supplementaryOther = null;
		}

		accThirdPartyAppliInfoCacheModel.listOfStandard = getListOfStandard();

		String listOfStandard = accThirdPartyAppliInfoCacheModel.listOfStandard;

		if ((listOfStandard != null) && (listOfStandard.length() == 0)) {
			accThirdPartyAppliInfoCacheModel.listOfStandard = null;
		}

		accThirdPartyAppliInfoCacheModel.authorizedPersonnelName =
			getAuthorizedPersonnelName();

		String authorizedPersonnelName =
			accThirdPartyAppliInfoCacheModel.authorizedPersonnelName;

		if ((authorizedPersonnelName != null) &&
			(authorizedPersonnelName.length() == 0)) {

			accThirdPartyAppliInfoCacheModel.authorizedPersonnelName = null;
		}

		accThirdPartyAppliInfoCacheModel.authorizedPersonnelPos =
			getAuthorizedPersonnelPos();

		String authorizedPersonnelPos =
			accThirdPartyAppliInfoCacheModel.authorizedPersonnelPos;

		if ((authorizedPersonnelPos != null) &&
			(authorizedPersonnelPos.length() == 0)) {

			accThirdPartyAppliInfoCacheModel.authorizedPersonnelPos = null;
		}

		Date authorizedPersonnelDate = getAuthorizedPersonnelDate();

		if (authorizedPersonnelDate != null) {
			accThirdPartyAppliInfoCacheModel.authorizedPersonnelDate =
				authorizedPersonnelDate.getTime();
		}
		else {
			accThirdPartyAppliInfoCacheModel.authorizedPersonnelDate =
				Long.MIN_VALUE;
		}

		accThirdPartyAppliInfoCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accThirdPartyAppliInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccThirdPartyAppliInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccThirdPartyAppliInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccThirdPartyAppliInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccThirdPartyAppliInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccThirdPartyAppliInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccThirdPartyAppliInfo.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accThirdPartyAppliInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicantName;
	private String _applicantAddress;
	private String _applicantTelephone;
	private String _applicantFaxNo;
	private String _applicantWebsite;
	private String _certificationName;
	private String _certiAddress;
	private String _personnelName;
	private String _personnelEmail;
	private String _personnelContactName;
	private String _personnelContactEmail;
	private String _personnelFMName;
	private String _personnelFMEmail;
	private String _accreditationRequest;
	private String _accFdaScheme;
	private String _specifyOther;
	private String _supplementaryCertificate;
	private String _supplementaryOther;
	private String _listOfStandard;
	private String _authorizedPersonnelName;
	private String _authorizedPersonnelPos;
	private Date _authorizedPersonnelDate;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccThirdPartyAppliInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccThirdPartyAppliInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accThirdPartyAppliInfoId", _accThirdPartyAppliInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("applicantAddress", _applicantAddress);
		_columnOriginalValues.put("applicantTelephone", _applicantTelephone);
		_columnOriginalValues.put("applicantFaxNo", _applicantFaxNo);
		_columnOriginalValues.put("applicantWebsite", _applicantWebsite);
		_columnOriginalValues.put("certificationName", _certificationName);
		_columnOriginalValues.put("certiAddress", _certiAddress);
		_columnOriginalValues.put("personnelName", _personnelName);
		_columnOriginalValues.put("personnelEmail", _personnelEmail);
		_columnOriginalValues.put(
			"personnelContactName", _personnelContactName);
		_columnOriginalValues.put(
			"personnelContactEmail", _personnelContactEmail);
		_columnOriginalValues.put("personnelFMName", _personnelFMName);
		_columnOriginalValues.put("personnelFMEmail", _personnelFMEmail);
		_columnOriginalValues.put(
			"accreditationRequest", _accreditationRequest);
		_columnOriginalValues.put("accFdaScheme", _accFdaScheme);
		_columnOriginalValues.put("specifyOther", _specifyOther);
		_columnOriginalValues.put(
			"supplementaryCertificate", _supplementaryCertificate);
		_columnOriginalValues.put("supplementaryOther", _supplementaryOther);
		_columnOriginalValues.put("listOfStandard", _listOfStandard);
		_columnOriginalValues.put(
			"authorizedPersonnelName", _authorizedPersonnelName);
		_columnOriginalValues.put(
			"authorizedPersonnelPos", _authorizedPersonnelPos);
		_columnOriginalValues.put(
			"authorizedPersonnelDate", _authorizedPersonnelDate);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accThirdPartyAppliInfoId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("applicantName", 256L);

		columnBitmasks.put("applicantAddress", 512L);

		columnBitmasks.put("applicantTelephone", 1024L);

		columnBitmasks.put("applicantFaxNo", 2048L);

		columnBitmasks.put("applicantWebsite", 4096L);

		columnBitmasks.put("certificationName", 8192L);

		columnBitmasks.put("certiAddress", 16384L);

		columnBitmasks.put("personnelName", 32768L);

		columnBitmasks.put("personnelEmail", 65536L);

		columnBitmasks.put("personnelContactName", 131072L);

		columnBitmasks.put("personnelContactEmail", 262144L);

		columnBitmasks.put("personnelFMName", 524288L);

		columnBitmasks.put("personnelFMEmail", 1048576L);

		columnBitmasks.put("accreditationRequest", 2097152L);

		columnBitmasks.put("accFdaScheme", 4194304L);

		columnBitmasks.put("specifyOther", 8388608L);

		columnBitmasks.put("supplementaryCertificate", 16777216L);

		columnBitmasks.put("supplementaryOther", 33554432L);

		columnBitmasks.put("listOfStandard", 67108864L);

		columnBitmasks.put("authorizedPersonnelName", 134217728L);

		columnBitmasks.put("authorizedPersonnelPos", 268435456L);

		columnBitmasks.put("authorizedPersonnelDate", 536870912L);

		columnBitmasks.put("janaacApplicationId", 1073741824L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccThirdPartyAppliInfo _escapedModel;

}