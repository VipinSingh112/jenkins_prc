/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccMediLabTestResourceReq;
import com.nbp.janaac.application.form.service.model.AccMediLabTestResourceReqModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccMediLabTestResourceReq service. Represents a row in the &quot;nbp_janaac_acc_med_test_reso&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccMediLabTestResourceReqModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccMediLabTestResourceReqImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccMediLabTestResourceReqImpl
 * @generated
 */
@JSON(strict = true)
public class AccMediLabTestResourceReqModelImpl
	extends BaseModelImpl<AccMediLabTestResourceReq>
	implements AccMediLabTestResourceReqModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc medi lab test resource req model instance should use the <code>AccMediLabTestResourceReq</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_med_test_reso";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accMediLabTestResourceReqId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"testExternal", Types.VARCHAR}, {"testCompetence", Types.VARCHAR},
		{"testLabFacilities", Types.VARCHAR},
		{"testLabContracted", Types.VARCHAR},
		{"testLabFacilityEnv", Types.VARCHAR},
		{"testSpecialEnv", Types.VARCHAR}, {"testMonitoringAct", Types.VARCHAR},
		{"testLabRelatedEquip", Types.VARCHAR},
		{"testSecurityArrange", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accMediLabTestResourceReqId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("testExternal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testCompetence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testLabFacilities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testLabContracted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testLabFacilityEnv", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testSpecialEnv", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testMonitoringAct", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testLabRelatedEquip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testSecurityArrange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_med_test_reso (uuid_ VARCHAR(75) null,accMediLabTestResourceReqId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,testExternal VARCHAR(75) null,testCompetence VARCHAR(75) null,testLabFacilities VARCHAR(75) null,testLabContracted VARCHAR(75) null,testLabFacilityEnv VARCHAR(75) null,testSpecialEnv VARCHAR(75) null,testMonitoringAct VARCHAR(75) null,testLabRelatedEquip VARCHAR(75) null,testSecurityArrange VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_med_test_reso";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accMediLabTestResourceReq.accMediLabTestResourceReqId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_med_test_reso.accMediLabTestResourceReqId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCMEDILABTESTRESOURCEREQID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccMediLabTestResourceReqModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accMediLabTestResourceReqId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccMediLabTestResourceReqId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accMediLabTestResourceReqId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccMediLabTestResourceReq.class;
	}

	@Override
	public String getModelClassName() {
		return AccMediLabTestResourceReq.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccMediLabTestResourceReq, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccMediLabTestResourceReq, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabTestResourceReq, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccMediLabTestResourceReq)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccMediLabTestResourceReq, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccMediLabTestResourceReq, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccMediLabTestResourceReq)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccMediLabTestResourceReq, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccMediLabTestResourceReq, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccMediLabTestResourceReq, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccMediLabTestResourceReq, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccMediLabTestResourceReq, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccMediLabTestResourceReq::getUuid);
			attributeGetterFunctions.put(
				"accMediLabTestResourceReqId",
				AccMediLabTestResourceReq::getAccMediLabTestResourceReqId);
			attributeGetterFunctions.put(
				"groupId", AccMediLabTestResourceReq::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccMediLabTestResourceReq::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccMediLabTestResourceReq::getUserId);
			attributeGetterFunctions.put(
				"userName", AccMediLabTestResourceReq::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccMediLabTestResourceReq::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccMediLabTestResourceReq::getModifiedDate);
			attributeGetterFunctions.put(
				"testExternal", AccMediLabTestResourceReq::getTestExternal);
			attributeGetterFunctions.put(
				"testCompetence", AccMediLabTestResourceReq::getTestCompetence);
			attributeGetterFunctions.put(
				"testLabFacilities",
				AccMediLabTestResourceReq::getTestLabFacilities);
			attributeGetterFunctions.put(
				"testLabContracted",
				AccMediLabTestResourceReq::getTestLabContracted);
			attributeGetterFunctions.put(
				"testLabFacilityEnv",
				AccMediLabTestResourceReq::getTestLabFacilityEnv);
			attributeGetterFunctions.put(
				"testSpecialEnv", AccMediLabTestResourceReq::getTestSpecialEnv);
			attributeGetterFunctions.put(
				"testMonitoringAct",
				AccMediLabTestResourceReq::getTestMonitoringAct);
			attributeGetterFunctions.put(
				"testLabRelatedEquip",
				AccMediLabTestResourceReq::getTestLabRelatedEquip);
			attributeGetterFunctions.put(
				"testSecurityArrange",
				AccMediLabTestResourceReq::getTestSecurityArrange);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccMediLabTestResourceReq::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccMediLabTestResourceReq, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccMediLabTestResourceReq, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccMediLabTestResourceReq, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setUuid);
			attributeSetterBiConsumers.put(
				"accMediLabTestResourceReqId",
				(BiConsumer<AccMediLabTestResourceReq, Long>)
					AccMediLabTestResourceReq::setAccMediLabTestResourceReqId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccMediLabTestResourceReq, Long>)
					AccMediLabTestResourceReq::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccMediLabTestResourceReq, Long>)
					AccMediLabTestResourceReq::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccMediLabTestResourceReq, Long>)
					AccMediLabTestResourceReq::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccMediLabTestResourceReq, Date>)
					AccMediLabTestResourceReq::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccMediLabTestResourceReq, Date>)
					AccMediLabTestResourceReq::setModifiedDate);
			attributeSetterBiConsumers.put(
				"testExternal",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestExternal);
			attributeSetterBiConsumers.put(
				"testCompetence",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestCompetence);
			attributeSetterBiConsumers.put(
				"testLabFacilities",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestLabFacilities);
			attributeSetterBiConsumers.put(
				"testLabContracted",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestLabContracted);
			attributeSetterBiConsumers.put(
				"testLabFacilityEnv",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestLabFacilityEnv);
			attributeSetterBiConsumers.put(
				"testSpecialEnv",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestSpecialEnv);
			attributeSetterBiConsumers.put(
				"testMonitoringAct",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestMonitoringAct);
			attributeSetterBiConsumers.put(
				"testLabRelatedEquip",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestLabRelatedEquip);
			attributeSetterBiConsumers.put(
				"testSecurityArrange",
				(BiConsumer<AccMediLabTestResourceReq, String>)
					AccMediLabTestResourceReq::setTestSecurityArrange);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccMediLabTestResourceReq, Long>)
					AccMediLabTestResourceReq::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccMediLabTestResourceReqId() {
		return _accMediLabTestResourceReqId;
	}

	@Override
	public void setAccMediLabTestResourceReqId(
		long accMediLabTestResourceReqId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accMediLabTestResourceReqId = accMediLabTestResourceReqId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTestExternal() {
		if (_testExternal == null) {
			return "";
		}
		else {
			return _testExternal;
		}
	}

	@Override
	public void setTestExternal(String testExternal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testExternal = testExternal;
	}

	@JSON
	@Override
	public String getTestCompetence() {
		if (_testCompetence == null) {
			return "";
		}
		else {
			return _testCompetence;
		}
	}

	@Override
	public void setTestCompetence(String testCompetence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testCompetence = testCompetence;
	}

	@JSON
	@Override
	public String getTestLabFacilities() {
		if (_testLabFacilities == null) {
			return "";
		}
		else {
			return _testLabFacilities;
		}
	}

	@Override
	public void setTestLabFacilities(String testLabFacilities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testLabFacilities = testLabFacilities;
	}

	@JSON
	@Override
	public String getTestLabContracted() {
		if (_testLabContracted == null) {
			return "";
		}
		else {
			return _testLabContracted;
		}
	}

	@Override
	public void setTestLabContracted(String testLabContracted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testLabContracted = testLabContracted;
	}

	@JSON
	@Override
	public String getTestLabFacilityEnv() {
		if (_testLabFacilityEnv == null) {
			return "";
		}
		else {
			return _testLabFacilityEnv;
		}
	}

	@Override
	public void setTestLabFacilityEnv(String testLabFacilityEnv) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testLabFacilityEnv = testLabFacilityEnv;
	}

	@JSON
	@Override
	public String getTestSpecialEnv() {
		if (_testSpecialEnv == null) {
			return "";
		}
		else {
			return _testSpecialEnv;
		}
	}

	@Override
	public void setTestSpecialEnv(String testSpecialEnv) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testSpecialEnv = testSpecialEnv;
	}

	@JSON
	@Override
	public String getTestMonitoringAct() {
		if (_testMonitoringAct == null) {
			return "";
		}
		else {
			return _testMonitoringAct;
		}
	}

	@Override
	public void setTestMonitoringAct(String testMonitoringAct) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testMonitoringAct = testMonitoringAct;
	}

	@JSON
	@Override
	public String getTestLabRelatedEquip() {
		if (_testLabRelatedEquip == null) {
			return "";
		}
		else {
			return _testLabRelatedEquip;
		}
	}

	@Override
	public void setTestLabRelatedEquip(String testLabRelatedEquip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testLabRelatedEquip = testLabRelatedEquip;
	}

	@JSON
	@Override
	public String getTestSecurityArrange() {
		if (_testSecurityArrange == null) {
			return "";
		}
		else {
			return _testSecurityArrange;
		}
	}

	@Override
	public void setTestSecurityArrange(String testSecurityArrange) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testSecurityArrange = testSecurityArrange;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				AccMediLabTestResourceReq.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccMediLabTestResourceReq.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccMediLabTestResourceReq toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccMediLabTestResourceReq>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccMediLabTestResourceReqImpl accMediLabTestResourceReqImpl =
			new AccMediLabTestResourceReqImpl();

		accMediLabTestResourceReqImpl.setUuid(getUuid());
		accMediLabTestResourceReqImpl.setAccMediLabTestResourceReqId(
			getAccMediLabTestResourceReqId());
		accMediLabTestResourceReqImpl.setGroupId(getGroupId());
		accMediLabTestResourceReqImpl.setCompanyId(getCompanyId());
		accMediLabTestResourceReqImpl.setUserId(getUserId());
		accMediLabTestResourceReqImpl.setUserName(getUserName());
		accMediLabTestResourceReqImpl.setCreateDate(getCreateDate());
		accMediLabTestResourceReqImpl.setModifiedDate(getModifiedDate());
		accMediLabTestResourceReqImpl.setTestExternal(getTestExternal());
		accMediLabTestResourceReqImpl.setTestCompetence(getTestCompetence());
		accMediLabTestResourceReqImpl.setTestLabFacilities(
			getTestLabFacilities());
		accMediLabTestResourceReqImpl.setTestLabContracted(
			getTestLabContracted());
		accMediLabTestResourceReqImpl.setTestLabFacilityEnv(
			getTestLabFacilityEnv());
		accMediLabTestResourceReqImpl.setTestSpecialEnv(getTestSpecialEnv());
		accMediLabTestResourceReqImpl.setTestMonitoringAct(
			getTestMonitoringAct());
		accMediLabTestResourceReqImpl.setTestLabRelatedEquip(
			getTestLabRelatedEquip());
		accMediLabTestResourceReqImpl.setTestSecurityArrange(
			getTestSecurityArrange());
		accMediLabTestResourceReqImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accMediLabTestResourceReqImpl.resetOriginalValues();

		return accMediLabTestResourceReqImpl;
	}

	@Override
	public AccMediLabTestResourceReq cloneWithOriginalValues() {
		AccMediLabTestResourceReqImpl accMediLabTestResourceReqImpl =
			new AccMediLabTestResourceReqImpl();

		accMediLabTestResourceReqImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accMediLabTestResourceReqImpl.setAccMediLabTestResourceReqId(
			this.<Long>getColumnOriginalValue("accMediLabTestResourceReqId"));
		accMediLabTestResourceReqImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accMediLabTestResourceReqImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accMediLabTestResourceReqImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accMediLabTestResourceReqImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accMediLabTestResourceReqImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accMediLabTestResourceReqImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accMediLabTestResourceReqImpl.setTestExternal(
			this.<String>getColumnOriginalValue("testExternal"));
		accMediLabTestResourceReqImpl.setTestCompetence(
			this.<String>getColumnOriginalValue("testCompetence"));
		accMediLabTestResourceReqImpl.setTestLabFacilities(
			this.<String>getColumnOriginalValue("testLabFacilities"));
		accMediLabTestResourceReqImpl.setTestLabContracted(
			this.<String>getColumnOriginalValue("testLabContracted"));
		accMediLabTestResourceReqImpl.setTestLabFacilityEnv(
			this.<String>getColumnOriginalValue("testLabFacilityEnv"));
		accMediLabTestResourceReqImpl.setTestSpecialEnv(
			this.<String>getColumnOriginalValue("testSpecialEnv"));
		accMediLabTestResourceReqImpl.setTestMonitoringAct(
			this.<String>getColumnOriginalValue("testMonitoringAct"));
		accMediLabTestResourceReqImpl.setTestLabRelatedEquip(
			this.<String>getColumnOriginalValue("testLabRelatedEquip"));
		accMediLabTestResourceReqImpl.setTestSecurityArrange(
			this.<String>getColumnOriginalValue("testSecurityArrange"));
		accMediLabTestResourceReqImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accMediLabTestResourceReqImpl;
	}

	@Override
	public int compareTo(AccMediLabTestResourceReq accMediLabTestResourceReq) {
		long primaryKey = accMediLabTestResourceReq.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccMediLabTestResourceReq)) {
			return false;
		}

		AccMediLabTestResourceReq accMediLabTestResourceReq =
			(AccMediLabTestResourceReq)object;

		long primaryKey = accMediLabTestResourceReq.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccMediLabTestResourceReq> toCacheModel() {
		AccMediLabTestResourceReqCacheModel
			accMediLabTestResourceReqCacheModel =
				new AccMediLabTestResourceReqCacheModel();

		accMediLabTestResourceReqCacheModel.uuid = getUuid();

		String uuid = accMediLabTestResourceReqCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accMediLabTestResourceReqCacheModel.uuid = null;
		}

		accMediLabTestResourceReqCacheModel.accMediLabTestResourceReqId =
			getAccMediLabTestResourceReqId();

		accMediLabTestResourceReqCacheModel.groupId = getGroupId();

		accMediLabTestResourceReqCacheModel.companyId = getCompanyId();

		accMediLabTestResourceReqCacheModel.userId = getUserId();

		accMediLabTestResourceReqCacheModel.userName = getUserName();

		String userName = accMediLabTestResourceReqCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accMediLabTestResourceReqCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accMediLabTestResourceReqCacheModel.createDate =
				createDate.getTime();
		}
		else {
			accMediLabTestResourceReqCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accMediLabTestResourceReqCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accMediLabTestResourceReqCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accMediLabTestResourceReqCacheModel.testExternal = getTestExternal();

		String testExternal = accMediLabTestResourceReqCacheModel.testExternal;

		if ((testExternal != null) && (testExternal.length() == 0)) {
			accMediLabTestResourceReqCacheModel.testExternal = null;
		}

		accMediLabTestResourceReqCacheModel.testCompetence =
			getTestCompetence();

		String testCompetence =
			accMediLabTestResourceReqCacheModel.testCompetence;

		if ((testCompetence != null) && (testCompetence.length() == 0)) {
			accMediLabTestResourceReqCacheModel.testCompetence = null;
		}

		accMediLabTestResourceReqCacheModel.testLabFacilities =
			getTestLabFacilities();

		String testLabFacilities =
			accMediLabTestResourceReqCacheModel.testLabFacilities;

		if ((testLabFacilities != null) && (testLabFacilities.length() == 0)) {
			accMediLabTestResourceReqCacheModel.testLabFacilities = null;
		}

		accMediLabTestResourceReqCacheModel.testLabContracted =
			getTestLabContracted();

		String testLabContracted =
			accMediLabTestResourceReqCacheModel.testLabContracted;

		if ((testLabContracted != null) && (testLabContracted.length() == 0)) {
			accMediLabTestResourceReqCacheModel.testLabContracted = null;
		}

		accMediLabTestResourceReqCacheModel.testLabFacilityEnv =
			getTestLabFacilityEnv();

		String testLabFacilityEnv =
			accMediLabTestResourceReqCacheModel.testLabFacilityEnv;

		if ((testLabFacilityEnv != null) &&
			(testLabFacilityEnv.length() == 0)) {

			accMediLabTestResourceReqCacheModel.testLabFacilityEnv = null;
		}

		accMediLabTestResourceReqCacheModel.testSpecialEnv =
			getTestSpecialEnv();

		String testSpecialEnv =
			accMediLabTestResourceReqCacheModel.testSpecialEnv;

		if ((testSpecialEnv != null) && (testSpecialEnv.length() == 0)) {
			accMediLabTestResourceReqCacheModel.testSpecialEnv = null;
		}

		accMediLabTestResourceReqCacheModel.testMonitoringAct =
			getTestMonitoringAct();

		String testMonitoringAct =
			accMediLabTestResourceReqCacheModel.testMonitoringAct;

		if ((testMonitoringAct != null) && (testMonitoringAct.length() == 0)) {
			accMediLabTestResourceReqCacheModel.testMonitoringAct = null;
		}

		accMediLabTestResourceReqCacheModel.testLabRelatedEquip =
			getTestLabRelatedEquip();

		String testLabRelatedEquip =
			accMediLabTestResourceReqCacheModel.testLabRelatedEquip;

		if ((testLabRelatedEquip != null) &&
			(testLabRelatedEquip.length() == 0)) {

			accMediLabTestResourceReqCacheModel.testLabRelatedEquip = null;
		}

		accMediLabTestResourceReqCacheModel.testSecurityArrange =
			getTestSecurityArrange();

		String testSecurityArrange =
			accMediLabTestResourceReqCacheModel.testSecurityArrange;

		if ((testSecurityArrange != null) &&
			(testSecurityArrange.length() == 0)) {

			accMediLabTestResourceReqCacheModel.testSecurityArrange = null;
		}

		accMediLabTestResourceReqCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accMediLabTestResourceReqCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccMediLabTestResourceReq, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccMediLabTestResourceReq, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabTestResourceReq, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccMediLabTestResourceReq)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AccMediLabTestResourceReq>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AccMediLabTestResourceReq.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accMediLabTestResourceReqId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _testExternal;
	private String _testCompetence;
	private String _testLabFacilities;
	private String _testLabContracted;
	private String _testLabFacilityEnv;
	private String _testSpecialEnv;
	private String _testMonitoringAct;
	private String _testLabRelatedEquip;
	private String _testSecurityArrange;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccMediLabTestResourceReq, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccMediLabTestResourceReq)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accMediLabTestResourceReqId", _accMediLabTestResourceReqId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("testExternal", _testExternal);
		_columnOriginalValues.put("testCompetence", _testCompetence);
		_columnOriginalValues.put("testLabFacilities", _testLabFacilities);
		_columnOriginalValues.put("testLabContracted", _testLabContracted);
		_columnOriginalValues.put("testLabFacilityEnv", _testLabFacilityEnv);
		_columnOriginalValues.put("testSpecialEnv", _testSpecialEnv);
		_columnOriginalValues.put("testMonitoringAct", _testMonitoringAct);
		_columnOriginalValues.put("testLabRelatedEquip", _testLabRelatedEquip);
		_columnOriginalValues.put("testSecurityArrange", _testSecurityArrange);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accMediLabTestResourceReqId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("testExternal", 256L);

		columnBitmasks.put("testCompetence", 512L);

		columnBitmasks.put("testLabFacilities", 1024L);

		columnBitmasks.put("testLabContracted", 2048L);

		columnBitmasks.put("testLabFacilityEnv", 4096L);

		columnBitmasks.put("testSpecialEnv", 8192L);

		columnBitmasks.put("testMonitoringAct", 16384L);

		columnBitmasks.put("testLabRelatedEquip", 32768L);

		columnBitmasks.put("testSecurityArrange", 65536L);

		columnBitmasks.put("janaacApplicationId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccMediLabTestResourceReq _escapedModel;

}