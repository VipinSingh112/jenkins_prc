/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccCerBodyMngReqTwo;
import com.nbp.janaac.application.form.service.model.AccCerBodyMngReqTwoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccCerBodyMngReqTwo service. Represents a row in the &quot;nbp_janaac_acc_cer_manage_2&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccCerBodyMngReqTwoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccCerBodyMngReqTwoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccCerBodyMngReqTwoImpl
 * @generated
 */
@JSON(strict = true)
public class AccCerBodyMngReqTwoModelImpl
	extends BaseModelImpl<AccCerBodyMngReqTwo>
	implements AccCerBodyMngReqTwoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc cer body mng req two model instance should use the <code>AccCerBodyMngReqTwo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_cer_manage_2";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accCerBodyMngReqTwoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"optionFollow", Types.VARCHAR}, {"certiAgreement", Types.VARCHAR},
		{"qMRefCertiAgreement", Types.VARCHAR},
		{"riskAssessment", Types.VARCHAR}, {"qMRefRisk", Types.VARCHAR},
		{"confidentiality", Types.VARCHAR},
		{"qMRefConfidentiality", Types.VARCHAR}, {"security", Types.VARCHAR},
		{"qMRefSecurity", Types.VARCHAR},
		{"certificationScheme", Types.VARCHAR},
		{"qMRefCertifiScheme", Types.VARCHAR},
		{"validCertification", Types.VARCHAR},
		{"qMRefValidCertification", Types.VARCHAR},
		{"preRequisites", Types.VARCHAR}, {"qMRefPrerequisites", Types.VARCHAR},
		{"infoProvided", Types.VARCHAR}, {"qMRefInfoProvided", Types.VARCHAR},
		{"handlingAppeals", Types.VARCHAR},
		{"qMRefHandlingAppeals", Types.VARCHAR},
		{"handlingComplaints", Types.VARCHAR},
		{"qMRefHandlingComplaint", Types.VARCHAR},
		{"orgStructure", Types.VARCHAR}, {"qMRefOrgStructure", Types.VARCHAR},
		{"formalRules", Types.VARCHAR}, {"qMRefFormalRules", Types.VARCHAR},
		{"safeguardingMechanism", Types.VARCHAR},
		{"qMRefSafeguarding", Types.VARCHAR}, {"managementProc", Types.VARCHAR},
		{"qMRefManagementProc", Types.VARCHAR},
		{"contractExaminer", Types.VARCHAR}, {"qMRefExaminer", Types.VARCHAR},
		{"contractBody", Types.VARCHAR}, {"qMRefContractBody", Types.VARCHAR},
		{"docPolicies", Types.VARCHAR}, {"qMRefDocPolicies", Types.VARCHAR},
		{"specifiedStandard", Types.VARCHAR}, {"qMRefSpecified", Types.VARCHAR},
		{"applicationForm", Types.VARCHAR}, {"qMRefAppliForm", Types.VARCHAR},
		{"applicationReview", Types.VARCHAR},
		{"qMRefAppliReview", Types.VARCHAR}, {"assessmentPlan", Types.VARCHAR},
		{"qMRefAssessmentPlan", Types.VARCHAR},
		{"examinationProcess", Types.VARCHAR},
		{"qMRefExamProcess", Types.VARCHAR},
		{"certificationDecision", Types.VARCHAR},
		{"qMRefCertiDecision", Types.VARCHAR},
		{"certificationDoc", Types.VARCHAR}, {"qMRefCertiDoc", Types.VARCHAR},
		{"useOfCertificates", Types.VARCHAR},
		{"qMRefUseOfCertificate", Types.VARCHAR}, {"suspension", Types.VARCHAR},
		{"qMRefSuspension", Types.VARCHAR}, {"processToReceive", Types.VARCHAR},
		{"qMRefReceiveProcess", Types.VARCHAR},
		{"generalManage", Types.VARCHAR}, {"qMRefGeneral", Types.VARCHAR},
		{"docControl", Types.VARCHAR}, {"qMRefDocControl", Types.VARCHAR},
		{"recordControl", Types.VARCHAR}, {"qMRefRecControl", Types.VARCHAR},
		{"manageReview", Types.VARCHAR}, {"qMRefManageReview", Types.VARCHAR},
		{"internalAudit", Types.VARCHAR}, {"qMRefInternal", Types.VARCHAR},
		{"correctiveAction", Types.VARCHAR}, {"qMRefCorrective", Types.VARCHAR},
		{"preventiveAction", Types.VARCHAR}, {"qMRefPreventive", Types.VARCHAR},
		{"docInKeeping", Types.VARCHAR}, {"qMRefDocInKeeping", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accCerBodyMngReqTwoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("optionFollow", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certiAgreement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCertiAgreement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("riskAssessment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefRisk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("confidentiality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefConfidentiality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("security", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSecurity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificationScheme", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCertifiScheme", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validCertification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefValidCertification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("preRequisites", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPrerequisites", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("infoProvided", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefInfoProvided", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("handlingAppeals", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefHandlingAppeals", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("handlingComplaints", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefHandlingComplaint", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgStructure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefOrgStructure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formalRules", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefFormalRules", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("safeguardingMechanism", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSafeguarding", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managementProc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefManagementProc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractExaminer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefExaminer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractBody", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefContractBody", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDocPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specifiedStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSpecified", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationForm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefAppliForm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefAppliReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assessmentPlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefAssessmentPlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("examinationProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefExamProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificationDecision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCertiDecision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificationDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCertiDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("useOfCertificates", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefUseOfCertificate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("suspension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSuspension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processToReceive", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefReceiveProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("generalManage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefGeneral", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDocControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefRecControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manageReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefManageReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("internalAudit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefInternal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("correctiveAction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCorrective", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("preventiveAction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPreventive", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docInKeeping", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDocInKeeping", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_cer_manage_2 (uuid_ VARCHAR(75) null,accCerBodyMngReqTwoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,optionFollow VARCHAR(75) null,certiAgreement VARCHAR(75) null,qMRefCertiAgreement VARCHAR(75) null,riskAssessment VARCHAR(75) null,qMRefRisk VARCHAR(75) null,confidentiality VARCHAR(75) null,qMRefConfidentiality VARCHAR(75) null,security VARCHAR(75) null,qMRefSecurity VARCHAR(75) null,certificationScheme VARCHAR(75) null,qMRefCertifiScheme VARCHAR(75) null,validCertification VARCHAR(75) null,qMRefValidCertification VARCHAR(75) null,preRequisites VARCHAR(75) null,qMRefPrerequisites VARCHAR(75) null,infoProvided VARCHAR(75) null,qMRefInfoProvided VARCHAR(75) null,handlingAppeals VARCHAR(75) null,qMRefHandlingAppeals VARCHAR(75) null,handlingComplaints VARCHAR(75) null,qMRefHandlingComplaint VARCHAR(75) null,orgStructure VARCHAR(75) null,qMRefOrgStructure VARCHAR(75) null,formalRules VARCHAR(75) null,qMRefFormalRules VARCHAR(75) null,safeguardingMechanism VARCHAR(75) null,qMRefSafeguarding VARCHAR(75) null,managementProc VARCHAR(75) null,qMRefManagementProc VARCHAR(75) null,contractExaminer VARCHAR(75) null,qMRefExaminer VARCHAR(75) null,contractBody VARCHAR(75) null,qMRefContractBody VARCHAR(75) null,docPolicies VARCHAR(75) null,qMRefDocPolicies VARCHAR(75) null,specifiedStandard VARCHAR(75) null,qMRefSpecified VARCHAR(75) null,applicationForm VARCHAR(75) null,qMRefAppliForm VARCHAR(75) null,applicationReview VARCHAR(75) null,qMRefAppliReview VARCHAR(75) null,assessmentPlan VARCHAR(75) null,qMRefAssessmentPlan VARCHAR(75) null,examinationProcess VARCHAR(75) null,qMRefExamProcess VARCHAR(75) null,certificationDecision VARCHAR(75) null,qMRefCertiDecision VARCHAR(75) null,certificationDoc VARCHAR(75) null,qMRefCertiDoc VARCHAR(75) null,useOfCertificates VARCHAR(75) null,qMRefUseOfCertificate VARCHAR(75) null,suspension VARCHAR(75) null,qMRefSuspension VARCHAR(75) null,processToReceive VARCHAR(75) null,qMRefReceiveProcess VARCHAR(75) null,generalManage VARCHAR(75) null,qMRefGeneral VARCHAR(75) null,docControl VARCHAR(75) null,qMRefDocControl VARCHAR(75) null,recordControl VARCHAR(75) null,qMRefRecControl VARCHAR(75) null,manageReview VARCHAR(75) null,qMRefManageReview VARCHAR(75) null,internalAudit VARCHAR(75) null,qMRefInternal VARCHAR(75) null,correctiveAction VARCHAR(75) null,qMRefCorrective VARCHAR(75) null,preventiveAction VARCHAR(75) null,qMRefPreventive VARCHAR(75) null,docInKeeping VARCHAR(75) null,qMRefDocInKeeping VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_cer_manage_2";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accCerBodyMngReqTwo.accCerBodyMngReqTwoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_cer_manage_2.accCerBodyMngReqTwoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccCerBodyMngReqTwoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accCerBodyMngReqTwoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccCerBodyMngReqTwoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accCerBodyMngReqTwoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccCerBodyMngReqTwo.class;
	}

	@Override
	public String getModelClassName() {
		return AccCerBodyMngReqTwo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccCerBodyMngReqTwo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccCerBodyMngReqTwo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccCerBodyMngReqTwo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccCerBodyMngReqTwo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccCerBodyMngReqTwo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccCerBodyMngReqTwo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccCerBodyMngReqTwo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccCerBodyMngReqTwo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccCerBodyMngReqTwo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccCerBodyMngReqTwo, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccCerBodyMngReqTwo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccCerBodyMngReqTwo, Object>>();

			attributeGetterFunctions.put("uuid", AccCerBodyMngReqTwo::getUuid);
			attributeGetterFunctions.put(
				"accCerBodyMngReqTwoId",
				AccCerBodyMngReqTwo::getAccCerBodyMngReqTwoId);
			attributeGetterFunctions.put(
				"groupId", AccCerBodyMngReqTwo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccCerBodyMngReqTwo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccCerBodyMngReqTwo::getUserId);
			attributeGetterFunctions.put(
				"userName", AccCerBodyMngReqTwo::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccCerBodyMngReqTwo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccCerBodyMngReqTwo::getModifiedDate);
			attributeGetterFunctions.put(
				"optionFollow", AccCerBodyMngReqTwo::getOptionFollow);
			attributeGetterFunctions.put(
				"certiAgreement", AccCerBodyMngReqTwo::getCertiAgreement);
			attributeGetterFunctions.put(
				"qMRefCertiAgreement",
				AccCerBodyMngReqTwo::getQMRefCertiAgreement);
			attributeGetterFunctions.put(
				"riskAssessment", AccCerBodyMngReqTwo::getRiskAssessment);
			attributeGetterFunctions.put(
				"qMRefRisk", AccCerBodyMngReqTwo::getQMRefRisk);
			attributeGetterFunctions.put(
				"confidentiality", AccCerBodyMngReqTwo::getConfidentiality);
			attributeGetterFunctions.put(
				"qMRefConfidentiality",
				AccCerBodyMngReqTwo::getQMRefConfidentiality);
			attributeGetterFunctions.put(
				"security", AccCerBodyMngReqTwo::getSecurity);
			attributeGetterFunctions.put(
				"qMRefSecurity", AccCerBodyMngReqTwo::getQMRefSecurity);
			attributeGetterFunctions.put(
				"certificationScheme",
				AccCerBodyMngReqTwo::getCertificationScheme);
			attributeGetterFunctions.put(
				"qMRefCertifiScheme",
				AccCerBodyMngReqTwo::getQMRefCertifiScheme);
			attributeGetterFunctions.put(
				"validCertification",
				AccCerBodyMngReqTwo::getValidCertification);
			attributeGetterFunctions.put(
				"qMRefValidCertification",
				AccCerBodyMngReqTwo::getQMRefValidCertification);
			attributeGetterFunctions.put(
				"preRequisites", AccCerBodyMngReqTwo::getPreRequisites);
			attributeGetterFunctions.put(
				"qMRefPrerequisites",
				AccCerBodyMngReqTwo::getQMRefPrerequisites);
			attributeGetterFunctions.put(
				"infoProvided", AccCerBodyMngReqTwo::getInfoProvided);
			attributeGetterFunctions.put(
				"qMRefInfoProvided", AccCerBodyMngReqTwo::getQMRefInfoProvided);
			attributeGetterFunctions.put(
				"handlingAppeals", AccCerBodyMngReqTwo::getHandlingAppeals);
			attributeGetterFunctions.put(
				"qMRefHandlingAppeals",
				AccCerBodyMngReqTwo::getQMRefHandlingAppeals);
			attributeGetterFunctions.put(
				"handlingComplaints",
				AccCerBodyMngReqTwo::getHandlingComplaints);
			attributeGetterFunctions.put(
				"qMRefHandlingComplaint",
				AccCerBodyMngReqTwo::getQMRefHandlingComplaint);
			attributeGetterFunctions.put(
				"orgStructure", AccCerBodyMngReqTwo::getOrgStructure);
			attributeGetterFunctions.put(
				"qMRefOrgStructure", AccCerBodyMngReqTwo::getQMRefOrgStructure);
			attributeGetterFunctions.put(
				"formalRules", AccCerBodyMngReqTwo::getFormalRules);
			attributeGetterFunctions.put(
				"qMRefFormalRules", AccCerBodyMngReqTwo::getQMRefFormalRules);
			attributeGetterFunctions.put(
				"safeguardingMechanism",
				AccCerBodyMngReqTwo::getSafeguardingMechanism);
			attributeGetterFunctions.put(
				"qMRefSafeguarding", AccCerBodyMngReqTwo::getQMRefSafeguarding);
			attributeGetterFunctions.put(
				"managementProc", AccCerBodyMngReqTwo::getManagementProc);
			attributeGetterFunctions.put(
				"qMRefManagementProc",
				AccCerBodyMngReqTwo::getQMRefManagementProc);
			attributeGetterFunctions.put(
				"contractExaminer", AccCerBodyMngReqTwo::getContractExaminer);
			attributeGetterFunctions.put(
				"qMRefExaminer", AccCerBodyMngReqTwo::getQMRefExaminer);
			attributeGetterFunctions.put(
				"contractBody", AccCerBodyMngReqTwo::getContractBody);
			attributeGetterFunctions.put(
				"qMRefContractBody", AccCerBodyMngReqTwo::getQMRefContractBody);
			attributeGetterFunctions.put(
				"docPolicies", AccCerBodyMngReqTwo::getDocPolicies);
			attributeGetterFunctions.put(
				"qMRefDocPolicies", AccCerBodyMngReqTwo::getQMRefDocPolicies);
			attributeGetterFunctions.put(
				"specifiedStandard", AccCerBodyMngReqTwo::getSpecifiedStandard);
			attributeGetterFunctions.put(
				"qMRefSpecified", AccCerBodyMngReqTwo::getQMRefSpecified);
			attributeGetterFunctions.put(
				"applicationForm", AccCerBodyMngReqTwo::getApplicationForm);
			attributeGetterFunctions.put(
				"qMRefAppliForm", AccCerBodyMngReqTwo::getQMRefAppliForm);
			attributeGetterFunctions.put(
				"applicationReview", AccCerBodyMngReqTwo::getApplicationReview);
			attributeGetterFunctions.put(
				"qMRefAppliReview", AccCerBodyMngReqTwo::getQMRefAppliReview);
			attributeGetterFunctions.put(
				"assessmentPlan", AccCerBodyMngReqTwo::getAssessmentPlan);
			attributeGetterFunctions.put(
				"qMRefAssessmentPlan",
				AccCerBodyMngReqTwo::getQMRefAssessmentPlan);
			attributeGetterFunctions.put(
				"examinationProcess",
				AccCerBodyMngReqTwo::getExaminationProcess);
			attributeGetterFunctions.put(
				"qMRefExamProcess", AccCerBodyMngReqTwo::getQMRefExamProcess);
			attributeGetterFunctions.put(
				"certificationDecision",
				AccCerBodyMngReqTwo::getCertificationDecision);
			attributeGetterFunctions.put(
				"qMRefCertiDecision",
				AccCerBodyMngReqTwo::getQMRefCertiDecision);
			attributeGetterFunctions.put(
				"certificationDoc", AccCerBodyMngReqTwo::getCertificationDoc);
			attributeGetterFunctions.put(
				"qMRefCertiDoc", AccCerBodyMngReqTwo::getQMRefCertiDoc);
			attributeGetterFunctions.put(
				"useOfCertificates", AccCerBodyMngReqTwo::getUseOfCertificates);
			attributeGetterFunctions.put(
				"qMRefUseOfCertificate",
				AccCerBodyMngReqTwo::getQMRefUseOfCertificate);
			attributeGetterFunctions.put(
				"suspension", AccCerBodyMngReqTwo::getSuspension);
			attributeGetterFunctions.put(
				"qMRefSuspension", AccCerBodyMngReqTwo::getQMRefSuspension);
			attributeGetterFunctions.put(
				"processToReceive", AccCerBodyMngReqTwo::getProcessToReceive);
			attributeGetterFunctions.put(
				"qMRefReceiveProcess",
				AccCerBodyMngReqTwo::getQMRefReceiveProcess);
			attributeGetterFunctions.put(
				"generalManage", AccCerBodyMngReqTwo::getGeneralManage);
			attributeGetterFunctions.put(
				"qMRefGeneral", AccCerBodyMngReqTwo::getQMRefGeneral);
			attributeGetterFunctions.put(
				"docControl", AccCerBodyMngReqTwo::getDocControl);
			attributeGetterFunctions.put(
				"qMRefDocControl", AccCerBodyMngReqTwo::getQMRefDocControl);
			attributeGetterFunctions.put(
				"recordControl", AccCerBodyMngReqTwo::getRecordControl);
			attributeGetterFunctions.put(
				"qMRefRecControl", AccCerBodyMngReqTwo::getQMRefRecControl);
			attributeGetterFunctions.put(
				"manageReview", AccCerBodyMngReqTwo::getManageReview);
			attributeGetterFunctions.put(
				"qMRefManageReview", AccCerBodyMngReqTwo::getQMRefManageReview);
			attributeGetterFunctions.put(
				"internalAudit", AccCerBodyMngReqTwo::getInternalAudit);
			attributeGetterFunctions.put(
				"qMRefInternal", AccCerBodyMngReqTwo::getQMRefInternal);
			attributeGetterFunctions.put(
				"correctiveAction", AccCerBodyMngReqTwo::getCorrectiveAction);
			attributeGetterFunctions.put(
				"qMRefCorrective", AccCerBodyMngReqTwo::getQMRefCorrective);
			attributeGetterFunctions.put(
				"preventiveAction", AccCerBodyMngReqTwo::getPreventiveAction);
			attributeGetterFunctions.put(
				"qMRefPreventive", AccCerBodyMngReqTwo::getQMRefPreventive);
			attributeGetterFunctions.put(
				"docInKeeping", AccCerBodyMngReqTwo::getDocInKeeping);
			attributeGetterFunctions.put(
				"qMRefDocInKeeping", AccCerBodyMngReqTwo::getQMRefDocInKeeping);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccCerBodyMngReqTwo::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccCerBodyMngReqTwo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccCerBodyMngReqTwo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccCerBodyMngReqTwo, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setUuid);
			attributeSetterBiConsumers.put(
				"accCerBodyMngReqTwoId",
				(BiConsumer<AccCerBodyMngReqTwo, Long>)
					AccCerBodyMngReqTwo::setAccCerBodyMngReqTwoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccCerBodyMngReqTwo, Long>)
					AccCerBodyMngReqTwo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccCerBodyMngReqTwo, Long>)
					AccCerBodyMngReqTwo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccCerBodyMngReqTwo, Long>)
					AccCerBodyMngReqTwo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccCerBodyMngReqTwo, Date>)
					AccCerBodyMngReqTwo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccCerBodyMngReqTwo, Date>)
					AccCerBodyMngReqTwo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"optionFollow",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setOptionFollow);
			attributeSetterBiConsumers.put(
				"certiAgreement",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setCertiAgreement);
			attributeSetterBiConsumers.put(
				"qMRefCertiAgreement",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefCertiAgreement);
			attributeSetterBiConsumers.put(
				"riskAssessment",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setRiskAssessment);
			attributeSetterBiConsumers.put(
				"qMRefRisk",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefRisk);
			attributeSetterBiConsumers.put(
				"confidentiality",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setConfidentiality);
			attributeSetterBiConsumers.put(
				"qMRefConfidentiality",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefConfidentiality);
			attributeSetterBiConsumers.put(
				"security",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setSecurity);
			attributeSetterBiConsumers.put(
				"qMRefSecurity",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefSecurity);
			attributeSetterBiConsumers.put(
				"certificationScheme",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setCertificationScheme);
			attributeSetterBiConsumers.put(
				"qMRefCertifiScheme",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefCertifiScheme);
			attributeSetterBiConsumers.put(
				"validCertification",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setValidCertification);
			attributeSetterBiConsumers.put(
				"qMRefValidCertification",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefValidCertification);
			attributeSetterBiConsumers.put(
				"preRequisites",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setPreRequisites);
			attributeSetterBiConsumers.put(
				"qMRefPrerequisites",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefPrerequisites);
			attributeSetterBiConsumers.put(
				"infoProvided",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setInfoProvided);
			attributeSetterBiConsumers.put(
				"qMRefInfoProvided",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefInfoProvided);
			attributeSetterBiConsumers.put(
				"handlingAppeals",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setHandlingAppeals);
			attributeSetterBiConsumers.put(
				"qMRefHandlingAppeals",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefHandlingAppeals);
			attributeSetterBiConsumers.put(
				"handlingComplaints",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setHandlingComplaints);
			attributeSetterBiConsumers.put(
				"qMRefHandlingComplaint",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefHandlingComplaint);
			attributeSetterBiConsumers.put(
				"orgStructure",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setOrgStructure);
			attributeSetterBiConsumers.put(
				"qMRefOrgStructure",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefOrgStructure);
			attributeSetterBiConsumers.put(
				"formalRules",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setFormalRules);
			attributeSetterBiConsumers.put(
				"qMRefFormalRules",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefFormalRules);
			attributeSetterBiConsumers.put(
				"safeguardingMechanism",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setSafeguardingMechanism);
			attributeSetterBiConsumers.put(
				"qMRefSafeguarding",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefSafeguarding);
			attributeSetterBiConsumers.put(
				"managementProc",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setManagementProc);
			attributeSetterBiConsumers.put(
				"qMRefManagementProc",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefManagementProc);
			attributeSetterBiConsumers.put(
				"contractExaminer",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setContractExaminer);
			attributeSetterBiConsumers.put(
				"qMRefExaminer",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefExaminer);
			attributeSetterBiConsumers.put(
				"contractBody",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setContractBody);
			attributeSetterBiConsumers.put(
				"qMRefContractBody",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefContractBody);
			attributeSetterBiConsumers.put(
				"docPolicies",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setDocPolicies);
			attributeSetterBiConsumers.put(
				"qMRefDocPolicies",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefDocPolicies);
			attributeSetterBiConsumers.put(
				"specifiedStandard",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setSpecifiedStandard);
			attributeSetterBiConsumers.put(
				"qMRefSpecified",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefSpecified);
			attributeSetterBiConsumers.put(
				"applicationForm",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setApplicationForm);
			attributeSetterBiConsumers.put(
				"qMRefAppliForm",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefAppliForm);
			attributeSetterBiConsumers.put(
				"applicationReview",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setApplicationReview);
			attributeSetterBiConsumers.put(
				"qMRefAppliReview",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefAppliReview);
			attributeSetterBiConsumers.put(
				"assessmentPlan",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setAssessmentPlan);
			attributeSetterBiConsumers.put(
				"qMRefAssessmentPlan",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefAssessmentPlan);
			attributeSetterBiConsumers.put(
				"examinationProcess",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setExaminationProcess);
			attributeSetterBiConsumers.put(
				"qMRefExamProcess",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefExamProcess);
			attributeSetterBiConsumers.put(
				"certificationDecision",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setCertificationDecision);
			attributeSetterBiConsumers.put(
				"qMRefCertiDecision",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefCertiDecision);
			attributeSetterBiConsumers.put(
				"certificationDoc",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setCertificationDoc);
			attributeSetterBiConsumers.put(
				"qMRefCertiDoc",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefCertiDoc);
			attributeSetterBiConsumers.put(
				"useOfCertificates",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setUseOfCertificates);
			attributeSetterBiConsumers.put(
				"qMRefUseOfCertificate",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefUseOfCertificate);
			attributeSetterBiConsumers.put(
				"suspension",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setSuspension);
			attributeSetterBiConsumers.put(
				"qMRefSuspension",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefSuspension);
			attributeSetterBiConsumers.put(
				"processToReceive",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setProcessToReceive);
			attributeSetterBiConsumers.put(
				"qMRefReceiveProcess",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefReceiveProcess);
			attributeSetterBiConsumers.put(
				"generalManage",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setGeneralManage);
			attributeSetterBiConsumers.put(
				"qMRefGeneral",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefGeneral);
			attributeSetterBiConsumers.put(
				"docControl",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setDocControl);
			attributeSetterBiConsumers.put(
				"qMRefDocControl",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefDocControl);
			attributeSetterBiConsumers.put(
				"recordControl",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setRecordControl);
			attributeSetterBiConsumers.put(
				"qMRefRecControl",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefRecControl);
			attributeSetterBiConsumers.put(
				"manageReview",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setManageReview);
			attributeSetterBiConsumers.put(
				"qMRefManageReview",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefManageReview);
			attributeSetterBiConsumers.put(
				"internalAudit",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setInternalAudit);
			attributeSetterBiConsumers.put(
				"qMRefInternal",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefInternal);
			attributeSetterBiConsumers.put(
				"correctiveAction",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setCorrectiveAction);
			attributeSetterBiConsumers.put(
				"qMRefCorrective",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefCorrective);
			attributeSetterBiConsumers.put(
				"preventiveAction",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setPreventiveAction);
			attributeSetterBiConsumers.put(
				"qMRefPreventive",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefPreventive);
			attributeSetterBiConsumers.put(
				"docInKeeping",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setDocInKeeping);
			attributeSetterBiConsumers.put(
				"qMRefDocInKeeping",
				(BiConsumer<AccCerBodyMngReqTwo, String>)
					AccCerBodyMngReqTwo::setQMRefDocInKeeping);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccCerBodyMngReqTwo, Long>)
					AccCerBodyMngReqTwo::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccCerBodyMngReqTwoId() {
		return _accCerBodyMngReqTwoId;
	}

	@Override
	public void setAccCerBodyMngReqTwoId(long accCerBodyMngReqTwoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accCerBodyMngReqTwoId = accCerBodyMngReqTwoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOptionFollow() {
		if (_optionFollow == null) {
			return "";
		}
		else {
			return _optionFollow;
		}
	}

	@Override
	public void setOptionFollow(String optionFollow) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_optionFollow = optionFollow;
	}

	@JSON
	@Override
	public String getCertiAgreement() {
		if (_certiAgreement == null) {
			return "";
		}
		else {
			return _certiAgreement;
		}
	}

	@Override
	public void setCertiAgreement(String certiAgreement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certiAgreement = certiAgreement;
	}

	@JSON
	@Override
	public String getQMRefCertiAgreement() {
		if (_qMRefCertiAgreement == null) {
			return "";
		}
		else {
			return _qMRefCertiAgreement;
		}
	}

	@Override
	public void setQMRefCertiAgreement(String qMRefCertiAgreement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCertiAgreement = qMRefCertiAgreement;
	}

	@JSON
	@Override
	public String getRiskAssessment() {
		if (_riskAssessment == null) {
			return "";
		}
		else {
			return _riskAssessment;
		}
	}

	@Override
	public void setRiskAssessment(String riskAssessment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_riskAssessment = riskAssessment;
	}

	@JSON
	@Override
	public String getQMRefRisk() {
		if (_qMRefRisk == null) {
			return "";
		}
		else {
			return _qMRefRisk;
		}
	}

	@Override
	public void setQMRefRisk(String qMRefRisk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefRisk = qMRefRisk;
	}

	@JSON
	@Override
	public String getConfidentiality() {
		if (_confidentiality == null) {
			return "";
		}
		else {
			return _confidentiality;
		}
	}

	@Override
	public void setConfidentiality(String confidentiality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_confidentiality = confidentiality;
	}

	@JSON
	@Override
	public String getQMRefConfidentiality() {
		if (_qMRefConfidentiality == null) {
			return "";
		}
		else {
			return _qMRefConfidentiality;
		}
	}

	@Override
	public void setQMRefConfidentiality(String qMRefConfidentiality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefConfidentiality = qMRefConfidentiality;
	}

	@JSON
	@Override
	public String getSecurity() {
		if (_security == null) {
			return "";
		}
		else {
			return _security;
		}
	}

	@Override
	public void setSecurity(String security) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_security = security;
	}

	@JSON
	@Override
	public String getQMRefSecurity() {
		if (_qMRefSecurity == null) {
			return "";
		}
		else {
			return _qMRefSecurity;
		}
	}

	@Override
	public void setQMRefSecurity(String qMRefSecurity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSecurity = qMRefSecurity;
	}

	@JSON
	@Override
	public String getCertificationScheme() {
		if (_certificationScheme == null) {
			return "";
		}
		else {
			return _certificationScheme;
		}
	}

	@Override
	public void setCertificationScheme(String certificationScheme) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificationScheme = certificationScheme;
	}

	@JSON
	@Override
	public String getQMRefCertifiScheme() {
		if (_qMRefCertifiScheme == null) {
			return "";
		}
		else {
			return _qMRefCertifiScheme;
		}
	}

	@Override
	public void setQMRefCertifiScheme(String qMRefCertifiScheme) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCertifiScheme = qMRefCertifiScheme;
	}

	@JSON
	@Override
	public String getValidCertification() {
		if (_validCertification == null) {
			return "";
		}
		else {
			return _validCertification;
		}
	}

	@Override
	public void setValidCertification(String validCertification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_validCertification = validCertification;
	}

	@JSON
	@Override
	public String getQMRefValidCertification() {
		if (_qMRefValidCertification == null) {
			return "";
		}
		else {
			return _qMRefValidCertification;
		}
	}

	@Override
	public void setQMRefValidCertification(String qMRefValidCertification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefValidCertification = qMRefValidCertification;
	}

	@JSON
	@Override
	public String getPreRequisites() {
		if (_preRequisites == null) {
			return "";
		}
		else {
			return _preRequisites;
		}
	}

	@Override
	public void setPreRequisites(String preRequisites) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preRequisites = preRequisites;
	}

	@JSON
	@Override
	public String getQMRefPrerequisites() {
		if (_qMRefPrerequisites == null) {
			return "";
		}
		else {
			return _qMRefPrerequisites;
		}
	}

	@Override
	public void setQMRefPrerequisites(String qMRefPrerequisites) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPrerequisites = qMRefPrerequisites;
	}

	@JSON
	@Override
	public String getInfoProvided() {
		if (_infoProvided == null) {
			return "";
		}
		else {
			return _infoProvided;
		}
	}

	@Override
	public void setInfoProvided(String infoProvided) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_infoProvided = infoProvided;
	}

	@JSON
	@Override
	public String getQMRefInfoProvided() {
		if (_qMRefInfoProvided == null) {
			return "";
		}
		else {
			return _qMRefInfoProvided;
		}
	}

	@Override
	public void setQMRefInfoProvided(String qMRefInfoProvided) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefInfoProvided = qMRefInfoProvided;
	}

	@JSON
	@Override
	public String getHandlingAppeals() {
		if (_handlingAppeals == null) {
			return "";
		}
		else {
			return _handlingAppeals;
		}
	}

	@Override
	public void setHandlingAppeals(String handlingAppeals) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_handlingAppeals = handlingAppeals;
	}

	@JSON
	@Override
	public String getQMRefHandlingAppeals() {
		if (_qMRefHandlingAppeals == null) {
			return "";
		}
		else {
			return _qMRefHandlingAppeals;
		}
	}

	@Override
	public void setQMRefHandlingAppeals(String qMRefHandlingAppeals) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefHandlingAppeals = qMRefHandlingAppeals;
	}

	@JSON
	@Override
	public String getHandlingComplaints() {
		if (_handlingComplaints == null) {
			return "";
		}
		else {
			return _handlingComplaints;
		}
	}

	@Override
	public void setHandlingComplaints(String handlingComplaints) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_handlingComplaints = handlingComplaints;
	}

	@JSON
	@Override
	public String getQMRefHandlingComplaint() {
		if (_qMRefHandlingComplaint == null) {
			return "";
		}
		else {
			return _qMRefHandlingComplaint;
		}
	}

	@Override
	public void setQMRefHandlingComplaint(String qMRefHandlingComplaint) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefHandlingComplaint = qMRefHandlingComplaint;
	}

	@JSON
	@Override
	public String getOrgStructure() {
		if (_orgStructure == null) {
			return "";
		}
		else {
			return _orgStructure;
		}
	}

	@Override
	public void setOrgStructure(String orgStructure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgStructure = orgStructure;
	}

	@JSON
	@Override
	public String getQMRefOrgStructure() {
		if (_qMRefOrgStructure == null) {
			return "";
		}
		else {
			return _qMRefOrgStructure;
		}
	}

	@Override
	public void setQMRefOrgStructure(String qMRefOrgStructure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefOrgStructure = qMRefOrgStructure;
	}

	@JSON
	@Override
	public String getFormalRules() {
		if (_formalRules == null) {
			return "";
		}
		else {
			return _formalRules;
		}
	}

	@Override
	public void setFormalRules(String formalRules) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formalRules = formalRules;
	}

	@JSON
	@Override
	public String getQMRefFormalRules() {
		if (_qMRefFormalRules == null) {
			return "";
		}
		else {
			return _qMRefFormalRules;
		}
	}

	@Override
	public void setQMRefFormalRules(String qMRefFormalRules) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefFormalRules = qMRefFormalRules;
	}

	@JSON
	@Override
	public String getSafeguardingMechanism() {
		if (_safeguardingMechanism == null) {
			return "";
		}
		else {
			return _safeguardingMechanism;
		}
	}

	@Override
	public void setSafeguardingMechanism(String safeguardingMechanism) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_safeguardingMechanism = safeguardingMechanism;
	}

	@JSON
	@Override
	public String getQMRefSafeguarding() {
		if (_qMRefSafeguarding == null) {
			return "";
		}
		else {
			return _qMRefSafeguarding;
		}
	}

	@Override
	public void setQMRefSafeguarding(String qMRefSafeguarding) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSafeguarding = qMRefSafeguarding;
	}

	@JSON
	@Override
	public String getManagementProc() {
		if (_managementProc == null) {
			return "";
		}
		else {
			return _managementProc;
		}
	}

	@Override
	public void setManagementProc(String managementProc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managementProc = managementProc;
	}

	@JSON
	@Override
	public String getQMRefManagementProc() {
		if (_qMRefManagementProc == null) {
			return "";
		}
		else {
			return _qMRefManagementProc;
		}
	}

	@Override
	public void setQMRefManagementProc(String qMRefManagementProc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefManagementProc = qMRefManagementProc;
	}

	@JSON
	@Override
	public String getContractExaminer() {
		if (_contractExaminer == null) {
			return "";
		}
		else {
			return _contractExaminer;
		}
	}

	@Override
	public void setContractExaminer(String contractExaminer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contractExaminer = contractExaminer;
	}

	@JSON
	@Override
	public String getQMRefExaminer() {
		if (_qMRefExaminer == null) {
			return "";
		}
		else {
			return _qMRefExaminer;
		}
	}

	@Override
	public void setQMRefExaminer(String qMRefExaminer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefExaminer = qMRefExaminer;
	}

	@JSON
	@Override
	public String getContractBody() {
		if (_contractBody == null) {
			return "";
		}
		else {
			return _contractBody;
		}
	}

	@Override
	public void setContractBody(String contractBody) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contractBody = contractBody;
	}

	@JSON
	@Override
	public String getQMRefContractBody() {
		if (_qMRefContractBody == null) {
			return "";
		}
		else {
			return _qMRefContractBody;
		}
	}

	@Override
	public void setQMRefContractBody(String qMRefContractBody) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefContractBody = qMRefContractBody;
	}

	@JSON
	@Override
	public String getDocPolicies() {
		if (_docPolicies == null) {
			return "";
		}
		else {
			return _docPolicies;
		}
	}

	@Override
	public void setDocPolicies(String docPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docPolicies = docPolicies;
	}

	@JSON
	@Override
	public String getQMRefDocPolicies() {
		if (_qMRefDocPolicies == null) {
			return "";
		}
		else {
			return _qMRefDocPolicies;
		}
	}

	@Override
	public void setQMRefDocPolicies(String qMRefDocPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDocPolicies = qMRefDocPolicies;
	}

	@JSON
	@Override
	public String getSpecifiedStandard() {
		if (_specifiedStandard == null) {
			return "";
		}
		else {
			return _specifiedStandard;
		}
	}

	@Override
	public void setSpecifiedStandard(String specifiedStandard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specifiedStandard = specifiedStandard;
	}

	@JSON
	@Override
	public String getQMRefSpecified() {
		if (_qMRefSpecified == null) {
			return "";
		}
		else {
			return _qMRefSpecified;
		}
	}

	@Override
	public void setQMRefSpecified(String qMRefSpecified) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSpecified = qMRefSpecified;
	}

	@JSON
	@Override
	public String getApplicationForm() {
		if (_applicationForm == null) {
			return "";
		}
		else {
			return _applicationForm;
		}
	}

	@Override
	public void setApplicationForm(String applicationForm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationForm = applicationForm;
	}

	@JSON
	@Override
	public String getQMRefAppliForm() {
		if (_qMRefAppliForm == null) {
			return "";
		}
		else {
			return _qMRefAppliForm;
		}
	}

	@Override
	public void setQMRefAppliForm(String qMRefAppliForm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefAppliForm = qMRefAppliForm;
	}

	@JSON
	@Override
	public String getApplicationReview() {
		if (_applicationReview == null) {
			return "";
		}
		else {
			return _applicationReview;
		}
	}

	@Override
	public void setApplicationReview(String applicationReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationReview = applicationReview;
	}

	@JSON
	@Override
	public String getQMRefAppliReview() {
		if (_qMRefAppliReview == null) {
			return "";
		}
		else {
			return _qMRefAppliReview;
		}
	}

	@Override
	public void setQMRefAppliReview(String qMRefAppliReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefAppliReview = qMRefAppliReview;
	}

	@JSON
	@Override
	public String getAssessmentPlan() {
		if (_assessmentPlan == null) {
			return "";
		}
		else {
			return _assessmentPlan;
		}
	}

	@Override
	public void setAssessmentPlan(String assessmentPlan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assessmentPlan = assessmentPlan;
	}

	@JSON
	@Override
	public String getQMRefAssessmentPlan() {
		if (_qMRefAssessmentPlan == null) {
			return "";
		}
		else {
			return _qMRefAssessmentPlan;
		}
	}

	@Override
	public void setQMRefAssessmentPlan(String qMRefAssessmentPlan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefAssessmentPlan = qMRefAssessmentPlan;
	}

	@JSON
	@Override
	public String getExaminationProcess() {
		if (_examinationProcess == null) {
			return "";
		}
		else {
			return _examinationProcess;
		}
	}

	@Override
	public void setExaminationProcess(String examinationProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_examinationProcess = examinationProcess;
	}

	@JSON
	@Override
	public String getQMRefExamProcess() {
		if (_qMRefExamProcess == null) {
			return "";
		}
		else {
			return _qMRefExamProcess;
		}
	}

	@Override
	public void setQMRefExamProcess(String qMRefExamProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefExamProcess = qMRefExamProcess;
	}

	@JSON
	@Override
	public String getCertificationDecision() {
		if (_certificationDecision == null) {
			return "";
		}
		else {
			return _certificationDecision;
		}
	}

	@Override
	public void setCertificationDecision(String certificationDecision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificationDecision = certificationDecision;
	}

	@JSON
	@Override
	public String getQMRefCertiDecision() {
		if (_qMRefCertiDecision == null) {
			return "";
		}
		else {
			return _qMRefCertiDecision;
		}
	}

	@Override
	public void setQMRefCertiDecision(String qMRefCertiDecision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCertiDecision = qMRefCertiDecision;
	}

	@JSON
	@Override
	public String getCertificationDoc() {
		if (_certificationDoc == null) {
			return "";
		}
		else {
			return _certificationDoc;
		}
	}

	@Override
	public void setCertificationDoc(String certificationDoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificationDoc = certificationDoc;
	}

	@JSON
	@Override
	public String getQMRefCertiDoc() {
		if (_qMRefCertiDoc == null) {
			return "";
		}
		else {
			return _qMRefCertiDoc;
		}
	}

	@Override
	public void setQMRefCertiDoc(String qMRefCertiDoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCertiDoc = qMRefCertiDoc;
	}

	@JSON
	@Override
	public String getUseOfCertificates() {
		if (_useOfCertificates == null) {
			return "";
		}
		else {
			return _useOfCertificates;
		}
	}

	@Override
	public void setUseOfCertificates(String useOfCertificates) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_useOfCertificates = useOfCertificates;
	}

	@JSON
	@Override
	public String getQMRefUseOfCertificate() {
		if (_qMRefUseOfCertificate == null) {
			return "";
		}
		else {
			return _qMRefUseOfCertificate;
		}
	}

	@Override
	public void setQMRefUseOfCertificate(String qMRefUseOfCertificate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefUseOfCertificate = qMRefUseOfCertificate;
	}

	@JSON
	@Override
	public String getSuspension() {
		if (_suspension == null) {
			return "";
		}
		else {
			return _suspension;
		}
	}

	@Override
	public void setSuspension(String suspension) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_suspension = suspension;
	}

	@JSON
	@Override
	public String getQMRefSuspension() {
		if (_qMRefSuspension == null) {
			return "";
		}
		else {
			return _qMRefSuspension;
		}
	}

	@Override
	public void setQMRefSuspension(String qMRefSuspension) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSuspension = qMRefSuspension;
	}

	@JSON
	@Override
	public String getProcessToReceive() {
		if (_processToReceive == null) {
			return "";
		}
		else {
			return _processToReceive;
		}
	}

	@Override
	public void setProcessToReceive(String processToReceive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processToReceive = processToReceive;
	}

	@JSON
	@Override
	public String getQMRefReceiveProcess() {
		if (_qMRefReceiveProcess == null) {
			return "";
		}
		else {
			return _qMRefReceiveProcess;
		}
	}

	@Override
	public void setQMRefReceiveProcess(String qMRefReceiveProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefReceiveProcess = qMRefReceiveProcess;
	}

	@JSON
	@Override
	public String getGeneralManage() {
		if (_generalManage == null) {
			return "";
		}
		else {
			return _generalManage;
		}
	}

	@Override
	public void setGeneralManage(String generalManage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_generalManage = generalManage;
	}

	@JSON
	@Override
	public String getQMRefGeneral() {
		if (_qMRefGeneral == null) {
			return "";
		}
		else {
			return _qMRefGeneral;
		}
	}

	@Override
	public void setQMRefGeneral(String qMRefGeneral) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefGeneral = qMRefGeneral;
	}

	@JSON
	@Override
	public String getDocControl() {
		if (_docControl == null) {
			return "";
		}
		else {
			return _docControl;
		}
	}

	@Override
	public void setDocControl(String docControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docControl = docControl;
	}

	@JSON
	@Override
	public String getQMRefDocControl() {
		if (_qMRefDocControl == null) {
			return "";
		}
		else {
			return _qMRefDocControl;
		}
	}

	@Override
	public void setQMRefDocControl(String qMRefDocControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDocControl = qMRefDocControl;
	}

	@JSON
	@Override
	public String getRecordControl() {
		if (_recordControl == null) {
			return "";
		}
		else {
			return _recordControl;
		}
	}

	@Override
	public void setRecordControl(String recordControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recordControl = recordControl;
	}

	@JSON
	@Override
	public String getQMRefRecControl() {
		if (_qMRefRecControl == null) {
			return "";
		}
		else {
			return _qMRefRecControl;
		}
	}

	@Override
	public void setQMRefRecControl(String qMRefRecControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefRecControl = qMRefRecControl;
	}

	@JSON
	@Override
	public String getManageReview() {
		if (_manageReview == null) {
			return "";
		}
		else {
			return _manageReview;
		}
	}

	@Override
	public void setManageReview(String manageReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manageReview = manageReview;
	}

	@JSON
	@Override
	public String getQMRefManageReview() {
		if (_qMRefManageReview == null) {
			return "";
		}
		else {
			return _qMRefManageReview;
		}
	}

	@Override
	public void setQMRefManageReview(String qMRefManageReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefManageReview = qMRefManageReview;
	}

	@JSON
	@Override
	public String getInternalAudit() {
		if (_internalAudit == null) {
			return "";
		}
		else {
			return _internalAudit;
		}
	}

	@Override
	public void setInternalAudit(String internalAudit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_internalAudit = internalAudit;
	}

	@JSON
	@Override
	public String getQMRefInternal() {
		if (_qMRefInternal == null) {
			return "";
		}
		else {
			return _qMRefInternal;
		}
	}

	@Override
	public void setQMRefInternal(String qMRefInternal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefInternal = qMRefInternal;
	}

	@JSON
	@Override
	public String getCorrectiveAction() {
		if (_correctiveAction == null) {
			return "";
		}
		else {
			return _correctiveAction;
		}
	}

	@Override
	public void setCorrectiveAction(String correctiveAction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_correctiveAction = correctiveAction;
	}

	@JSON
	@Override
	public String getQMRefCorrective() {
		if (_qMRefCorrective == null) {
			return "";
		}
		else {
			return _qMRefCorrective;
		}
	}

	@Override
	public void setQMRefCorrective(String qMRefCorrective) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCorrective = qMRefCorrective;
	}

	@JSON
	@Override
	public String getPreventiveAction() {
		if (_preventiveAction == null) {
			return "";
		}
		else {
			return _preventiveAction;
		}
	}

	@Override
	public void setPreventiveAction(String preventiveAction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preventiveAction = preventiveAction;
	}

	@JSON
	@Override
	public String getQMRefPreventive() {
		if (_qMRefPreventive == null) {
			return "";
		}
		else {
			return _qMRefPreventive;
		}
	}

	@Override
	public void setQMRefPreventive(String qMRefPreventive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPreventive = qMRefPreventive;
	}

	@JSON
	@Override
	public String getDocInKeeping() {
		if (_docInKeeping == null) {
			return "";
		}
		else {
			return _docInKeeping;
		}
	}

	@Override
	public void setDocInKeeping(String docInKeeping) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docInKeeping = docInKeeping;
	}

	@JSON
	@Override
	public String getQMRefDocInKeeping() {
		if (_qMRefDocInKeeping == null) {
			return "";
		}
		else {
			return _qMRefDocInKeeping;
		}
	}

	@Override
	public void setQMRefDocInKeeping(String qMRefDocInKeeping) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDocInKeeping = qMRefDocInKeeping;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccCerBodyMngReqTwo.class.getName()));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccCerBodyMngReqTwo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccCerBodyMngReqTwo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccCerBodyMngReqTwo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccCerBodyMngReqTwoImpl accCerBodyMngReqTwoImpl =
			new AccCerBodyMngReqTwoImpl();

		accCerBodyMngReqTwoImpl.setUuid(getUuid());
		accCerBodyMngReqTwoImpl.setAccCerBodyMngReqTwoId(
			getAccCerBodyMngReqTwoId());
		accCerBodyMngReqTwoImpl.setGroupId(getGroupId());
		accCerBodyMngReqTwoImpl.setCompanyId(getCompanyId());
		accCerBodyMngReqTwoImpl.setUserId(getUserId());
		accCerBodyMngReqTwoImpl.setUserName(getUserName());
		accCerBodyMngReqTwoImpl.setCreateDate(getCreateDate());
		accCerBodyMngReqTwoImpl.setModifiedDate(getModifiedDate());
		accCerBodyMngReqTwoImpl.setOptionFollow(getOptionFollow());
		accCerBodyMngReqTwoImpl.setCertiAgreement(getCertiAgreement());
		accCerBodyMngReqTwoImpl.setQMRefCertiAgreement(
			getQMRefCertiAgreement());
		accCerBodyMngReqTwoImpl.setRiskAssessment(getRiskAssessment());
		accCerBodyMngReqTwoImpl.setQMRefRisk(getQMRefRisk());
		accCerBodyMngReqTwoImpl.setConfidentiality(getConfidentiality());
		accCerBodyMngReqTwoImpl.setQMRefConfidentiality(
			getQMRefConfidentiality());
		accCerBodyMngReqTwoImpl.setSecurity(getSecurity());
		accCerBodyMngReqTwoImpl.setQMRefSecurity(getQMRefSecurity());
		accCerBodyMngReqTwoImpl.setCertificationScheme(
			getCertificationScheme());
		accCerBodyMngReqTwoImpl.setQMRefCertifiScheme(getQMRefCertifiScheme());
		accCerBodyMngReqTwoImpl.setValidCertification(getValidCertification());
		accCerBodyMngReqTwoImpl.setQMRefValidCertification(
			getQMRefValidCertification());
		accCerBodyMngReqTwoImpl.setPreRequisites(getPreRequisites());
		accCerBodyMngReqTwoImpl.setQMRefPrerequisites(getQMRefPrerequisites());
		accCerBodyMngReqTwoImpl.setInfoProvided(getInfoProvided());
		accCerBodyMngReqTwoImpl.setQMRefInfoProvided(getQMRefInfoProvided());
		accCerBodyMngReqTwoImpl.setHandlingAppeals(getHandlingAppeals());
		accCerBodyMngReqTwoImpl.setQMRefHandlingAppeals(
			getQMRefHandlingAppeals());
		accCerBodyMngReqTwoImpl.setHandlingComplaints(getHandlingComplaints());
		accCerBodyMngReqTwoImpl.setQMRefHandlingComplaint(
			getQMRefHandlingComplaint());
		accCerBodyMngReqTwoImpl.setOrgStructure(getOrgStructure());
		accCerBodyMngReqTwoImpl.setQMRefOrgStructure(getQMRefOrgStructure());
		accCerBodyMngReqTwoImpl.setFormalRules(getFormalRules());
		accCerBodyMngReqTwoImpl.setQMRefFormalRules(getQMRefFormalRules());
		accCerBodyMngReqTwoImpl.setSafeguardingMechanism(
			getSafeguardingMechanism());
		accCerBodyMngReqTwoImpl.setQMRefSafeguarding(getQMRefSafeguarding());
		accCerBodyMngReqTwoImpl.setManagementProc(getManagementProc());
		accCerBodyMngReqTwoImpl.setQMRefManagementProc(
			getQMRefManagementProc());
		accCerBodyMngReqTwoImpl.setContractExaminer(getContractExaminer());
		accCerBodyMngReqTwoImpl.setQMRefExaminer(getQMRefExaminer());
		accCerBodyMngReqTwoImpl.setContractBody(getContractBody());
		accCerBodyMngReqTwoImpl.setQMRefContractBody(getQMRefContractBody());
		accCerBodyMngReqTwoImpl.setDocPolicies(getDocPolicies());
		accCerBodyMngReqTwoImpl.setQMRefDocPolicies(getQMRefDocPolicies());
		accCerBodyMngReqTwoImpl.setSpecifiedStandard(getSpecifiedStandard());
		accCerBodyMngReqTwoImpl.setQMRefSpecified(getQMRefSpecified());
		accCerBodyMngReqTwoImpl.setApplicationForm(getApplicationForm());
		accCerBodyMngReqTwoImpl.setQMRefAppliForm(getQMRefAppliForm());
		accCerBodyMngReqTwoImpl.setApplicationReview(getApplicationReview());
		accCerBodyMngReqTwoImpl.setQMRefAppliReview(getQMRefAppliReview());
		accCerBodyMngReqTwoImpl.setAssessmentPlan(getAssessmentPlan());
		accCerBodyMngReqTwoImpl.setQMRefAssessmentPlan(
			getQMRefAssessmentPlan());
		accCerBodyMngReqTwoImpl.setExaminationProcess(getExaminationProcess());
		accCerBodyMngReqTwoImpl.setQMRefExamProcess(getQMRefExamProcess());
		accCerBodyMngReqTwoImpl.setCertificationDecision(
			getCertificationDecision());
		accCerBodyMngReqTwoImpl.setQMRefCertiDecision(getQMRefCertiDecision());
		accCerBodyMngReqTwoImpl.setCertificationDoc(getCertificationDoc());
		accCerBodyMngReqTwoImpl.setQMRefCertiDoc(getQMRefCertiDoc());
		accCerBodyMngReqTwoImpl.setUseOfCertificates(getUseOfCertificates());
		accCerBodyMngReqTwoImpl.setQMRefUseOfCertificate(
			getQMRefUseOfCertificate());
		accCerBodyMngReqTwoImpl.setSuspension(getSuspension());
		accCerBodyMngReqTwoImpl.setQMRefSuspension(getQMRefSuspension());
		accCerBodyMngReqTwoImpl.setProcessToReceive(getProcessToReceive());
		accCerBodyMngReqTwoImpl.setQMRefReceiveProcess(
			getQMRefReceiveProcess());
		accCerBodyMngReqTwoImpl.setGeneralManage(getGeneralManage());
		accCerBodyMngReqTwoImpl.setQMRefGeneral(getQMRefGeneral());
		accCerBodyMngReqTwoImpl.setDocControl(getDocControl());
		accCerBodyMngReqTwoImpl.setQMRefDocControl(getQMRefDocControl());
		accCerBodyMngReqTwoImpl.setRecordControl(getRecordControl());
		accCerBodyMngReqTwoImpl.setQMRefRecControl(getQMRefRecControl());
		accCerBodyMngReqTwoImpl.setManageReview(getManageReview());
		accCerBodyMngReqTwoImpl.setQMRefManageReview(getQMRefManageReview());
		accCerBodyMngReqTwoImpl.setInternalAudit(getInternalAudit());
		accCerBodyMngReqTwoImpl.setQMRefInternal(getQMRefInternal());
		accCerBodyMngReqTwoImpl.setCorrectiveAction(getCorrectiveAction());
		accCerBodyMngReqTwoImpl.setQMRefCorrective(getQMRefCorrective());
		accCerBodyMngReqTwoImpl.setPreventiveAction(getPreventiveAction());
		accCerBodyMngReqTwoImpl.setQMRefPreventive(getQMRefPreventive());
		accCerBodyMngReqTwoImpl.setDocInKeeping(getDocInKeeping());
		accCerBodyMngReqTwoImpl.setQMRefDocInKeeping(getQMRefDocInKeeping());
		accCerBodyMngReqTwoImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accCerBodyMngReqTwoImpl.resetOriginalValues();

		return accCerBodyMngReqTwoImpl;
	}

	@Override
	public AccCerBodyMngReqTwo cloneWithOriginalValues() {
		AccCerBodyMngReqTwoImpl accCerBodyMngReqTwoImpl =
			new AccCerBodyMngReqTwoImpl();

		accCerBodyMngReqTwoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accCerBodyMngReqTwoImpl.setAccCerBodyMngReqTwoId(
			this.<Long>getColumnOriginalValue("accCerBodyMngReqTwoId"));
		accCerBodyMngReqTwoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accCerBodyMngReqTwoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accCerBodyMngReqTwoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accCerBodyMngReqTwoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accCerBodyMngReqTwoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accCerBodyMngReqTwoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accCerBodyMngReqTwoImpl.setOptionFollow(
			this.<String>getColumnOriginalValue("optionFollow"));
		accCerBodyMngReqTwoImpl.setCertiAgreement(
			this.<String>getColumnOriginalValue("certiAgreement"));
		accCerBodyMngReqTwoImpl.setQMRefCertiAgreement(
			this.<String>getColumnOriginalValue("qMRefCertiAgreement"));
		accCerBodyMngReqTwoImpl.setRiskAssessment(
			this.<String>getColumnOriginalValue("riskAssessment"));
		accCerBodyMngReqTwoImpl.setQMRefRisk(
			this.<String>getColumnOriginalValue("qMRefRisk"));
		accCerBodyMngReqTwoImpl.setConfidentiality(
			this.<String>getColumnOriginalValue("confidentiality"));
		accCerBodyMngReqTwoImpl.setQMRefConfidentiality(
			this.<String>getColumnOriginalValue("qMRefConfidentiality"));
		accCerBodyMngReqTwoImpl.setSecurity(
			this.<String>getColumnOriginalValue("security"));
		accCerBodyMngReqTwoImpl.setQMRefSecurity(
			this.<String>getColumnOriginalValue("qMRefSecurity"));
		accCerBodyMngReqTwoImpl.setCertificationScheme(
			this.<String>getColumnOriginalValue("certificationScheme"));
		accCerBodyMngReqTwoImpl.setQMRefCertifiScheme(
			this.<String>getColumnOriginalValue("qMRefCertifiScheme"));
		accCerBodyMngReqTwoImpl.setValidCertification(
			this.<String>getColumnOriginalValue("validCertification"));
		accCerBodyMngReqTwoImpl.setQMRefValidCertification(
			this.<String>getColumnOriginalValue("qMRefValidCertification"));
		accCerBodyMngReqTwoImpl.setPreRequisites(
			this.<String>getColumnOriginalValue("preRequisites"));
		accCerBodyMngReqTwoImpl.setQMRefPrerequisites(
			this.<String>getColumnOriginalValue("qMRefPrerequisites"));
		accCerBodyMngReqTwoImpl.setInfoProvided(
			this.<String>getColumnOriginalValue("infoProvided"));
		accCerBodyMngReqTwoImpl.setQMRefInfoProvided(
			this.<String>getColumnOriginalValue("qMRefInfoProvided"));
		accCerBodyMngReqTwoImpl.setHandlingAppeals(
			this.<String>getColumnOriginalValue("handlingAppeals"));
		accCerBodyMngReqTwoImpl.setQMRefHandlingAppeals(
			this.<String>getColumnOriginalValue("qMRefHandlingAppeals"));
		accCerBodyMngReqTwoImpl.setHandlingComplaints(
			this.<String>getColumnOriginalValue("handlingComplaints"));
		accCerBodyMngReqTwoImpl.setQMRefHandlingComplaint(
			this.<String>getColumnOriginalValue("qMRefHandlingComplaint"));
		accCerBodyMngReqTwoImpl.setOrgStructure(
			this.<String>getColumnOriginalValue("orgStructure"));
		accCerBodyMngReqTwoImpl.setQMRefOrgStructure(
			this.<String>getColumnOriginalValue("qMRefOrgStructure"));
		accCerBodyMngReqTwoImpl.setFormalRules(
			this.<String>getColumnOriginalValue("formalRules"));
		accCerBodyMngReqTwoImpl.setQMRefFormalRules(
			this.<String>getColumnOriginalValue("qMRefFormalRules"));
		accCerBodyMngReqTwoImpl.setSafeguardingMechanism(
			this.<String>getColumnOriginalValue("safeguardingMechanism"));
		accCerBodyMngReqTwoImpl.setQMRefSafeguarding(
			this.<String>getColumnOriginalValue("qMRefSafeguarding"));
		accCerBodyMngReqTwoImpl.setManagementProc(
			this.<String>getColumnOriginalValue("managementProc"));
		accCerBodyMngReqTwoImpl.setQMRefManagementProc(
			this.<String>getColumnOriginalValue("qMRefManagementProc"));
		accCerBodyMngReqTwoImpl.setContractExaminer(
			this.<String>getColumnOriginalValue("contractExaminer"));
		accCerBodyMngReqTwoImpl.setQMRefExaminer(
			this.<String>getColumnOriginalValue("qMRefExaminer"));
		accCerBodyMngReqTwoImpl.setContractBody(
			this.<String>getColumnOriginalValue("contractBody"));
		accCerBodyMngReqTwoImpl.setQMRefContractBody(
			this.<String>getColumnOriginalValue("qMRefContractBody"));
		accCerBodyMngReqTwoImpl.setDocPolicies(
			this.<String>getColumnOriginalValue("docPolicies"));
		accCerBodyMngReqTwoImpl.setQMRefDocPolicies(
			this.<String>getColumnOriginalValue("qMRefDocPolicies"));
		accCerBodyMngReqTwoImpl.setSpecifiedStandard(
			this.<String>getColumnOriginalValue("specifiedStandard"));
		accCerBodyMngReqTwoImpl.setQMRefSpecified(
			this.<String>getColumnOriginalValue("qMRefSpecified"));
		accCerBodyMngReqTwoImpl.setApplicationForm(
			this.<String>getColumnOriginalValue("applicationForm"));
		accCerBodyMngReqTwoImpl.setQMRefAppliForm(
			this.<String>getColumnOriginalValue("qMRefAppliForm"));
		accCerBodyMngReqTwoImpl.setApplicationReview(
			this.<String>getColumnOriginalValue("applicationReview"));
		accCerBodyMngReqTwoImpl.setQMRefAppliReview(
			this.<String>getColumnOriginalValue("qMRefAppliReview"));
		accCerBodyMngReqTwoImpl.setAssessmentPlan(
			this.<String>getColumnOriginalValue("assessmentPlan"));
		accCerBodyMngReqTwoImpl.setQMRefAssessmentPlan(
			this.<String>getColumnOriginalValue("qMRefAssessmentPlan"));
		accCerBodyMngReqTwoImpl.setExaminationProcess(
			this.<String>getColumnOriginalValue("examinationProcess"));
		accCerBodyMngReqTwoImpl.setQMRefExamProcess(
			this.<String>getColumnOriginalValue("qMRefExamProcess"));
		accCerBodyMngReqTwoImpl.setCertificationDecision(
			this.<String>getColumnOriginalValue("certificationDecision"));
		accCerBodyMngReqTwoImpl.setQMRefCertiDecision(
			this.<String>getColumnOriginalValue("qMRefCertiDecision"));
		accCerBodyMngReqTwoImpl.setCertificationDoc(
			this.<String>getColumnOriginalValue("certificationDoc"));
		accCerBodyMngReqTwoImpl.setQMRefCertiDoc(
			this.<String>getColumnOriginalValue("qMRefCertiDoc"));
		accCerBodyMngReqTwoImpl.setUseOfCertificates(
			this.<String>getColumnOriginalValue("useOfCertificates"));
		accCerBodyMngReqTwoImpl.setQMRefUseOfCertificate(
			this.<String>getColumnOriginalValue("qMRefUseOfCertificate"));
		accCerBodyMngReqTwoImpl.setSuspension(
			this.<String>getColumnOriginalValue("suspension"));
		accCerBodyMngReqTwoImpl.setQMRefSuspension(
			this.<String>getColumnOriginalValue("qMRefSuspension"));
		accCerBodyMngReqTwoImpl.setProcessToReceive(
			this.<String>getColumnOriginalValue("processToReceive"));
		accCerBodyMngReqTwoImpl.setQMRefReceiveProcess(
			this.<String>getColumnOriginalValue("qMRefReceiveProcess"));
		accCerBodyMngReqTwoImpl.setGeneralManage(
			this.<String>getColumnOriginalValue("generalManage"));
		accCerBodyMngReqTwoImpl.setQMRefGeneral(
			this.<String>getColumnOriginalValue("qMRefGeneral"));
		accCerBodyMngReqTwoImpl.setDocControl(
			this.<String>getColumnOriginalValue("docControl"));
		accCerBodyMngReqTwoImpl.setQMRefDocControl(
			this.<String>getColumnOriginalValue("qMRefDocControl"));
		accCerBodyMngReqTwoImpl.setRecordControl(
			this.<String>getColumnOriginalValue("recordControl"));
		accCerBodyMngReqTwoImpl.setQMRefRecControl(
			this.<String>getColumnOriginalValue("qMRefRecControl"));
		accCerBodyMngReqTwoImpl.setManageReview(
			this.<String>getColumnOriginalValue("manageReview"));
		accCerBodyMngReqTwoImpl.setQMRefManageReview(
			this.<String>getColumnOriginalValue("qMRefManageReview"));
		accCerBodyMngReqTwoImpl.setInternalAudit(
			this.<String>getColumnOriginalValue("internalAudit"));
		accCerBodyMngReqTwoImpl.setQMRefInternal(
			this.<String>getColumnOriginalValue("qMRefInternal"));
		accCerBodyMngReqTwoImpl.setCorrectiveAction(
			this.<String>getColumnOriginalValue("correctiveAction"));
		accCerBodyMngReqTwoImpl.setQMRefCorrective(
			this.<String>getColumnOriginalValue("qMRefCorrective"));
		accCerBodyMngReqTwoImpl.setPreventiveAction(
			this.<String>getColumnOriginalValue("preventiveAction"));
		accCerBodyMngReqTwoImpl.setQMRefPreventive(
			this.<String>getColumnOriginalValue("qMRefPreventive"));
		accCerBodyMngReqTwoImpl.setDocInKeeping(
			this.<String>getColumnOriginalValue("docInKeeping"));
		accCerBodyMngReqTwoImpl.setQMRefDocInKeeping(
			this.<String>getColumnOriginalValue("qMRefDocInKeeping"));
		accCerBodyMngReqTwoImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accCerBodyMngReqTwoImpl;
	}

	@Override
	public int compareTo(AccCerBodyMngReqTwo accCerBodyMngReqTwo) {
		long primaryKey = accCerBodyMngReqTwo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccCerBodyMngReqTwo)) {
			return false;
		}

		AccCerBodyMngReqTwo accCerBodyMngReqTwo = (AccCerBodyMngReqTwo)object;

		long primaryKey = accCerBodyMngReqTwo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;
	}

	@Override
	public CacheModel<AccCerBodyMngReqTwo> toCacheModel() {
		AccCerBodyMngReqTwoCacheModel accCerBodyMngReqTwoCacheModel =
			new AccCerBodyMngReqTwoCacheModel();

		accCerBodyMngReqTwoCacheModel.uuid = getUuid();

		String uuid = accCerBodyMngReqTwoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.uuid = null;
		}

		accCerBodyMngReqTwoCacheModel.accCerBodyMngReqTwoId =
			getAccCerBodyMngReqTwoId();

		accCerBodyMngReqTwoCacheModel.groupId = getGroupId();

		accCerBodyMngReqTwoCacheModel.companyId = getCompanyId();

		accCerBodyMngReqTwoCacheModel.userId = getUserId();

		accCerBodyMngReqTwoCacheModel.userName = getUserName();

		String userName = accCerBodyMngReqTwoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accCerBodyMngReqTwoCacheModel.createDate = createDate.getTime();
		}
		else {
			accCerBodyMngReqTwoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accCerBodyMngReqTwoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accCerBodyMngReqTwoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accCerBodyMngReqTwoCacheModel.optionFollow = getOptionFollow();

		String optionFollow = accCerBodyMngReqTwoCacheModel.optionFollow;

		if ((optionFollow != null) && (optionFollow.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.optionFollow = null;
		}

		accCerBodyMngReqTwoCacheModel.certiAgreement = getCertiAgreement();

		String certiAgreement = accCerBodyMngReqTwoCacheModel.certiAgreement;

		if ((certiAgreement != null) && (certiAgreement.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.certiAgreement = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefCertiAgreement =
			getQMRefCertiAgreement();

		String qMRefCertiAgreement =
			accCerBodyMngReqTwoCacheModel.qMRefCertiAgreement;

		if ((qMRefCertiAgreement != null) &&
			(qMRefCertiAgreement.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefCertiAgreement = null;
		}

		accCerBodyMngReqTwoCacheModel.riskAssessment = getRiskAssessment();

		String riskAssessment = accCerBodyMngReqTwoCacheModel.riskAssessment;

		if ((riskAssessment != null) && (riskAssessment.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.riskAssessment = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefRisk = getQMRefRisk();

		String qMRefRisk = accCerBodyMngReqTwoCacheModel.qMRefRisk;

		if ((qMRefRisk != null) && (qMRefRisk.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefRisk = null;
		}

		accCerBodyMngReqTwoCacheModel.confidentiality = getConfidentiality();

		String confidentiality = accCerBodyMngReqTwoCacheModel.confidentiality;

		if ((confidentiality != null) && (confidentiality.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.confidentiality = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefConfidentiality =
			getQMRefConfidentiality();

		String qMRefConfidentiality =
			accCerBodyMngReqTwoCacheModel.qMRefConfidentiality;

		if ((qMRefConfidentiality != null) &&
			(qMRefConfidentiality.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefConfidentiality = null;
		}

		accCerBodyMngReqTwoCacheModel.security = getSecurity();

		String security = accCerBodyMngReqTwoCacheModel.security;

		if ((security != null) && (security.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.security = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefSecurity = getQMRefSecurity();

		String qMRefSecurity = accCerBodyMngReqTwoCacheModel.qMRefSecurity;

		if ((qMRefSecurity != null) && (qMRefSecurity.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefSecurity = null;
		}

		accCerBodyMngReqTwoCacheModel.certificationScheme =
			getCertificationScheme();

		String certificationScheme =
			accCerBodyMngReqTwoCacheModel.certificationScheme;

		if ((certificationScheme != null) &&
			(certificationScheme.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.certificationScheme = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefCertifiScheme =
			getQMRefCertifiScheme();

		String qMRefCertifiScheme =
			accCerBodyMngReqTwoCacheModel.qMRefCertifiScheme;

		if ((qMRefCertifiScheme != null) &&
			(qMRefCertifiScheme.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefCertifiScheme = null;
		}

		accCerBodyMngReqTwoCacheModel.validCertification =
			getValidCertification();

		String validCertification =
			accCerBodyMngReqTwoCacheModel.validCertification;

		if ((validCertification != null) &&
			(validCertification.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.validCertification = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefValidCertification =
			getQMRefValidCertification();

		String qMRefValidCertification =
			accCerBodyMngReqTwoCacheModel.qMRefValidCertification;

		if ((qMRefValidCertification != null) &&
			(qMRefValidCertification.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefValidCertification = null;
		}

		accCerBodyMngReqTwoCacheModel.preRequisites = getPreRequisites();

		String preRequisites = accCerBodyMngReqTwoCacheModel.preRequisites;

		if ((preRequisites != null) && (preRequisites.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.preRequisites = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefPrerequisites =
			getQMRefPrerequisites();

		String qMRefPrerequisites =
			accCerBodyMngReqTwoCacheModel.qMRefPrerequisites;

		if ((qMRefPrerequisites != null) &&
			(qMRefPrerequisites.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefPrerequisites = null;
		}

		accCerBodyMngReqTwoCacheModel.infoProvided = getInfoProvided();

		String infoProvided = accCerBodyMngReqTwoCacheModel.infoProvided;

		if ((infoProvided != null) && (infoProvided.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.infoProvided = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefInfoProvided =
			getQMRefInfoProvided();

		String qMRefInfoProvided =
			accCerBodyMngReqTwoCacheModel.qMRefInfoProvided;

		if ((qMRefInfoProvided != null) && (qMRefInfoProvided.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefInfoProvided = null;
		}

		accCerBodyMngReqTwoCacheModel.handlingAppeals = getHandlingAppeals();

		String handlingAppeals = accCerBodyMngReqTwoCacheModel.handlingAppeals;

		if ((handlingAppeals != null) && (handlingAppeals.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.handlingAppeals = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefHandlingAppeals =
			getQMRefHandlingAppeals();

		String qMRefHandlingAppeals =
			accCerBodyMngReqTwoCacheModel.qMRefHandlingAppeals;

		if ((qMRefHandlingAppeals != null) &&
			(qMRefHandlingAppeals.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefHandlingAppeals = null;
		}

		accCerBodyMngReqTwoCacheModel.handlingComplaints =
			getHandlingComplaints();

		String handlingComplaints =
			accCerBodyMngReqTwoCacheModel.handlingComplaints;

		if ((handlingComplaints != null) &&
			(handlingComplaints.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.handlingComplaints = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefHandlingComplaint =
			getQMRefHandlingComplaint();

		String qMRefHandlingComplaint =
			accCerBodyMngReqTwoCacheModel.qMRefHandlingComplaint;

		if ((qMRefHandlingComplaint != null) &&
			(qMRefHandlingComplaint.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefHandlingComplaint = null;
		}

		accCerBodyMngReqTwoCacheModel.orgStructure = getOrgStructure();

		String orgStructure = accCerBodyMngReqTwoCacheModel.orgStructure;

		if ((orgStructure != null) && (orgStructure.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.orgStructure = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefOrgStructure =
			getQMRefOrgStructure();

		String qMRefOrgStructure =
			accCerBodyMngReqTwoCacheModel.qMRefOrgStructure;

		if ((qMRefOrgStructure != null) && (qMRefOrgStructure.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefOrgStructure = null;
		}

		accCerBodyMngReqTwoCacheModel.formalRules = getFormalRules();

		String formalRules = accCerBodyMngReqTwoCacheModel.formalRules;

		if ((formalRules != null) && (formalRules.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.formalRules = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefFormalRules = getQMRefFormalRules();

		String qMRefFormalRules =
			accCerBodyMngReqTwoCacheModel.qMRefFormalRules;

		if ((qMRefFormalRules != null) && (qMRefFormalRules.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefFormalRules = null;
		}

		accCerBodyMngReqTwoCacheModel.safeguardingMechanism =
			getSafeguardingMechanism();

		String safeguardingMechanism =
			accCerBodyMngReqTwoCacheModel.safeguardingMechanism;

		if ((safeguardingMechanism != null) &&
			(safeguardingMechanism.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.safeguardingMechanism = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefSafeguarding =
			getQMRefSafeguarding();

		String qMRefSafeguarding =
			accCerBodyMngReqTwoCacheModel.qMRefSafeguarding;

		if ((qMRefSafeguarding != null) && (qMRefSafeguarding.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefSafeguarding = null;
		}

		accCerBodyMngReqTwoCacheModel.managementProc = getManagementProc();

		String managementProc = accCerBodyMngReqTwoCacheModel.managementProc;

		if ((managementProc != null) && (managementProc.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.managementProc = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefManagementProc =
			getQMRefManagementProc();

		String qMRefManagementProc =
			accCerBodyMngReqTwoCacheModel.qMRefManagementProc;

		if ((qMRefManagementProc != null) &&
			(qMRefManagementProc.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefManagementProc = null;
		}

		accCerBodyMngReqTwoCacheModel.contractExaminer = getContractExaminer();

		String contractExaminer =
			accCerBodyMngReqTwoCacheModel.contractExaminer;

		if ((contractExaminer != null) && (contractExaminer.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.contractExaminer = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefExaminer = getQMRefExaminer();

		String qMRefExaminer = accCerBodyMngReqTwoCacheModel.qMRefExaminer;

		if ((qMRefExaminer != null) && (qMRefExaminer.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefExaminer = null;
		}

		accCerBodyMngReqTwoCacheModel.contractBody = getContractBody();

		String contractBody = accCerBodyMngReqTwoCacheModel.contractBody;

		if ((contractBody != null) && (contractBody.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.contractBody = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefContractBody =
			getQMRefContractBody();

		String qMRefContractBody =
			accCerBodyMngReqTwoCacheModel.qMRefContractBody;

		if ((qMRefContractBody != null) && (qMRefContractBody.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefContractBody = null;
		}

		accCerBodyMngReqTwoCacheModel.docPolicies = getDocPolicies();

		String docPolicies = accCerBodyMngReqTwoCacheModel.docPolicies;

		if ((docPolicies != null) && (docPolicies.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.docPolicies = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefDocPolicies = getQMRefDocPolicies();

		String qMRefDocPolicies =
			accCerBodyMngReqTwoCacheModel.qMRefDocPolicies;

		if ((qMRefDocPolicies != null) && (qMRefDocPolicies.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefDocPolicies = null;
		}

		accCerBodyMngReqTwoCacheModel.specifiedStandard =
			getSpecifiedStandard();

		String specifiedStandard =
			accCerBodyMngReqTwoCacheModel.specifiedStandard;

		if ((specifiedStandard != null) && (specifiedStandard.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.specifiedStandard = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefSpecified = getQMRefSpecified();

		String qMRefSpecified = accCerBodyMngReqTwoCacheModel.qMRefSpecified;

		if ((qMRefSpecified != null) && (qMRefSpecified.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefSpecified = null;
		}

		accCerBodyMngReqTwoCacheModel.applicationForm = getApplicationForm();

		String applicationForm = accCerBodyMngReqTwoCacheModel.applicationForm;

		if ((applicationForm != null) && (applicationForm.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.applicationForm = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefAppliForm = getQMRefAppliForm();

		String qMRefAppliForm = accCerBodyMngReqTwoCacheModel.qMRefAppliForm;

		if ((qMRefAppliForm != null) && (qMRefAppliForm.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefAppliForm = null;
		}

		accCerBodyMngReqTwoCacheModel.applicationReview =
			getApplicationReview();

		String applicationReview =
			accCerBodyMngReqTwoCacheModel.applicationReview;

		if ((applicationReview != null) && (applicationReview.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.applicationReview = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefAppliReview = getQMRefAppliReview();

		String qMRefAppliReview =
			accCerBodyMngReqTwoCacheModel.qMRefAppliReview;

		if ((qMRefAppliReview != null) && (qMRefAppliReview.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefAppliReview = null;
		}

		accCerBodyMngReqTwoCacheModel.assessmentPlan = getAssessmentPlan();

		String assessmentPlan = accCerBodyMngReqTwoCacheModel.assessmentPlan;

		if ((assessmentPlan != null) && (assessmentPlan.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.assessmentPlan = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefAssessmentPlan =
			getQMRefAssessmentPlan();

		String qMRefAssessmentPlan =
			accCerBodyMngReqTwoCacheModel.qMRefAssessmentPlan;

		if ((qMRefAssessmentPlan != null) &&
			(qMRefAssessmentPlan.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefAssessmentPlan = null;
		}

		accCerBodyMngReqTwoCacheModel.examinationProcess =
			getExaminationProcess();

		String examinationProcess =
			accCerBodyMngReqTwoCacheModel.examinationProcess;

		if ((examinationProcess != null) &&
			(examinationProcess.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.examinationProcess = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefExamProcess = getQMRefExamProcess();

		String qMRefExamProcess =
			accCerBodyMngReqTwoCacheModel.qMRefExamProcess;

		if ((qMRefExamProcess != null) && (qMRefExamProcess.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefExamProcess = null;
		}

		accCerBodyMngReqTwoCacheModel.certificationDecision =
			getCertificationDecision();

		String certificationDecision =
			accCerBodyMngReqTwoCacheModel.certificationDecision;

		if ((certificationDecision != null) &&
			(certificationDecision.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.certificationDecision = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefCertiDecision =
			getQMRefCertiDecision();

		String qMRefCertiDecision =
			accCerBodyMngReqTwoCacheModel.qMRefCertiDecision;

		if ((qMRefCertiDecision != null) &&
			(qMRefCertiDecision.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefCertiDecision = null;
		}

		accCerBodyMngReqTwoCacheModel.certificationDoc = getCertificationDoc();

		String certificationDoc =
			accCerBodyMngReqTwoCacheModel.certificationDoc;

		if ((certificationDoc != null) && (certificationDoc.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.certificationDoc = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefCertiDoc = getQMRefCertiDoc();

		String qMRefCertiDoc = accCerBodyMngReqTwoCacheModel.qMRefCertiDoc;

		if ((qMRefCertiDoc != null) && (qMRefCertiDoc.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefCertiDoc = null;
		}

		accCerBodyMngReqTwoCacheModel.useOfCertificates =
			getUseOfCertificates();

		String useOfCertificates =
			accCerBodyMngReqTwoCacheModel.useOfCertificates;

		if ((useOfCertificates != null) && (useOfCertificates.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.useOfCertificates = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefUseOfCertificate =
			getQMRefUseOfCertificate();

		String qMRefUseOfCertificate =
			accCerBodyMngReqTwoCacheModel.qMRefUseOfCertificate;

		if ((qMRefUseOfCertificate != null) &&
			(qMRefUseOfCertificate.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefUseOfCertificate = null;
		}

		accCerBodyMngReqTwoCacheModel.suspension = getSuspension();

		String suspension = accCerBodyMngReqTwoCacheModel.suspension;

		if ((suspension != null) && (suspension.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.suspension = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefSuspension = getQMRefSuspension();

		String qMRefSuspension = accCerBodyMngReqTwoCacheModel.qMRefSuspension;

		if ((qMRefSuspension != null) && (qMRefSuspension.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefSuspension = null;
		}

		accCerBodyMngReqTwoCacheModel.processToReceive = getProcessToReceive();

		String processToReceive =
			accCerBodyMngReqTwoCacheModel.processToReceive;

		if ((processToReceive != null) && (processToReceive.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.processToReceive = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefReceiveProcess =
			getQMRefReceiveProcess();

		String qMRefReceiveProcess =
			accCerBodyMngReqTwoCacheModel.qMRefReceiveProcess;

		if ((qMRefReceiveProcess != null) &&
			(qMRefReceiveProcess.length() == 0)) {

			accCerBodyMngReqTwoCacheModel.qMRefReceiveProcess = null;
		}

		accCerBodyMngReqTwoCacheModel.generalManage = getGeneralManage();

		String generalManage = accCerBodyMngReqTwoCacheModel.generalManage;

		if ((generalManage != null) && (generalManage.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.generalManage = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefGeneral = getQMRefGeneral();

		String qMRefGeneral = accCerBodyMngReqTwoCacheModel.qMRefGeneral;

		if ((qMRefGeneral != null) && (qMRefGeneral.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefGeneral = null;
		}

		accCerBodyMngReqTwoCacheModel.docControl = getDocControl();

		String docControl = accCerBodyMngReqTwoCacheModel.docControl;

		if ((docControl != null) && (docControl.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.docControl = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefDocControl = getQMRefDocControl();

		String qMRefDocControl = accCerBodyMngReqTwoCacheModel.qMRefDocControl;

		if ((qMRefDocControl != null) && (qMRefDocControl.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefDocControl = null;
		}

		accCerBodyMngReqTwoCacheModel.recordControl = getRecordControl();

		String recordControl = accCerBodyMngReqTwoCacheModel.recordControl;

		if ((recordControl != null) && (recordControl.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.recordControl = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefRecControl = getQMRefRecControl();

		String qMRefRecControl = accCerBodyMngReqTwoCacheModel.qMRefRecControl;

		if ((qMRefRecControl != null) && (qMRefRecControl.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefRecControl = null;
		}

		accCerBodyMngReqTwoCacheModel.manageReview = getManageReview();

		String manageReview = accCerBodyMngReqTwoCacheModel.manageReview;

		if ((manageReview != null) && (manageReview.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.manageReview = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefManageReview =
			getQMRefManageReview();

		String qMRefManageReview =
			accCerBodyMngReqTwoCacheModel.qMRefManageReview;

		if ((qMRefManageReview != null) && (qMRefManageReview.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefManageReview = null;
		}

		accCerBodyMngReqTwoCacheModel.internalAudit = getInternalAudit();

		String internalAudit = accCerBodyMngReqTwoCacheModel.internalAudit;

		if ((internalAudit != null) && (internalAudit.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.internalAudit = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefInternal = getQMRefInternal();

		String qMRefInternal = accCerBodyMngReqTwoCacheModel.qMRefInternal;

		if ((qMRefInternal != null) && (qMRefInternal.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefInternal = null;
		}

		accCerBodyMngReqTwoCacheModel.correctiveAction = getCorrectiveAction();

		String correctiveAction =
			accCerBodyMngReqTwoCacheModel.correctiveAction;

		if ((correctiveAction != null) && (correctiveAction.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.correctiveAction = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefCorrective = getQMRefCorrective();

		String qMRefCorrective = accCerBodyMngReqTwoCacheModel.qMRefCorrective;

		if ((qMRefCorrective != null) && (qMRefCorrective.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefCorrective = null;
		}

		accCerBodyMngReqTwoCacheModel.preventiveAction = getPreventiveAction();

		String preventiveAction =
			accCerBodyMngReqTwoCacheModel.preventiveAction;

		if ((preventiveAction != null) && (preventiveAction.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.preventiveAction = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefPreventive = getQMRefPreventive();

		String qMRefPreventive = accCerBodyMngReqTwoCacheModel.qMRefPreventive;

		if ((qMRefPreventive != null) && (qMRefPreventive.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefPreventive = null;
		}

		accCerBodyMngReqTwoCacheModel.docInKeeping = getDocInKeeping();

		String docInKeeping = accCerBodyMngReqTwoCacheModel.docInKeeping;

		if ((docInKeeping != null) && (docInKeeping.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.docInKeeping = null;
		}

		accCerBodyMngReqTwoCacheModel.qMRefDocInKeeping =
			getQMRefDocInKeeping();

		String qMRefDocInKeeping =
			accCerBodyMngReqTwoCacheModel.qMRefDocInKeeping;

		if ((qMRefDocInKeeping != null) && (qMRefDocInKeeping.length() == 0)) {
			accCerBodyMngReqTwoCacheModel.qMRefDocInKeeping = null;
		}

		accCerBodyMngReqTwoCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accCerBodyMngReqTwoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccCerBodyMngReqTwo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccCerBodyMngReqTwo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccCerBodyMngReqTwo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccCerBodyMngReqTwo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccCerBodyMngReqTwo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccCerBodyMngReqTwo.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accCerBodyMngReqTwoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _optionFollow;
	private String _certiAgreement;
	private String _qMRefCertiAgreement;
	private String _riskAssessment;
	private String _qMRefRisk;
	private String _confidentiality;
	private String _qMRefConfidentiality;
	private String _security;
	private String _qMRefSecurity;
	private String _certificationScheme;
	private String _qMRefCertifiScheme;
	private String _validCertification;
	private String _qMRefValidCertification;
	private String _preRequisites;
	private String _qMRefPrerequisites;
	private String _infoProvided;
	private String _qMRefInfoProvided;
	private String _handlingAppeals;
	private String _qMRefHandlingAppeals;
	private String _handlingComplaints;
	private String _qMRefHandlingComplaint;
	private String _orgStructure;
	private String _qMRefOrgStructure;
	private String _formalRules;
	private String _qMRefFormalRules;
	private String _safeguardingMechanism;
	private String _qMRefSafeguarding;
	private String _managementProc;
	private String _qMRefManagementProc;
	private String _contractExaminer;
	private String _qMRefExaminer;
	private String _contractBody;
	private String _qMRefContractBody;
	private String _docPolicies;
	private String _qMRefDocPolicies;
	private String _specifiedStandard;
	private String _qMRefSpecified;
	private String _applicationForm;
	private String _qMRefAppliForm;
	private String _applicationReview;
	private String _qMRefAppliReview;
	private String _assessmentPlan;
	private String _qMRefAssessmentPlan;
	private String _examinationProcess;
	private String _qMRefExamProcess;
	private String _certificationDecision;
	private String _qMRefCertiDecision;
	private String _certificationDoc;
	private String _qMRefCertiDoc;
	private String _useOfCertificates;
	private String _qMRefUseOfCertificate;
	private String _suspension;
	private String _qMRefSuspension;
	private String _processToReceive;
	private String _qMRefReceiveProcess;
	private String _generalManage;
	private String _qMRefGeneral;
	private String _docControl;
	private String _qMRefDocControl;
	private String _recordControl;
	private String _qMRefRecControl;
	private String _manageReview;
	private String _qMRefManageReview;
	private String _internalAudit;
	private String _qMRefInternal;
	private String _correctiveAction;
	private String _qMRefCorrective;
	private String _preventiveAction;
	private String _qMRefPreventive;
	private String _docInKeeping;
	private String _qMRefDocInKeeping;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccCerBodyMngReqTwo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccCerBodyMngReqTwo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accCerBodyMngReqTwoId", _accCerBodyMngReqTwoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("optionFollow", _optionFollow);
		_columnOriginalValues.put("certiAgreement", _certiAgreement);
		_columnOriginalValues.put("qMRefCertiAgreement", _qMRefCertiAgreement);
		_columnOriginalValues.put("riskAssessment", _riskAssessment);
		_columnOriginalValues.put("qMRefRisk", _qMRefRisk);
		_columnOriginalValues.put("confidentiality", _confidentiality);
		_columnOriginalValues.put(
			"qMRefConfidentiality", _qMRefConfidentiality);
		_columnOriginalValues.put("security", _security);
		_columnOriginalValues.put("qMRefSecurity", _qMRefSecurity);
		_columnOriginalValues.put("certificationScheme", _certificationScheme);
		_columnOriginalValues.put("qMRefCertifiScheme", _qMRefCertifiScheme);
		_columnOriginalValues.put("validCertification", _validCertification);
		_columnOriginalValues.put(
			"qMRefValidCertification", _qMRefValidCertification);
		_columnOriginalValues.put("preRequisites", _preRequisites);
		_columnOriginalValues.put("qMRefPrerequisites", _qMRefPrerequisites);
		_columnOriginalValues.put("infoProvided", _infoProvided);
		_columnOriginalValues.put("qMRefInfoProvided", _qMRefInfoProvided);
		_columnOriginalValues.put("handlingAppeals", _handlingAppeals);
		_columnOriginalValues.put(
			"qMRefHandlingAppeals", _qMRefHandlingAppeals);
		_columnOriginalValues.put("handlingComplaints", _handlingComplaints);
		_columnOriginalValues.put(
			"qMRefHandlingComplaint", _qMRefHandlingComplaint);
		_columnOriginalValues.put("orgStructure", _orgStructure);
		_columnOriginalValues.put("qMRefOrgStructure", _qMRefOrgStructure);
		_columnOriginalValues.put("formalRules", _formalRules);
		_columnOriginalValues.put("qMRefFormalRules", _qMRefFormalRules);
		_columnOriginalValues.put(
			"safeguardingMechanism", _safeguardingMechanism);
		_columnOriginalValues.put("qMRefSafeguarding", _qMRefSafeguarding);
		_columnOriginalValues.put("managementProc", _managementProc);
		_columnOriginalValues.put("qMRefManagementProc", _qMRefManagementProc);
		_columnOriginalValues.put("contractExaminer", _contractExaminer);
		_columnOriginalValues.put("qMRefExaminer", _qMRefExaminer);
		_columnOriginalValues.put("contractBody", _contractBody);
		_columnOriginalValues.put("qMRefContractBody", _qMRefContractBody);
		_columnOriginalValues.put("docPolicies", _docPolicies);
		_columnOriginalValues.put("qMRefDocPolicies", _qMRefDocPolicies);
		_columnOriginalValues.put("specifiedStandard", _specifiedStandard);
		_columnOriginalValues.put("qMRefSpecified", _qMRefSpecified);
		_columnOriginalValues.put("applicationForm", _applicationForm);
		_columnOriginalValues.put("qMRefAppliForm", _qMRefAppliForm);
		_columnOriginalValues.put("applicationReview", _applicationReview);
		_columnOriginalValues.put("qMRefAppliReview", _qMRefAppliReview);
		_columnOriginalValues.put("assessmentPlan", _assessmentPlan);
		_columnOriginalValues.put("qMRefAssessmentPlan", _qMRefAssessmentPlan);
		_columnOriginalValues.put("examinationProcess", _examinationProcess);
		_columnOriginalValues.put("qMRefExamProcess", _qMRefExamProcess);
		_columnOriginalValues.put(
			"certificationDecision", _certificationDecision);
		_columnOriginalValues.put("qMRefCertiDecision", _qMRefCertiDecision);
		_columnOriginalValues.put("certificationDoc", _certificationDoc);
		_columnOriginalValues.put("qMRefCertiDoc", _qMRefCertiDoc);
		_columnOriginalValues.put("useOfCertificates", _useOfCertificates);
		_columnOriginalValues.put(
			"qMRefUseOfCertificate", _qMRefUseOfCertificate);
		_columnOriginalValues.put("suspension", _suspension);
		_columnOriginalValues.put("qMRefSuspension", _qMRefSuspension);
		_columnOriginalValues.put("processToReceive", _processToReceive);
		_columnOriginalValues.put("qMRefReceiveProcess", _qMRefReceiveProcess);
		_columnOriginalValues.put("generalManage", _generalManage);
		_columnOriginalValues.put("qMRefGeneral", _qMRefGeneral);
		_columnOriginalValues.put("docControl", _docControl);
		_columnOriginalValues.put("qMRefDocControl", _qMRefDocControl);
		_columnOriginalValues.put("recordControl", _recordControl);
		_columnOriginalValues.put("qMRefRecControl", _qMRefRecControl);
		_columnOriginalValues.put("manageReview", _manageReview);
		_columnOriginalValues.put("qMRefManageReview", _qMRefManageReview);
		_columnOriginalValues.put("internalAudit", _internalAudit);
		_columnOriginalValues.put("qMRefInternal", _qMRefInternal);
		_columnOriginalValues.put("correctiveAction", _correctiveAction);
		_columnOriginalValues.put("qMRefCorrective", _qMRefCorrective);
		_columnOriginalValues.put("preventiveAction", _preventiveAction);
		_columnOriginalValues.put("qMRefPreventive", _qMRefPreventive);
		_columnOriginalValues.put("docInKeeping", _docInKeeping);
		_columnOriginalValues.put("qMRefDocInKeeping", _qMRefDocInKeeping);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private AccCerBodyMngReqTwo _escapedModel;

}