/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccCerBodyPersonnel;
import com.nbp.janaac.application.form.service.model.AccCerBodyPersonnelModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccCerBodyPersonnel service. Represents a row in the &quot;nbp_janaac_acc_cer_personnel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccCerBodyPersonnelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccCerBodyPersonnelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccCerBodyPersonnelImpl
 * @generated
 */
@JSON(strict = true)
public class AccCerBodyPersonnelModelImpl
	extends BaseModelImpl<AccCerBodyPersonnel>
	implements AccCerBodyPersonnelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc cer body personnel model instance should use the <code>AccCerBodyPersonnel</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_cer_personnel";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accCerBodyPersonnelId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"internalStaffSize", Types.VARCHAR}, {"auditorsNum", Types.VARCHAR},
		{"contractedPerNum", Types.VARCHAR}, {"bodyOutsource", Types.VARCHAR},
		{"descSecurity", Types.VARCHAR}, {"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accCerBodyPersonnelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("internalStaffSize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditorsNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractedPerNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bodyOutsource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descSecurity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_cer_personnel (uuid_ VARCHAR(75) null,accCerBodyPersonnelId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,internalStaffSize VARCHAR(75) null,auditorsNum VARCHAR(75) null,contractedPerNum VARCHAR(75) null,bodyOutsource VARCHAR(75) null,descSecurity VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_cer_personnel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accCerBodyPersonnel.accCerBodyPersonnelId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_cer_personnel.accCerBodyPersonnelId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCCERBODYPERSONNELID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccCerBodyPersonnelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accCerBodyPersonnelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccCerBodyPersonnelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accCerBodyPersonnelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccCerBodyPersonnel.class;
	}

	@Override
	public String getModelClassName() {
		return AccCerBodyPersonnel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccCerBodyPersonnel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccCerBodyPersonnel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccCerBodyPersonnel, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccCerBodyPersonnel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccCerBodyPersonnel, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccCerBodyPersonnel, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccCerBodyPersonnel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccCerBodyPersonnel, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccCerBodyPersonnel, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccCerBodyPersonnel, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccCerBodyPersonnel, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccCerBodyPersonnel, Object>>();

			attributeGetterFunctions.put("uuid", AccCerBodyPersonnel::getUuid);
			attributeGetterFunctions.put(
				"accCerBodyPersonnelId",
				AccCerBodyPersonnel::getAccCerBodyPersonnelId);
			attributeGetterFunctions.put(
				"groupId", AccCerBodyPersonnel::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccCerBodyPersonnel::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccCerBodyPersonnel::getUserId);
			attributeGetterFunctions.put(
				"userName", AccCerBodyPersonnel::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccCerBodyPersonnel::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccCerBodyPersonnel::getModifiedDate);
			attributeGetterFunctions.put(
				"internalStaffSize", AccCerBodyPersonnel::getInternalStaffSize);
			attributeGetterFunctions.put(
				"auditorsNum", AccCerBodyPersonnel::getAuditorsNum);
			attributeGetterFunctions.put(
				"contractedPerNum", AccCerBodyPersonnel::getContractedPerNum);
			attributeGetterFunctions.put(
				"bodyOutsource", AccCerBodyPersonnel::getBodyOutsource);
			attributeGetterFunctions.put(
				"descSecurity", AccCerBodyPersonnel::getDescSecurity);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccCerBodyPersonnel::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccCerBodyPersonnel, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccCerBodyPersonnel, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccCerBodyPersonnel, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccCerBodyPersonnel, String>)
					AccCerBodyPersonnel::setUuid);
			attributeSetterBiConsumers.put(
				"accCerBodyPersonnelId",
				(BiConsumer<AccCerBodyPersonnel, Long>)
					AccCerBodyPersonnel::setAccCerBodyPersonnelId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccCerBodyPersonnel, Long>)
					AccCerBodyPersonnel::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccCerBodyPersonnel, Long>)
					AccCerBodyPersonnel::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccCerBodyPersonnel, Long>)
					AccCerBodyPersonnel::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccCerBodyPersonnel, String>)
					AccCerBodyPersonnel::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccCerBodyPersonnel, Date>)
					AccCerBodyPersonnel::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccCerBodyPersonnel, Date>)
					AccCerBodyPersonnel::setModifiedDate);
			attributeSetterBiConsumers.put(
				"internalStaffSize",
				(BiConsumer<AccCerBodyPersonnel, String>)
					AccCerBodyPersonnel::setInternalStaffSize);
			attributeSetterBiConsumers.put(
				"auditorsNum",
				(BiConsumer<AccCerBodyPersonnel, String>)
					AccCerBodyPersonnel::setAuditorsNum);
			attributeSetterBiConsumers.put(
				"contractedPerNum",
				(BiConsumer<AccCerBodyPersonnel, String>)
					AccCerBodyPersonnel::setContractedPerNum);
			attributeSetterBiConsumers.put(
				"bodyOutsource",
				(BiConsumer<AccCerBodyPersonnel, String>)
					AccCerBodyPersonnel::setBodyOutsource);
			attributeSetterBiConsumers.put(
				"descSecurity",
				(BiConsumer<AccCerBodyPersonnel, String>)
					AccCerBodyPersonnel::setDescSecurity);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccCerBodyPersonnel, Long>)
					AccCerBodyPersonnel::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccCerBodyPersonnelId() {
		return _accCerBodyPersonnelId;
	}

	@Override
	public void setAccCerBodyPersonnelId(long accCerBodyPersonnelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accCerBodyPersonnelId = accCerBodyPersonnelId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getInternalStaffSize() {
		if (_internalStaffSize == null) {
			return "";
		}
		else {
			return _internalStaffSize;
		}
	}

	@Override
	public void setInternalStaffSize(String internalStaffSize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_internalStaffSize = internalStaffSize;
	}

	@JSON
	@Override
	public String getAuditorsNum() {
		if (_auditorsNum == null) {
			return "";
		}
		else {
			return _auditorsNum;
		}
	}

	@Override
	public void setAuditorsNum(String auditorsNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditorsNum = auditorsNum;
	}

	@JSON
	@Override
	public String getContractedPerNum() {
		if (_contractedPerNum == null) {
			return "";
		}
		else {
			return _contractedPerNum;
		}
	}

	@Override
	public void setContractedPerNum(String contractedPerNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contractedPerNum = contractedPerNum;
	}

	@JSON
	@Override
	public String getBodyOutsource() {
		if (_bodyOutsource == null) {
			return "";
		}
		else {
			return _bodyOutsource;
		}
	}

	@Override
	public void setBodyOutsource(String bodyOutsource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bodyOutsource = bodyOutsource;
	}

	@JSON
	@Override
	public String getDescSecurity() {
		if (_descSecurity == null) {
			return "";
		}
		else {
			return _descSecurity;
		}
	}

	@Override
	public void setDescSecurity(String descSecurity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descSecurity = descSecurity;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccCerBodyPersonnel.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccCerBodyPersonnel.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccCerBodyPersonnel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccCerBodyPersonnel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccCerBodyPersonnelImpl accCerBodyPersonnelImpl =
			new AccCerBodyPersonnelImpl();

		accCerBodyPersonnelImpl.setUuid(getUuid());
		accCerBodyPersonnelImpl.setAccCerBodyPersonnelId(
			getAccCerBodyPersonnelId());
		accCerBodyPersonnelImpl.setGroupId(getGroupId());
		accCerBodyPersonnelImpl.setCompanyId(getCompanyId());
		accCerBodyPersonnelImpl.setUserId(getUserId());
		accCerBodyPersonnelImpl.setUserName(getUserName());
		accCerBodyPersonnelImpl.setCreateDate(getCreateDate());
		accCerBodyPersonnelImpl.setModifiedDate(getModifiedDate());
		accCerBodyPersonnelImpl.setInternalStaffSize(getInternalStaffSize());
		accCerBodyPersonnelImpl.setAuditorsNum(getAuditorsNum());
		accCerBodyPersonnelImpl.setContractedPerNum(getContractedPerNum());
		accCerBodyPersonnelImpl.setBodyOutsource(getBodyOutsource());
		accCerBodyPersonnelImpl.setDescSecurity(getDescSecurity());
		accCerBodyPersonnelImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accCerBodyPersonnelImpl.resetOriginalValues();

		return accCerBodyPersonnelImpl;
	}

	@Override
	public AccCerBodyPersonnel cloneWithOriginalValues() {
		AccCerBodyPersonnelImpl accCerBodyPersonnelImpl =
			new AccCerBodyPersonnelImpl();

		accCerBodyPersonnelImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accCerBodyPersonnelImpl.setAccCerBodyPersonnelId(
			this.<Long>getColumnOriginalValue("accCerBodyPersonnelId"));
		accCerBodyPersonnelImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accCerBodyPersonnelImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accCerBodyPersonnelImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accCerBodyPersonnelImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accCerBodyPersonnelImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accCerBodyPersonnelImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accCerBodyPersonnelImpl.setInternalStaffSize(
			this.<String>getColumnOriginalValue("internalStaffSize"));
		accCerBodyPersonnelImpl.setAuditorsNum(
			this.<String>getColumnOriginalValue("auditorsNum"));
		accCerBodyPersonnelImpl.setContractedPerNum(
			this.<String>getColumnOriginalValue("contractedPerNum"));
		accCerBodyPersonnelImpl.setBodyOutsource(
			this.<String>getColumnOriginalValue("bodyOutsource"));
		accCerBodyPersonnelImpl.setDescSecurity(
			this.<String>getColumnOriginalValue("descSecurity"));
		accCerBodyPersonnelImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accCerBodyPersonnelImpl;
	}

	@Override
	public int compareTo(AccCerBodyPersonnel accCerBodyPersonnel) {
		long primaryKey = accCerBodyPersonnel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccCerBodyPersonnel)) {
			return false;
		}

		AccCerBodyPersonnel accCerBodyPersonnel = (AccCerBodyPersonnel)object;

		long primaryKey = accCerBodyPersonnel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccCerBodyPersonnel> toCacheModel() {
		AccCerBodyPersonnelCacheModel accCerBodyPersonnelCacheModel =
			new AccCerBodyPersonnelCacheModel();

		accCerBodyPersonnelCacheModel.uuid = getUuid();

		String uuid = accCerBodyPersonnelCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accCerBodyPersonnelCacheModel.uuid = null;
		}

		accCerBodyPersonnelCacheModel.accCerBodyPersonnelId =
			getAccCerBodyPersonnelId();

		accCerBodyPersonnelCacheModel.groupId = getGroupId();

		accCerBodyPersonnelCacheModel.companyId = getCompanyId();

		accCerBodyPersonnelCacheModel.userId = getUserId();

		accCerBodyPersonnelCacheModel.userName = getUserName();

		String userName = accCerBodyPersonnelCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accCerBodyPersonnelCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accCerBodyPersonnelCacheModel.createDate = createDate.getTime();
		}
		else {
			accCerBodyPersonnelCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accCerBodyPersonnelCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accCerBodyPersonnelCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accCerBodyPersonnelCacheModel.internalStaffSize =
			getInternalStaffSize();

		String internalStaffSize =
			accCerBodyPersonnelCacheModel.internalStaffSize;

		if ((internalStaffSize != null) && (internalStaffSize.length() == 0)) {
			accCerBodyPersonnelCacheModel.internalStaffSize = null;
		}

		accCerBodyPersonnelCacheModel.auditorsNum = getAuditorsNum();

		String auditorsNum = accCerBodyPersonnelCacheModel.auditorsNum;

		if ((auditorsNum != null) && (auditorsNum.length() == 0)) {
			accCerBodyPersonnelCacheModel.auditorsNum = null;
		}

		accCerBodyPersonnelCacheModel.contractedPerNum = getContractedPerNum();

		String contractedPerNum =
			accCerBodyPersonnelCacheModel.contractedPerNum;

		if ((contractedPerNum != null) && (contractedPerNum.length() == 0)) {
			accCerBodyPersonnelCacheModel.contractedPerNum = null;
		}

		accCerBodyPersonnelCacheModel.bodyOutsource = getBodyOutsource();

		String bodyOutsource = accCerBodyPersonnelCacheModel.bodyOutsource;

		if ((bodyOutsource != null) && (bodyOutsource.length() == 0)) {
			accCerBodyPersonnelCacheModel.bodyOutsource = null;
		}

		accCerBodyPersonnelCacheModel.descSecurity = getDescSecurity();

		String descSecurity = accCerBodyPersonnelCacheModel.descSecurity;

		if ((descSecurity != null) && (descSecurity.length() == 0)) {
			accCerBodyPersonnelCacheModel.descSecurity = null;
		}

		accCerBodyPersonnelCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accCerBodyPersonnelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccCerBodyPersonnel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccCerBodyPersonnel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccCerBodyPersonnel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccCerBodyPersonnel)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccCerBodyPersonnel>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccCerBodyPersonnel.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accCerBodyPersonnelId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _internalStaffSize;
	private String _auditorsNum;
	private String _contractedPerNum;
	private String _bodyOutsource;
	private String _descSecurity;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccCerBodyPersonnel, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccCerBodyPersonnel)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accCerBodyPersonnelId", _accCerBodyPersonnelId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("internalStaffSize", _internalStaffSize);
		_columnOriginalValues.put("auditorsNum", _auditorsNum);
		_columnOriginalValues.put("contractedPerNum", _contractedPerNum);
		_columnOriginalValues.put("bodyOutsource", _bodyOutsource);
		_columnOriginalValues.put("descSecurity", _descSecurity);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accCerBodyPersonnelId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("internalStaffSize", 256L);

		columnBitmasks.put("auditorsNum", 512L);

		columnBitmasks.put("contractedPerNum", 1024L);

		columnBitmasks.put("bodyOutsource", 2048L);

		columnBitmasks.put("descSecurity", 4096L);

		columnBitmasks.put("janaacApplicationId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccCerBodyPersonnel _escapedModel;

}