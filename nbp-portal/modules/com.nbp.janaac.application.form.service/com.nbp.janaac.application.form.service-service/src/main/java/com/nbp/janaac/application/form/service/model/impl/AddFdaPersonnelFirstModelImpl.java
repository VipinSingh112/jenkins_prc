/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AddFdaPersonnelFirst;
import com.nbp.janaac.application.form.service.model.AddFdaPersonnelFirstModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AddFdaPersonnelFirst service. Represents a row in the &quot;nbp_janaac_add_fda_per_first&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AddFdaPersonnelFirstModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddFdaPersonnelFirstImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddFdaPersonnelFirstImpl
 * @generated
 */
@JSON(strict = true)
public class AddFdaPersonnelFirstModelImpl
	extends BaseModelImpl<AddFdaPersonnelFirst>
	implements AddFdaPersonnelFirstModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a add fda personnel first model instance should use the <code>AddFdaPersonnelFirst</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_add_fda_per_first";

	public static final Object[][] TABLE_COLUMNS = {
		{"addFdaPersonnelFirstId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"nameOfStaff", Types.VARCHAR},
		{"jobTitle", Types.VARCHAR}, {"majorResponsibilites", Types.VARCHAR},
		{"specificFunctions", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}, {"counter", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("addFdaPersonnelFirstId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nameOfStaff", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("majorResponsibilites", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificFunctions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_add_fda_per_first (addFdaPersonnelFirstId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nameOfStaff VARCHAR(75) null,jobTitle VARCHAR(75) null,majorResponsibilites VARCHAR(75) null,specificFunctions VARCHAR(75) null,janaacApplicationId LONG,counter VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_add_fda_per_first";

	public static final String ORDER_BY_JPQL =
		" ORDER BY addFdaPersonnelFirst.addFdaPersonnelFirstId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_add_fda_per_first.addFdaPersonnelFirstId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDFDAPERSONNELFIRSTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AddFdaPersonnelFirstModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addFdaPersonnelFirstId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddFdaPersonnelFirstId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addFdaPersonnelFirstId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AddFdaPersonnelFirst.class;
	}

	@Override
	public String getModelClassName() {
		return AddFdaPersonnelFirst.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AddFdaPersonnelFirst, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AddFdaPersonnelFirst, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddFdaPersonnelFirst, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AddFdaPersonnelFirst)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AddFdaPersonnelFirst, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AddFdaPersonnelFirst, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AddFdaPersonnelFirst)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AddFdaPersonnelFirst, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AddFdaPersonnelFirst, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AddFdaPersonnelFirst, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AddFdaPersonnelFirst, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AddFdaPersonnelFirst, Object>>();

			attributeGetterFunctions.put(
				"addFdaPersonnelFirstId",
				AddFdaPersonnelFirst::getAddFdaPersonnelFirstId);
			attributeGetterFunctions.put(
				"groupId", AddFdaPersonnelFirst::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AddFdaPersonnelFirst::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AddFdaPersonnelFirst::getUserId);
			attributeGetterFunctions.put(
				"userName", AddFdaPersonnelFirst::getUserName);
			attributeGetterFunctions.put(
				"createDate", AddFdaPersonnelFirst::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AddFdaPersonnelFirst::getModifiedDate);
			attributeGetterFunctions.put(
				"nameOfStaff", AddFdaPersonnelFirst::getNameOfStaff);
			attributeGetterFunctions.put(
				"jobTitle", AddFdaPersonnelFirst::getJobTitle);
			attributeGetterFunctions.put(
				"majorResponsibilites",
				AddFdaPersonnelFirst::getMajorResponsibilites);
			attributeGetterFunctions.put(
				"specificFunctions",
				AddFdaPersonnelFirst::getSpecificFunctions);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AddFdaPersonnelFirst::getJanaacApplicationId);
			attributeGetterFunctions.put(
				"counter", AddFdaPersonnelFirst::getCounter);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AddFdaPersonnelFirst, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AddFdaPersonnelFirst, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AddFdaPersonnelFirst, ?>>();

			attributeSetterBiConsumers.put(
				"addFdaPersonnelFirstId",
				(BiConsumer<AddFdaPersonnelFirst, Long>)
					AddFdaPersonnelFirst::setAddFdaPersonnelFirstId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AddFdaPersonnelFirst, Long>)
					AddFdaPersonnelFirst::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AddFdaPersonnelFirst, Long>)
					AddFdaPersonnelFirst::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AddFdaPersonnelFirst, Long>)
					AddFdaPersonnelFirst::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AddFdaPersonnelFirst, String>)
					AddFdaPersonnelFirst::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AddFdaPersonnelFirst, Date>)
					AddFdaPersonnelFirst::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AddFdaPersonnelFirst, Date>)
					AddFdaPersonnelFirst::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nameOfStaff",
				(BiConsumer<AddFdaPersonnelFirst, String>)
					AddFdaPersonnelFirst::setNameOfStaff);
			attributeSetterBiConsumers.put(
				"jobTitle",
				(BiConsumer<AddFdaPersonnelFirst, String>)
					AddFdaPersonnelFirst::setJobTitle);
			attributeSetterBiConsumers.put(
				"majorResponsibilites",
				(BiConsumer<AddFdaPersonnelFirst, String>)
					AddFdaPersonnelFirst::setMajorResponsibilites);
			attributeSetterBiConsumers.put(
				"specificFunctions",
				(BiConsumer<AddFdaPersonnelFirst, String>)
					AddFdaPersonnelFirst::setSpecificFunctions);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AddFdaPersonnelFirst, Long>)
					AddFdaPersonnelFirst::setJanaacApplicationId);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<AddFdaPersonnelFirst, String>)
					AddFdaPersonnelFirst::setCounter);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAddFdaPersonnelFirstId() {
		return _addFdaPersonnelFirstId;
	}

	@Override
	public void setAddFdaPersonnelFirstId(long addFdaPersonnelFirstId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addFdaPersonnelFirstId = addFdaPersonnelFirstId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNameOfStaff() {
		if (_nameOfStaff == null) {
			return "";
		}
		else {
			return _nameOfStaff;
		}
	}

	@Override
	public void setNameOfStaff(String nameOfStaff) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfStaff = nameOfStaff;
	}

	@JSON
	@Override
	public String getJobTitle() {
		if (_jobTitle == null) {
			return "";
		}
		else {
			return _jobTitle;
		}
	}

	@Override
	public void setJobTitle(String jobTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobTitle = jobTitle;
	}

	@JSON
	@Override
	public String getMajorResponsibilites() {
		if (_majorResponsibilites == null) {
			return "";
		}
		else {
			return _majorResponsibilites;
		}
	}

	@Override
	public void setMajorResponsibilites(String majorResponsibilites) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_majorResponsibilites = majorResponsibilites;
	}

	@JSON
	@Override
	public String getSpecificFunctions() {
		if (_specificFunctions == null) {
			return "";
		}
		else {
			return _specificFunctions;
		}
	}

	@Override
	public void setSpecificFunctions(String specificFunctions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificFunctions = specificFunctions;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AddFdaPersonnelFirst.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AddFdaPersonnelFirst toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AddFdaPersonnelFirst>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddFdaPersonnelFirstImpl addFdaPersonnelFirstImpl =
			new AddFdaPersonnelFirstImpl();

		addFdaPersonnelFirstImpl.setAddFdaPersonnelFirstId(
			getAddFdaPersonnelFirstId());
		addFdaPersonnelFirstImpl.setGroupId(getGroupId());
		addFdaPersonnelFirstImpl.setCompanyId(getCompanyId());
		addFdaPersonnelFirstImpl.setUserId(getUserId());
		addFdaPersonnelFirstImpl.setUserName(getUserName());
		addFdaPersonnelFirstImpl.setCreateDate(getCreateDate());
		addFdaPersonnelFirstImpl.setModifiedDate(getModifiedDate());
		addFdaPersonnelFirstImpl.setNameOfStaff(getNameOfStaff());
		addFdaPersonnelFirstImpl.setJobTitle(getJobTitle());
		addFdaPersonnelFirstImpl.setMajorResponsibilites(
			getMajorResponsibilites());
		addFdaPersonnelFirstImpl.setSpecificFunctions(getSpecificFunctions());
		addFdaPersonnelFirstImpl.setJanaacApplicationId(
			getJanaacApplicationId());
		addFdaPersonnelFirstImpl.setCounter(getCounter());

		addFdaPersonnelFirstImpl.resetOriginalValues();

		return addFdaPersonnelFirstImpl;
	}

	@Override
	public AddFdaPersonnelFirst cloneWithOriginalValues() {
		AddFdaPersonnelFirstImpl addFdaPersonnelFirstImpl =
			new AddFdaPersonnelFirstImpl();

		addFdaPersonnelFirstImpl.setAddFdaPersonnelFirstId(
			this.<Long>getColumnOriginalValue("addFdaPersonnelFirstId"));
		addFdaPersonnelFirstImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		addFdaPersonnelFirstImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		addFdaPersonnelFirstImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		addFdaPersonnelFirstImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		addFdaPersonnelFirstImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		addFdaPersonnelFirstImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		addFdaPersonnelFirstImpl.setNameOfStaff(
			this.<String>getColumnOriginalValue("nameOfStaff"));
		addFdaPersonnelFirstImpl.setJobTitle(
			this.<String>getColumnOriginalValue("jobTitle"));
		addFdaPersonnelFirstImpl.setMajorResponsibilites(
			this.<String>getColumnOriginalValue("majorResponsibilites"));
		addFdaPersonnelFirstImpl.setSpecificFunctions(
			this.<String>getColumnOriginalValue("specificFunctions"));
		addFdaPersonnelFirstImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
		addFdaPersonnelFirstImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));

		return addFdaPersonnelFirstImpl;
	}

	@Override
	public int compareTo(AddFdaPersonnelFirst addFdaPersonnelFirst) {
		long primaryKey = addFdaPersonnelFirst.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AddFdaPersonnelFirst)) {
			return false;
		}

		AddFdaPersonnelFirst addFdaPersonnelFirst =
			(AddFdaPersonnelFirst)object;

		long primaryKey = addFdaPersonnelFirst.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AddFdaPersonnelFirst> toCacheModel() {
		AddFdaPersonnelFirstCacheModel addFdaPersonnelFirstCacheModel =
			new AddFdaPersonnelFirstCacheModel();

		addFdaPersonnelFirstCacheModel.addFdaPersonnelFirstId =
			getAddFdaPersonnelFirstId();

		addFdaPersonnelFirstCacheModel.groupId = getGroupId();

		addFdaPersonnelFirstCacheModel.companyId = getCompanyId();

		addFdaPersonnelFirstCacheModel.userId = getUserId();

		addFdaPersonnelFirstCacheModel.userName = getUserName();

		String userName = addFdaPersonnelFirstCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			addFdaPersonnelFirstCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			addFdaPersonnelFirstCacheModel.createDate = createDate.getTime();
		}
		else {
			addFdaPersonnelFirstCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			addFdaPersonnelFirstCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			addFdaPersonnelFirstCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		addFdaPersonnelFirstCacheModel.nameOfStaff = getNameOfStaff();

		String nameOfStaff = addFdaPersonnelFirstCacheModel.nameOfStaff;

		if ((nameOfStaff != null) && (nameOfStaff.length() == 0)) {
			addFdaPersonnelFirstCacheModel.nameOfStaff = null;
		}

		addFdaPersonnelFirstCacheModel.jobTitle = getJobTitle();

		String jobTitle = addFdaPersonnelFirstCacheModel.jobTitle;

		if ((jobTitle != null) && (jobTitle.length() == 0)) {
			addFdaPersonnelFirstCacheModel.jobTitle = null;
		}

		addFdaPersonnelFirstCacheModel.majorResponsibilites =
			getMajorResponsibilites();

		String majorResponsibilites =
			addFdaPersonnelFirstCacheModel.majorResponsibilites;

		if ((majorResponsibilites != null) &&
			(majorResponsibilites.length() == 0)) {

			addFdaPersonnelFirstCacheModel.majorResponsibilites = null;
		}

		addFdaPersonnelFirstCacheModel.specificFunctions =
			getSpecificFunctions();

		String specificFunctions =
			addFdaPersonnelFirstCacheModel.specificFunctions;

		if ((specificFunctions != null) && (specificFunctions.length() == 0)) {
			addFdaPersonnelFirstCacheModel.specificFunctions = null;
		}

		addFdaPersonnelFirstCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		addFdaPersonnelFirstCacheModel.counter = getCounter();

		String counter = addFdaPersonnelFirstCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			addFdaPersonnelFirstCacheModel.counter = null;
		}

		return addFdaPersonnelFirstCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AddFdaPersonnelFirst, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AddFdaPersonnelFirst, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddFdaPersonnelFirst, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AddFdaPersonnelFirst)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AddFdaPersonnelFirst>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AddFdaPersonnelFirst.class, ModelWrapper.class);

	}

	private long _addFdaPersonnelFirstId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nameOfStaff;
	private String _jobTitle;
	private String _majorResponsibilites;
	private String _specificFunctions;
	private long _janaacApplicationId;
	private String _counter;

	public <T> T getColumnValue(String columnName) {
		Function<AddFdaPersonnelFirst, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AddFdaPersonnelFirst)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"addFdaPersonnelFirstId", _addFdaPersonnelFirstId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nameOfStaff", _nameOfStaff);
		_columnOriginalValues.put("jobTitle", _jobTitle);
		_columnOriginalValues.put(
			"majorResponsibilites", _majorResponsibilites);
		_columnOriginalValues.put("specificFunctions", _specificFunctions);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
		_columnOriginalValues.put("counter", _counter);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("addFdaPersonnelFirstId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("nameOfStaff", 128L);

		columnBitmasks.put("jobTitle", 256L);

		columnBitmasks.put("majorResponsibilites", 512L);

		columnBitmasks.put("specificFunctions", 1024L);

		columnBitmasks.put("janaacApplicationId", 2048L);

		columnBitmasks.put("counter", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AddFdaPersonnelFirst _escapedModel;

}