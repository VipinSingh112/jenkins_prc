/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccMediLabActivitiesDesc;
import com.nbp.janaac.application.form.service.model.AccMediLabActivitiesDescModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccMediLabActivitiesDesc service. Represents a row in the &quot;nbp_janaac_acc_med_activity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccMediLabActivitiesDescModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccMediLabActivitiesDescImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccMediLabActivitiesDescImpl
 * @generated
 */
@JSON(strict = true)
public class AccMediLabActivitiesDescModelImpl
	extends BaseModelImpl<AccMediLabActivitiesDesc>
	implements AccMediLabActivitiesDescModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc medi lab activities desc model instance should use the <code>AccMediLabActivitiesDesc</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_med_activity";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accMediLabActivitiesDescId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"activitiesDescription", Types.VARCHAR}, {"shiftWork", Types.VARCHAR},
		{"specimenNo", Types.VARCHAR}, {"specimenLocation", Types.VARCHAR},
		{"requestedPOCT", Types.VARCHAR},
		{"requestedPOCTLocation", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accMediLabActivitiesDescId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("activitiesDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shiftWork", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specimenNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specimenLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestedPOCT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestedPOCTLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_med_activity (uuid_ VARCHAR(75) null,accMediLabActivitiesDescId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,activitiesDescription VARCHAR(75) null,shiftWork VARCHAR(75) null,specimenNo VARCHAR(75) null,specimenLocation VARCHAR(75) null,requestedPOCT VARCHAR(75) null,requestedPOCTLocation VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_med_activity";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accMediLabActivitiesDesc.accMediLabActivitiesDescId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_med_activity.accMediLabActivitiesDescId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCMEDILABACTIVITIESDESCID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccMediLabActivitiesDescModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accMediLabActivitiesDescId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccMediLabActivitiesDescId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accMediLabActivitiesDescId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccMediLabActivitiesDesc.class;
	}

	@Override
	public String getModelClassName() {
		return AccMediLabActivitiesDesc.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccMediLabActivitiesDesc, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccMediLabActivitiesDesc, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabActivitiesDesc, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccMediLabActivitiesDesc)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccMediLabActivitiesDesc, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccMediLabActivitiesDesc, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccMediLabActivitiesDesc)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccMediLabActivitiesDesc, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccMediLabActivitiesDesc, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccMediLabActivitiesDesc, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccMediLabActivitiesDesc, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccMediLabActivitiesDesc, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccMediLabActivitiesDesc::getUuid);
			attributeGetterFunctions.put(
				"accMediLabActivitiesDescId",
				AccMediLabActivitiesDesc::getAccMediLabActivitiesDescId);
			attributeGetterFunctions.put(
				"groupId", AccMediLabActivitiesDesc::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccMediLabActivitiesDesc::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccMediLabActivitiesDesc::getUserId);
			attributeGetterFunctions.put(
				"userName", AccMediLabActivitiesDesc::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccMediLabActivitiesDesc::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccMediLabActivitiesDesc::getModifiedDate);
			attributeGetterFunctions.put(
				"activitiesDescription",
				AccMediLabActivitiesDesc::getActivitiesDescription);
			attributeGetterFunctions.put(
				"shiftWork", AccMediLabActivitiesDesc::getShiftWork);
			attributeGetterFunctions.put(
				"specimenNo", AccMediLabActivitiesDesc::getSpecimenNo);
			attributeGetterFunctions.put(
				"specimenLocation",
				AccMediLabActivitiesDesc::getSpecimenLocation);
			attributeGetterFunctions.put(
				"requestedPOCT", AccMediLabActivitiesDesc::getRequestedPOCT);
			attributeGetterFunctions.put(
				"requestedPOCTLocation",
				AccMediLabActivitiesDesc::getRequestedPOCTLocation);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccMediLabActivitiesDesc::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccMediLabActivitiesDesc, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccMediLabActivitiesDesc, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccMediLabActivitiesDesc, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccMediLabActivitiesDesc, String>)
					AccMediLabActivitiesDesc::setUuid);
			attributeSetterBiConsumers.put(
				"accMediLabActivitiesDescId",
				(BiConsumer<AccMediLabActivitiesDesc, Long>)
					AccMediLabActivitiesDesc::setAccMediLabActivitiesDescId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccMediLabActivitiesDesc, Long>)
					AccMediLabActivitiesDesc::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccMediLabActivitiesDesc, Long>)
					AccMediLabActivitiesDesc::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccMediLabActivitiesDesc, Long>)
					AccMediLabActivitiesDesc::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccMediLabActivitiesDesc, String>)
					AccMediLabActivitiesDesc::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccMediLabActivitiesDesc, Date>)
					AccMediLabActivitiesDesc::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccMediLabActivitiesDesc, Date>)
					AccMediLabActivitiesDesc::setModifiedDate);
			attributeSetterBiConsumers.put(
				"activitiesDescription",
				(BiConsumer<AccMediLabActivitiesDesc, String>)
					AccMediLabActivitiesDesc::setActivitiesDescription);
			attributeSetterBiConsumers.put(
				"shiftWork",
				(BiConsumer<AccMediLabActivitiesDesc, String>)
					AccMediLabActivitiesDesc::setShiftWork);
			attributeSetterBiConsumers.put(
				"specimenNo",
				(BiConsumer<AccMediLabActivitiesDesc, String>)
					AccMediLabActivitiesDesc::setSpecimenNo);
			attributeSetterBiConsumers.put(
				"specimenLocation",
				(BiConsumer<AccMediLabActivitiesDesc, String>)
					AccMediLabActivitiesDesc::setSpecimenLocation);
			attributeSetterBiConsumers.put(
				"requestedPOCT",
				(BiConsumer<AccMediLabActivitiesDesc, String>)
					AccMediLabActivitiesDesc::setRequestedPOCT);
			attributeSetterBiConsumers.put(
				"requestedPOCTLocation",
				(BiConsumer<AccMediLabActivitiesDesc, String>)
					AccMediLabActivitiesDesc::setRequestedPOCTLocation);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccMediLabActivitiesDesc, Long>)
					AccMediLabActivitiesDesc::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccMediLabActivitiesDescId() {
		return _accMediLabActivitiesDescId;
	}

	@Override
	public void setAccMediLabActivitiesDescId(long accMediLabActivitiesDescId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accMediLabActivitiesDescId = accMediLabActivitiesDescId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getActivitiesDescription() {
		if (_activitiesDescription == null) {
			return "";
		}
		else {
			return _activitiesDescription;
		}
	}

	@Override
	public void setActivitiesDescription(String activitiesDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activitiesDescription = activitiesDescription;
	}

	@JSON
	@Override
	public String getShiftWork() {
		if (_shiftWork == null) {
			return "";
		}
		else {
			return _shiftWork;
		}
	}

	@Override
	public void setShiftWork(String shiftWork) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shiftWork = shiftWork;
	}

	@JSON
	@Override
	public String getSpecimenNo() {
		if (_specimenNo == null) {
			return "";
		}
		else {
			return _specimenNo;
		}
	}

	@Override
	public void setSpecimenNo(String specimenNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specimenNo = specimenNo;
	}

	@JSON
	@Override
	public String getSpecimenLocation() {
		if (_specimenLocation == null) {
			return "";
		}
		else {
			return _specimenLocation;
		}
	}

	@Override
	public void setSpecimenLocation(String specimenLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specimenLocation = specimenLocation;
	}

	@JSON
	@Override
	public String getRequestedPOCT() {
		if (_requestedPOCT == null) {
			return "";
		}
		else {
			return _requestedPOCT;
		}
	}

	@Override
	public void setRequestedPOCT(String requestedPOCT) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestedPOCT = requestedPOCT;
	}

	@JSON
	@Override
	public String getRequestedPOCTLocation() {
		if (_requestedPOCTLocation == null) {
			return "";
		}
		else {
			return _requestedPOCTLocation;
		}
	}

	@Override
	public void setRequestedPOCTLocation(String requestedPOCTLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestedPOCTLocation = requestedPOCTLocation;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				AccMediLabActivitiesDesc.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccMediLabActivitiesDesc.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccMediLabActivitiesDesc toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccMediLabActivitiesDesc>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccMediLabActivitiesDescImpl accMediLabActivitiesDescImpl =
			new AccMediLabActivitiesDescImpl();

		accMediLabActivitiesDescImpl.setUuid(getUuid());
		accMediLabActivitiesDescImpl.setAccMediLabActivitiesDescId(
			getAccMediLabActivitiesDescId());
		accMediLabActivitiesDescImpl.setGroupId(getGroupId());
		accMediLabActivitiesDescImpl.setCompanyId(getCompanyId());
		accMediLabActivitiesDescImpl.setUserId(getUserId());
		accMediLabActivitiesDescImpl.setUserName(getUserName());
		accMediLabActivitiesDescImpl.setCreateDate(getCreateDate());
		accMediLabActivitiesDescImpl.setModifiedDate(getModifiedDate());
		accMediLabActivitiesDescImpl.setActivitiesDescription(
			getActivitiesDescription());
		accMediLabActivitiesDescImpl.setShiftWork(getShiftWork());
		accMediLabActivitiesDescImpl.setSpecimenNo(getSpecimenNo());
		accMediLabActivitiesDescImpl.setSpecimenLocation(getSpecimenLocation());
		accMediLabActivitiesDescImpl.setRequestedPOCT(getRequestedPOCT());
		accMediLabActivitiesDescImpl.setRequestedPOCTLocation(
			getRequestedPOCTLocation());
		accMediLabActivitiesDescImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accMediLabActivitiesDescImpl.resetOriginalValues();

		return accMediLabActivitiesDescImpl;
	}

	@Override
	public AccMediLabActivitiesDesc cloneWithOriginalValues() {
		AccMediLabActivitiesDescImpl accMediLabActivitiesDescImpl =
			new AccMediLabActivitiesDescImpl();

		accMediLabActivitiesDescImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accMediLabActivitiesDescImpl.setAccMediLabActivitiesDescId(
			this.<Long>getColumnOriginalValue("accMediLabActivitiesDescId"));
		accMediLabActivitiesDescImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accMediLabActivitiesDescImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accMediLabActivitiesDescImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accMediLabActivitiesDescImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accMediLabActivitiesDescImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accMediLabActivitiesDescImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accMediLabActivitiesDescImpl.setActivitiesDescription(
			this.<String>getColumnOriginalValue("activitiesDescription"));
		accMediLabActivitiesDescImpl.setShiftWork(
			this.<String>getColumnOriginalValue("shiftWork"));
		accMediLabActivitiesDescImpl.setSpecimenNo(
			this.<String>getColumnOriginalValue("specimenNo"));
		accMediLabActivitiesDescImpl.setSpecimenLocation(
			this.<String>getColumnOriginalValue("specimenLocation"));
		accMediLabActivitiesDescImpl.setRequestedPOCT(
			this.<String>getColumnOriginalValue("requestedPOCT"));
		accMediLabActivitiesDescImpl.setRequestedPOCTLocation(
			this.<String>getColumnOriginalValue("requestedPOCTLocation"));
		accMediLabActivitiesDescImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accMediLabActivitiesDescImpl;
	}

	@Override
	public int compareTo(AccMediLabActivitiesDesc accMediLabActivitiesDesc) {
		long primaryKey = accMediLabActivitiesDesc.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccMediLabActivitiesDesc)) {
			return false;
		}

		AccMediLabActivitiesDesc accMediLabActivitiesDesc =
			(AccMediLabActivitiesDesc)object;

		long primaryKey = accMediLabActivitiesDesc.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccMediLabActivitiesDesc> toCacheModel() {
		AccMediLabActivitiesDescCacheModel accMediLabActivitiesDescCacheModel =
			new AccMediLabActivitiesDescCacheModel();

		accMediLabActivitiesDescCacheModel.uuid = getUuid();

		String uuid = accMediLabActivitiesDescCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accMediLabActivitiesDescCacheModel.uuid = null;
		}

		accMediLabActivitiesDescCacheModel.accMediLabActivitiesDescId =
			getAccMediLabActivitiesDescId();

		accMediLabActivitiesDescCacheModel.groupId = getGroupId();

		accMediLabActivitiesDescCacheModel.companyId = getCompanyId();

		accMediLabActivitiesDescCacheModel.userId = getUserId();

		accMediLabActivitiesDescCacheModel.userName = getUserName();

		String userName = accMediLabActivitiesDescCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accMediLabActivitiesDescCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accMediLabActivitiesDescCacheModel.createDate =
				createDate.getTime();
		}
		else {
			accMediLabActivitiesDescCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accMediLabActivitiesDescCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accMediLabActivitiesDescCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accMediLabActivitiesDescCacheModel.activitiesDescription =
			getActivitiesDescription();

		String activitiesDescription =
			accMediLabActivitiesDescCacheModel.activitiesDescription;

		if ((activitiesDescription != null) &&
			(activitiesDescription.length() == 0)) {

			accMediLabActivitiesDescCacheModel.activitiesDescription = null;
		}

		accMediLabActivitiesDescCacheModel.shiftWork = getShiftWork();

		String shiftWork = accMediLabActivitiesDescCacheModel.shiftWork;

		if ((shiftWork != null) && (shiftWork.length() == 0)) {
			accMediLabActivitiesDescCacheModel.shiftWork = null;
		}

		accMediLabActivitiesDescCacheModel.specimenNo = getSpecimenNo();

		String specimenNo = accMediLabActivitiesDescCacheModel.specimenNo;

		if ((specimenNo != null) && (specimenNo.length() == 0)) {
			accMediLabActivitiesDescCacheModel.specimenNo = null;
		}

		accMediLabActivitiesDescCacheModel.specimenLocation =
			getSpecimenLocation();

		String specimenLocation =
			accMediLabActivitiesDescCacheModel.specimenLocation;

		if ((specimenLocation != null) && (specimenLocation.length() == 0)) {
			accMediLabActivitiesDescCacheModel.specimenLocation = null;
		}

		accMediLabActivitiesDescCacheModel.requestedPOCT = getRequestedPOCT();

		String requestedPOCT = accMediLabActivitiesDescCacheModel.requestedPOCT;

		if ((requestedPOCT != null) && (requestedPOCT.length() == 0)) {
			accMediLabActivitiesDescCacheModel.requestedPOCT = null;
		}

		accMediLabActivitiesDescCacheModel.requestedPOCTLocation =
			getRequestedPOCTLocation();

		String requestedPOCTLocation =
			accMediLabActivitiesDescCacheModel.requestedPOCTLocation;

		if ((requestedPOCTLocation != null) &&
			(requestedPOCTLocation.length() == 0)) {

			accMediLabActivitiesDescCacheModel.requestedPOCTLocation = null;
		}

		accMediLabActivitiesDescCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accMediLabActivitiesDescCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccMediLabActivitiesDesc, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccMediLabActivitiesDesc, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabActivitiesDesc, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccMediLabActivitiesDesc)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AccMediLabActivitiesDesc>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AccMediLabActivitiesDesc.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accMediLabActivitiesDescId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _activitiesDescription;
	private String _shiftWork;
	private String _specimenNo;
	private String _specimenLocation;
	private String _requestedPOCT;
	private String _requestedPOCTLocation;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccMediLabActivitiesDesc, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccMediLabActivitiesDesc)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accMediLabActivitiesDescId", _accMediLabActivitiesDescId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"activitiesDescription", _activitiesDescription);
		_columnOriginalValues.put("shiftWork", _shiftWork);
		_columnOriginalValues.put("specimenNo", _specimenNo);
		_columnOriginalValues.put("specimenLocation", _specimenLocation);
		_columnOriginalValues.put("requestedPOCT", _requestedPOCT);
		_columnOriginalValues.put(
			"requestedPOCTLocation", _requestedPOCTLocation);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accMediLabActivitiesDescId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("activitiesDescription", 256L);

		columnBitmasks.put("shiftWork", 512L);

		columnBitmasks.put("specimenNo", 1024L);

		columnBitmasks.put("specimenLocation", 2048L);

		columnBitmasks.put("requestedPOCT", 4096L);

		columnBitmasks.put("requestedPOCTLocation", 8192L);

		columnBitmasks.put("janaacApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccMediLabActivitiesDesc _escapedModel;

}