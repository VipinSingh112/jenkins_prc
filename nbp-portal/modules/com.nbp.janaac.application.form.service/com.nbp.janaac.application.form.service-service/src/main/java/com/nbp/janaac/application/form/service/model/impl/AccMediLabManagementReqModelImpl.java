/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccMediLabManagementReq;
import com.nbp.janaac.application.form.service.model.AccMediLabManagementReqModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccMediLabManagementReq service. Represents a row in the &quot;nbp_janaac_acc_med_manage_req&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccMediLabManagementReqModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccMediLabManagementReqImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccMediLabManagementReqImpl
 * @generated
 */
@JSON(strict = true)
public class AccMediLabManagementReqModelImpl
	extends BaseModelImpl<AccMediLabManagementReq>
	implements AccMediLabManagementReqModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc medi lab management req model instance should use the <code>AccMediLabManagementReq</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_med_manage_req";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accMediLabManagementReqId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"managementEstablished", Types.VARCHAR},
		{"qMRefManagement", Types.VARCHAR}, {"personAware", Types.VARCHAR},
		{"qMRefPerson", Types.VARCHAR}, {"policiesAcknowledged", Types.VARCHAR},
		{"qMRefPolicies", Types.VARCHAR}, {"controlledDocument", Types.VARCHAR},
		{"qMRefControlDoc", Types.VARCHAR},
		{"laboratoryEstablished", Types.VARCHAR},
		{"qMReflabEstab", Types.VARCHAR}, {"identifiedRisks", Types.VARCHAR},
		{"qMRefRisks", Types.VARCHAR}, {"havePersonnel", Types.VARCHAR},
		{"qMRefPersonnel", Types.VARCHAR},
		{"authorizePersonnel", Types.VARCHAR},
		{"qMRefAuthorize", Types.VARCHAR},
		{"labControlDocsFulfilment", Types.VARCHAR},
		{"otherRefFulfil", Types.VARCHAR},
		{"legibleRecordsFulfil", Types.VARCHAR},
		{"otherRefLegibleRec", Types.VARCHAR},
		{"proceduresInPlace", Types.VARCHAR},
		{"otherRefProcedure", Types.VARCHAR},
		{"communicatedRequirement", Types.VARCHAR},
		{"otherRefRequirement", Types.VARCHAR},
		{"procedureForSelection", Types.VARCHAR},
		{"otherRefSelection", Types.VARCHAR},
		{"arrangementInPlace", Types.VARCHAR},
		{"otherRefArrange", Types.VARCHAR}, {"processInPlace", Types.VARCHAR},
		{"otherRefProcess", Types.VARCHAR},
		{"labOperateProgramme", Types.VARCHAR},
		{"otherRefLabOperate", Types.VARCHAR},
		{"identifyOpportunities", Types.VARCHAR},
		{"otherRefOpportunity", Types.VARCHAR},
		{"demonstrateFulfilment", Types.VARCHAR},
		{"otherRefDemonstrate", Types.VARCHAR},
		{"ensureLabPlan", Types.VARCHAR}, {"otherRefEnsurePlan", Types.VARCHAR},
		{"plannedManageReview", Types.VARCHAR},
		{"otherRefPlanned", Types.VARCHAR},
		{"availablePersonnel", Types.VARCHAR},
		{"manualRefAvailable", Types.VARCHAR},
		{"educationProgramme", Types.VARCHAR},
		{"manualRefEducation", Types.VARCHAR},
		{"ensureAccomodation", Types.VARCHAR},
		{"manualRefAccom", Types.VARCHAR},
		{"processForSelection", Types.VARCHAR},
		{"manualRefSelection", Types.VARCHAR},
		{"verifyReagents", Types.VARCHAR}, {"manualRefReagents", Types.VARCHAR},
		{"docProcedure", Types.VARCHAR}, {"manualRefDocProce", Types.VARCHAR},
		{"useExamMethods", Types.VARCHAR}, {"manualRefExam", Types.VARCHAR},
		{"monitoringValidity", Types.VARCHAR},
		{"manualRefValidity", Types.VARCHAR}, {"validateExam", Types.VARCHAR},
		{"manualRefValidateExam", Types.VARCHAR},
		{"uncertainityReview", Types.VARCHAR},
		{"manualRefUncertainity", Types.VARCHAR},
		{"preventResRelease", Types.VARCHAR},
		{"manualRefPrevent", Types.VARCHAR},
		{"equipmentMaintenance", Types.VARCHAR},
		{"manualRefMaintenance", Types.VARCHAR},
		{"equipCalibration", Types.VARCHAR},
		{"manualRefCalibrat", Types.VARCHAR},
		{"proficencyTesting", Types.VARCHAR},
		{"manualRefProfiTest", Types.VARCHAR},
		{"postExamReliabilty", Types.VARCHAR},
		{"manualRefPostExam", Types.VARCHAR},
		{"reportedAccurately", Types.VARCHAR},
		{"manualRefReported", Types.VARCHAR},
		{"responsiblitySpecified", Types.VARCHAR},
		{"manualRefSpecified", Types.VARCHAR},
		{"ensureAuthorities", Types.VARCHAR},
		{"manualRefAuthorities", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accMediLabManagementReqId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("managementEstablished", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefManagement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personAware", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPerson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("policiesAcknowledged", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("controlledDocument", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefControlDoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("laboratoryEstablished", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMReflabEstab", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("identifiedRisks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefRisks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("havePersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizePersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefAuthorize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labControlDocsFulfilment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefFulfil", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("legibleRecordsFulfil", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefLegibleRec", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proceduresInPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefProcedure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("communicatedRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefRequirement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("procedureForSelection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefSelection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arrangementInPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefArrange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processInPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefProcess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labOperateProgramme", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefLabOperate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("identifyOpportunities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefOpportunity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("demonstrateFulfilment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefDemonstrate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ensureLabPlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefEnsurePlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("plannedManageReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherRefPlanned", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("availablePersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefAvailable", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("educationProgramme", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefEducation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ensureAccomodation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefAccom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processForSelection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefSelection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verifyReagents", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefReagents", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docProcedure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefDocProce", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("useExamMethods", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefExam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("monitoringValidity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefValidity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validateExam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefValidateExam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uncertainityReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefUncertainity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("preventResRelease", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefPrevent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentMaintenance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefMaintenance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipCalibration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefCalibrat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proficencyTesting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefProfiTest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postExamReliabilty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefPostExam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportedAccurately", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefReported", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responsiblitySpecified", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefSpecified", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ensureAuthorities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualRefAuthorities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_med_manage_req (uuid_ VARCHAR(75) null,accMediLabManagementReqId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,managementEstablished VARCHAR(75) null,qMRefManagement VARCHAR(75) null,personAware VARCHAR(75) null,qMRefPerson VARCHAR(75) null,policiesAcknowledged VARCHAR(75) null,qMRefPolicies VARCHAR(75) null,controlledDocument VARCHAR(75) null,qMRefControlDoc VARCHAR(75) null,laboratoryEstablished VARCHAR(75) null,qMReflabEstab VARCHAR(75) null,identifiedRisks VARCHAR(75) null,qMRefRisks VARCHAR(75) null,havePersonnel VARCHAR(75) null,qMRefPersonnel VARCHAR(75) null,authorizePersonnel VARCHAR(75) null,qMRefAuthorize VARCHAR(75) null,labControlDocsFulfilment VARCHAR(75) null,otherRefFulfil VARCHAR(75) null,legibleRecordsFulfil VARCHAR(75) null,otherRefLegibleRec VARCHAR(75) null,proceduresInPlace VARCHAR(75) null,otherRefProcedure VARCHAR(75) null,communicatedRequirement VARCHAR(75) null,otherRefRequirement VARCHAR(75) null,procedureForSelection VARCHAR(75) null,otherRefSelection VARCHAR(75) null,arrangementInPlace VARCHAR(75) null,otherRefArrange VARCHAR(75) null,processInPlace VARCHAR(75) null,otherRefProcess VARCHAR(75) null,labOperateProgramme VARCHAR(75) null,otherRefLabOperate VARCHAR(75) null,identifyOpportunities VARCHAR(75) null,otherRefOpportunity VARCHAR(75) null,demonstrateFulfilment VARCHAR(75) null,otherRefDemonstrate VARCHAR(75) null,ensureLabPlan VARCHAR(75) null,otherRefEnsurePlan VARCHAR(75) null,plannedManageReview VARCHAR(75) null,otherRefPlanned VARCHAR(75) null,availablePersonnel VARCHAR(75) null,manualRefAvailable VARCHAR(75) null,educationProgramme VARCHAR(75) null,manualRefEducation VARCHAR(75) null,ensureAccomodation VARCHAR(75) null,manualRefAccom VARCHAR(75) null,processForSelection VARCHAR(75) null,manualRefSelection VARCHAR(75) null,verifyReagents VARCHAR(75) null,manualRefReagents VARCHAR(75) null,docProcedure VARCHAR(75) null,manualRefDocProce VARCHAR(75) null,useExamMethods VARCHAR(75) null,manualRefExam VARCHAR(75) null,monitoringValidity VARCHAR(75) null,manualRefValidity VARCHAR(75) null,validateExam VARCHAR(75) null,manualRefValidateExam VARCHAR(75) null,uncertainityReview VARCHAR(75) null,manualRefUncertainity VARCHAR(75) null,preventResRelease VARCHAR(75) null,manualRefPrevent VARCHAR(75) null,equipmentMaintenance VARCHAR(75) null,manualRefMaintenance VARCHAR(75) null,equipCalibration VARCHAR(75) null,manualRefCalibrat VARCHAR(75) null,proficencyTesting VARCHAR(75) null,manualRefProfiTest VARCHAR(75) null,postExamReliabilty VARCHAR(75) null,manualRefPostExam VARCHAR(75) null,reportedAccurately VARCHAR(75) null,manualRefReported VARCHAR(75) null,responsiblitySpecified VARCHAR(75) null,manualRefSpecified VARCHAR(75) null,ensureAuthorities VARCHAR(75) null,manualRefAuthorities VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_med_manage_req";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accMediLabManagementReq.accMediLabManagementReqId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_med_manage_req.accMediLabManagementReqId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccMediLabManagementReqModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accMediLabManagementReqId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccMediLabManagementReqId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accMediLabManagementReqId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccMediLabManagementReq.class;
	}

	@Override
	public String getModelClassName() {
		return AccMediLabManagementReq.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccMediLabManagementReq, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccMediLabManagementReq, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabManagementReq, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccMediLabManagementReq)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccMediLabManagementReq, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccMediLabManagementReq, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccMediLabManagementReq)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccMediLabManagementReq, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccMediLabManagementReq, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccMediLabManagementReq, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccMediLabManagementReq, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccMediLabManagementReq, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccMediLabManagementReq::getUuid);
			attributeGetterFunctions.put(
				"accMediLabManagementReqId",
				AccMediLabManagementReq::getAccMediLabManagementReqId);
			attributeGetterFunctions.put(
				"groupId", AccMediLabManagementReq::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccMediLabManagementReq::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccMediLabManagementReq::getUserId);
			attributeGetterFunctions.put(
				"userName", AccMediLabManagementReq::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccMediLabManagementReq::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccMediLabManagementReq::getModifiedDate);
			attributeGetterFunctions.put(
				"managementEstablished",
				AccMediLabManagementReq::getManagementEstablished);
			attributeGetterFunctions.put(
				"qMRefManagement", AccMediLabManagementReq::getQMRefManagement);
			attributeGetterFunctions.put(
				"personAware", AccMediLabManagementReq::getPersonAware);
			attributeGetterFunctions.put(
				"qMRefPerson", AccMediLabManagementReq::getQMRefPerson);
			attributeGetterFunctions.put(
				"policiesAcknowledged",
				AccMediLabManagementReq::getPoliciesAcknowledged);
			attributeGetterFunctions.put(
				"qMRefPolicies", AccMediLabManagementReq::getQMRefPolicies);
			attributeGetterFunctions.put(
				"controlledDocument",
				AccMediLabManagementReq::getControlledDocument);
			attributeGetterFunctions.put(
				"qMRefControlDoc", AccMediLabManagementReq::getQMRefControlDoc);
			attributeGetterFunctions.put(
				"laboratoryEstablished",
				AccMediLabManagementReq::getLaboratoryEstablished);
			attributeGetterFunctions.put(
				"qMReflabEstab", AccMediLabManagementReq::getQMReflabEstab);
			attributeGetterFunctions.put(
				"identifiedRisks", AccMediLabManagementReq::getIdentifiedRisks);
			attributeGetterFunctions.put(
				"qMRefRisks", AccMediLabManagementReq::getQMRefRisks);
			attributeGetterFunctions.put(
				"havePersonnel", AccMediLabManagementReq::getHavePersonnel);
			attributeGetterFunctions.put(
				"qMRefPersonnel", AccMediLabManagementReq::getQMRefPersonnel);
			attributeGetterFunctions.put(
				"authorizePersonnel",
				AccMediLabManagementReq::getAuthorizePersonnel);
			attributeGetterFunctions.put(
				"qMRefAuthorize", AccMediLabManagementReq::getQMRefAuthorize);
			attributeGetterFunctions.put(
				"labControlDocsFulfilment",
				AccMediLabManagementReq::getLabControlDocsFulfilment);
			attributeGetterFunctions.put(
				"otherRefFulfil", AccMediLabManagementReq::getOtherRefFulfil);
			attributeGetterFunctions.put(
				"legibleRecordsFulfil",
				AccMediLabManagementReq::getLegibleRecordsFulfil);
			attributeGetterFunctions.put(
				"otherRefLegibleRec",
				AccMediLabManagementReq::getOtherRefLegibleRec);
			attributeGetterFunctions.put(
				"proceduresInPlace",
				AccMediLabManagementReq::getProceduresInPlace);
			attributeGetterFunctions.put(
				"otherRefProcedure",
				AccMediLabManagementReq::getOtherRefProcedure);
			attributeGetterFunctions.put(
				"communicatedRequirement",
				AccMediLabManagementReq::getCommunicatedRequirement);
			attributeGetterFunctions.put(
				"otherRefRequirement",
				AccMediLabManagementReq::getOtherRefRequirement);
			attributeGetterFunctions.put(
				"procedureForSelection",
				AccMediLabManagementReq::getProcedureForSelection);
			attributeGetterFunctions.put(
				"otherRefSelection",
				AccMediLabManagementReq::getOtherRefSelection);
			attributeGetterFunctions.put(
				"arrangementInPlace",
				AccMediLabManagementReq::getArrangementInPlace);
			attributeGetterFunctions.put(
				"otherRefArrange", AccMediLabManagementReq::getOtherRefArrange);
			attributeGetterFunctions.put(
				"processInPlace", AccMediLabManagementReq::getProcessInPlace);
			attributeGetterFunctions.put(
				"otherRefProcess", AccMediLabManagementReq::getOtherRefProcess);
			attributeGetterFunctions.put(
				"labOperateProgramme",
				AccMediLabManagementReq::getLabOperateProgramme);
			attributeGetterFunctions.put(
				"otherRefLabOperate",
				AccMediLabManagementReq::getOtherRefLabOperate);
			attributeGetterFunctions.put(
				"identifyOpportunities",
				AccMediLabManagementReq::getIdentifyOpportunities);
			attributeGetterFunctions.put(
				"otherRefOpportunity",
				AccMediLabManagementReq::getOtherRefOpportunity);
			attributeGetterFunctions.put(
				"demonstrateFulfilment",
				AccMediLabManagementReq::getDemonstrateFulfilment);
			attributeGetterFunctions.put(
				"otherRefDemonstrate",
				AccMediLabManagementReq::getOtherRefDemonstrate);
			attributeGetterFunctions.put(
				"ensureLabPlan", AccMediLabManagementReq::getEnsureLabPlan);
			attributeGetterFunctions.put(
				"otherRefEnsurePlan",
				AccMediLabManagementReq::getOtherRefEnsurePlan);
			attributeGetterFunctions.put(
				"plannedManageReview",
				AccMediLabManagementReq::getPlannedManageReview);
			attributeGetterFunctions.put(
				"otherRefPlanned", AccMediLabManagementReq::getOtherRefPlanned);
			attributeGetterFunctions.put(
				"availablePersonnel",
				AccMediLabManagementReq::getAvailablePersonnel);
			attributeGetterFunctions.put(
				"manualRefAvailable",
				AccMediLabManagementReq::getManualRefAvailable);
			attributeGetterFunctions.put(
				"educationProgramme",
				AccMediLabManagementReq::getEducationProgramme);
			attributeGetterFunctions.put(
				"manualRefEducation",
				AccMediLabManagementReq::getManualRefEducation);
			attributeGetterFunctions.put(
				"ensureAccomodation",
				AccMediLabManagementReq::getEnsureAccomodation);
			attributeGetterFunctions.put(
				"manualRefAccom", AccMediLabManagementReq::getManualRefAccom);
			attributeGetterFunctions.put(
				"processForSelection",
				AccMediLabManagementReq::getProcessForSelection);
			attributeGetterFunctions.put(
				"manualRefSelection",
				AccMediLabManagementReq::getManualRefSelection);
			attributeGetterFunctions.put(
				"verifyReagents", AccMediLabManagementReq::getVerifyReagents);
			attributeGetterFunctions.put(
				"manualRefReagents",
				AccMediLabManagementReq::getManualRefReagents);
			attributeGetterFunctions.put(
				"docProcedure", AccMediLabManagementReq::getDocProcedure);
			attributeGetterFunctions.put(
				"manualRefDocProce",
				AccMediLabManagementReq::getManualRefDocProce);
			attributeGetterFunctions.put(
				"useExamMethods", AccMediLabManagementReq::getUseExamMethods);
			attributeGetterFunctions.put(
				"manualRefExam", AccMediLabManagementReq::getManualRefExam);
			attributeGetterFunctions.put(
				"monitoringValidity",
				AccMediLabManagementReq::getMonitoringValidity);
			attributeGetterFunctions.put(
				"manualRefValidity",
				AccMediLabManagementReq::getManualRefValidity);
			attributeGetterFunctions.put(
				"validateExam", AccMediLabManagementReq::getValidateExam);
			attributeGetterFunctions.put(
				"manualRefValidateExam",
				AccMediLabManagementReq::getManualRefValidateExam);
			attributeGetterFunctions.put(
				"uncertainityReview",
				AccMediLabManagementReq::getUncertainityReview);
			attributeGetterFunctions.put(
				"manualRefUncertainity",
				AccMediLabManagementReq::getManualRefUncertainity);
			attributeGetterFunctions.put(
				"preventResRelease",
				AccMediLabManagementReq::getPreventResRelease);
			attributeGetterFunctions.put(
				"manualRefPrevent",
				AccMediLabManagementReq::getManualRefPrevent);
			attributeGetterFunctions.put(
				"equipmentMaintenance",
				AccMediLabManagementReq::getEquipmentMaintenance);
			attributeGetterFunctions.put(
				"manualRefMaintenance",
				AccMediLabManagementReq::getManualRefMaintenance);
			attributeGetterFunctions.put(
				"equipCalibration",
				AccMediLabManagementReq::getEquipCalibration);
			attributeGetterFunctions.put(
				"manualRefCalibrat",
				AccMediLabManagementReq::getManualRefCalibrat);
			attributeGetterFunctions.put(
				"proficencyTesting",
				AccMediLabManagementReq::getProficencyTesting);
			attributeGetterFunctions.put(
				"manualRefProfiTest",
				AccMediLabManagementReq::getManualRefProfiTest);
			attributeGetterFunctions.put(
				"postExamReliabilty",
				AccMediLabManagementReq::getPostExamReliabilty);
			attributeGetterFunctions.put(
				"manualRefPostExam",
				AccMediLabManagementReq::getManualRefPostExam);
			attributeGetterFunctions.put(
				"reportedAccurately",
				AccMediLabManagementReq::getReportedAccurately);
			attributeGetterFunctions.put(
				"manualRefReported",
				AccMediLabManagementReq::getManualRefReported);
			attributeGetterFunctions.put(
				"responsiblitySpecified",
				AccMediLabManagementReq::getResponsiblitySpecified);
			attributeGetterFunctions.put(
				"manualRefSpecified",
				AccMediLabManagementReq::getManualRefSpecified);
			attributeGetterFunctions.put(
				"ensureAuthorities",
				AccMediLabManagementReq::getEnsureAuthorities);
			attributeGetterFunctions.put(
				"manualRefAuthorities",
				AccMediLabManagementReq::getManualRefAuthorities);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccMediLabManagementReq::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccMediLabManagementReq, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccMediLabManagementReq, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccMediLabManagementReq, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setUuid);
			attributeSetterBiConsumers.put(
				"accMediLabManagementReqId",
				(BiConsumer<AccMediLabManagementReq, Long>)
					AccMediLabManagementReq::setAccMediLabManagementReqId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccMediLabManagementReq, Long>)
					AccMediLabManagementReq::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccMediLabManagementReq, Long>)
					AccMediLabManagementReq::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccMediLabManagementReq, Long>)
					AccMediLabManagementReq::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccMediLabManagementReq, Date>)
					AccMediLabManagementReq::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccMediLabManagementReq, Date>)
					AccMediLabManagementReq::setModifiedDate);
			attributeSetterBiConsumers.put(
				"managementEstablished",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManagementEstablished);
			attributeSetterBiConsumers.put(
				"qMRefManagement",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setQMRefManagement);
			attributeSetterBiConsumers.put(
				"personAware",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setPersonAware);
			attributeSetterBiConsumers.put(
				"qMRefPerson",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setQMRefPerson);
			attributeSetterBiConsumers.put(
				"policiesAcknowledged",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setPoliciesAcknowledged);
			attributeSetterBiConsumers.put(
				"qMRefPolicies",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setQMRefPolicies);
			attributeSetterBiConsumers.put(
				"controlledDocument",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setControlledDocument);
			attributeSetterBiConsumers.put(
				"qMRefControlDoc",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setQMRefControlDoc);
			attributeSetterBiConsumers.put(
				"laboratoryEstablished",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setLaboratoryEstablished);
			attributeSetterBiConsumers.put(
				"qMReflabEstab",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setQMReflabEstab);
			attributeSetterBiConsumers.put(
				"identifiedRisks",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setIdentifiedRisks);
			attributeSetterBiConsumers.put(
				"qMRefRisks",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setQMRefRisks);
			attributeSetterBiConsumers.put(
				"havePersonnel",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setHavePersonnel);
			attributeSetterBiConsumers.put(
				"qMRefPersonnel",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setQMRefPersonnel);
			attributeSetterBiConsumers.put(
				"authorizePersonnel",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setAuthorizePersonnel);
			attributeSetterBiConsumers.put(
				"qMRefAuthorize",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setQMRefAuthorize);
			attributeSetterBiConsumers.put(
				"labControlDocsFulfilment",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setLabControlDocsFulfilment);
			attributeSetterBiConsumers.put(
				"otherRefFulfil",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefFulfil);
			attributeSetterBiConsumers.put(
				"legibleRecordsFulfil",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setLegibleRecordsFulfil);
			attributeSetterBiConsumers.put(
				"otherRefLegibleRec",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefLegibleRec);
			attributeSetterBiConsumers.put(
				"proceduresInPlace",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setProceduresInPlace);
			attributeSetterBiConsumers.put(
				"otherRefProcedure",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefProcedure);
			attributeSetterBiConsumers.put(
				"communicatedRequirement",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setCommunicatedRequirement);
			attributeSetterBiConsumers.put(
				"otherRefRequirement",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefRequirement);
			attributeSetterBiConsumers.put(
				"procedureForSelection",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setProcedureForSelection);
			attributeSetterBiConsumers.put(
				"otherRefSelection",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefSelection);
			attributeSetterBiConsumers.put(
				"arrangementInPlace",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setArrangementInPlace);
			attributeSetterBiConsumers.put(
				"otherRefArrange",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefArrange);
			attributeSetterBiConsumers.put(
				"processInPlace",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setProcessInPlace);
			attributeSetterBiConsumers.put(
				"otherRefProcess",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefProcess);
			attributeSetterBiConsumers.put(
				"labOperateProgramme",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setLabOperateProgramme);
			attributeSetterBiConsumers.put(
				"otherRefLabOperate",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefLabOperate);
			attributeSetterBiConsumers.put(
				"identifyOpportunities",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setIdentifyOpportunities);
			attributeSetterBiConsumers.put(
				"otherRefOpportunity",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefOpportunity);
			attributeSetterBiConsumers.put(
				"demonstrateFulfilment",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setDemonstrateFulfilment);
			attributeSetterBiConsumers.put(
				"otherRefDemonstrate",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefDemonstrate);
			attributeSetterBiConsumers.put(
				"ensureLabPlan",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setEnsureLabPlan);
			attributeSetterBiConsumers.put(
				"otherRefEnsurePlan",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefEnsurePlan);
			attributeSetterBiConsumers.put(
				"plannedManageReview",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setPlannedManageReview);
			attributeSetterBiConsumers.put(
				"otherRefPlanned",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setOtherRefPlanned);
			attributeSetterBiConsumers.put(
				"availablePersonnel",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setAvailablePersonnel);
			attributeSetterBiConsumers.put(
				"manualRefAvailable",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefAvailable);
			attributeSetterBiConsumers.put(
				"educationProgramme",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setEducationProgramme);
			attributeSetterBiConsumers.put(
				"manualRefEducation",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefEducation);
			attributeSetterBiConsumers.put(
				"ensureAccomodation",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setEnsureAccomodation);
			attributeSetterBiConsumers.put(
				"manualRefAccom",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefAccom);
			attributeSetterBiConsumers.put(
				"processForSelection",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setProcessForSelection);
			attributeSetterBiConsumers.put(
				"manualRefSelection",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefSelection);
			attributeSetterBiConsumers.put(
				"verifyReagents",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setVerifyReagents);
			attributeSetterBiConsumers.put(
				"manualRefReagents",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefReagents);
			attributeSetterBiConsumers.put(
				"docProcedure",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setDocProcedure);
			attributeSetterBiConsumers.put(
				"manualRefDocProce",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefDocProce);
			attributeSetterBiConsumers.put(
				"useExamMethods",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setUseExamMethods);
			attributeSetterBiConsumers.put(
				"manualRefExam",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefExam);
			attributeSetterBiConsumers.put(
				"monitoringValidity",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setMonitoringValidity);
			attributeSetterBiConsumers.put(
				"manualRefValidity",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefValidity);
			attributeSetterBiConsumers.put(
				"validateExam",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setValidateExam);
			attributeSetterBiConsumers.put(
				"manualRefValidateExam",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefValidateExam);
			attributeSetterBiConsumers.put(
				"uncertainityReview",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setUncertainityReview);
			attributeSetterBiConsumers.put(
				"manualRefUncertainity",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefUncertainity);
			attributeSetterBiConsumers.put(
				"preventResRelease",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setPreventResRelease);
			attributeSetterBiConsumers.put(
				"manualRefPrevent",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefPrevent);
			attributeSetterBiConsumers.put(
				"equipmentMaintenance",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setEquipmentMaintenance);
			attributeSetterBiConsumers.put(
				"manualRefMaintenance",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefMaintenance);
			attributeSetterBiConsumers.put(
				"equipCalibration",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setEquipCalibration);
			attributeSetterBiConsumers.put(
				"manualRefCalibrat",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefCalibrat);
			attributeSetterBiConsumers.put(
				"proficencyTesting",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setProficencyTesting);
			attributeSetterBiConsumers.put(
				"manualRefProfiTest",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefProfiTest);
			attributeSetterBiConsumers.put(
				"postExamReliabilty",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setPostExamReliabilty);
			attributeSetterBiConsumers.put(
				"manualRefPostExam",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefPostExam);
			attributeSetterBiConsumers.put(
				"reportedAccurately",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setReportedAccurately);
			attributeSetterBiConsumers.put(
				"manualRefReported",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefReported);
			attributeSetterBiConsumers.put(
				"responsiblitySpecified",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setResponsiblitySpecified);
			attributeSetterBiConsumers.put(
				"manualRefSpecified",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefSpecified);
			attributeSetterBiConsumers.put(
				"ensureAuthorities",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setEnsureAuthorities);
			attributeSetterBiConsumers.put(
				"manualRefAuthorities",
				(BiConsumer<AccMediLabManagementReq, String>)
					AccMediLabManagementReq::setManualRefAuthorities);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccMediLabManagementReq, Long>)
					AccMediLabManagementReq::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccMediLabManagementReqId() {
		return _accMediLabManagementReqId;
	}

	@Override
	public void setAccMediLabManagementReqId(long accMediLabManagementReqId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accMediLabManagementReqId = accMediLabManagementReqId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getManagementEstablished() {
		if (_managementEstablished == null) {
			return "";
		}
		else {
			return _managementEstablished;
		}
	}

	@Override
	public void setManagementEstablished(String managementEstablished) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managementEstablished = managementEstablished;
	}

	@JSON
	@Override
	public String getQMRefManagement() {
		if (_qMRefManagement == null) {
			return "";
		}
		else {
			return _qMRefManagement;
		}
	}

	@Override
	public void setQMRefManagement(String qMRefManagement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefManagement = qMRefManagement;
	}

	@JSON
	@Override
	public String getPersonAware() {
		if (_personAware == null) {
			return "";
		}
		else {
			return _personAware;
		}
	}

	@Override
	public void setPersonAware(String personAware) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personAware = personAware;
	}

	@JSON
	@Override
	public String getQMRefPerson() {
		if (_qMRefPerson == null) {
			return "";
		}
		else {
			return _qMRefPerson;
		}
	}

	@Override
	public void setQMRefPerson(String qMRefPerson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPerson = qMRefPerson;
	}

	@JSON
	@Override
	public String getPoliciesAcknowledged() {
		if (_policiesAcknowledged == null) {
			return "";
		}
		else {
			return _policiesAcknowledged;
		}
	}

	@Override
	public void setPoliciesAcknowledged(String policiesAcknowledged) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policiesAcknowledged = policiesAcknowledged;
	}

	@JSON
	@Override
	public String getQMRefPolicies() {
		if (_qMRefPolicies == null) {
			return "";
		}
		else {
			return _qMRefPolicies;
		}
	}

	@Override
	public void setQMRefPolicies(String qMRefPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPolicies = qMRefPolicies;
	}

	@JSON
	@Override
	public String getControlledDocument() {
		if (_controlledDocument == null) {
			return "";
		}
		else {
			return _controlledDocument;
		}
	}

	@Override
	public void setControlledDocument(String controlledDocument) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_controlledDocument = controlledDocument;
	}

	@JSON
	@Override
	public String getQMRefControlDoc() {
		if (_qMRefControlDoc == null) {
			return "";
		}
		else {
			return _qMRefControlDoc;
		}
	}

	@Override
	public void setQMRefControlDoc(String qMRefControlDoc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefControlDoc = qMRefControlDoc;
	}

	@JSON
	@Override
	public String getLaboratoryEstablished() {
		if (_laboratoryEstablished == null) {
			return "";
		}
		else {
			return _laboratoryEstablished;
		}
	}

	@Override
	public void setLaboratoryEstablished(String laboratoryEstablished) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_laboratoryEstablished = laboratoryEstablished;
	}

	@JSON
	@Override
	public String getQMReflabEstab() {
		if (_qMReflabEstab == null) {
			return "";
		}
		else {
			return _qMReflabEstab;
		}
	}

	@Override
	public void setQMReflabEstab(String qMReflabEstab) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMReflabEstab = qMReflabEstab;
	}

	@JSON
	@Override
	public String getIdentifiedRisks() {
		if (_identifiedRisks == null) {
			return "";
		}
		else {
			return _identifiedRisks;
		}
	}

	@Override
	public void setIdentifiedRisks(String identifiedRisks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_identifiedRisks = identifiedRisks;
	}

	@JSON
	@Override
	public String getQMRefRisks() {
		if (_qMRefRisks == null) {
			return "";
		}
		else {
			return _qMRefRisks;
		}
	}

	@Override
	public void setQMRefRisks(String qMRefRisks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefRisks = qMRefRisks;
	}

	@JSON
	@Override
	public String getHavePersonnel() {
		if (_havePersonnel == null) {
			return "";
		}
		else {
			return _havePersonnel;
		}
	}

	@Override
	public void setHavePersonnel(String havePersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_havePersonnel = havePersonnel;
	}

	@JSON
	@Override
	public String getQMRefPersonnel() {
		if (_qMRefPersonnel == null) {
			return "";
		}
		else {
			return _qMRefPersonnel;
		}
	}

	@Override
	public void setQMRefPersonnel(String qMRefPersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPersonnel = qMRefPersonnel;
	}

	@JSON
	@Override
	public String getAuthorizePersonnel() {
		if (_authorizePersonnel == null) {
			return "";
		}
		else {
			return _authorizePersonnel;
		}
	}

	@Override
	public void setAuthorizePersonnel(String authorizePersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_authorizePersonnel = authorizePersonnel;
	}

	@JSON
	@Override
	public String getQMRefAuthorize() {
		if (_qMRefAuthorize == null) {
			return "";
		}
		else {
			return _qMRefAuthorize;
		}
	}

	@Override
	public void setQMRefAuthorize(String qMRefAuthorize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefAuthorize = qMRefAuthorize;
	}

	@JSON
	@Override
	public String getLabControlDocsFulfilment() {
		if (_labControlDocsFulfilment == null) {
			return "";
		}
		else {
			return _labControlDocsFulfilment;
		}
	}

	@Override
	public void setLabControlDocsFulfilment(String labControlDocsFulfilment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labControlDocsFulfilment = labControlDocsFulfilment;
	}

	@JSON
	@Override
	public String getOtherRefFulfil() {
		if (_otherRefFulfil == null) {
			return "";
		}
		else {
			return _otherRefFulfil;
		}
	}

	@Override
	public void setOtherRefFulfil(String otherRefFulfil) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefFulfil = otherRefFulfil;
	}

	@JSON
	@Override
	public String getLegibleRecordsFulfil() {
		if (_legibleRecordsFulfil == null) {
			return "";
		}
		else {
			return _legibleRecordsFulfil;
		}
	}

	@Override
	public void setLegibleRecordsFulfil(String legibleRecordsFulfil) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_legibleRecordsFulfil = legibleRecordsFulfil;
	}

	@JSON
	@Override
	public String getOtherRefLegibleRec() {
		if (_otherRefLegibleRec == null) {
			return "";
		}
		else {
			return _otherRefLegibleRec;
		}
	}

	@Override
	public void setOtherRefLegibleRec(String otherRefLegibleRec) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefLegibleRec = otherRefLegibleRec;
	}

	@JSON
	@Override
	public String getProceduresInPlace() {
		if (_proceduresInPlace == null) {
			return "";
		}
		else {
			return _proceduresInPlace;
		}
	}

	@Override
	public void setProceduresInPlace(String proceduresInPlace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proceduresInPlace = proceduresInPlace;
	}

	@JSON
	@Override
	public String getOtherRefProcedure() {
		if (_otherRefProcedure == null) {
			return "";
		}
		else {
			return _otherRefProcedure;
		}
	}

	@Override
	public void setOtherRefProcedure(String otherRefProcedure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefProcedure = otherRefProcedure;
	}

	@JSON
	@Override
	public String getCommunicatedRequirement() {
		if (_communicatedRequirement == null) {
			return "";
		}
		else {
			return _communicatedRequirement;
		}
	}

	@Override
	public void setCommunicatedRequirement(String communicatedRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_communicatedRequirement = communicatedRequirement;
	}

	@JSON
	@Override
	public String getOtherRefRequirement() {
		if (_otherRefRequirement == null) {
			return "";
		}
		else {
			return _otherRefRequirement;
		}
	}

	@Override
	public void setOtherRefRequirement(String otherRefRequirement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefRequirement = otherRefRequirement;
	}

	@JSON
	@Override
	public String getProcedureForSelection() {
		if (_procedureForSelection == null) {
			return "";
		}
		else {
			return _procedureForSelection;
		}
	}

	@Override
	public void setProcedureForSelection(String procedureForSelection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procedureForSelection = procedureForSelection;
	}

	@JSON
	@Override
	public String getOtherRefSelection() {
		if (_otherRefSelection == null) {
			return "";
		}
		else {
			return _otherRefSelection;
		}
	}

	@Override
	public void setOtherRefSelection(String otherRefSelection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefSelection = otherRefSelection;
	}

	@JSON
	@Override
	public String getArrangementInPlace() {
		if (_arrangementInPlace == null) {
			return "";
		}
		else {
			return _arrangementInPlace;
		}
	}

	@Override
	public void setArrangementInPlace(String arrangementInPlace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_arrangementInPlace = arrangementInPlace;
	}

	@JSON
	@Override
	public String getOtherRefArrange() {
		if (_otherRefArrange == null) {
			return "";
		}
		else {
			return _otherRefArrange;
		}
	}

	@Override
	public void setOtherRefArrange(String otherRefArrange) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefArrange = otherRefArrange;
	}

	@JSON
	@Override
	public String getProcessInPlace() {
		if (_processInPlace == null) {
			return "";
		}
		else {
			return _processInPlace;
		}
	}

	@Override
	public void setProcessInPlace(String processInPlace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processInPlace = processInPlace;
	}

	@JSON
	@Override
	public String getOtherRefProcess() {
		if (_otherRefProcess == null) {
			return "";
		}
		else {
			return _otherRefProcess;
		}
	}

	@Override
	public void setOtherRefProcess(String otherRefProcess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefProcess = otherRefProcess;
	}

	@JSON
	@Override
	public String getLabOperateProgramme() {
		if (_labOperateProgramme == null) {
			return "";
		}
		else {
			return _labOperateProgramme;
		}
	}

	@Override
	public void setLabOperateProgramme(String labOperateProgramme) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labOperateProgramme = labOperateProgramme;
	}

	@JSON
	@Override
	public String getOtherRefLabOperate() {
		if (_otherRefLabOperate == null) {
			return "";
		}
		else {
			return _otherRefLabOperate;
		}
	}

	@Override
	public void setOtherRefLabOperate(String otherRefLabOperate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefLabOperate = otherRefLabOperate;
	}

	@JSON
	@Override
	public String getIdentifyOpportunities() {
		if (_identifyOpportunities == null) {
			return "";
		}
		else {
			return _identifyOpportunities;
		}
	}

	@Override
	public void setIdentifyOpportunities(String identifyOpportunities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_identifyOpportunities = identifyOpportunities;
	}

	@JSON
	@Override
	public String getOtherRefOpportunity() {
		if (_otherRefOpportunity == null) {
			return "";
		}
		else {
			return _otherRefOpportunity;
		}
	}

	@Override
	public void setOtherRefOpportunity(String otherRefOpportunity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefOpportunity = otherRefOpportunity;
	}

	@JSON
	@Override
	public String getDemonstrateFulfilment() {
		if (_demonstrateFulfilment == null) {
			return "";
		}
		else {
			return _demonstrateFulfilment;
		}
	}

	@Override
	public void setDemonstrateFulfilment(String demonstrateFulfilment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_demonstrateFulfilment = demonstrateFulfilment;
	}

	@JSON
	@Override
	public String getOtherRefDemonstrate() {
		if (_otherRefDemonstrate == null) {
			return "";
		}
		else {
			return _otherRefDemonstrate;
		}
	}

	@Override
	public void setOtherRefDemonstrate(String otherRefDemonstrate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefDemonstrate = otherRefDemonstrate;
	}

	@JSON
	@Override
	public String getEnsureLabPlan() {
		if (_ensureLabPlan == null) {
			return "";
		}
		else {
			return _ensureLabPlan;
		}
	}

	@Override
	public void setEnsureLabPlan(String ensureLabPlan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ensureLabPlan = ensureLabPlan;
	}

	@JSON
	@Override
	public String getOtherRefEnsurePlan() {
		if (_otherRefEnsurePlan == null) {
			return "";
		}
		else {
			return _otherRefEnsurePlan;
		}
	}

	@Override
	public void setOtherRefEnsurePlan(String otherRefEnsurePlan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefEnsurePlan = otherRefEnsurePlan;
	}

	@JSON
	@Override
	public String getPlannedManageReview() {
		if (_plannedManageReview == null) {
			return "";
		}
		else {
			return _plannedManageReview;
		}
	}

	@Override
	public void setPlannedManageReview(String plannedManageReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_plannedManageReview = plannedManageReview;
	}

	@JSON
	@Override
	public String getOtherRefPlanned() {
		if (_otherRefPlanned == null) {
			return "";
		}
		else {
			return _otherRefPlanned;
		}
	}

	@Override
	public void setOtherRefPlanned(String otherRefPlanned) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherRefPlanned = otherRefPlanned;
	}

	@JSON
	@Override
	public String getAvailablePersonnel() {
		if (_availablePersonnel == null) {
			return "";
		}
		else {
			return _availablePersonnel;
		}
	}

	@Override
	public void setAvailablePersonnel(String availablePersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_availablePersonnel = availablePersonnel;
	}

	@JSON
	@Override
	public String getManualRefAvailable() {
		if (_manualRefAvailable == null) {
			return "";
		}
		else {
			return _manualRefAvailable;
		}
	}

	@Override
	public void setManualRefAvailable(String manualRefAvailable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefAvailable = manualRefAvailable;
	}

	@JSON
	@Override
	public String getEducationProgramme() {
		if (_educationProgramme == null) {
			return "";
		}
		else {
			return _educationProgramme;
		}
	}

	@Override
	public void setEducationProgramme(String educationProgramme) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_educationProgramme = educationProgramme;
	}

	@JSON
	@Override
	public String getManualRefEducation() {
		if (_manualRefEducation == null) {
			return "";
		}
		else {
			return _manualRefEducation;
		}
	}

	@Override
	public void setManualRefEducation(String manualRefEducation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefEducation = manualRefEducation;
	}

	@JSON
	@Override
	public String getEnsureAccomodation() {
		if (_ensureAccomodation == null) {
			return "";
		}
		else {
			return _ensureAccomodation;
		}
	}

	@Override
	public void setEnsureAccomodation(String ensureAccomodation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ensureAccomodation = ensureAccomodation;
	}

	@JSON
	@Override
	public String getManualRefAccom() {
		if (_manualRefAccom == null) {
			return "";
		}
		else {
			return _manualRefAccom;
		}
	}

	@Override
	public void setManualRefAccom(String manualRefAccom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefAccom = manualRefAccom;
	}

	@JSON
	@Override
	public String getProcessForSelection() {
		if (_processForSelection == null) {
			return "";
		}
		else {
			return _processForSelection;
		}
	}

	@Override
	public void setProcessForSelection(String processForSelection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processForSelection = processForSelection;
	}

	@JSON
	@Override
	public String getManualRefSelection() {
		if (_manualRefSelection == null) {
			return "";
		}
		else {
			return _manualRefSelection;
		}
	}

	@Override
	public void setManualRefSelection(String manualRefSelection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefSelection = manualRefSelection;
	}

	@JSON
	@Override
	public String getVerifyReagents() {
		if (_verifyReagents == null) {
			return "";
		}
		else {
			return _verifyReagents;
		}
	}

	@Override
	public void setVerifyReagents(String verifyReagents) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verifyReagents = verifyReagents;
	}

	@JSON
	@Override
	public String getManualRefReagents() {
		if (_manualRefReagents == null) {
			return "";
		}
		else {
			return _manualRefReagents;
		}
	}

	@Override
	public void setManualRefReagents(String manualRefReagents) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefReagents = manualRefReagents;
	}

	@JSON
	@Override
	public String getDocProcedure() {
		if (_docProcedure == null) {
			return "";
		}
		else {
			return _docProcedure;
		}
	}

	@Override
	public void setDocProcedure(String docProcedure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docProcedure = docProcedure;
	}

	@JSON
	@Override
	public String getManualRefDocProce() {
		if (_manualRefDocProce == null) {
			return "";
		}
		else {
			return _manualRefDocProce;
		}
	}

	@Override
	public void setManualRefDocProce(String manualRefDocProce) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefDocProce = manualRefDocProce;
	}

	@JSON
	@Override
	public String getUseExamMethods() {
		if (_useExamMethods == null) {
			return "";
		}
		else {
			return _useExamMethods;
		}
	}

	@Override
	public void setUseExamMethods(String useExamMethods) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_useExamMethods = useExamMethods;
	}

	@JSON
	@Override
	public String getManualRefExam() {
		if (_manualRefExam == null) {
			return "";
		}
		else {
			return _manualRefExam;
		}
	}

	@Override
	public void setManualRefExam(String manualRefExam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefExam = manualRefExam;
	}

	@JSON
	@Override
	public String getMonitoringValidity() {
		if (_monitoringValidity == null) {
			return "";
		}
		else {
			return _monitoringValidity;
		}
	}

	@Override
	public void setMonitoringValidity(String monitoringValidity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monitoringValidity = monitoringValidity;
	}

	@JSON
	@Override
	public String getManualRefValidity() {
		if (_manualRefValidity == null) {
			return "";
		}
		else {
			return _manualRefValidity;
		}
	}

	@Override
	public void setManualRefValidity(String manualRefValidity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefValidity = manualRefValidity;
	}

	@JSON
	@Override
	public String getValidateExam() {
		if (_validateExam == null) {
			return "";
		}
		else {
			return _validateExam;
		}
	}

	@Override
	public void setValidateExam(String validateExam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_validateExam = validateExam;
	}

	@JSON
	@Override
	public String getManualRefValidateExam() {
		if (_manualRefValidateExam == null) {
			return "";
		}
		else {
			return _manualRefValidateExam;
		}
	}

	@Override
	public void setManualRefValidateExam(String manualRefValidateExam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefValidateExam = manualRefValidateExam;
	}

	@JSON
	@Override
	public String getUncertainityReview() {
		if (_uncertainityReview == null) {
			return "";
		}
		else {
			return _uncertainityReview;
		}
	}

	@Override
	public void setUncertainityReview(String uncertainityReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uncertainityReview = uncertainityReview;
	}

	@JSON
	@Override
	public String getManualRefUncertainity() {
		if (_manualRefUncertainity == null) {
			return "";
		}
		else {
			return _manualRefUncertainity;
		}
	}

	@Override
	public void setManualRefUncertainity(String manualRefUncertainity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefUncertainity = manualRefUncertainity;
	}

	@JSON
	@Override
	public String getPreventResRelease() {
		if (_preventResRelease == null) {
			return "";
		}
		else {
			return _preventResRelease;
		}
	}

	@Override
	public void setPreventResRelease(String preventResRelease) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preventResRelease = preventResRelease;
	}

	@JSON
	@Override
	public String getManualRefPrevent() {
		if (_manualRefPrevent == null) {
			return "";
		}
		else {
			return _manualRefPrevent;
		}
	}

	@Override
	public void setManualRefPrevent(String manualRefPrevent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefPrevent = manualRefPrevent;
	}

	@JSON
	@Override
	public String getEquipmentMaintenance() {
		if (_equipmentMaintenance == null) {
			return "";
		}
		else {
			return _equipmentMaintenance;
		}
	}

	@Override
	public void setEquipmentMaintenance(String equipmentMaintenance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentMaintenance = equipmentMaintenance;
	}

	@JSON
	@Override
	public String getManualRefMaintenance() {
		if (_manualRefMaintenance == null) {
			return "";
		}
		else {
			return _manualRefMaintenance;
		}
	}

	@Override
	public void setManualRefMaintenance(String manualRefMaintenance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefMaintenance = manualRefMaintenance;
	}

	@JSON
	@Override
	public String getEquipCalibration() {
		if (_equipCalibration == null) {
			return "";
		}
		else {
			return _equipCalibration;
		}
	}

	@Override
	public void setEquipCalibration(String equipCalibration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipCalibration = equipCalibration;
	}

	@JSON
	@Override
	public String getManualRefCalibrat() {
		if (_manualRefCalibrat == null) {
			return "";
		}
		else {
			return _manualRefCalibrat;
		}
	}

	@Override
	public void setManualRefCalibrat(String manualRefCalibrat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefCalibrat = manualRefCalibrat;
	}

	@JSON
	@Override
	public String getProficencyTesting() {
		if (_proficencyTesting == null) {
			return "";
		}
		else {
			return _proficencyTesting;
		}
	}

	@Override
	public void setProficencyTesting(String proficencyTesting) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proficencyTesting = proficencyTesting;
	}

	@JSON
	@Override
	public String getManualRefProfiTest() {
		if (_manualRefProfiTest == null) {
			return "";
		}
		else {
			return _manualRefProfiTest;
		}
	}

	@Override
	public void setManualRefProfiTest(String manualRefProfiTest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefProfiTest = manualRefProfiTest;
	}

	@JSON
	@Override
	public String getPostExamReliabilty() {
		if (_postExamReliabilty == null) {
			return "";
		}
		else {
			return _postExamReliabilty;
		}
	}

	@Override
	public void setPostExamReliabilty(String postExamReliabilty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postExamReliabilty = postExamReliabilty;
	}

	@JSON
	@Override
	public String getManualRefPostExam() {
		if (_manualRefPostExam == null) {
			return "";
		}
		else {
			return _manualRefPostExam;
		}
	}

	@Override
	public void setManualRefPostExam(String manualRefPostExam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefPostExam = manualRefPostExam;
	}

	@JSON
	@Override
	public String getReportedAccurately() {
		if (_reportedAccurately == null) {
			return "";
		}
		else {
			return _reportedAccurately;
		}
	}

	@Override
	public void setReportedAccurately(String reportedAccurately) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportedAccurately = reportedAccurately;
	}

	@JSON
	@Override
	public String getManualRefReported() {
		if (_manualRefReported == null) {
			return "";
		}
		else {
			return _manualRefReported;
		}
	}

	@Override
	public void setManualRefReported(String manualRefReported) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefReported = manualRefReported;
	}

	@JSON
	@Override
	public String getResponsiblitySpecified() {
		if (_responsiblitySpecified == null) {
			return "";
		}
		else {
			return _responsiblitySpecified;
		}
	}

	@Override
	public void setResponsiblitySpecified(String responsiblitySpecified) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_responsiblitySpecified = responsiblitySpecified;
	}

	@JSON
	@Override
	public String getManualRefSpecified() {
		if (_manualRefSpecified == null) {
			return "";
		}
		else {
			return _manualRefSpecified;
		}
	}

	@Override
	public void setManualRefSpecified(String manualRefSpecified) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefSpecified = manualRefSpecified;
	}

	@JSON
	@Override
	public String getEnsureAuthorities() {
		if (_ensureAuthorities == null) {
			return "";
		}
		else {
			return _ensureAuthorities;
		}
	}

	@Override
	public void setEnsureAuthorities(String ensureAuthorities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ensureAuthorities = ensureAuthorities;
	}

	@JSON
	@Override
	public String getManualRefAuthorities() {
		if (_manualRefAuthorities == null) {
			return "";
		}
		else {
			return _manualRefAuthorities;
		}
	}

	@Override
	public void setManualRefAuthorities(String manualRefAuthorities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualRefAuthorities = manualRefAuthorities;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccMediLabManagementReq.class.getName()));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccMediLabManagementReq.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccMediLabManagementReq toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccMediLabManagementReq>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccMediLabManagementReqImpl accMediLabManagementReqImpl =
			new AccMediLabManagementReqImpl();

		accMediLabManagementReqImpl.setUuid(getUuid());
		accMediLabManagementReqImpl.setAccMediLabManagementReqId(
			getAccMediLabManagementReqId());
		accMediLabManagementReqImpl.setGroupId(getGroupId());
		accMediLabManagementReqImpl.setCompanyId(getCompanyId());
		accMediLabManagementReqImpl.setUserId(getUserId());
		accMediLabManagementReqImpl.setUserName(getUserName());
		accMediLabManagementReqImpl.setCreateDate(getCreateDate());
		accMediLabManagementReqImpl.setModifiedDate(getModifiedDate());
		accMediLabManagementReqImpl.setManagementEstablished(
			getManagementEstablished());
		accMediLabManagementReqImpl.setQMRefManagement(getQMRefManagement());
		accMediLabManagementReqImpl.setPersonAware(getPersonAware());
		accMediLabManagementReqImpl.setQMRefPerson(getQMRefPerson());
		accMediLabManagementReqImpl.setPoliciesAcknowledged(
			getPoliciesAcknowledged());
		accMediLabManagementReqImpl.setQMRefPolicies(getQMRefPolicies());
		accMediLabManagementReqImpl.setControlledDocument(
			getControlledDocument());
		accMediLabManagementReqImpl.setQMRefControlDoc(getQMRefControlDoc());
		accMediLabManagementReqImpl.setLaboratoryEstablished(
			getLaboratoryEstablished());
		accMediLabManagementReqImpl.setQMReflabEstab(getQMReflabEstab());
		accMediLabManagementReqImpl.setIdentifiedRisks(getIdentifiedRisks());
		accMediLabManagementReqImpl.setQMRefRisks(getQMRefRisks());
		accMediLabManagementReqImpl.setHavePersonnel(getHavePersonnel());
		accMediLabManagementReqImpl.setQMRefPersonnel(getQMRefPersonnel());
		accMediLabManagementReqImpl.setAuthorizePersonnel(
			getAuthorizePersonnel());
		accMediLabManagementReqImpl.setQMRefAuthorize(getQMRefAuthorize());
		accMediLabManagementReqImpl.setLabControlDocsFulfilment(
			getLabControlDocsFulfilment());
		accMediLabManagementReqImpl.setOtherRefFulfil(getOtherRefFulfil());
		accMediLabManagementReqImpl.setLegibleRecordsFulfil(
			getLegibleRecordsFulfil());
		accMediLabManagementReqImpl.setOtherRefLegibleRec(
			getOtherRefLegibleRec());
		accMediLabManagementReqImpl.setProceduresInPlace(
			getProceduresInPlace());
		accMediLabManagementReqImpl.setOtherRefProcedure(
			getOtherRefProcedure());
		accMediLabManagementReqImpl.setCommunicatedRequirement(
			getCommunicatedRequirement());
		accMediLabManagementReqImpl.setOtherRefRequirement(
			getOtherRefRequirement());
		accMediLabManagementReqImpl.setProcedureForSelection(
			getProcedureForSelection());
		accMediLabManagementReqImpl.setOtherRefSelection(
			getOtherRefSelection());
		accMediLabManagementReqImpl.setArrangementInPlace(
			getArrangementInPlace());
		accMediLabManagementReqImpl.setOtherRefArrange(getOtherRefArrange());
		accMediLabManagementReqImpl.setProcessInPlace(getProcessInPlace());
		accMediLabManagementReqImpl.setOtherRefProcess(getOtherRefProcess());
		accMediLabManagementReqImpl.setLabOperateProgramme(
			getLabOperateProgramme());
		accMediLabManagementReqImpl.setOtherRefLabOperate(
			getOtherRefLabOperate());
		accMediLabManagementReqImpl.setIdentifyOpportunities(
			getIdentifyOpportunities());
		accMediLabManagementReqImpl.setOtherRefOpportunity(
			getOtherRefOpportunity());
		accMediLabManagementReqImpl.setDemonstrateFulfilment(
			getDemonstrateFulfilment());
		accMediLabManagementReqImpl.setOtherRefDemonstrate(
			getOtherRefDemonstrate());
		accMediLabManagementReqImpl.setEnsureLabPlan(getEnsureLabPlan());
		accMediLabManagementReqImpl.setOtherRefEnsurePlan(
			getOtherRefEnsurePlan());
		accMediLabManagementReqImpl.setPlannedManageReview(
			getPlannedManageReview());
		accMediLabManagementReqImpl.setOtherRefPlanned(getOtherRefPlanned());
		accMediLabManagementReqImpl.setAvailablePersonnel(
			getAvailablePersonnel());
		accMediLabManagementReqImpl.setManualRefAvailable(
			getManualRefAvailable());
		accMediLabManagementReqImpl.setEducationProgramme(
			getEducationProgramme());
		accMediLabManagementReqImpl.setManualRefEducation(
			getManualRefEducation());
		accMediLabManagementReqImpl.setEnsureAccomodation(
			getEnsureAccomodation());
		accMediLabManagementReqImpl.setManualRefAccom(getManualRefAccom());
		accMediLabManagementReqImpl.setProcessForSelection(
			getProcessForSelection());
		accMediLabManagementReqImpl.setManualRefSelection(
			getManualRefSelection());
		accMediLabManagementReqImpl.setVerifyReagents(getVerifyReagents());
		accMediLabManagementReqImpl.setManualRefReagents(
			getManualRefReagents());
		accMediLabManagementReqImpl.setDocProcedure(getDocProcedure());
		accMediLabManagementReqImpl.setManualRefDocProce(
			getManualRefDocProce());
		accMediLabManagementReqImpl.setUseExamMethods(getUseExamMethods());
		accMediLabManagementReqImpl.setManualRefExam(getManualRefExam());
		accMediLabManagementReqImpl.setMonitoringValidity(
			getMonitoringValidity());
		accMediLabManagementReqImpl.setManualRefValidity(
			getManualRefValidity());
		accMediLabManagementReqImpl.setValidateExam(getValidateExam());
		accMediLabManagementReqImpl.setManualRefValidateExam(
			getManualRefValidateExam());
		accMediLabManagementReqImpl.setUncertainityReview(
			getUncertainityReview());
		accMediLabManagementReqImpl.setManualRefUncertainity(
			getManualRefUncertainity());
		accMediLabManagementReqImpl.setPreventResRelease(
			getPreventResRelease());
		accMediLabManagementReqImpl.setManualRefPrevent(getManualRefPrevent());
		accMediLabManagementReqImpl.setEquipmentMaintenance(
			getEquipmentMaintenance());
		accMediLabManagementReqImpl.setManualRefMaintenance(
			getManualRefMaintenance());
		accMediLabManagementReqImpl.setEquipCalibration(getEquipCalibration());
		accMediLabManagementReqImpl.setManualRefCalibrat(
			getManualRefCalibrat());
		accMediLabManagementReqImpl.setProficencyTesting(
			getProficencyTesting());
		accMediLabManagementReqImpl.setManualRefProfiTest(
			getManualRefProfiTest());
		accMediLabManagementReqImpl.setPostExamReliabilty(
			getPostExamReliabilty());
		accMediLabManagementReqImpl.setManualRefPostExam(
			getManualRefPostExam());
		accMediLabManagementReqImpl.setReportedAccurately(
			getReportedAccurately());
		accMediLabManagementReqImpl.setManualRefReported(
			getManualRefReported());
		accMediLabManagementReqImpl.setResponsiblitySpecified(
			getResponsiblitySpecified());
		accMediLabManagementReqImpl.setManualRefSpecified(
			getManualRefSpecified());
		accMediLabManagementReqImpl.setEnsureAuthorities(
			getEnsureAuthorities());
		accMediLabManagementReqImpl.setManualRefAuthorities(
			getManualRefAuthorities());
		accMediLabManagementReqImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accMediLabManagementReqImpl.resetOriginalValues();

		return accMediLabManagementReqImpl;
	}

	@Override
	public AccMediLabManagementReq cloneWithOriginalValues() {
		AccMediLabManagementReqImpl accMediLabManagementReqImpl =
			new AccMediLabManagementReqImpl();

		accMediLabManagementReqImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accMediLabManagementReqImpl.setAccMediLabManagementReqId(
			this.<Long>getColumnOriginalValue("accMediLabManagementReqId"));
		accMediLabManagementReqImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accMediLabManagementReqImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accMediLabManagementReqImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accMediLabManagementReqImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accMediLabManagementReqImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accMediLabManagementReqImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accMediLabManagementReqImpl.setManagementEstablished(
			this.<String>getColumnOriginalValue("managementEstablished"));
		accMediLabManagementReqImpl.setQMRefManagement(
			this.<String>getColumnOriginalValue("qMRefManagement"));
		accMediLabManagementReqImpl.setPersonAware(
			this.<String>getColumnOriginalValue("personAware"));
		accMediLabManagementReqImpl.setQMRefPerson(
			this.<String>getColumnOriginalValue("qMRefPerson"));
		accMediLabManagementReqImpl.setPoliciesAcknowledged(
			this.<String>getColumnOriginalValue("policiesAcknowledged"));
		accMediLabManagementReqImpl.setQMRefPolicies(
			this.<String>getColumnOriginalValue("qMRefPolicies"));
		accMediLabManagementReqImpl.setControlledDocument(
			this.<String>getColumnOriginalValue("controlledDocument"));
		accMediLabManagementReqImpl.setQMRefControlDoc(
			this.<String>getColumnOriginalValue("qMRefControlDoc"));
		accMediLabManagementReqImpl.setLaboratoryEstablished(
			this.<String>getColumnOriginalValue("laboratoryEstablished"));
		accMediLabManagementReqImpl.setQMReflabEstab(
			this.<String>getColumnOriginalValue("qMReflabEstab"));
		accMediLabManagementReqImpl.setIdentifiedRisks(
			this.<String>getColumnOriginalValue("identifiedRisks"));
		accMediLabManagementReqImpl.setQMRefRisks(
			this.<String>getColumnOriginalValue("qMRefRisks"));
		accMediLabManagementReqImpl.setHavePersonnel(
			this.<String>getColumnOriginalValue("havePersonnel"));
		accMediLabManagementReqImpl.setQMRefPersonnel(
			this.<String>getColumnOriginalValue("qMRefPersonnel"));
		accMediLabManagementReqImpl.setAuthorizePersonnel(
			this.<String>getColumnOriginalValue("authorizePersonnel"));
		accMediLabManagementReqImpl.setQMRefAuthorize(
			this.<String>getColumnOriginalValue("qMRefAuthorize"));
		accMediLabManagementReqImpl.setLabControlDocsFulfilment(
			this.<String>getColumnOriginalValue("labControlDocsFulfilment"));
		accMediLabManagementReqImpl.setOtherRefFulfil(
			this.<String>getColumnOriginalValue("otherRefFulfil"));
		accMediLabManagementReqImpl.setLegibleRecordsFulfil(
			this.<String>getColumnOriginalValue("legibleRecordsFulfil"));
		accMediLabManagementReqImpl.setOtherRefLegibleRec(
			this.<String>getColumnOriginalValue("otherRefLegibleRec"));
		accMediLabManagementReqImpl.setProceduresInPlace(
			this.<String>getColumnOriginalValue("proceduresInPlace"));
		accMediLabManagementReqImpl.setOtherRefProcedure(
			this.<String>getColumnOriginalValue("otherRefProcedure"));
		accMediLabManagementReqImpl.setCommunicatedRequirement(
			this.<String>getColumnOriginalValue("communicatedRequirement"));
		accMediLabManagementReqImpl.setOtherRefRequirement(
			this.<String>getColumnOriginalValue("otherRefRequirement"));
		accMediLabManagementReqImpl.setProcedureForSelection(
			this.<String>getColumnOriginalValue("procedureForSelection"));
		accMediLabManagementReqImpl.setOtherRefSelection(
			this.<String>getColumnOriginalValue("otherRefSelection"));
		accMediLabManagementReqImpl.setArrangementInPlace(
			this.<String>getColumnOriginalValue("arrangementInPlace"));
		accMediLabManagementReqImpl.setOtherRefArrange(
			this.<String>getColumnOriginalValue("otherRefArrange"));
		accMediLabManagementReqImpl.setProcessInPlace(
			this.<String>getColumnOriginalValue("processInPlace"));
		accMediLabManagementReqImpl.setOtherRefProcess(
			this.<String>getColumnOriginalValue("otherRefProcess"));
		accMediLabManagementReqImpl.setLabOperateProgramme(
			this.<String>getColumnOriginalValue("labOperateProgramme"));
		accMediLabManagementReqImpl.setOtherRefLabOperate(
			this.<String>getColumnOriginalValue("otherRefLabOperate"));
		accMediLabManagementReqImpl.setIdentifyOpportunities(
			this.<String>getColumnOriginalValue("identifyOpportunities"));
		accMediLabManagementReqImpl.setOtherRefOpportunity(
			this.<String>getColumnOriginalValue("otherRefOpportunity"));
		accMediLabManagementReqImpl.setDemonstrateFulfilment(
			this.<String>getColumnOriginalValue("demonstrateFulfilment"));
		accMediLabManagementReqImpl.setOtherRefDemonstrate(
			this.<String>getColumnOriginalValue("otherRefDemonstrate"));
		accMediLabManagementReqImpl.setEnsureLabPlan(
			this.<String>getColumnOriginalValue("ensureLabPlan"));
		accMediLabManagementReqImpl.setOtherRefEnsurePlan(
			this.<String>getColumnOriginalValue("otherRefEnsurePlan"));
		accMediLabManagementReqImpl.setPlannedManageReview(
			this.<String>getColumnOriginalValue("plannedManageReview"));
		accMediLabManagementReqImpl.setOtherRefPlanned(
			this.<String>getColumnOriginalValue("otherRefPlanned"));
		accMediLabManagementReqImpl.setAvailablePersonnel(
			this.<String>getColumnOriginalValue("availablePersonnel"));
		accMediLabManagementReqImpl.setManualRefAvailable(
			this.<String>getColumnOriginalValue("manualRefAvailable"));
		accMediLabManagementReqImpl.setEducationProgramme(
			this.<String>getColumnOriginalValue("educationProgramme"));
		accMediLabManagementReqImpl.setManualRefEducation(
			this.<String>getColumnOriginalValue("manualRefEducation"));
		accMediLabManagementReqImpl.setEnsureAccomodation(
			this.<String>getColumnOriginalValue("ensureAccomodation"));
		accMediLabManagementReqImpl.setManualRefAccom(
			this.<String>getColumnOriginalValue("manualRefAccom"));
		accMediLabManagementReqImpl.setProcessForSelection(
			this.<String>getColumnOriginalValue("processForSelection"));
		accMediLabManagementReqImpl.setManualRefSelection(
			this.<String>getColumnOriginalValue("manualRefSelection"));
		accMediLabManagementReqImpl.setVerifyReagents(
			this.<String>getColumnOriginalValue("verifyReagents"));
		accMediLabManagementReqImpl.setManualRefReagents(
			this.<String>getColumnOriginalValue("manualRefReagents"));
		accMediLabManagementReqImpl.setDocProcedure(
			this.<String>getColumnOriginalValue("docProcedure"));
		accMediLabManagementReqImpl.setManualRefDocProce(
			this.<String>getColumnOriginalValue("manualRefDocProce"));
		accMediLabManagementReqImpl.setUseExamMethods(
			this.<String>getColumnOriginalValue("useExamMethods"));
		accMediLabManagementReqImpl.setManualRefExam(
			this.<String>getColumnOriginalValue("manualRefExam"));
		accMediLabManagementReqImpl.setMonitoringValidity(
			this.<String>getColumnOriginalValue("monitoringValidity"));
		accMediLabManagementReqImpl.setManualRefValidity(
			this.<String>getColumnOriginalValue("manualRefValidity"));
		accMediLabManagementReqImpl.setValidateExam(
			this.<String>getColumnOriginalValue("validateExam"));
		accMediLabManagementReqImpl.setManualRefValidateExam(
			this.<String>getColumnOriginalValue("manualRefValidateExam"));
		accMediLabManagementReqImpl.setUncertainityReview(
			this.<String>getColumnOriginalValue("uncertainityReview"));
		accMediLabManagementReqImpl.setManualRefUncertainity(
			this.<String>getColumnOriginalValue("manualRefUncertainity"));
		accMediLabManagementReqImpl.setPreventResRelease(
			this.<String>getColumnOriginalValue("preventResRelease"));
		accMediLabManagementReqImpl.setManualRefPrevent(
			this.<String>getColumnOriginalValue("manualRefPrevent"));
		accMediLabManagementReqImpl.setEquipmentMaintenance(
			this.<String>getColumnOriginalValue("equipmentMaintenance"));
		accMediLabManagementReqImpl.setManualRefMaintenance(
			this.<String>getColumnOriginalValue("manualRefMaintenance"));
		accMediLabManagementReqImpl.setEquipCalibration(
			this.<String>getColumnOriginalValue("equipCalibration"));
		accMediLabManagementReqImpl.setManualRefCalibrat(
			this.<String>getColumnOriginalValue("manualRefCalibrat"));
		accMediLabManagementReqImpl.setProficencyTesting(
			this.<String>getColumnOriginalValue("proficencyTesting"));
		accMediLabManagementReqImpl.setManualRefProfiTest(
			this.<String>getColumnOriginalValue("manualRefProfiTest"));
		accMediLabManagementReqImpl.setPostExamReliabilty(
			this.<String>getColumnOriginalValue("postExamReliabilty"));
		accMediLabManagementReqImpl.setManualRefPostExam(
			this.<String>getColumnOriginalValue("manualRefPostExam"));
		accMediLabManagementReqImpl.setReportedAccurately(
			this.<String>getColumnOriginalValue("reportedAccurately"));
		accMediLabManagementReqImpl.setManualRefReported(
			this.<String>getColumnOriginalValue("manualRefReported"));
		accMediLabManagementReqImpl.setResponsiblitySpecified(
			this.<String>getColumnOriginalValue("responsiblitySpecified"));
		accMediLabManagementReqImpl.setManualRefSpecified(
			this.<String>getColumnOriginalValue("manualRefSpecified"));
		accMediLabManagementReqImpl.setEnsureAuthorities(
			this.<String>getColumnOriginalValue("ensureAuthorities"));
		accMediLabManagementReqImpl.setManualRefAuthorities(
			this.<String>getColumnOriginalValue("manualRefAuthorities"));
		accMediLabManagementReqImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accMediLabManagementReqImpl;
	}

	@Override
	public int compareTo(AccMediLabManagementReq accMediLabManagementReq) {
		long primaryKey = accMediLabManagementReq.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccMediLabManagementReq)) {
			return false;
		}

		AccMediLabManagementReq accMediLabManagementReq =
			(AccMediLabManagementReq)object;

		long primaryKey = accMediLabManagementReq.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;
	}

	@Override
	public CacheModel<AccMediLabManagementReq> toCacheModel() {
		AccMediLabManagementReqCacheModel accMediLabManagementReqCacheModel =
			new AccMediLabManagementReqCacheModel();

		accMediLabManagementReqCacheModel.uuid = getUuid();

		String uuid = accMediLabManagementReqCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accMediLabManagementReqCacheModel.uuid = null;
		}

		accMediLabManagementReqCacheModel.accMediLabManagementReqId =
			getAccMediLabManagementReqId();

		accMediLabManagementReqCacheModel.groupId = getGroupId();

		accMediLabManagementReqCacheModel.companyId = getCompanyId();

		accMediLabManagementReqCacheModel.userId = getUserId();

		accMediLabManagementReqCacheModel.userName = getUserName();

		String userName = accMediLabManagementReqCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accMediLabManagementReqCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accMediLabManagementReqCacheModel.createDate = createDate.getTime();
		}
		else {
			accMediLabManagementReqCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accMediLabManagementReqCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accMediLabManagementReqCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accMediLabManagementReqCacheModel.managementEstablished =
			getManagementEstablished();

		String managementEstablished =
			accMediLabManagementReqCacheModel.managementEstablished;

		if ((managementEstablished != null) &&
			(managementEstablished.length() == 0)) {

			accMediLabManagementReqCacheModel.managementEstablished = null;
		}

		accMediLabManagementReqCacheModel.qMRefManagement =
			getQMRefManagement();

		String qMRefManagement =
			accMediLabManagementReqCacheModel.qMRefManagement;

		if ((qMRefManagement != null) && (qMRefManagement.length() == 0)) {
			accMediLabManagementReqCacheModel.qMRefManagement = null;
		}

		accMediLabManagementReqCacheModel.personAware = getPersonAware();

		String personAware = accMediLabManagementReqCacheModel.personAware;

		if ((personAware != null) && (personAware.length() == 0)) {
			accMediLabManagementReqCacheModel.personAware = null;
		}

		accMediLabManagementReqCacheModel.qMRefPerson = getQMRefPerson();

		String qMRefPerson = accMediLabManagementReqCacheModel.qMRefPerson;

		if ((qMRefPerson != null) && (qMRefPerson.length() == 0)) {
			accMediLabManagementReqCacheModel.qMRefPerson = null;
		}

		accMediLabManagementReqCacheModel.policiesAcknowledged =
			getPoliciesAcknowledged();

		String policiesAcknowledged =
			accMediLabManagementReqCacheModel.policiesAcknowledged;

		if ((policiesAcknowledged != null) &&
			(policiesAcknowledged.length() == 0)) {

			accMediLabManagementReqCacheModel.policiesAcknowledged = null;
		}

		accMediLabManagementReqCacheModel.qMRefPolicies = getQMRefPolicies();

		String qMRefPolicies = accMediLabManagementReqCacheModel.qMRefPolicies;

		if ((qMRefPolicies != null) && (qMRefPolicies.length() == 0)) {
			accMediLabManagementReqCacheModel.qMRefPolicies = null;
		}

		accMediLabManagementReqCacheModel.controlledDocument =
			getControlledDocument();

		String controlledDocument =
			accMediLabManagementReqCacheModel.controlledDocument;

		if ((controlledDocument != null) &&
			(controlledDocument.length() == 0)) {

			accMediLabManagementReqCacheModel.controlledDocument = null;
		}

		accMediLabManagementReqCacheModel.qMRefControlDoc =
			getQMRefControlDoc();

		String qMRefControlDoc =
			accMediLabManagementReqCacheModel.qMRefControlDoc;

		if ((qMRefControlDoc != null) && (qMRefControlDoc.length() == 0)) {
			accMediLabManagementReqCacheModel.qMRefControlDoc = null;
		}

		accMediLabManagementReqCacheModel.laboratoryEstablished =
			getLaboratoryEstablished();

		String laboratoryEstablished =
			accMediLabManagementReqCacheModel.laboratoryEstablished;

		if ((laboratoryEstablished != null) &&
			(laboratoryEstablished.length() == 0)) {

			accMediLabManagementReqCacheModel.laboratoryEstablished = null;
		}

		accMediLabManagementReqCacheModel.qMReflabEstab = getQMReflabEstab();

		String qMReflabEstab = accMediLabManagementReqCacheModel.qMReflabEstab;

		if ((qMReflabEstab != null) && (qMReflabEstab.length() == 0)) {
			accMediLabManagementReqCacheModel.qMReflabEstab = null;
		}

		accMediLabManagementReqCacheModel.identifiedRisks =
			getIdentifiedRisks();

		String identifiedRisks =
			accMediLabManagementReqCacheModel.identifiedRisks;

		if ((identifiedRisks != null) && (identifiedRisks.length() == 0)) {
			accMediLabManagementReqCacheModel.identifiedRisks = null;
		}

		accMediLabManagementReqCacheModel.qMRefRisks = getQMRefRisks();

		String qMRefRisks = accMediLabManagementReqCacheModel.qMRefRisks;

		if ((qMRefRisks != null) && (qMRefRisks.length() == 0)) {
			accMediLabManagementReqCacheModel.qMRefRisks = null;
		}

		accMediLabManagementReqCacheModel.havePersonnel = getHavePersonnel();

		String havePersonnel = accMediLabManagementReqCacheModel.havePersonnel;

		if ((havePersonnel != null) && (havePersonnel.length() == 0)) {
			accMediLabManagementReqCacheModel.havePersonnel = null;
		}

		accMediLabManagementReqCacheModel.qMRefPersonnel = getQMRefPersonnel();

		String qMRefPersonnel =
			accMediLabManagementReqCacheModel.qMRefPersonnel;

		if ((qMRefPersonnel != null) && (qMRefPersonnel.length() == 0)) {
			accMediLabManagementReqCacheModel.qMRefPersonnel = null;
		}

		accMediLabManagementReqCacheModel.authorizePersonnel =
			getAuthorizePersonnel();

		String authorizePersonnel =
			accMediLabManagementReqCacheModel.authorizePersonnel;

		if ((authorizePersonnel != null) &&
			(authorizePersonnel.length() == 0)) {

			accMediLabManagementReqCacheModel.authorizePersonnel = null;
		}

		accMediLabManagementReqCacheModel.qMRefAuthorize = getQMRefAuthorize();

		String qMRefAuthorize =
			accMediLabManagementReqCacheModel.qMRefAuthorize;

		if ((qMRefAuthorize != null) && (qMRefAuthorize.length() == 0)) {
			accMediLabManagementReqCacheModel.qMRefAuthorize = null;
		}

		accMediLabManagementReqCacheModel.labControlDocsFulfilment =
			getLabControlDocsFulfilment();

		String labControlDocsFulfilment =
			accMediLabManagementReqCacheModel.labControlDocsFulfilment;

		if ((labControlDocsFulfilment != null) &&
			(labControlDocsFulfilment.length() == 0)) {

			accMediLabManagementReqCacheModel.labControlDocsFulfilment = null;
		}

		accMediLabManagementReqCacheModel.otherRefFulfil = getOtherRefFulfil();

		String otherRefFulfil =
			accMediLabManagementReqCacheModel.otherRefFulfil;

		if ((otherRefFulfil != null) && (otherRefFulfil.length() == 0)) {
			accMediLabManagementReqCacheModel.otherRefFulfil = null;
		}

		accMediLabManagementReqCacheModel.legibleRecordsFulfil =
			getLegibleRecordsFulfil();

		String legibleRecordsFulfil =
			accMediLabManagementReqCacheModel.legibleRecordsFulfil;

		if ((legibleRecordsFulfil != null) &&
			(legibleRecordsFulfil.length() == 0)) {

			accMediLabManagementReqCacheModel.legibleRecordsFulfil = null;
		}

		accMediLabManagementReqCacheModel.otherRefLegibleRec =
			getOtherRefLegibleRec();

		String otherRefLegibleRec =
			accMediLabManagementReqCacheModel.otherRefLegibleRec;

		if ((otherRefLegibleRec != null) &&
			(otherRefLegibleRec.length() == 0)) {

			accMediLabManagementReqCacheModel.otherRefLegibleRec = null;
		}

		accMediLabManagementReqCacheModel.proceduresInPlace =
			getProceduresInPlace();

		String proceduresInPlace =
			accMediLabManagementReqCacheModel.proceduresInPlace;

		if ((proceduresInPlace != null) && (proceduresInPlace.length() == 0)) {
			accMediLabManagementReqCacheModel.proceduresInPlace = null;
		}

		accMediLabManagementReqCacheModel.otherRefProcedure =
			getOtherRefProcedure();

		String otherRefProcedure =
			accMediLabManagementReqCacheModel.otherRefProcedure;

		if ((otherRefProcedure != null) && (otherRefProcedure.length() == 0)) {
			accMediLabManagementReqCacheModel.otherRefProcedure = null;
		}

		accMediLabManagementReqCacheModel.communicatedRequirement =
			getCommunicatedRequirement();

		String communicatedRequirement =
			accMediLabManagementReqCacheModel.communicatedRequirement;

		if ((communicatedRequirement != null) &&
			(communicatedRequirement.length() == 0)) {

			accMediLabManagementReqCacheModel.communicatedRequirement = null;
		}

		accMediLabManagementReqCacheModel.otherRefRequirement =
			getOtherRefRequirement();

		String otherRefRequirement =
			accMediLabManagementReqCacheModel.otherRefRequirement;

		if ((otherRefRequirement != null) &&
			(otherRefRequirement.length() == 0)) {

			accMediLabManagementReqCacheModel.otherRefRequirement = null;
		}

		accMediLabManagementReqCacheModel.procedureForSelection =
			getProcedureForSelection();

		String procedureForSelection =
			accMediLabManagementReqCacheModel.procedureForSelection;

		if ((procedureForSelection != null) &&
			(procedureForSelection.length() == 0)) {

			accMediLabManagementReqCacheModel.procedureForSelection = null;
		}

		accMediLabManagementReqCacheModel.otherRefSelection =
			getOtherRefSelection();

		String otherRefSelection =
			accMediLabManagementReqCacheModel.otherRefSelection;

		if ((otherRefSelection != null) && (otherRefSelection.length() == 0)) {
			accMediLabManagementReqCacheModel.otherRefSelection = null;
		}

		accMediLabManagementReqCacheModel.arrangementInPlace =
			getArrangementInPlace();

		String arrangementInPlace =
			accMediLabManagementReqCacheModel.arrangementInPlace;

		if ((arrangementInPlace != null) &&
			(arrangementInPlace.length() == 0)) {

			accMediLabManagementReqCacheModel.arrangementInPlace = null;
		}

		accMediLabManagementReqCacheModel.otherRefArrange =
			getOtherRefArrange();

		String otherRefArrange =
			accMediLabManagementReqCacheModel.otherRefArrange;

		if ((otherRefArrange != null) && (otherRefArrange.length() == 0)) {
			accMediLabManagementReqCacheModel.otherRefArrange = null;
		}

		accMediLabManagementReqCacheModel.processInPlace = getProcessInPlace();

		String processInPlace =
			accMediLabManagementReqCacheModel.processInPlace;

		if ((processInPlace != null) && (processInPlace.length() == 0)) {
			accMediLabManagementReqCacheModel.processInPlace = null;
		}

		accMediLabManagementReqCacheModel.otherRefProcess =
			getOtherRefProcess();

		String otherRefProcess =
			accMediLabManagementReqCacheModel.otherRefProcess;

		if ((otherRefProcess != null) && (otherRefProcess.length() == 0)) {
			accMediLabManagementReqCacheModel.otherRefProcess = null;
		}

		accMediLabManagementReqCacheModel.labOperateProgramme =
			getLabOperateProgramme();

		String labOperateProgramme =
			accMediLabManagementReqCacheModel.labOperateProgramme;

		if ((labOperateProgramme != null) &&
			(labOperateProgramme.length() == 0)) {

			accMediLabManagementReqCacheModel.labOperateProgramme = null;
		}

		accMediLabManagementReqCacheModel.otherRefLabOperate =
			getOtherRefLabOperate();

		String otherRefLabOperate =
			accMediLabManagementReqCacheModel.otherRefLabOperate;

		if ((otherRefLabOperate != null) &&
			(otherRefLabOperate.length() == 0)) {

			accMediLabManagementReqCacheModel.otherRefLabOperate = null;
		}

		accMediLabManagementReqCacheModel.identifyOpportunities =
			getIdentifyOpportunities();

		String identifyOpportunities =
			accMediLabManagementReqCacheModel.identifyOpportunities;

		if ((identifyOpportunities != null) &&
			(identifyOpportunities.length() == 0)) {

			accMediLabManagementReqCacheModel.identifyOpportunities = null;
		}

		accMediLabManagementReqCacheModel.otherRefOpportunity =
			getOtherRefOpportunity();

		String otherRefOpportunity =
			accMediLabManagementReqCacheModel.otherRefOpportunity;

		if ((otherRefOpportunity != null) &&
			(otherRefOpportunity.length() == 0)) {

			accMediLabManagementReqCacheModel.otherRefOpportunity = null;
		}

		accMediLabManagementReqCacheModel.demonstrateFulfilment =
			getDemonstrateFulfilment();

		String demonstrateFulfilment =
			accMediLabManagementReqCacheModel.demonstrateFulfilment;

		if ((demonstrateFulfilment != null) &&
			(demonstrateFulfilment.length() == 0)) {

			accMediLabManagementReqCacheModel.demonstrateFulfilment = null;
		}

		accMediLabManagementReqCacheModel.otherRefDemonstrate =
			getOtherRefDemonstrate();

		String otherRefDemonstrate =
			accMediLabManagementReqCacheModel.otherRefDemonstrate;

		if ((otherRefDemonstrate != null) &&
			(otherRefDemonstrate.length() == 0)) {

			accMediLabManagementReqCacheModel.otherRefDemonstrate = null;
		}

		accMediLabManagementReqCacheModel.ensureLabPlan = getEnsureLabPlan();

		String ensureLabPlan = accMediLabManagementReqCacheModel.ensureLabPlan;

		if ((ensureLabPlan != null) && (ensureLabPlan.length() == 0)) {
			accMediLabManagementReqCacheModel.ensureLabPlan = null;
		}

		accMediLabManagementReqCacheModel.otherRefEnsurePlan =
			getOtherRefEnsurePlan();

		String otherRefEnsurePlan =
			accMediLabManagementReqCacheModel.otherRefEnsurePlan;

		if ((otherRefEnsurePlan != null) &&
			(otherRefEnsurePlan.length() == 0)) {

			accMediLabManagementReqCacheModel.otherRefEnsurePlan = null;
		}

		accMediLabManagementReqCacheModel.plannedManageReview =
			getPlannedManageReview();

		String plannedManageReview =
			accMediLabManagementReqCacheModel.plannedManageReview;

		if ((plannedManageReview != null) &&
			(plannedManageReview.length() == 0)) {

			accMediLabManagementReqCacheModel.plannedManageReview = null;
		}

		accMediLabManagementReqCacheModel.otherRefPlanned =
			getOtherRefPlanned();

		String otherRefPlanned =
			accMediLabManagementReqCacheModel.otherRefPlanned;

		if ((otherRefPlanned != null) && (otherRefPlanned.length() == 0)) {
			accMediLabManagementReqCacheModel.otherRefPlanned = null;
		}

		accMediLabManagementReqCacheModel.availablePersonnel =
			getAvailablePersonnel();

		String availablePersonnel =
			accMediLabManagementReqCacheModel.availablePersonnel;

		if ((availablePersonnel != null) &&
			(availablePersonnel.length() == 0)) {

			accMediLabManagementReqCacheModel.availablePersonnel = null;
		}

		accMediLabManagementReqCacheModel.manualRefAvailable =
			getManualRefAvailable();

		String manualRefAvailable =
			accMediLabManagementReqCacheModel.manualRefAvailable;

		if ((manualRefAvailable != null) &&
			(manualRefAvailable.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefAvailable = null;
		}

		accMediLabManagementReqCacheModel.educationProgramme =
			getEducationProgramme();

		String educationProgramme =
			accMediLabManagementReqCacheModel.educationProgramme;

		if ((educationProgramme != null) &&
			(educationProgramme.length() == 0)) {

			accMediLabManagementReqCacheModel.educationProgramme = null;
		}

		accMediLabManagementReqCacheModel.manualRefEducation =
			getManualRefEducation();

		String manualRefEducation =
			accMediLabManagementReqCacheModel.manualRefEducation;

		if ((manualRefEducation != null) &&
			(manualRefEducation.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefEducation = null;
		}

		accMediLabManagementReqCacheModel.ensureAccomodation =
			getEnsureAccomodation();

		String ensureAccomodation =
			accMediLabManagementReqCacheModel.ensureAccomodation;

		if ((ensureAccomodation != null) &&
			(ensureAccomodation.length() == 0)) {

			accMediLabManagementReqCacheModel.ensureAccomodation = null;
		}

		accMediLabManagementReqCacheModel.manualRefAccom = getManualRefAccom();

		String manualRefAccom =
			accMediLabManagementReqCacheModel.manualRefAccom;

		if ((manualRefAccom != null) && (manualRefAccom.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefAccom = null;
		}

		accMediLabManagementReqCacheModel.processForSelection =
			getProcessForSelection();

		String processForSelection =
			accMediLabManagementReqCacheModel.processForSelection;

		if ((processForSelection != null) &&
			(processForSelection.length() == 0)) {

			accMediLabManagementReqCacheModel.processForSelection = null;
		}

		accMediLabManagementReqCacheModel.manualRefSelection =
			getManualRefSelection();

		String manualRefSelection =
			accMediLabManagementReqCacheModel.manualRefSelection;

		if ((manualRefSelection != null) &&
			(manualRefSelection.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefSelection = null;
		}

		accMediLabManagementReqCacheModel.verifyReagents = getVerifyReagents();

		String verifyReagents =
			accMediLabManagementReqCacheModel.verifyReagents;

		if ((verifyReagents != null) && (verifyReagents.length() == 0)) {
			accMediLabManagementReqCacheModel.verifyReagents = null;
		}

		accMediLabManagementReqCacheModel.manualRefReagents =
			getManualRefReagents();

		String manualRefReagents =
			accMediLabManagementReqCacheModel.manualRefReagents;

		if ((manualRefReagents != null) && (manualRefReagents.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefReagents = null;
		}

		accMediLabManagementReqCacheModel.docProcedure = getDocProcedure();

		String docProcedure = accMediLabManagementReqCacheModel.docProcedure;

		if ((docProcedure != null) && (docProcedure.length() == 0)) {
			accMediLabManagementReqCacheModel.docProcedure = null;
		}

		accMediLabManagementReqCacheModel.manualRefDocProce =
			getManualRefDocProce();

		String manualRefDocProce =
			accMediLabManagementReqCacheModel.manualRefDocProce;

		if ((manualRefDocProce != null) && (manualRefDocProce.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefDocProce = null;
		}

		accMediLabManagementReqCacheModel.useExamMethods = getUseExamMethods();

		String useExamMethods =
			accMediLabManagementReqCacheModel.useExamMethods;

		if ((useExamMethods != null) && (useExamMethods.length() == 0)) {
			accMediLabManagementReqCacheModel.useExamMethods = null;
		}

		accMediLabManagementReqCacheModel.manualRefExam = getManualRefExam();

		String manualRefExam = accMediLabManagementReqCacheModel.manualRefExam;

		if ((manualRefExam != null) && (manualRefExam.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefExam = null;
		}

		accMediLabManagementReqCacheModel.monitoringValidity =
			getMonitoringValidity();

		String monitoringValidity =
			accMediLabManagementReqCacheModel.monitoringValidity;

		if ((monitoringValidity != null) &&
			(monitoringValidity.length() == 0)) {

			accMediLabManagementReqCacheModel.monitoringValidity = null;
		}

		accMediLabManagementReqCacheModel.manualRefValidity =
			getManualRefValidity();

		String manualRefValidity =
			accMediLabManagementReqCacheModel.manualRefValidity;

		if ((manualRefValidity != null) && (manualRefValidity.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefValidity = null;
		}

		accMediLabManagementReqCacheModel.validateExam = getValidateExam();

		String validateExam = accMediLabManagementReqCacheModel.validateExam;

		if ((validateExam != null) && (validateExam.length() == 0)) {
			accMediLabManagementReqCacheModel.validateExam = null;
		}

		accMediLabManagementReqCacheModel.manualRefValidateExam =
			getManualRefValidateExam();

		String manualRefValidateExam =
			accMediLabManagementReqCacheModel.manualRefValidateExam;

		if ((manualRefValidateExam != null) &&
			(manualRefValidateExam.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefValidateExam = null;
		}

		accMediLabManagementReqCacheModel.uncertainityReview =
			getUncertainityReview();

		String uncertainityReview =
			accMediLabManagementReqCacheModel.uncertainityReview;

		if ((uncertainityReview != null) &&
			(uncertainityReview.length() == 0)) {

			accMediLabManagementReqCacheModel.uncertainityReview = null;
		}

		accMediLabManagementReqCacheModel.manualRefUncertainity =
			getManualRefUncertainity();

		String manualRefUncertainity =
			accMediLabManagementReqCacheModel.manualRefUncertainity;

		if ((manualRefUncertainity != null) &&
			(manualRefUncertainity.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefUncertainity = null;
		}

		accMediLabManagementReqCacheModel.preventResRelease =
			getPreventResRelease();

		String preventResRelease =
			accMediLabManagementReqCacheModel.preventResRelease;

		if ((preventResRelease != null) && (preventResRelease.length() == 0)) {
			accMediLabManagementReqCacheModel.preventResRelease = null;
		}

		accMediLabManagementReqCacheModel.manualRefPrevent =
			getManualRefPrevent();

		String manualRefPrevent =
			accMediLabManagementReqCacheModel.manualRefPrevent;

		if ((manualRefPrevent != null) && (manualRefPrevent.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefPrevent = null;
		}

		accMediLabManagementReqCacheModel.equipmentMaintenance =
			getEquipmentMaintenance();

		String equipmentMaintenance =
			accMediLabManagementReqCacheModel.equipmentMaintenance;

		if ((equipmentMaintenance != null) &&
			(equipmentMaintenance.length() == 0)) {

			accMediLabManagementReqCacheModel.equipmentMaintenance = null;
		}

		accMediLabManagementReqCacheModel.manualRefMaintenance =
			getManualRefMaintenance();

		String manualRefMaintenance =
			accMediLabManagementReqCacheModel.manualRefMaintenance;

		if ((manualRefMaintenance != null) &&
			(manualRefMaintenance.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefMaintenance = null;
		}

		accMediLabManagementReqCacheModel.equipCalibration =
			getEquipCalibration();

		String equipCalibration =
			accMediLabManagementReqCacheModel.equipCalibration;

		if ((equipCalibration != null) && (equipCalibration.length() == 0)) {
			accMediLabManagementReqCacheModel.equipCalibration = null;
		}

		accMediLabManagementReqCacheModel.manualRefCalibrat =
			getManualRefCalibrat();

		String manualRefCalibrat =
			accMediLabManagementReqCacheModel.manualRefCalibrat;

		if ((manualRefCalibrat != null) && (manualRefCalibrat.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefCalibrat = null;
		}

		accMediLabManagementReqCacheModel.proficencyTesting =
			getProficencyTesting();

		String proficencyTesting =
			accMediLabManagementReqCacheModel.proficencyTesting;

		if ((proficencyTesting != null) && (proficencyTesting.length() == 0)) {
			accMediLabManagementReqCacheModel.proficencyTesting = null;
		}

		accMediLabManagementReqCacheModel.manualRefProfiTest =
			getManualRefProfiTest();

		String manualRefProfiTest =
			accMediLabManagementReqCacheModel.manualRefProfiTest;

		if ((manualRefProfiTest != null) &&
			(manualRefProfiTest.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefProfiTest = null;
		}

		accMediLabManagementReqCacheModel.postExamReliabilty =
			getPostExamReliabilty();

		String postExamReliabilty =
			accMediLabManagementReqCacheModel.postExamReliabilty;

		if ((postExamReliabilty != null) &&
			(postExamReliabilty.length() == 0)) {

			accMediLabManagementReqCacheModel.postExamReliabilty = null;
		}

		accMediLabManagementReqCacheModel.manualRefPostExam =
			getManualRefPostExam();

		String manualRefPostExam =
			accMediLabManagementReqCacheModel.manualRefPostExam;

		if ((manualRefPostExam != null) && (manualRefPostExam.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefPostExam = null;
		}

		accMediLabManagementReqCacheModel.reportedAccurately =
			getReportedAccurately();

		String reportedAccurately =
			accMediLabManagementReqCacheModel.reportedAccurately;

		if ((reportedAccurately != null) &&
			(reportedAccurately.length() == 0)) {

			accMediLabManagementReqCacheModel.reportedAccurately = null;
		}

		accMediLabManagementReqCacheModel.manualRefReported =
			getManualRefReported();

		String manualRefReported =
			accMediLabManagementReqCacheModel.manualRefReported;

		if ((manualRefReported != null) && (manualRefReported.length() == 0)) {
			accMediLabManagementReqCacheModel.manualRefReported = null;
		}

		accMediLabManagementReqCacheModel.responsiblitySpecified =
			getResponsiblitySpecified();

		String responsiblitySpecified =
			accMediLabManagementReqCacheModel.responsiblitySpecified;

		if ((responsiblitySpecified != null) &&
			(responsiblitySpecified.length() == 0)) {

			accMediLabManagementReqCacheModel.responsiblitySpecified = null;
		}

		accMediLabManagementReqCacheModel.manualRefSpecified =
			getManualRefSpecified();

		String manualRefSpecified =
			accMediLabManagementReqCacheModel.manualRefSpecified;

		if ((manualRefSpecified != null) &&
			(manualRefSpecified.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefSpecified = null;
		}

		accMediLabManagementReqCacheModel.ensureAuthorities =
			getEnsureAuthorities();

		String ensureAuthorities =
			accMediLabManagementReqCacheModel.ensureAuthorities;

		if ((ensureAuthorities != null) && (ensureAuthorities.length() == 0)) {
			accMediLabManagementReqCacheModel.ensureAuthorities = null;
		}

		accMediLabManagementReqCacheModel.manualRefAuthorities =
			getManualRefAuthorities();

		String manualRefAuthorities =
			accMediLabManagementReqCacheModel.manualRefAuthorities;

		if ((manualRefAuthorities != null) &&
			(manualRefAuthorities.length() == 0)) {

			accMediLabManagementReqCacheModel.manualRefAuthorities = null;
		}

		accMediLabManagementReqCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accMediLabManagementReqCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccMediLabManagementReq, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccMediLabManagementReq, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabManagementReq, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccMediLabManagementReq)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AccMediLabManagementReq>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AccMediLabManagementReq.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accMediLabManagementReqId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _managementEstablished;
	private String _qMRefManagement;
	private String _personAware;
	private String _qMRefPerson;
	private String _policiesAcknowledged;
	private String _qMRefPolicies;
	private String _controlledDocument;
	private String _qMRefControlDoc;
	private String _laboratoryEstablished;
	private String _qMReflabEstab;
	private String _identifiedRisks;
	private String _qMRefRisks;
	private String _havePersonnel;
	private String _qMRefPersonnel;
	private String _authorizePersonnel;
	private String _qMRefAuthorize;
	private String _labControlDocsFulfilment;
	private String _otherRefFulfil;
	private String _legibleRecordsFulfil;
	private String _otherRefLegibleRec;
	private String _proceduresInPlace;
	private String _otherRefProcedure;
	private String _communicatedRequirement;
	private String _otherRefRequirement;
	private String _procedureForSelection;
	private String _otherRefSelection;
	private String _arrangementInPlace;
	private String _otherRefArrange;
	private String _processInPlace;
	private String _otherRefProcess;
	private String _labOperateProgramme;
	private String _otherRefLabOperate;
	private String _identifyOpportunities;
	private String _otherRefOpportunity;
	private String _demonstrateFulfilment;
	private String _otherRefDemonstrate;
	private String _ensureLabPlan;
	private String _otherRefEnsurePlan;
	private String _plannedManageReview;
	private String _otherRefPlanned;
	private String _availablePersonnel;
	private String _manualRefAvailable;
	private String _educationProgramme;
	private String _manualRefEducation;
	private String _ensureAccomodation;
	private String _manualRefAccom;
	private String _processForSelection;
	private String _manualRefSelection;
	private String _verifyReagents;
	private String _manualRefReagents;
	private String _docProcedure;
	private String _manualRefDocProce;
	private String _useExamMethods;
	private String _manualRefExam;
	private String _monitoringValidity;
	private String _manualRefValidity;
	private String _validateExam;
	private String _manualRefValidateExam;
	private String _uncertainityReview;
	private String _manualRefUncertainity;
	private String _preventResRelease;
	private String _manualRefPrevent;
	private String _equipmentMaintenance;
	private String _manualRefMaintenance;
	private String _equipCalibration;
	private String _manualRefCalibrat;
	private String _proficencyTesting;
	private String _manualRefProfiTest;
	private String _postExamReliabilty;
	private String _manualRefPostExam;
	private String _reportedAccurately;
	private String _manualRefReported;
	private String _responsiblitySpecified;
	private String _manualRefSpecified;
	private String _ensureAuthorities;
	private String _manualRefAuthorities;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccMediLabManagementReq, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccMediLabManagementReq)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accMediLabManagementReqId", _accMediLabManagementReqId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"managementEstablished", _managementEstablished);
		_columnOriginalValues.put("qMRefManagement", _qMRefManagement);
		_columnOriginalValues.put("personAware", _personAware);
		_columnOriginalValues.put("qMRefPerson", _qMRefPerson);
		_columnOriginalValues.put(
			"policiesAcknowledged", _policiesAcknowledged);
		_columnOriginalValues.put("qMRefPolicies", _qMRefPolicies);
		_columnOriginalValues.put("controlledDocument", _controlledDocument);
		_columnOriginalValues.put("qMRefControlDoc", _qMRefControlDoc);
		_columnOriginalValues.put(
			"laboratoryEstablished", _laboratoryEstablished);
		_columnOriginalValues.put("qMReflabEstab", _qMReflabEstab);
		_columnOriginalValues.put("identifiedRisks", _identifiedRisks);
		_columnOriginalValues.put("qMRefRisks", _qMRefRisks);
		_columnOriginalValues.put("havePersonnel", _havePersonnel);
		_columnOriginalValues.put("qMRefPersonnel", _qMRefPersonnel);
		_columnOriginalValues.put("authorizePersonnel", _authorizePersonnel);
		_columnOriginalValues.put("qMRefAuthorize", _qMRefAuthorize);
		_columnOriginalValues.put(
			"labControlDocsFulfilment", _labControlDocsFulfilment);
		_columnOriginalValues.put("otherRefFulfil", _otherRefFulfil);
		_columnOriginalValues.put(
			"legibleRecordsFulfil", _legibleRecordsFulfil);
		_columnOriginalValues.put("otherRefLegibleRec", _otherRefLegibleRec);
		_columnOriginalValues.put("proceduresInPlace", _proceduresInPlace);
		_columnOriginalValues.put("otherRefProcedure", _otherRefProcedure);
		_columnOriginalValues.put(
			"communicatedRequirement", _communicatedRequirement);
		_columnOriginalValues.put("otherRefRequirement", _otherRefRequirement);
		_columnOriginalValues.put(
			"procedureForSelection", _procedureForSelection);
		_columnOriginalValues.put("otherRefSelection", _otherRefSelection);
		_columnOriginalValues.put("arrangementInPlace", _arrangementInPlace);
		_columnOriginalValues.put("otherRefArrange", _otherRefArrange);
		_columnOriginalValues.put("processInPlace", _processInPlace);
		_columnOriginalValues.put("otherRefProcess", _otherRefProcess);
		_columnOriginalValues.put("labOperateProgramme", _labOperateProgramme);
		_columnOriginalValues.put("otherRefLabOperate", _otherRefLabOperate);
		_columnOriginalValues.put(
			"identifyOpportunities", _identifyOpportunities);
		_columnOriginalValues.put("otherRefOpportunity", _otherRefOpportunity);
		_columnOriginalValues.put(
			"demonstrateFulfilment", _demonstrateFulfilment);
		_columnOriginalValues.put("otherRefDemonstrate", _otherRefDemonstrate);
		_columnOriginalValues.put("ensureLabPlan", _ensureLabPlan);
		_columnOriginalValues.put("otherRefEnsurePlan", _otherRefEnsurePlan);
		_columnOriginalValues.put("plannedManageReview", _plannedManageReview);
		_columnOriginalValues.put("otherRefPlanned", _otherRefPlanned);
		_columnOriginalValues.put("availablePersonnel", _availablePersonnel);
		_columnOriginalValues.put("manualRefAvailable", _manualRefAvailable);
		_columnOriginalValues.put("educationProgramme", _educationProgramme);
		_columnOriginalValues.put("manualRefEducation", _manualRefEducation);
		_columnOriginalValues.put("ensureAccomodation", _ensureAccomodation);
		_columnOriginalValues.put("manualRefAccom", _manualRefAccom);
		_columnOriginalValues.put("processForSelection", _processForSelection);
		_columnOriginalValues.put("manualRefSelection", _manualRefSelection);
		_columnOriginalValues.put("verifyReagents", _verifyReagents);
		_columnOriginalValues.put("manualRefReagents", _manualRefReagents);
		_columnOriginalValues.put("docProcedure", _docProcedure);
		_columnOriginalValues.put("manualRefDocProce", _manualRefDocProce);
		_columnOriginalValues.put("useExamMethods", _useExamMethods);
		_columnOriginalValues.put("manualRefExam", _manualRefExam);
		_columnOriginalValues.put("monitoringValidity", _monitoringValidity);
		_columnOriginalValues.put("manualRefValidity", _manualRefValidity);
		_columnOriginalValues.put("validateExam", _validateExam);
		_columnOriginalValues.put(
			"manualRefValidateExam", _manualRefValidateExam);
		_columnOriginalValues.put("uncertainityReview", _uncertainityReview);
		_columnOriginalValues.put(
			"manualRefUncertainity", _manualRefUncertainity);
		_columnOriginalValues.put("preventResRelease", _preventResRelease);
		_columnOriginalValues.put("manualRefPrevent", _manualRefPrevent);
		_columnOriginalValues.put(
			"equipmentMaintenance", _equipmentMaintenance);
		_columnOriginalValues.put(
			"manualRefMaintenance", _manualRefMaintenance);
		_columnOriginalValues.put("equipCalibration", _equipCalibration);
		_columnOriginalValues.put("manualRefCalibrat", _manualRefCalibrat);
		_columnOriginalValues.put("proficencyTesting", _proficencyTesting);
		_columnOriginalValues.put("manualRefProfiTest", _manualRefProfiTest);
		_columnOriginalValues.put("postExamReliabilty", _postExamReliabilty);
		_columnOriginalValues.put("manualRefPostExam", _manualRefPostExam);
		_columnOriginalValues.put("reportedAccurately", _reportedAccurately);
		_columnOriginalValues.put("manualRefReported", _manualRefReported);
		_columnOriginalValues.put(
			"responsiblitySpecified", _responsiblitySpecified);
		_columnOriginalValues.put("manualRefSpecified", _manualRefSpecified);
		_columnOriginalValues.put("ensureAuthorities", _ensureAuthorities);
		_columnOriginalValues.put(
			"manualRefAuthorities", _manualRefAuthorities);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private AccMediLabManagementReq _escapedModel;

}