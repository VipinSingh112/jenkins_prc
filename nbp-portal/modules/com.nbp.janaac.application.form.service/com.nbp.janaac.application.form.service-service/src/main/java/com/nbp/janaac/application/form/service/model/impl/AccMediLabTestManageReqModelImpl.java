/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccMediLabTestManageReq;
import com.nbp.janaac.application.form.service.model.AccMediLabTestManageReqModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccMediLabTestManageReq service. Represents a row in the &quot;nbp_janaac_acc_med_test_manage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccMediLabTestManageReqModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccMediLabTestManageReqImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccMediLabTestManageReqImpl
 * @generated
 */
@JSON(strict = true)
public class AccMediLabTestManageReqModelImpl
	extends BaseModelImpl<AccMediLabTestManageReq>
	implements AccMediLabTestManageReqModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc medi lab test manage req model instance should use the <code>AccMediLabTestManageReq</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_med_test_manage";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accMediLabTestManageReqId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"policiesForFulfil", Types.VARCHAR},
		{"labDocRefPolicies", Types.VARCHAR},
		{"impartialityProvision", Types.VARCHAR},
		{"labDocRefImpartProv", Types.VARCHAR},
		{"confidientialityProv", Types.VARCHAR},
		{"labDocRefConfid", Types.VARCHAR},
		{"commitmentEvidence", Types.VARCHAR},
		{"labDocRefCommitment", Types.VARCHAR},
		{"referenceEvidence", Types.VARCHAR},
		{"labDocRefReference", Types.VARCHAR},
		{"docDescribingRole", Types.VARCHAR},
		{"labDocRefDocDes", Types.VARCHAR}, {"rolesofPersonnel", Types.VARCHAR},
		{"labDocRefRoles", Types.VARCHAR}, {"competenceReq", Types.VARCHAR},
		{"labDocRefCompetence", Types.VARCHAR},
		{"selectionOfPerson", Types.VARCHAR},
		{"labDocRefSelection", Types.VARCHAR}, {"handlingEquip", Types.VARCHAR},
		{"labDocRefHandling", Types.VARCHAR},
		{"calibrationProgram", Types.VARCHAR},
		{"labDocRefCalibrat", Types.VARCHAR}, {"approvingReq", Types.VARCHAR},
		{"labDocRefApproving", Types.VARCHAR},
		{"monitorPerformance", Types.VARCHAR},
		{"labDocRefMonitor", Types.VARCHAR}, {"ensuringService", Types.VARCHAR},
		{"labDocRefEnsuring", Types.VARCHAR},
		{"reviewOfRequest", Types.VARCHAR}, {"labDocRefRequest", Types.VARCHAR},
		{"procedureForLab", Types.VARCHAR},
		{"labDocRefProcedure", Types.VARCHAR},
		{"testMethodValidat", Types.VARCHAR},
		{"labDocRefTestMethod", Types.VARCHAR}, {"samplingPlan", Types.VARCHAR},
		{"labDocRefSampling", Types.VARCHAR},
		{"transportationReciept", Types.VARCHAR},
		{"labDocRefTransport", Types.VARCHAR},
		{"uncertainityMeasure", Types.VARCHAR},
		{"labDocRefUncertain", Types.VARCHAR},
		{"testResultValidity", Types.VARCHAR},
		{"labDocReftestResult", Types.VARCHAR}, {"complaints", Types.VARCHAR},
		{"labDocRefComplaints", Types.VARCHAR},
		{"nonConformingWork", Types.VARCHAR},
		{"labDocRefNonConfirm", Types.VARCHAR},
		{"uniqueIdentification", Types.VARCHAR},
		{"labDocRefUnique", Types.VARCHAR},
		{"currentRevisionStatus", Types.VARCHAR},
		{"labDocRefCurrentRev", Types.VARCHAR},
		{"docChangeIdentify", Types.VARCHAR},
		{"labDocRefDocChange", Types.VARCHAR}, {"recordControl", Types.VARCHAR},
		{"labDocRefRecordControl", Types.VARCHAR},
		{"plannedAction", Types.VARCHAR}, {"labDocRefPlanned", Types.VARCHAR},
		{"imporvementOpportunity", Types.VARCHAR},
		{"labDocRefImprovement", Types.VARCHAR},
		{"correctiveAction", Types.VARCHAR},
		{"labDocRefCorrective", Types.VARCHAR},
		{"internalAudits", Types.VARCHAR}, {"labDocRefInternal", Types.VARCHAR},
		{"managementReview", Types.VARCHAR},
		{"labDocRefManagement", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accMediLabTestManageReqId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("policiesForFulfil", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("impartialityProvision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefImpartProv", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("confidientialityProv", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefConfid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commitmentEvidence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefCommitment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("referenceEvidence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefReference", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docDescribingRole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefDocDes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rolesofPersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefRoles", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("competenceReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefCompetence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("selectionOfPerson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefSelection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("handlingEquip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefHandling", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("calibrationProgram", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefCalibrat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approvingReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefApproving", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("monitorPerformance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefMonitor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ensuringService", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefEnsuring", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reviewOfRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("procedureForLab", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefProcedure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testMethodValidat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefTestMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("samplingPlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefSampling", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transportationReciept", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefTransport", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uncertainityMeasure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefUncertain", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testResultValidity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocReftestResult", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("complaints", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefComplaints", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nonConformingWork", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefNonConfirm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uniqueIdentification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefUnique", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentRevisionStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefCurrentRev", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docChangeIdentify", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefDocChange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefRecordControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("plannedAction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefPlanned", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imporvementOpportunity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefImprovement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("correctiveAction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefCorrective", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("internalAudits", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefInternal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managementReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labDocRefManagement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_med_test_manage (uuid_ VARCHAR(75) null,accMediLabTestManageReqId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,policiesForFulfil VARCHAR(75) null,labDocRefPolicies VARCHAR(75) null,impartialityProvision VARCHAR(75) null,labDocRefImpartProv VARCHAR(75) null,confidientialityProv VARCHAR(75) null,labDocRefConfid VARCHAR(75) null,commitmentEvidence VARCHAR(75) null,labDocRefCommitment VARCHAR(75) null,referenceEvidence VARCHAR(75) null,labDocRefReference VARCHAR(75) null,docDescribingRole VARCHAR(75) null,labDocRefDocDes VARCHAR(75) null,rolesofPersonnel VARCHAR(75) null,labDocRefRoles VARCHAR(75) null,competenceReq VARCHAR(75) null,labDocRefCompetence VARCHAR(75) null,selectionOfPerson VARCHAR(75) null,labDocRefSelection VARCHAR(75) null,handlingEquip VARCHAR(75) null,labDocRefHandling VARCHAR(75) null,calibrationProgram VARCHAR(75) null,labDocRefCalibrat VARCHAR(75) null,approvingReq VARCHAR(75) null,labDocRefApproving VARCHAR(75) null,monitorPerformance VARCHAR(75) null,labDocRefMonitor VARCHAR(75) null,ensuringService VARCHAR(75) null,labDocRefEnsuring VARCHAR(75) null,reviewOfRequest VARCHAR(75) null,labDocRefRequest VARCHAR(75) null,procedureForLab VARCHAR(75) null,labDocRefProcedure VARCHAR(75) null,testMethodValidat VARCHAR(75) null,labDocRefTestMethod VARCHAR(75) null,samplingPlan VARCHAR(75) null,labDocRefSampling VARCHAR(75) null,transportationReciept VARCHAR(75) null,labDocRefTransport VARCHAR(75) null,uncertainityMeasure VARCHAR(75) null,labDocRefUncertain VARCHAR(75) null,testResultValidity VARCHAR(75) null,labDocReftestResult VARCHAR(75) null,complaints VARCHAR(75) null,labDocRefComplaints VARCHAR(75) null,nonConformingWork VARCHAR(75) null,labDocRefNonConfirm VARCHAR(75) null,uniqueIdentification VARCHAR(75) null,labDocRefUnique VARCHAR(75) null,currentRevisionStatus VARCHAR(75) null,labDocRefCurrentRev VARCHAR(75) null,docChangeIdentify VARCHAR(75) null,labDocRefDocChange VARCHAR(75) null,recordControl VARCHAR(75) null,labDocRefRecordControl VARCHAR(75) null,plannedAction VARCHAR(75) null,labDocRefPlanned VARCHAR(75) null,imporvementOpportunity VARCHAR(75) null,labDocRefImprovement VARCHAR(75) null,correctiveAction VARCHAR(75) null,labDocRefCorrective VARCHAR(75) null,internalAudits VARCHAR(75) null,labDocRefInternal VARCHAR(75) null,managementReview VARCHAR(75) null,labDocRefManagement VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_med_test_manage";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accMediLabTestManageReq.accMediLabTestManageReqId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_med_test_manage.accMediLabTestManageReqId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccMediLabTestManageReqModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accMediLabTestManageReqId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccMediLabTestManageReqId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accMediLabTestManageReqId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccMediLabTestManageReq.class;
	}

	@Override
	public String getModelClassName() {
		return AccMediLabTestManageReq.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccMediLabTestManageReq, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccMediLabTestManageReq, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabTestManageReq, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccMediLabTestManageReq)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccMediLabTestManageReq, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccMediLabTestManageReq, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccMediLabTestManageReq)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccMediLabTestManageReq, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccMediLabTestManageReq, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccMediLabTestManageReq, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccMediLabTestManageReq, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccMediLabTestManageReq, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccMediLabTestManageReq::getUuid);
			attributeGetterFunctions.put(
				"accMediLabTestManageReqId",
				AccMediLabTestManageReq::getAccMediLabTestManageReqId);
			attributeGetterFunctions.put(
				"groupId", AccMediLabTestManageReq::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccMediLabTestManageReq::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccMediLabTestManageReq::getUserId);
			attributeGetterFunctions.put(
				"userName", AccMediLabTestManageReq::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccMediLabTestManageReq::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccMediLabTestManageReq::getModifiedDate);
			attributeGetterFunctions.put(
				"policiesForFulfil",
				AccMediLabTestManageReq::getPoliciesForFulfil);
			attributeGetterFunctions.put(
				"labDocRefPolicies",
				AccMediLabTestManageReq::getLabDocRefPolicies);
			attributeGetterFunctions.put(
				"impartialityProvision",
				AccMediLabTestManageReq::getImpartialityProvision);
			attributeGetterFunctions.put(
				"labDocRefImpartProv",
				AccMediLabTestManageReq::getLabDocRefImpartProv);
			attributeGetterFunctions.put(
				"confidientialityProv",
				AccMediLabTestManageReq::getConfidientialityProv);
			attributeGetterFunctions.put(
				"labDocRefConfid", AccMediLabTestManageReq::getLabDocRefConfid);
			attributeGetterFunctions.put(
				"commitmentEvidence",
				AccMediLabTestManageReq::getCommitmentEvidence);
			attributeGetterFunctions.put(
				"labDocRefCommitment",
				AccMediLabTestManageReq::getLabDocRefCommitment);
			attributeGetterFunctions.put(
				"referenceEvidence",
				AccMediLabTestManageReq::getReferenceEvidence);
			attributeGetterFunctions.put(
				"labDocRefReference",
				AccMediLabTestManageReq::getLabDocRefReference);
			attributeGetterFunctions.put(
				"docDescribingRole",
				AccMediLabTestManageReq::getDocDescribingRole);
			attributeGetterFunctions.put(
				"labDocRefDocDes", AccMediLabTestManageReq::getLabDocRefDocDes);
			attributeGetterFunctions.put(
				"rolesofPersonnel",
				AccMediLabTestManageReq::getRolesofPersonnel);
			attributeGetterFunctions.put(
				"labDocRefRoles", AccMediLabTestManageReq::getLabDocRefRoles);
			attributeGetterFunctions.put(
				"competenceReq", AccMediLabTestManageReq::getCompetenceReq);
			attributeGetterFunctions.put(
				"labDocRefCompetence",
				AccMediLabTestManageReq::getLabDocRefCompetence);
			attributeGetterFunctions.put(
				"selectionOfPerson",
				AccMediLabTestManageReq::getSelectionOfPerson);
			attributeGetterFunctions.put(
				"labDocRefSelection",
				AccMediLabTestManageReq::getLabDocRefSelection);
			attributeGetterFunctions.put(
				"handlingEquip", AccMediLabTestManageReq::getHandlingEquip);
			attributeGetterFunctions.put(
				"labDocRefHandling",
				AccMediLabTestManageReq::getLabDocRefHandling);
			attributeGetterFunctions.put(
				"calibrationProgram",
				AccMediLabTestManageReq::getCalibrationProgram);
			attributeGetterFunctions.put(
				"labDocRefCalibrat",
				AccMediLabTestManageReq::getLabDocRefCalibrat);
			attributeGetterFunctions.put(
				"approvingReq", AccMediLabTestManageReq::getApprovingReq);
			attributeGetterFunctions.put(
				"labDocRefApproving",
				AccMediLabTestManageReq::getLabDocRefApproving);
			attributeGetterFunctions.put(
				"monitorPerformance",
				AccMediLabTestManageReq::getMonitorPerformance);
			attributeGetterFunctions.put(
				"labDocRefMonitor",
				AccMediLabTestManageReq::getLabDocRefMonitor);
			attributeGetterFunctions.put(
				"ensuringService", AccMediLabTestManageReq::getEnsuringService);
			attributeGetterFunctions.put(
				"labDocRefEnsuring",
				AccMediLabTestManageReq::getLabDocRefEnsuring);
			attributeGetterFunctions.put(
				"reviewOfRequest", AccMediLabTestManageReq::getReviewOfRequest);
			attributeGetterFunctions.put(
				"labDocRefRequest",
				AccMediLabTestManageReq::getLabDocRefRequest);
			attributeGetterFunctions.put(
				"procedureForLab", AccMediLabTestManageReq::getProcedureForLab);
			attributeGetterFunctions.put(
				"labDocRefProcedure",
				AccMediLabTestManageReq::getLabDocRefProcedure);
			attributeGetterFunctions.put(
				"testMethodValidat",
				AccMediLabTestManageReq::getTestMethodValidat);
			attributeGetterFunctions.put(
				"labDocRefTestMethod",
				AccMediLabTestManageReq::getLabDocRefTestMethod);
			attributeGetterFunctions.put(
				"samplingPlan", AccMediLabTestManageReq::getSamplingPlan);
			attributeGetterFunctions.put(
				"labDocRefSampling",
				AccMediLabTestManageReq::getLabDocRefSampling);
			attributeGetterFunctions.put(
				"transportationReciept",
				AccMediLabTestManageReq::getTransportationReciept);
			attributeGetterFunctions.put(
				"labDocRefTransport",
				AccMediLabTestManageReq::getLabDocRefTransport);
			attributeGetterFunctions.put(
				"uncertainityMeasure",
				AccMediLabTestManageReq::getUncertainityMeasure);
			attributeGetterFunctions.put(
				"labDocRefUncertain",
				AccMediLabTestManageReq::getLabDocRefUncertain);
			attributeGetterFunctions.put(
				"testResultValidity",
				AccMediLabTestManageReq::getTestResultValidity);
			attributeGetterFunctions.put(
				"labDocReftestResult",
				AccMediLabTestManageReq::getLabDocReftestResult);
			attributeGetterFunctions.put(
				"complaints", AccMediLabTestManageReq::getComplaints);
			attributeGetterFunctions.put(
				"labDocRefComplaints",
				AccMediLabTestManageReq::getLabDocRefComplaints);
			attributeGetterFunctions.put(
				"nonConformingWork",
				AccMediLabTestManageReq::getNonConformingWork);
			attributeGetterFunctions.put(
				"labDocRefNonConfirm",
				AccMediLabTestManageReq::getLabDocRefNonConfirm);
			attributeGetterFunctions.put(
				"uniqueIdentification",
				AccMediLabTestManageReq::getUniqueIdentification);
			attributeGetterFunctions.put(
				"labDocRefUnique", AccMediLabTestManageReq::getLabDocRefUnique);
			attributeGetterFunctions.put(
				"currentRevisionStatus",
				AccMediLabTestManageReq::getCurrentRevisionStatus);
			attributeGetterFunctions.put(
				"labDocRefCurrentRev",
				AccMediLabTestManageReq::getLabDocRefCurrentRev);
			attributeGetterFunctions.put(
				"docChangeIdentify",
				AccMediLabTestManageReq::getDocChangeIdentify);
			attributeGetterFunctions.put(
				"labDocRefDocChange",
				AccMediLabTestManageReq::getLabDocRefDocChange);
			attributeGetterFunctions.put(
				"recordControl", AccMediLabTestManageReq::getRecordControl);
			attributeGetterFunctions.put(
				"labDocRefRecordControl",
				AccMediLabTestManageReq::getLabDocRefRecordControl);
			attributeGetterFunctions.put(
				"plannedAction", AccMediLabTestManageReq::getPlannedAction);
			attributeGetterFunctions.put(
				"labDocRefPlanned",
				AccMediLabTestManageReq::getLabDocRefPlanned);
			attributeGetterFunctions.put(
				"imporvementOpportunity",
				AccMediLabTestManageReq::getImporvementOpportunity);
			attributeGetterFunctions.put(
				"labDocRefImprovement",
				AccMediLabTestManageReq::getLabDocRefImprovement);
			attributeGetterFunctions.put(
				"correctiveAction",
				AccMediLabTestManageReq::getCorrectiveAction);
			attributeGetterFunctions.put(
				"labDocRefCorrective",
				AccMediLabTestManageReq::getLabDocRefCorrective);
			attributeGetterFunctions.put(
				"internalAudits", AccMediLabTestManageReq::getInternalAudits);
			attributeGetterFunctions.put(
				"labDocRefInternal",
				AccMediLabTestManageReq::getLabDocRefInternal);
			attributeGetterFunctions.put(
				"managementReview",
				AccMediLabTestManageReq::getManagementReview);
			attributeGetterFunctions.put(
				"labDocRefManagement",
				AccMediLabTestManageReq::getLabDocRefManagement);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccMediLabTestManageReq::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccMediLabTestManageReq, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccMediLabTestManageReq, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccMediLabTestManageReq, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setUuid);
			attributeSetterBiConsumers.put(
				"accMediLabTestManageReqId",
				(BiConsumer<AccMediLabTestManageReq, Long>)
					AccMediLabTestManageReq::setAccMediLabTestManageReqId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccMediLabTestManageReq, Long>)
					AccMediLabTestManageReq::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccMediLabTestManageReq, Long>)
					AccMediLabTestManageReq::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccMediLabTestManageReq, Long>)
					AccMediLabTestManageReq::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccMediLabTestManageReq, Date>)
					AccMediLabTestManageReq::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccMediLabTestManageReq, Date>)
					AccMediLabTestManageReq::setModifiedDate);
			attributeSetterBiConsumers.put(
				"policiesForFulfil",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setPoliciesForFulfil);
			attributeSetterBiConsumers.put(
				"labDocRefPolicies",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefPolicies);
			attributeSetterBiConsumers.put(
				"impartialityProvision",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setImpartialityProvision);
			attributeSetterBiConsumers.put(
				"labDocRefImpartProv",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefImpartProv);
			attributeSetterBiConsumers.put(
				"confidientialityProv",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setConfidientialityProv);
			attributeSetterBiConsumers.put(
				"labDocRefConfid",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefConfid);
			attributeSetterBiConsumers.put(
				"commitmentEvidence",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setCommitmentEvidence);
			attributeSetterBiConsumers.put(
				"labDocRefCommitment",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefCommitment);
			attributeSetterBiConsumers.put(
				"referenceEvidence",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setReferenceEvidence);
			attributeSetterBiConsumers.put(
				"labDocRefReference",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefReference);
			attributeSetterBiConsumers.put(
				"docDescribingRole",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setDocDescribingRole);
			attributeSetterBiConsumers.put(
				"labDocRefDocDes",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefDocDes);
			attributeSetterBiConsumers.put(
				"rolesofPersonnel",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setRolesofPersonnel);
			attributeSetterBiConsumers.put(
				"labDocRefRoles",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefRoles);
			attributeSetterBiConsumers.put(
				"competenceReq",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setCompetenceReq);
			attributeSetterBiConsumers.put(
				"labDocRefCompetence",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefCompetence);
			attributeSetterBiConsumers.put(
				"selectionOfPerson",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setSelectionOfPerson);
			attributeSetterBiConsumers.put(
				"labDocRefSelection",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefSelection);
			attributeSetterBiConsumers.put(
				"handlingEquip",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setHandlingEquip);
			attributeSetterBiConsumers.put(
				"labDocRefHandling",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefHandling);
			attributeSetterBiConsumers.put(
				"calibrationProgram",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setCalibrationProgram);
			attributeSetterBiConsumers.put(
				"labDocRefCalibrat",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefCalibrat);
			attributeSetterBiConsumers.put(
				"approvingReq",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setApprovingReq);
			attributeSetterBiConsumers.put(
				"labDocRefApproving",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefApproving);
			attributeSetterBiConsumers.put(
				"monitorPerformance",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setMonitorPerformance);
			attributeSetterBiConsumers.put(
				"labDocRefMonitor",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefMonitor);
			attributeSetterBiConsumers.put(
				"ensuringService",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setEnsuringService);
			attributeSetterBiConsumers.put(
				"labDocRefEnsuring",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefEnsuring);
			attributeSetterBiConsumers.put(
				"reviewOfRequest",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setReviewOfRequest);
			attributeSetterBiConsumers.put(
				"labDocRefRequest",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefRequest);
			attributeSetterBiConsumers.put(
				"procedureForLab",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setProcedureForLab);
			attributeSetterBiConsumers.put(
				"labDocRefProcedure",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefProcedure);
			attributeSetterBiConsumers.put(
				"testMethodValidat",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setTestMethodValidat);
			attributeSetterBiConsumers.put(
				"labDocRefTestMethod",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefTestMethod);
			attributeSetterBiConsumers.put(
				"samplingPlan",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setSamplingPlan);
			attributeSetterBiConsumers.put(
				"labDocRefSampling",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefSampling);
			attributeSetterBiConsumers.put(
				"transportationReciept",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setTransportationReciept);
			attributeSetterBiConsumers.put(
				"labDocRefTransport",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefTransport);
			attributeSetterBiConsumers.put(
				"uncertainityMeasure",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setUncertainityMeasure);
			attributeSetterBiConsumers.put(
				"labDocRefUncertain",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefUncertain);
			attributeSetterBiConsumers.put(
				"testResultValidity",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setTestResultValidity);
			attributeSetterBiConsumers.put(
				"labDocReftestResult",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocReftestResult);
			attributeSetterBiConsumers.put(
				"complaints",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setComplaints);
			attributeSetterBiConsumers.put(
				"labDocRefComplaints",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefComplaints);
			attributeSetterBiConsumers.put(
				"nonConformingWork",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setNonConformingWork);
			attributeSetterBiConsumers.put(
				"labDocRefNonConfirm",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefNonConfirm);
			attributeSetterBiConsumers.put(
				"uniqueIdentification",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setUniqueIdentification);
			attributeSetterBiConsumers.put(
				"labDocRefUnique",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefUnique);
			attributeSetterBiConsumers.put(
				"currentRevisionStatus",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setCurrentRevisionStatus);
			attributeSetterBiConsumers.put(
				"labDocRefCurrentRev",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefCurrentRev);
			attributeSetterBiConsumers.put(
				"docChangeIdentify",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setDocChangeIdentify);
			attributeSetterBiConsumers.put(
				"labDocRefDocChange",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefDocChange);
			attributeSetterBiConsumers.put(
				"recordControl",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setRecordControl);
			attributeSetterBiConsumers.put(
				"labDocRefRecordControl",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefRecordControl);
			attributeSetterBiConsumers.put(
				"plannedAction",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setPlannedAction);
			attributeSetterBiConsumers.put(
				"labDocRefPlanned",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefPlanned);
			attributeSetterBiConsumers.put(
				"imporvementOpportunity",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setImporvementOpportunity);
			attributeSetterBiConsumers.put(
				"labDocRefImprovement",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefImprovement);
			attributeSetterBiConsumers.put(
				"correctiveAction",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setCorrectiveAction);
			attributeSetterBiConsumers.put(
				"labDocRefCorrective",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefCorrective);
			attributeSetterBiConsumers.put(
				"internalAudits",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setInternalAudits);
			attributeSetterBiConsumers.put(
				"labDocRefInternal",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefInternal);
			attributeSetterBiConsumers.put(
				"managementReview",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setManagementReview);
			attributeSetterBiConsumers.put(
				"labDocRefManagement",
				(BiConsumer<AccMediLabTestManageReq, String>)
					AccMediLabTestManageReq::setLabDocRefManagement);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccMediLabTestManageReq, Long>)
					AccMediLabTestManageReq::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccMediLabTestManageReqId() {
		return _accMediLabTestManageReqId;
	}

	@Override
	public void setAccMediLabTestManageReqId(long accMediLabTestManageReqId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accMediLabTestManageReqId = accMediLabTestManageReqId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPoliciesForFulfil() {
		if (_policiesForFulfil == null) {
			return "";
		}
		else {
			return _policiesForFulfil;
		}
	}

	@Override
	public void setPoliciesForFulfil(String policiesForFulfil) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policiesForFulfil = policiesForFulfil;
	}

	@JSON
	@Override
	public String getLabDocRefPolicies() {
		if (_labDocRefPolicies == null) {
			return "";
		}
		else {
			return _labDocRefPolicies;
		}
	}

	@Override
	public void setLabDocRefPolicies(String labDocRefPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefPolicies = labDocRefPolicies;
	}

	@JSON
	@Override
	public String getImpartialityProvision() {
		if (_impartialityProvision == null) {
			return "";
		}
		else {
			return _impartialityProvision;
		}
	}

	@Override
	public void setImpartialityProvision(String impartialityProvision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_impartialityProvision = impartialityProvision;
	}

	@JSON
	@Override
	public String getLabDocRefImpartProv() {
		if (_labDocRefImpartProv == null) {
			return "";
		}
		else {
			return _labDocRefImpartProv;
		}
	}

	@Override
	public void setLabDocRefImpartProv(String labDocRefImpartProv) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefImpartProv = labDocRefImpartProv;
	}

	@JSON
	@Override
	public String getConfidientialityProv() {
		if (_confidientialityProv == null) {
			return "";
		}
		else {
			return _confidientialityProv;
		}
	}

	@Override
	public void setConfidientialityProv(String confidientialityProv) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_confidientialityProv = confidientialityProv;
	}

	@JSON
	@Override
	public String getLabDocRefConfid() {
		if (_labDocRefConfid == null) {
			return "";
		}
		else {
			return _labDocRefConfid;
		}
	}

	@Override
	public void setLabDocRefConfid(String labDocRefConfid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefConfid = labDocRefConfid;
	}

	@JSON
	@Override
	public String getCommitmentEvidence() {
		if (_commitmentEvidence == null) {
			return "";
		}
		else {
			return _commitmentEvidence;
		}
	}

	@Override
	public void setCommitmentEvidence(String commitmentEvidence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commitmentEvidence = commitmentEvidence;
	}

	@JSON
	@Override
	public String getLabDocRefCommitment() {
		if (_labDocRefCommitment == null) {
			return "";
		}
		else {
			return _labDocRefCommitment;
		}
	}

	@Override
	public void setLabDocRefCommitment(String labDocRefCommitment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefCommitment = labDocRefCommitment;
	}

	@JSON
	@Override
	public String getReferenceEvidence() {
		if (_referenceEvidence == null) {
			return "";
		}
		else {
			return _referenceEvidence;
		}
	}

	@Override
	public void setReferenceEvidence(String referenceEvidence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_referenceEvidence = referenceEvidence;
	}

	@JSON
	@Override
	public String getLabDocRefReference() {
		if (_labDocRefReference == null) {
			return "";
		}
		else {
			return _labDocRefReference;
		}
	}

	@Override
	public void setLabDocRefReference(String labDocRefReference) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefReference = labDocRefReference;
	}

	@JSON
	@Override
	public String getDocDescribingRole() {
		if (_docDescribingRole == null) {
			return "";
		}
		else {
			return _docDescribingRole;
		}
	}

	@Override
	public void setDocDescribingRole(String docDescribingRole) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docDescribingRole = docDescribingRole;
	}

	@JSON
	@Override
	public String getLabDocRefDocDes() {
		if (_labDocRefDocDes == null) {
			return "";
		}
		else {
			return _labDocRefDocDes;
		}
	}

	@Override
	public void setLabDocRefDocDes(String labDocRefDocDes) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefDocDes = labDocRefDocDes;
	}

	@JSON
	@Override
	public String getRolesofPersonnel() {
		if (_rolesofPersonnel == null) {
			return "";
		}
		else {
			return _rolesofPersonnel;
		}
	}

	@Override
	public void setRolesofPersonnel(String rolesofPersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rolesofPersonnel = rolesofPersonnel;
	}

	@JSON
	@Override
	public String getLabDocRefRoles() {
		if (_labDocRefRoles == null) {
			return "";
		}
		else {
			return _labDocRefRoles;
		}
	}

	@Override
	public void setLabDocRefRoles(String labDocRefRoles) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefRoles = labDocRefRoles;
	}

	@JSON
	@Override
	public String getCompetenceReq() {
		if (_competenceReq == null) {
			return "";
		}
		else {
			return _competenceReq;
		}
	}

	@Override
	public void setCompetenceReq(String competenceReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_competenceReq = competenceReq;
	}

	@JSON
	@Override
	public String getLabDocRefCompetence() {
		if (_labDocRefCompetence == null) {
			return "";
		}
		else {
			return _labDocRefCompetence;
		}
	}

	@Override
	public void setLabDocRefCompetence(String labDocRefCompetence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefCompetence = labDocRefCompetence;
	}

	@JSON
	@Override
	public String getSelectionOfPerson() {
		if (_selectionOfPerson == null) {
			return "";
		}
		else {
			return _selectionOfPerson;
		}
	}

	@Override
	public void setSelectionOfPerson(String selectionOfPerson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_selectionOfPerson = selectionOfPerson;
	}

	@JSON
	@Override
	public String getLabDocRefSelection() {
		if (_labDocRefSelection == null) {
			return "";
		}
		else {
			return _labDocRefSelection;
		}
	}

	@Override
	public void setLabDocRefSelection(String labDocRefSelection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefSelection = labDocRefSelection;
	}

	@JSON
	@Override
	public String getHandlingEquip() {
		if (_handlingEquip == null) {
			return "";
		}
		else {
			return _handlingEquip;
		}
	}

	@Override
	public void setHandlingEquip(String handlingEquip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_handlingEquip = handlingEquip;
	}

	@JSON
	@Override
	public String getLabDocRefHandling() {
		if (_labDocRefHandling == null) {
			return "";
		}
		else {
			return _labDocRefHandling;
		}
	}

	@Override
	public void setLabDocRefHandling(String labDocRefHandling) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefHandling = labDocRefHandling;
	}

	@JSON
	@Override
	public String getCalibrationProgram() {
		if (_calibrationProgram == null) {
			return "";
		}
		else {
			return _calibrationProgram;
		}
	}

	@Override
	public void setCalibrationProgram(String calibrationProgram) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_calibrationProgram = calibrationProgram;
	}

	@JSON
	@Override
	public String getLabDocRefCalibrat() {
		if (_labDocRefCalibrat == null) {
			return "";
		}
		else {
			return _labDocRefCalibrat;
		}
	}

	@Override
	public void setLabDocRefCalibrat(String labDocRefCalibrat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefCalibrat = labDocRefCalibrat;
	}

	@JSON
	@Override
	public String getApprovingReq() {
		if (_approvingReq == null) {
			return "";
		}
		else {
			return _approvingReq;
		}
	}

	@Override
	public void setApprovingReq(String approvingReq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_approvingReq = approvingReq;
	}

	@JSON
	@Override
	public String getLabDocRefApproving() {
		if (_labDocRefApproving == null) {
			return "";
		}
		else {
			return _labDocRefApproving;
		}
	}

	@Override
	public void setLabDocRefApproving(String labDocRefApproving) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefApproving = labDocRefApproving;
	}

	@JSON
	@Override
	public String getMonitorPerformance() {
		if (_monitorPerformance == null) {
			return "";
		}
		else {
			return _monitorPerformance;
		}
	}

	@Override
	public void setMonitorPerformance(String monitorPerformance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monitorPerformance = monitorPerformance;
	}

	@JSON
	@Override
	public String getLabDocRefMonitor() {
		if (_labDocRefMonitor == null) {
			return "";
		}
		else {
			return _labDocRefMonitor;
		}
	}

	@Override
	public void setLabDocRefMonitor(String labDocRefMonitor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefMonitor = labDocRefMonitor;
	}

	@JSON
	@Override
	public String getEnsuringService() {
		if (_ensuringService == null) {
			return "";
		}
		else {
			return _ensuringService;
		}
	}

	@Override
	public void setEnsuringService(String ensuringService) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ensuringService = ensuringService;
	}

	@JSON
	@Override
	public String getLabDocRefEnsuring() {
		if (_labDocRefEnsuring == null) {
			return "";
		}
		else {
			return _labDocRefEnsuring;
		}
	}

	@Override
	public void setLabDocRefEnsuring(String labDocRefEnsuring) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefEnsuring = labDocRefEnsuring;
	}

	@JSON
	@Override
	public String getReviewOfRequest() {
		if (_reviewOfRequest == null) {
			return "";
		}
		else {
			return _reviewOfRequest;
		}
	}

	@Override
	public void setReviewOfRequest(String reviewOfRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewOfRequest = reviewOfRequest;
	}

	@JSON
	@Override
	public String getLabDocRefRequest() {
		if (_labDocRefRequest == null) {
			return "";
		}
		else {
			return _labDocRefRequest;
		}
	}

	@Override
	public void setLabDocRefRequest(String labDocRefRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefRequest = labDocRefRequest;
	}

	@JSON
	@Override
	public String getProcedureForLab() {
		if (_procedureForLab == null) {
			return "";
		}
		else {
			return _procedureForLab;
		}
	}

	@Override
	public void setProcedureForLab(String procedureForLab) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procedureForLab = procedureForLab;
	}

	@JSON
	@Override
	public String getLabDocRefProcedure() {
		if (_labDocRefProcedure == null) {
			return "";
		}
		else {
			return _labDocRefProcedure;
		}
	}

	@Override
	public void setLabDocRefProcedure(String labDocRefProcedure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefProcedure = labDocRefProcedure;
	}

	@JSON
	@Override
	public String getTestMethodValidat() {
		if (_testMethodValidat == null) {
			return "";
		}
		else {
			return _testMethodValidat;
		}
	}

	@Override
	public void setTestMethodValidat(String testMethodValidat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testMethodValidat = testMethodValidat;
	}

	@JSON
	@Override
	public String getLabDocRefTestMethod() {
		if (_labDocRefTestMethod == null) {
			return "";
		}
		else {
			return _labDocRefTestMethod;
		}
	}

	@Override
	public void setLabDocRefTestMethod(String labDocRefTestMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefTestMethod = labDocRefTestMethod;
	}

	@JSON
	@Override
	public String getSamplingPlan() {
		if (_samplingPlan == null) {
			return "";
		}
		else {
			return _samplingPlan;
		}
	}

	@Override
	public void setSamplingPlan(String samplingPlan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_samplingPlan = samplingPlan;
	}

	@JSON
	@Override
	public String getLabDocRefSampling() {
		if (_labDocRefSampling == null) {
			return "";
		}
		else {
			return _labDocRefSampling;
		}
	}

	@Override
	public void setLabDocRefSampling(String labDocRefSampling) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefSampling = labDocRefSampling;
	}

	@JSON
	@Override
	public String getTransportationReciept() {
		if (_transportationReciept == null) {
			return "";
		}
		else {
			return _transportationReciept;
		}
	}

	@Override
	public void setTransportationReciept(String transportationReciept) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transportationReciept = transportationReciept;
	}

	@JSON
	@Override
	public String getLabDocRefTransport() {
		if (_labDocRefTransport == null) {
			return "";
		}
		else {
			return _labDocRefTransport;
		}
	}

	@Override
	public void setLabDocRefTransport(String labDocRefTransport) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefTransport = labDocRefTransport;
	}

	@JSON
	@Override
	public String getUncertainityMeasure() {
		if (_uncertainityMeasure == null) {
			return "";
		}
		else {
			return _uncertainityMeasure;
		}
	}

	@Override
	public void setUncertainityMeasure(String uncertainityMeasure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uncertainityMeasure = uncertainityMeasure;
	}

	@JSON
	@Override
	public String getLabDocRefUncertain() {
		if (_labDocRefUncertain == null) {
			return "";
		}
		else {
			return _labDocRefUncertain;
		}
	}

	@Override
	public void setLabDocRefUncertain(String labDocRefUncertain) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefUncertain = labDocRefUncertain;
	}

	@JSON
	@Override
	public String getTestResultValidity() {
		if (_testResultValidity == null) {
			return "";
		}
		else {
			return _testResultValidity;
		}
	}

	@Override
	public void setTestResultValidity(String testResultValidity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testResultValidity = testResultValidity;
	}

	@JSON
	@Override
	public String getLabDocReftestResult() {
		if (_labDocReftestResult == null) {
			return "";
		}
		else {
			return _labDocReftestResult;
		}
	}

	@Override
	public void setLabDocReftestResult(String labDocReftestResult) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocReftestResult = labDocReftestResult;
	}

	@JSON
	@Override
	public String getComplaints() {
		if (_complaints == null) {
			return "";
		}
		else {
			return _complaints;
		}
	}

	@Override
	public void setComplaints(String complaints) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_complaints = complaints;
	}

	@JSON
	@Override
	public String getLabDocRefComplaints() {
		if (_labDocRefComplaints == null) {
			return "";
		}
		else {
			return _labDocRefComplaints;
		}
	}

	@Override
	public void setLabDocRefComplaints(String labDocRefComplaints) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefComplaints = labDocRefComplaints;
	}

	@JSON
	@Override
	public String getNonConformingWork() {
		if (_nonConformingWork == null) {
			return "";
		}
		else {
			return _nonConformingWork;
		}
	}

	@Override
	public void setNonConformingWork(String nonConformingWork) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonConformingWork = nonConformingWork;
	}

	@JSON
	@Override
	public String getLabDocRefNonConfirm() {
		if (_labDocRefNonConfirm == null) {
			return "";
		}
		else {
			return _labDocRefNonConfirm;
		}
	}

	@Override
	public void setLabDocRefNonConfirm(String labDocRefNonConfirm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefNonConfirm = labDocRefNonConfirm;
	}

	@JSON
	@Override
	public String getUniqueIdentification() {
		if (_uniqueIdentification == null) {
			return "";
		}
		else {
			return _uniqueIdentification;
		}
	}

	@Override
	public void setUniqueIdentification(String uniqueIdentification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uniqueIdentification = uniqueIdentification;
	}

	@JSON
	@Override
	public String getLabDocRefUnique() {
		if (_labDocRefUnique == null) {
			return "";
		}
		else {
			return _labDocRefUnique;
		}
	}

	@Override
	public void setLabDocRefUnique(String labDocRefUnique) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefUnique = labDocRefUnique;
	}

	@JSON
	@Override
	public String getCurrentRevisionStatus() {
		if (_currentRevisionStatus == null) {
			return "";
		}
		else {
			return _currentRevisionStatus;
		}
	}

	@Override
	public void setCurrentRevisionStatus(String currentRevisionStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentRevisionStatus = currentRevisionStatus;
	}

	@JSON
	@Override
	public String getLabDocRefCurrentRev() {
		if (_labDocRefCurrentRev == null) {
			return "";
		}
		else {
			return _labDocRefCurrentRev;
		}
	}

	@Override
	public void setLabDocRefCurrentRev(String labDocRefCurrentRev) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefCurrentRev = labDocRefCurrentRev;
	}

	@JSON
	@Override
	public String getDocChangeIdentify() {
		if (_docChangeIdentify == null) {
			return "";
		}
		else {
			return _docChangeIdentify;
		}
	}

	@Override
	public void setDocChangeIdentify(String docChangeIdentify) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docChangeIdentify = docChangeIdentify;
	}

	@JSON
	@Override
	public String getLabDocRefDocChange() {
		if (_labDocRefDocChange == null) {
			return "";
		}
		else {
			return _labDocRefDocChange;
		}
	}

	@Override
	public void setLabDocRefDocChange(String labDocRefDocChange) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefDocChange = labDocRefDocChange;
	}

	@JSON
	@Override
	public String getRecordControl() {
		if (_recordControl == null) {
			return "";
		}
		else {
			return _recordControl;
		}
	}

	@Override
	public void setRecordControl(String recordControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recordControl = recordControl;
	}

	@JSON
	@Override
	public String getLabDocRefRecordControl() {
		if (_labDocRefRecordControl == null) {
			return "";
		}
		else {
			return _labDocRefRecordControl;
		}
	}

	@Override
	public void setLabDocRefRecordControl(String labDocRefRecordControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefRecordControl = labDocRefRecordControl;
	}

	@JSON
	@Override
	public String getPlannedAction() {
		if (_plannedAction == null) {
			return "";
		}
		else {
			return _plannedAction;
		}
	}

	@Override
	public void setPlannedAction(String plannedAction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_plannedAction = plannedAction;
	}

	@JSON
	@Override
	public String getLabDocRefPlanned() {
		if (_labDocRefPlanned == null) {
			return "";
		}
		else {
			return _labDocRefPlanned;
		}
	}

	@Override
	public void setLabDocRefPlanned(String labDocRefPlanned) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefPlanned = labDocRefPlanned;
	}

	@JSON
	@Override
	public String getImporvementOpportunity() {
		if (_imporvementOpportunity == null) {
			return "";
		}
		else {
			return _imporvementOpportunity;
		}
	}

	@Override
	public void setImporvementOpportunity(String imporvementOpportunity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imporvementOpportunity = imporvementOpportunity;
	}

	@JSON
	@Override
	public String getLabDocRefImprovement() {
		if (_labDocRefImprovement == null) {
			return "";
		}
		else {
			return _labDocRefImprovement;
		}
	}

	@Override
	public void setLabDocRefImprovement(String labDocRefImprovement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefImprovement = labDocRefImprovement;
	}

	@JSON
	@Override
	public String getCorrectiveAction() {
		if (_correctiveAction == null) {
			return "";
		}
		else {
			return _correctiveAction;
		}
	}

	@Override
	public void setCorrectiveAction(String correctiveAction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_correctiveAction = correctiveAction;
	}

	@JSON
	@Override
	public String getLabDocRefCorrective() {
		if (_labDocRefCorrective == null) {
			return "";
		}
		else {
			return _labDocRefCorrective;
		}
	}

	@Override
	public void setLabDocRefCorrective(String labDocRefCorrective) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefCorrective = labDocRefCorrective;
	}

	@JSON
	@Override
	public String getInternalAudits() {
		if (_internalAudits == null) {
			return "";
		}
		else {
			return _internalAudits;
		}
	}

	@Override
	public void setInternalAudits(String internalAudits) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_internalAudits = internalAudits;
	}

	@JSON
	@Override
	public String getLabDocRefInternal() {
		if (_labDocRefInternal == null) {
			return "";
		}
		else {
			return _labDocRefInternal;
		}
	}

	@Override
	public void setLabDocRefInternal(String labDocRefInternal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefInternal = labDocRefInternal;
	}

	@JSON
	@Override
	public String getManagementReview() {
		if (_managementReview == null) {
			return "";
		}
		else {
			return _managementReview;
		}
	}

	@Override
	public void setManagementReview(String managementReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managementReview = managementReview;
	}

	@JSON
	@Override
	public String getLabDocRefManagement() {
		if (_labDocRefManagement == null) {
			return "";
		}
		else {
			return _labDocRefManagement;
		}
	}

	@Override
	public void setLabDocRefManagement(String labDocRefManagement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labDocRefManagement = labDocRefManagement;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccMediLabTestManageReq.class.getName()));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccMediLabTestManageReq.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccMediLabTestManageReq toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccMediLabTestManageReq>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccMediLabTestManageReqImpl accMediLabTestManageReqImpl =
			new AccMediLabTestManageReqImpl();

		accMediLabTestManageReqImpl.setUuid(getUuid());
		accMediLabTestManageReqImpl.setAccMediLabTestManageReqId(
			getAccMediLabTestManageReqId());
		accMediLabTestManageReqImpl.setGroupId(getGroupId());
		accMediLabTestManageReqImpl.setCompanyId(getCompanyId());
		accMediLabTestManageReqImpl.setUserId(getUserId());
		accMediLabTestManageReqImpl.setUserName(getUserName());
		accMediLabTestManageReqImpl.setCreateDate(getCreateDate());
		accMediLabTestManageReqImpl.setModifiedDate(getModifiedDate());
		accMediLabTestManageReqImpl.setPoliciesForFulfil(
			getPoliciesForFulfil());
		accMediLabTestManageReqImpl.setLabDocRefPolicies(
			getLabDocRefPolicies());
		accMediLabTestManageReqImpl.setImpartialityProvision(
			getImpartialityProvision());
		accMediLabTestManageReqImpl.setLabDocRefImpartProv(
			getLabDocRefImpartProv());
		accMediLabTestManageReqImpl.setConfidientialityProv(
			getConfidientialityProv());
		accMediLabTestManageReqImpl.setLabDocRefConfid(getLabDocRefConfid());
		accMediLabTestManageReqImpl.setCommitmentEvidence(
			getCommitmentEvidence());
		accMediLabTestManageReqImpl.setLabDocRefCommitment(
			getLabDocRefCommitment());
		accMediLabTestManageReqImpl.setReferenceEvidence(
			getReferenceEvidence());
		accMediLabTestManageReqImpl.setLabDocRefReference(
			getLabDocRefReference());
		accMediLabTestManageReqImpl.setDocDescribingRole(
			getDocDescribingRole());
		accMediLabTestManageReqImpl.setLabDocRefDocDes(getLabDocRefDocDes());
		accMediLabTestManageReqImpl.setRolesofPersonnel(getRolesofPersonnel());
		accMediLabTestManageReqImpl.setLabDocRefRoles(getLabDocRefRoles());
		accMediLabTestManageReqImpl.setCompetenceReq(getCompetenceReq());
		accMediLabTestManageReqImpl.setLabDocRefCompetence(
			getLabDocRefCompetence());
		accMediLabTestManageReqImpl.setSelectionOfPerson(
			getSelectionOfPerson());
		accMediLabTestManageReqImpl.setLabDocRefSelection(
			getLabDocRefSelection());
		accMediLabTestManageReqImpl.setHandlingEquip(getHandlingEquip());
		accMediLabTestManageReqImpl.setLabDocRefHandling(
			getLabDocRefHandling());
		accMediLabTestManageReqImpl.setCalibrationProgram(
			getCalibrationProgram());
		accMediLabTestManageReqImpl.setLabDocRefCalibrat(
			getLabDocRefCalibrat());
		accMediLabTestManageReqImpl.setApprovingReq(getApprovingReq());
		accMediLabTestManageReqImpl.setLabDocRefApproving(
			getLabDocRefApproving());
		accMediLabTestManageReqImpl.setMonitorPerformance(
			getMonitorPerformance());
		accMediLabTestManageReqImpl.setLabDocRefMonitor(getLabDocRefMonitor());
		accMediLabTestManageReqImpl.setEnsuringService(getEnsuringService());
		accMediLabTestManageReqImpl.setLabDocRefEnsuring(
			getLabDocRefEnsuring());
		accMediLabTestManageReqImpl.setReviewOfRequest(getReviewOfRequest());
		accMediLabTestManageReqImpl.setLabDocRefRequest(getLabDocRefRequest());
		accMediLabTestManageReqImpl.setProcedureForLab(getProcedureForLab());
		accMediLabTestManageReqImpl.setLabDocRefProcedure(
			getLabDocRefProcedure());
		accMediLabTestManageReqImpl.setTestMethodValidat(
			getTestMethodValidat());
		accMediLabTestManageReqImpl.setLabDocRefTestMethod(
			getLabDocRefTestMethod());
		accMediLabTestManageReqImpl.setSamplingPlan(getSamplingPlan());
		accMediLabTestManageReqImpl.setLabDocRefSampling(
			getLabDocRefSampling());
		accMediLabTestManageReqImpl.setTransportationReciept(
			getTransportationReciept());
		accMediLabTestManageReqImpl.setLabDocRefTransport(
			getLabDocRefTransport());
		accMediLabTestManageReqImpl.setUncertainityMeasure(
			getUncertainityMeasure());
		accMediLabTestManageReqImpl.setLabDocRefUncertain(
			getLabDocRefUncertain());
		accMediLabTestManageReqImpl.setTestResultValidity(
			getTestResultValidity());
		accMediLabTestManageReqImpl.setLabDocReftestResult(
			getLabDocReftestResult());
		accMediLabTestManageReqImpl.setComplaints(getComplaints());
		accMediLabTestManageReqImpl.setLabDocRefComplaints(
			getLabDocRefComplaints());
		accMediLabTestManageReqImpl.setNonConformingWork(
			getNonConformingWork());
		accMediLabTestManageReqImpl.setLabDocRefNonConfirm(
			getLabDocRefNonConfirm());
		accMediLabTestManageReqImpl.setUniqueIdentification(
			getUniqueIdentification());
		accMediLabTestManageReqImpl.setLabDocRefUnique(getLabDocRefUnique());
		accMediLabTestManageReqImpl.setCurrentRevisionStatus(
			getCurrentRevisionStatus());
		accMediLabTestManageReqImpl.setLabDocRefCurrentRev(
			getLabDocRefCurrentRev());
		accMediLabTestManageReqImpl.setDocChangeIdentify(
			getDocChangeIdentify());
		accMediLabTestManageReqImpl.setLabDocRefDocChange(
			getLabDocRefDocChange());
		accMediLabTestManageReqImpl.setRecordControl(getRecordControl());
		accMediLabTestManageReqImpl.setLabDocRefRecordControl(
			getLabDocRefRecordControl());
		accMediLabTestManageReqImpl.setPlannedAction(getPlannedAction());
		accMediLabTestManageReqImpl.setLabDocRefPlanned(getLabDocRefPlanned());
		accMediLabTestManageReqImpl.setImporvementOpportunity(
			getImporvementOpportunity());
		accMediLabTestManageReqImpl.setLabDocRefImprovement(
			getLabDocRefImprovement());
		accMediLabTestManageReqImpl.setCorrectiveAction(getCorrectiveAction());
		accMediLabTestManageReqImpl.setLabDocRefCorrective(
			getLabDocRefCorrective());
		accMediLabTestManageReqImpl.setInternalAudits(getInternalAudits());
		accMediLabTestManageReqImpl.setLabDocRefInternal(
			getLabDocRefInternal());
		accMediLabTestManageReqImpl.setManagementReview(getManagementReview());
		accMediLabTestManageReqImpl.setLabDocRefManagement(
			getLabDocRefManagement());
		accMediLabTestManageReqImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accMediLabTestManageReqImpl.resetOriginalValues();

		return accMediLabTestManageReqImpl;
	}

	@Override
	public AccMediLabTestManageReq cloneWithOriginalValues() {
		AccMediLabTestManageReqImpl accMediLabTestManageReqImpl =
			new AccMediLabTestManageReqImpl();

		accMediLabTestManageReqImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accMediLabTestManageReqImpl.setAccMediLabTestManageReqId(
			this.<Long>getColumnOriginalValue("accMediLabTestManageReqId"));
		accMediLabTestManageReqImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accMediLabTestManageReqImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accMediLabTestManageReqImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accMediLabTestManageReqImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accMediLabTestManageReqImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accMediLabTestManageReqImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accMediLabTestManageReqImpl.setPoliciesForFulfil(
			this.<String>getColumnOriginalValue("policiesForFulfil"));
		accMediLabTestManageReqImpl.setLabDocRefPolicies(
			this.<String>getColumnOriginalValue("labDocRefPolicies"));
		accMediLabTestManageReqImpl.setImpartialityProvision(
			this.<String>getColumnOriginalValue("impartialityProvision"));
		accMediLabTestManageReqImpl.setLabDocRefImpartProv(
			this.<String>getColumnOriginalValue("labDocRefImpartProv"));
		accMediLabTestManageReqImpl.setConfidientialityProv(
			this.<String>getColumnOriginalValue("confidientialityProv"));
		accMediLabTestManageReqImpl.setLabDocRefConfid(
			this.<String>getColumnOriginalValue("labDocRefConfid"));
		accMediLabTestManageReqImpl.setCommitmentEvidence(
			this.<String>getColumnOriginalValue("commitmentEvidence"));
		accMediLabTestManageReqImpl.setLabDocRefCommitment(
			this.<String>getColumnOriginalValue("labDocRefCommitment"));
		accMediLabTestManageReqImpl.setReferenceEvidence(
			this.<String>getColumnOriginalValue("referenceEvidence"));
		accMediLabTestManageReqImpl.setLabDocRefReference(
			this.<String>getColumnOriginalValue("labDocRefReference"));
		accMediLabTestManageReqImpl.setDocDescribingRole(
			this.<String>getColumnOriginalValue("docDescribingRole"));
		accMediLabTestManageReqImpl.setLabDocRefDocDes(
			this.<String>getColumnOriginalValue("labDocRefDocDes"));
		accMediLabTestManageReqImpl.setRolesofPersonnel(
			this.<String>getColumnOriginalValue("rolesofPersonnel"));
		accMediLabTestManageReqImpl.setLabDocRefRoles(
			this.<String>getColumnOriginalValue("labDocRefRoles"));
		accMediLabTestManageReqImpl.setCompetenceReq(
			this.<String>getColumnOriginalValue("competenceReq"));
		accMediLabTestManageReqImpl.setLabDocRefCompetence(
			this.<String>getColumnOriginalValue("labDocRefCompetence"));
		accMediLabTestManageReqImpl.setSelectionOfPerson(
			this.<String>getColumnOriginalValue("selectionOfPerson"));
		accMediLabTestManageReqImpl.setLabDocRefSelection(
			this.<String>getColumnOriginalValue("labDocRefSelection"));
		accMediLabTestManageReqImpl.setHandlingEquip(
			this.<String>getColumnOriginalValue("handlingEquip"));
		accMediLabTestManageReqImpl.setLabDocRefHandling(
			this.<String>getColumnOriginalValue("labDocRefHandling"));
		accMediLabTestManageReqImpl.setCalibrationProgram(
			this.<String>getColumnOriginalValue("calibrationProgram"));
		accMediLabTestManageReqImpl.setLabDocRefCalibrat(
			this.<String>getColumnOriginalValue("labDocRefCalibrat"));
		accMediLabTestManageReqImpl.setApprovingReq(
			this.<String>getColumnOriginalValue("approvingReq"));
		accMediLabTestManageReqImpl.setLabDocRefApproving(
			this.<String>getColumnOriginalValue("labDocRefApproving"));
		accMediLabTestManageReqImpl.setMonitorPerformance(
			this.<String>getColumnOriginalValue("monitorPerformance"));
		accMediLabTestManageReqImpl.setLabDocRefMonitor(
			this.<String>getColumnOriginalValue("labDocRefMonitor"));
		accMediLabTestManageReqImpl.setEnsuringService(
			this.<String>getColumnOriginalValue("ensuringService"));
		accMediLabTestManageReqImpl.setLabDocRefEnsuring(
			this.<String>getColumnOriginalValue("labDocRefEnsuring"));
		accMediLabTestManageReqImpl.setReviewOfRequest(
			this.<String>getColumnOriginalValue("reviewOfRequest"));
		accMediLabTestManageReqImpl.setLabDocRefRequest(
			this.<String>getColumnOriginalValue("labDocRefRequest"));
		accMediLabTestManageReqImpl.setProcedureForLab(
			this.<String>getColumnOriginalValue("procedureForLab"));
		accMediLabTestManageReqImpl.setLabDocRefProcedure(
			this.<String>getColumnOriginalValue("labDocRefProcedure"));
		accMediLabTestManageReqImpl.setTestMethodValidat(
			this.<String>getColumnOriginalValue("testMethodValidat"));
		accMediLabTestManageReqImpl.setLabDocRefTestMethod(
			this.<String>getColumnOriginalValue("labDocRefTestMethod"));
		accMediLabTestManageReqImpl.setSamplingPlan(
			this.<String>getColumnOriginalValue("samplingPlan"));
		accMediLabTestManageReqImpl.setLabDocRefSampling(
			this.<String>getColumnOriginalValue("labDocRefSampling"));
		accMediLabTestManageReqImpl.setTransportationReciept(
			this.<String>getColumnOriginalValue("transportationReciept"));
		accMediLabTestManageReqImpl.setLabDocRefTransport(
			this.<String>getColumnOriginalValue("labDocRefTransport"));
		accMediLabTestManageReqImpl.setUncertainityMeasure(
			this.<String>getColumnOriginalValue("uncertainityMeasure"));
		accMediLabTestManageReqImpl.setLabDocRefUncertain(
			this.<String>getColumnOriginalValue("labDocRefUncertain"));
		accMediLabTestManageReqImpl.setTestResultValidity(
			this.<String>getColumnOriginalValue("testResultValidity"));
		accMediLabTestManageReqImpl.setLabDocReftestResult(
			this.<String>getColumnOriginalValue("labDocReftestResult"));
		accMediLabTestManageReqImpl.setComplaints(
			this.<String>getColumnOriginalValue("complaints"));
		accMediLabTestManageReqImpl.setLabDocRefComplaints(
			this.<String>getColumnOriginalValue("labDocRefComplaints"));
		accMediLabTestManageReqImpl.setNonConformingWork(
			this.<String>getColumnOriginalValue("nonConformingWork"));
		accMediLabTestManageReqImpl.setLabDocRefNonConfirm(
			this.<String>getColumnOriginalValue("labDocRefNonConfirm"));
		accMediLabTestManageReqImpl.setUniqueIdentification(
			this.<String>getColumnOriginalValue("uniqueIdentification"));
		accMediLabTestManageReqImpl.setLabDocRefUnique(
			this.<String>getColumnOriginalValue("labDocRefUnique"));
		accMediLabTestManageReqImpl.setCurrentRevisionStatus(
			this.<String>getColumnOriginalValue("currentRevisionStatus"));
		accMediLabTestManageReqImpl.setLabDocRefCurrentRev(
			this.<String>getColumnOriginalValue("labDocRefCurrentRev"));
		accMediLabTestManageReqImpl.setDocChangeIdentify(
			this.<String>getColumnOriginalValue("docChangeIdentify"));
		accMediLabTestManageReqImpl.setLabDocRefDocChange(
			this.<String>getColumnOriginalValue("labDocRefDocChange"));
		accMediLabTestManageReqImpl.setRecordControl(
			this.<String>getColumnOriginalValue("recordControl"));
		accMediLabTestManageReqImpl.setLabDocRefRecordControl(
			this.<String>getColumnOriginalValue("labDocRefRecordControl"));
		accMediLabTestManageReqImpl.setPlannedAction(
			this.<String>getColumnOriginalValue("plannedAction"));
		accMediLabTestManageReqImpl.setLabDocRefPlanned(
			this.<String>getColumnOriginalValue("labDocRefPlanned"));
		accMediLabTestManageReqImpl.setImporvementOpportunity(
			this.<String>getColumnOriginalValue("imporvementOpportunity"));
		accMediLabTestManageReqImpl.setLabDocRefImprovement(
			this.<String>getColumnOriginalValue("labDocRefImprovement"));
		accMediLabTestManageReqImpl.setCorrectiveAction(
			this.<String>getColumnOriginalValue("correctiveAction"));
		accMediLabTestManageReqImpl.setLabDocRefCorrective(
			this.<String>getColumnOriginalValue("labDocRefCorrective"));
		accMediLabTestManageReqImpl.setInternalAudits(
			this.<String>getColumnOriginalValue("internalAudits"));
		accMediLabTestManageReqImpl.setLabDocRefInternal(
			this.<String>getColumnOriginalValue("labDocRefInternal"));
		accMediLabTestManageReqImpl.setManagementReview(
			this.<String>getColumnOriginalValue("managementReview"));
		accMediLabTestManageReqImpl.setLabDocRefManagement(
			this.<String>getColumnOriginalValue("labDocRefManagement"));
		accMediLabTestManageReqImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accMediLabTestManageReqImpl;
	}

	@Override
	public int compareTo(AccMediLabTestManageReq accMediLabTestManageReq) {
		long primaryKey = accMediLabTestManageReq.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccMediLabTestManageReq)) {
			return false;
		}

		AccMediLabTestManageReq accMediLabTestManageReq =
			(AccMediLabTestManageReq)object;

		long primaryKey = accMediLabTestManageReq.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;
	}

	@Override
	public CacheModel<AccMediLabTestManageReq> toCacheModel() {
		AccMediLabTestManageReqCacheModel accMediLabTestManageReqCacheModel =
			new AccMediLabTestManageReqCacheModel();

		accMediLabTestManageReqCacheModel.uuid = getUuid();

		String uuid = accMediLabTestManageReqCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accMediLabTestManageReqCacheModel.uuid = null;
		}

		accMediLabTestManageReqCacheModel.accMediLabTestManageReqId =
			getAccMediLabTestManageReqId();

		accMediLabTestManageReqCacheModel.groupId = getGroupId();

		accMediLabTestManageReqCacheModel.companyId = getCompanyId();

		accMediLabTestManageReqCacheModel.userId = getUserId();

		accMediLabTestManageReqCacheModel.userName = getUserName();

		String userName = accMediLabTestManageReqCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accMediLabTestManageReqCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accMediLabTestManageReqCacheModel.createDate = createDate.getTime();
		}
		else {
			accMediLabTestManageReqCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accMediLabTestManageReqCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accMediLabTestManageReqCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accMediLabTestManageReqCacheModel.policiesForFulfil =
			getPoliciesForFulfil();

		String policiesForFulfil =
			accMediLabTestManageReqCacheModel.policiesForFulfil;

		if ((policiesForFulfil != null) && (policiesForFulfil.length() == 0)) {
			accMediLabTestManageReqCacheModel.policiesForFulfil = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefPolicies =
			getLabDocRefPolicies();

		String labDocRefPolicies =
			accMediLabTestManageReqCacheModel.labDocRefPolicies;

		if ((labDocRefPolicies != null) && (labDocRefPolicies.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefPolicies = null;
		}

		accMediLabTestManageReqCacheModel.impartialityProvision =
			getImpartialityProvision();

		String impartialityProvision =
			accMediLabTestManageReqCacheModel.impartialityProvision;

		if ((impartialityProvision != null) &&
			(impartialityProvision.length() == 0)) {

			accMediLabTestManageReqCacheModel.impartialityProvision = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefImpartProv =
			getLabDocRefImpartProv();

		String labDocRefImpartProv =
			accMediLabTestManageReqCacheModel.labDocRefImpartProv;

		if ((labDocRefImpartProv != null) &&
			(labDocRefImpartProv.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefImpartProv = null;
		}

		accMediLabTestManageReqCacheModel.confidientialityProv =
			getConfidientialityProv();

		String confidientialityProv =
			accMediLabTestManageReqCacheModel.confidientialityProv;

		if ((confidientialityProv != null) &&
			(confidientialityProv.length() == 0)) {

			accMediLabTestManageReqCacheModel.confidientialityProv = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefConfid =
			getLabDocRefConfid();

		String labDocRefConfid =
			accMediLabTestManageReqCacheModel.labDocRefConfid;

		if ((labDocRefConfid != null) && (labDocRefConfid.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefConfid = null;
		}

		accMediLabTestManageReqCacheModel.commitmentEvidence =
			getCommitmentEvidence();

		String commitmentEvidence =
			accMediLabTestManageReqCacheModel.commitmentEvidence;

		if ((commitmentEvidence != null) &&
			(commitmentEvidence.length() == 0)) {

			accMediLabTestManageReqCacheModel.commitmentEvidence = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefCommitment =
			getLabDocRefCommitment();

		String labDocRefCommitment =
			accMediLabTestManageReqCacheModel.labDocRefCommitment;

		if ((labDocRefCommitment != null) &&
			(labDocRefCommitment.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefCommitment = null;
		}

		accMediLabTestManageReqCacheModel.referenceEvidence =
			getReferenceEvidence();

		String referenceEvidence =
			accMediLabTestManageReqCacheModel.referenceEvidence;

		if ((referenceEvidence != null) && (referenceEvidence.length() == 0)) {
			accMediLabTestManageReqCacheModel.referenceEvidence = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefReference =
			getLabDocRefReference();

		String labDocRefReference =
			accMediLabTestManageReqCacheModel.labDocRefReference;

		if ((labDocRefReference != null) &&
			(labDocRefReference.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefReference = null;
		}

		accMediLabTestManageReqCacheModel.docDescribingRole =
			getDocDescribingRole();

		String docDescribingRole =
			accMediLabTestManageReqCacheModel.docDescribingRole;

		if ((docDescribingRole != null) && (docDescribingRole.length() == 0)) {
			accMediLabTestManageReqCacheModel.docDescribingRole = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefDocDes =
			getLabDocRefDocDes();

		String labDocRefDocDes =
			accMediLabTestManageReqCacheModel.labDocRefDocDes;

		if ((labDocRefDocDes != null) && (labDocRefDocDes.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefDocDes = null;
		}

		accMediLabTestManageReqCacheModel.rolesofPersonnel =
			getRolesofPersonnel();

		String rolesofPersonnel =
			accMediLabTestManageReqCacheModel.rolesofPersonnel;

		if ((rolesofPersonnel != null) && (rolesofPersonnel.length() == 0)) {
			accMediLabTestManageReqCacheModel.rolesofPersonnel = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefRoles = getLabDocRefRoles();

		String labDocRefRoles =
			accMediLabTestManageReqCacheModel.labDocRefRoles;

		if ((labDocRefRoles != null) && (labDocRefRoles.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefRoles = null;
		}

		accMediLabTestManageReqCacheModel.competenceReq = getCompetenceReq();

		String competenceReq = accMediLabTestManageReqCacheModel.competenceReq;

		if ((competenceReq != null) && (competenceReq.length() == 0)) {
			accMediLabTestManageReqCacheModel.competenceReq = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefCompetence =
			getLabDocRefCompetence();

		String labDocRefCompetence =
			accMediLabTestManageReqCacheModel.labDocRefCompetence;

		if ((labDocRefCompetence != null) &&
			(labDocRefCompetence.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefCompetence = null;
		}

		accMediLabTestManageReqCacheModel.selectionOfPerson =
			getSelectionOfPerson();

		String selectionOfPerson =
			accMediLabTestManageReqCacheModel.selectionOfPerson;

		if ((selectionOfPerson != null) && (selectionOfPerson.length() == 0)) {
			accMediLabTestManageReqCacheModel.selectionOfPerson = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefSelection =
			getLabDocRefSelection();

		String labDocRefSelection =
			accMediLabTestManageReqCacheModel.labDocRefSelection;

		if ((labDocRefSelection != null) &&
			(labDocRefSelection.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefSelection = null;
		}

		accMediLabTestManageReqCacheModel.handlingEquip = getHandlingEquip();

		String handlingEquip = accMediLabTestManageReqCacheModel.handlingEquip;

		if ((handlingEquip != null) && (handlingEquip.length() == 0)) {
			accMediLabTestManageReqCacheModel.handlingEquip = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefHandling =
			getLabDocRefHandling();

		String labDocRefHandling =
			accMediLabTestManageReqCacheModel.labDocRefHandling;

		if ((labDocRefHandling != null) && (labDocRefHandling.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefHandling = null;
		}

		accMediLabTestManageReqCacheModel.calibrationProgram =
			getCalibrationProgram();

		String calibrationProgram =
			accMediLabTestManageReqCacheModel.calibrationProgram;

		if ((calibrationProgram != null) &&
			(calibrationProgram.length() == 0)) {

			accMediLabTestManageReqCacheModel.calibrationProgram = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefCalibrat =
			getLabDocRefCalibrat();

		String labDocRefCalibrat =
			accMediLabTestManageReqCacheModel.labDocRefCalibrat;

		if ((labDocRefCalibrat != null) && (labDocRefCalibrat.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefCalibrat = null;
		}

		accMediLabTestManageReqCacheModel.approvingReq = getApprovingReq();

		String approvingReq = accMediLabTestManageReqCacheModel.approvingReq;

		if ((approvingReq != null) && (approvingReq.length() == 0)) {
			accMediLabTestManageReqCacheModel.approvingReq = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefApproving =
			getLabDocRefApproving();

		String labDocRefApproving =
			accMediLabTestManageReqCacheModel.labDocRefApproving;

		if ((labDocRefApproving != null) &&
			(labDocRefApproving.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefApproving = null;
		}

		accMediLabTestManageReqCacheModel.monitorPerformance =
			getMonitorPerformance();

		String monitorPerformance =
			accMediLabTestManageReqCacheModel.monitorPerformance;

		if ((monitorPerformance != null) &&
			(monitorPerformance.length() == 0)) {

			accMediLabTestManageReqCacheModel.monitorPerformance = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefMonitor =
			getLabDocRefMonitor();

		String labDocRefMonitor =
			accMediLabTestManageReqCacheModel.labDocRefMonitor;

		if ((labDocRefMonitor != null) && (labDocRefMonitor.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefMonitor = null;
		}

		accMediLabTestManageReqCacheModel.ensuringService =
			getEnsuringService();

		String ensuringService =
			accMediLabTestManageReqCacheModel.ensuringService;

		if ((ensuringService != null) && (ensuringService.length() == 0)) {
			accMediLabTestManageReqCacheModel.ensuringService = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefEnsuring =
			getLabDocRefEnsuring();

		String labDocRefEnsuring =
			accMediLabTestManageReqCacheModel.labDocRefEnsuring;

		if ((labDocRefEnsuring != null) && (labDocRefEnsuring.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefEnsuring = null;
		}

		accMediLabTestManageReqCacheModel.reviewOfRequest =
			getReviewOfRequest();

		String reviewOfRequest =
			accMediLabTestManageReqCacheModel.reviewOfRequest;

		if ((reviewOfRequest != null) && (reviewOfRequest.length() == 0)) {
			accMediLabTestManageReqCacheModel.reviewOfRequest = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefRequest =
			getLabDocRefRequest();

		String labDocRefRequest =
			accMediLabTestManageReqCacheModel.labDocRefRequest;

		if ((labDocRefRequest != null) && (labDocRefRequest.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefRequest = null;
		}

		accMediLabTestManageReqCacheModel.procedureForLab =
			getProcedureForLab();

		String procedureForLab =
			accMediLabTestManageReqCacheModel.procedureForLab;

		if ((procedureForLab != null) && (procedureForLab.length() == 0)) {
			accMediLabTestManageReqCacheModel.procedureForLab = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefProcedure =
			getLabDocRefProcedure();

		String labDocRefProcedure =
			accMediLabTestManageReqCacheModel.labDocRefProcedure;

		if ((labDocRefProcedure != null) &&
			(labDocRefProcedure.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefProcedure = null;
		}

		accMediLabTestManageReqCacheModel.testMethodValidat =
			getTestMethodValidat();

		String testMethodValidat =
			accMediLabTestManageReqCacheModel.testMethodValidat;

		if ((testMethodValidat != null) && (testMethodValidat.length() == 0)) {
			accMediLabTestManageReqCacheModel.testMethodValidat = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefTestMethod =
			getLabDocRefTestMethod();

		String labDocRefTestMethod =
			accMediLabTestManageReqCacheModel.labDocRefTestMethod;

		if ((labDocRefTestMethod != null) &&
			(labDocRefTestMethod.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefTestMethod = null;
		}

		accMediLabTestManageReqCacheModel.samplingPlan = getSamplingPlan();

		String samplingPlan = accMediLabTestManageReqCacheModel.samplingPlan;

		if ((samplingPlan != null) && (samplingPlan.length() == 0)) {
			accMediLabTestManageReqCacheModel.samplingPlan = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefSampling =
			getLabDocRefSampling();

		String labDocRefSampling =
			accMediLabTestManageReqCacheModel.labDocRefSampling;

		if ((labDocRefSampling != null) && (labDocRefSampling.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefSampling = null;
		}

		accMediLabTestManageReqCacheModel.transportationReciept =
			getTransportationReciept();

		String transportationReciept =
			accMediLabTestManageReqCacheModel.transportationReciept;

		if ((transportationReciept != null) &&
			(transportationReciept.length() == 0)) {

			accMediLabTestManageReqCacheModel.transportationReciept = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefTransport =
			getLabDocRefTransport();

		String labDocRefTransport =
			accMediLabTestManageReqCacheModel.labDocRefTransport;

		if ((labDocRefTransport != null) &&
			(labDocRefTransport.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefTransport = null;
		}

		accMediLabTestManageReqCacheModel.uncertainityMeasure =
			getUncertainityMeasure();

		String uncertainityMeasure =
			accMediLabTestManageReqCacheModel.uncertainityMeasure;

		if ((uncertainityMeasure != null) &&
			(uncertainityMeasure.length() == 0)) {

			accMediLabTestManageReqCacheModel.uncertainityMeasure = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefUncertain =
			getLabDocRefUncertain();

		String labDocRefUncertain =
			accMediLabTestManageReqCacheModel.labDocRefUncertain;

		if ((labDocRefUncertain != null) &&
			(labDocRefUncertain.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefUncertain = null;
		}

		accMediLabTestManageReqCacheModel.testResultValidity =
			getTestResultValidity();

		String testResultValidity =
			accMediLabTestManageReqCacheModel.testResultValidity;

		if ((testResultValidity != null) &&
			(testResultValidity.length() == 0)) {

			accMediLabTestManageReqCacheModel.testResultValidity = null;
		}

		accMediLabTestManageReqCacheModel.labDocReftestResult =
			getLabDocReftestResult();

		String labDocReftestResult =
			accMediLabTestManageReqCacheModel.labDocReftestResult;

		if ((labDocReftestResult != null) &&
			(labDocReftestResult.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocReftestResult = null;
		}

		accMediLabTestManageReqCacheModel.complaints = getComplaints();

		String complaints = accMediLabTestManageReqCacheModel.complaints;

		if ((complaints != null) && (complaints.length() == 0)) {
			accMediLabTestManageReqCacheModel.complaints = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefComplaints =
			getLabDocRefComplaints();

		String labDocRefComplaints =
			accMediLabTestManageReqCacheModel.labDocRefComplaints;

		if ((labDocRefComplaints != null) &&
			(labDocRefComplaints.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefComplaints = null;
		}

		accMediLabTestManageReqCacheModel.nonConformingWork =
			getNonConformingWork();

		String nonConformingWork =
			accMediLabTestManageReqCacheModel.nonConformingWork;

		if ((nonConformingWork != null) && (nonConformingWork.length() == 0)) {
			accMediLabTestManageReqCacheModel.nonConformingWork = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefNonConfirm =
			getLabDocRefNonConfirm();

		String labDocRefNonConfirm =
			accMediLabTestManageReqCacheModel.labDocRefNonConfirm;

		if ((labDocRefNonConfirm != null) &&
			(labDocRefNonConfirm.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefNonConfirm = null;
		}

		accMediLabTestManageReqCacheModel.uniqueIdentification =
			getUniqueIdentification();

		String uniqueIdentification =
			accMediLabTestManageReqCacheModel.uniqueIdentification;

		if ((uniqueIdentification != null) &&
			(uniqueIdentification.length() == 0)) {

			accMediLabTestManageReqCacheModel.uniqueIdentification = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefUnique =
			getLabDocRefUnique();

		String labDocRefUnique =
			accMediLabTestManageReqCacheModel.labDocRefUnique;

		if ((labDocRefUnique != null) && (labDocRefUnique.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefUnique = null;
		}

		accMediLabTestManageReqCacheModel.currentRevisionStatus =
			getCurrentRevisionStatus();

		String currentRevisionStatus =
			accMediLabTestManageReqCacheModel.currentRevisionStatus;

		if ((currentRevisionStatus != null) &&
			(currentRevisionStatus.length() == 0)) {

			accMediLabTestManageReqCacheModel.currentRevisionStatus = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefCurrentRev =
			getLabDocRefCurrentRev();

		String labDocRefCurrentRev =
			accMediLabTestManageReqCacheModel.labDocRefCurrentRev;

		if ((labDocRefCurrentRev != null) &&
			(labDocRefCurrentRev.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefCurrentRev = null;
		}

		accMediLabTestManageReqCacheModel.docChangeIdentify =
			getDocChangeIdentify();

		String docChangeIdentify =
			accMediLabTestManageReqCacheModel.docChangeIdentify;

		if ((docChangeIdentify != null) && (docChangeIdentify.length() == 0)) {
			accMediLabTestManageReqCacheModel.docChangeIdentify = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefDocChange =
			getLabDocRefDocChange();

		String labDocRefDocChange =
			accMediLabTestManageReqCacheModel.labDocRefDocChange;

		if ((labDocRefDocChange != null) &&
			(labDocRefDocChange.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefDocChange = null;
		}

		accMediLabTestManageReqCacheModel.recordControl = getRecordControl();

		String recordControl = accMediLabTestManageReqCacheModel.recordControl;

		if ((recordControl != null) && (recordControl.length() == 0)) {
			accMediLabTestManageReqCacheModel.recordControl = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefRecordControl =
			getLabDocRefRecordControl();

		String labDocRefRecordControl =
			accMediLabTestManageReqCacheModel.labDocRefRecordControl;

		if ((labDocRefRecordControl != null) &&
			(labDocRefRecordControl.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefRecordControl = null;
		}

		accMediLabTestManageReqCacheModel.plannedAction = getPlannedAction();

		String plannedAction = accMediLabTestManageReqCacheModel.plannedAction;

		if ((plannedAction != null) && (plannedAction.length() == 0)) {
			accMediLabTestManageReqCacheModel.plannedAction = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefPlanned =
			getLabDocRefPlanned();

		String labDocRefPlanned =
			accMediLabTestManageReqCacheModel.labDocRefPlanned;

		if ((labDocRefPlanned != null) && (labDocRefPlanned.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefPlanned = null;
		}

		accMediLabTestManageReqCacheModel.imporvementOpportunity =
			getImporvementOpportunity();

		String imporvementOpportunity =
			accMediLabTestManageReqCacheModel.imporvementOpportunity;

		if ((imporvementOpportunity != null) &&
			(imporvementOpportunity.length() == 0)) {

			accMediLabTestManageReqCacheModel.imporvementOpportunity = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefImprovement =
			getLabDocRefImprovement();

		String labDocRefImprovement =
			accMediLabTestManageReqCacheModel.labDocRefImprovement;

		if ((labDocRefImprovement != null) &&
			(labDocRefImprovement.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefImprovement = null;
		}

		accMediLabTestManageReqCacheModel.correctiveAction =
			getCorrectiveAction();

		String correctiveAction =
			accMediLabTestManageReqCacheModel.correctiveAction;

		if ((correctiveAction != null) && (correctiveAction.length() == 0)) {
			accMediLabTestManageReqCacheModel.correctiveAction = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefCorrective =
			getLabDocRefCorrective();

		String labDocRefCorrective =
			accMediLabTestManageReqCacheModel.labDocRefCorrective;

		if ((labDocRefCorrective != null) &&
			(labDocRefCorrective.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefCorrective = null;
		}

		accMediLabTestManageReqCacheModel.internalAudits = getInternalAudits();

		String internalAudits =
			accMediLabTestManageReqCacheModel.internalAudits;

		if ((internalAudits != null) && (internalAudits.length() == 0)) {
			accMediLabTestManageReqCacheModel.internalAudits = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefInternal =
			getLabDocRefInternal();

		String labDocRefInternal =
			accMediLabTestManageReqCacheModel.labDocRefInternal;

		if ((labDocRefInternal != null) && (labDocRefInternal.length() == 0)) {
			accMediLabTestManageReqCacheModel.labDocRefInternal = null;
		}

		accMediLabTestManageReqCacheModel.managementReview =
			getManagementReview();

		String managementReview =
			accMediLabTestManageReqCacheModel.managementReview;

		if ((managementReview != null) && (managementReview.length() == 0)) {
			accMediLabTestManageReqCacheModel.managementReview = null;
		}

		accMediLabTestManageReqCacheModel.labDocRefManagement =
			getLabDocRefManagement();

		String labDocRefManagement =
			accMediLabTestManageReqCacheModel.labDocRefManagement;

		if ((labDocRefManagement != null) &&
			(labDocRefManagement.length() == 0)) {

			accMediLabTestManageReqCacheModel.labDocRefManagement = null;
		}

		accMediLabTestManageReqCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accMediLabTestManageReqCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccMediLabTestManageReq, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccMediLabTestManageReq, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccMediLabTestManageReq, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccMediLabTestManageReq)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AccMediLabTestManageReq>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AccMediLabTestManageReq.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accMediLabTestManageReqId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _policiesForFulfil;
	private String _labDocRefPolicies;
	private String _impartialityProvision;
	private String _labDocRefImpartProv;
	private String _confidientialityProv;
	private String _labDocRefConfid;
	private String _commitmentEvidence;
	private String _labDocRefCommitment;
	private String _referenceEvidence;
	private String _labDocRefReference;
	private String _docDescribingRole;
	private String _labDocRefDocDes;
	private String _rolesofPersonnel;
	private String _labDocRefRoles;
	private String _competenceReq;
	private String _labDocRefCompetence;
	private String _selectionOfPerson;
	private String _labDocRefSelection;
	private String _handlingEquip;
	private String _labDocRefHandling;
	private String _calibrationProgram;
	private String _labDocRefCalibrat;
	private String _approvingReq;
	private String _labDocRefApproving;
	private String _monitorPerformance;
	private String _labDocRefMonitor;
	private String _ensuringService;
	private String _labDocRefEnsuring;
	private String _reviewOfRequest;
	private String _labDocRefRequest;
	private String _procedureForLab;
	private String _labDocRefProcedure;
	private String _testMethodValidat;
	private String _labDocRefTestMethod;
	private String _samplingPlan;
	private String _labDocRefSampling;
	private String _transportationReciept;
	private String _labDocRefTransport;
	private String _uncertainityMeasure;
	private String _labDocRefUncertain;
	private String _testResultValidity;
	private String _labDocReftestResult;
	private String _complaints;
	private String _labDocRefComplaints;
	private String _nonConformingWork;
	private String _labDocRefNonConfirm;
	private String _uniqueIdentification;
	private String _labDocRefUnique;
	private String _currentRevisionStatus;
	private String _labDocRefCurrentRev;
	private String _docChangeIdentify;
	private String _labDocRefDocChange;
	private String _recordControl;
	private String _labDocRefRecordControl;
	private String _plannedAction;
	private String _labDocRefPlanned;
	private String _imporvementOpportunity;
	private String _labDocRefImprovement;
	private String _correctiveAction;
	private String _labDocRefCorrective;
	private String _internalAudits;
	private String _labDocRefInternal;
	private String _managementReview;
	private String _labDocRefManagement;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccMediLabTestManageReq, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccMediLabTestManageReq)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accMediLabTestManageReqId", _accMediLabTestManageReqId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("policiesForFulfil", _policiesForFulfil);
		_columnOriginalValues.put("labDocRefPolicies", _labDocRefPolicies);
		_columnOriginalValues.put(
			"impartialityProvision", _impartialityProvision);
		_columnOriginalValues.put("labDocRefImpartProv", _labDocRefImpartProv);
		_columnOriginalValues.put(
			"confidientialityProv", _confidientialityProv);
		_columnOriginalValues.put("labDocRefConfid", _labDocRefConfid);
		_columnOriginalValues.put("commitmentEvidence", _commitmentEvidence);
		_columnOriginalValues.put("labDocRefCommitment", _labDocRefCommitment);
		_columnOriginalValues.put("referenceEvidence", _referenceEvidence);
		_columnOriginalValues.put("labDocRefReference", _labDocRefReference);
		_columnOriginalValues.put("docDescribingRole", _docDescribingRole);
		_columnOriginalValues.put("labDocRefDocDes", _labDocRefDocDes);
		_columnOriginalValues.put("rolesofPersonnel", _rolesofPersonnel);
		_columnOriginalValues.put("labDocRefRoles", _labDocRefRoles);
		_columnOriginalValues.put("competenceReq", _competenceReq);
		_columnOriginalValues.put("labDocRefCompetence", _labDocRefCompetence);
		_columnOriginalValues.put("selectionOfPerson", _selectionOfPerson);
		_columnOriginalValues.put("labDocRefSelection", _labDocRefSelection);
		_columnOriginalValues.put("handlingEquip", _handlingEquip);
		_columnOriginalValues.put("labDocRefHandling", _labDocRefHandling);
		_columnOriginalValues.put("calibrationProgram", _calibrationProgram);
		_columnOriginalValues.put("labDocRefCalibrat", _labDocRefCalibrat);
		_columnOriginalValues.put("approvingReq", _approvingReq);
		_columnOriginalValues.put("labDocRefApproving", _labDocRefApproving);
		_columnOriginalValues.put("monitorPerformance", _monitorPerformance);
		_columnOriginalValues.put("labDocRefMonitor", _labDocRefMonitor);
		_columnOriginalValues.put("ensuringService", _ensuringService);
		_columnOriginalValues.put("labDocRefEnsuring", _labDocRefEnsuring);
		_columnOriginalValues.put("reviewOfRequest", _reviewOfRequest);
		_columnOriginalValues.put("labDocRefRequest", _labDocRefRequest);
		_columnOriginalValues.put("procedureForLab", _procedureForLab);
		_columnOriginalValues.put("labDocRefProcedure", _labDocRefProcedure);
		_columnOriginalValues.put("testMethodValidat", _testMethodValidat);
		_columnOriginalValues.put("labDocRefTestMethod", _labDocRefTestMethod);
		_columnOriginalValues.put("samplingPlan", _samplingPlan);
		_columnOriginalValues.put("labDocRefSampling", _labDocRefSampling);
		_columnOriginalValues.put(
			"transportationReciept", _transportationReciept);
		_columnOriginalValues.put("labDocRefTransport", _labDocRefTransport);
		_columnOriginalValues.put("uncertainityMeasure", _uncertainityMeasure);
		_columnOriginalValues.put("labDocRefUncertain", _labDocRefUncertain);
		_columnOriginalValues.put("testResultValidity", _testResultValidity);
		_columnOriginalValues.put("labDocReftestResult", _labDocReftestResult);
		_columnOriginalValues.put("complaints", _complaints);
		_columnOriginalValues.put("labDocRefComplaints", _labDocRefComplaints);
		_columnOriginalValues.put("nonConformingWork", _nonConformingWork);
		_columnOriginalValues.put("labDocRefNonConfirm", _labDocRefNonConfirm);
		_columnOriginalValues.put(
			"uniqueIdentification", _uniqueIdentification);
		_columnOriginalValues.put("labDocRefUnique", _labDocRefUnique);
		_columnOriginalValues.put(
			"currentRevisionStatus", _currentRevisionStatus);
		_columnOriginalValues.put("labDocRefCurrentRev", _labDocRefCurrentRev);
		_columnOriginalValues.put("docChangeIdentify", _docChangeIdentify);
		_columnOriginalValues.put("labDocRefDocChange", _labDocRefDocChange);
		_columnOriginalValues.put("recordControl", _recordControl);
		_columnOriginalValues.put(
			"labDocRefRecordControl", _labDocRefRecordControl);
		_columnOriginalValues.put("plannedAction", _plannedAction);
		_columnOriginalValues.put("labDocRefPlanned", _labDocRefPlanned);
		_columnOriginalValues.put(
			"imporvementOpportunity", _imporvementOpportunity);
		_columnOriginalValues.put(
			"labDocRefImprovement", _labDocRefImprovement);
		_columnOriginalValues.put("correctiveAction", _correctiveAction);
		_columnOriginalValues.put("labDocRefCorrective", _labDocRefCorrective);
		_columnOriginalValues.put("internalAudits", _internalAudits);
		_columnOriginalValues.put("labDocRefInternal", _labDocRefInternal);
		_columnOriginalValues.put("managementReview", _managementReview);
		_columnOriginalValues.put("labDocRefManagement", _labDocRefManagement);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private AccMediLabTestManageReq _escapedModel;

}