/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AccInsBodiesManageSys;
import com.nbp.janaac.application.form.service.model.AccInsBodiesManageSysModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccInsBodiesManageSys service. Represents a row in the &quot;nbp_janaac_acc_ins_body_manag&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccInsBodiesManageSysModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccInsBodiesManageSysImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccInsBodiesManageSysImpl
 * @generated
 */
@JSON(strict = true)
public class AccInsBodiesManageSysModelImpl
	extends BaseModelImpl<AccInsBodiesManageSys>
	implements AccInsBodiesManageSysModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acc ins bodies manage sys model instance should use the <code>AccInsBodiesManageSys</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_acc_ins_body_manag";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accInsBodiesManageSysId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"optionFollow", Types.VARCHAR}, {"manualApproval", Types.VARCHAR},
		{"qMRefManual", Types.VARCHAR}, {"relevantPolicies", Types.VARCHAR},
		{"qMRefRelevant", Types.VARCHAR}, {"overallObj", Types.VARCHAR},
		{"qMRefOverallObj", Types.VARCHAR},
		{"supportingProcedure", Types.VARCHAR},
		{"qMRefSupporting", Types.VARCHAR}, {"technicalMangmnt", Types.VARCHAR},
		{"qMRefTechnical", Types.VARCHAR}, {"documentation", Types.VARCHAR},
		{"qMRefDocumentation", Types.VARCHAR}, {"docContolProc", Types.VARCHAR},
		{"qMRefDocControl", Types.VARCHAR}, {"documntChanges", Types.VARCHAR},
		{"qMRefDocumntChanges", Types.VARCHAR},
		{"controlOfQuality", Types.VARCHAR}, {"qMRefControl", Types.VARCHAR},
		{"managementReview", Types.VARCHAR}, {"qMRefManage", Types.VARCHAR},
		{"insInternalAudits", Types.VARCHAR},
		{"qMRefInternalAudit", Types.VARCHAR},
		{"insCorrectiveAction", Types.VARCHAR}, {"qMRefCorrect", Types.VARCHAR},
		{"insPreventiveAction", Types.VARCHAR},
		{"qMRefPreventive", Types.VARCHAR}, {"personnel", Types.VARCHAR},
		{"qMRefPersonnel", Types.VARCHAR}, {"equipment", Types.VARCHAR},
		{"qMRefEquip", Types.VARCHAR}, {"inspection", Types.VARCHAR},
		{"qMRefInspection", Types.VARCHAR},
		{"contractualArrange", Types.VARCHAR},
		{"qMRefContractual", Types.VARCHAR}, {"handlingInsItem", Types.VARCHAR},
		{"qMRefHandling", Types.VARCHAR}, {"complaintsAppeals", Types.VARCHAR},
		{"qMRefComplaints", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accInsBodiesManageSysId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("optionFollow", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manualApproval", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefManual", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("relevantPolicies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefRelevant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overallObj", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefOverallObj", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("supportingProcedure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefSupporting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("technicalMangmnt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefTechnical", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDocumentation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docContolProc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDocControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documntChanges", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefDocumntChanges", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("controlOfQuality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managementReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefManage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insInternalAudits", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefInternalAudit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insCorrectiveAction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefCorrect", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insPreventiveAction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPreventive", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefPersonnel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefEquip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefInspection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractualArrange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefContractual", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("handlingInsItem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefHandling", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("complaintsAppeals", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qMRefComplaints", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_acc_ins_body_manag (uuid_ VARCHAR(75) null,accInsBodiesManageSysId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,optionFollow VARCHAR(75) null,manualApproval VARCHAR(75) null,qMRefManual VARCHAR(75) null,relevantPolicies VARCHAR(75) null,qMRefRelevant VARCHAR(75) null,overallObj VARCHAR(75) null,qMRefOverallObj VARCHAR(75) null,supportingProcedure VARCHAR(75) null,qMRefSupporting VARCHAR(75) null,technicalMangmnt VARCHAR(75) null,qMRefTechnical VARCHAR(75) null,documentation VARCHAR(75) null,qMRefDocumentation VARCHAR(75) null,docContolProc VARCHAR(75) null,qMRefDocControl VARCHAR(75) null,documntChanges VARCHAR(75) null,qMRefDocumntChanges VARCHAR(75) null,controlOfQuality VARCHAR(75) null,qMRefControl VARCHAR(75) null,managementReview VARCHAR(75) null,qMRefManage VARCHAR(75) null,insInternalAudits VARCHAR(75) null,qMRefInternalAudit VARCHAR(75) null,insCorrectiveAction VARCHAR(75) null,qMRefCorrect VARCHAR(75) null,insPreventiveAction VARCHAR(75) null,qMRefPreventive VARCHAR(75) null,personnel VARCHAR(75) null,qMRefPersonnel VARCHAR(75) null,equipment VARCHAR(75) null,qMRefEquip VARCHAR(75) null,inspection VARCHAR(75) null,qMRefInspection VARCHAR(75) null,contractualArrange VARCHAR(75) null,qMRefContractual VARCHAR(75) null,handlingInsItem VARCHAR(75) null,qMRefHandling VARCHAR(75) null,complaintsAppeals VARCHAR(75) null,qMRefComplaints VARCHAR(75) null,janaacApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_acc_ins_body_manag";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accInsBodiesManageSys.accInsBodiesManageSysId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_acc_ins_body_manag.accInsBodiesManageSysId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCINSBODIESMANAGESYSID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccInsBodiesManageSysModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accInsBodiesManageSysId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccInsBodiesManageSysId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accInsBodiesManageSysId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccInsBodiesManageSys.class;
	}

	@Override
	public String getModelClassName() {
		return AccInsBodiesManageSys.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccInsBodiesManageSys, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccInsBodiesManageSys, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccInsBodiesManageSys, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccInsBodiesManageSys)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccInsBodiesManageSys, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccInsBodiesManageSys, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccInsBodiesManageSys)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccInsBodiesManageSys, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccInsBodiesManageSys, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AccInsBodiesManageSys, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AccInsBodiesManageSys, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<AccInsBodiesManageSys, Object>>();

			attributeGetterFunctions.put(
				"uuid", AccInsBodiesManageSys::getUuid);
			attributeGetterFunctions.put(
				"accInsBodiesManageSysId",
				AccInsBodiesManageSys::getAccInsBodiesManageSysId);
			attributeGetterFunctions.put(
				"groupId", AccInsBodiesManageSys::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccInsBodiesManageSys::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AccInsBodiesManageSys::getUserId);
			attributeGetterFunctions.put(
				"userName", AccInsBodiesManageSys::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccInsBodiesManageSys::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccInsBodiesManageSys::getModifiedDate);
			attributeGetterFunctions.put(
				"optionFollow", AccInsBodiesManageSys::getOptionFollow);
			attributeGetterFunctions.put(
				"manualApproval", AccInsBodiesManageSys::getManualApproval);
			attributeGetterFunctions.put(
				"qMRefManual", AccInsBodiesManageSys::getQMRefManual);
			attributeGetterFunctions.put(
				"relevantPolicies", AccInsBodiesManageSys::getRelevantPolicies);
			attributeGetterFunctions.put(
				"qMRefRelevant", AccInsBodiesManageSys::getQMRefRelevant);
			attributeGetterFunctions.put(
				"overallObj", AccInsBodiesManageSys::getOverallObj);
			attributeGetterFunctions.put(
				"qMRefOverallObj", AccInsBodiesManageSys::getQMRefOverallObj);
			attributeGetterFunctions.put(
				"supportingProcedure",
				AccInsBodiesManageSys::getSupportingProcedure);
			attributeGetterFunctions.put(
				"qMRefSupporting", AccInsBodiesManageSys::getQMRefSupporting);
			attributeGetterFunctions.put(
				"technicalMangmnt", AccInsBodiesManageSys::getTechnicalMangmnt);
			attributeGetterFunctions.put(
				"qMRefTechnical", AccInsBodiesManageSys::getQMRefTechnical);
			attributeGetterFunctions.put(
				"documentation", AccInsBodiesManageSys::getDocumentation);
			attributeGetterFunctions.put(
				"qMRefDocumentation",
				AccInsBodiesManageSys::getQMRefDocumentation);
			attributeGetterFunctions.put(
				"docContolProc", AccInsBodiesManageSys::getDocContolProc);
			attributeGetterFunctions.put(
				"qMRefDocControl", AccInsBodiesManageSys::getQMRefDocControl);
			attributeGetterFunctions.put(
				"documntChanges", AccInsBodiesManageSys::getDocumntChanges);
			attributeGetterFunctions.put(
				"qMRefDocumntChanges",
				AccInsBodiesManageSys::getQMRefDocumntChanges);
			attributeGetterFunctions.put(
				"controlOfQuality", AccInsBodiesManageSys::getControlOfQuality);
			attributeGetterFunctions.put(
				"qMRefControl", AccInsBodiesManageSys::getQMRefControl);
			attributeGetterFunctions.put(
				"managementReview", AccInsBodiesManageSys::getManagementReview);
			attributeGetterFunctions.put(
				"qMRefManage", AccInsBodiesManageSys::getQMRefManage);
			attributeGetterFunctions.put(
				"insInternalAudits",
				AccInsBodiesManageSys::getInsInternalAudits);
			attributeGetterFunctions.put(
				"qMRefInternalAudit",
				AccInsBodiesManageSys::getQMRefInternalAudit);
			attributeGetterFunctions.put(
				"insCorrectiveAction",
				AccInsBodiesManageSys::getInsCorrectiveAction);
			attributeGetterFunctions.put(
				"qMRefCorrect", AccInsBodiesManageSys::getQMRefCorrect);
			attributeGetterFunctions.put(
				"insPreventiveAction",
				AccInsBodiesManageSys::getInsPreventiveAction);
			attributeGetterFunctions.put(
				"qMRefPreventive", AccInsBodiesManageSys::getQMRefPreventive);
			attributeGetterFunctions.put(
				"personnel", AccInsBodiesManageSys::getPersonnel);
			attributeGetterFunctions.put(
				"qMRefPersonnel", AccInsBodiesManageSys::getQMRefPersonnel);
			attributeGetterFunctions.put(
				"equipment", AccInsBodiesManageSys::getEquipment);
			attributeGetterFunctions.put(
				"qMRefEquip", AccInsBodiesManageSys::getQMRefEquip);
			attributeGetterFunctions.put(
				"inspection", AccInsBodiesManageSys::getInspection);
			attributeGetterFunctions.put(
				"qMRefInspection", AccInsBodiesManageSys::getQMRefInspection);
			attributeGetterFunctions.put(
				"contractualArrange",
				AccInsBodiesManageSys::getContractualArrange);
			attributeGetterFunctions.put(
				"qMRefContractual", AccInsBodiesManageSys::getQMRefContractual);
			attributeGetterFunctions.put(
				"handlingInsItem", AccInsBodiesManageSys::getHandlingInsItem);
			attributeGetterFunctions.put(
				"qMRefHandling", AccInsBodiesManageSys::getQMRefHandling);
			attributeGetterFunctions.put(
				"complaintsAppeals",
				AccInsBodiesManageSys::getComplaintsAppeals);
			attributeGetterFunctions.put(
				"qMRefComplaints", AccInsBodiesManageSys::getQMRefComplaints);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AccInsBodiesManageSys::getJanaacApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AccInsBodiesManageSys, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccInsBodiesManageSys, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AccInsBodiesManageSys, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setUuid);
			attributeSetterBiConsumers.put(
				"accInsBodiesManageSysId",
				(BiConsumer<AccInsBodiesManageSys, Long>)
					AccInsBodiesManageSys::setAccInsBodiesManageSysId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccInsBodiesManageSys, Long>)
					AccInsBodiesManageSys::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccInsBodiesManageSys, Long>)
					AccInsBodiesManageSys::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccInsBodiesManageSys, Long>)
					AccInsBodiesManageSys::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccInsBodiesManageSys, Date>)
					AccInsBodiesManageSys::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccInsBodiesManageSys, Date>)
					AccInsBodiesManageSys::setModifiedDate);
			attributeSetterBiConsumers.put(
				"optionFollow",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setOptionFollow);
			attributeSetterBiConsumers.put(
				"manualApproval",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setManualApproval);
			attributeSetterBiConsumers.put(
				"qMRefManual",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefManual);
			attributeSetterBiConsumers.put(
				"relevantPolicies",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setRelevantPolicies);
			attributeSetterBiConsumers.put(
				"qMRefRelevant",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefRelevant);
			attributeSetterBiConsumers.put(
				"overallObj",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setOverallObj);
			attributeSetterBiConsumers.put(
				"qMRefOverallObj",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefOverallObj);
			attributeSetterBiConsumers.put(
				"supportingProcedure",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setSupportingProcedure);
			attributeSetterBiConsumers.put(
				"qMRefSupporting",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefSupporting);
			attributeSetterBiConsumers.put(
				"technicalMangmnt",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setTechnicalMangmnt);
			attributeSetterBiConsumers.put(
				"qMRefTechnical",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefTechnical);
			attributeSetterBiConsumers.put(
				"documentation",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setDocumentation);
			attributeSetterBiConsumers.put(
				"qMRefDocumentation",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefDocumentation);
			attributeSetterBiConsumers.put(
				"docContolProc",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setDocContolProc);
			attributeSetterBiConsumers.put(
				"qMRefDocControl",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefDocControl);
			attributeSetterBiConsumers.put(
				"documntChanges",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setDocumntChanges);
			attributeSetterBiConsumers.put(
				"qMRefDocumntChanges",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefDocumntChanges);
			attributeSetterBiConsumers.put(
				"controlOfQuality",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setControlOfQuality);
			attributeSetterBiConsumers.put(
				"qMRefControl",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefControl);
			attributeSetterBiConsumers.put(
				"managementReview",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setManagementReview);
			attributeSetterBiConsumers.put(
				"qMRefManage",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefManage);
			attributeSetterBiConsumers.put(
				"insInternalAudits",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setInsInternalAudits);
			attributeSetterBiConsumers.put(
				"qMRefInternalAudit",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefInternalAudit);
			attributeSetterBiConsumers.put(
				"insCorrectiveAction",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setInsCorrectiveAction);
			attributeSetterBiConsumers.put(
				"qMRefCorrect",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefCorrect);
			attributeSetterBiConsumers.put(
				"insPreventiveAction",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setInsPreventiveAction);
			attributeSetterBiConsumers.put(
				"qMRefPreventive",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefPreventive);
			attributeSetterBiConsumers.put(
				"personnel",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setPersonnel);
			attributeSetterBiConsumers.put(
				"qMRefPersonnel",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefPersonnel);
			attributeSetterBiConsumers.put(
				"equipment",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setEquipment);
			attributeSetterBiConsumers.put(
				"qMRefEquip",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefEquip);
			attributeSetterBiConsumers.put(
				"inspection",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setInspection);
			attributeSetterBiConsumers.put(
				"qMRefInspection",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefInspection);
			attributeSetterBiConsumers.put(
				"contractualArrange",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setContractualArrange);
			attributeSetterBiConsumers.put(
				"qMRefContractual",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefContractual);
			attributeSetterBiConsumers.put(
				"handlingInsItem",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setHandlingInsItem);
			attributeSetterBiConsumers.put(
				"qMRefHandling",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefHandling);
			attributeSetterBiConsumers.put(
				"complaintsAppeals",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setComplaintsAppeals);
			attributeSetterBiConsumers.put(
				"qMRefComplaints",
				(BiConsumer<AccInsBodiesManageSys, String>)
					AccInsBodiesManageSys::setQMRefComplaints);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AccInsBodiesManageSys, Long>)
					AccInsBodiesManageSys::setJanaacApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccInsBodiesManageSysId() {
		return _accInsBodiesManageSysId;
	}

	@Override
	public void setAccInsBodiesManageSysId(long accInsBodiesManageSysId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accInsBodiesManageSysId = accInsBodiesManageSysId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOptionFollow() {
		if (_optionFollow == null) {
			return "";
		}
		else {
			return _optionFollow;
		}
	}

	@Override
	public void setOptionFollow(String optionFollow) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_optionFollow = optionFollow;
	}

	@JSON
	@Override
	public String getManualApproval() {
		if (_manualApproval == null) {
			return "";
		}
		else {
			return _manualApproval;
		}
	}

	@Override
	public void setManualApproval(String manualApproval) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manualApproval = manualApproval;
	}

	@JSON
	@Override
	public String getQMRefManual() {
		if (_qMRefManual == null) {
			return "";
		}
		else {
			return _qMRefManual;
		}
	}

	@Override
	public void setQMRefManual(String qMRefManual) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefManual = qMRefManual;
	}

	@JSON
	@Override
	public String getRelevantPolicies() {
		if (_relevantPolicies == null) {
			return "";
		}
		else {
			return _relevantPolicies;
		}
	}

	@Override
	public void setRelevantPolicies(String relevantPolicies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_relevantPolicies = relevantPolicies;
	}

	@JSON
	@Override
	public String getQMRefRelevant() {
		if (_qMRefRelevant == null) {
			return "";
		}
		else {
			return _qMRefRelevant;
		}
	}

	@Override
	public void setQMRefRelevant(String qMRefRelevant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefRelevant = qMRefRelevant;
	}

	@JSON
	@Override
	public String getOverallObj() {
		if (_overallObj == null) {
			return "";
		}
		else {
			return _overallObj;
		}
	}

	@Override
	public void setOverallObj(String overallObj) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_overallObj = overallObj;
	}

	@JSON
	@Override
	public String getQMRefOverallObj() {
		if (_qMRefOverallObj == null) {
			return "";
		}
		else {
			return _qMRefOverallObj;
		}
	}

	@Override
	public void setQMRefOverallObj(String qMRefOverallObj) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefOverallObj = qMRefOverallObj;
	}

	@JSON
	@Override
	public String getSupportingProcedure() {
		if (_supportingProcedure == null) {
			return "";
		}
		else {
			return _supportingProcedure;
		}
	}

	@Override
	public void setSupportingProcedure(String supportingProcedure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_supportingProcedure = supportingProcedure;
	}

	@JSON
	@Override
	public String getQMRefSupporting() {
		if (_qMRefSupporting == null) {
			return "";
		}
		else {
			return _qMRefSupporting;
		}
	}

	@Override
	public void setQMRefSupporting(String qMRefSupporting) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefSupporting = qMRefSupporting;
	}

	@JSON
	@Override
	public String getTechnicalMangmnt() {
		if (_technicalMangmnt == null) {
			return "";
		}
		else {
			return _technicalMangmnt;
		}
	}

	@Override
	public void setTechnicalMangmnt(String technicalMangmnt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_technicalMangmnt = technicalMangmnt;
	}

	@JSON
	@Override
	public String getQMRefTechnical() {
		if (_qMRefTechnical == null) {
			return "";
		}
		else {
			return _qMRefTechnical;
		}
	}

	@Override
	public void setQMRefTechnical(String qMRefTechnical) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefTechnical = qMRefTechnical;
	}

	@JSON
	@Override
	public String getDocumentation() {
		if (_documentation == null) {
			return "";
		}
		else {
			return _documentation;
		}
	}

	@Override
	public void setDocumentation(String documentation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentation = documentation;
	}

	@JSON
	@Override
	public String getQMRefDocumentation() {
		if (_qMRefDocumentation == null) {
			return "";
		}
		else {
			return _qMRefDocumentation;
		}
	}

	@Override
	public void setQMRefDocumentation(String qMRefDocumentation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDocumentation = qMRefDocumentation;
	}

	@JSON
	@Override
	public String getDocContolProc() {
		if (_docContolProc == null) {
			return "";
		}
		else {
			return _docContolProc;
		}
	}

	@Override
	public void setDocContolProc(String docContolProc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docContolProc = docContolProc;
	}

	@JSON
	@Override
	public String getQMRefDocControl() {
		if (_qMRefDocControl == null) {
			return "";
		}
		else {
			return _qMRefDocControl;
		}
	}

	@Override
	public void setQMRefDocControl(String qMRefDocControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDocControl = qMRefDocControl;
	}

	@JSON
	@Override
	public String getDocumntChanges() {
		if (_documntChanges == null) {
			return "";
		}
		else {
			return _documntChanges;
		}
	}

	@Override
	public void setDocumntChanges(String documntChanges) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documntChanges = documntChanges;
	}

	@JSON
	@Override
	public String getQMRefDocumntChanges() {
		if (_qMRefDocumntChanges == null) {
			return "";
		}
		else {
			return _qMRefDocumntChanges;
		}
	}

	@Override
	public void setQMRefDocumntChanges(String qMRefDocumntChanges) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefDocumntChanges = qMRefDocumntChanges;
	}

	@JSON
	@Override
	public String getControlOfQuality() {
		if (_controlOfQuality == null) {
			return "";
		}
		else {
			return _controlOfQuality;
		}
	}

	@Override
	public void setControlOfQuality(String controlOfQuality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_controlOfQuality = controlOfQuality;
	}

	@JSON
	@Override
	public String getQMRefControl() {
		if (_qMRefControl == null) {
			return "";
		}
		else {
			return _qMRefControl;
		}
	}

	@Override
	public void setQMRefControl(String qMRefControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefControl = qMRefControl;
	}

	@JSON
	@Override
	public String getManagementReview() {
		if (_managementReview == null) {
			return "";
		}
		else {
			return _managementReview;
		}
	}

	@Override
	public void setManagementReview(String managementReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managementReview = managementReview;
	}

	@JSON
	@Override
	public String getQMRefManage() {
		if (_qMRefManage == null) {
			return "";
		}
		else {
			return _qMRefManage;
		}
	}

	@Override
	public void setQMRefManage(String qMRefManage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefManage = qMRefManage;
	}

	@JSON
	@Override
	public String getInsInternalAudits() {
		if (_insInternalAudits == null) {
			return "";
		}
		else {
			return _insInternalAudits;
		}
	}

	@Override
	public void setInsInternalAudits(String insInternalAudits) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insInternalAudits = insInternalAudits;
	}

	@JSON
	@Override
	public String getQMRefInternalAudit() {
		if (_qMRefInternalAudit == null) {
			return "";
		}
		else {
			return _qMRefInternalAudit;
		}
	}

	@Override
	public void setQMRefInternalAudit(String qMRefInternalAudit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefInternalAudit = qMRefInternalAudit;
	}

	@JSON
	@Override
	public String getInsCorrectiveAction() {
		if (_insCorrectiveAction == null) {
			return "";
		}
		else {
			return _insCorrectiveAction;
		}
	}

	@Override
	public void setInsCorrectiveAction(String insCorrectiveAction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insCorrectiveAction = insCorrectiveAction;
	}

	@JSON
	@Override
	public String getQMRefCorrect() {
		if (_qMRefCorrect == null) {
			return "";
		}
		else {
			return _qMRefCorrect;
		}
	}

	@Override
	public void setQMRefCorrect(String qMRefCorrect) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefCorrect = qMRefCorrect;
	}

	@JSON
	@Override
	public String getInsPreventiveAction() {
		if (_insPreventiveAction == null) {
			return "";
		}
		else {
			return _insPreventiveAction;
		}
	}

	@Override
	public void setInsPreventiveAction(String insPreventiveAction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insPreventiveAction = insPreventiveAction;
	}

	@JSON
	@Override
	public String getQMRefPreventive() {
		if (_qMRefPreventive == null) {
			return "";
		}
		else {
			return _qMRefPreventive;
		}
	}

	@Override
	public void setQMRefPreventive(String qMRefPreventive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPreventive = qMRefPreventive;
	}

	@JSON
	@Override
	public String getPersonnel() {
		if (_personnel == null) {
			return "";
		}
		else {
			return _personnel;
		}
	}

	@Override
	public void setPersonnel(String personnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personnel = personnel;
	}

	@JSON
	@Override
	public String getQMRefPersonnel() {
		if (_qMRefPersonnel == null) {
			return "";
		}
		else {
			return _qMRefPersonnel;
		}
	}

	@Override
	public void setQMRefPersonnel(String qMRefPersonnel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefPersonnel = qMRefPersonnel;
	}

	@JSON
	@Override
	public String getEquipment() {
		if (_equipment == null) {
			return "";
		}
		else {
			return _equipment;
		}
	}

	@Override
	public void setEquipment(String equipment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipment = equipment;
	}

	@JSON
	@Override
	public String getQMRefEquip() {
		if (_qMRefEquip == null) {
			return "";
		}
		else {
			return _qMRefEquip;
		}
	}

	@Override
	public void setQMRefEquip(String qMRefEquip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefEquip = qMRefEquip;
	}

	@JSON
	@Override
	public String getInspection() {
		if (_inspection == null) {
			return "";
		}
		else {
			return _inspection;
		}
	}

	@Override
	public void setInspection(String inspection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inspection = inspection;
	}

	@JSON
	@Override
	public String getQMRefInspection() {
		if (_qMRefInspection == null) {
			return "";
		}
		else {
			return _qMRefInspection;
		}
	}

	@Override
	public void setQMRefInspection(String qMRefInspection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefInspection = qMRefInspection;
	}

	@JSON
	@Override
	public String getContractualArrange() {
		if (_contractualArrange == null) {
			return "";
		}
		else {
			return _contractualArrange;
		}
	}

	@Override
	public void setContractualArrange(String contractualArrange) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contractualArrange = contractualArrange;
	}

	@JSON
	@Override
	public String getQMRefContractual() {
		if (_qMRefContractual == null) {
			return "";
		}
		else {
			return _qMRefContractual;
		}
	}

	@Override
	public void setQMRefContractual(String qMRefContractual) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefContractual = qMRefContractual;
	}

	@JSON
	@Override
	public String getHandlingInsItem() {
		if (_handlingInsItem == null) {
			return "";
		}
		else {
			return _handlingInsItem;
		}
	}

	@Override
	public void setHandlingInsItem(String handlingInsItem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_handlingInsItem = handlingInsItem;
	}

	@JSON
	@Override
	public String getQMRefHandling() {
		if (_qMRefHandling == null) {
			return "";
		}
		else {
			return _qMRefHandling;
		}
	}

	@Override
	public void setQMRefHandling(String qMRefHandling) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefHandling = qMRefHandling;
	}

	@JSON
	@Override
	public String getComplaintsAppeals() {
		if (_complaintsAppeals == null) {
			return "";
		}
		else {
			return _complaintsAppeals;
		}
	}

	@Override
	public void setComplaintsAppeals(String complaintsAppeals) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_complaintsAppeals = complaintsAppeals;
	}

	@JSON
	@Override
	public String getQMRefComplaints() {
		if (_qMRefComplaints == null) {
			return "";
		}
		else {
			return _qMRefComplaints;
		}
	}

	@Override
	public void setQMRefComplaints(String qMRefComplaints) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qMRefComplaints = qMRefComplaints;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccInsBodiesManageSys.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccInsBodiesManageSys.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccInsBodiesManageSys toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccInsBodiesManageSys>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccInsBodiesManageSysImpl accInsBodiesManageSysImpl =
			new AccInsBodiesManageSysImpl();

		accInsBodiesManageSysImpl.setUuid(getUuid());
		accInsBodiesManageSysImpl.setAccInsBodiesManageSysId(
			getAccInsBodiesManageSysId());
		accInsBodiesManageSysImpl.setGroupId(getGroupId());
		accInsBodiesManageSysImpl.setCompanyId(getCompanyId());
		accInsBodiesManageSysImpl.setUserId(getUserId());
		accInsBodiesManageSysImpl.setUserName(getUserName());
		accInsBodiesManageSysImpl.setCreateDate(getCreateDate());
		accInsBodiesManageSysImpl.setModifiedDate(getModifiedDate());
		accInsBodiesManageSysImpl.setOptionFollow(getOptionFollow());
		accInsBodiesManageSysImpl.setManualApproval(getManualApproval());
		accInsBodiesManageSysImpl.setQMRefManual(getQMRefManual());
		accInsBodiesManageSysImpl.setRelevantPolicies(getRelevantPolicies());
		accInsBodiesManageSysImpl.setQMRefRelevant(getQMRefRelevant());
		accInsBodiesManageSysImpl.setOverallObj(getOverallObj());
		accInsBodiesManageSysImpl.setQMRefOverallObj(getQMRefOverallObj());
		accInsBodiesManageSysImpl.setSupportingProcedure(
			getSupportingProcedure());
		accInsBodiesManageSysImpl.setQMRefSupporting(getQMRefSupporting());
		accInsBodiesManageSysImpl.setTechnicalMangmnt(getTechnicalMangmnt());
		accInsBodiesManageSysImpl.setQMRefTechnical(getQMRefTechnical());
		accInsBodiesManageSysImpl.setDocumentation(getDocumentation());
		accInsBodiesManageSysImpl.setQMRefDocumentation(
			getQMRefDocumentation());
		accInsBodiesManageSysImpl.setDocContolProc(getDocContolProc());
		accInsBodiesManageSysImpl.setQMRefDocControl(getQMRefDocControl());
		accInsBodiesManageSysImpl.setDocumntChanges(getDocumntChanges());
		accInsBodiesManageSysImpl.setQMRefDocumntChanges(
			getQMRefDocumntChanges());
		accInsBodiesManageSysImpl.setControlOfQuality(getControlOfQuality());
		accInsBodiesManageSysImpl.setQMRefControl(getQMRefControl());
		accInsBodiesManageSysImpl.setManagementReview(getManagementReview());
		accInsBodiesManageSysImpl.setQMRefManage(getQMRefManage());
		accInsBodiesManageSysImpl.setInsInternalAudits(getInsInternalAudits());
		accInsBodiesManageSysImpl.setQMRefInternalAudit(
			getQMRefInternalAudit());
		accInsBodiesManageSysImpl.setInsCorrectiveAction(
			getInsCorrectiveAction());
		accInsBodiesManageSysImpl.setQMRefCorrect(getQMRefCorrect());
		accInsBodiesManageSysImpl.setInsPreventiveAction(
			getInsPreventiveAction());
		accInsBodiesManageSysImpl.setQMRefPreventive(getQMRefPreventive());
		accInsBodiesManageSysImpl.setPersonnel(getPersonnel());
		accInsBodiesManageSysImpl.setQMRefPersonnel(getQMRefPersonnel());
		accInsBodiesManageSysImpl.setEquipment(getEquipment());
		accInsBodiesManageSysImpl.setQMRefEquip(getQMRefEquip());
		accInsBodiesManageSysImpl.setInspection(getInspection());
		accInsBodiesManageSysImpl.setQMRefInspection(getQMRefInspection());
		accInsBodiesManageSysImpl.setContractualArrange(
			getContractualArrange());
		accInsBodiesManageSysImpl.setQMRefContractual(getQMRefContractual());
		accInsBodiesManageSysImpl.setHandlingInsItem(getHandlingInsItem());
		accInsBodiesManageSysImpl.setQMRefHandling(getQMRefHandling());
		accInsBodiesManageSysImpl.setComplaintsAppeals(getComplaintsAppeals());
		accInsBodiesManageSysImpl.setQMRefComplaints(getQMRefComplaints());
		accInsBodiesManageSysImpl.setJanaacApplicationId(
			getJanaacApplicationId());

		accInsBodiesManageSysImpl.resetOriginalValues();

		return accInsBodiesManageSysImpl;
	}

	@Override
	public AccInsBodiesManageSys cloneWithOriginalValues() {
		AccInsBodiesManageSysImpl accInsBodiesManageSysImpl =
			new AccInsBodiesManageSysImpl();

		accInsBodiesManageSysImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		accInsBodiesManageSysImpl.setAccInsBodiesManageSysId(
			this.<Long>getColumnOriginalValue("accInsBodiesManageSysId"));
		accInsBodiesManageSysImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accInsBodiesManageSysImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accInsBodiesManageSysImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		accInsBodiesManageSysImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accInsBodiesManageSysImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accInsBodiesManageSysImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accInsBodiesManageSysImpl.setOptionFollow(
			this.<String>getColumnOriginalValue("optionFollow"));
		accInsBodiesManageSysImpl.setManualApproval(
			this.<String>getColumnOriginalValue("manualApproval"));
		accInsBodiesManageSysImpl.setQMRefManual(
			this.<String>getColumnOriginalValue("qMRefManual"));
		accInsBodiesManageSysImpl.setRelevantPolicies(
			this.<String>getColumnOriginalValue("relevantPolicies"));
		accInsBodiesManageSysImpl.setQMRefRelevant(
			this.<String>getColumnOriginalValue("qMRefRelevant"));
		accInsBodiesManageSysImpl.setOverallObj(
			this.<String>getColumnOriginalValue("overallObj"));
		accInsBodiesManageSysImpl.setQMRefOverallObj(
			this.<String>getColumnOriginalValue("qMRefOverallObj"));
		accInsBodiesManageSysImpl.setSupportingProcedure(
			this.<String>getColumnOriginalValue("supportingProcedure"));
		accInsBodiesManageSysImpl.setQMRefSupporting(
			this.<String>getColumnOriginalValue("qMRefSupporting"));
		accInsBodiesManageSysImpl.setTechnicalMangmnt(
			this.<String>getColumnOriginalValue("technicalMangmnt"));
		accInsBodiesManageSysImpl.setQMRefTechnical(
			this.<String>getColumnOriginalValue("qMRefTechnical"));
		accInsBodiesManageSysImpl.setDocumentation(
			this.<String>getColumnOriginalValue("documentation"));
		accInsBodiesManageSysImpl.setQMRefDocumentation(
			this.<String>getColumnOriginalValue("qMRefDocumentation"));
		accInsBodiesManageSysImpl.setDocContolProc(
			this.<String>getColumnOriginalValue("docContolProc"));
		accInsBodiesManageSysImpl.setQMRefDocControl(
			this.<String>getColumnOriginalValue("qMRefDocControl"));
		accInsBodiesManageSysImpl.setDocumntChanges(
			this.<String>getColumnOriginalValue("documntChanges"));
		accInsBodiesManageSysImpl.setQMRefDocumntChanges(
			this.<String>getColumnOriginalValue("qMRefDocumntChanges"));
		accInsBodiesManageSysImpl.setControlOfQuality(
			this.<String>getColumnOriginalValue("controlOfQuality"));
		accInsBodiesManageSysImpl.setQMRefControl(
			this.<String>getColumnOriginalValue("qMRefControl"));
		accInsBodiesManageSysImpl.setManagementReview(
			this.<String>getColumnOriginalValue("managementReview"));
		accInsBodiesManageSysImpl.setQMRefManage(
			this.<String>getColumnOriginalValue("qMRefManage"));
		accInsBodiesManageSysImpl.setInsInternalAudits(
			this.<String>getColumnOriginalValue("insInternalAudits"));
		accInsBodiesManageSysImpl.setQMRefInternalAudit(
			this.<String>getColumnOriginalValue("qMRefInternalAudit"));
		accInsBodiesManageSysImpl.setInsCorrectiveAction(
			this.<String>getColumnOriginalValue("insCorrectiveAction"));
		accInsBodiesManageSysImpl.setQMRefCorrect(
			this.<String>getColumnOriginalValue("qMRefCorrect"));
		accInsBodiesManageSysImpl.setInsPreventiveAction(
			this.<String>getColumnOriginalValue("insPreventiveAction"));
		accInsBodiesManageSysImpl.setQMRefPreventive(
			this.<String>getColumnOriginalValue("qMRefPreventive"));
		accInsBodiesManageSysImpl.setPersonnel(
			this.<String>getColumnOriginalValue("personnel"));
		accInsBodiesManageSysImpl.setQMRefPersonnel(
			this.<String>getColumnOriginalValue("qMRefPersonnel"));
		accInsBodiesManageSysImpl.setEquipment(
			this.<String>getColumnOriginalValue("equipment"));
		accInsBodiesManageSysImpl.setQMRefEquip(
			this.<String>getColumnOriginalValue("qMRefEquip"));
		accInsBodiesManageSysImpl.setInspection(
			this.<String>getColumnOriginalValue("inspection"));
		accInsBodiesManageSysImpl.setQMRefInspection(
			this.<String>getColumnOriginalValue("qMRefInspection"));
		accInsBodiesManageSysImpl.setContractualArrange(
			this.<String>getColumnOriginalValue("contractualArrange"));
		accInsBodiesManageSysImpl.setQMRefContractual(
			this.<String>getColumnOriginalValue("qMRefContractual"));
		accInsBodiesManageSysImpl.setHandlingInsItem(
			this.<String>getColumnOriginalValue("handlingInsItem"));
		accInsBodiesManageSysImpl.setQMRefHandling(
			this.<String>getColumnOriginalValue("qMRefHandling"));
		accInsBodiesManageSysImpl.setComplaintsAppeals(
			this.<String>getColumnOriginalValue("complaintsAppeals"));
		accInsBodiesManageSysImpl.setQMRefComplaints(
			this.<String>getColumnOriginalValue("qMRefComplaints"));
		accInsBodiesManageSysImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));

		return accInsBodiesManageSysImpl;
	}

	@Override
	public int compareTo(AccInsBodiesManageSys accInsBodiesManageSys) {
		long primaryKey = accInsBodiesManageSys.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccInsBodiesManageSys)) {
			return false;
		}

		AccInsBodiesManageSys accInsBodiesManageSys =
			(AccInsBodiesManageSys)object;

		long primaryKey = accInsBodiesManageSys.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccInsBodiesManageSys> toCacheModel() {
		AccInsBodiesManageSysCacheModel accInsBodiesManageSysCacheModel =
			new AccInsBodiesManageSysCacheModel();

		accInsBodiesManageSysCacheModel.uuid = getUuid();

		String uuid = accInsBodiesManageSysCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accInsBodiesManageSysCacheModel.uuid = null;
		}

		accInsBodiesManageSysCacheModel.accInsBodiesManageSysId =
			getAccInsBodiesManageSysId();

		accInsBodiesManageSysCacheModel.groupId = getGroupId();

		accInsBodiesManageSysCacheModel.companyId = getCompanyId();

		accInsBodiesManageSysCacheModel.userId = getUserId();

		accInsBodiesManageSysCacheModel.userName = getUserName();

		String userName = accInsBodiesManageSysCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accInsBodiesManageSysCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accInsBodiesManageSysCacheModel.createDate = createDate.getTime();
		}
		else {
			accInsBodiesManageSysCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accInsBodiesManageSysCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			accInsBodiesManageSysCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accInsBodiesManageSysCacheModel.optionFollow = getOptionFollow();

		String optionFollow = accInsBodiesManageSysCacheModel.optionFollow;

		if ((optionFollow != null) && (optionFollow.length() == 0)) {
			accInsBodiesManageSysCacheModel.optionFollow = null;
		}

		accInsBodiesManageSysCacheModel.manualApproval = getManualApproval();

		String manualApproval = accInsBodiesManageSysCacheModel.manualApproval;

		if ((manualApproval != null) && (manualApproval.length() == 0)) {
			accInsBodiesManageSysCacheModel.manualApproval = null;
		}

		accInsBodiesManageSysCacheModel.qMRefManual = getQMRefManual();

		String qMRefManual = accInsBodiesManageSysCacheModel.qMRefManual;

		if ((qMRefManual != null) && (qMRefManual.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefManual = null;
		}

		accInsBodiesManageSysCacheModel.relevantPolicies =
			getRelevantPolicies();

		String relevantPolicies =
			accInsBodiesManageSysCacheModel.relevantPolicies;

		if ((relevantPolicies != null) && (relevantPolicies.length() == 0)) {
			accInsBodiesManageSysCacheModel.relevantPolicies = null;
		}

		accInsBodiesManageSysCacheModel.qMRefRelevant = getQMRefRelevant();

		String qMRefRelevant = accInsBodiesManageSysCacheModel.qMRefRelevant;

		if ((qMRefRelevant != null) && (qMRefRelevant.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefRelevant = null;
		}

		accInsBodiesManageSysCacheModel.overallObj = getOverallObj();

		String overallObj = accInsBodiesManageSysCacheModel.overallObj;

		if ((overallObj != null) && (overallObj.length() == 0)) {
			accInsBodiesManageSysCacheModel.overallObj = null;
		}

		accInsBodiesManageSysCacheModel.qMRefOverallObj = getQMRefOverallObj();

		String qMRefOverallObj =
			accInsBodiesManageSysCacheModel.qMRefOverallObj;

		if ((qMRefOverallObj != null) && (qMRefOverallObj.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefOverallObj = null;
		}

		accInsBodiesManageSysCacheModel.supportingProcedure =
			getSupportingProcedure();

		String supportingProcedure =
			accInsBodiesManageSysCacheModel.supportingProcedure;

		if ((supportingProcedure != null) &&
			(supportingProcedure.length() == 0)) {

			accInsBodiesManageSysCacheModel.supportingProcedure = null;
		}

		accInsBodiesManageSysCacheModel.qMRefSupporting = getQMRefSupporting();

		String qMRefSupporting =
			accInsBodiesManageSysCacheModel.qMRefSupporting;

		if ((qMRefSupporting != null) && (qMRefSupporting.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefSupporting = null;
		}

		accInsBodiesManageSysCacheModel.technicalMangmnt =
			getTechnicalMangmnt();

		String technicalMangmnt =
			accInsBodiesManageSysCacheModel.technicalMangmnt;

		if ((technicalMangmnt != null) && (technicalMangmnt.length() == 0)) {
			accInsBodiesManageSysCacheModel.technicalMangmnt = null;
		}

		accInsBodiesManageSysCacheModel.qMRefTechnical = getQMRefTechnical();

		String qMRefTechnical = accInsBodiesManageSysCacheModel.qMRefTechnical;

		if ((qMRefTechnical != null) && (qMRefTechnical.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefTechnical = null;
		}

		accInsBodiesManageSysCacheModel.documentation = getDocumentation();

		String documentation = accInsBodiesManageSysCacheModel.documentation;

		if ((documentation != null) && (documentation.length() == 0)) {
			accInsBodiesManageSysCacheModel.documentation = null;
		}

		accInsBodiesManageSysCacheModel.qMRefDocumentation =
			getQMRefDocumentation();

		String qMRefDocumentation =
			accInsBodiesManageSysCacheModel.qMRefDocumentation;

		if ((qMRefDocumentation != null) &&
			(qMRefDocumentation.length() == 0)) {

			accInsBodiesManageSysCacheModel.qMRefDocumentation = null;
		}

		accInsBodiesManageSysCacheModel.docContolProc = getDocContolProc();

		String docContolProc = accInsBodiesManageSysCacheModel.docContolProc;

		if ((docContolProc != null) && (docContolProc.length() == 0)) {
			accInsBodiesManageSysCacheModel.docContolProc = null;
		}

		accInsBodiesManageSysCacheModel.qMRefDocControl = getQMRefDocControl();

		String qMRefDocControl =
			accInsBodiesManageSysCacheModel.qMRefDocControl;

		if ((qMRefDocControl != null) && (qMRefDocControl.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefDocControl = null;
		}

		accInsBodiesManageSysCacheModel.documntChanges = getDocumntChanges();

		String documntChanges = accInsBodiesManageSysCacheModel.documntChanges;

		if ((documntChanges != null) && (documntChanges.length() == 0)) {
			accInsBodiesManageSysCacheModel.documntChanges = null;
		}

		accInsBodiesManageSysCacheModel.qMRefDocumntChanges =
			getQMRefDocumntChanges();

		String qMRefDocumntChanges =
			accInsBodiesManageSysCacheModel.qMRefDocumntChanges;

		if ((qMRefDocumntChanges != null) &&
			(qMRefDocumntChanges.length() == 0)) {

			accInsBodiesManageSysCacheModel.qMRefDocumntChanges = null;
		}

		accInsBodiesManageSysCacheModel.controlOfQuality =
			getControlOfQuality();

		String controlOfQuality =
			accInsBodiesManageSysCacheModel.controlOfQuality;

		if ((controlOfQuality != null) && (controlOfQuality.length() == 0)) {
			accInsBodiesManageSysCacheModel.controlOfQuality = null;
		}

		accInsBodiesManageSysCacheModel.qMRefControl = getQMRefControl();

		String qMRefControl = accInsBodiesManageSysCacheModel.qMRefControl;

		if ((qMRefControl != null) && (qMRefControl.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefControl = null;
		}

		accInsBodiesManageSysCacheModel.managementReview =
			getManagementReview();

		String managementReview =
			accInsBodiesManageSysCacheModel.managementReview;

		if ((managementReview != null) && (managementReview.length() == 0)) {
			accInsBodiesManageSysCacheModel.managementReview = null;
		}

		accInsBodiesManageSysCacheModel.qMRefManage = getQMRefManage();

		String qMRefManage = accInsBodiesManageSysCacheModel.qMRefManage;

		if ((qMRefManage != null) && (qMRefManage.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefManage = null;
		}

		accInsBodiesManageSysCacheModel.insInternalAudits =
			getInsInternalAudits();

		String insInternalAudits =
			accInsBodiesManageSysCacheModel.insInternalAudits;

		if ((insInternalAudits != null) && (insInternalAudits.length() == 0)) {
			accInsBodiesManageSysCacheModel.insInternalAudits = null;
		}

		accInsBodiesManageSysCacheModel.qMRefInternalAudit =
			getQMRefInternalAudit();

		String qMRefInternalAudit =
			accInsBodiesManageSysCacheModel.qMRefInternalAudit;

		if ((qMRefInternalAudit != null) &&
			(qMRefInternalAudit.length() == 0)) {

			accInsBodiesManageSysCacheModel.qMRefInternalAudit = null;
		}

		accInsBodiesManageSysCacheModel.insCorrectiveAction =
			getInsCorrectiveAction();

		String insCorrectiveAction =
			accInsBodiesManageSysCacheModel.insCorrectiveAction;

		if ((insCorrectiveAction != null) &&
			(insCorrectiveAction.length() == 0)) {

			accInsBodiesManageSysCacheModel.insCorrectiveAction = null;
		}

		accInsBodiesManageSysCacheModel.qMRefCorrect = getQMRefCorrect();

		String qMRefCorrect = accInsBodiesManageSysCacheModel.qMRefCorrect;

		if ((qMRefCorrect != null) && (qMRefCorrect.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefCorrect = null;
		}

		accInsBodiesManageSysCacheModel.insPreventiveAction =
			getInsPreventiveAction();

		String insPreventiveAction =
			accInsBodiesManageSysCacheModel.insPreventiveAction;

		if ((insPreventiveAction != null) &&
			(insPreventiveAction.length() == 0)) {

			accInsBodiesManageSysCacheModel.insPreventiveAction = null;
		}

		accInsBodiesManageSysCacheModel.qMRefPreventive = getQMRefPreventive();

		String qMRefPreventive =
			accInsBodiesManageSysCacheModel.qMRefPreventive;

		if ((qMRefPreventive != null) && (qMRefPreventive.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefPreventive = null;
		}

		accInsBodiesManageSysCacheModel.personnel = getPersonnel();

		String personnel = accInsBodiesManageSysCacheModel.personnel;

		if ((personnel != null) && (personnel.length() == 0)) {
			accInsBodiesManageSysCacheModel.personnel = null;
		}

		accInsBodiesManageSysCacheModel.qMRefPersonnel = getQMRefPersonnel();

		String qMRefPersonnel = accInsBodiesManageSysCacheModel.qMRefPersonnel;

		if ((qMRefPersonnel != null) && (qMRefPersonnel.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefPersonnel = null;
		}

		accInsBodiesManageSysCacheModel.equipment = getEquipment();

		String equipment = accInsBodiesManageSysCacheModel.equipment;

		if ((equipment != null) && (equipment.length() == 0)) {
			accInsBodiesManageSysCacheModel.equipment = null;
		}

		accInsBodiesManageSysCacheModel.qMRefEquip = getQMRefEquip();

		String qMRefEquip = accInsBodiesManageSysCacheModel.qMRefEquip;

		if ((qMRefEquip != null) && (qMRefEquip.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefEquip = null;
		}

		accInsBodiesManageSysCacheModel.inspection = getInspection();

		String inspection = accInsBodiesManageSysCacheModel.inspection;

		if ((inspection != null) && (inspection.length() == 0)) {
			accInsBodiesManageSysCacheModel.inspection = null;
		}

		accInsBodiesManageSysCacheModel.qMRefInspection = getQMRefInspection();

		String qMRefInspection =
			accInsBodiesManageSysCacheModel.qMRefInspection;

		if ((qMRefInspection != null) && (qMRefInspection.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefInspection = null;
		}

		accInsBodiesManageSysCacheModel.contractualArrange =
			getContractualArrange();

		String contractualArrange =
			accInsBodiesManageSysCacheModel.contractualArrange;

		if ((contractualArrange != null) &&
			(contractualArrange.length() == 0)) {

			accInsBodiesManageSysCacheModel.contractualArrange = null;
		}

		accInsBodiesManageSysCacheModel.qMRefContractual =
			getQMRefContractual();

		String qMRefContractual =
			accInsBodiesManageSysCacheModel.qMRefContractual;

		if ((qMRefContractual != null) && (qMRefContractual.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefContractual = null;
		}

		accInsBodiesManageSysCacheModel.handlingInsItem = getHandlingInsItem();

		String handlingInsItem =
			accInsBodiesManageSysCacheModel.handlingInsItem;

		if ((handlingInsItem != null) && (handlingInsItem.length() == 0)) {
			accInsBodiesManageSysCacheModel.handlingInsItem = null;
		}

		accInsBodiesManageSysCacheModel.qMRefHandling = getQMRefHandling();

		String qMRefHandling = accInsBodiesManageSysCacheModel.qMRefHandling;

		if ((qMRefHandling != null) && (qMRefHandling.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefHandling = null;
		}

		accInsBodiesManageSysCacheModel.complaintsAppeals =
			getComplaintsAppeals();

		String complaintsAppeals =
			accInsBodiesManageSysCacheModel.complaintsAppeals;

		if ((complaintsAppeals != null) && (complaintsAppeals.length() == 0)) {
			accInsBodiesManageSysCacheModel.complaintsAppeals = null;
		}

		accInsBodiesManageSysCacheModel.qMRefComplaints = getQMRefComplaints();

		String qMRefComplaints =
			accInsBodiesManageSysCacheModel.qMRefComplaints;

		if ((qMRefComplaints != null) && (qMRefComplaints.length() == 0)) {
			accInsBodiesManageSysCacheModel.qMRefComplaints = null;
		}

		accInsBodiesManageSysCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		return accInsBodiesManageSysCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccInsBodiesManageSys, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccInsBodiesManageSys, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccInsBodiesManageSys, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AccInsBodiesManageSys)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccInsBodiesManageSys>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccInsBodiesManageSys.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accInsBodiesManageSysId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _optionFollow;
	private String _manualApproval;
	private String _qMRefManual;
	private String _relevantPolicies;
	private String _qMRefRelevant;
	private String _overallObj;
	private String _qMRefOverallObj;
	private String _supportingProcedure;
	private String _qMRefSupporting;
	private String _technicalMangmnt;
	private String _qMRefTechnical;
	private String _documentation;
	private String _qMRefDocumentation;
	private String _docContolProc;
	private String _qMRefDocControl;
	private String _documntChanges;
	private String _qMRefDocumntChanges;
	private String _controlOfQuality;
	private String _qMRefControl;
	private String _managementReview;
	private String _qMRefManage;
	private String _insInternalAudits;
	private String _qMRefInternalAudit;
	private String _insCorrectiveAction;
	private String _qMRefCorrect;
	private String _insPreventiveAction;
	private String _qMRefPreventive;
	private String _personnel;
	private String _qMRefPersonnel;
	private String _equipment;
	private String _qMRefEquip;
	private String _inspection;
	private String _qMRefInspection;
	private String _contractualArrange;
	private String _qMRefContractual;
	private String _handlingInsItem;
	private String _qMRefHandling;
	private String _complaintsAppeals;
	private String _qMRefComplaints;
	private long _janaacApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccInsBodiesManageSys, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccInsBodiesManageSys)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"accInsBodiesManageSysId", _accInsBodiesManageSysId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("optionFollow", _optionFollow);
		_columnOriginalValues.put("manualApproval", _manualApproval);
		_columnOriginalValues.put("qMRefManual", _qMRefManual);
		_columnOriginalValues.put("relevantPolicies", _relevantPolicies);
		_columnOriginalValues.put("qMRefRelevant", _qMRefRelevant);
		_columnOriginalValues.put("overallObj", _overallObj);
		_columnOriginalValues.put("qMRefOverallObj", _qMRefOverallObj);
		_columnOriginalValues.put("supportingProcedure", _supportingProcedure);
		_columnOriginalValues.put("qMRefSupporting", _qMRefSupporting);
		_columnOriginalValues.put("technicalMangmnt", _technicalMangmnt);
		_columnOriginalValues.put("qMRefTechnical", _qMRefTechnical);
		_columnOriginalValues.put("documentation", _documentation);
		_columnOriginalValues.put("qMRefDocumentation", _qMRefDocumentation);
		_columnOriginalValues.put("docContolProc", _docContolProc);
		_columnOriginalValues.put("qMRefDocControl", _qMRefDocControl);
		_columnOriginalValues.put("documntChanges", _documntChanges);
		_columnOriginalValues.put("qMRefDocumntChanges", _qMRefDocumntChanges);
		_columnOriginalValues.put("controlOfQuality", _controlOfQuality);
		_columnOriginalValues.put("qMRefControl", _qMRefControl);
		_columnOriginalValues.put("managementReview", _managementReview);
		_columnOriginalValues.put("qMRefManage", _qMRefManage);
		_columnOriginalValues.put("insInternalAudits", _insInternalAudits);
		_columnOriginalValues.put("qMRefInternalAudit", _qMRefInternalAudit);
		_columnOriginalValues.put("insCorrectiveAction", _insCorrectiveAction);
		_columnOriginalValues.put("qMRefCorrect", _qMRefCorrect);
		_columnOriginalValues.put("insPreventiveAction", _insPreventiveAction);
		_columnOriginalValues.put("qMRefPreventive", _qMRefPreventive);
		_columnOriginalValues.put("personnel", _personnel);
		_columnOriginalValues.put("qMRefPersonnel", _qMRefPersonnel);
		_columnOriginalValues.put("equipment", _equipment);
		_columnOriginalValues.put("qMRefEquip", _qMRefEquip);
		_columnOriginalValues.put("inspection", _inspection);
		_columnOriginalValues.put("qMRefInspection", _qMRefInspection);
		_columnOriginalValues.put("contractualArrange", _contractualArrange);
		_columnOriginalValues.put("qMRefContractual", _qMRefContractual);
		_columnOriginalValues.put("handlingInsItem", _handlingInsItem);
		_columnOriginalValues.put("qMRefHandling", _qMRefHandling);
		_columnOriginalValues.put("complaintsAppeals", _complaintsAppeals);
		_columnOriginalValues.put("qMRefComplaints", _qMRefComplaints);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accInsBodiesManageSysId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("optionFollow", 256L);

		columnBitmasks.put("manualApproval", 512L);

		columnBitmasks.put("qMRefManual", 1024L);

		columnBitmasks.put("relevantPolicies", 2048L);

		columnBitmasks.put("qMRefRelevant", 4096L);

		columnBitmasks.put("overallObj", 8192L);

		columnBitmasks.put("qMRefOverallObj", 16384L);

		columnBitmasks.put("supportingProcedure", 32768L);

		columnBitmasks.put("qMRefSupporting", 65536L);

		columnBitmasks.put("technicalMangmnt", 131072L);

		columnBitmasks.put("qMRefTechnical", 262144L);

		columnBitmasks.put("documentation", 524288L);

		columnBitmasks.put("qMRefDocumentation", 1048576L);

		columnBitmasks.put("docContolProc", 2097152L);

		columnBitmasks.put("qMRefDocControl", 4194304L);

		columnBitmasks.put("documntChanges", 8388608L);

		columnBitmasks.put("qMRefDocumntChanges", 16777216L);

		columnBitmasks.put("controlOfQuality", 33554432L);

		columnBitmasks.put("qMRefControl", 67108864L);

		columnBitmasks.put("managementReview", 134217728L);

		columnBitmasks.put("qMRefManage", 268435456L);

		columnBitmasks.put("insInternalAudits", 536870912L);

		columnBitmasks.put("qMRefInternalAudit", 1073741824L);

		columnBitmasks.put("insCorrectiveAction", 2147483648L);

		columnBitmasks.put("qMRefCorrect", 4294967296L);

		columnBitmasks.put("insPreventiveAction", 8589934592L);

		columnBitmasks.put("qMRefPreventive", 17179869184L);

		columnBitmasks.put("personnel", 34359738368L);

		columnBitmasks.put("qMRefPersonnel", 68719476736L);

		columnBitmasks.put("equipment", 137438953472L);

		columnBitmasks.put("qMRefEquip", 274877906944L);

		columnBitmasks.put("inspection", 549755813888L);

		columnBitmasks.put("qMRefInspection", 1099511627776L);

		columnBitmasks.put("contractualArrange", 2199023255552L);

		columnBitmasks.put("qMRefContractual", 4398046511104L);

		columnBitmasks.put("handlingInsItem", 8796093022208L);

		columnBitmasks.put("qMRefHandling", 17592186044416L);

		columnBitmasks.put("complaintsAppeals", 35184372088832L);

		columnBitmasks.put("qMRefComplaints", 70368744177664L);

		columnBitmasks.put("janaacApplicationId", 140737488355328L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccInsBodiesManageSys _escapedModel;

}