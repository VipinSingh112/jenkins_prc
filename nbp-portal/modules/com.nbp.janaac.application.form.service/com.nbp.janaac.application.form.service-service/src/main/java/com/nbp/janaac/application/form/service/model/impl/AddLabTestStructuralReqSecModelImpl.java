/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AddLabTestStructuralReqSec;
import com.nbp.janaac.application.form.service.model.AddLabTestStructuralReqSecModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AddLabTestStructuralReqSec service. Represents a row in the &quot;nbp_janaac_add_lab_testStr_sec&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AddLabTestStructuralReqSecModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddLabTestStructuralReqSecImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddLabTestStructuralReqSecImpl
 * @generated
 */
@JSON(strict = true)
public class AddLabTestStructuralReqSecModelImpl
	extends BaseModelImpl<AddLabTestStructuralReqSec>
	implements AddLabTestStructuralReqSecModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a add lab test structural req sec model instance should use the <code>AddLabTestStructuralReqSec</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_add_lab_testStr_sec";

	public static final Object[][] TABLE_COLUMNS = {
		{"addLabTestStructuralReqSecId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"productMaterial", Types.VARCHAR}, {"tests", Types.VARCHAR},
		{"method", Types.VARCHAR}, {"equipment", Types.VARCHAR},
		{"listOfCapability", Types.VARCHAR},
		{"estimateOfMeasurement", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}, {"counter", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("addLabTestStructuralReqSecId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productMaterial", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tests", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("method", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("listOfCapability", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estimateOfMeasurement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_add_lab_testStr_sec (addLabTestStructuralReqSecId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,productMaterial VARCHAR(75) null,tests VARCHAR(75) null,method VARCHAR(75) null,equipment VARCHAR(75) null,listOfCapability VARCHAR(75) null,estimateOfMeasurement VARCHAR(75) null,janaacApplicationId LONG,counter VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_add_lab_testStr_sec";

	public static final String ORDER_BY_JPQL =
		" ORDER BY addLabTestStructuralReqSec.addLabTestStructuralReqSecId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_add_lab_testStr_sec.addLabTestStructuralReqSecId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDLABTESTSTRUCTURALREQSECID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AddLabTestStructuralReqSecModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addLabTestStructuralReqSecId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddLabTestStructuralReqSecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addLabTestStructuralReqSecId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AddLabTestStructuralReqSec.class;
	}

	@Override
	public String getModelClassName() {
		return AddLabTestStructuralReqSec.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AddLabTestStructuralReqSec, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AddLabTestStructuralReqSec, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddLabTestStructuralReqSec, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(AddLabTestStructuralReqSec)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AddLabTestStructuralReqSec, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AddLabTestStructuralReqSec, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AddLabTestStructuralReqSec)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AddLabTestStructuralReqSec, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AddLabTestStructuralReqSec, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AddLabTestStructuralReqSec, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AddLabTestStructuralReqSec, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<AddLabTestStructuralReqSec, Object>>();

			attributeGetterFunctions.put(
				"addLabTestStructuralReqSecId",
				AddLabTestStructuralReqSec::getAddLabTestStructuralReqSecId);
			attributeGetterFunctions.put(
				"groupId", AddLabTestStructuralReqSec::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AddLabTestStructuralReqSec::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AddLabTestStructuralReqSec::getUserId);
			attributeGetterFunctions.put(
				"userName", AddLabTestStructuralReqSec::getUserName);
			attributeGetterFunctions.put(
				"createDate", AddLabTestStructuralReqSec::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AddLabTestStructuralReqSec::getModifiedDate);
			attributeGetterFunctions.put(
				"productMaterial",
				AddLabTestStructuralReqSec::getProductMaterial);
			attributeGetterFunctions.put(
				"tests", AddLabTestStructuralReqSec::getTests);
			attributeGetterFunctions.put(
				"method", AddLabTestStructuralReqSec::getMethod);
			attributeGetterFunctions.put(
				"equipment", AddLabTestStructuralReqSec::getEquipment);
			attributeGetterFunctions.put(
				"listOfCapability",
				AddLabTestStructuralReqSec::getListOfCapability);
			attributeGetterFunctions.put(
				"estimateOfMeasurement",
				AddLabTestStructuralReqSec::getEstimateOfMeasurement);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AddLabTestStructuralReqSec::getJanaacApplicationId);
			attributeGetterFunctions.put(
				"counter", AddLabTestStructuralReqSec::getCounter);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AddLabTestStructuralReqSec, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AddLabTestStructuralReqSec, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AddLabTestStructuralReqSec, ?>>();

			attributeSetterBiConsumers.put(
				"addLabTestStructuralReqSecId",
				(BiConsumer<AddLabTestStructuralReqSec, Long>)
					AddLabTestStructuralReqSec::
						setAddLabTestStructuralReqSecId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AddLabTestStructuralReqSec, Long>)
					AddLabTestStructuralReqSec::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AddLabTestStructuralReqSec, Long>)
					AddLabTestStructuralReqSec::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AddLabTestStructuralReqSec, Long>)
					AddLabTestStructuralReqSec::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AddLabTestStructuralReqSec, String>)
					AddLabTestStructuralReqSec::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AddLabTestStructuralReqSec, Date>)
					AddLabTestStructuralReqSec::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AddLabTestStructuralReqSec, Date>)
					AddLabTestStructuralReqSec::setModifiedDate);
			attributeSetterBiConsumers.put(
				"productMaterial",
				(BiConsumer<AddLabTestStructuralReqSec, String>)
					AddLabTestStructuralReqSec::setProductMaterial);
			attributeSetterBiConsumers.put(
				"tests",
				(BiConsumer<AddLabTestStructuralReqSec, String>)
					AddLabTestStructuralReqSec::setTests);
			attributeSetterBiConsumers.put(
				"method",
				(BiConsumer<AddLabTestStructuralReqSec, String>)
					AddLabTestStructuralReqSec::setMethod);
			attributeSetterBiConsumers.put(
				"equipment",
				(BiConsumer<AddLabTestStructuralReqSec, String>)
					AddLabTestStructuralReqSec::setEquipment);
			attributeSetterBiConsumers.put(
				"listOfCapability",
				(BiConsumer<AddLabTestStructuralReqSec, String>)
					AddLabTestStructuralReqSec::setListOfCapability);
			attributeSetterBiConsumers.put(
				"estimateOfMeasurement",
				(BiConsumer<AddLabTestStructuralReqSec, String>)
					AddLabTestStructuralReqSec::setEstimateOfMeasurement);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AddLabTestStructuralReqSec, Long>)
					AddLabTestStructuralReqSec::setJanaacApplicationId);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<AddLabTestStructuralReqSec, String>)
					AddLabTestStructuralReqSec::setCounter);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAddLabTestStructuralReqSecId() {
		return _addLabTestStructuralReqSecId;
	}

	@Override
	public void setAddLabTestStructuralReqSecId(
		long addLabTestStructuralReqSecId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addLabTestStructuralReqSecId = addLabTestStructuralReqSecId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getProductMaterial() {
		if (_productMaterial == null) {
			return "";
		}
		else {
			return _productMaterial;
		}
	}

	@Override
	public void setProductMaterial(String productMaterial) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productMaterial = productMaterial;
	}

	@JSON
	@Override
	public String getTests() {
		if (_tests == null) {
			return "";
		}
		else {
			return _tests;
		}
	}

	@Override
	public void setTests(String tests) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tests = tests;
	}

	@JSON
	@Override
	public String getMethod() {
		if (_method == null) {
			return "";
		}
		else {
			return _method;
		}
	}

	@Override
	public void setMethod(String method) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_method = method;
	}

	@JSON
	@Override
	public String getEquipment() {
		if (_equipment == null) {
			return "";
		}
		else {
			return _equipment;
		}
	}

	@Override
	public void setEquipment(String equipment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipment = equipment;
	}

	@JSON
	@Override
	public String getListOfCapability() {
		if (_listOfCapability == null) {
			return "";
		}
		else {
			return _listOfCapability;
		}
	}

	@Override
	public void setListOfCapability(String listOfCapability) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_listOfCapability = listOfCapability;
	}

	@JSON
	@Override
	public String getEstimateOfMeasurement() {
		if (_estimateOfMeasurement == null) {
			return "";
		}
		else {
			return _estimateOfMeasurement;
		}
	}

	@Override
	public void setEstimateOfMeasurement(String estimateOfMeasurement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estimateOfMeasurement = estimateOfMeasurement;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AddLabTestStructuralReqSec.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AddLabTestStructuralReqSec toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AddLabTestStructuralReqSec>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddLabTestStructuralReqSecImpl addLabTestStructuralReqSecImpl =
			new AddLabTestStructuralReqSecImpl();

		addLabTestStructuralReqSecImpl.setAddLabTestStructuralReqSecId(
			getAddLabTestStructuralReqSecId());
		addLabTestStructuralReqSecImpl.setGroupId(getGroupId());
		addLabTestStructuralReqSecImpl.setCompanyId(getCompanyId());
		addLabTestStructuralReqSecImpl.setUserId(getUserId());
		addLabTestStructuralReqSecImpl.setUserName(getUserName());
		addLabTestStructuralReqSecImpl.setCreateDate(getCreateDate());
		addLabTestStructuralReqSecImpl.setModifiedDate(getModifiedDate());
		addLabTestStructuralReqSecImpl.setProductMaterial(getProductMaterial());
		addLabTestStructuralReqSecImpl.setTests(getTests());
		addLabTestStructuralReqSecImpl.setMethod(getMethod());
		addLabTestStructuralReqSecImpl.setEquipment(getEquipment());
		addLabTestStructuralReqSecImpl.setListOfCapability(
			getListOfCapability());
		addLabTestStructuralReqSecImpl.setEstimateOfMeasurement(
			getEstimateOfMeasurement());
		addLabTestStructuralReqSecImpl.setJanaacApplicationId(
			getJanaacApplicationId());
		addLabTestStructuralReqSecImpl.setCounter(getCounter());

		addLabTestStructuralReqSecImpl.resetOriginalValues();

		return addLabTestStructuralReqSecImpl;
	}

	@Override
	public AddLabTestStructuralReqSec cloneWithOriginalValues() {
		AddLabTestStructuralReqSecImpl addLabTestStructuralReqSecImpl =
			new AddLabTestStructuralReqSecImpl();

		addLabTestStructuralReqSecImpl.setAddLabTestStructuralReqSecId(
			this.<Long>getColumnOriginalValue("addLabTestStructuralReqSecId"));
		addLabTestStructuralReqSecImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		addLabTestStructuralReqSecImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		addLabTestStructuralReqSecImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		addLabTestStructuralReqSecImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		addLabTestStructuralReqSecImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		addLabTestStructuralReqSecImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		addLabTestStructuralReqSecImpl.setProductMaterial(
			this.<String>getColumnOriginalValue("productMaterial"));
		addLabTestStructuralReqSecImpl.setTests(
			this.<String>getColumnOriginalValue("tests"));
		addLabTestStructuralReqSecImpl.setMethod(
			this.<String>getColumnOriginalValue("method"));
		addLabTestStructuralReqSecImpl.setEquipment(
			this.<String>getColumnOriginalValue("equipment"));
		addLabTestStructuralReqSecImpl.setListOfCapability(
			this.<String>getColumnOriginalValue("listOfCapability"));
		addLabTestStructuralReqSecImpl.setEstimateOfMeasurement(
			this.<String>getColumnOriginalValue("estimateOfMeasurement"));
		addLabTestStructuralReqSecImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
		addLabTestStructuralReqSecImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));

		return addLabTestStructuralReqSecImpl;
	}

	@Override
	public int compareTo(
		AddLabTestStructuralReqSec addLabTestStructuralReqSec) {

		long primaryKey = addLabTestStructuralReqSec.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AddLabTestStructuralReqSec)) {
			return false;
		}

		AddLabTestStructuralReqSec addLabTestStructuralReqSec =
			(AddLabTestStructuralReqSec)object;

		long primaryKey = addLabTestStructuralReqSec.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AddLabTestStructuralReqSec> toCacheModel() {
		AddLabTestStructuralReqSecCacheModel
			addLabTestStructuralReqSecCacheModel =
				new AddLabTestStructuralReqSecCacheModel();

		addLabTestStructuralReqSecCacheModel.addLabTestStructuralReqSecId =
			getAddLabTestStructuralReqSecId();

		addLabTestStructuralReqSecCacheModel.groupId = getGroupId();

		addLabTestStructuralReqSecCacheModel.companyId = getCompanyId();

		addLabTestStructuralReqSecCacheModel.userId = getUserId();

		addLabTestStructuralReqSecCacheModel.userName = getUserName();

		String userName = addLabTestStructuralReqSecCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			addLabTestStructuralReqSecCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			addLabTestStructuralReqSecCacheModel.createDate =
				createDate.getTime();
		}
		else {
			addLabTestStructuralReqSecCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			addLabTestStructuralReqSecCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			addLabTestStructuralReqSecCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		addLabTestStructuralReqSecCacheModel.productMaterial =
			getProductMaterial();

		String productMaterial =
			addLabTestStructuralReqSecCacheModel.productMaterial;

		if ((productMaterial != null) && (productMaterial.length() == 0)) {
			addLabTestStructuralReqSecCacheModel.productMaterial = null;
		}

		addLabTestStructuralReqSecCacheModel.tests = getTests();

		String tests = addLabTestStructuralReqSecCacheModel.tests;

		if ((tests != null) && (tests.length() == 0)) {
			addLabTestStructuralReqSecCacheModel.tests = null;
		}

		addLabTestStructuralReqSecCacheModel.method = getMethod();

		String method = addLabTestStructuralReqSecCacheModel.method;

		if ((method != null) && (method.length() == 0)) {
			addLabTestStructuralReqSecCacheModel.method = null;
		}

		addLabTestStructuralReqSecCacheModel.equipment = getEquipment();

		String equipment = addLabTestStructuralReqSecCacheModel.equipment;

		if ((equipment != null) && (equipment.length() == 0)) {
			addLabTestStructuralReqSecCacheModel.equipment = null;
		}

		addLabTestStructuralReqSecCacheModel.listOfCapability =
			getListOfCapability();

		String listOfCapability =
			addLabTestStructuralReqSecCacheModel.listOfCapability;

		if ((listOfCapability != null) && (listOfCapability.length() == 0)) {
			addLabTestStructuralReqSecCacheModel.listOfCapability = null;
		}

		addLabTestStructuralReqSecCacheModel.estimateOfMeasurement =
			getEstimateOfMeasurement();

		String estimateOfMeasurement =
			addLabTestStructuralReqSecCacheModel.estimateOfMeasurement;

		if ((estimateOfMeasurement != null) &&
			(estimateOfMeasurement.length() == 0)) {

			addLabTestStructuralReqSecCacheModel.estimateOfMeasurement = null;
		}

		addLabTestStructuralReqSecCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		addLabTestStructuralReqSecCacheModel.counter = getCounter();

		String counter = addLabTestStructuralReqSecCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			addLabTestStructuralReqSecCacheModel.counter = null;
		}

		return addLabTestStructuralReqSecCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AddLabTestStructuralReqSec, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AddLabTestStructuralReqSec, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddLabTestStructuralReqSec, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AddLabTestStructuralReqSec)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AddLabTestStructuralReqSec>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AddLabTestStructuralReqSec.class, ModelWrapper.class);

	}

	private long _addLabTestStructuralReqSecId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _productMaterial;
	private String _tests;
	private String _method;
	private String _equipment;
	private String _listOfCapability;
	private String _estimateOfMeasurement;
	private long _janaacApplicationId;
	private String _counter;

	public <T> T getColumnValue(String columnName) {
		Function<AddLabTestStructuralReqSec, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AddLabTestStructuralReqSec)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"addLabTestStructuralReqSecId", _addLabTestStructuralReqSecId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("productMaterial", _productMaterial);
		_columnOriginalValues.put("tests", _tests);
		_columnOriginalValues.put("method", _method);
		_columnOriginalValues.put("equipment", _equipment);
		_columnOriginalValues.put("listOfCapability", _listOfCapability);
		_columnOriginalValues.put(
			"estimateOfMeasurement", _estimateOfMeasurement);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
		_columnOriginalValues.put("counter", _counter);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("addLabTestStructuralReqSecId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("productMaterial", 128L);

		columnBitmasks.put("tests", 256L);

		columnBitmasks.put("method", 512L);

		columnBitmasks.put("equipment", 1024L);

		columnBitmasks.put("listOfCapability", 2048L);

		columnBitmasks.put("estimateOfMeasurement", 4096L);

		columnBitmasks.put("janaacApplicationId", 8192L);

		columnBitmasks.put("counter", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AddLabTestStructuralReqSec _escapedModel;

}