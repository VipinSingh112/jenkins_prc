/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.janaac.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.janaac.application.form.service.model.AddLabMedicalPhysicalFirst;
import com.nbp.janaac.application.form.service.model.AddLabMedicalPhysicalFirstModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AddLabMedicalPhysicalFirst service. Represents a row in the &quot;nbp_janaac_add_medi_phy_first&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AddLabMedicalPhysicalFirstModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddLabMedicalPhysicalFirstImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddLabMedicalPhysicalFirstImpl
 * @generated
 */
@JSON(strict = true)
public class AddLabMedicalPhysicalFirstModelImpl
	extends BaseModelImpl<AddLabMedicalPhysicalFirst>
	implements AddLabMedicalPhysicalFirstModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a add lab medical physical first model instance should use the <code>AddLabMedicalPhysicalFirst</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_janaac_add_medi_phy_first";

	public static final Object[][] TABLE_COLUMNS = {
		{"addLabMedicalPhysicalFirstId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"inventoryNum", Types.VARCHAR}, {"item", Types.VARCHAR},
		{"manufacturer", Types.VARCHAR}, {"modelNum", Types.VARCHAR},
		{"calibrationInterval", Types.VARCHAR}, {"calibratedBy", Types.VARCHAR},
		{"janaacApplicationId", Types.BIGINT}, {"counter", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("addLabMedicalPhysicalFirstId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inventoryNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("item", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modelNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("calibrationInterval", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("calibratedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("janaacApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_janaac_add_medi_phy_first (addLabMedicalPhysicalFirstId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,inventoryNum VARCHAR(75) null,item VARCHAR(75) null,manufacturer VARCHAR(75) null,modelNum VARCHAR(75) null,calibrationInterval VARCHAR(75) null,calibratedBy VARCHAR(75) null,janaacApplicationId LONG,counter VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_janaac_add_medi_phy_first";

	public static final String ORDER_BY_JPQL =
		" ORDER BY addLabMedicalPhysicalFirst.addLabMedicalPhysicalFirstId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_janaac_add_medi_phy_first.addLabMedicalPhysicalFirstId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JANAACAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDLABMEDICALPHYSICALFIRSTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AddLabMedicalPhysicalFirstModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addLabMedicalPhysicalFirstId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddLabMedicalPhysicalFirstId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addLabMedicalPhysicalFirstId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AddLabMedicalPhysicalFirst.class;
	}

	@Override
	public String getModelClassName() {
		return AddLabMedicalPhysicalFirst.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AddLabMedicalPhysicalFirst, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AddLabMedicalPhysicalFirst, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddLabMedicalPhysicalFirst, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(AddLabMedicalPhysicalFirst)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AddLabMedicalPhysicalFirst, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AddLabMedicalPhysicalFirst, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AddLabMedicalPhysicalFirst)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AddLabMedicalPhysicalFirst, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AddLabMedicalPhysicalFirst, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<AddLabMedicalPhysicalFirst, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<AddLabMedicalPhysicalFirst, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<AddLabMedicalPhysicalFirst, Object>>();

			attributeGetterFunctions.put(
				"addLabMedicalPhysicalFirstId",
				AddLabMedicalPhysicalFirst::getAddLabMedicalPhysicalFirstId);
			attributeGetterFunctions.put(
				"groupId", AddLabMedicalPhysicalFirst::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AddLabMedicalPhysicalFirst::getCompanyId);
			attributeGetterFunctions.put(
				"userId", AddLabMedicalPhysicalFirst::getUserId);
			attributeGetterFunctions.put(
				"userName", AddLabMedicalPhysicalFirst::getUserName);
			attributeGetterFunctions.put(
				"createDate", AddLabMedicalPhysicalFirst::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AddLabMedicalPhysicalFirst::getModifiedDate);
			attributeGetterFunctions.put(
				"inventoryNum", AddLabMedicalPhysicalFirst::getInventoryNum);
			attributeGetterFunctions.put(
				"item", AddLabMedicalPhysicalFirst::getItem);
			attributeGetterFunctions.put(
				"manufacturer", AddLabMedicalPhysicalFirst::getManufacturer);
			attributeGetterFunctions.put(
				"modelNum", AddLabMedicalPhysicalFirst::getModelNum);
			attributeGetterFunctions.put(
				"calibrationInterval",
				AddLabMedicalPhysicalFirst::getCalibrationInterval);
			attributeGetterFunctions.put(
				"calibratedBy", AddLabMedicalPhysicalFirst::getCalibratedBy);
			attributeGetterFunctions.put(
				"janaacApplicationId",
				AddLabMedicalPhysicalFirst::getJanaacApplicationId);
			attributeGetterFunctions.put(
				"counter", AddLabMedicalPhysicalFirst::getCounter);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<AddLabMedicalPhysicalFirst, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AddLabMedicalPhysicalFirst, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<AddLabMedicalPhysicalFirst, ?>>();

			attributeSetterBiConsumers.put(
				"addLabMedicalPhysicalFirstId",
				(BiConsumer<AddLabMedicalPhysicalFirst, Long>)
					AddLabMedicalPhysicalFirst::
						setAddLabMedicalPhysicalFirstId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AddLabMedicalPhysicalFirst, Long>)
					AddLabMedicalPhysicalFirst::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AddLabMedicalPhysicalFirst, Long>)
					AddLabMedicalPhysicalFirst::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AddLabMedicalPhysicalFirst, Long>)
					AddLabMedicalPhysicalFirst::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AddLabMedicalPhysicalFirst, String>)
					AddLabMedicalPhysicalFirst::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AddLabMedicalPhysicalFirst, Date>)
					AddLabMedicalPhysicalFirst::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AddLabMedicalPhysicalFirst, Date>)
					AddLabMedicalPhysicalFirst::setModifiedDate);
			attributeSetterBiConsumers.put(
				"inventoryNum",
				(BiConsumer<AddLabMedicalPhysicalFirst, String>)
					AddLabMedicalPhysicalFirst::setInventoryNum);
			attributeSetterBiConsumers.put(
				"item",
				(BiConsumer<AddLabMedicalPhysicalFirst, String>)
					AddLabMedicalPhysicalFirst::setItem);
			attributeSetterBiConsumers.put(
				"manufacturer",
				(BiConsumer<AddLabMedicalPhysicalFirst, String>)
					AddLabMedicalPhysicalFirst::setManufacturer);
			attributeSetterBiConsumers.put(
				"modelNum",
				(BiConsumer<AddLabMedicalPhysicalFirst, String>)
					AddLabMedicalPhysicalFirst::setModelNum);
			attributeSetterBiConsumers.put(
				"calibrationInterval",
				(BiConsumer<AddLabMedicalPhysicalFirst, String>)
					AddLabMedicalPhysicalFirst::setCalibrationInterval);
			attributeSetterBiConsumers.put(
				"calibratedBy",
				(BiConsumer<AddLabMedicalPhysicalFirst, String>)
					AddLabMedicalPhysicalFirst::setCalibratedBy);
			attributeSetterBiConsumers.put(
				"janaacApplicationId",
				(BiConsumer<AddLabMedicalPhysicalFirst, Long>)
					AddLabMedicalPhysicalFirst::setJanaacApplicationId);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<AddLabMedicalPhysicalFirst, String>)
					AddLabMedicalPhysicalFirst::setCounter);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getAddLabMedicalPhysicalFirstId() {
		return _addLabMedicalPhysicalFirstId;
	}

	@Override
	public void setAddLabMedicalPhysicalFirstId(
		long addLabMedicalPhysicalFirstId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addLabMedicalPhysicalFirstId = addLabMedicalPhysicalFirstId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getInventoryNum() {
		if (_inventoryNum == null) {
			return "";
		}
		else {
			return _inventoryNum;
		}
	}

	@Override
	public void setInventoryNum(String inventoryNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inventoryNum = inventoryNum;
	}

	@JSON
	@Override
	public String getItem() {
		if (_item == null) {
			return "";
		}
		else {
			return _item;
		}
	}

	@Override
	public void setItem(String item) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_item = item;
	}

	@JSON
	@Override
	public String getManufacturer() {
		if (_manufacturer == null) {
			return "";
		}
		else {
			return _manufacturer;
		}
	}

	@Override
	public void setManufacturer(String manufacturer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturer = manufacturer;
	}

	@JSON
	@Override
	public String getModelNum() {
		if (_modelNum == null) {
			return "";
		}
		else {
			return _modelNum;
		}
	}

	@Override
	public void setModelNum(String modelNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modelNum = modelNum;
	}

	@JSON
	@Override
	public String getCalibrationInterval() {
		if (_calibrationInterval == null) {
			return "";
		}
		else {
			return _calibrationInterval;
		}
	}

	@Override
	public void setCalibrationInterval(String calibrationInterval) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_calibrationInterval = calibrationInterval;
	}

	@JSON
	@Override
	public String getCalibratedBy() {
		if (_calibratedBy == null) {
			return "";
		}
		else {
			return _calibratedBy;
		}
	}

	@Override
	public void setCalibratedBy(String calibratedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_calibratedBy = calibratedBy;
	}

	@JSON
	@Override
	public long getJanaacApplicationId() {
		return _janaacApplicationId;
	}

	@Override
	public void setJanaacApplicationId(long janaacApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_janaacApplicationId = janaacApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJanaacApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AddLabMedicalPhysicalFirst.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AddLabMedicalPhysicalFirst toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AddLabMedicalPhysicalFirst>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddLabMedicalPhysicalFirstImpl addLabMedicalPhysicalFirstImpl =
			new AddLabMedicalPhysicalFirstImpl();

		addLabMedicalPhysicalFirstImpl.setAddLabMedicalPhysicalFirstId(
			getAddLabMedicalPhysicalFirstId());
		addLabMedicalPhysicalFirstImpl.setGroupId(getGroupId());
		addLabMedicalPhysicalFirstImpl.setCompanyId(getCompanyId());
		addLabMedicalPhysicalFirstImpl.setUserId(getUserId());
		addLabMedicalPhysicalFirstImpl.setUserName(getUserName());
		addLabMedicalPhysicalFirstImpl.setCreateDate(getCreateDate());
		addLabMedicalPhysicalFirstImpl.setModifiedDate(getModifiedDate());
		addLabMedicalPhysicalFirstImpl.setInventoryNum(getInventoryNum());
		addLabMedicalPhysicalFirstImpl.setItem(getItem());
		addLabMedicalPhysicalFirstImpl.setManufacturer(getManufacturer());
		addLabMedicalPhysicalFirstImpl.setModelNum(getModelNum());
		addLabMedicalPhysicalFirstImpl.setCalibrationInterval(
			getCalibrationInterval());
		addLabMedicalPhysicalFirstImpl.setCalibratedBy(getCalibratedBy());
		addLabMedicalPhysicalFirstImpl.setJanaacApplicationId(
			getJanaacApplicationId());
		addLabMedicalPhysicalFirstImpl.setCounter(getCounter());

		addLabMedicalPhysicalFirstImpl.resetOriginalValues();

		return addLabMedicalPhysicalFirstImpl;
	}

	@Override
	public AddLabMedicalPhysicalFirst cloneWithOriginalValues() {
		AddLabMedicalPhysicalFirstImpl addLabMedicalPhysicalFirstImpl =
			new AddLabMedicalPhysicalFirstImpl();

		addLabMedicalPhysicalFirstImpl.setAddLabMedicalPhysicalFirstId(
			this.<Long>getColumnOriginalValue("addLabMedicalPhysicalFirstId"));
		addLabMedicalPhysicalFirstImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		addLabMedicalPhysicalFirstImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		addLabMedicalPhysicalFirstImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		addLabMedicalPhysicalFirstImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		addLabMedicalPhysicalFirstImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		addLabMedicalPhysicalFirstImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		addLabMedicalPhysicalFirstImpl.setInventoryNum(
			this.<String>getColumnOriginalValue("inventoryNum"));
		addLabMedicalPhysicalFirstImpl.setItem(
			this.<String>getColumnOriginalValue("item"));
		addLabMedicalPhysicalFirstImpl.setManufacturer(
			this.<String>getColumnOriginalValue("manufacturer"));
		addLabMedicalPhysicalFirstImpl.setModelNum(
			this.<String>getColumnOriginalValue("modelNum"));
		addLabMedicalPhysicalFirstImpl.setCalibrationInterval(
			this.<String>getColumnOriginalValue("calibrationInterval"));
		addLabMedicalPhysicalFirstImpl.setCalibratedBy(
			this.<String>getColumnOriginalValue("calibratedBy"));
		addLabMedicalPhysicalFirstImpl.setJanaacApplicationId(
			this.<Long>getColumnOriginalValue("janaacApplicationId"));
		addLabMedicalPhysicalFirstImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));

		return addLabMedicalPhysicalFirstImpl;
	}

	@Override
	public int compareTo(
		AddLabMedicalPhysicalFirst addLabMedicalPhysicalFirst) {

		long primaryKey = addLabMedicalPhysicalFirst.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AddLabMedicalPhysicalFirst)) {
			return false;
		}

		AddLabMedicalPhysicalFirst addLabMedicalPhysicalFirst =
			(AddLabMedicalPhysicalFirst)object;

		long primaryKey = addLabMedicalPhysicalFirst.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AddLabMedicalPhysicalFirst> toCacheModel() {
		AddLabMedicalPhysicalFirstCacheModel
			addLabMedicalPhysicalFirstCacheModel =
				new AddLabMedicalPhysicalFirstCacheModel();

		addLabMedicalPhysicalFirstCacheModel.addLabMedicalPhysicalFirstId =
			getAddLabMedicalPhysicalFirstId();

		addLabMedicalPhysicalFirstCacheModel.groupId = getGroupId();

		addLabMedicalPhysicalFirstCacheModel.companyId = getCompanyId();

		addLabMedicalPhysicalFirstCacheModel.userId = getUserId();

		addLabMedicalPhysicalFirstCacheModel.userName = getUserName();

		String userName = addLabMedicalPhysicalFirstCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			addLabMedicalPhysicalFirstCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			addLabMedicalPhysicalFirstCacheModel.createDate =
				createDate.getTime();
		}
		else {
			addLabMedicalPhysicalFirstCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			addLabMedicalPhysicalFirstCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			addLabMedicalPhysicalFirstCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		addLabMedicalPhysicalFirstCacheModel.inventoryNum = getInventoryNum();

		String inventoryNum = addLabMedicalPhysicalFirstCacheModel.inventoryNum;

		if ((inventoryNum != null) && (inventoryNum.length() == 0)) {
			addLabMedicalPhysicalFirstCacheModel.inventoryNum = null;
		}

		addLabMedicalPhysicalFirstCacheModel.item = getItem();

		String item = addLabMedicalPhysicalFirstCacheModel.item;

		if ((item != null) && (item.length() == 0)) {
			addLabMedicalPhysicalFirstCacheModel.item = null;
		}

		addLabMedicalPhysicalFirstCacheModel.manufacturer = getManufacturer();

		String manufacturer = addLabMedicalPhysicalFirstCacheModel.manufacturer;

		if ((manufacturer != null) && (manufacturer.length() == 0)) {
			addLabMedicalPhysicalFirstCacheModel.manufacturer = null;
		}

		addLabMedicalPhysicalFirstCacheModel.modelNum = getModelNum();

		String modelNum = addLabMedicalPhysicalFirstCacheModel.modelNum;

		if ((modelNum != null) && (modelNum.length() == 0)) {
			addLabMedicalPhysicalFirstCacheModel.modelNum = null;
		}

		addLabMedicalPhysicalFirstCacheModel.calibrationInterval =
			getCalibrationInterval();

		String calibrationInterval =
			addLabMedicalPhysicalFirstCacheModel.calibrationInterval;

		if ((calibrationInterval != null) &&
			(calibrationInterval.length() == 0)) {

			addLabMedicalPhysicalFirstCacheModel.calibrationInterval = null;
		}

		addLabMedicalPhysicalFirstCacheModel.calibratedBy = getCalibratedBy();

		String calibratedBy = addLabMedicalPhysicalFirstCacheModel.calibratedBy;

		if ((calibratedBy != null) && (calibratedBy.length() == 0)) {
			addLabMedicalPhysicalFirstCacheModel.calibratedBy = null;
		}

		addLabMedicalPhysicalFirstCacheModel.janaacApplicationId =
			getJanaacApplicationId();

		addLabMedicalPhysicalFirstCacheModel.counter = getCounter();

		String counter = addLabMedicalPhysicalFirstCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			addLabMedicalPhysicalFirstCacheModel.counter = null;
		}

		return addLabMedicalPhysicalFirstCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AddLabMedicalPhysicalFirst, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AddLabMedicalPhysicalFirst, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddLabMedicalPhysicalFirst, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(AddLabMedicalPhysicalFirst)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, AddLabMedicalPhysicalFirst>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						AddLabMedicalPhysicalFirst.class, ModelWrapper.class);

	}

	private long _addLabMedicalPhysicalFirstId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _inventoryNum;
	private String _item;
	private String _manufacturer;
	private String _modelNum;
	private String _calibrationInterval;
	private String _calibratedBy;
	private long _janaacApplicationId;
	private String _counter;

	public <T> T getColumnValue(String columnName) {
		Function<AddLabMedicalPhysicalFirst, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AddLabMedicalPhysicalFirst)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"addLabMedicalPhysicalFirstId", _addLabMedicalPhysicalFirstId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("inventoryNum", _inventoryNum);
		_columnOriginalValues.put("item", _item);
		_columnOriginalValues.put("manufacturer", _manufacturer);
		_columnOriginalValues.put("modelNum", _modelNum);
		_columnOriginalValues.put("calibrationInterval", _calibrationInterval);
		_columnOriginalValues.put("calibratedBy", _calibratedBy);
		_columnOriginalValues.put("janaacApplicationId", _janaacApplicationId);
		_columnOriginalValues.put("counter", _counter);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("addLabMedicalPhysicalFirstId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("inventoryNum", 128L);

		columnBitmasks.put("item", 256L);

		columnBitmasks.put("manufacturer", 512L);

		columnBitmasks.put("modelNum", 1024L);

		columnBitmasks.put("calibrationInterval", 2048L);

		columnBitmasks.put("calibratedBy", 4096L);

		columnBitmasks.put("janaacApplicationId", 8192L);

		columnBitmasks.put("counter", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AddLabMedicalPhysicalFirst _escapedModel;

}