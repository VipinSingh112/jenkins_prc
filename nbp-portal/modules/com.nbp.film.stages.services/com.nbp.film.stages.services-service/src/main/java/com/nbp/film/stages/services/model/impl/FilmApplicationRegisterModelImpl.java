/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.film.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.film.stages.services.model.FilmApplicationRegister;
import com.nbp.film.stages.services.model.FilmApplicationRegisterModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FilmApplicationRegister service. Represents a row in the &quot;nbp_film_register&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FilmApplicationRegisterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilmApplicationRegisterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FilmApplicationRegisterImpl
 * @generated
 */
@JSON(strict = true)
public class FilmApplicationRegisterModelImpl
	extends BaseModelImpl<FilmApplicationRegister>
	implements FilmApplicationRegisterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a film application register model instance should use the <code>FilmApplicationRegister</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_film_register";

	public static final Object[][] TABLE_COLUMNS = {
		{"filmApplicationRegisterId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"nameOfApplicant", Types.VARCHAR},
		{"registrationDate", Types.TIMESTAMP},
		{"filmRegistrationNum", Types.VARCHAR},
		{"titleOfProduction", Types.VARCHAR}, {"dateOfIssued", Types.TIMESTAMP},
		{"productionCompany", Types.VARCHAR},
		{"technicalFormOfProd", Types.VARCHAR},
		{"OriginOfProdCom", Types.VARCHAR}, {"permitsRequired", Types.VARCHAR},
		{"shootLocationInJamaica", Types.VARCHAR},
		{"preProductionDate", Types.TIMESTAMP},
		{"productionStartDate", Types.TIMESTAMP},
		{"proposedDateOfArrival", Types.VARCHAR},
		{"portOfEntry", Types.VARCHAR},
		{"proposedDateOfDeparture", Types.TIMESTAMP},
		{"fullProductionBudget", Types.VARCHAR},
		{"expectedBudgetSpendInJA", Types.VARCHAR},
		{"numberOFForeignCrewHired", Types.VARCHAR},
		{"numberJamaicaCrewHired", Types.VARCHAR},
		{"valueOfBondWaiver", Types.VARCHAR}, {"customsBroker", Types.VARCHAR},
		{"localProductionManagerOrFixer", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("filmApplicationRegisterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("filmRegistrationNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("titleOfProduction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfIssued", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("technicalFormOfProd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OriginOfProdCom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("permitsRequired", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shootLocationInJamaica", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("preProductionDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("proposedDateOfArrival", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("portOfEntry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proposedDateOfDeparture", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fullProductionBudget", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expectedBudgetSpendInJA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOFForeignCrewHired", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberJamaicaCrewHired", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("valueOfBondWaiver", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customsBroker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localProductionManagerOrFixer", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_film_register (filmApplicationRegisterId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,nameOfApplicant VARCHAR(75) null,registrationDate DATE null,filmRegistrationNum VARCHAR(75) null,titleOfProduction VARCHAR(75) null,dateOfIssued DATE null,productionCompany VARCHAR(75) null,technicalFormOfProd VARCHAR(75) null,OriginOfProdCom VARCHAR(75) null,permitsRequired VARCHAR(75) null,shootLocationInJamaica VARCHAR(75) null,preProductionDate DATE null,productionStartDate DATE null,proposedDateOfArrival VARCHAR(75) null,portOfEntry VARCHAR(75) null,proposedDateOfDeparture DATE null,fullProductionBudget VARCHAR(75) null,expectedBudgetSpendInJA VARCHAR(75) null,numberOFForeignCrewHired VARCHAR(75) null,numberJamaicaCrewHired VARCHAR(75) null,valueOfBondWaiver VARCHAR(75) null,customsBroker VARCHAR(75) null,localProductionManagerOrFixer VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table nbp_film_register";

	public static final String ORDER_BY_JPQL =
		" ORDER BY filmApplicationRegister.filmApplicationRegisterId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_film_register.filmApplicationRegisterId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILMAPPLICATIONREGISTERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FilmApplicationRegisterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _filmApplicationRegisterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFilmApplicationRegisterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _filmApplicationRegisterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FilmApplicationRegister.class;
	}

	@Override
	public String getModelClassName() {
		return FilmApplicationRegister.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FilmApplicationRegister, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FilmApplicationRegister, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmApplicationRegister, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FilmApplicationRegister)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FilmApplicationRegister, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FilmApplicationRegister, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FilmApplicationRegister)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FilmApplicationRegister, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FilmApplicationRegister, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<FilmApplicationRegister, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<FilmApplicationRegister, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FilmApplicationRegister, Object>>();

			attributeGetterFunctions.put(
				"filmApplicationRegisterId",
				FilmApplicationRegister::getFilmApplicationRegisterId);
			attributeGetterFunctions.put(
				"groupId", FilmApplicationRegister::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FilmApplicationRegister::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FilmApplicationRegister::getUserId);
			attributeGetterFunctions.put(
				"userName", FilmApplicationRegister::getUserName);
			attributeGetterFunctions.put(
				"createDate", FilmApplicationRegister::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FilmApplicationRegister::getModifiedDate);
			attributeGetterFunctions.put(
				"caseId", FilmApplicationRegister::getCaseId);
			attributeGetterFunctions.put(
				"nameOfApplicant", FilmApplicationRegister::getNameOfApplicant);
			attributeGetterFunctions.put(
				"registrationDate",
				FilmApplicationRegister::getRegistrationDate);
			attributeGetterFunctions.put(
				"filmRegistrationNum",
				FilmApplicationRegister::getFilmRegistrationNum);
			attributeGetterFunctions.put(
				"titleOfProduction",
				FilmApplicationRegister::getTitleOfProduction);
			attributeGetterFunctions.put(
				"dateOfIssued", FilmApplicationRegister::getDateOfIssued);
			attributeGetterFunctions.put(
				"productionCompany",
				FilmApplicationRegister::getProductionCompany);
			attributeGetterFunctions.put(
				"technicalFormOfProd",
				FilmApplicationRegister::getTechnicalFormOfProd);
			attributeGetterFunctions.put(
				"OriginOfProdCom", FilmApplicationRegister::getOriginOfProdCom);
			attributeGetterFunctions.put(
				"permitsRequired", FilmApplicationRegister::getPermitsRequired);
			attributeGetterFunctions.put(
				"shootLocationInJamaica",
				FilmApplicationRegister::getShootLocationInJamaica);
			attributeGetterFunctions.put(
				"preProductionDate",
				FilmApplicationRegister::getPreProductionDate);
			attributeGetterFunctions.put(
				"productionStartDate",
				FilmApplicationRegister::getProductionStartDate);
			attributeGetterFunctions.put(
				"proposedDateOfArrival",
				FilmApplicationRegister::getProposedDateOfArrival);
			attributeGetterFunctions.put(
				"portOfEntry", FilmApplicationRegister::getPortOfEntry);
			attributeGetterFunctions.put(
				"proposedDateOfDeparture",
				FilmApplicationRegister::getProposedDateOfDeparture);
			attributeGetterFunctions.put(
				"fullProductionBudget",
				FilmApplicationRegister::getFullProductionBudget);
			attributeGetterFunctions.put(
				"expectedBudgetSpendInJA",
				FilmApplicationRegister::getExpectedBudgetSpendInJA);
			attributeGetterFunctions.put(
				"numberOFForeignCrewHired",
				FilmApplicationRegister::getNumberOFForeignCrewHired);
			attributeGetterFunctions.put(
				"numberJamaicaCrewHired",
				FilmApplicationRegister::getNumberJamaicaCrewHired);
			attributeGetterFunctions.put(
				"valueOfBondWaiver",
				FilmApplicationRegister::getValueOfBondWaiver);
			attributeGetterFunctions.put(
				"customsBroker", FilmApplicationRegister::getCustomsBroker);
			attributeGetterFunctions.put(
				"localProductionManagerOrFixer",
				FilmApplicationRegister::getLocalProductionManagerOrFixer);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FilmApplicationRegister, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FilmApplicationRegister, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FilmApplicationRegister, ?>>();

			attributeSetterBiConsumers.put(
				"filmApplicationRegisterId",
				(BiConsumer<FilmApplicationRegister, Long>)
					FilmApplicationRegister::setFilmApplicationRegisterId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FilmApplicationRegister, Long>)
					FilmApplicationRegister::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FilmApplicationRegister, Long>)
					FilmApplicationRegister::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FilmApplicationRegister, Long>)
					FilmApplicationRegister::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FilmApplicationRegister, Date>)
					FilmApplicationRegister::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FilmApplicationRegister, Date>)
					FilmApplicationRegister::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setCaseId);
			attributeSetterBiConsumers.put(
				"nameOfApplicant",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setNameOfApplicant);
			attributeSetterBiConsumers.put(
				"registrationDate",
				(BiConsumer<FilmApplicationRegister, Date>)
					FilmApplicationRegister::setRegistrationDate);
			attributeSetterBiConsumers.put(
				"filmRegistrationNum",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setFilmRegistrationNum);
			attributeSetterBiConsumers.put(
				"titleOfProduction",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setTitleOfProduction);
			attributeSetterBiConsumers.put(
				"dateOfIssued",
				(BiConsumer<FilmApplicationRegister, Date>)
					FilmApplicationRegister::setDateOfIssued);
			attributeSetterBiConsumers.put(
				"productionCompany",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setProductionCompany);
			attributeSetterBiConsumers.put(
				"technicalFormOfProd",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setTechnicalFormOfProd);
			attributeSetterBiConsumers.put(
				"OriginOfProdCom",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setOriginOfProdCom);
			attributeSetterBiConsumers.put(
				"permitsRequired",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setPermitsRequired);
			attributeSetterBiConsumers.put(
				"shootLocationInJamaica",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setShootLocationInJamaica);
			attributeSetterBiConsumers.put(
				"preProductionDate",
				(BiConsumer<FilmApplicationRegister, Date>)
					FilmApplicationRegister::setPreProductionDate);
			attributeSetterBiConsumers.put(
				"productionStartDate",
				(BiConsumer<FilmApplicationRegister, Date>)
					FilmApplicationRegister::setProductionStartDate);
			attributeSetterBiConsumers.put(
				"proposedDateOfArrival",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setProposedDateOfArrival);
			attributeSetterBiConsumers.put(
				"portOfEntry",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setPortOfEntry);
			attributeSetterBiConsumers.put(
				"proposedDateOfDeparture",
				(BiConsumer<FilmApplicationRegister, Date>)
					FilmApplicationRegister::setProposedDateOfDeparture);
			attributeSetterBiConsumers.put(
				"fullProductionBudget",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setFullProductionBudget);
			attributeSetterBiConsumers.put(
				"expectedBudgetSpendInJA",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setExpectedBudgetSpendInJA);
			attributeSetterBiConsumers.put(
				"numberOFForeignCrewHired",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setNumberOFForeignCrewHired);
			attributeSetterBiConsumers.put(
				"numberJamaicaCrewHired",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setNumberJamaicaCrewHired);
			attributeSetterBiConsumers.put(
				"valueOfBondWaiver",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setValueOfBondWaiver);
			attributeSetterBiConsumers.put(
				"customsBroker",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setCustomsBroker);
			attributeSetterBiConsumers.put(
				"localProductionManagerOrFixer",
				(BiConsumer<FilmApplicationRegister, String>)
					FilmApplicationRegister::setLocalProductionManagerOrFixer);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFilmApplicationRegisterId() {
		return _filmApplicationRegisterId;
	}

	@Override
	public void setFilmApplicationRegisterId(long filmApplicationRegisterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmApplicationRegisterId = filmApplicationRegisterId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getNameOfApplicant() {
		if (_nameOfApplicant == null) {
			return "";
		}
		else {
			return _nameOfApplicant;
		}
	}

	@Override
	public void setNameOfApplicant(String nameOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfApplicant = nameOfApplicant;
	}

	@JSON
	@Override
	public Date getRegistrationDate() {
		return _registrationDate;
	}

	@Override
	public void setRegistrationDate(Date registrationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registrationDate = registrationDate;
	}

	@JSON
	@Override
	public String getFilmRegistrationNum() {
		if (_filmRegistrationNum == null) {
			return "";
		}
		else {
			return _filmRegistrationNum;
		}
	}

	@Override
	public void setFilmRegistrationNum(String filmRegistrationNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmRegistrationNum = filmRegistrationNum;
	}

	@JSON
	@Override
	public String getTitleOfProduction() {
		if (_titleOfProduction == null) {
			return "";
		}
		else {
			return _titleOfProduction;
		}
	}

	@Override
	public void setTitleOfProduction(String titleOfProduction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_titleOfProduction = titleOfProduction;
	}

	@JSON
	@Override
	public Date getDateOfIssued() {
		return _dateOfIssued;
	}

	@Override
	public void setDateOfIssued(Date dateOfIssued) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfIssued = dateOfIssued;
	}

	@JSON
	@Override
	public String getProductionCompany() {
		if (_productionCompany == null) {
			return "";
		}
		else {
			return _productionCompany;
		}
	}

	@Override
	public void setProductionCompany(String productionCompany) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionCompany = productionCompany;
	}

	@JSON
	@Override
	public String getTechnicalFormOfProd() {
		if (_technicalFormOfProd == null) {
			return "";
		}
		else {
			return _technicalFormOfProd;
		}
	}

	@Override
	public void setTechnicalFormOfProd(String technicalFormOfProd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_technicalFormOfProd = technicalFormOfProd;
	}

	@JSON
	@Override
	public String getOriginOfProdCom() {
		if (_OriginOfProdCom == null) {
			return "";
		}
		else {
			return _OriginOfProdCom;
		}
	}

	@Override
	public void setOriginOfProdCom(String OriginOfProdCom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_OriginOfProdCom = OriginOfProdCom;
	}

	@JSON
	@Override
	public String getPermitsRequired() {
		if (_permitsRequired == null) {
			return "";
		}
		else {
			return _permitsRequired;
		}
	}

	@Override
	public void setPermitsRequired(String permitsRequired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permitsRequired = permitsRequired;
	}

	@JSON
	@Override
	public String getShootLocationInJamaica() {
		if (_shootLocationInJamaica == null) {
			return "";
		}
		else {
			return _shootLocationInJamaica;
		}
	}

	@Override
	public void setShootLocationInJamaica(String shootLocationInJamaica) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shootLocationInJamaica = shootLocationInJamaica;
	}

	@JSON
	@Override
	public Date getPreProductionDate() {
		return _preProductionDate;
	}

	@Override
	public void setPreProductionDate(Date preProductionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preProductionDate = preProductionDate;
	}

	@JSON
	@Override
	public Date getProductionStartDate() {
		return _productionStartDate;
	}

	@Override
	public void setProductionStartDate(Date productionStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionStartDate = productionStartDate;
	}

	@JSON
	@Override
	public String getProposedDateOfArrival() {
		if (_proposedDateOfArrival == null) {
			return "";
		}
		else {
			return _proposedDateOfArrival;
		}
	}

	@Override
	public void setProposedDateOfArrival(String proposedDateOfArrival) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proposedDateOfArrival = proposedDateOfArrival;
	}

	@JSON
	@Override
	public String getPortOfEntry() {
		if (_portOfEntry == null) {
			return "";
		}
		else {
			return _portOfEntry;
		}
	}

	@Override
	public void setPortOfEntry(String portOfEntry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_portOfEntry = portOfEntry;
	}

	@JSON
	@Override
	public Date getProposedDateOfDeparture() {
		return _proposedDateOfDeparture;
	}

	@Override
	public void setProposedDateOfDeparture(Date proposedDateOfDeparture) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proposedDateOfDeparture = proposedDateOfDeparture;
	}

	@JSON
	@Override
	public String getFullProductionBudget() {
		if (_fullProductionBudget == null) {
			return "";
		}
		else {
			return _fullProductionBudget;
		}
	}

	@Override
	public void setFullProductionBudget(String fullProductionBudget) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullProductionBudget = fullProductionBudget;
	}

	@JSON
	@Override
	public String getExpectedBudgetSpendInJA() {
		if (_expectedBudgetSpendInJA == null) {
			return "";
		}
		else {
			return _expectedBudgetSpendInJA;
		}
	}

	@Override
	public void setExpectedBudgetSpendInJA(String expectedBudgetSpendInJA) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedBudgetSpendInJA = expectedBudgetSpendInJA;
	}

	@JSON
	@Override
	public String getNumberOFForeignCrewHired() {
		if (_numberOFForeignCrewHired == null) {
			return "";
		}
		else {
			return _numberOFForeignCrewHired;
		}
	}

	@Override
	public void setNumberOFForeignCrewHired(String numberOFForeignCrewHired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOFForeignCrewHired = numberOFForeignCrewHired;
	}

	@JSON
	@Override
	public String getNumberJamaicaCrewHired() {
		if (_numberJamaicaCrewHired == null) {
			return "";
		}
		else {
			return _numberJamaicaCrewHired;
		}
	}

	@Override
	public void setNumberJamaicaCrewHired(String numberJamaicaCrewHired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberJamaicaCrewHired = numberJamaicaCrewHired;
	}

	@JSON
	@Override
	public String getValueOfBondWaiver() {
		if (_valueOfBondWaiver == null) {
			return "";
		}
		else {
			return _valueOfBondWaiver;
		}
	}

	@Override
	public void setValueOfBondWaiver(String valueOfBondWaiver) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_valueOfBondWaiver = valueOfBondWaiver;
	}

	@JSON
	@Override
	public String getCustomsBroker() {
		if (_customsBroker == null) {
			return "";
		}
		else {
			return _customsBroker;
		}
	}

	@Override
	public void setCustomsBroker(String customsBroker) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customsBroker = customsBroker;
	}

	@JSON
	@Override
	public String getLocalProductionManagerOrFixer() {
		if (_localProductionManagerOrFixer == null) {
			return "";
		}
		else {
			return _localProductionManagerOrFixer;
		}
	}

	@Override
	public void setLocalProductionManagerOrFixer(
		String localProductionManagerOrFixer) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localProductionManagerOrFixer = localProductionManagerOrFixer;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FilmApplicationRegister.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FilmApplicationRegister toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FilmApplicationRegister>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FilmApplicationRegisterImpl filmApplicationRegisterImpl =
			new FilmApplicationRegisterImpl();

		filmApplicationRegisterImpl.setFilmApplicationRegisterId(
			getFilmApplicationRegisterId());
		filmApplicationRegisterImpl.setGroupId(getGroupId());
		filmApplicationRegisterImpl.setCompanyId(getCompanyId());
		filmApplicationRegisterImpl.setUserId(getUserId());
		filmApplicationRegisterImpl.setUserName(getUserName());
		filmApplicationRegisterImpl.setCreateDate(getCreateDate());
		filmApplicationRegisterImpl.setModifiedDate(getModifiedDate());
		filmApplicationRegisterImpl.setCaseId(getCaseId());
		filmApplicationRegisterImpl.setNameOfApplicant(getNameOfApplicant());
		filmApplicationRegisterImpl.setRegistrationDate(getRegistrationDate());
		filmApplicationRegisterImpl.setFilmRegistrationNum(
			getFilmRegistrationNum());
		filmApplicationRegisterImpl.setTitleOfProduction(
			getTitleOfProduction());
		filmApplicationRegisterImpl.setDateOfIssued(getDateOfIssued());
		filmApplicationRegisterImpl.setProductionCompany(
			getProductionCompany());
		filmApplicationRegisterImpl.setTechnicalFormOfProd(
			getTechnicalFormOfProd());
		filmApplicationRegisterImpl.setOriginOfProdCom(getOriginOfProdCom());
		filmApplicationRegisterImpl.setPermitsRequired(getPermitsRequired());
		filmApplicationRegisterImpl.setShootLocationInJamaica(
			getShootLocationInJamaica());
		filmApplicationRegisterImpl.setPreProductionDate(
			getPreProductionDate());
		filmApplicationRegisterImpl.setProductionStartDate(
			getProductionStartDate());
		filmApplicationRegisterImpl.setProposedDateOfArrival(
			getProposedDateOfArrival());
		filmApplicationRegisterImpl.setPortOfEntry(getPortOfEntry());
		filmApplicationRegisterImpl.setProposedDateOfDeparture(
			getProposedDateOfDeparture());
		filmApplicationRegisterImpl.setFullProductionBudget(
			getFullProductionBudget());
		filmApplicationRegisterImpl.setExpectedBudgetSpendInJA(
			getExpectedBudgetSpendInJA());
		filmApplicationRegisterImpl.setNumberOFForeignCrewHired(
			getNumberOFForeignCrewHired());
		filmApplicationRegisterImpl.setNumberJamaicaCrewHired(
			getNumberJamaicaCrewHired());
		filmApplicationRegisterImpl.setValueOfBondWaiver(
			getValueOfBondWaiver());
		filmApplicationRegisterImpl.setCustomsBroker(getCustomsBroker());
		filmApplicationRegisterImpl.setLocalProductionManagerOrFixer(
			getLocalProductionManagerOrFixer());

		filmApplicationRegisterImpl.resetOriginalValues();

		return filmApplicationRegisterImpl;
	}

	@Override
	public FilmApplicationRegister cloneWithOriginalValues() {
		FilmApplicationRegisterImpl filmApplicationRegisterImpl =
			new FilmApplicationRegisterImpl();

		filmApplicationRegisterImpl.setFilmApplicationRegisterId(
			this.<Long>getColumnOriginalValue("filmApplicationRegisterId"));
		filmApplicationRegisterImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		filmApplicationRegisterImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		filmApplicationRegisterImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		filmApplicationRegisterImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		filmApplicationRegisterImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		filmApplicationRegisterImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		filmApplicationRegisterImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		filmApplicationRegisterImpl.setNameOfApplicant(
			this.<String>getColumnOriginalValue("nameOfApplicant"));
		filmApplicationRegisterImpl.setRegistrationDate(
			this.<Date>getColumnOriginalValue("registrationDate"));
		filmApplicationRegisterImpl.setFilmRegistrationNum(
			this.<String>getColumnOriginalValue("filmRegistrationNum"));
		filmApplicationRegisterImpl.setTitleOfProduction(
			this.<String>getColumnOriginalValue("titleOfProduction"));
		filmApplicationRegisterImpl.setDateOfIssued(
			this.<Date>getColumnOriginalValue("dateOfIssued"));
		filmApplicationRegisterImpl.setProductionCompany(
			this.<String>getColumnOriginalValue("productionCompany"));
		filmApplicationRegisterImpl.setTechnicalFormOfProd(
			this.<String>getColumnOriginalValue("technicalFormOfProd"));
		filmApplicationRegisterImpl.setOriginOfProdCom(
			this.<String>getColumnOriginalValue("OriginOfProdCom"));
		filmApplicationRegisterImpl.setPermitsRequired(
			this.<String>getColumnOriginalValue("permitsRequired"));
		filmApplicationRegisterImpl.setShootLocationInJamaica(
			this.<String>getColumnOriginalValue("shootLocationInJamaica"));
		filmApplicationRegisterImpl.setPreProductionDate(
			this.<Date>getColumnOriginalValue("preProductionDate"));
		filmApplicationRegisterImpl.setProductionStartDate(
			this.<Date>getColumnOriginalValue("productionStartDate"));
		filmApplicationRegisterImpl.setProposedDateOfArrival(
			this.<String>getColumnOriginalValue("proposedDateOfArrival"));
		filmApplicationRegisterImpl.setPortOfEntry(
			this.<String>getColumnOriginalValue("portOfEntry"));
		filmApplicationRegisterImpl.setProposedDateOfDeparture(
			this.<Date>getColumnOriginalValue("proposedDateOfDeparture"));
		filmApplicationRegisterImpl.setFullProductionBudget(
			this.<String>getColumnOriginalValue("fullProductionBudget"));
		filmApplicationRegisterImpl.setExpectedBudgetSpendInJA(
			this.<String>getColumnOriginalValue("expectedBudgetSpendInJA"));
		filmApplicationRegisterImpl.setNumberOFForeignCrewHired(
			this.<String>getColumnOriginalValue("numberOFForeignCrewHired"));
		filmApplicationRegisterImpl.setNumberJamaicaCrewHired(
			this.<String>getColumnOriginalValue("numberJamaicaCrewHired"));
		filmApplicationRegisterImpl.setValueOfBondWaiver(
			this.<String>getColumnOriginalValue("valueOfBondWaiver"));
		filmApplicationRegisterImpl.setCustomsBroker(
			this.<String>getColumnOriginalValue("customsBroker"));
		filmApplicationRegisterImpl.setLocalProductionManagerOrFixer(
			this.<String>getColumnOriginalValue(
				"localProductionManagerOrFixer"));

		return filmApplicationRegisterImpl;
	}

	@Override
	public int compareTo(FilmApplicationRegister filmApplicationRegister) {
		long primaryKey = filmApplicationRegister.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FilmApplicationRegister)) {
			return false;
		}

		FilmApplicationRegister filmApplicationRegister =
			(FilmApplicationRegister)object;

		long primaryKey = filmApplicationRegister.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FilmApplicationRegister> toCacheModel() {
		FilmApplicationRegisterCacheModel filmApplicationRegisterCacheModel =
			new FilmApplicationRegisterCacheModel();

		filmApplicationRegisterCacheModel.filmApplicationRegisterId =
			getFilmApplicationRegisterId();

		filmApplicationRegisterCacheModel.groupId = getGroupId();

		filmApplicationRegisterCacheModel.companyId = getCompanyId();

		filmApplicationRegisterCacheModel.userId = getUserId();

		filmApplicationRegisterCacheModel.userName = getUserName();

		String userName = filmApplicationRegisterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			filmApplicationRegisterCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			filmApplicationRegisterCacheModel.createDate = createDate.getTime();
		}
		else {
			filmApplicationRegisterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			filmApplicationRegisterCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			filmApplicationRegisterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		filmApplicationRegisterCacheModel.caseId = getCaseId();

		String caseId = filmApplicationRegisterCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			filmApplicationRegisterCacheModel.caseId = null;
		}

		filmApplicationRegisterCacheModel.nameOfApplicant =
			getNameOfApplicant();

		String nameOfApplicant =
			filmApplicationRegisterCacheModel.nameOfApplicant;

		if ((nameOfApplicant != null) && (nameOfApplicant.length() == 0)) {
			filmApplicationRegisterCacheModel.nameOfApplicant = null;
		}

		Date registrationDate = getRegistrationDate();

		if (registrationDate != null) {
			filmApplicationRegisterCacheModel.registrationDate =
				registrationDate.getTime();
		}
		else {
			filmApplicationRegisterCacheModel.registrationDate = Long.MIN_VALUE;
		}

		filmApplicationRegisterCacheModel.filmRegistrationNum =
			getFilmRegistrationNum();

		String filmRegistrationNum =
			filmApplicationRegisterCacheModel.filmRegistrationNum;

		if ((filmRegistrationNum != null) &&
			(filmRegistrationNum.length() == 0)) {

			filmApplicationRegisterCacheModel.filmRegistrationNum = null;
		}

		filmApplicationRegisterCacheModel.titleOfProduction =
			getTitleOfProduction();

		String titleOfProduction =
			filmApplicationRegisterCacheModel.titleOfProduction;

		if ((titleOfProduction != null) && (titleOfProduction.length() == 0)) {
			filmApplicationRegisterCacheModel.titleOfProduction = null;
		}

		Date dateOfIssued = getDateOfIssued();

		if (dateOfIssued != null) {
			filmApplicationRegisterCacheModel.dateOfIssued =
				dateOfIssued.getTime();
		}
		else {
			filmApplicationRegisterCacheModel.dateOfIssued = Long.MIN_VALUE;
		}

		filmApplicationRegisterCacheModel.productionCompany =
			getProductionCompany();

		String productionCompany =
			filmApplicationRegisterCacheModel.productionCompany;

		if ((productionCompany != null) && (productionCompany.length() == 0)) {
			filmApplicationRegisterCacheModel.productionCompany = null;
		}

		filmApplicationRegisterCacheModel.technicalFormOfProd =
			getTechnicalFormOfProd();

		String technicalFormOfProd =
			filmApplicationRegisterCacheModel.technicalFormOfProd;

		if ((technicalFormOfProd != null) &&
			(technicalFormOfProd.length() == 0)) {

			filmApplicationRegisterCacheModel.technicalFormOfProd = null;
		}

		filmApplicationRegisterCacheModel.OriginOfProdCom =
			getOriginOfProdCom();

		String OriginOfProdCom =
			filmApplicationRegisterCacheModel.OriginOfProdCom;

		if ((OriginOfProdCom != null) && (OriginOfProdCom.length() == 0)) {
			filmApplicationRegisterCacheModel.OriginOfProdCom = null;
		}

		filmApplicationRegisterCacheModel.permitsRequired =
			getPermitsRequired();

		String permitsRequired =
			filmApplicationRegisterCacheModel.permitsRequired;

		if ((permitsRequired != null) && (permitsRequired.length() == 0)) {
			filmApplicationRegisterCacheModel.permitsRequired = null;
		}

		filmApplicationRegisterCacheModel.shootLocationInJamaica =
			getShootLocationInJamaica();

		String shootLocationInJamaica =
			filmApplicationRegisterCacheModel.shootLocationInJamaica;

		if ((shootLocationInJamaica != null) &&
			(shootLocationInJamaica.length() == 0)) {

			filmApplicationRegisterCacheModel.shootLocationInJamaica = null;
		}

		Date preProductionDate = getPreProductionDate();

		if (preProductionDate != null) {
			filmApplicationRegisterCacheModel.preProductionDate =
				preProductionDate.getTime();
		}
		else {
			filmApplicationRegisterCacheModel.preProductionDate =
				Long.MIN_VALUE;
		}

		Date productionStartDate = getProductionStartDate();

		if (productionStartDate != null) {
			filmApplicationRegisterCacheModel.productionStartDate =
				productionStartDate.getTime();
		}
		else {
			filmApplicationRegisterCacheModel.productionStartDate =
				Long.MIN_VALUE;
		}

		filmApplicationRegisterCacheModel.proposedDateOfArrival =
			getProposedDateOfArrival();

		String proposedDateOfArrival =
			filmApplicationRegisterCacheModel.proposedDateOfArrival;

		if ((proposedDateOfArrival != null) &&
			(proposedDateOfArrival.length() == 0)) {

			filmApplicationRegisterCacheModel.proposedDateOfArrival = null;
		}

		filmApplicationRegisterCacheModel.portOfEntry = getPortOfEntry();

		String portOfEntry = filmApplicationRegisterCacheModel.portOfEntry;

		if ((portOfEntry != null) && (portOfEntry.length() == 0)) {
			filmApplicationRegisterCacheModel.portOfEntry = null;
		}

		Date proposedDateOfDeparture = getProposedDateOfDeparture();

		if (proposedDateOfDeparture != null) {
			filmApplicationRegisterCacheModel.proposedDateOfDeparture =
				proposedDateOfDeparture.getTime();
		}
		else {
			filmApplicationRegisterCacheModel.proposedDateOfDeparture =
				Long.MIN_VALUE;
		}

		filmApplicationRegisterCacheModel.fullProductionBudget =
			getFullProductionBudget();

		String fullProductionBudget =
			filmApplicationRegisterCacheModel.fullProductionBudget;

		if ((fullProductionBudget != null) &&
			(fullProductionBudget.length() == 0)) {

			filmApplicationRegisterCacheModel.fullProductionBudget = null;
		}

		filmApplicationRegisterCacheModel.expectedBudgetSpendInJA =
			getExpectedBudgetSpendInJA();

		String expectedBudgetSpendInJA =
			filmApplicationRegisterCacheModel.expectedBudgetSpendInJA;

		if ((expectedBudgetSpendInJA != null) &&
			(expectedBudgetSpendInJA.length() == 0)) {

			filmApplicationRegisterCacheModel.expectedBudgetSpendInJA = null;
		}

		filmApplicationRegisterCacheModel.numberOFForeignCrewHired =
			getNumberOFForeignCrewHired();

		String numberOFForeignCrewHired =
			filmApplicationRegisterCacheModel.numberOFForeignCrewHired;

		if ((numberOFForeignCrewHired != null) &&
			(numberOFForeignCrewHired.length() == 0)) {

			filmApplicationRegisterCacheModel.numberOFForeignCrewHired = null;
		}

		filmApplicationRegisterCacheModel.numberJamaicaCrewHired =
			getNumberJamaicaCrewHired();

		String numberJamaicaCrewHired =
			filmApplicationRegisterCacheModel.numberJamaicaCrewHired;

		if ((numberJamaicaCrewHired != null) &&
			(numberJamaicaCrewHired.length() == 0)) {

			filmApplicationRegisterCacheModel.numberJamaicaCrewHired = null;
		}

		filmApplicationRegisterCacheModel.valueOfBondWaiver =
			getValueOfBondWaiver();

		String valueOfBondWaiver =
			filmApplicationRegisterCacheModel.valueOfBondWaiver;

		if ((valueOfBondWaiver != null) && (valueOfBondWaiver.length() == 0)) {
			filmApplicationRegisterCacheModel.valueOfBondWaiver = null;
		}

		filmApplicationRegisterCacheModel.customsBroker = getCustomsBroker();

		String customsBroker = filmApplicationRegisterCacheModel.customsBroker;

		if ((customsBroker != null) && (customsBroker.length() == 0)) {
			filmApplicationRegisterCacheModel.customsBroker = null;
		}

		filmApplicationRegisterCacheModel.localProductionManagerOrFixer =
			getLocalProductionManagerOrFixer();

		String localProductionManagerOrFixer =
			filmApplicationRegisterCacheModel.localProductionManagerOrFixer;

		if ((localProductionManagerOrFixer != null) &&
			(localProductionManagerOrFixer.length() == 0)) {

			filmApplicationRegisterCacheModel.localProductionManagerOrFixer =
				null;
		}

		return filmApplicationRegisterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FilmApplicationRegister, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FilmApplicationRegister, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmApplicationRegister, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FilmApplicationRegister)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FilmApplicationRegister>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						FilmApplicationRegister.class, ModelWrapper.class);

	}

	private long _filmApplicationRegisterId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _nameOfApplicant;
	private Date _registrationDate;
	private String _filmRegistrationNum;
	private String _titleOfProduction;
	private Date _dateOfIssued;
	private String _productionCompany;
	private String _technicalFormOfProd;
	private String _OriginOfProdCom;
	private String _permitsRequired;
	private String _shootLocationInJamaica;
	private Date _preProductionDate;
	private Date _productionStartDate;
	private String _proposedDateOfArrival;
	private String _portOfEntry;
	private Date _proposedDateOfDeparture;
	private String _fullProductionBudget;
	private String _expectedBudgetSpendInJA;
	private String _numberOFForeignCrewHired;
	private String _numberJamaicaCrewHired;
	private String _valueOfBondWaiver;
	private String _customsBroker;
	private String _localProductionManagerOrFixer;

	public <T> T getColumnValue(String columnName) {
		Function<FilmApplicationRegister, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FilmApplicationRegister)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"filmApplicationRegisterId", _filmApplicationRegisterId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("nameOfApplicant", _nameOfApplicant);
		_columnOriginalValues.put("registrationDate", _registrationDate);
		_columnOriginalValues.put("filmRegistrationNum", _filmRegistrationNum);
		_columnOriginalValues.put("titleOfProduction", _titleOfProduction);
		_columnOriginalValues.put("dateOfIssued", _dateOfIssued);
		_columnOriginalValues.put("productionCompany", _productionCompany);
		_columnOriginalValues.put("technicalFormOfProd", _technicalFormOfProd);
		_columnOriginalValues.put("OriginOfProdCom", _OriginOfProdCom);
		_columnOriginalValues.put("permitsRequired", _permitsRequired);
		_columnOriginalValues.put(
			"shootLocationInJamaica", _shootLocationInJamaica);
		_columnOriginalValues.put("preProductionDate", _preProductionDate);
		_columnOriginalValues.put("productionStartDate", _productionStartDate);
		_columnOriginalValues.put(
			"proposedDateOfArrival", _proposedDateOfArrival);
		_columnOriginalValues.put("portOfEntry", _portOfEntry);
		_columnOriginalValues.put(
			"proposedDateOfDeparture", _proposedDateOfDeparture);
		_columnOriginalValues.put(
			"fullProductionBudget", _fullProductionBudget);
		_columnOriginalValues.put(
			"expectedBudgetSpendInJA", _expectedBudgetSpendInJA);
		_columnOriginalValues.put(
			"numberOFForeignCrewHired", _numberOFForeignCrewHired);
		_columnOriginalValues.put(
			"numberJamaicaCrewHired", _numberJamaicaCrewHired);
		_columnOriginalValues.put("valueOfBondWaiver", _valueOfBondWaiver);
		_columnOriginalValues.put("customsBroker", _customsBroker);
		_columnOriginalValues.put(
			"localProductionManagerOrFixer", _localProductionManagerOrFixer);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("filmApplicationRegisterId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("nameOfApplicant", 256L);

		columnBitmasks.put("registrationDate", 512L);

		columnBitmasks.put("filmRegistrationNum", 1024L);

		columnBitmasks.put("titleOfProduction", 2048L);

		columnBitmasks.put("dateOfIssued", 4096L);

		columnBitmasks.put("productionCompany", 8192L);

		columnBitmasks.put("technicalFormOfProd", 16384L);

		columnBitmasks.put("OriginOfProdCom", 32768L);

		columnBitmasks.put("permitsRequired", 65536L);

		columnBitmasks.put("shootLocationInJamaica", 131072L);

		columnBitmasks.put("preProductionDate", 262144L);

		columnBitmasks.put("productionStartDate", 524288L);

		columnBitmasks.put("proposedDateOfArrival", 1048576L);

		columnBitmasks.put("portOfEntry", 2097152L);

		columnBitmasks.put("proposedDateOfDeparture", 4194304L);

		columnBitmasks.put("fullProductionBudget", 8388608L);

		columnBitmasks.put("expectedBudgetSpendInJA", 16777216L);

		columnBitmasks.put("numberOFForeignCrewHired", 33554432L);

		columnBitmasks.put("numberJamaicaCrewHired", 67108864L);

		columnBitmasks.put("valueOfBondWaiver", 134217728L);

		columnBitmasks.put("customsBroker", 268435456L);

		columnBitmasks.put("localProductionManagerOrFixer", 536870912L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FilmApplicationRegister _escapedModel;

}