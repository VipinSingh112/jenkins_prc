/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.film.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.film.stages.services.model.FilmFullRegistration;
import com.nbp.film.stages.services.model.FilmFullRegistrationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FilmFullRegistration service. Represents a row in the &quot;nbp_film_full_registration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FilmFullRegistrationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilmFullRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FilmFullRegistrationImpl
 * @generated
 */
@JSON(strict = true)
public class FilmFullRegistrationModelImpl
	extends BaseModelImpl<FilmFullRegistration>
	implements FilmFullRegistrationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a film full registration model instance should use the <code>FilmFullRegistration</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_film_full_registration";

	public static final Object[][] TABLE_COLUMNS = {
		{"filmFullRegistrationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.VARCHAR},
		{"nameOfApplicant", Types.VARCHAR}, {"productionType", Types.VARCHAR},
		{"registrationNumber", Types.VARCHAR}, {"duration", Types.VARCHAR},
		{"dateOfIssued", Types.TIMESTAMP}, {"productionTitle", Types.VARCHAR},
		{"productionDateFrom", Types.TIMESTAMP},
		{"productionDateTo", Types.TIMESTAMP},
		{"termsAndConditions", Types.VARCHAR}, {"docFileEntrys", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("filmFullRegistrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfIssued", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionDateFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productionDateTo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("termsAndConditions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docFileEntrys", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_film_full_registration (filmFullRegistrationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseId VARCHAR(75) null,nameOfApplicant VARCHAR(75) null,productionType VARCHAR(75) null,registrationNumber VARCHAR(75) null,duration VARCHAR(75) null,dateOfIssued DATE null,productionTitle VARCHAR(75) null,productionDateFrom DATE null,productionDateTo DATE null,termsAndConditions VARCHAR(75) null,docFileEntrys LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_film_full_registration";

	public static final String ORDER_BY_JPQL =
		" ORDER BY filmFullRegistration.filmFullRegistrationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_film_full_registration.filmFullRegistrationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REGISTRATIONNUMBER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILMFULLREGISTRATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FilmFullRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _filmFullRegistrationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFilmFullRegistrationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _filmFullRegistrationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FilmFullRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return FilmFullRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FilmFullRegistration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FilmFullRegistration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmFullRegistration, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FilmFullRegistration)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FilmFullRegistration, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FilmFullRegistration, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FilmFullRegistration)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FilmFullRegistration, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FilmFullRegistration, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FilmFullRegistration, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FilmFullRegistration, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FilmFullRegistration, Object>>();

			attributeGetterFunctions.put(
				"filmFullRegistrationId",
				FilmFullRegistration::getFilmFullRegistrationId);
			attributeGetterFunctions.put(
				"groupId", FilmFullRegistration::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FilmFullRegistration::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FilmFullRegistration::getUserId);
			attributeGetterFunctions.put(
				"userName", FilmFullRegistration::getUserName);
			attributeGetterFunctions.put(
				"createDate", FilmFullRegistration::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FilmFullRegistration::getModifiedDate);
			attributeGetterFunctions.put(
				"caseId", FilmFullRegistration::getCaseId);
			attributeGetterFunctions.put(
				"nameOfApplicant", FilmFullRegistration::getNameOfApplicant);
			attributeGetterFunctions.put(
				"productionType", FilmFullRegistration::getProductionType);
			attributeGetterFunctions.put(
				"registrationNumber",
				FilmFullRegistration::getRegistrationNumber);
			attributeGetterFunctions.put(
				"duration", FilmFullRegistration::getDuration);
			attributeGetterFunctions.put(
				"dateOfIssued", FilmFullRegistration::getDateOfIssued);
			attributeGetterFunctions.put(
				"productionTitle", FilmFullRegistration::getProductionTitle);
			attributeGetterFunctions.put(
				"productionDateFrom",
				FilmFullRegistration::getProductionDateFrom);
			attributeGetterFunctions.put(
				"productionDateTo", FilmFullRegistration::getProductionDateTo);
			attributeGetterFunctions.put(
				"termsAndConditions",
				FilmFullRegistration::getTermsAndConditions);
			attributeGetterFunctions.put(
				"docFileEntrys", FilmFullRegistration::getDocFileEntrys);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FilmFullRegistration, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FilmFullRegistration, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FilmFullRegistration, ?>>();

			attributeSetterBiConsumers.put(
				"filmFullRegistrationId",
				(BiConsumer<FilmFullRegistration, Long>)
					FilmFullRegistration::setFilmFullRegistrationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FilmFullRegistration, Long>)
					FilmFullRegistration::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FilmFullRegistration, Long>)
					FilmFullRegistration::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FilmFullRegistration, Long>)
					FilmFullRegistration::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FilmFullRegistration, String>)
					FilmFullRegistration::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FilmFullRegistration, Date>)
					FilmFullRegistration::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FilmFullRegistration, Date>)
					FilmFullRegistration::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<FilmFullRegistration, String>)
					FilmFullRegistration::setCaseId);
			attributeSetterBiConsumers.put(
				"nameOfApplicant",
				(BiConsumer<FilmFullRegistration, String>)
					FilmFullRegistration::setNameOfApplicant);
			attributeSetterBiConsumers.put(
				"productionType",
				(BiConsumer<FilmFullRegistration, String>)
					FilmFullRegistration::setProductionType);
			attributeSetterBiConsumers.put(
				"registrationNumber",
				(BiConsumer<FilmFullRegistration, String>)
					FilmFullRegistration::setRegistrationNumber);
			attributeSetterBiConsumers.put(
				"duration",
				(BiConsumer<FilmFullRegistration, String>)
					FilmFullRegistration::setDuration);
			attributeSetterBiConsumers.put(
				"dateOfIssued",
				(BiConsumer<FilmFullRegistration, Date>)
					FilmFullRegistration::setDateOfIssued);
			attributeSetterBiConsumers.put(
				"productionTitle",
				(BiConsumer<FilmFullRegistration, String>)
					FilmFullRegistration::setProductionTitle);
			attributeSetterBiConsumers.put(
				"productionDateFrom",
				(BiConsumer<FilmFullRegistration, Date>)
					FilmFullRegistration::setProductionDateFrom);
			attributeSetterBiConsumers.put(
				"productionDateTo",
				(BiConsumer<FilmFullRegistration, Date>)
					FilmFullRegistration::setProductionDateTo);
			attributeSetterBiConsumers.put(
				"termsAndConditions",
				(BiConsumer<FilmFullRegistration, String>)
					FilmFullRegistration::setTermsAndConditions);
			attributeSetterBiConsumers.put(
				"docFileEntrys",
				(BiConsumer<FilmFullRegistration, Long>)
					FilmFullRegistration::setDocFileEntrys);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFilmFullRegistrationId() {
		return _filmFullRegistrationId;
	}

	@Override
	public void setFilmFullRegistrationId(long filmFullRegistrationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmFullRegistrationId = filmFullRegistrationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getNameOfApplicant() {
		if (_nameOfApplicant == null) {
			return "";
		}
		else {
			return _nameOfApplicant;
		}
	}

	@Override
	public void setNameOfApplicant(String nameOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameOfApplicant = nameOfApplicant;
	}

	@JSON
	@Override
	public String getProductionType() {
		if (_productionType == null) {
			return "";
		}
		else {
			return _productionType;
		}
	}

	@Override
	public void setProductionType(String productionType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionType = productionType;
	}

	@JSON
	@Override
	public String getRegistrationNumber() {
		if (_registrationNumber == null) {
			return "";
		}
		else {
			return _registrationNumber;
		}
	}

	@Override
	public void setRegistrationNumber(String registrationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registrationNumber = registrationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRegistrationNumber() {
		return getColumnOriginalValue("registrationNumber");
	}

	@JSON
	@Override
	public String getDuration() {
		if (_duration == null) {
			return "";
		}
		else {
			return _duration;
		}
	}

	@Override
	public void setDuration(String duration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duration = duration;
	}

	@JSON
	@Override
	public Date getDateOfIssued() {
		return _dateOfIssued;
	}

	@Override
	public void setDateOfIssued(Date dateOfIssued) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfIssued = dateOfIssued;
	}

	@JSON
	@Override
	public String getProductionTitle() {
		if (_productionTitle == null) {
			return "";
		}
		else {
			return _productionTitle;
		}
	}

	@Override
	public void setProductionTitle(String productionTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionTitle = productionTitle;
	}

	@JSON
	@Override
	public Date getProductionDateFrom() {
		return _productionDateFrom;
	}

	@Override
	public void setProductionDateFrom(Date productionDateFrom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionDateFrom = productionDateFrom;
	}

	@JSON
	@Override
	public Date getProductionDateTo() {
		return _productionDateTo;
	}

	@Override
	public void setProductionDateTo(Date productionDateTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productionDateTo = productionDateTo;
	}

	@JSON
	@Override
	public String getTermsAndConditions() {
		if (_termsAndConditions == null) {
			return "";
		}
		else {
			return _termsAndConditions;
		}
	}

	@Override
	public void setTermsAndConditions(String termsAndConditions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_termsAndConditions = termsAndConditions;
	}

	@JSON
	@Override
	public long getDocFileEntrys() {
		return _docFileEntrys;
	}

	@Override
	public void setDocFileEntrys(long docFileEntrys) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docFileEntrys = docFileEntrys;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FilmFullRegistration.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FilmFullRegistration toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FilmFullRegistration>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FilmFullRegistrationImpl filmFullRegistrationImpl =
			new FilmFullRegistrationImpl();

		filmFullRegistrationImpl.setFilmFullRegistrationId(
			getFilmFullRegistrationId());
		filmFullRegistrationImpl.setGroupId(getGroupId());
		filmFullRegistrationImpl.setCompanyId(getCompanyId());
		filmFullRegistrationImpl.setUserId(getUserId());
		filmFullRegistrationImpl.setUserName(getUserName());
		filmFullRegistrationImpl.setCreateDate(getCreateDate());
		filmFullRegistrationImpl.setModifiedDate(getModifiedDate());
		filmFullRegistrationImpl.setCaseId(getCaseId());
		filmFullRegistrationImpl.setNameOfApplicant(getNameOfApplicant());
		filmFullRegistrationImpl.setProductionType(getProductionType());
		filmFullRegistrationImpl.setRegistrationNumber(getRegistrationNumber());
		filmFullRegistrationImpl.setDuration(getDuration());
		filmFullRegistrationImpl.setDateOfIssued(getDateOfIssued());
		filmFullRegistrationImpl.setProductionTitle(getProductionTitle());
		filmFullRegistrationImpl.setProductionDateFrom(getProductionDateFrom());
		filmFullRegistrationImpl.setProductionDateTo(getProductionDateTo());
		filmFullRegistrationImpl.setTermsAndConditions(getTermsAndConditions());
		filmFullRegistrationImpl.setDocFileEntrys(getDocFileEntrys());

		filmFullRegistrationImpl.resetOriginalValues();

		return filmFullRegistrationImpl;
	}

	@Override
	public FilmFullRegistration cloneWithOriginalValues() {
		FilmFullRegistrationImpl filmFullRegistrationImpl =
			new FilmFullRegistrationImpl();

		filmFullRegistrationImpl.setFilmFullRegistrationId(
			this.<Long>getColumnOriginalValue("filmFullRegistrationId"));
		filmFullRegistrationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		filmFullRegistrationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		filmFullRegistrationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		filmFullRegistrationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		filmFullRegistrationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		filmFullRegistrationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		filmFullRegistrationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		filmFullRegistrationImpl.setNameOfApplicant(
			this.<String>getColumnOriginalValue("nameOfApplicant"));
		filmFullRegistrationImpl.setProductionType(
			this.<String>getColumnOriginalValue("productionType"));
		filmFullRegistrationImpl.setRegistrationNumber(
			this.<String>getColumnOriginalValue("registrationNumber"));
		filmFullRegistrationImpl.setDuration(
			this.<String>getColumnOriginalValue("duration"));
		filmFullRegistrationImpl.setDateOfIssued(
			this.<Date>getColumnOriginalValue("dateOfIssued"));
		filmFullRegistrationImpl.setProductionTitle(
			this.<String>getColumnOriginalValue("productionTitle"));
		filmFullRegistrationImpl.setProductionDateFrom(
			this.<Date>getColumnOriginalValue("productionDateFrom"));
		filmFullRegistrationImpl.setProductionDateTo(
			this.<Date>getColumnOriginalValue("productionDateTo"));
		filmFullRegistrationImpl.setTermsAndConditions(
			this.<String>getColumnOriginalValue("termsAndConditions"));
		filmFullRegistrationImpl.setDocFileEntrys(
			this.<Long>getColumnOriginalValue("docFileEntrys"));

		return filmFullRegistrationImpl;
	}

	@Override
	public int compareTo(FilmFullRegistration filmFullRegistration) {
		long primaryKey = filmFullRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FilmFullRegistration)) {
			return false;
		}

		FilmFullRegistration filmFullRegistration =
			(FilmFullRegistration)object;

		long primaryKey = filmFullRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FilmFullRegistration> toCacheModel() {
		FilmFullRegistrationCacheModel filmFullRegistrationCacheModel =
			new FilmFullRegistrationCacheModel();

		filmFullRegistrationCacheModel.filmFullRegistrationId =
			getFilmFullRegistrationId();

		filmFullRegistrationCacheModel.groupId = getGroupId();

		filmFullRegistrationCacheModel.companyId = getCompanyId();

		filmFullRegistrationCacheModel.userId = getUserId();

		filmFullRegistrationCacheModel.userName = getUserName();

		String userName = filmFullRegistrationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			filmFullRegistrationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			filmFullRegistrationCacheModel.createDate = createDate.getTime();
		}
		else {
			filmFullRegistrationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			filmFullRegistrationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			filmFullRegistrationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		filmFullRegistrationCacheModel.caseId = getCaseId();

		String caseId = filmFullRegistrationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			filmFullRegistrationCacheModel.caseId = null;
		}

		filmFullRegistrationCacheModel.nameOfApplicant = getNameOfApplicant();

		String nameOfApplicant = filmFullRegistrationCacheModel.nameOfApplicant;

		if ((nameOfApplicant != null) && (nameOfApplicant.length() == 0)) {
			filmFullRegistrationCacheModel.nameOfApplicant = null;
		}

		filmFullRegistrationCacheModel.productionType = getProductionType();

		String productionType = filmFullRegistrationCacheModel.productionType;

		if ((productionType != null) && (productionType.length() == 0)) {
			filmFullRegistrationCacheModel.productionType = null;
		}

		filmFullRegistrationCacheModel.registrationNumber =
			getRegistrationNumber();

		String registrationNumber =
			filmFullRegistrationCacheModel.registrationNumber;

		if ((registrationNumber != null) &&
			(registrationNumber.length() == 0)) {

			filmFullRegistrationCacheModel.registrationNumber = null;
		}

		filmFullRegistrationCacheModel.duration = getDuration();

		String duration = filmFullRegistrationCacheModel.duration;

		if ((duration != null) && (duration.length() == 0)) {
			filmFullRegistrationCacheModel.duration = null;
		}

		Date dateOfIssued = getDateOfIssued();

		if (dateOfIssued != null) {
			filmFullRegistrationCacheModel.dateOfIssued =
				dateOfIssued.getTime();
		}
		else {
			filmFullRegistrationCacheModel.dateOfIssued = Long.MIN_VALUE;
		}

		filmFullRegistrationCacheModel.productionTitle = getProductionTitle();

		String productionTitle = filmFullRegistrationCacheModel.productionTitle;

		if ((productionTitle != null) && (productionTitle.length() == 0)) {
			filmFullRegistrationCacheModel.productionTitle = null;
		}

		Date productionDateFrom = getProductionDateFrom();

		if (productionDateFrom != null) {
			filmFullRegistrationCacheModel.productionDateFrom =
				productionDateFrom.getTime();
		}
		else {
			filmFullRegistrationCacheModel.productionDateFrom = Long.MIN_VALUE;
		}

		Date productionDateTo = getProductionDateTo();

		if (productionDateTo != null) {
			filmFullRegistrationCacheModel.productionDateTo =
				productionDateTo.getTime();
		}
		else {
			filmFullRegistrationCacheModel.productionDateTo = Long.MIN_VALUE;
		}

		filmFullRegistrationCacheModel.termsAndConditions =
			getTermsAndConditions();

		String termsAndConditions =
			filmFullRegistrationCacheModel.termsAndConditions;

		if ((termsAndConditions != null) &&
			(termsAndConditions.length() == 0)) {

			filmFullRegistrationCacheModel.termsAndConditions = null;
		}

		filmFullRegistrationCacheModel.docFileEntrys = getDocFileEntrys();

		return filmFullRegistrationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FilmFullRegistration, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FilmFullRegistration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmFullRegistration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FilmFullRegistration)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FilmFullRegistration>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FilmFullRegistration.class, ModelWrapper.class);

	}

	private long _filmFullRegistrationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseId;
	private String _nameOfApplicant;
	private String _productionType;
	private String _registrationNumber;
	private String _duration;
	private Date _dateOfIssued;
	private String _productionTitle;
	private Date _productionDateFrom;
	private Date _productionDateTo;
	private String _termsAndConditions;
	private long _docFileEntrys;

	public <T> T getColumnValue(String columnName) {
		Function<FilmFullRegistration, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FilmFullRegistration)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"filmFullRegistrationId", _filmFullRegistrationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("nameOfApplicant", _nameOfApplicant);
		_columnOriginalValues.put("productionType", _productionType);
		_columnOriginalValues.put("registrationNumber", _registrationNumber);
		_columnOriginalValues.put("duration", _duration);
		_columnOriginalValues.put("dateOfIssued", _dateOfIssued);
		_columnOriginalValues.put("productionTitle", _productionTitle);
		_columnOriginalValues.put("productionDateFrom", _productionDateFrom);
		_columnOriginalValues.put("productionDateTo", _productionDateTo);
		_columnOriginalValues.put("termsAndConditions", _termsAndConditions);
		_columnOriginalValues.put("docFileEntrys", _docFileEntrys);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("filmFullRegistrationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("caseId", 128L);

		columnBitmasks.put("nameOfApplicant", 256L);

		columnBitmasks.put("productionType", 512L);

		columnBitmasks.put("registrationNumber", 1024L);

		columnBitmasks.put("duration", 2048L);

		columnBitmasks.put("dateOfIssued", 4096L);

		columnBitmasks.put("productionTitle", 8192L);

		columnBitmasks.put("productionDateFrom", 16384L);

		columnBitmasks.put("productionDateTo", 32768L);

		columnBitmasks.put("termsAndConditions", 65536L);

		columnBitmasks.put("docFileEntrys", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FilmFullRegistration _escapedModel;

}