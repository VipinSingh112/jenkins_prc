/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.film.stages.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.film.stages.services.model.FilmDeskVerification;
import com.nbp.film.stages.services.model.FilmDeskVerificationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FilmDeskVerification service. Represents a row in the &quot;nbp_film_desk_verification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FilmDeskVerificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilmDeskVerificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FilmDeskVerificationImpl
 * @generated
 */
@JSON(strict = true)
public class FilmDeskVerificationModelImpl
	extends BaseModelImpl<FilmDeskVerification>
	implements FilmDeskVerificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a film desk verification model instance should use the <code>FilmDeskVerification</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_film_desk_verification";

	public static final Object[][] TABLE_COLUMNS = {
		{"filmDeskVerificaId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"filmApplicationId", Types.BIGINT},
		{"documentName", Types.VARCHAR}, {"status", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("filmDeskVerificaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("filmApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_film_desk_verification (filmDeskVerificaId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,filmApplicationId LONG,documentName VARCHAR(75) null,status VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_film_desk_verification";

	public static final String ORDER_BY_JPQL =
		" ORDER BY filmDeskVerification.filmDeskVerificaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_film_desk_verification.filmDeskVerificaId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILMAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILMDESKVERIFICAID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FilmDeskVerificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _filmDeskVerificaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFilmDeskVerificaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _filmDeskVerificaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FilmDeskVerification.class;
	}

	@Override
	public String getModelClassName() {
		return FilmDeskVerification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FilmDeskVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FilmDeskVerification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmDeskVerification, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FilmDeskVerification)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FilmDeskVerification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FilmDeskVerification, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FilmDeskVerification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FilmDeskVerification, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FilmDeskVerification, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FilmDeskVerification, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FilmDeskVerification, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FilmDeskVerification, Object>>();

			attributeGetterFunctions.put(
				"filmDeskVerificaId",
				FilmDeskVerification::getFilmDeskVerificaId);
			attributeGetterFunctions.put(
				"groupId", FilmDeskVerification::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FilmDeskVerification::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FilmDeskVerification::getUserId);
			attributeGetterFunctions.put(
				"userName", FilmDeskVerification::getUserName);
			attributeGetterFunctions.put(
				"createDate", FilmDeskVerification::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FilmDeskVerification::getModifiedDate);
			attributeGetterFunctions.put(
				"filmApplicationId",
				FilmDeskVerification::getFilmApplicationId);
			attributeGetterFunctions.put(
				"documentName", FilmDeskVerification::getDocumentName);
			attributeGetterFunctions.put(
				"status", FilmDeskVerification::getStatus);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FilmDeskVerification, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FilmDeskVerification, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FilmDeskVerification, ?>>();

			attributeSetterBiConsumers.put(
				"filmDeskVerificaId",
				(BiConsumer<FilmDeskVerification, Long>)
					FilmDeskVerification::setFilmDeskVerificaId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FilmDeskVerification, Long>)
					FilmDeskVerification::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FilmDeskVerification, Long>)
					FilmDeskVerification::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FilmDeskVerification, Long>)
					FilmDeskVerification::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FilmDeskVerification, String>)
					FilmDeskVerification::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FilmDeskVerification, Date>)
					FilmDeskVerification::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FilmDeskVerification, Date>)
					FilmDeskVerification::setModifiedDate);
			attributeSetterBiConsumers.put(
				"filmApplicationId",
				(BiConsumer<FilmDeskVerification, Long>)
					FilmDeskVerification::setFilmApplicationId);
			attributeSetterBiConsumers.put(
				"documentName",
				(BiConsumer<FilmDeskVerification, String>)
					FilmDeskVerification::setDocumentName);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<FilmDeskVerification, String>)
					FilmDeskVerification::setStatus);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFilmDeskVerificaId() {
		return _filmDeskVerificaId;
	}

	@Override
	public void setFilmDeskVerificaId(long filmDeskVerificaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmDeskVerificaId = filmDeskVerificaId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getFilmApplicationId() {
		return _filmApplicationId;
	}

	@Override
	public void setFilmApplicationId(long filmApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filmApplicationId = filmApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFilmApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("filmApplicationId"));
	}

	@JSON
	@Override
	public String getDocumentName() {
		if (_documentName == null) {
			return "";
		}
		else {
			return _documentName;
		}
	}

	@Override
	public void setDocumentName(String documentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentName = documentName;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("status");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FilmDeskVerification.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FilmDeskVerification toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FilmDeskVerification>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FilmDeskVerificationImpl filmDeskVerificationImpl =
			new FilmDeskVerificationImpl();

		filmDeskVerificationImpl.setFilmDeskVerificaId(getFilmDeskVerificaId());
		filmDeskVerificationImpl.setGroupId(getGroupId());
		filmDeskVerificationImpl.setCompanyId(getCompanyId());
		filmDeskVerificationImpl.setUserId(getUserId());
		filmDeskVerificationImpl.setUserName(getUserName());
		filmDeskVerificationImpl.setCreateDate(getCreateDate());
		filmDeskVerificationImpl.setModifiedDate(getModifiedDate());
		filmDeskVerificationImpl.setFilmApplicationId(getFilmApplicationId());
		filmDeskVerificationImpl.setDocumentName(getDocumentName());
		filmDeskVerificationImpl.setStatus(getStatus());

		filmDeskVerificationImpl.resetOriginalValues();

		return filmDeskVerificationImpl;
	}

	@Override
	public FilmDeskVerification cloneWithOriginalValues() {
		FilmDeskVerificationImpl filmDeskVerificationImpl =
			new FilmDeskVerificationImpl();

		filmDeskVerificationImpl.setFilmDeskVerificaId(
			this.<Long>getColumnOriginalValue("filmDeskVerificaId"));
		filmDeskVerificationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		filmDeskVerificationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		filmDeskVerificationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		filmDeskVerificationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		filmDeskVerificationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		filmDeskVerificationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		filmDeskVerificationImpl.setFilmApplicationId(
			this.<Long>getColumnOriginalValue("filmApplicationId"));
		filmDeskVerificationImpl.setDocumentName(
			this.<String>getColumnOriginalValue("documentName"));
		filmDeskVerificationImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));

		return filmDeskVerificationImpl;
	}

	@Override
	public int compareTo(FilmDeskVerification filmDeskVerification) {
		long primaryKey = filmDeskVerification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FilmDeskVerification)) {
			return false;
		}

		FilmDeskVerification filmDeskVerification =
			(FilmDeskVerification)object;

		long primaryKey = filmDeskVerification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FilmDeskVerification> toCacheModel() {
		FilmDeskVerificationCacheModel filmDeskVerificationCacheModel =
			new FilmDeskVerificationCacheModel();

		filmDeskVerificationCacheModel.filmDeskVerificaId =
			getFilmDeskVerificaId();

		filmDeskVerificationCacheModel.groupId = getGroupId();

		filmDeskVerificationCacheModel.companyId = getCompanyId();

		filmDeskVerificationCacheModel.userId = getUserId();

		filmDeskVerificationCacheModel.userName = getUserName();

		String userName = filmDeskVerificationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			filmDeskVerificationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			filmDeskVerificationCacheModel.createDate = createDate.getTime();
		}
		else {
			filmDeskVerificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			filmDeskVerificationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			filmDeskVerificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		filmDeskVerificationCacheModel.filmApplicationId =
			getFilmApplicationId();

		filmDeskVerificationCacheModel.documentName = getDocumentName();

		String documentName = filmDeskVerificationCacheModel.documentName;

		if ((documentName != null) && (documentName.length() == 0)) {
			filmDeskVerificationCacheModel.documentName = null;
		}

		filmDeskVerificationCacheModel.status = getStatus();

		String status = filmDeskVerificationCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			filmDeskVerificationCacheModel.status = null;
		}

		return filmDeskVerificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FilmDeskVerification, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FilmDeskVerification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FilmDeskVerification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FilmDeskVerification)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FilmDeskVerification>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FilmDeskVerification.class, ModelWrapper.class);

	}

	private long _filmDeskVerificaId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _filmApplicationId;
	private String _documentName;
	private String _status;

	public <T> T getColumnValue(String columnName) {
		Function<FilmDeskVerification, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FilmDeskVerification)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("filmDeskVerificaId", _filmDeskVerificaId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("filmApplicationId", _filmApplicationId);
		_columnOriginalValues.put("documentName", _documentName);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("filmDeskVerificaId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("filmApplicationId", 128L);

		columnBitmasks.put("documentName", 256L);

		columnBitmasks.put("status", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FilmDeskVerification _escapedModel;

}