/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jadsc.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jadsc.application.form.service.model.JADSCApplication;
import com.nbp.jadsc.application.form.service.model.JADSCApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the JADSCApplication service. Represents a row in the &quot;nbp_jadsc_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>JADSCApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JADSCApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JADSCApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class JADSCApplicationModelImpl
	extends BaseModelImpl<JADSCApplication> implements JADSCApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jadsc application model instance should use the <code>JADSCApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jadsc_application";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"jadscApplicationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"entityId", Types.VARCHAR}, {"typeOfApplication", Types.VARCHAR},
		{"typeOfComplaint", Types.VARCHAR},
		{"typeOfTransaction", Types.VARCHAR},
		{"transactionNumber", Types.VARCHAR},
		{"typeOfApplicant", Types.VARCHAR},
		{"industriesImpacted", Types.VARCHAR},
		{"breachOfConfidentiality", Types.VARCHAR},
		{"categoriesOfConfidentialInfo", Types.VARCHAR},
		{"categoriesOfConfiOtherPlease", Types.VARCHAR},
		{"reasonForConfidentialStatus", Types.VARCHAR},
		{"nonConfidentialSummary", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"status", Types.INTEGER}, {"icmDocumentPath", Types.VARCHAR},
		{"applicationNumber", Types.VARCHAR},
		{"expiredLicenseAppNumber", Types.VARCHAR},
		{"pdfFileEntryId", Types.BIGINT}, {"appCurrentStageName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jadscApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfApplication", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfComplaint", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfTransaction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transactionNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("industriesImpacted", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("breachOfConfidentiality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoriesOfConfidentialInfo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoriesOfConfiOtherPlease", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonForConfidentialStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nonConfidentialSummary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("icmDocumentPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredLicenseAppNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jadsc_application (uuid_ VARCHAR(75) null,jadscApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,entityId VARCHAR(75) null,typeOfApplication VARCHAR(75) null,typeOfComplaint VARCHAR(75) null,typeOfTransaction VARCHAR(75) null,transactionNumber VARCHAR(75) null,typeOfApplicant VARCHAR(75) null,industriesImpacted VARCHAR(1000) null,breachOfConfidentiality VARCHAR(1000) null,categoriesOfConfidentialInfo VARCHAR(3000) null,categoriesOfConfiOtherPlease VARCHAR(75) null,reasonForConfidentialStatus VARCHAR(500) null,nonConfidentialSummary VARCHAR(500) null,caseId VARCHAR(500) null,status INTEGER,icmDocumentPath VARCHAR(500) null,applicationNumber VARCHAR(75) null,expiredLicenseAppNumber VARCHAR(75) null,pdfFileEntryId LONG,appCurrentStageName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jadsc_application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY jadscApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jadsc_application.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BREACHOFCONFIDENTIALITY_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENTITYID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPIREDLICENSEAPPNUMBER_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JADSCAPPLICATIONID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2048L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public JADSCApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jadscApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJadscApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jadscApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JADSCApplication.class;
	}

	@Override
	public String getModelClassName() {
		return JADSCApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<JADSCApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<JADSCApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JADSCApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((JADSCApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<JADSCApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<JADSCApplication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(JADSCApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<JADSCApplication, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<JADSCApplication, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<JADSCApplication, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<JADSCApplication, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<JADSCApplication, Object>>();

			attributeGetterFunctions.put("uuid", JADSCApplication::getUuid);
			attributeGetterFunctions.put(
				"jadscApplicationId", JADSCApplication::getJadscApplicationId);
			attributeGetterFunctions.put(
				"groupId", JADSCApplication::getGroupId);
			attributeGetterFunctions.put(
				"companyId", JADSCApplication::getCompanyId);
			attributeGetterFunctions.put("userId", JADSCApplication::getUserId);
			attributeGetterFunctions.put(
				"userName", JADSCApplication::getUserName);
			attributeGetterFunctions.put(
				"createDate", JADSCApplication::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", JADSCApplication::getModifiedDate);
			attributeGetterFunctions.put(
				"entityId", JADSCApplication::getEntityId);
			attributeGetterFunctions.put(
				"typeOfApplication", JADSCApplication::getTypeOfApplication);
			attributeGetterFunctions.put(
				"typeOfComplaint", JADSCApplication::getTypeOfComplaint);
			attributeGetterFunctions.put(
				"typeOfTransaction", JADSCApplication::getTypeOfTransaction);
			attributeGetterFunctions.put(
				"transactionNumber", JADSCApplication::getTransactionNumber);
			attributeGetterFunctions.put(
				"typeOfApplicant", JADSCApplication::getTypeOfApplicant);
			attributeGetterFunctions.put(
				"industriesImpacted", JADSCApplication::getIndustriesImpacted);
			attributeGetterFunctions.put(
				"breachOfConfidentiality",
				JADSCApplication::getBreachOfConfidentiality);
			attributeGetterFunctions.put(
				"categoriesOfConfidentialInfo",
				JADSCApplication::getCategoriesOfConfidentialInfo);
			attributeGetterFunctions.put(
				"categoriesOfConfiOtherPlease",
				JADSCApplication::getCategoriesOfConfiOtherPlease);
			attributeGetterFunctions.put(
				"reasonForConfidentialStatus",
				JADSCApplication::getReasonForConfidentialStatus);
			attributeGetterFunctions.put(
				"nonConfidentialSummary",
				JADSCApplication::getNonConfidentialSummary);
			attributeGetterFunctions.put("caseId", JADSCApplication::getCaseId);
			attributeGetterFunctions.put("status", JADSCApplication::getStatus);
			attributeGetterFunctions.put(
				"icmDocumentPath", JADSCApplication::getIcmDocumentPath);
			attributeGetterFunctions.put(
				"applicationNumber", JADSCApplication::getApplicationNumber);
			attributeGetterFunctions.put(
				"expiredLicenseAppNumber",
				JADSCApplication::getExpiredLicenseAppNumber);
			attributeGetterFunctions.put(
				"pdfFileEntryId", JADSCApplication::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"appCurrentStageName",
				JADSCApplication::getAppCurrentStageName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<JADSCApplication, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<JADSCApplication, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<JADSCApplication, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setUuid);
			attributeSetterBiConsumers.put(
				"jadscApplicationId",
				(BiConsumer<JADSCApplication, Long>)
					JADSCApplication::setJadscApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<JADSCApplication, Long>)
					JADSCApplication::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<JADSCApplication, Long>)
					JADSCApplication::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<JADSCApplication, Long>)
					JADSCApplication::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<JADSCApplication, Date>)
					JADSCApplication::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<JADSCApplication, Date>)
					JADSCApplication::setModifiedDate);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setEntityId);
			attributeSetterBiConsumers.put(
				"typeOfApplication",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setTypeOfApplication);
			attributeSetterBiConsumers.put(
				"typeOfComplaint",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setTypeOfComplaint);
			attributeSetterBiConsumers.put(
				"typeOfTransaction",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setTypeOfTransaction);
			attributeSetterBiConsumers.put(
				"transactionNumber",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setTransactionNumber);
			attributeSetterBiConsumers.put(
				"typeOfApplicant",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setTypeOfApplicant);
			attributeSetterBiConsumers.put(
				"industriesImpacted",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setIndustriesImpacted);
			attributeSetterBiConsumers.put(
				"breachOfConfidentiality",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setBreachOfConfidentiality);
			attributeSetterBiConsumers.put(
				"categoriesOfConfidentialInfo",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setCategoriesOfConfidentialInfo);
			attributeSetterBiConsumers.put(
				"categoriesOfConfiOtherPlease",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setCategoriesOfConfiOtherPlease);
			attributeSetterBiConsumers.put(
				"reasonForConfidentialStatus",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setReasonForConfidentialStatus);
			attributeSetterBiConsumers.put(
				"nonConfidentialSummary",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setNonConfidentialSummary);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setCaseId);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<JADSCApplication, Integer>)
					JADSCApplication::setStatus);
			attributeSetterBiConsumers.put(
				"icmDocumentPath",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setIcmDocumentPath);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"expiredLicenseAppNumber",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setExpiredLicenseAppNumber);
			attributeSetterBiConsumers.put(
				"pdfFileEntryId",
				(BiConsumer<JADSCApplication, Long>)
					JADSCApplication::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<JADSCApplication, String>)
					JADSCApplication::setAppCurrentStageName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getJadscApplicationId() {
		return _jadscApplicationId;
	}

	@Override
	public void setJadscApplicationId(long jadscApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jadscApplicationId = jadscApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJadscApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jadscApplicationId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEntityId() {
		return getColumnOriginalValue("entityId");
	}

	@JSON
	@Override
	public String getTypeOfApplication() {
		if (_typeOfApplication == null) {
			return "";
		}
		else {
			return _typeOfApplication;
		}
	}

	@Override
	public void setTypeOfApplication(String typeOfApplication) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfApplication = typeOfApplication;
	}

	@JSON
	@Override
	public String getTypeOfComplaint() {
		if (_typeOfComplaint == null) {
			return "";
		}
		else {
			return _typeOfComplaint;
		}
	}

	@Override
	public void setTypeOfComplaint(String typeOfComplaint) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfComplaint = typeOfComplaint;
	}

	@JSON
	@Override
	public String getTypeOfTransaction() {
		if (_typeOfTransaction == null) {
			return "";
		}
		else {
			return _typeOfTransaction;
		}
	}

	@Override
	public void setTypeOfTransaction(String typeOfTransaction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfTransaction = typeOfTransaction;
	}

	@JSON
	@Override
	public String getTransactionNumber() {
		if (_transactionNumber == null) {
			return "";
		}
		else {
			return _transactionNumber;
		}
	}

	@Override
	public void setTransactionNumber(String transactionNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transactionNumber = transactionNumber;
	}

	@JSON
	@Override
	public String getTypeOfApplicant() {
		if (_typeOfApplicant == null) {
			return "";
		}
		else {
			return _typeOfApplicant;
		}
	}

	@Override
	public void setTypeOfApplicant(String typeOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfApplicant = typeOfApplicant;
	}

	@JSON
	@Override
	public String getIndustriesImpacted() {
		if (_industriesImpacted == null) {
			return "";
		}
		else {
			return _industriesImpacted;
		}
	}

	@Override
	public void setIndustriesImpacted(String industriesImpacted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_industriesImpacted = industriesImpacted;
	}

	@JSON
	@Override
	public String getBreachOfConfidentiality() {
		if (_breachOfConfidentiality == null) {
			return "";
		}
		else {
			return _breachOfConfidentiality;
		}
	}

	@Override
	public void setBreachOfConfidentiality(String breachOfConfidentiality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_breachOfConfidentiality = breachOfConfidentiality;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalBreachOfConfidentiality() {
		return getColumnOriginalValue("breachOfConfidentiality");
	}

	@JSON
	@Override
	public String getCategoriesOfConfidentialInfo() {
		if (_categoriesOfConfidentialInfo == null) {
			return "";
		}
		else {
			return _categoriesOfConfidentialInfo;
		}
	}

	@Override
	public void setCategoriesOfConfidentialInfo(
		String categoriesOfConfidentialInfo) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoriesOfConfidentialInfo = categoriesOfConfidentialInfo;
	}

	@JSON
	@Override
	public String getCategoriesOfConfiOtherPlease() {
		if (_categoriesOfConfiOtherPlease == null) {
			return "";
		}
		else {
			return _categoriesOfConfiOtherPlease;
		}
	}

	@Override
	public void setCategoriesOfConfiOtherPlease(
		String categoriesOfConfiOtherPlease) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoriesOfConfiOtherPlease = categoriesOfConfiOtherPlease;
	}

	@JSON
	@Override
	public String getReasonForConfidentialStatus() {
		if (_reasonForConfidentialStatus == null) {
			return "";
		}
		else {
			return _reasonForConfidentialStatus;
		}
	}

	@Override
	public void setReasonForConfidentialStatus(
		String reasonForConfidentialStatus) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForConfidentialStatus = reasonForConfidentialStatus;
	}

	@JSON
	@Override
	public String getNonConfidentialSummary() {
		if (_nonConfidentialSummary == null) {
			return "";
		}
		else {
			return _nonConfidentialSummary;
		}
	}

	@Override
	public void setNonConfidentialSummary(String nonConfidentialSummary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonConfidentialSummary = nonConfidentialSummary;
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getIcmDocumentPath() {
		if (_icmDocumentPath == null) {
			return "";
		}
		else {
			return _icmDocumentPath;
		}
	}

	@Override
	public void setIcmDocumentPath(String icmDocumentPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentPath = icmDocumentPath;
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getExpiredLicenseAppNumber() {
		if (_expiredLicenseAppNumber == null) {
			return "";
		}
		else {
			return _expiredLicenseAppNumber;
		}
	}

	@Override
	public void setExpiredLicenseAppNumber(String expiredLicenseAppNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredLicenseAppNumber = expiredLicenseAppNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExpiredLicenseAppNumber() {
		return getColumnOriginalValue("expiredLicenseAppNumber");
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _pdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long pdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pdfFileEntryId = pdfFileEntryId;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(JADSCApplication.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), JADSCApplication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JADSCApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, JADSCApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JADSCApplicationImpl jadscApplicationImpl = new JADSCApplicationImpl();

		jadscApplicationImpl.setUuid(getUuid());
		jadscApplicationImpl.setJadscApplicationId(getJadscApplicationId());
		jadscApplicationImpl.setGroupId(getGroupId());
		jadscApplicationImpl.setCompanyId(getCompanyId());
		jadscApplicationImpl.setUserId(getUserId());
		jadscApplicationImpl.setUserName(getUserName());
		jadscApplicationImpl.setCreateDate(getCreateDate());
		jadscApplicationImpl.setModifiedDate(getModifiedDate());
		jadscApplicationImpl.setEntityId(getEntityId());
		jadscApplicationImpl.setTypeOfApplication(getTypeOfApplication());
		jadscApplicationImpl.setTypeOfComplaint(getTypeOfComplaint());
		jadscApplicationImpl.setTypeOfTransaction(getTypeOfTransaction());
		jadscApplicationImpl.setTransactionNumber(getTransactionNumber());
		jadscApplicationImpl.setTypeOfApplicant(getTypeOfApplicant());
		jadscApplicationImpl.setIndustriesImpacted(getIndustriesImpacted());
		jadscApplicationImpl.setBreachOfConfidentiality(
			getBreachOfConfidentiality());
		jadscApplicationImpl.setCategoriesOfConfidentialInfo(
			getCategoriesOfConfidentialInfo());
		jadscApplicationImpl.setCategoriesOfConfiOtherPlease(
			getCategoriesOfConfiOtherPlease());
		jadscApplicationImpl.setReasonForConfidentialStatus(
			getReasonForConfidentialStatus());
		jadscApplicationImpl.setNonConfidentialSummary(
			getNonConfidentialSummary());
		jadscApplicationImpl.setCaseId(getCaseId());
		jadscApplicationImpl.setStatus(getStatus());
		jadscApplicationImpl.setIcmDocumentPath(getIcmDocumentPath());
		jadscApplicationImpl.setApplicationNumber(getApplicationNumber());
		jadscApplicationImpl.setExpiredLicenseAppNumber(
			getExpiredLicenseAppNumber());
		jadscApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		jadscApplicationImpl.setAppCurrentStageName(getAppCurrentStageName());

		jadscApplicationImpl.resetOriginalValues();

		return jadscApplicationImpl;
	}

	@Override
	public JADSCApplication cloneWithOriginalValues() {
		JADSCApplicationImpl jadscApplicationImpl = new JADSCApplicationImpl();

		jadscApplicationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		jadscApplicationImpl.setJadscApplicationId(
			this.<Long>getColumnOriginalValue("jadscApplicationId"));
		jadscApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		jadscApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		jadscApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		jadscApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		jadscApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		jadscApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		jadscApplicationImpl.setEntityId(
			this.<String>getColumnOriginalValue("entityId"));
		jadscApplicationImpl.setTypeOfApplication(
			this.<String>getColumnOriginalValue("typeOfApplication"));
		jadscApplicationImpl.setTypeOfComplaint(
			this.<String>getColumnOriginalValue("typeOfComplaint"));
		jadscApplicationImpl.setTypeOfTransaction(
			this.<String>getColumnOriginalValue("typeOfTransaction"));
		jadscApplicationImpl.setTransactionNumber(
			this.<String>getColumnOriginalValue("transactionNumber"));
		jadscApplicationImpl.setTypeOfApplicant(
			this.<String>getColumnOriginalValue("typeOfApplicant"));
		jadscApplicationImpl.setIndustriesImpacted(
			this.<String>getColumnOriginalValue("industriesImpacted"));
		jadscApplicationImpl.setBreachOfConfidentiality(
			this.<String>getColumnOriginalValue("breachOfConfidentiality"));
		jadscApplicationImpl.setCategoriesOfConfidentialInfo(
			this.<String>getColumnOriginalValue(
				"categoriesOfConfidentialInfo"));
		jadscApplicationImpl.setCategoriesOfConfiOtherPlease(
			this.<String>getColumnOriginalValue(
				"categoriesOfConfiOtherPlease"));
		jadscApplicationImpl.setReasonForConfidentialStatus(
			this.<String>getColumnOriginalValue("reasonForConfidentialStatus"));
		jadscApplicationImpl.setNonConfidentialSummary(
			this.<String>getColumnOriginalValue("nonConfidentialSummary"));
		jadscApplicationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		jadscApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		jadscApplicationImpl.setIcmDocumentPath(
			this.<String>getColumnOriginalValue("icmDocumentPath"));
		jadscApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		jadscApplicationImpl.setExpiredLicenseAppNumber(
			this.<String>getColumnOriginalValue("expiredLicenseAppNumber"));
		jadscApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("pdfFileEntryId"));
		jadscApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));

		return jadscApplicationImpl;
	}

	@Override
	public int compareTo(JADSCApplication jadscApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), jadscApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof JADSCApplication)) {
			return false;
		}

		JADSCApplication jadscApplication = (JADSCApplication)object;

		long primaryKey = jadscApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<JADSCApplication> toCacheModel() {
		JADSCApplicationCacheModel jadscApplicationCacheModel =
			new JADSCApplicationCacheModel();

		jadscApplicationCacheModel.uuid = getUuid();

		String uuid = jadscApplicationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			jadscApplicationCacheModel.uuid = null;
		}

		jadscApplicationCacheModel.jadscApplicationId = getJadscApplicationId();

		jadscApplicationCacheModel.groupId = getGroupId();

		jadscApplicationCacheModel.companyId = getCompanyId();

		jadscApplicationCacheModel.userId = getUserId();

		jadscApplicationCacheModel.userName = getUserName();

		String userName = jadscApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jadscApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			jadscApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			jadscApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jadscApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			jadscApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		jadscApplicationCacheModel.entityId = getEntityId();

		String entityId = jadscApplicationCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			jadscApplicationCacheModel.entityId = null;
		}

		jadscApplicationCacheModel.typeOfApplication = getTypeOfApplication();

		String typeOfApplication = jadscApplicationCacheModel.typeOfApplication;

		if ((typeOfApplication != null) && (typeOfApplication.length() == 0)) {
			jadscApplicationCacheModel.typeOfApplication = null;
		}

		jadscApplicationCacheModel.typeOfComplaint = getTypeOfComplaint();

		String typeOfComplaint = jadscApplicationCacheModel.typeOfComplaint;

		if ((typeOfComplaint != null) && (typeOfComplaint.length() == 0)) {
			jadscApplicationCacheModel.typeOfComplaint = null;
		}

		jadscApplicationCacheModel.typeOfTransaction = getTypeOfTransaction();

		String typeOfTransaction = jadscApplicationCacheModel.typeOfTransaction;

		if ((typeOfTransaction != null) && (typeOfTransaction.length() == 0)) {
			jadscApplicationCacheModel.typeOfTransaction = null;
		}

		jadscApplicationCacheModel.transactionNumber = getTransactionNumber();

		String transactionNumber = jadscApplicationCacheModel.transactionNumber;

		if ((transactionNumber != null) && (transactionNumber.length() == 0)) {
			jadscApplicationCacheModel.transactionNumber = null;
		}

		jadscApplicationCacheModel.typeOfApplicant = getTypeOfApplicant();

		String typeOfApplicant = jadscApplicationCacheModel.typeOfApplicant;

		if ((typeOfApplicant != null) && (typeOfApplicant.length() == 0)) {
			jadscApplicationCacheModel.typeOfApplicant = null;
		}

		jadscApplicationCacheModel.industriesImpacted = getIndustriesImpacted();

		String industriesImpacted =
			jadscApplicationCacheModel.industriesImpacted;

		if ((industriesImpacted != null) &&
			(industriesImpacted.length() == 0)) {

			jadscApplicationCacheModel.industriesImpacted = null;
		}

		jadscApplicationCacheModel.breachOfConfidentiality =
			getBreachOfConfidentiality();

		String breachOfConfidentiality =
			jadscApplicationCacheModel.breachOfConfidentiality;

		if ((breachOfConfidentiality != null) &&
			(breachOfConfidentiality.length() == 0)) {

			jadscApplicationCacheModel.breachOfConfidentiality = null;
		}

		jadscApplicationCacheModel.categoriesOfConfidentialInfo =
			getCategoriesOfConfidentialInfo();

		String categoriesOfConfidentialInfo =
			jadscApplicationCacheModel.categoriesOfConfidentialInfo;

		if ((categoriesOfConfidentialInfo != null) &&
			(categoriesOfConfidentialInfo.length() == 0)) {

			jadscApplicationCacheModel.categoriesOfConfidentialInfo = null;
		}

		jadscApplicationCacheModel.categoriesOfConfiOtherPlease =
			getCategoriesOfConfiOtherPlease();

		String categoriesOfConfiOtherPlease =
			jadscApplicationCacheModel.categoriesOfConfiOtherPlease;

		if ((categoriesOfConfiOtherPlease != null) &&
			(categoriesOfConfiOtherPlease.length() == 0)) {

			jadscApplicationCacheModel.categoriesOfConfiOtherPlease = null;
		}

		jadscApplicationCacheModel.reasonForConfidentialStatus =
			getReasonForConfidentialStatus();

		String reasonForConfidentialStatus =
			jadscApplicationCacheModel.reasonForConfidentialStatus;

		if ((reasonForConfidentialStatus != null) &&
			(reasonForConfidentialStatus.length() == 0)) {

			jadscApplicationCacheModel.reasonForConfidentialStatus = null;
		}

		jadscApplicationCacheModel.nonConfidentialSummary =
			getNonConfidentialSummary();

		String nonConfidentialSummary =
			jadscApplicationCacheModel.nonConfidentialSummary;

		if ((nonConfidentialSummary != null) &&
			(nonConfidentialSummary.length() == 0)) {

			jadscApplicationCacheModel.nonConfidentialSummary = null;
		}

		jadscApplicationCacheModel.caseId = getCaseId();

		String caseId = jadscApplicationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			jadscApplicationCacheModel.caseId = null;
		}

		jadscApplicationCacheModel.status = getStatus();

		jadscApplicationCacheModel.icmDocumentPath = getIcmDocumentPath();

		String icmDocumentPath = jadscApplicationCacheModel.icmDocumentPath;

		if ((icmDocumentPath != null) && (icmDocumentPath.length() == 0)) {
			jadscApplicationCacheModel.icmDocumentPath = null;
		}

		jadscApplicationCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber = jadscApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			jadscApplicationCacheModel.applicationNumber = null;
		}

		jadscApplicationCacheModel.expiredLicenseAppNumber =
			getExpiredLicenseAppNumber();

		String expiredLicenseAppNumber =
			jadscApplicationCacheModel.expiredLicenseAppNumber;

		if ((expiredLicenseAppNumber != null) &&
			(expiredLicenseAppNumber.length() == 0)) {

			jadscApplicationCacheModel.expiredLicenseAppNumber = null;
		}

		jadscApplicationCacheModel.pdfFileEntryId = getPdfFileEntryId();

		jadscApplicationCacheModel.appCurrentStageName =
			getAppCurrentStageName();

		String appCurrentStageName =
			jadscApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			jadscApplicationCacheModel.appCurrentStageName = null;
		}

		return jadscApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<JADSCApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<JADSCApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JADSCApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(JADSCApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, JADSCApplication>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					JADSCApplication.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _jadscApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entityId;
	private String _typeOfApplication;
	private String _typeOfComplaint;
	private String _typeOfTransaction;
	private String _transactionNumber;
	private String _typeOfApplicant;
	private String _industriesImpacted;
	private String _breachOfConfidentiality;
	private String _categoriesOfConfidentialInfo;
	private String _categoriesOfConfiOtherPlease;
	private String _reasonForConfidentialStatus;
	private String _nonConfidentialSummary;
	private String _caseId;
	private int _status;
	private String _icmDocumentPath;
	private String _applicationNumber;
	private String _expiredLicenseAppNumber;
	private long _pdfFileEntryId;
	private String _appCurrentStageName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<JADSCApplication, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((JADSCApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("jadscApplicationId", _jadscApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("typeOfApplication", _typeOfApplication);
		_columnOriginalValues.put("typeOfComplaint", _typeOfComplaint);
		_columnOriginalValues.put("typeOfTransaction", _typeOfTransaction);
		_columnOriginalValues.put("transactionNumber", _transactionNumber);
		_columnOriginalValues.put("typeOfApplicant", _typeOfApplicant);
		_columnOriginalValues.put("industriesImpacted", _industriesImpacted);
		_columnOriginalValues.put(
			"breachOfConfidentiality", _breachOfConfidentiality);
		_columnOriginalValues.put(
			"categoriesOfConfidentialInfo", _categoriesOfConfidentialInfo);
		_columnOriginalValues.put(
			"categoriesOfConfiOtherPlease", _categoriesOfConfiOtherPlease);
		_columnOriginalValues.put(
			"reasonForConfidentialStatus", _reasonForConfidentialStatus);
		_columnOriginalValues.put(
			"nonConfidentialSummary", _nonConfidentialSummary);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("icmDocumentPath", _icmDocumentPath);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"expiredLicenseAppNumber", _expiredLicenseAppNumber);
		_columnOriginalValues.put("pdfFileEntryId", _pdfFileEntryId);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("jadscApplicationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("entityId", 256L);

		columnBitmasks.put("typeOfApplication", 512L);

		columnBitmasks.put("typeOfComplaint", 1024L);

		columnBitmasks.put("typeOfTransaction", 2048L);

		columnBitmasks.put("transactionNumber", 4096L);

		columnBitmasks.put("typeOfApplicant", 8192L);

		columnBitmasks.put("industriesImpacted", 16384L);

		columnBitmasks.put("breachOfConfidentiality", 32768L);

		columnBitmasks.put("categoriesOfConfidentialInfo", 65536L);

		columnBitmasks.put("categoriesOfConfiOtherPlease", 131072L);

		columnBitmasks.put("reasonForConfidentialStatus", 262144L);

		columnBitmasks.put("nonConfidentialSummary", 524288L);

		columnBitmasks.put("caseId", 1048576L);

		columnBitmasks.put("status", 2097152L);

		columnBitmasks.put("icmDocumentPath", 4194304L);

		columnBitmasks.put("applicationNumber", 8388608L);

		columnBitmasks.put("expiredLicenseAppNumber", 16777216L);

		columnBitmasks.put("pdfFileEntryId", 33554432L);

		columnBitmasks.put("appCurrentStageName", 67108864L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private JADSCApplication _escapedModel;

}