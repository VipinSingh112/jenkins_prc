/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jadsc.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jadsc.application.form.service.model.JADSCCertificateOfVeracity;
import com.nbp.jadsc.application.form.service.model.JADSCCertificateOfVeracityModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the JADSCCertificateOfVeracity service. Represents a row in the &quot;nbp_jadsc_certif_verasity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>JADSCCertificateOfVeracityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JADSCCertificateOfVeracityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JADSCCertificateOfVeracityImpl
 * @generated
 */
@JSON(strict = true)
public class JADSCCertificateOfVeracityModelImpl
	extends BaseModelImpl<JADSCCertificateOfVeracity>
	implements JADSCCertificateOfVeracityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jadsc certificate of veracity model instance should use the <code>JADSCCertificateOfVeracity</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jadsc_certif_verasity";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"jadscCOVId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"veracityComName", Types.VARCHAR},
		{"veracityComPosition", Types.VARCHAR},
		{"veracityComCompany", Types.VARCHAR},
		{"veracitySignedDate", Types.TIMESTAMP},
		{"veracitySignedTelephone", Types.VARCHAR},
		{"veracitySignedFax", Types.VARCHAR},
		{"veracitySignedAddress", Types.VARCHAR},
		{"jadscApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jadscCOVId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("veracityComName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("veracityComPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("veracityComCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("veracitySignedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("veracitySignedTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("veracitySignedFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("veracitySignedAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jadscApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jadsc_certif_verasity (uuid_ VARCHAR(75) null,jadscCOVId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,veracityComName VARCHAR(75) null,veracityComPosition VARCHAR(75) null,veracityComCompany VARCHAR(75) null,veracitySignedDate DATE null,veracitySignedTelephone VARCHAR(75) null,veracitySignedFax VARCHAR(75) null,veracitySignedAddress VARCHAR(75) null,jadscApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jadsc_certif_verasity";

	public static final String ORDER_BY_JPQL =
		" ORDER BY jadscCertificateOfVeracity.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jadsc_certif_verasity.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JADSCAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public JADSCCertificateOfVeracityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jadscCOVId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJadscCOVId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jadscCOVId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JADSCCertificateOfVeracity.class;
	}

	@Override
	public String getModelClassName() {
		return JADSCCertificateOfVeracity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<JADSCCertificateOfVeracity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<JADSCCertificateOfVeracity, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JADSCCertificateOfVeracity, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(JADSCCertificateOfVeracity)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<JADSCCertificateOfVeracity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<JADSCCertificateOfVeracity, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(JADSCCertificateOfVeracity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<JADSCCertificateOfVeracity, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<JADSCCertificateOfVeracity, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<JADSCCertificateOfVeracity, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<JADSCCertificateOfVeracity, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<JADSCCertificateOfVeracity, Object>>();

			attributeGetterFunctions.put(
				"uuid", JADSCCertificateOfVeracity::getUuid);
			attributeGetterFunctions.put(
				"jadscCOVId", JADSCCertificateOfVeracity::getJadscCOVId);
			attributeGetterFunctions.put(
				"groupId", JADSCCertificateOfVeracity::getGroupId);
			attributeGetterFunctions.put(
				"companyId", JADSCCertificateOfVeracity::getCompanyId);
			attributeGetterFunctions.put(
				"userId", JADSCCertificateOfVeracity::getUserId);
			attributeGetterFunctions.put(
				"userName", JADSCCertificateOfVeracity::getUserName);
			attributeGetterFunctions.put(
				"createDate", JADSCCertificateOfVeracity::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", JADSCCertificateOfVeracity::getModifiedDate);
			attributeGetterFunctions.put(
				"veracityComName",
				JADSCCertificateOfVeracity::getVeracityComName);
			attributeGetterFunctions.put(
				"veracityComPosition",
				JADSCCertificateOfVeracity::getVeracityComPosition);
			attributeGetterFunctions.put(
				"veracityComCompany",
				JADSCCertificateOfVeracity::getVeracityComCompany);
			attributeGetterFunctions.put(
				"veracitySignedDate",
				JADSCCertificateOfVeracity::getVeracitySignedDate);
			attributeGetterFunctions.put(
				"veracitySignedTelephone",
				JADSCCertificateOfVeracity::getVeracitySignedTelephone);
			attributeGetterFunctions.put(
				"veracitySignedFax",
				JADSCCertificateOfVeracity::getVeracitySignedFax);
			attributeGetterFunctions.put(
				"veracitySignedAddress",
				JADSCCertificateOfVeracity::getVeracitySignedAddress);
			attributeGetterFunctions.put(
				"jadscApplicationId",
				JADSCCertificateOfVeracity::getJadscApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<JADSCCertificateOfVeracity, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<JADSCCertificateOfVeracity, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<JADSCCertificateOfVeracity, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<JADSCCertificateOfVeracity, String>)
					JADSCCertificateOfVeracity::setUuid);
			attributeSetterBiConsumers.put(
				"jadscCOVId",
				(BiConsumer<JADSCCertificateOfVeracity, Long>)
					JADSCCertificateOfVeracity::setJadscCOVId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<JADSCCertificateOfVeracity, Long>)
					JADSCCertificateOfVeracity::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<JADSCCertificateOfVeracity, Long>)
					JADSCCertificateOfVeracity::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<JADSCCertificateOfVeracity, Long>)
					JADSCCertificateOfVeracity::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<JADSCCertificateOfVeracity, String>)
					JADSCCertificateOfVeracity::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<JADSCCertificateOfVeracity, Date>)
					JADSCCertificateOfVeracity::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<JADSCCertificateOfVeracity, Date>)
					JADSCCertificateOfVeracity::setModifiedDate);
			attributeSetterBiConsumers.put(
				"veracityComName",
				(BiConsumer<JADSCCertificateOfVeracity, String>)
					JADSCCertificateOfVeracity::setVeracityComName);
			attributeSetterBiConsumers.put(
				"veracityComPosition",
				(BiConsumer<JADSCCertificateOfVeracity, String>)
					JADSCCertificateOfVeracity::setVeracityComPosition);
			attributeSetterBiConsumers.put(
				"veracityComCompany",
				(BiConsumer<JADSCCertificateOfVeracity, String>)
					JADSCCertificateOfVeracity::setVeracityComCompany);
			attributeSetterBiConsumers.put(
				"veracitySignedDate",
				(BiConsumer<JADSCCertificateOfVeracity, Date>)
					JADSCCertificateOfVeracity::setVeracitySignedDate);
			attributeSetterBiConsumers.put(
				"veracitySignedTelephone",
				(BiConsumer<JADSCCertificateOfVeracity, String>)
					JADSCCertificateOfVeracity::setVeracitySignedTelephone);
			attributeSetterBiConsumers.put(
				"veracitySignedFax",
				(BiConsumer<JADSCCertificateOfVeracity, String>)
					JADSCCertificateOfVeracity::setVeracitySignedFax);
			attributeSetterBiConsumers.put(
				"veracitySignedAddress",
				(BiConsumer<JADSCCertificateOfVeracity, String>)
					JADSCCertificateOfVeracity::setVeracitySignedAddress);
			attributeSetterBiConsumers.put(
				"jadscApplicationId",
				(BiConsumer<JADSCCertificateOfVeracity, Long>)
					JADSCCertificateOfVeracity::setJadscApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getJadscCOVId() {
		return _jadscCOVId;
	}

	@Override
	public void setJadscCOVId(long jadscCOVId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jadscCOVId = jadscCOVId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getVeracityComName() {
		if (_veracityComName == null) {
			return "";
		}
		else {
			return _veracityComName;
		}
	}

	@Override
	public void setVeracityComName(String veracityComName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_veracityComName = veracityComName;
	}

	@JSON
	@Override
	public String getVeracityComPosition() {
		if (_veracityComPosition == null) {
			return "";
		}
		else {
			return _veracityComPosition;
		}
	}

	@Override
	public void setVeracityComPosition(String veracityComPosition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_veracityComPosition = veracityComPosition;
	}

	@JSON
	@Override
	public String getVeracityComCompany() {
		if (_veracityComCompany == null) {
			return "";
		}
		else {
			return _veracityComCompany;
		}
	}

	@Override
	public void setVeracityComCompany(String veracityComCompany) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_veracityComCompany = veracityComCompany;
	}

	@JSON
	@Override
	public Date getVeracitySignedDate() {
		return _veracitySignedDate;
	}

	@Override
	public void setVeracitySignedDate(Date veracitySignedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_veracitySignedDate = veracitySignedDate;
	}

	@JSON
	@Override
	public String getVeracitySignedTelephone() {
		if (_veracitySignedTelephone == null) {
			return "";
		}
		else {
			return _veracitySignedTelephone;
		}
	}

	@Override
	public void setVeracitySignedTelephone(String veracitySignedTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_veracitySignedTelephone = veracitySignedTelephone;
	}

	@JSON
	@Override
	public String getVeracitySignedFax() {
		if (_veracitySignedFax == null) {
			return "";
		}
		else {
			return _veracitySignedFax;
		}
	}

	@Override
	public void setVeracitySignedFax(String veracitySignedFax) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_veracitySignedFax = veracitySignedFax;
	}

	@JSON
	@Override
	public String getVeracitySignedAddress() {
		if (_veracitySignedAddress == null) {
			return "";
		}
		else {
			return _veracitySignedAddress;
		}
	}

	@Override
	public void setVeracitySignedAddress(String veracitySignedAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_veracitySignedAddress = veracitySignedAddress;
	}

	@JSON
	@Override
	public long getJadscApplicationId() {
		return _jadscApplicationId;
	}

	@Override
	public void setJadscApplicationId(long jadscApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jadscApplicationId = jadscApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJadscApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jadscApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				JADSCCertificateOfVeracity.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), JADSCCertificateOfVeracity.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JADSCCertificateOfVeracity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, JADSCCertificateOfVeracity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JADSCCertificateOfVeracityImpl jadscCertificateOfVeracityImpl =
			new JADSCCertificateOfVeracityImpl();

		jadscCertificateOfVeracityImpl.setUuid(getUuid());
		jadscCertificateOfVeracityImpl.setJadscCOVId(getJadscCOVId());
		jadscCertificateOfVeracityImpl.setGroupId(getGroupId());
		jadscCertificateOfVeracityImpl.setCompanyId(getCompanyId());
		jadscCertificateOfVeracityImpl.setUserId(getUserId());
		jadscCertificateOfVeracityImpl.setUserName(getUserName());
		jadscCertificateOfVeracityImpl.setCreateDate(getCreateDate());
		jadscCertificateOfVeracityImpl.setModifiedDate(getModifiedDate());
		jadscCertificateOfVeracityImpl.setVeracityComName(getVeracityComName());
		jadscCertificateOfVeracityImpl.setVeracityComPosition(
			getVeracityComPosition());
		jadscCertificateOfVeracityImpl.setVeracityComCompany(
			getVeracityComCompany());
		jadscCertificateOfVeracityImpl.setVeracitySignedDate(
			getVeracitySignedDate());
		jadscCertificateOfVeracityImpl.setVeracitySignedTelephone(
			getVeracitySignedTelephone());
		jadscCertificateOfVeracityImpl.setVeracitySignedFax(
			getVeracitySignedFax());
		jadscCertificateOfVeracityImpl.setVeracitySignedAddress(
			getVeracitySignedAddress());
		jadscCertificateOfVeracityImpl.setJadscApplicationId(
			getJadscApplicationId());

		jadscCertificateOfVeracityImpl.resetOriginalValues();

		return jadscCertificateOfVeracityImpl;
	}

	@Override
	public JADSCCertificateOfVeracity cloneWithOriginalValues() {
		JADSCCertificateOfVeracityImpl jadscCertificateOfVeracityImpl =
			new JADSCCertificateOfVeracityImpl();

		jadscCertificateOfVeracityImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		jadscCertificateOfVeracityImpl.setJadscCOVId(
			this.<Long>getColumnOriginalValue("jadscCOVId"));
		jadscCertificateOfVeracityImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		jadscCertificateOfVeracityImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		jadscCertificateOfVeracityImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		jadscCertificateOfVeracityImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		jadscCertificateOfVeracityImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		jadscCertificateOfVeracityImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		jadscCertificateOfVeracityImpl.setVeracityComName(
			this.<String>getColumnOriginalValue("veracityComName"));
		jadscCertificateOfVeracityImpl.setVeracityComPosition(
			this.<String>getColumnOriginalValue("veracityComPosition"));
		jadscCertificateOfVeracityImpl.setVeracityComCompany(
			this.<String>getColumnOriginalValue("veracityComCompany"));
		jadscCertificateOfVeracityImpl.setVeracitySignedDate(
			this.<Date>getColumnOriginalValue("veracitySignedDate"));
		jadscCertificateOfVeracityImpl.setVeracitySignedTelephone(
			this.<String>getColumnOriginalValue("veracitySignedTelephone"));
		jadscCertificateOfVeracityImpl.setVeracitySignedFax(
			this.<String>getColumnOriginalValue("veracitySignedFax"));
		jadscCertificateOfVeracityImpl.setVeracitySignedAddress(
			this.<String>getColumnOriginalValue("veracitySignedAddress"));
		jadscCertificateOfVeracityImpl.setJadscApplicationId(
			this.<Long>getColumnOriginalValue("jadscApplicationId"));

		return jadscCertificateOfVeracityImpl;
	}

	@Override
	public int compareTo(
		JADSCCertificateOfVeracity jadscCertificateOfVeracity) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), jadscCertificateOfVeracity.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof JADSCCertificateOfVeracity)) {
			return false;
		}

		JADSCCertificateOfVeracity jadscCertificateOfVeracity =
			(JADSCCertificateOfVeracity)object;

		long primaryKey = jadscCertificateOfVeracity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<JADSCCertificateOfVeracity> toCacheModel() {
		JADSCCertificateOfVeracityCacheModel
			jadscCertificateOfVeracityCacheModel =
				new JADSCCertificateOfVeracityCacheModel();

		jadscCertificateOfVeracityCacheModel.uuid = getUuid();

		String uuid = jadscCertificateOfVeracityCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			jadscCertificateOfVeracityCacheModel.uuid = null;
		}

		jadscCertificateOfVeracityCacheModel.jadscCOVId = getJadscCOVId();

		jadscCertificateOfVeracityCacheModel.groupId = getGroupId();

		jadscCertificateOfVeracityCacheModel.companyId = getCompanyId();

		jadscCertificateOfVeracityCacheModel.userId = getUserId();

		jadscCertificateOfVeracityCacheModel.userName = getUserName();

		String userName = jadscCertificateOfVeracityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jadscCertificateOfVeracityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			jadscCertificateOfVeracityCacheModel.createDate =
				createDate.getTime();
		}
		else {
			jadscCertificateOfVeracityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jadscCertificateOfVeracityCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			jadscCertificateOfVeracityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		jadscCertificateOfVeracityCacheModel.veracityComName =
			getVeracityComName();

		String veracityComName =
			jadscCertificateOfVeracityCacheModel.veracityComName;

		if ((veracityComName != null) && (veracityComName.length() == 0)) {
			jadscCertificateOfVeracityCacheModel.veracityComName = null;
		}

		jadscCertificateOfVeracityCacheModel.veracityComPosition =
			getVeracityComPosition();

		String veracityComPosition =
			jadscCertificateOfVeracityCacheModel.veracityComPosition;

		if ((veracityComPosition != null) &&
			(veracityComPosition.length() == 0)) {

			jadscCertificateOfVeracityCacheModel.veracityComPosition = null;
		}

		jadscCertificateOfVeracityCacheModel.veracityComCompany =
			getVeracityComCompany();

		String veracityComCompany =
			jadscCertificateOfVeracityCacheModel.veracityComCompany;

		if ((veracityComCompany != null) &&
			(veracityComCompany.length() == 0)) {

			jadscCertificateOfVeracityCacheModel.veracityComCompany = null;
		}

		Date veracitySignedDate = getVeracitySignedDate();

		if (veracitySignedDate != null) {
			jadscCertificateOfVeracityCacheModel.veracitySignedDate =
				veracitySignedDate.getTime();
		}
		else {
			jadscCertificateOfVeracityCacheModel.veracitySignedDate =
				Long.MIN_VALUE;
		}

		jadscCertificateOfVeracityCacheModel.veracitySignedTelephone =
			getVeracitySignedTelephone();

		String veracitySignedTelephone =
			jadscCertificateOfVeracityCacheModel.veracitySignedTelephone;

		if ((veracitySignedTelephone != null) &&
			(veracitySignedTelephone.length() == 0)) {

			jadscCertificateOfVeracityCacheModel.veracitySignedTelephone = null;
		}

		jadscCertificateOfVeracityCacheModel.veracitySignedFax =
			getVeracitySignedFax();

		String veracitySignedFax =
			jadscCertificateOfVeracityCacheModel.veracitySignedFax;

		if ((veracitySignedFax != null) && (veracitySignedFax.length() == 0)) {
			jadscCertificateOfVeracityCacheModel.veracitySignedFax = null;
		}

		jadscCertificateOfVeracityCacheModel.veracitySignedAddress =
			getVeracitySignedAddress();

		String veracitySignedAddress =
			jadscCertificateOfVeracityCacheModel.veracitySignedAddress;

		if ((veracitySignedAddress != null) &&
			(veracitySignedAddress.length() == 0)) {

			jadscCertificateOfVeracityCacheModel.veracitySignedAddress = null;
		}

		jadscCertificateOfVeracityCacheModel.jadscApplicationId =
			getJadscApplicationId();

		return jadscCertificateOfVeracityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<JADSCCertificateOfVeracity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<JADSCCertificateOfVeracity, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JADSCCertificateOfVeracity, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(JADSCCertificateOfVeracity)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, JADSCCertificateOfVeracity>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						JADSCCertificateOfVeracity.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _jadscCOVId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _veracityComName;
	private String _veracityComPosition;
	private String _veracityComCompany;
	private Date _veracitySignedDate;
	private String _veracitySignedTelephone;
	private String _veracitySignedFax;
	private String _veracitySignedAddress;
	private long _jadscApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<JADSCCertificateOfVeracity, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((JADSCCertificateOfVeracity)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("jadscCOVId", _jadscCOVId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("veracityComName", _veracityComName);
		_columnOriginalValues.put("veracityComPosition", _veracityComPosition);
		_columnOriginalValues.put("veracityComCompany", _veracityComCompany);
		_columnOriginalValues.put("veracitySignedDate", _veracitySignedDate);
		_columnOriginalValues.put(
			"veracitySignedTelephone", _veracitySignedTelephone);
		_columnOriginalValues.put("veracitySignedFax", _veracitySignedFax);
		_columnOriginalValues.put(
			"veracitySignedAddress", _veracitySignedAddress);
		_columnOriginalValues.put("jadscApplicationId", _jadscApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("jadscCOVId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("veracityComName", 256L);

		columnBitmasks.put("veracityComPosition", 512L);

		columnBitmasks.put("veracityComCompany", 1024L);

		columnBitmasks.put("veracitySignedDate", 2048L);

		columnBitmasks.put("veracitySignedTelephone", 4096L);

		columnBitmasks.put("veracitySignedFax", 8192L);

		columnBitmasks.put("veracitySignedAddress", 16384L);

		columnBitmasks.put("jadscApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private JADSCCertificateOfVeracity _escapedModel;

}