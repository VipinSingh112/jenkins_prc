/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.jadsc.application.form.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.jadsc.application.form.service.model.JADSCNoticeOfAppearance;
import com.nbp.jadsc.application.form.service.model.JADSCNoticeOfAppearanceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the JADSCNoticeOfAppearance service. Represents a row in the &quot;nbp_jadsc_notic_of_appr_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>JADSCNoticeOfAppearanceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JADSCNoticeOfAppearanceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JADSCNoticeOfAppearanceImpl
 * @generated
 */
@JSON(strict = true)
public class JADSCNoticeOfAppearanceModelImpl
	extends BaseModelImpl<JADSCNoticeOfAppearance>
	implements JADSCNoticeOfAppearanceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jadsc notice of appearance model instance should use the <code>JADSCNoticeOfAppearance</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_jadsc_notic_of_appr_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"jadscNOAId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"fullName", Types.VARCHAR}, {"addressOne", Types.VARCHAR},
		{"date_", Types.TIMESTAMP}, {"name", Types.VARCHAR},
		{"firm", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"telephone", Types.VARCHAR}, {"jadscApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jadscNOAId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jadscApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_jadsc_notic_of_appr_info (uuid_ VARCHAR(75) null,jadscNOAId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,fullName VARCHAR(75) null,addressOne VARCHAR(75) null,date_ DATE null,name VARCHAR(75) null,firm VARCHAR(75) null,address VARCHAR(75) null,telephone VARCHAR(75) null,jadscApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_jadsc_notic_of_appr_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY jadscNoticeOfAppearance.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_jadsc_notic_of_appr_info.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JADSCAPPLICATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public JADSCNoticeOfAppearanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jadscNOAId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJadscNOAId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jadscNOAId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JADSCNoticeOfAppearance.class;
	}

	@Override
	public String getModelClassName() {
		return JADSCNoticeOfAppearance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<JADSCNoticeOfAppearance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<JADSCNoticeOfAppearance, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JADSCNoticeOfAppearance, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((JADSCNoticeOfAppearance)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<JADSCNoticeOfAppearance, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<JADSCNoticeOfAppearance, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(JADSCNoticeOfAppearance)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<JADSCNoticeOfAppearance, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<JADSCNoticeOfAppearance, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<JADSCNoticeOfAppearance, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<JADSCNoticeOfAppearance, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<JADSCNoticeOfAppearance, Object>>();

			attributeGetterFunctions.put(
				"uuid", JADSCNoticeOfAppearance::getUuid);
			attributeGetterFunctions.put(
				"jadscNOAId", JADSCNoticeOfAppearance::getJadscNOAId);
			attributeGetterFunctions.put(
				"groupId", JADSCNoticeOfAppearance::getGroupId);
			attributeGetterFunctions.put(
				"companyId", JADSCNoticeOfAppearance::getCompanyId);
			attributeGetterFunctions.put(
				"userId", JADSCNoticeOfAppearance::getUserId);
			attributeGetterFunctions.put(
				"userName", JADSCNoticeOfAppearance::getUserName);
			attributeGetterFunctions.put(
				"createDate", JADSCNoticeOfAppearance::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", JADSCNoticeOfAppearance::getModifiedDate);
			attributeGetterFunctions.put(
				"fullName", JADSCNoticeOfAppearance::getFullName);
			attributeGetterFunctions.put(
				"addressOne", JADSCNoticeOfAppearance::getAddressOne);
			attributeGetterFunctions.put(
				"date", JADSCNoticeOfAppearance::getDate);
			attributeGetterFunctions.put(
				"name", JADSCNoticeOfAppearance::getName);
			attributeGetterFunctions.put(
				"firm", JADSCNoticeOfAppearance::getFirm);
			attributeGetterFunctions.put(
				"address", JADSCNoticeOfAppearance::getAddress);
			attributeGetterFunctions.put(
				"telephone", JADSCNoticeOfAppearance::getTelephone);
			attributeGetterFunctions.put(
				"jadscApplicationId",
				JADSCNoticeOfAppearance::getJadscApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<JADSCNoticeOfAppearance, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<JADSCNoticeOfAppearance, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<JADSCNoticeOfAppearance, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<JADSCNoticeOfAppearance, String>)
					JADSCNoticeOfAppearance::setUuid);
			attributeSetterBiConsumers.put(
				"jadscNOAId",
				(BiConsumer<JADSCNoticeOfAppearance, Long>)
					JADSCNoticeOfAppearance::setJadscNOAId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<JADSCNoticeOfAppearance, Long>)
					JADSCNoticeOfAppearance::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<JADSCNoticeOfAppearance, Long>)
					JADSCNoticeOfAppearance::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<JADSCNoticeOfAppearance, Long>)
					JADSCNoticeOfAppearance::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<JADSCNoticeOfAppearance, String>)
					JADSCNoticeOfAppearance::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<JADSCNoticeOfAppearance, Date>)
					JADSCNoticeOfAppearance::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<JADSCNoticeOfAppearance, Date>)
					JADSCNoticeOfAppearance::setModifiedDate);
			attributeSetterBiConsumers.put(
				"fullName",
				(BiConsumer<JADSCNoticeOfAppearance, String>)
					JADSCNoticeOfAppearance::setFullName);
			attributeSetterBiConsumers.put(
				"addressOne",
				(BiConsumer<JADSCNoticeOfAppearance, String>)
					JADSCNoticeOfAppearance::setAddressOne);
			attributeSetterBiConsumers.put(
				"date",
				(BiConsumer<JADSCNoticeOfAppearance, Date>)
					JADSCNoticeOfAppearance::setDate);
			attributeSetterBiConsumers.put(
				"name",
				(BiConsumer<JADSCNoticeOfAppearance, String>)
					JADSCNoticeOfAppearance::setName);
			attributeSetterBiConsumers.put(
				"firm",
				(BiConsumer<JADSCNoticeOfAppearance, String>)
					JADSCNoticeOfAppearance::setFirm);
			attributeSetterBiConsumers.put(
				"address",
				(BiConsumer<JADSCNoticeOfAppearance, String>)
					JADSCNoticeOfAppearance::setAddress);
			attributeSetterBiConsumers.put(
				"telephone",
				(BiConsumer<JADSCNoticeOfAppearance, String>)
					JADSCNoticeOfAppearance::setTelephone);
			attributeSetterBiConsumers.put(
				"jadscApplicationId",
				(BiConsumer<JADSCNoticeOfAppearance, Long>)
					JADSCNoticeOfAppearance::setJadscApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getJadscNOAId() {
		return _jadscNOAId;
	}

	@Override
	public void setJadscNOAId(long jadscNOAId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jadscNOAId = jadscNOAId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullName = fullName;
	}

	@JSON
	@Override
	public String getAddressOne() {
		if (_addressOne == null) {
			return "";
		}
		else {
			return _addressOne;
		}
	}

	@Override
	public void setAddressOne(String addressOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressOne = addressOne;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getFirm() {
		if (_firm == null) {
			return "";
		}
		else {
			return _firm;
		}
	}

	@Override
	public void setFirm(String firm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firm = firm;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getTelephone() {
		if (_telephone == null) {
			return "";
		}
		else {
			return _telephone;
		}
	}

	@Override
	public void setTelephone(String telephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_telephone = telephone;
	}

	@JSON
	@Override
	public long getJadscApplicationId() {
		return _jadscApplicationId;
	}

	@Override
	public void setJadscApplicationId(long jadscApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jadscApplicationId = jadscApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalJadscApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("jadscApplicationId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(JADSCNoticeOfAppearance.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), JADSCNoticeOfAppearance.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JADSCNoticeOfAppearance toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, JADSCNoticeOfAppearance>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JADSCNoticeOfAppearanceImpl jadscNoticeOfAppearanceImpl =
			new JADSCNoticeOfAppearanceImpl();

		jadscNoticeOfAppearanceImpl.setUuid(getUuid());
		jadscNoticeOfAppearanceImpl.setJadscNOAId(getJadscNOAId());
		jadscNoticeOfAppearanceImpl.setGroupId(getGroupId());
		jadscNoticeOfAppearanceImpl.setCompanyId(getCompanyId());
		jadscNoticeOfAppearanceImpl.setUserId(getUserId());
		jadscNoticeOfAppearanceImpl.setUserName(getUserName());
		jadscNoticeOfAppearanceImpl.setCreateDate(getCreateDate());
		jadscNoticeOfAppearanceImpl.setModifiedDate(getModifiedDate());
		jadscNoticeOfAppearanceImpl.setFullName(getFullName());
		jadscNoticeOfAppearanceImpl.setAddressOne(getAddressOne());
		jadscNoticeOfAppearanceImpl.setDate(getDate());
		jadscNoticeOfAppearanceImpl.setName(getName());
		jadscNoticeOfAppearanceImpl.setFirm(getFirm());
		jadscNoticeOfAppearanceImpl.setAddress(getAddress());
		jadscNoticeOfAppearanceImpl.setTelephone(getTelephone());
		jadscNoticeOfAppearanceImpl.setJadscApplicationId(
			getJadscApplicationId());

		jadscNoticeOfAppearanceImpl.resetOriginalValues();

		return jadscNoticeOfAppearanceImpl;
	}

	@Override
	public JADSCNoticeOfAppearance cloneWithOriginalValues() {
		JADSCNoticeOfAppearanceImpl jadscNoticeOfAppearanceImpl =
			new JADSCNoticeOfAppearanceImpl();

		jadscNoticeOfAppearanceImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		jadscNoticeOfAppearanceImpl.setJadscNOAId(
			this.<Long>getColumnOriginalValue("jadscNOAId"));
		jadscNoticeOfAppearanceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		jadscNoticeOfAppearanceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		jadscNoticeOfAppearanceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		jadscNoticeOfAppearanceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		jadscNoticeOfAppearanceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		jadscNoticeOfAppearanceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		jadscNoticeOfAppearanceImpl.setFullName(
			this.<String>getColumnOriginalValue("fullName"));
		jadscNoticeOfAppearanceImpl.setAddressOne(
			this.<String>getColumnOriginalValue("addressOne"));
		jadscNoticeOfAppearanceImpl.setDate(
			this.<Date>getColumnOriginalValue("date_"));
		jadscNoticeOfAppearanceImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		jadscNoticeOfAppearanceImpl.setFirm(
			this.<String>getColumnOriginalValue("firm"));
		jadscNoticeOfAppearanceImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		jadscNoticeOfAppearanceImpl.setTelephone(
			this.<String>getColumnOriginalValue("telephone"));
		jadscNoticeOfAppearanceImpl.setJadscApplicationId(
			this.<Long>getColumnOriginalValue("jadscApplicationId"));

		return jadscNoticeOfAppearanceImpl;
	}

	@Override
	public int compareTo(JADSCNoticeOfAppearance jadscNoticeOfAppearance) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), jadscNoticeOfAppearance.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof JADSCNoticeOfAppearance)) {
			return false;
		}

		JADSCNoticeOfAppearance jadscNoticeOfAppearance =
			(JADSCNoticeOfAppearance)object;

		long primaryKey = jadscNoticeOfAppearance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<JADSCNoticeOfAppearance> toCacheModel() {
		JADSCNoticeOfAppearanceCacheModel jadscNoticeOfAppearanceCacheModel =
			new JADSCNoticeOfAppearanceCacheModel();

		jadscNoticeOfAppearanceCacheModel.uuid = getUuid();

		String uuid = jadscNoticeOfAppearanceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			jadscNoticeOfAppearanceCacheModel.uuid = null;
		}

		jadscNoticeOfAppearanceCacheModel.jadscNOAId = getJadscNOAId();

		jadscNoticeOfAppearanceCacheModel.groupId = getGroupId();

		jadscNoticeOfAppearanceCacheModel.companyId = getCompanyId();

		jadscNoticeOfAppearanceCacheModel.userId = getUserId();

		jadscNoticeOfAppearanceCacheModel.userName = getUserName();

		String userName = jadscNoticeOfAppearanceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jadscNoticeOfAppearanceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			jadscNoticeOfAppearanceCacheModel.createDate = createDate.getTime();
		}
		else {
			jadscNoticeOfAppearanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jadscNoticeOfAppearanceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			jadscNoticeOfAppearanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		jadscNoticeOfAppearanceCacheModel.fullName = getFullName();

		String fullName = jadscNoticeOfAppearanceCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			jadscNoticeOfAppearanceCacheModel.fullName = null;
		}

		jadscNoticeOfAppearanceCacheModel.addressOne = getAddressOne();

		String addressOne = jadscNoticeOfAppearanceCacheModel.addressOne;

		if ((addressOne != null) && (addressOne.length() == 0)) {
			jadscNoticeOfAppearanceCacheModel.addressOne = null;
		}

		Date date = getDate();

		if (date != null) {
			jadscNoticeOfAppearanceCacheModel.date = date.getTime();
		}
		else {
			jadscNoticeOfAppearanceCacheModel.date = Long.MIN_VALUE;
		}

		jadscNoticeOfAppearanceCacheModel.name = getName();

		String name = jadscNoticeOfAppearanceCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			jadscNoticeOfAppearanceCacheModel.name = null;
		}

		jadscNoticeOfAppearanceCacheModel.firm = getFirm();

		String firm = jadscNoticeOfAppearanceCacheModel.firm;

		if ((firm != null) && (firm.length() == 0)) {
			jadscNoticeOfAppearanceCacheModel.firm = null;
		}

		jadscNoticeOfAppearanceCacheModel.address = getAddress();

		String address = jadscNoticeOfAppearanceCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			jadscNoticeOfAppearanceCacheModel.address = null;
		}

		jadscNoticeOfAppearanceCacheModel.telephone = getTelephone();

		String telephone = jadscNoticeOfAppearanceCacheModel.telephone;

		if ((telephone != null) && (telephone.length() == 0)) {
			jadscNoticeOfAppearanceCacheModel.telephone = null;
		}

		jadscNoticeOfAppearanceCacheModel.jadscApplicationId =
			getJadscApplicationId();

		return jadscNoticeOfAppearanceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<JADSCNoticeOfAppearance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<JADSCNoticeOfAppearance, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JADSCNoticeOfAppearance, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(JADSCNoticeOfAppearance)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, JADSCNoticeOfAppearance>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						JADSCNoticeOfAppearance.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _jadscNOAId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _fullName;
	private String _addressOne;
	private Date _date;
	private String _name;
	private String _firm;
	private String _address;
	private String _telephone;
	private long _jadscApplicationId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<JADSCNoticeOfAppearance, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((JADSCNoticeOfAppearance)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("jadscNOAId", _jadscNOAId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("fullName", _fullName);
		_columnOriginalValues.put("addressOne", _addressOne);
		_columnOriginalValues.put("date_", _date);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("firm", _firm);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("telephone", _telephone);
		_columnOriginalValues.put("jadscApplicationId", _jadscApplicationId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("date_", "date");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("jadscNOAId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("fullName", 256L);

		columnBitmasks.put("addressOne", 512L);

		columnBitmasks.put("date_", 1024L);

		columnBitmasks.put("name", 2048L);

		columnBitmasks.put("firm", 4096L);

		columnBitmasks.put("address", 8192L);

		columnBitmasks.put("telephone", 16384L);

		columnBitmasks.put("jadscApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private JADSCNoticeOfAppearance _escapedModel;

}