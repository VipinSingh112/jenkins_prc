/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.QualityApplicantDetail;
import com.nbp.hsra.application.service.model.QualityApplicantDetailModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QualityApplicantDetail service. Represents a row in the &quot;nbp_hsra_quality_applicant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QualityApplicantDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QualityApplicantDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QualityApplicantDetailImpl
 * @generated
 */
@JSON(strict = true)
public class QualityApplicantDetailModelImpl
	extends BaseModelImpl<QualityApplicantDetail>
	implements QualityApplicantDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quality applicant detail model instance should use the <code>QualityApplicantDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_quality_applicant";

	public static final Object[][] TABLE_COLUMNS = {
		{"qualityApplicantDetailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"expertSurname", Types.VARCHAR},
		{"expertFirstName", Types.VARCHAR}, {"expertId", Types.VARCHAR},
		{"expertPosition", Types.VARCHAR}, {"expertTelephone", Types.VARCHAR},
		{"expertMobile", Types.VARCHAR}, {"expertEmail", Types.VARCHAR},
		{"expertDate", Types.TIMESTAMP}, {"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("qualityApplicantDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expertSurname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expertFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expertId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expertPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expertTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expertMobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expertEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expertDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_quality_applicant (qualityApplicantDetailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,expertSurname VARCHAR(75) null,expertFirstName VARCHAR(75) null,expertId VARCHAR(75) null,expertPosition VARCHAR(75) null,expertTelephone VARCHAR(75) null,expertMobile VARCHAR(75) null,expertEmail VARCHAR(75) null,expertDate DATE null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_quality_applicant";

	public static final String ORDER_BY_JPQL =
		" ORDER BY qualityApplicantDetail.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_quality_applicant.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public QualityApplicantDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _qualityApplicantDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQualityApplicantDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _qualityApplicantDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QualityApplicantDetail.class;
	}

	@Override
	public String getModelClassName() {
		return QualityApplicantDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QualityApplicantDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QualityApplicantDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QualityApplicantDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QualityApplicantDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QualityApplicantDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QualityApplicantDetail, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QualityApplicantDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QualityApplicantDetail, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QualityApplicantDetail, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<QualityApplicantDetail, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<QualityApplicantDetail, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<QualityApplicantDetail, Object>>();

			attributeGetterFunctions.put(
				"qualityApplicantDetailId",
				QualityApplicantDetail::getQualityApplicantDetailId);
			attributeGetterFunctions.put(
				"groupId", QualityApplicantDetail::getGroupId);
			attributeGetterFunctions.put(
				"companyId", QualityApplicantDetail::getCompanyId);
			attributeGetterFunctions.put(
				"userId", QualityApplicantDetail::getUserId);
			attributeGetterFunctions.put(
				"userName", QualityApplicantDetail::getUserName);
			attributeGetterFunctions.put(
				"createDate", QualityApplicantDetail::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", QualityApplicantDetail::getModifiedDate);
			attributeGetterFunctions.put(
				"expertSurname", QualityApplicantDetail::getExpertSurname);
			attributeGetterFunctions.put(
				"expertFirstName", QualityApplicantDetail::getExpertFirstName);
			attributeGetterFunctions.put(
				"expertId", QualityApplicantDetail::getExpertId);
			attributeGetterFunctions.put(
				"expertPosition", QualityApplicantDetail::getExpertPosition);
			attributeGetterFunctions.put(
				"expertTelephone", QualityApplicantDetail::getExpertTelephone);
			attributeGetterFunctions.put(
				"expertMobile", QualityApplicantDetail::getExpertMobile);
			attributeGetterFunctions.put(
				"expertEmail", QualityApplicantDetail::getExpertEmail);
			attributeGetterFunctions.put(
				"expertDate", QualityApplicantDetail::getExpertDate);
			attributeGetterFunctions.put(
				"hsraApplicationId",
				QualityApplicantDetail::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<QualityApplicantDetail, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<QualityApplicantDetail, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<QualityApplicantDetail, ?>>();

			attributeSetterBiConsumers.put(
				"qualityApplicantDetailId",
				(BiConsumer<QualityApplicantDetail, Long>)
					QualityApplicantDetail::setQualityApplicantDetailId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<QualityApplicantDetail, Long>)
					QualityApplicantDetail::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<QualityApplicantDetail, Long>)
					QualityApplicantDetail::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<QualityApplicantDetail, Long>)
					QualityApplicantDetail::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<QualityApplicantDetail, String>)
					QualityApplicantDetail::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<QualityApplicantDetail, Date>)
					QualityApplicantDetail::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<QualityApplicantDetail, Date>)
					QualityApplicantDetail::setModifiedDate);
			attributeSetterBiConsumers.put(
				"expertSurname",
				(BiConsumer<QualityApplicantDetail, String>)
					QualityApplicantDetail::setExpertSurname);
			attributeSetterBiConsumers.put(
				"expertFirstName",
				(BiConsumer<QualityApplicantDetail, String>)
					QualityApplicantDetail::setExpertFirstName);
			attributeSetterBiConsumers.put(
				"expertId",
				(BiConsumer<QualityApplicantDetail, String>)
					QualityApplicantDetail::setExpertId);
			attributeSetterBiConsumers.put(
				"expertPosition",
				(BiConsumer<QualityApplicantDetail, String>)
					QualityApplicantDetail::setExpertPosition);
			attributeSetterBiConsumers.put(
				"expertTelephone",
				(BiConsumer<QualityApplicantDetail, String>)
					QualityApplicantDetail::setExpertTelephone);
			attributeSetterBiConsumers.put(
				"expertMobile",
				(BiConsumer<QualityApplicantDetail, String>)
					QualityApplicantDetail::setExpertMobile);
			attributeSetterBiConsumers.put(
				"expertEmail",
				(BiConsumer<QualityApplicantDetail, String>)
					QualityApplicantDetail::setExpertEmail);
			attributeSetterBiConsumers.put(
				"expertDate",
				(BiConsumer<QualityApplicantDetail, Date>)
					QualityApplicantDetail::setExpertDate);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<QualityApplicantDetail, Long>)
					QualityApplicantDetail::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getQualityApplicantDetailId() {
		return _qualityApplicantDetailId;
	}

	@Override
	public void setQualityApplicantDetailId(long qualityApplicantDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualityApplicantDetailId = qualityApplicantDetailId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getExpertSurname() {
		if (_expertSurname == null) {
			return "";
		}
		else {
			return _expertSurname;
		}
	}

	@Override
	public void setExpertSurname(String expertSurname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expertSurname = expertSurname;
	}

	@JSON
	@Override
	public String getExpertFirstName() {
		if (_expertFirstName == null) {
			return "";
		}
		else {
			return _expertFirstName;
		}
	}

	@Override
	public void setExpertFirstName(String expertFirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expertFirstName = expertFirstName;
	}

	@JSON
	@Override
	public String getExpertId() {
		if (_expertId == null) {
			return "";
		}
		else {
			return _expertId;
		}
	}

	@Override
	public void setExpertId(String expertId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expertId = expertId;
	}

	@JSON
	@Override
	public String getExpertPosition() {
		if (_expertPosition == null) {
			return "";
		}
		else {
			return _expertPosition;
		}
	}

	@Override
	public void setExpertPosition(String expertPosition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expertPosition = expertPosition;
	}

	@JSON
	@Override
	public String getExpertTelephone() {
		if (_expertTelephone == null) {
			return "";
		}
		else {
			return _expertTelephone;
		}
	}

	@Override
	public void setExpertTelephone(String expertTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expertTelephone = expertTelephone;
	}

	@JSON
	@Override
	public String getExpertMobile() {
		if (_expertMobile == null) {
			return "";
		}
		else {
			return _expertMobile;
		}
	}

	@Override
	public void setExpertMobile(String expertMobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expertMobile = expertMobile;
	}

	@JSON
	@Override
	public String getExpertEmail() {
		if (_expertEmail == null) {
			return "";
		}
		else {
			return _expertEmail;
		}
	}

	@Override
	public void setExpertEmail(String expertEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expertEmail = expertEmail;
	}

	@JSON
	@Override
	public Date getExpertDate() {
		return _expertDate;
	}

	@Override
	public void setExpertDate(Date expertDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expertDate = expertDate;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), QualityApplicantDetail.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QualityApplicantDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QualityApplicantDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QualityApplicantDetailImpl qualityApplicantDetailImpl =
			new QualityApplicantDetailImpl();

		qualityApplicantDetailImpl.setQualityApplicantDetailId(
			getQualityApplicantDetailId());
		qualityApplicantDetailImpl.setGroupId(getGroupId());
		qualityApplicantDetailImpl.setCompanyId(getCompanyId());
		qualityApplicantDetailImpl.setUserId(getUserId());
		qualityApplicantDetailImpl.setUserName(getUserName());
		qualityApplicantDetailImpl.setCreateDate(getCreateDate());
		qualityApplicantDetailImpl.setModifiedDate(getModifiedDate());
		qualityApplicantDetailImpl.setExpertSurname(getExpertSurname());
		qualityApplicantDetailImpl.setExpertFirstName(getExpertFirstName());
		qualityApplicantDetailImpl.setExpertId(getExpertId());
		qualityApplicantDetailImpl.setExpertPosition(getExpertPosition());
		qualityApplicantDetailImpl.setExpertTelephone(getExpertTelephone());
		qualityApplicantDetailImpl.setExpertMobile(getExpertMobile());
		qualityApplicantDetailImpl.setExpertEmail(getExpertEmail());
		qualityApplicantDetailImpl.setExpertDate(getExpertDate());
		qualityApplicantDetailImpl.setHsraApplicationId(getHsraApplicationId());

		qualityApplicantDetailImpl.resetOriginalValues();

		return qualityApplicantDetailImpl;
	}

	@Override
	public QualityApplicantDetail cloneWithOriginalValues() {
		QualityApplicantDetailImpl qualityApplicantDetailImpl =
			new QualityApplicantDetailImpl();

		qualityApplicantDetailImpl.setQualityApplicantDetailId(
			this.<Long>getColumnOriginalValue("qualityApplicantDetailId"));
		qualityApplicantDetailImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		qualityApplicantDetailImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		qualityApplicantDetailImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		qualityApplicantDetailImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		qualityApplicantDetailImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		qualityApplicantDetailImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		qualityApplicantDetailImpl.setExpertSurname(
			this.<String>getColumnOriginalValue("expertSurname"));
		qualityApplicantDetailImpl.setExpertFirstName(
			this.<String>getColumnOriginalValue("expertFirstName"));
		qualityApplicantDetailImpl.setExpertId(
			this.<String>getColumnOriginalValue("expertId"));
		qualityApplicantDetailImpl.setExpertPosition(
			this.<String>getColumnOriginalValue("expertPosition"));
		qualityApplicantDetailImpl.setExpertTelephone(
			this.<String>getColumnOriginalValue("expertTelephone"));
		qualityApplicantDetailImpl.setExpertMobile(
			this.<String>getColumnOriginalValue("expertMobile"));
		qualityApplicantDetailImpl.setExpertEmail(
			this.<String>getColumnOriginalValue("expertEmail"));
		qualityApplicantDetailImpl.setExpertDate(
			this.<Date>getColumnOriginalValue("expertDate"));
		qualityApplicantDetailImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return qualityApplicantDetailImpl;
	}

	@Override
	public int compareTo(QualityApplicantDetail qualityApplicantDetail) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), qualityApplicantDetail.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QualityApplicantDetail)) {
			return false;
		}

		QualityApplicantDetail qualityApplicantDetail =
			(QualityApplicantDetail)object;

		long primaryKey = qualityApplicantDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QualityApplicantDetail> toCacheModel() {
		QualityApplicantDetailCacheModel qualityApplicantDetailCacheModel =
			new QualityApplicantDetailCacheModel();

		qualityApplicantDetailCacheModel.qualityApplicantDetailId =
			getQualityApplicantDetailId();

		qualityApplicantDetailCacheModel.groupId = getGroupId();

		qualityApplicantDetailCacheModel.companyId = getCompanyId();

		qualityApplicantDetailCacheModel.userId = getUserId();

		qualityApplicantDetailCacheModel.userName = getUserName();

		String userName = qualityApplicantDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			qualityApplicantDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			qualityApplicantDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			qualityApplicantDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			qualityApplicantDetailCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			qualityApplicantDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		qualityApplicantDetailCacheModel.expertSurname = getExpertSurname();

		String expertSurname = qualityApplicantDetailCacheModel.expertSurname;

		if ((expertSurname != null) && (expertSurname.length() == 0)) {
			qualityApplicantDetailCacheModel.expertSurname = null;
		}

		qualityApplicantDetailCacheModel.expertFirstName = getExpertFirstName();

		String expertFirstName =
			qualityApplicantDetailCacheModel.expertFirstName;

		if ((expertFirstName != null) && (expertFirstName.length() == 0)) {
			qualityApplicantDetailCacheModel.expertFirstName = null;
		}

		qualityApplicantDetailCacheModel.expertId = getExpertId();

		String expertId = qualityApplicantDetailCacheModel.expertId;

		if ((expertId != null) && (expertId.length() == 0)) {
			qualityApplicantDetailCacheModel.expertId = null;
		}

		qualityApplicantDetailCacheModel.expertPosition = getExpertPosition();

		String expertPosition = qualityApplicantDetailCacheModel.expertPosition;

		if ((expertPosition != null) && (expertPosition.length() == 0)) {
			qualityApplicantDetailCacheModel.expertPosition = null;
		}

		qualityApplicantDetailCacheModel.expertTelephone = getExpertTelephone();

		String expertTelephone =
			qualityApplicantDetailCacheModel.expertTelephone;

		if ((expertTelephone != null) && (expertTelephone.length() == 0)) {
			qualityApplicantDetailCacheModel.expertTelephone = null;
		}

		qualityApplicantDetailCacheModel.expertMobile = getExpertMobile();

		String expertMobile = qualityApplicantDetailCacheModel.expertMobile;

		if ((expertMobile != null) && (expertMobile.length() == 0)) {
			qualityApplicantDetailCacheModel.expertMobile = null;
		}

		qualityApplicantDetailCacheModel.expertEmail = getExpertEmail();

		String expertEmail = qualityApplicantDetailCacheModel.expertEmail;

		if ((expertEmail != null) && (expertEmail.length() == 0)) {
			qualityApplicantDetailCacheModel.expertEmail = null;
		}

		Date expertDate = getExpertDate();

		if (expertDate != null) {
			qualityApplicantDetailCacheModel.expertDate = expertDate.getTime();
		}
		else {
			qualityApplicantDetailCacheModel.expertDate = Long.MIN_VALUE;
		}

		qualityApplicantDetailCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return qualityApplicantDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QualityApplicantDetail, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QualityApplicantDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QualityApplicantDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(QualityApplicantDetail)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QualityApplicantDetail>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					QualityApplicantDetail.class, ModelWrapper.class);

	}

	private long _qualityApplicantDetailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _expertSurname;
	private String _expertFirstName;
	private String _expertId;
	private String _expertPosition;
	private String _expertTelephone;
	private String _expertMobile;
	private String _expertEmail;
	private Date _expertDate;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<QualityApplicantDetail, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QualityApplicantDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"qualityApplicantDetailId", _qualityApplicantDetailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("expertSurname", _expertSurname);
		_columnOriginalValues.put("expertFirstName", _expertFirstName);
		_columnOriginalValues.put("expertId", _expertId);
		_columnOriginalValues.put("expertPosition", _expertPosition);
		_columnOriginalValues.put("expertTelephone", _expertTelephone);
		_columnOriginalValues.put("expertMobile", _expertMobile);
		_columnOriginalValues.put("expertEmail", _expertEmail);
		_columnOriginalValues.put("expertDate", _expertDate);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("qualityApplicantDetailId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("expertSurname", 128L);

		columnBitmasks.put("expertFirstName", 256L);

		columnBitmasks.put("expertId", 512L);

		columnBitmasks.put("expertPosition", 1024L);

		columnBitmasks.put("expertTelephone", 2048L);

		columnBitmasks.put("expertMobile", 4096L);

		columnBitmasks.put("expertEmail", 8192L);

		columnBitmasks.put("expertDate", 16384L);

		columnBitmasks.put("hsraApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QualityApplicantDetail _escapedModel;

}