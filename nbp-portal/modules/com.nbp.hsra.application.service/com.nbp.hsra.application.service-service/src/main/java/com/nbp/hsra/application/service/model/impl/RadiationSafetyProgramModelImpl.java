/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.RadiationSafetyProgram;
import com.nbp.hsra.application.service.model.RadiationSafetyProgramModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RadiationSafetyProgram service. Represents a row in the &quot;nbp_hsra_safety_prog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RadiationSafetyProgramModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RadiationSafetyProgramImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RadiationSafetyProgramImpl
 * @generated
 */
@JSON(strict = true)
public class RadiationSafetyProgramModelImpl
	extends BaseModelImpl<RadiationSafetyProgram>
	implements RadiationSafetyProgramModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a radiation safety program model instance should use the <code>RadiationSafetyProgram</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_safety_prog";

	public static final Object[][] TABLE_COLUMNS = {
		{"radiationSafetyProgramId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"nuclearRsoName", Types.VARCHAR},
		{"nuclearRsoTitle", Types.VARCHAR}, {"nuclearRsoTeleNo", Types.VARCHAR},
		{"nuclearRsoExt", Types.VARCHAR}, {"nuclearRsoFax", Types.VARCHAR},
		{"nuclearRsoEmail", Types.VARCHAR}, {"rsoDetails", Types.VARCHAR},
		{"qualifiedExpertName", Types.VARCHAR},
		{"qualifiedExpertTitle", Types.VARCHAR},
		{"qualifiedExpertTele", Types.VARCHAR},
		{"qualifiedExpertExt", Types.VARCHAR},
		{"qualifiedExpertFax", Types.VARCHAR},
		{"qualifiedExpertEmail", Types.VARCHAR},
		{"qualifiedExpertRegstNo", Types.VARCHAR},
		{"qualifiedExpertDate", Types.TIMESTAMP},
		{"qualifiedDetails", Types.VARCHAR}, {"applicantName", Types.VARCHAR},
		{"applicantTitle", Types.VARCHAR},
		{"otherLimitationAuth", Types.VARCHAR}, {"otherDate", Types.TIMESTAMP},
		{"classifiWorkersList", Types.VARCHAR},
		{"respiPleaseSpecify", Types.VARCHAR},
		{"tongsPleaseSpecify", Types.VARCHAR},
		{"scopeOfActivities", Types.VARCHAR},
		{"managementSystem", Types.VARCHAR},
		{"workerRecordings", Types.VARCHAR},
		{"categoriesLicence", Types.VARCHAR},
		{"renewalsSummary", Types.VARCHAR},
		{"constraintsLimits", Types.VARCHAR},
		{"equipmentMonitoring", Types.VARCHAR}, {"areasControl", Types.VARCHAR},
		{"radioactiveSources", Types.VARCHAR},
		{"radiationiInstruments", Types.VARCHAR},
		{"healthWorkers", Types.VARCHAR}, {"investigationLevel", Types.VARCHAR},
		{"policyDetails", Types.VARCHAR}, {"securityAccess", Types.VARCHAR},
		{"raditionSources", Types.VARCHAR}, {"workerTraining", Types.VARCHAR},
		{"publicControl", Types.VARCHAR}, {"managementSources", Types.VARCHAR},
		{"emergencyProcedure", Types.VARCHAR},
		{"licenceLocation", Types.VARCHAR},
		{"achievableProgram", Types.VARCHAR},
		{"leakedTestingSources", Types.VARCHAR},
		{"transferSources", Types.VARCHAR}, {"nuclearMaterials", Types.VARCHAR},
		{"transportPackaging", Types.VARCHAR},
		{"internalReview", Types.VARCHAR}, {"sourcesActivities", Types.VARCHAR},
		{"individualProtectiveEquipment", Types.VARCHAR},
		{"ResProPleaseSpecify", Types.VARCHAR},
		{"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("radiationSafetyProgramId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nuclearRsoName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearRsoTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearRsoTeleNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearRsoExt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearRsoFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearRsoEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rsoDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedExpertName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedExpertTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedExpertTele", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedExpertExt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedExpertFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedExpertEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedExpertRegstNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedExpertDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("qualifiedDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherLimitationAuth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otherDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("classifiWorkersList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("respiPleaseSpecify", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tongsPleaseSpecify", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scopeOfActivities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managementSystem", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workerRecordings", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoriesLicence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renewalsSummary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("constraintsLimits", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentMonitoring", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areasControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radioactiveSources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radiationiInstruments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("healthWorkers", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("investigationLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("policyDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityAccess", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("raditionSources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workerTraining", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicControl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managementSources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyProcedure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenceLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("achievableProgram", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leakedTestingSources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transferSources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearMaterials", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transportPackaging", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("internalReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sourcesActivities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("individualProtectiveEquipment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ResProPleaseSpecify", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_safety_prog (radiationSafetyProgramId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nuclearRsoName VARCHAR(75) null,nuclearRsoTitle VARCHAR(75) null,nuclearRsoTeleNo VARCHAR(75) null,nuclearRsoExt VARCHAR(75) null,nuclearRsoFax VARCHAR(75) null,nuclearRsoEmail VARCHAR(75) null,rsoDetails VARCHAR(1000) null,qualifiedExpertName VARCHAR(75) null,qualifiedExpertTitle VARCHAR(75) null,qualifiedExpertTele VARCHAR(75) null,qualifiedExpertExt VARCHAR(75) null,qualifiedExpertFax VARCHAR(75) null,qualifiedExpertEmail VARCHAR(75) null,qualifiedExpertRegstNo VARCHAR(75) null,qualifiedExpertDate DATE null,qualifiedDetails VARCHAR(1000) null,applicantName VARCHAR(75) null,applicantTitle VARCHAR(75) null,otherLimitationAuth VARCHAR(75) null,otherDate DATE null,classifiWorkersList VARCHAR(500) null,respiPleaseSpecify VARCHAR(1000) null,tongsPleaseSpecify VARCHAR(1000) null,scopeOfActivities VARCHAR(1000) null,managementSystem VARCHAR(1000) null,workerRecordings VARCHAR(1000) null,categoriesLicence VARCHAR(1000) null,renewalsSummary VARCHAR(1000) null,constraintsLimits VARCHAR(1000) null,equipmentMonitoring VARCHAR(1000) null,areasControl VARCHAR(1000) null,radioactiveSources VARCHAR(1000) null,radiationiInstruments VARCHAR(1000) null,healthWorkers VARCHAR(1000) null,investigationLevel VARCHAR(1000) null,policyDetails VARCHAR(1000) null,securityAccess VARCHAR(1000) null,raditionSources VARCHAR(1000) null,workerTraining VARCHAR(1000) null,publicControl VARCHAR(1000) null,managementSources VARCHAR(1000) null,emergencyProcedure VARCHAR(1000) null,licenceLocation VARCHAR(1000) null,achievableProgram VARCHAR(1000) null,leakedTestingSources VARCHAR(1000) null,transferSources VARCHAR(1000) null,nuclearMaterials VARCHAR(1000) null,transportPackaging VARCHAR(1000) null,internalReview VARCHAR(1000) null,sourcesActivities VARCHAR(1000) null,individualProtectiveEquipment VARCHAR(1000) null,ResProPleaseSpecify VARCHAR(1000) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_safety_prog";

	public static final String ORDER_BY_JPQL =
		" ORDER BY radiationSafetyProgram.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_safety_prog.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RadiationSafetyProgramModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _radiationSafetyProgramId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRadiationSafetyProgramId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _radiationSafetyProgramId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RadiationSafetyProgram.class;
	}

	@Override
	public String getModelClassName() {
		return RadiationSafetyProgram.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RadiationSafetyProgram, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RadiationSafetyProgram, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RadiationSafetyProgram, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RadiationSafetyProgram)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RadiationSafetyProgram, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RadiationSafetyProgram, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RadiationSafetyProgram)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RadiationSafetyProgram, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RadiationSafetyProgram, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<RadiationSafetyProgram, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<RadiationSafetyProgram, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<RadiationSafetyProgram, Object>>();

			attributeGetterFunctions.put(
				"radiationSafetyProgramId",
				RadiationSafetyProgram::getRadiationSafetyProgramId);
			attributeGetterFunctions.put(
				"groupId", RadiationSafetyProgram::getGroupId);
			attributeGetterFunctions.put(
				"companyId", RadiationSafetyProgram::getCompanyId);
			attributeGetterFunctions.put(
				"userId", RadiationSafetyProgram::getUserId);
			attributeGetterFunctions.put(
				"userName", RadiationSafetyProgram::getUserName);
			attributeGetterFunctions.put(
				"createDate", RadiationSafetyProgram::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", RadiationSafetyProgram::getModifiedDate);
			attributeGetterFunctions.put(
				"nuclearRsoName", RadiationSafetyProgram::getNuclearRsoName);
			attributeGetterFunctions.put(
				"nuclearRsoTitle", RadiationSafetyProgram::getNuclearRsoTitle);
			attributeGetterFunctions.put(
				"nuclearRsoTeleNo",
				RadiationSafetyProgram::getNuclearRsoTeleNo);
			attributeGetterFunctions.put(
				"nuclearRsoExt", RadiationSafetyProgram::getNuclearRsoExt);
			attributeGetterFunctions.put(
				"nuclearRsoFax", RadiationSafetyProgram::getNuclearRsoFax);
			attributeGetterFunctions.put(
				"nuclearRsoEmail", RadiationSafetyProgram::getNuclearRsoEmail);
			attributeGetterFunctions.put(
				"rsoDetails", RadiationSafetyProgram::getRsoDetails);
			attributeGetterFunctions.put(
				"qualifiedExpertName",
				RadiationSafetyProgram::getQualifiedExpertName);
			attributeGetterFunctions.put(
				"qualifiedExpertTitle",
				RadiationSafetyProgram::getQualifiedExpertTitle);
			attributeGetterFunctions.put(
				"qualifiedExpertTele",
				RadiationSafetyProgram::getQualifiedExpertTele);
			attributeGetterFunctions.put(
				"qualifiedExpertExt",
				RadiationSafetyProgram::getQualifiedExpertExt);
			attributeGetterFunctions.put(
				"qualifiedExpertFax",
				RadiationSafetyProgram::getQualifiedExpertFax);
			attributeGetterFunctions.put(
				"qualifiedExpertEmail",
				RadiationSafetyProgram::getQualifiedExpertEmail);
			attributeGetterFunctions.put(
				"qualifiedExpertRegstNo",
				RadiationSafetyProgram::getQualifiedExpertRegstNo);
			attributeGetterFunctions.put(
				"qualifiedExpertDate",
				RadiationSafetyProgram::getQualifiedExpertDate);
			attributeGetterFunctions.put(
				"qualifiedDetails",
				RadiationSafetyProgram::getQualifiedDetails);
			attributeGetterFunctions.put(
				"applicantName", RadiationSafetyProgram::getApplicantName);
			attributeGetterFunctions.put(
				"applicantTitle", RadiationSafetyProgram::getApplicantTitle);
			attributeGetterFunctions.put(
				"otherLimitationAuth",
				RadiationSafetyProgram::getOtherLimitationAuth);
			attributeGetterFunctions.put(
				"otherDate", RadiationSafetyProgram::getOtherDate);
			attributeGetterFunctions.put(
				"classifiWorkersList",
				RadiationSafetyProgram::getClassifiWorkersList);
			attributeGetterFunctions.put(
				"respiPleaseSpecify",
				RadiationSafetyProgram::getRespiPleaseSpecify);
			attributeGetterFunctions.put(
				"tongsPleaseSpecify",
				RadiationSafetyProgram::getTongsPleaseSpecify);
			attributeGetterFunctions.put(
				"scopeOfActivities",
				RadiationSafetyProgram::getScopeOfActivities);
			attributeGetterFunctions.put(
				"managementSystem",
				RadiationSafetyProgram::getManagementSystem);
			attributeGetterFunctions.put(
				"workerRecordings",
				RadiationSafetyProgram::getWorkerRecordings);
			attributeGetterFunctions.put(
				"categoriesLicence",
				RadiationSafetyProgram::getCategoriesLicence);
			attributeGetterFunctions.put(
				"renewalsSummary", RadiationSafetyProgram::getRenewalsSummary);
			attributeGetterFunctions.put(
				"constraintsLimits",
				RadiationSafetyProgram::getConstraintsLimits);
			attributeGetterFunctions.put(
				"equipmentMonitoring",
				RadiationSafetyProgram::getEquipmentMonitoring);
			attributeGetterFunctions.put(
				"areasControl", RadiationSafetyProgram::getAreasControl);
			attributeGetterFunctions.put(
				"radioactiveSources",
				RadiationSafetyProgram::getRadioactiveSources);
			attributeGetterFunctions.put(
				"radiationiInstruments",
				RadiationSafetyProgram::getRadiationiInstruments);
			attributeGetterFunctions.put(
				"healthWorkers", RadiationSafetyProgram::getHealthWorkers);
			attributeGetterFunctions.put(
				"investigationLevel",
				RadiationSafetyProgram::getInvestigationLevel);
			attributeGetterFunctions.put(
				"policyDetails", RadiationSafetyProgram::getPolicyDetails);
			attributeGetterFunctions.put(
				"securityAccess", RadiationSafetyProgram::getSecurityAccess);
			attributeGetterFunctions.put(
				"raditionSources", RadiationSafetyProgram::getRaditionSources);
			attributeGetterFunctions.put(
				"workerTraining", RadiationSafetyProgram::getWorkerTraining);
			attributeGetterFunctions.put(
				"publicControl", RadiationSafetyProgram::getPublicControl);
			attributeGetterFunctions.put(
				"managementSources",
				RadiationSafetyProgram::getManagementSources);
			attributeGetterFunctions.put(
				"emergencyProcedure",
				RadiationSafetyProgram::getEmergencyProcedure);
			attributeGetterFunctions.put(
				"licenceLocation", RadiationSafetyProgram::getLicenceLocation);
			attributeGetterFunctions.put(
				"achievableProgram",
				RadiationSafetyProgram::getAchievableProgram);
			attributeGetterFunctions.put(
				"leakedTestingSources",
				RadiationSafetyProgram::getLeakedTestingSources);
			attributeGetterFunctions.put(
				"transferSources", RadiationSafetyProgram::getTransferSources);
			attributeGetterFunctions.put(
				"nuclearMaterials",
				RadiationSafetyProgram::getNuclearMaterials);
			attributeGetterFunctions.put(
				"transportPackaging",
				RadiationSafetyProgram::getTransportPackaging);
			attributeGetterFunctions.put(
				"internalReview", RadiationSafetyProgram::getInternalReview);
			attributeGetterFunctions.put(
				"sourcesActivities",
				RadiationSafetyProgram::getSourcesActivities);
			attributeGetterFunctions.put(
				"individualProtectiveEquipment",
				RadiationSafetyProgram::getIndividualProtectiveEquipment);
			attributeGetterFunctions.put(
				"ResProPleaseSpecify",
				RadiationSafetyProgram::getResProPleaseSpecify);
			attributeGetterFunctions.put(
				"hsraApplicationId",
				RadiationSafetyProgram::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<RadiationSafetyProgram, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<RadiationSafetyProgram, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<RadiationSafetyProgram, ?>>();

			attributeSetterBiConsumers.put(
				"radiationSafetyProgramId",
				(BiConsumer<RadiationSafetyProgram, Long>)
					RadiationSafetyProgram::setRadiationSafetyProgramId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<RadiationSafetyProgram, Long>)
					RadiationSafetyProgram::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<RadiationSafetyProgram, Long>)
					RadiationSafetyProgram::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<RadiationSafetyProgram, Long>)
					RadiationSafetyProgram::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<RadiationSafetyProgram, Date>)
					RadiationSafetyProgram::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<RadiationSafetyProgram, Date>)
					RadiationSafetyProgram::setModifiedDate);
			attributeSetterBiConsumers.put(
				"nuclearRsoName",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setNuclearRsoName);
			attributeSetterBiConsumers.put(
				"nuclearRsoTitle",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setNuclearRsoTitle);
			attributeSetterBiConsumers.put(
				"nuclearRsoTeleNo",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setNuclearRsoTeleNo);
			attributeSetterBiConsumers.put(
				"nuclearRsoExt",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setNuclearRsoExt);
			attributeSetterBiConsumers.put(
				"nuclearRsoFax",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setNuclearRsoFax);
			attributeSetterBiConsumers.put(
				"nuclearRsoEmail",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setNuclearRsoEmail);
			attributeSetterBiConsumers.put(
				"rsoDetails",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setRsoDetails);
			attributeSetterBiConsumers.put(
				"qualifiedExpertName",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setQualifiedExpertName);
			attributeSetterBiConsumers.put(
				"qualifiedExpertTitle",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setQualifiedExpertTitle);
			attributeSetterBiConsumers.put(
				"qualifiedExpertTele",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setQualifiedExpertTele);
			attributeSetterBiConsumers.put(
				"qualifiedExpertExt",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setQualifiedExpertExt);
			attributeSetterBiConsumers.put(
				"qualifiedExpertFax",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setQualifiedExpertFax);
			attributeSetterBiConsumers.put(
				"qualifiedExpertEmail",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setQualifiedExpertEmail);
			attributeSetterBiConsumers.put(
				"qualifiedExpertRegstNo",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setQualifiedExpertRegstNo);
			attributeSetterBiConsumers.put(
				"qualifiedExpertDate",
				(BiConsumer<RadiationSafetyProgram, Date>)
					RadiationSafetyProgram::setQualifiedExpertDate);
			attributeSetterBiConsumers.put(
				"qualifiedDetails",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setQualifiedDetails);
			attributeSetterBiConsumers.put(
				"applicantName",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setApplicantName);
			attributeSetterBiConsumers.put(
				"applicantTitle",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setApplicantTitle);
			attributeSetterBiConsumers.put(
				"otherLimitationAuth",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setOtherLimitationAuth);
			attributeSetterBiConsumers.put(
				"otherDate",
				(BiConsumer<RadiationSafetyProgram, Date>)
					RadiationSafetyProgram::setOtherDate);
			attributeSetterBiConsumers.put(
				"classifiWorkersList",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setClassifiWorkersList);
			attributeSetterBiConsumers.put(
				"respiPleaseSpecify",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setRespiPleaseSpecify);
			attributeSetterBiConsumers.put(
				"tongsPleaseSpecify",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setTongsPleaseSpecify);
			attributeSetterBiConsumers.put(
				"scopeOfActivities",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setScopeOfActivities);
			attributeSetterBiConsumers.put(
				"managementSystem",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setManagementSystem);
			attributeSetterBiConsumers.put(
				"workerRecordings",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setWorkerRecordings);
			attributeSetterBiConsumers.put(
				"categoriesLicence",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setCategoriesLicence);
			attributeSetterBiConsumers.put(
				"renewalsSummary",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setRenewalsSummary);
			attributeSetterBiConsumers.put(
				"constraintsLimits",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setConstraintsLimits);
			attributeSetterBiConsumers.put(
				"equipmentMonitoring",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setEquipmentMonitoring);
			attributeSetterBiConsumers.put(
				"areasControl",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setAreasControl);
			attributeSetterBiConsumers.put(
				"radioactiveSources",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setRadioactiveSources);
			attributeSetterBiConsumers.put(
				"radiationiInstruments",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setRadiationiInstruments);
			attributeSetterBiConsumers.put(
				"healthWorkers",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setHealthWorkers);
			attributeSetterBiConsumers.put(
				"investigationLevel",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setInvestigationLevel);
			attributeSetterBiConsumers.put(
				"policyDetails",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setPolicyDetails);
			attributeSetterBiConsumers.put(
				"securityAccess",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setSecurityAccess);
			attributeSetterBiConsumers.put(
				"raditionSources",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setRaditionSources);
			attributeSetterBiConsumers.put(
				"workerTraining",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setWorkerTraining);
			attributeSetterBiConsumers.put(
				"publicControl",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setPublicControl);
			attributeSetterBiConsumers.put(
				"managementSources",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setManagementSources);
			attributeSetterBiConsumers.put(
				"emergencyProcedure",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setEmergencyProcedure);
			attributeSetterBiConsumers.put(
				"licenceLocation",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setLicenceLocation);
			attributeSetterBiConsumers.put(
				"achievableProgram",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setAchievableProgram);
			attributeSetterBiConsumers.put(
				"leakedTestingSources",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setLeakedTestingSources);
			attributeSetterBiConsumers.put(
				"transferSources",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setTransferSources);
			attributeSetterBiConsumers.put(
				"nuclearMaterials",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setNuclearMaterials);
			attributeSetterBiConsumers.put(
				"transportPackaging",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setTransportPackaging);
			attributeSetterBiConsumers.put(
				"internalReview",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setInternalReview);
			attributeSetterBiConsumers.put(
				"sourcesActivities",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setSourcesActivities);
			attributeSetterBiConsumers.put(
				"individualProtectiveEquipment",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setIndividualProtectiveEquipment);
			attributeSetterBiConsumers.put(
				"ResProPleaseSpecify",
				(BiConsumer<RadiationSafetyProgram, String>)
					RadiationSafetyProgram::setResProPleaseSpecify);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<RadiationSafetyProgram, Long>)
					RadiationSafetyProgram::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getRadiationSafetyProgramId() {
		return _radiationSafetyProgramId;
	}

	@Override
	public void setRadiationSafetyProgramId(long radiationSafetyProgramId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationSafetyProgramId = radiationSafetyProgramId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNuclearRsoName() {
		if (_nuclearRsoName == null) {
			return "";
		}
		else {
			return _nuclearRsoName;
		}
	}

	@Override
	public void setNuclearRsoName(String nuclearRsoName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearRsoName = nuclearRsoName;
	}

	@JSON
	@Override
	public String getNuclearRsoTitle() {
		if (_nuclearRsoTitle == null) {
			return "";
		}
		else {
			return _nuclearRsoTitle;
		}
	}

	@Override
	public void setNuclearRsoTitle(String nuclearRsoTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearRsoTitle = nuclearRsoTitle;
	}

	@JSON
	@Override
	public String getNuclearRsoTeleNo() {
		if (_nuclearRsoTeleNo == null) {
			return "";
		}
		else {
			return _nuclearRsoTeleNo;
		}
	}

	@Override
	public void setNuclearRsoTeleNo(String nuclearRsoTeleNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearRsoTeleNo = nuclearRsoTeleNo;
	}

	@JSON
	@Override
	public String getNuclearRsoExt() {
		if (_nuclearRsoExt == null) {
			return "";
		}
		else {
			return _nuclearRsoExt;
		}
	}

	@Override
	public void setNuclearRsoExt(String nuclearRsoExt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearRsoExt = nuclearRsoExt;
	}

	@JSON
	@Override
	public String getNuclearRsoFax() {
		if (_nuclearRsoFax == null) {
			return "";
		}
		else {
			return _nuclearRsoFax;
		}
	}

	@Override
	public void setNuclearRsoFax(String nuclearRsoFax) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearRsoFax = nuclearRsoFax;
	}

	@JSON
	@Override
	public String getNuclearRsoEmail() {
		if (_nuclearRsoEmail == null) {
			return "";
		}
		else {
			return _nuclearRsoEmail;
		}
	}

	@Override
	public void setNuclearRsoEmail(String nuclearRsoEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearRsoEmail = nuclearRsoEmail;
	}

	@JSON
	@Override
	public String getRsoDetails() {
		if (_rsoDetails == null) {
			return "";
		}
		else {
			return _rsoDetails;
		}
	}

	@Override
	public void setRsoDetails(String rsoDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rsoDetails = rsoDetails;
	}

	@JSON
	@Override
	public String getQualifiedExpertName() {
		if (_qualifiedExpertName == null) {
			return "";
		}
		else {
			return _qualifiedExpertName;
		}
	}

	@Override
	public void setQualifiedExpertName(String qualifiedExpertName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedExpertName = qualifiedExpertName;
	}

	@JSON
	@Override
	public String getQualifiedExpertTitle() {
		if (_qualifiedExpertTitle == null) {
			return "";
		}
		else {
			return _qualifiedExpertTitle;
		}
	}

	@Override
	public void setQualifiedExpertTitle(String qualifiedExpertTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedExpertTitle = qualifiedExpertTitle;
	}

	@JSON
	@Override
	public String getQualifiedExpertTele() {
		if (_qualifiedExpertTele == null) {
			return "";
		}
		else {
			return _qualifiedExpertTele;
		}
	}

	@Override
	public void setQualifiedExpertTele(String qualifiedExpertTele) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedExpertTele = qualifiedExpertTele;
	}

	@JSON
	@Override
	public String getQualifiedExpertExt() {
		if (_qualifiedExpertExt == null) {
			return "";
		}
		else {
			return _qualifiedExpertExt;
		}
	}

	@Override
	public void setQualifiedExpertExt(String qualifiedExpertExt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedExpertExt = qualifiedExpertExt;
	}

	@JSON
	@Override
	public String getQualifiedExpertFax() {
		if (_qualifiedExpertFax == null) {
			return "";
		}
		else {
			return _qualifiedExpertFax;
		}
	}

	@Override
	public void setQualifiedExpertFax(String qualifiedExpertFax) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedExpertFax = qualifiedExpertFax;
	}

	@JSON
	@Override
	public String getQualifiedExpertEmail() {
		if (_qualifiedExpertEmail == null) {
			return "";
		}
		else {
			return _qualifiedExpertEmail;
		}
	}

	@Override
	public void setQualifiedExpertEmail(String qualifiedExpertEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedExpertEmail = qualifiedExpertEmail;
	}

	@JSON
	@Override
	public String getQualifiedExpertRegstNo() {
		if (_qualifiedExpertRegstNo == null) {
			return "";
		}
		else {
			return _qualifiedExpertRegstNo;
		}
	}

	@Override
	public void setQualifiedExpertRegstNo(String qualifiedExpertRegstNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedExpertRegstNo = qualifiedExpertRegstNo;
	}

	@JSON
	@Override
	public Date getQualifiedExpertDate() {
		return _qualifiedExpertDate;
	}

	@Override
	public void setQualifiedExpertDate(Date qualifiedExpertDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedExpertDate = qualifiedExpertDate;
	}

	@JSON
	@Override
	public String getQualifiedDetails() {
		if (_qualifiedDetails == null) {
			return "";
		}
		else {
			return _qualifiedDetails;
		}
	}

	@Override
	public void setQualifiedDetails(String qualifiedDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedDetails = qualifiedDetails;
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getApplicantTitle() {
		if (_applicantTitle == null) {
			return "";
		}
		else {
			return _applicantTitle;
		}
	}

	@Override
	public void setApplicantTitle(String applicantTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantTitle = applicantTitle;
	}

	@JSON
	@Override
	public String getOtherLimitationAuth() {
		if (_otherLimitationAuth == null) {
			return "";
		}
		else {
			return _otherLimitationAuth;
		}
	}

	@Override
	public void setOtherLimitationAuth(String otherLimitationAuth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherLimitationAuth = otherLimitationAuth;
	}

	@JSON
	@Override
	public Date getOtherDate() {
		return _otherDate;
	}

	@Override
	public void setOtherDate(Date otherDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherDate = otherDate;
	}

	@JSON
	@Override
	public String getClassifiWorkersList() {
		if (_classifiWorkersList == null) {
			return "";
		}
		else {
			return _classifiWorkersList;
		}
	}

	@Override
	public void setClassifiWorkersList(String classifiWorkersList) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classifiWorkersList = classifiWorkersList;
	}

	@JSON
	@Override
	public String getRespiPleaseSpecify() {
		if (_respiPleaseSpecify == null) {
			return "";
		}
		else {
			return _respiPleaseSpecify;
		}
	}

	@Override
	public void setRespiPleaseSpecify(String respiPleaseSpecify) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_respiPleaseSpecify = respiPleaseSpecify;
	}

	@JSON
	@Override
	public String getTongsPleaseSpecify() {
		if (_tongsPleaseSpecify == null) {
			return "";
		}
		else {
			return _tongsPleaseSpecify;
		}
	}

	@Override
	public void setTongsPleaseSpecify(String tongsPleaseSpecify) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tongsPleaseSpecify = tongsPleaseSpecify;
	}

	@JSON
	@Override
	public String getScopeOfActivities() {
		if (_scopeOfActivities == null) {
			return "";
		}
		else {
			return _scopeOfActivities;
		}
	}

	@Override
	public void setScopeOfActivities(String scopeOfActivities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scopeOfActivities = scopeOfActivities;
	}

	@JSON
	@Override
	public String getManagementSystem() {
		if (_managementSystem == null) {
			return "";
		}
		else {
			return _managementSystem;
		}
	}

	@Override
	public void setManagementSystem(String managementSystem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managementSystem = managementSystem;
	}

	@JSON
	@Override
	public String getWorkerRecordings() {
		if (_workerRecordings == null) {
			return "";
		}
		else {
			return _workerRecordings;
		}
	}

	@Override
	public void setWorkerRecordings(String workerRecordings) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workerRecordings = workerRecordings;
	}

	@JSON
	@Override
	public String getCategoriesLicence() {
		if (_categoriesLicence == null) {
			return "";
		}
		else {
			return _categoriesLicence;
		}
	}

	@Override
	public void setCategoriesLicence(String categoriesLicence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoriesLicence = categoriesLicence;
	}

	@JSON
	@Override
	public String getRenewalsSummary() {
		if (_renewalsSummary == null) {
			return "";
		}
		else {
			return _renewalsSummary;
		}
	}

	@Override
	public void setRenewalsSummary(String renewalsSummary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renewalsSummary = renewalsSummary;
	}

	@JSON
	@Override
	public String getConstraintsLimits() {
		if (_constraintsLimits == null) {
			return "";
		}
		else {
			return _constraintsLimits;
		}
	}

	@Override
	public void setConstraintsLimits(String constraintsLimits) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_constraintsLimits = constraintsLimits;
	}

	@JSON
	@Override
	public String getEquipmentMonitoring() {
		if (_equipmentMonitoring == null) {
			return "";
		}
		else {
			return _equipmentMonitoring;
		}
	}

	@Override
	public void setEquipmentMonitoring(String equipmentMonitoring) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentMonitoring = equipmentMonitoring;
	}

	@JSON
	@Override
	public String getAreasControl() {
		if (_areasControl == null) {
			return "";
		}
		else {
			return _areasControl;
		}
	}

	@Override
	public void setAreasControl(String areasControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_areasControl = areasControl;
	}

	@JSON
	@Override
	public String getRadioactiveSources() {
		if (_radioactiveSources == null) {
			return "";
		}
		else {
			return _radioactiveSources;
		}
	}

	@Override
	public void setRadioactiveSources(String radioactiveSources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radioactiveSources = radioactiveSources;
	}

	@JSON
	@Override
	public String getRadiationiInstruments() {
		if (_radiationiInstruments == null) {
			return "";
		}
		else {
			return _radiationiInstruments;
		}
	}

	@Override
	public void setRadiationiInstruments(String radiationiInstruments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationiInstruments = radiationiInstruments;
	}

	@JSON
	@Override
	public String getHealthWorkers() {
		if (_healthWorkers == null) {
			return "";
		}
		else {
			return _healthWorkers;
		}
	}

	@Override
	public void setHealthWorkers(String healthWorkers) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_healthWorkers = healthWorkers;
	}

	@JSON
	@Override
	public String getInvestigationLevel() {
		if (_investigationLevel == null) {
			return "";
		}
		else {
			return _investigationLevel;
		}
	}

	@Override
	public void setInvestigationLevel(String investigationLevel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_investigationLevel = investigationLevel;
	}

	@JSON
	@Override
	public String getPolicyDetails() {
		if (_policyDetails == null) {
			return "";
		}
		else {
			return _policyDetails;
		}
	}

	@Override
	public void setPolicyDetails(String policyDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyDetails = policyDetails;
	}

	@JSON
	@Override
	public String getSecurityAccess() {
		if (_securityAccess == null) {
			return "";
		}
		else {
			return _securityAccess;
		}
	}

	@Override
	public void setSecurityAccess(String securityAccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityAccess = securityAccess;
	}

	@JSON
	@Override
	public String getRaditionSources() {
		if (_raditionSources == null) {
			return "";
		}
		else {
			return _raditionSources;
		}
	}

	@Override
	public void setRaditionSources(String raditionSources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_raditionSources = raditionSources;
	}

	@JSON
	@Override
	public String getWorkerTraining() {
		if (_workerTraining == null) {
			return "";
		}
		else {
			return _workerTraining;
		}
	}

	@Override
	public void setWorkerTraining(String workerTraining) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workerTraining = workerTraining;
	}

	@JSON
	@Override
	public String getPublicControl() {
		if (_publicControl == null) {
			return "";
		}
		else {
			return _publicControl;
		}
	}

	@Override
	public void setPublicControl(String publicControl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publicControl = publicControl;
	}

	@JSON
	@Override
	public String getManagementSources() {
		if (_managementSources == null) {
			return "";
		}
		else {
			return _managementSources;
		}
	}

	@Override
	public void setManagementSources(String managementSources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managementSources = managementSources;
	}

	@JSON
	@Override
	public String getEmergencyProcedure() {
		if (_emergencyProcedure == null) {
			return "";
		}
		else {
			return _emergencyProcedure;
		}
	}

	@Override
	public void setEmergencyProcedure(String emergencyProcedure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyProcedure = emergencyProcedure;
	}

	@JSON
	@Override
	public String getLicenceLocation() {
		if (_licenceLocation == null) {
			return "";
		}
		else {
			return _licenceLocation;
		}
	}

	@Override
	public void setLicenceLocation(String licenceLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenceLocation = licenceLocation;
	}

	@JSON
	@Override
	public String getAchievableProgram() {
		if (_achievableProgram == null) {
			return "";
		}
		else {
			return _achievableProgram;
		}
	}

	@Override
	public void setAchievableProgram(String achievableProgram) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_achievableProgram = achievableProgram;
	}

	@JSON
	@Override
	public String getLeakedTestingSources() {
		if (_leakedTestingSources == null) {
			return "";
		}
		else {
			return _leakedTestingSources;
		}
	}

	@Override
	public void setLeakedTestingSources(String leakedTestingSources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leakedTestingSources = leakedTestingSources;
	}

	@JSON
	@Override
	public String getTransferSources() {
		if (_transferSources == null) {
			return "";
		}
		else {
			return _transferSources;
		}
	}

	@Override
	public void setTransferSources(String transferSources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transferSources = transferSources;
	}

	@JSON
	@Override
	public String getNuclearMaterials() {
		if (_nuclearMaterials == null) {
			return "";
		}
		else {
			return _nuclearMaterials;
		}
	}

	@Override
	public void setNuclearMaterials(String nuclearMaterials) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearMaterials = nuclearMaterials;
	}

	@JSON
	@Override
	public String getTransportPackaging() {
		if (_transportPackaging == null) {
			return "";
		}
		else {
			return _transportPackaging;
		}
	}

	@Override
	public void setTransportPackaging(String transportPackaging) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transportPackaging = transportPackaging;
	}

	@JSON
	@Override
	public String getInternalReview() {
		if (_internalReview == null) {
			return "";
		}
		else {
			return _internalReview;
		}
	}

	@Override
	public void setInternalReview(String internalReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_internalReview = internalReview;
	}

	@JSON
	@Override
	public String getSourcesActivities() {
		if (_sourcesActivities == null) {
			return "";
		}
		else {
			return _sourcesActivities;
		}
	}

	@Override
	public void setSourcesActivities(String sourcesActivities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sourcesActivities = sourcesActivities;
	}

	@JSON
	@Override
	public String getIndividualProtectiveEquipment() {
		if (_individualProtectiveEquipment == null) {
			return "";
		}
		else {
			return _individualProtectiveEquipment;
		}
	}

	@Override
	public void setIndividualProtectiveEquipment(
		String individualProtectiveEquipment) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_individualProtectiveEquipment = individualProtectiveEquipment;
	}

	@JSON
	@Override
	public String getResProPleaseSpecify() {
		if (_ResProPleaseSpecify == null) {
			return "";
		}
		else {
			return _ResProPleaseSpecify;
		}
	}

	@Override
	public void setResProPleaseSpecify(String ResProPleaseSpecify) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ResProPleaseSpecify = ResProPleaseSpecify;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RadiationSafetyProgram.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RadiationSafetyProgram toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RadiationSafetyProgram>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RadiationSafetyProgramImpl radiationSafetyProgramImpl =
			new RadiationSafetyProgramImpl();

		radiationSafetyProgramImpl.setRadiationSafetyProgramId(
			getRadiationSafetyProgramId());
		radiationSafetyProgramImpl.setGroupId(getGroupId());
		radiationSafetyProgramImpl.setCompanyId(getCompanyId());
		radiationSafetyProgramImpl.setUserId(getUserId());
		radiationSafetyProgramImpl.setUserName(getUserName());
		radiationSafetyProgramImpl.setCreateDate(getCreateDate());
		radiationSafetyProgramImpl.setModifiedDate(getModifiedDate());
		radiationSafetyProgramImpl.setNuclearRsoName(getNuclearRsoName());
		radiationSafetyProgramImpl.setNuclearRsoTitle(getNuclearRsoTitle());
		radiationSafetyProgramImpl.setNuclearRsoTeleNo(getNuclearRsoTeleNo());
		radiationSafetyProgramImpl.setNuclearRsoExt(getNuclearRsoExt());
		radiationSafetyProgramImpl.setNuclearRsoFax(getNuclearRsoFax());
		radiationSafetyProgramImpl.setNuclearRsoEmail(getNuclearRsoEmail());
		radiationSafetyProgramImpl.setRsoDetails(getRsoDetails());
		radiationSafetyProgramImpl.setQualifiedExpertName(
			getQualifiedExpertName());
		radiationSafetyProgramImpl.setQualifiedExpertTitle(
			getQualifiedExpertTitle());
		radiationSafetyProgramImpl.setQualifiedExpertTele(
			getQualifiedExpertTele());
		radiationSafetyProgramImpl.setQualifiedExpertExt(
			getQualifiedExpertExt());
		radiationSafetyProgramImpl.setQualifiedExpertFax(
			getQualifiedExpertFax());
		radiationSafetyProgramImpl.setQualifiedExpertEmail(
			getQualifiedExpertEmail());
		radiationSafetyProgramImpl.setQualifiedExpertRegstNo(
			getQualifiedExpertRegstNo());
		radiationSafetyProgramImpl.setQualifiedExpertDate(
			getQualifiedExpertDate());
		radiationSafetyProgramImpl.setQualifiedDetails(getQualifiedDetails());
		radiationSafetyProgramImpl.setApplicantName(getApplicantName());
		radiationSafetyProgramImpl.setApplicantTitle(getApplicantTitle());
		radiationSafetyProgramImpl.setOtherLimitationAuth(
			getOtherLimitationAuth());
		radiationSafetyProgramImpl.setOtherDate(getOtherDate());
		radiationSafetyProgramImpl.setClassifiWorkersList(
			getClassifiWorkersList());
		radiationSafetyProgramImpl.setRespiPleaseSpecify(
			getRespiPleaseSpecify());
		radiationSafetyProgramImpl.setTongsPleaseSpecify(
			getTongsPleaseSpecify());
		radiationSafetyProgramImpl.setScopeOfActivities(getScopeOfActivities());
		radiationSafetyProgramImpl.setManagementSystem(getManagementSystem());
		radiationSafetyProgramImpl.setWorkerRecordings(getWorkerRecordings());
		radiationSafetyProgramImpl.setCategoriesLicence(getCategoriesLicence());
		radiationSafetyProgramImpl.setRenewalsSummary(getRenewalsSummary());
		radiationSafetyProgramImpl.setConstraintsLimits(getConstraintsLimits());
		radiationSafetyProgramImpl.setEquipmentMonitoring(
			getEquipmentMonitoring());
		radiationSafetyProgramImpl.setAreasControl(getAreasControl());
		radiationSafetyProgramImpl.setRadioactiveSources(
			getRadioactiveSources());
		radiationSafetyProgramImpl.setRadiationiInstruments(
			getRadiationiInstruments());
		radiationSafetyProgramImpl.setHealthWorkers(getHealthWorkers());
		radiationSafetyProgramImpl.setInvestigationLevel(
			getInvestigationLevel());
		radiationSafetyProgramImpl.setPolicyDetails(getPolicyDetails());
		radiationSafetyProgramImpl.setSecurityAccess(getSecurityAccess());
		radiationSafetyProgramImpl.setRaditionSources(getRaditionSources());
		radiationSafetyProgramImpl.setWorkerTraining(getWorkerTraining());
		radiationSafetyProgramImpl.setPublicControl(getPublicControl());
		radiationSafetyProgramImpl.setManagementSources(getManagementSources());
		radiationSafetyProgramImpl.setEmergencyProcedure(
			getEmergencyProcedure());
		radiationSafetyProgramImpl.setLicenceLocation(getLicenceLocation());
		radiationSafetyProgramImpl.setAchievableProgram(getAchievableProgram());
		radiationSafetyProgramImpl.setLeakedTestingSources(
			getLeakedTestingSources());
		radiationSafetyProgramImpl.setTransferSources(getTransferSources());
		radiationSafetyProgramImpl.setNuclearMaterials(getNuclearMaterials());
		radiationSafetyProgramImpl.setTransportPackaging(
			getTransportPackaging());
		radiationSafetyProgramImpl.setInternalReview(getInternalReview());
		radiationSafetyProgramImpl.setSourcesActivities(getSourcesActivities());
		radiationSafetyProgramImpl.setIndividualProtectiveEquipment(
			getIndividualProtectiveEquipment());
		radiationSafetyProgramImpl.setResProPleaseSpecify(
			getResProPleaseSpecify());
		radiationSafetyProgramImpl.setHsraApplicationId(getHsraApplicationId());

		radiationSafetyProgramImpl.resetOriginalValues();

		return radiationSafetyProgramImpl;
	}

	@Override
	public RadiationSafetyProgram cloneWithOriginalValues() {
		RadiationSafetyProgramImpl radiationSafetyProgramImpl =
			new RadiationSafetyProgramImpl();

		radiationSafetyProgramImpl.setRadiationSafetyProgramId(
			this.<Long>getColumnOriginalValue("radiationSafetyProgramId"));
		radiationSafetyProgramImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		radiationSafetyProgramImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		radiationSafetyProgramImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		radiationSafetyProgramImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		radiationSafetyProgramImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		radiationSafetyProgramImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		radiationSafetyProgramImpl.setNuclearRsoName(
			this.<String>getColumnOriginalValue("nuclearRsoName"));
		radiationSafetyProgramImpl.setNuclearRsoTitle(
			this.<String>getColumnOriginalValue("nuclearRsoTitle"));
		radiationSafetyProgramImpl.setNuclearRsoTeleNo(
			this.<String>getColumnOriginalValue("nuclearRsoTeleNo"));
		radiationSafetyProgramImpl.setNuclearRsoExt(
			this.<String>getColumnOriginalValue("nuclearRsoExt"));
		radiationSafetyProgramImpl.setNuclearRsoFax(
			this.<String>getColumnOriginalValue("nuclearRsoFax"));
		radiationSafetyProgramImpl.setNuclearRsoEmail(
			this.<String>getColumnOriginalValue("nuclearRsoEmail"));
		radiationSafetyProgramImpl.setRsoDetails(
			this.<String>getColumnOriginalValue("rsoDetails"));
		radiationSafetyProgramImpl.setQualifiedExpertName(
			this.<String>getColumnOriginalValue("qualifiedExpertName"));
		radiationSafetyProgramImpl.setQualifiedExpertTitle(
			this.<String>getColumnOriginalValue("qualifiedExpertTitle"));
		radiationSafetyProgramImpl.setQualifiedExpertTele(
			this.<String>getColumnOriginalValue("qualifiedExpertTele"));
		radiationSafetyProgramImpl.setQualifiedExpertExt(
			this.<String>getColumnOriginalValue("qualifiedExpertExt"));
		radiationSafetyProgramImpl.setQualifiedExpertFax(
			this.<String>getColumnOriginalValue("qualifiedExpertFax"));
		radiationSafetyProgramImpl.setQualifiedExpertEmail(
			this.<String>getColumnOriginalValue("qualifiedExpertEmail"));
		radiationSafetyProgramImpl.setQualifiedExpertRegstNo(
			this.<String>getColumnOriginalValue("qualifiedExpertRegstNo"));
		radiationSafetyProgramImpl.setQualifiedExpertDate(
			this.<Date>getColumnOriginalValue("qualifiedExpertDate"));
		radiationSafetyProgramImpl.setQualifiedDetails(
			this.<String>getColumnOriginalValue("qualifiedDetails"));
		radiationSafetyProgramImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		radiationSafetyProgramImpl.setApplicantTitle(
			this.<String>getColumnOriginalValue("applicantTitle"));
		radiationSafetyProgramImpl.setOtherLimitationAuth(
			this.<String>getColumnOriginalValue("otherLimitationAuth"));
		radiationSafetyProgramImpl.setOtherDate(
			this.<Date>getColumnOriginalValue("otherDate"));
		radiationSafetyProgramImpl.setClassifiWorkersList(
			this.<String>getColumnOriginalValue("classifiWorkersList"));
		radiationSafetyProgramImpl.setRespiPleaseSpecify(
			this.<String>getColumnOriginalValue("respiPleaseSpecify"));
		radiationSafetyProgramImpl.setTongsPleaseSpecify(
			this.<String>getColumnOriginalValue("tongsPleaseSpecify"));
		radiationSafetyProgramImpl.setScopeOfActivities(
			this.<String>getColumnOriginalValue("scopeOfActivities"));
		radiationSafetyProgramImpl.setManagementSystem(
			this.<String>getColumnOriginalValue("managementSystem"));
		radiationSafetyProgramImpl.setWorkerRecordings(
			this.<String>getColumnOriginalValue("workerRecordings"));
		radiationSafetyProgramImpl.setCategoriesLicence(
			this.<String>getColumnOriginalValue("categoriesLicence"));
		radiationSafetyProgramImpl.setRenewalsSummary(
			this.<String>getColumnOriginalValue("renewalsSummary"));
		radiationSafetyProgramImpl.setConstraintsLimits(
			this.<String>getColumnOriginalValue("constraintsLimits"));
		radiationSafetyProgramImpl.setEquipmentMonitoring(
			this.<String>getColumnOriginalValue("equipmentMonitoring"));
		radiationSafetyProgramImpl.setAreasControl(
			this.<String>getColumnOriginalValue("areasControl"));
		radiationSafetyProgramImpl.setRadioactiveSources(
			this.<String>getColumnOriginalValue("radioactiveSources"));
		radiationSafetyProgramImpl.setRadiationiInstruments(
			this.<String>getColumnOriginalValue("radiationiInstruments"));
		radiationSafetyProgramImpl.setHealthWorkers(
			this.<String>getColumnOriginalValue("healthWorkers"));
		radiationSafetyProgramImpl.setInvestigationLevel(
			this.<String>getColumnOriginalValue("investigationLevel"));
		radiationSafetyProgramImpl.setPolicyDetails(
			this.<String>getColumnOriginalValue("policyDetails"));
		radiationSafetyProgramImpl.setSecurityAccess(
			this.<String>getColumnOriginalValue("securityAccess"));
		radiationSafetyProgramImpl.setRaditionSources(
			this.<String>getColumnOriginalValue("raditionSources"));
		radiationSafetyProgramImpl.setWorkerTraining(
			this.<String>getColumnOriginalValue("workerTraining"));
		radiationSafetyProgramImpl.setPublicControl(
			this.<String>getColumnOriginalValue("publicControl"));
		radiationSafetyProgramImpl.setManagementSources(
			this.<String>getColumnOriginalValue("managementSources"));
		radiationSafetyProgramImpl.setEmergencyProcedure(
			this.<String>getColumnOriginalValue("emergencyProcedure"));
		radiationSafetyProgramImpl.setLicenceLocation(
			this.<String>getColumnOriginalValue("licenceLocation"));
		radiationSafetyProgramImpl.setAchievableProgram(
			this.<String>getColumnOriginalValue("achievableProgram"));
		radiationSafetyProgramImpl.setLeakedTestingSources(
			this.<String>getColumnOriginalValue("leakedTestingSources"));
		radiationSafetyProgramImpl.setTransferSources(
			this.<String>getColumnOriginalValue("transferSources"));
		radiationSafetyProgramImpl.setNuclearMaterials(
			this.<String>getColumnOriginalValue("nuclearMaterials"));
		radiationSafetyProgramImpl.setTransportPackaging(
			this.<String>getColumnOriginalValue("transportPackaging"));
		radiationSafetyProgramImpl.setInternalReview(
			this.<String>getColumnOriginalValue("internalReview"));
		radiationSafetyProgramImpl.setSourcesActivities(
			this.<String>getColumnOriginalValue("sourcesActivities"));
		radiationSafetyProgramImpl.setIndividualProtectiveEquipment(
			this.<String>getColumnOriginalValue(
				"individualProtectiveEquipment"));
		radiationSafetyProgramImpl.setResProPleaseSpecify(
			this.<String>getColumnOriginalValue("ResProPleaseSpecify"));
		radiationSafetyProgramImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return radiationSafetyProgramImpl;
	}

	@Override
	public int compareTo(RadiationSafetyProgram radiationSafetyProgram) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), radiationSafetyProgram.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RadiationSafetyProgram)) {
			return false;
		}

		RadiationSafetyProgram radiationSafetyProgram =
			(RadiationSafetyProgram)object;

		long primaryKey = radiationSafetyProgram.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RadiationSafetyProgram> toCacheModel() {
		RadiationSafetyProgramCacheModel radiationSafetyProgramCacheModel =
			new RadiationSafetyProgramCacheModel();

		radiationSafetyProgramCacheModel.radiationSafetyProgramId =
			getRadiationSafetyProgramId();

		radiationSafetyProgramCacheModel.groupId = getGroupId();

		radiationSafetyProgramCacheModel.companyId = getCompanyId();

		radiationSafetyProgramCacheModel.userId = getUserId();

		radiationSafetyProgramCacheModel.userName = getUserName();

		String userName = radiationSafetyProgramCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			radiationSafetyProgramCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			radiationSafetyProgramCacheModel.createDate = createDate.getTime();
		}
		else {
			radiationSafetyProgramCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			radiationSafetyProgramCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			radiationSafetyProgramCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		radiationSafetyProgramCacheModel.nuclearRsoName = getNuclearRsoName();

		String nuclearRsoName = radiationSafetyProgramCacheModel.nuclearRsoName;

		if ((nuclearRsoName != null) && (nuclearRsoName.length() == 0)) {
			radiationSafetyProgramCacheModel.nuclearRsoName = null;
		}

		radiationSafetyProgramCacheModel.nuclearRsoTitle = getNuclearRsoTitle();

		String nuclearRsoTitle =
			radiationSafetyProgramCacheModel.nuclearRsoTitle;

		if ((nuclearRsoTitle != null) && (nuclearRsoTitle.length() == 0)) {
			radiationSafetyProgramCacheModel.nuclearRsoTitle = null;
		}

		radiationSafetyProgramCacheModel.nuclearRsoTeleNo =
			getNuclearRsoTeleNo();

		String nuclearRsoTeleNo =
			radiationSafetyProgramCacheModel.nuclearRsoTeleNo;

		if ((nuclearRsoTeleNo != null) && (nuclearRsoTeleNo.length() == 0)) {
			radiationSafetyProgramCacheModel.nuclearRsoTeleNo = null;
		}

		radiationSafetyProgramCacheModel.nuclearRsoExt = getNuclearRsoExt();

		String nuclearRsoExt = radiationSafetyProgramCacheModel.nuclearRsoExt;

		if ((nuclearRsoExt != null) && (nuclearRsoExt.length() == 0)) {
			radiationSafetyProgramCacheModel.nuclearRsoExt = null;
		}

		radiationSafetyProgramCacheModel.nuclearRsoFax = getNuclearRsoFax();

		String nuclearRsoFax = radiationSafetyProgramCacheModel.nuclearRsoFax;

		if ((nuclearRsoFax != null) && (nuclearRsoFax.length() == 0)) {
			radiationSafetyProgramCacheModel.nuclearRsoFax = null;
		}

		radiationSafetyProgramCacheModel.nuclearRsoEmail = getNuclearRsoEmail();

		String nuclearRsoEmail =
			radiationSafetyProgramCacheModel.nuclearRsoEmail;

		if ((nuclearRsoEmail != null) && (nuclearRsoEmail.length() == 0)) {
			radiationSafetyProgramCacheModel.nuclearRsoEmail = null;
		}

		radiationSafetyProgramCacheModel.rsoDetails = getRsoDetails();

		String rsoDetails = radiationSafetyProgramCacheModel.rsoDetails;

		if ((rsoDetails != null) && (rsoDetails.length() == 0)) {
			radiationSafetyProgramCacheModel.rsoDetails = null;
		}

		radiationSafetyProgramCacheModel.qualifiedExpertName =
			getQualifiedExpertName();

		String qualifiedExpertName =
			radiationSafetyProgramCacheModel.qualifiedExpertName;

		if ((qualifiedExpertName != null) &&
			(qualifiedExpertName.length() == 0)) {

			radiationSafetyProgramCacheModel.qualifiedExpertName = null;
		}

		radiationSafetyProgramCacheModel.qualifiedExpertTitle =
			getQualifiedExpertTitle();

		String qualifiedExpertTitle =
			radiationSafetyProgramCacheModel.qualifiedExpertTitle;

		if ((qualifiedExpertTitle != null) &&
			(qualifiedExpertTitle.length() == 0)) {

			radiationSafetyProgramCacheModel.qualifiedExpertTitle = null;
		}

		radiationSafetyProgramCacheModel.qualifiedExpertTele =
			getQualifiedExpertTele();

		String qualifiedExpertTele =
			radiationSafetyProgramCacheModel.qualifiedExpertTele;

		if ((qualifiedExpertTele != null) &&
			(qualifiedExpertTele.length() == 0)) {

			radiationSafetyProgramCacheModel.qualifiedExpertTele = null;
		}

		radiationSafetyProgramCacheModel.qualifiedExpertExt =
			getQualifiedExpertExt();

		String qualifiedExpertExt =
			radiationSafetyProgramCacheModel.qualifiedExpertExt;

		if ((qualifiedExpertExt != null) &&
			(qualifiedExpertExt.length() == 0)) {

			radiationSafetyProgramCacheModel.qualifiedExpertExt = null;
		}

		radiationSafetyProgramCacheModel.qualifiedExpertFax =
			getQualifiedExpertFax();

		String qualifiedExpertFax =
			radiationSafetyProgramCacheModel.qualifiedExpertFax;

		if ((qualifiedExpertFax != null) &&
			(qualifiedExpertFax.length() == 0)) {

			radiationSafetyProgramCacheModel.qualifiedExpertFax = null;
		}

		radiationSafetyProgramCacheModel.qualifiedExpertEmail =
			getQualifiedExpertEmail();

		String qualifiedExpertEmail =
			radiationSafetyProgramCacheModel.qualifiedExpertEmail;

		if ((qualifiedExpertEmail != null) &&
			(qualifiedExpertEmail.length() == 0)) {

			radiationSafetyProgramCacheModel.qualifiedExpertEmail = null;
		}

		radiationSafetyProgramCacheModel.qualifiedExpertRegstNo =
			getQualifiedExpertRegstNo();

		String qualifiedExpertRegstNo =
			radiationSafetyProgramCacheModel.qualifiedExpertRegstNo;

		if ((qualifiedExpertRegstNo != null) &&
			(qualifiedExpertRegstNo.length() == 0)) {

			radiationSafetyProgramCacheModel.qualifiedExpertRegstNo = null;
		}

		Date qualifiedExpertDate = getQualifiedExpertDate();

		if (qualifiedExpertDate != null) {
			radiationSafetyProgramCacheModel.qualifiedExpertDate =
				qualifiedExpertDate.getTime();
		}
		else {
			radiationSafetyProgramCacheModel.qualifiedExpertDate =
				Long.MIN_VALUE;
		}

		radiationSafetyProgramCacheModel.qualifiedDetails =
			getQualifiedDetails();

		String qualifiedDetails =
			radiationSafetyProgramCacheModel.qualifiedDetails;

		if ((qualifiedDetails != null) && (qualifiedDetails.length() == 0)) {
			radiationSafetyProgramCacheModel.qualifiedDetails = null;
		}

		radiationSafetyProgramCacheModel.applicantName = getApplicantName();

		String applicantName = radiationSafetyProgramCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			radiationSafetyProgramCacheModel.applicantName = null;
		}

		radiationSafetyProgramCacheModel.applicantTitle = getApplicantTitle();

		String applicantTitle = radiationSafetyProgramCacheModel.applicantTitle;

		if ((applicantTitle != null) && (applicantTitle.length() == 0)) {
			radiationSafetyProgramCacheModel.applicantTitle = null;
		}

		radiationSafetyProgramCacheModel.otherLimitationAuth =
			getOtherLimitationAuth();

		String otherLimitationAuth =
			radiationSafetyProgramCacheModel.otherLimitationAuth;

		if ((otherLimitationAuth != null) &&
			(otherLimitationAuth.length() == 0)) {

			radiationSafetyProgramCacheModel.otherLimitationAuth = null;
		}

		Date otherDate = getOtherDate();

		if (otherDate != null) {
			radiationSafetyProgramCacheModel.otherDate = otherDate.getTime();
		}
		else {
			radiationSafetyProgramCacheModel.otherDate = Long.MIN_VALUE;
		}

		radiationSafetyProgramCacheModel.classifiWorkersList =
			getClassifiWorkersList();

		String classifiWorkersList =
			radiationSafetyProgramCacheModel.classifiWorkersList;

		if ((classifiWorkersList != null) &&
			(classifiWorkersList.length() == 0)) {

			radiationSafetyProgramCacheModel.classifiWorkersList = null;
		}

		radiationSafetyProgramCacheModel.respiPleaseSpecify =
			getRespiPleaseSpecify();

		String respiPleaseSpecify =
			radiationSafetyProgramCacheModel.respiPleaseSpecify;

		if ((respiPleaseSpecify != null) &&
			(respiPleaseSpecify.length() == 0)) {

			radiationSafetyProgramCacheModel.respiPleaseSpecify = null;
		}

		radiationSafetyProgramCacheModel.tongsPleaseSpecify =
			getTongsPleaseSpecify();

		String tongsPleaseSpecify =
			radiationSafetyProgramCacheModel.tongsPleaseSpecify;

		if ((tongsPleaseSpecify != null) &&
			(tongsPleaseSpecify.length() == 0)) {

			radiationSafetyProgramCacheModel.tongsPleaseSpecify = null;
		}

		radiationSafetyProgramCacheModel.scopeOfActivities =
			getScopeOfActivities();

		String scopeOfActivities =
			radiationSafetyProgramCacheModel.scopeOfActivities;

		if ((scopeOfActivities != null) && (scopeOfActivities.length() == 0)) {
			radiationSafetyProgramCacheModel.scopeOfActivities = null;
		}

		radiationSafetyProgramCacheModel.managementSystem =
			getManagementSystem();

		String managementSystem =
			radiationSafetyProgramCacheModel.managementSystem;

		if ((managementSystem != null) && (managementSystem.length() == 0)) {
			radiationSafetyProgramCacheModel.managementSystem = null;
		}

		radiationSafetyProgramCacheModel.workerRecordings =
			getWorkerRecordings();

		String workerRecordings =
			radiationSafetyProgramCacheModel.workerRecordings;

		if ((workerRecordings != null) && (workerRecordings.length() == 0)) {
			radiationSafetyProgramCacheModel.workerRecordings = null;
		}

		radiationSafetyProgramCacheModel.categoriesLicence =
			getCategoriesLicence();

		String categoriesLicence =
			radiationSafetyProgramCacheModel.categoriesLicence;

		if ((categoriesLicence != null) && (categoriesLicence.length() == 0)) {
			radiationSafetyProgramCacheModel.categoriesLicence = null;
		}

		radiationSafetyProgramCacheModel.renewalsSummary = getRenewalsSummary();

		String renewalsSummary =
			radiationSafetyProgramCacheModel.renewalsSummary;

		if ((renewalsSummary != null) && (renewalsSummary.length() == 0)) {
			radiationSafetyProgramCacheModel.renewalsSummary = null;
		}

		radiationSafetyProgramCacheModel.constraintsLimits =
			getConstraintsLimits();

		String constraintsLimits =
			radiationSafetyProgramCacheModel.constraintsLimits;

		if ((constraintsLimits != null) && (constraintsLimits.length() == 0)) {
			radiationSafetyProgramCacheModel.constraintsLimits = null;
		}

		radiationSafetyProgramCacheModel.equipmentMonitoring =
			getEquipmentMonitoring();

		String equipmentMonitoring =
			radiationSafetyProgramCacheModel.equipmentMonitoring;

		if ((equipmentMonitoring != null) &&
			(equipmentMonitoring.length() == 0)) {

			radiationSafetyProgramCacheModel.equipmentMonitoring = null;
		}

		radiationSafetyProgramCacheModel.areasControl = getAreasControl();

		String areasControl = radiationSafetyProgramCacheModel.areasControl;

		if ((areasControl != null) && (areasControl.length() == 0)) {
			radiationSafetyProgramCacheModel.areasControl = null;
		}

		radiationSafetyProgramCacheModel.radioactiveSources =
			getRadioactiveSources();

		String radioactiveSources =
			radiationSafetyProgramCacheModel.radioactiveSources;

		if ((radioactiveSources != null) &&
			(radioactiveSources.length() == 0)) {

			radiationSafetyProgramCacheModel.radioactiveSources = null;
		}

		radiationSafetyProgramCacheModel.radiationiInstruments =
			getRadiationiInstruments();

		String radiationiInstruments =
			radiationSafetyProgramCacheModel.radiationiInstruments;

		if ((radiationiInstruments != null) &&
			(radiationiInstruments.length() == 0)) {

			radiationSafetyProgramCacheModel.radiationiInstruments = null;
		}

		radiationSafetyProgramCacheModel.healthWorkers = getHealthWorkers();

		String healthWorkers = radiationSafetyProgramCacheModel.healthWorkers;

		if ((healthWorkers != null) && (healthWorkers.length() == 0)) {
			radiationSafetyProgramCacheModel.healthWorkers = null;
		}

		radiationSafetyProgramCacheModel.investigationLevel =
			getInvestigationLevel();

		String investigationLevel =
			radiationSafetyProgramCacheModel.investigationLevel;

		if ((investigationLevel != null) &&
			(investigationLevel.length() == 0)) {

			radiationSafetyProgramCacheModel.investigationLevel = null;
		}

		radiationSafetyProgramCacheModel.policyDetails = getPolicyDetails();

		String policyDetails = radiationSafetyProgramCacheModel.policyDetails;

		if ((policyDetails != null) && (policyDetails.length() == 0)) {
			radiationSafetyProgramCacheModel.policyDetails = null;
		}

		radiationSafetyProgramCacheModel.securityAccess = getSecurityAccess();

		String securityAccess = radiationSafetyProgramCacheModel.securityAccess;

		if ((securityAccess != null) && (securityAccess.length() == 0)) {
			radiationSafetyProgramCacheModel.securityAccess = null;
		}

		radiationSafetyProgramCacheModel.raditionSources = getRaditionSources();

		String raditionSources =
			radiationSafetyProgramCacheModel.raditionSources;

		if ((raditionSources != null) && (raditionSources.length() == 0)) {
			radiationSafetyProgramCacheModel.raditionSources = null;
		}

		radiationSafetyProgramCacheModel.workerTraining = getWorkerTraining();

		String workerTraining = radiationSafetyProgramCacheModel.workerTraining;

		if ((workerTraining != null) && (workerTraining.length() == 0)) {
			radiationSafetyProgramCacheModel.workerTraining = null;
		}

		radiationSafetyProgramCacheModel.publicControl = getPublicControl();

		String publicControl = radiationSafetyProgramCacheModel.publicControl;

		if ((publicControl != null) && (publicControl.length() == 0)) {
			radiationSafetyProgramCacheModel.publicControl = null;
		}

		radiationSafetyProgramCacheModel.managementSources =
			getManagementSources();

		String managementSources =
			radiationSafetyProgramCacheModel.managementSources;

		if ((managementSources != null) && (managementSources.length() == 0)) {
			radiationSafetyProgramCacheModel.managementSources = null;
		}

		radiationSafetyProgramCacheModel.emergencyProcedure =
			getEmergencyProcedure();

		String emergencyProcedure =
			radiationSafetyProgramCacheModel.emergencyProcedure;

		if ((emergencyProcedure != null) &&
			(emergencyProcedure.length() == 0)) {

			radiationSafetyProgramCacheModel.emergencyProcedure = null;
		}

		radiationSafetyProgramCacheModel.licenceLocation = getLicenceLocation();

		String licenceLocation =
			radiationSafetyProgramCacheModel.licenceLocation;

		if ((licenceLocation != null) && (licenceLocation.length() == 0)) {
			radiationSafetyProgramCacheModel.licenceLocation = null;
		}

		radiationSafetyProgramCacheModel.achievableProgram =
			getAchievableProgram();

		String achievableProgram =
			radiationSafetyProgramCacheModel.achievableProgram;

		if ((achievableProgram != null) && (achievableProgram.length() == 0)) {
			radiationSafetyProgramCacheModel.achievableProgram = null;
		}

		radiationSafetyProgramCacheModel.leakedTestingSources =
			getLeakedTestingSources();

		String leakedTestingSources =
			radiationSafetyProgramCacheModel.leakedTestingSources;

		if ((leakedTestingSources != null) &&
			(leakedTestingSources.length() == 0)) {

			radiationSafetyProgramCacheModel.leakedTestingSources = null;
		}

		radiationSafetyProgramCacheModel.transferSources = getTransferSources();

		String transferSources =
			radiationSafetyProgramCacheModel.transferSources;

		if ((transferSources != null) && (transferSources.length() == 0)) {
			radiationSafetyProgramCacheModel.transferSources = null;
		}

		radiationSafetyProgramCacheModel.nuclearMaterials =
			getNuclearMaterials();

		String nuclearMaterials =
			radiationSafetyProgramCacheModel.nuclearMaterials;

		if ((nuclearMaterials != null) && (nuclearMaterials.length() == 0)) {
			radiationSafetyProgramCacheModel.nuclearMaterials = null;
		}

		radiationSafetyProgramCacheModel.transportPackaging =
			getTransportPackaging();

		String transportPackaging =
			radiationSafetyProgramCacheModel.transportPackaging;

		if ((transportPackaging != null) &&
			(transportPackaging.length() == 0)) {

			radiationSafetyProgramCacheModel.transportPackaging = null;
		}

		radiationSafetyProgramCacheModel.internalReview = getInternalReview();

		String internalReview = radiationSafetyProgramCacheModel.internalReview;

		if ((internalReview != null) && (internalReview.length() == 0)) {
			radiationSafetyProgramCacheModel.internalReview = null;
		}

		radiationSafetyProgramCacheModel.sourcesActivities =
			getSourcesActivities();

		String sourcesActivities =
			radiationSafetyProgramCacheModel.sourcesActivities;

		if ((sourcesActivities != null) && (sourcesActivities.length() == 0)) {
			radiationSafetyProgramCacheModel.sourcesActivities = null;
		}

		radiationSafetyProgramCacheModel.individualProtectiveEquipment =
			getIndividualProtectiveEquipment();

		String individualProtectiveEquipment =
			radiationSafetyProgramCacheModel.individualProtectiveEquipment;

		if ((individualProtectiveEquipment != null) &&
			(individualProtectiveEquipment.length() == 0)) {

			radiationSafetyProgramCacheModel.individualProtectiveEquipment =
				null;
		}

		radiationSafetyProgramCacheModel.ResProPleaseSpecify =
			getResProPleaseSpecify();

		String ResProPleaseSpecify =
			radiationSafetyProgramCacheModel.ResProPleaseSpecify;

		if ((ResProPleaseSpecify != null) &&
			(ResProPleaseSpecify.length() == 0)) {

			radiationSafetyProgramCacheModel.ResProPleaseSpecify = null;
		}

		radiationSafetyProgramCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return radiationSafetyProgramCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RadiationSafetyProgram, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RadiationSafetyProgram, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RadiationSafetyProgram, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RadiationSafetyProgram)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RadiationSafetyProgram>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					RadiationSafetyProgram.class, ModelWrapper.class);

	}

	private long _radiationSafetyProgramId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nuclearRsoName;
	private String _nuclearRsoTitle;
	private String _nuclearRsoTeleNo;
	private String _nuclearRsoExt;
	private String _nuclearRsoFax;
	private String _nuclearRsoEmail;
	private String _rsoDetails;
	private String _qualifiedExpertName;
	private String _qualifiedExpertTitle;
	private String _qualifiedExpertTele;
	private String _qualifiedExpertExt;
	private String _qualifiedExpertFax;
	private String _qualifiedExpertEmail;
	private String _qualifiedExpertRegstNo;
	private Date _qualifiedExpertDate;
	private String _qualifiedDetails;
	private String _applicantName;
	private String _applicantTitle;
	private String _otherLimitationAuth;
	private Date _otherDate;
	private String _classifiWorkersList;
	private String _respiPleaseSpecify;
	private String _tongsPleaseSpecify;
	private String _scopeOfActivities;
	private String _managementSystem;
	private String _workerRecordings;
	private String _categoriesLicence;
	private String _renewalsSummary;
	private String _constraintsLimits;
	private String _equipmentMonitoring;
	private String _areasControl;
	private String _radioactiveSources;
	private String _radiationiInstruments;
	private String _healthWorkers;
	private String _investigationLevel;
	private String _policyDetails;
	private String _securityAccess;
	private String _raditionSources;
	private String _workerTraining;
	private String _publicControl;
	private String _managementSources;
	private String _emergencyProcedure;
	private String _licenceLocation;
	private String _achievableProgram;
	private String _leakedTestingSources;
	private String _transferSources;
	private String _nuclearMaterials;
	private String _transportPackaging;
	private String _internalReview;
	private String _sourcesActivities;
	private String _individualProtectiveEquipment;
	private String _ResProPleaseSpecify;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<RadiationSafetyProgram, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RadiationSafetyProgram)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"radiationSafetyProgramId", _radiationSafetyProgramId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nuclearRsoName", _nuclearRsoName);
		_columnOriginalValues.put("nuclearRsoTitle", _nuclearRsoTitle);
		_columnOriginalValues.put("nuclearRsoTeleNo", _nuclearRsoTeleNo);
		_columnOriginalValues.put("nuclearRsoExt", _nuclearRsoExt);
		_columnOriginalValues.put("nuclearRsoFax", _nuclearRsoFax);
		_columnOriginalValues.put("nuclearRsoEmail", _nuclearRsoEmail);
		_columnOriginalValues.put("rsoDetails", _rsoDetails);
		_columnOriginalValues.put("qualifiedExpertName", _qualifiedExpertName);
		_columnOriginalValues.put(
			"qualifiedExpertTitle", _qualifiedExpertTitle);
		_columnOriginalValues.put("qualifiedExpertTele", _qualifiedExpertTele);
		_columnOriginalValues.put("qualifiedExpertExt", _qualifiedExpertExt);
		_columnOriginalValues.put("qualifiedExpertFax", _qualifiedExpertFax);
		_columnOriginalValues.put(
			"qualifiedExpertEmail", _qualifiedExpertEmail);
		_columnOriginalValues.put(
			"qualifiedExpertRegstNo", _qualifiedExpertRegstNo);
		_columnOriginalValues.put("qualifiedExpertDate", _qualifiedExpertDate);
		_columnOriginalValues.put("qualifiedDetails", _qualifiedDetails);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("applicantTitle", _applicantTitle);
		_columnOriginalValues.put("otherLimitationAuth", _otherLimitationAuth);
		_columnOriginalValues.put("otherDate", _otherDate);
		_columnOriginalValues.put("classifiWorkersList", _classifiWorkersList);
		_columnOriginalValues.put("respiPleaseSpecify", _respiPleaseSpecify);
		_columnOriginalValues.put("tongsPleaseSpecify", _tongsPleaseSpecify);
		_columnOriginalValues.put("scopeOfActivities", _scopeOfActivities);
		_columnOriginalValues.put("managementSystem", _managementSystem);
		_columnOriginalValues.put("workerRecordings", _workerRecordings);
		_columnOriginalValues.put("categoriesLicence", _categoriesLicence);
		_columnOriginalValues.put("renewalsSummary", _renewalsSummary);
		_columnOriginalValues.put("constraintsLimits", _constraintsLimits);
		_columnOriginalValues.put("equipmentMonitoring", _equipmentMonitoring);
		_columnOriginalValues.put("areasControl", _areasControl);
		_columnOriginalValues.put("radioactiveSources", _radioactiveSources);
		_columnOriginalValues.put(
			"radiationiInstruments", _radiationiInstruments);
		_columnOriginalValues.put("healthWorkers", _healthWorkers);
		_columnOriginalValues.put("investigationLevel", _investigationLevel);
		_columnOriginalValues.put("policyDetails", _policyDetails);
		_columnOriginalValues.put("securityAccess", _securityAccess);
		_columnOriginalValues.put("raditionSources", _raditionSources);
		_columnOriginalValues.put("workerTraining", _workerTraining);
		_columnOriginalValues.put("publicControl", _publicControl);
		_columnOriginalValues.put("managementSources", _managementSources);
		_columnOriginalValues.put("emergencyProcedure", _emergencyProcedure);
		_columnOriginalValues.put("licenceLocation", _licenceLocation);
		_columnOriginalValues.put("achievableProgram", _achievableProgram);
		_columnOriginalValues.put(
			"leakedTestingSources", _leakedTestingSources);
		_columnOriginalValues.put("transferSources", _transferSources);
		_columnOriginalValues.put("nuclearMaterials", _nuclearMaterials);
		_columnOriginalValues.put("transportPackaging", _transportPackaging);
		_columnOriginalValues.put("internalReview", _internalReview);
		_columnOriginalValues.put("sourcesActivities", _sourcesActivities);
		_columnOriginalValues.put(
			"individualProtectiveEquipment", _individualProtectiveEquipment);
		_columnOriginalValues.put("ResProPleaseSpecify", _ResProPleaseSpecify);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("radiationSafetyProgramId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("nuclearRsoName", 128L);

		columnBitmasks.put("nuclearRsoTitle", 256L);

		columnBitmasks.put("nuclearRsoTeleNo", 512L);

		columnBitmasks.put("nuclearRsoExt", 1024L);

		columnBitmasks.put("nuclearRsoFax", 2048L);

		columnBitmasks.put("nuclearRsoEmail", 4096L);

		columnBitmasks.put("rsoDetails", 8192L);

		columnBitmasks.put("qualifiedExpertName", 16384L);

		columnBitmasks.put("qualifiedExpertTitle", 32768L);

		columnBitmasks.put("qualifiedExpertTele", 65536L);

		columnBitmasks.put("qualifiedExpertExt", 131072L);

		columnBitmasks.put("qualifiedExpertFax", 262144L);

		columnBitmasks.put("qualifiedExpertEmail", 524288L);

		columnBitmasks.put("qualifiedExpertRegstNo", 1048576L);

		columnBitmasks.put("qualifiedExpertDate", 2097152L);

		columnBitmasks.put("qualifiedDetails", 4194304L);

		columnBitmasks.put("applicantName", 8388608L);

		columnBitmasks.put("applicantTitle", 16777216L);

		columnBitmasks.put("otherLimitationAuth", 33554432L);

		columnBitmasks.put("otherDate", 67108864L);

		columnBitmasks.put("classifiWorkersList", 134217728L);

		columnBitmasks.put("respiPleaseSpecify", 268435456L);

		columnBitmasks.put("tongsPleaseSpecify", 536870912L);

		columnBitmasks.put("scopeOfActivities", 1073741824L);

		columnBitmasks.put("managementSystem", 2147483648L);

		columnBitmasks.put("workerRecordings", 4294967296L);

		columnBitmasks.put("categoriesLicence", 8589934592L);

		columnBitmasks.put("renewalsSummary", 17179869184L);

		columnBitmasks.put("constraintsLimits", 34359738368L);

		columnBitmasks.put("equipmentMonitoring", 68719476736L);

		columnBitmasks.put("areasControl", 137438953472L);

		columnBitmasks.put("radioactiveSources", 274877906944L);

		columnBitmasks.put("radiationiInstruments", 549755813888L);

		columnBitmasks.put("healthWorkers", 1099511627776L);

		columnBitmasks.put("investigationLevel", 2199023255552L);

		columnBitmasks.put("policyDetails", 4398046511104L);

		columnBitmasks.put("securityAccess", 8796093022208L);

		columnBitmasks.put("raditionSources", 17592186044416L);

		columnBitmasks.put("workerTraining", 35184372088832L);

		columnBitmasks.put("publicControl", 70368744177664L);

		columnBitmasks.put("managementSources", 140737488355328L);

		columnBitmasks.put("emergencyProcedure", 281474976710656L);

		columnBitmasks.put("licenceLocation", 562949953421312L);

		columnBitmasks.put("achievableProgram", 1125899906842624L);

		columnBitmasks.put("leakedTestingSources", 2251799813685248L);

		columnBitmasks.put("transferSources", 4503599627370496L);

		columnBitmasks.put("nuclearMaterials", 9007199254740992L);

		columnBitmasks.put("transportPackaging", 18014398509481984L);

		columnBitmasks.put("internalReview", 36028797018963968L);

		columnBitmasks.put("sourcesActivities", 72057594037927936L);

		columnBitmasks.put(
			"individualProtectiveEquipment", 144115188075855872L);

		columnBitmasks.put("ResProPleaseSpecify", 288230376151711744L);

		columnBitmasks.put("hsraApplicationId", 576460752303423488L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RadiationSafetyProgram _escapedModel;

}