/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.NotifiLegalInfo;
import com.nbp.hsra.application.service.model.NotifiLegalInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NotifiLegalInfo service. Represents a row in the &quot;nbp_hsra_noti_legal_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NotifiLegalInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotifiLegalInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NotifiLegalInfoImpl
 * @generated
 */
@JSON(strict = true)
public class NotifiLegalInfoModelImpl
	extends BaseModelImpl<NotifiLegalInfo> implements NotifiLegalInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notifi legal info model instance should use the <code>NotifiLegalInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_noti_legal_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"notifiLegalInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"legalPersonName", Types.VARCHAR},
		{"legalPersonAddress", Types.VARCHAR},
		{"organizationName", Types.VARCHAR},
		{"organizationAddress", Types.VARCHAR},
		{"contactNumber", Types.VARCHAR}, {"legalPersonEmail", Types.VARCHAR},
		{"practiceNature", Types.VARCHAR}, {"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("notifiLegalInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("legalPersonName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("legalPersonAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("legalPersonEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("practiceNature", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_noti_legal_info (notifiLegalInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,legalPersonName VARCHAR(75) null,legalPersonAddress VARCHAR(1000) null,organizationName VARCHAR(75) null,organizationAddress VARCHAR(1000) null,contactNumber VARCHAR(75) null,legalPersonEmail VARCHAR(75) null,practiceNature VARCHAR(75) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_noti_legal_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY notifiLegalInfo.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_noti_legal_info.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NotifiLegalInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notifiLegalInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotifiLegalInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notifiLegalInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NotifiLegalInfo.class;
	}

	@Override
	public String getModelClassName() {
		return NotifiLegalInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NotifiLegalInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NotifiLegalInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NotifiLegalInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NotifiLegalInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NotifiLegalInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NotifiLegalInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NotifiLegalInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NotifiLegalInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NotifiLegalInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<NotifiLegalInfo, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<NotifiLegalInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<NotifiLegalInfo, Object>>();

			attributeGetterFunctions.put(
				"notifiLegalInfoId", NotifiLegalInfo::getNotifiLegalInfoId);
			attributeGetterFunctions.put(
				"groupId", NotifiLegalInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", NotifiLegalInfo::getCompanyId);
			attributeGetterFunctions.put("userId", NotifiLegalInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", NotifiLegalInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", NotifiLegalInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", NotifiLegalInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"legalPersonName", NotifiLegalInfo::getLegalPersonName);
			attributeGetterFunctions.put(
				"legalPersonAddress", NotifiLegalInfo::getLegalPersonAddress);
			attributeGetterFunctions.put(
				"organizationName", NotifiLegalInfo::getOrganizationName);
			attributeGetterFunctions.put(
				"organizationAddress", NotifiLegalInfo::getOrganizationAddress);
			attributeGetterFunctions.put(
				"contactNumber", NotifiLegalInfo::getContactNumber);
			attributeGetterFunctions.put(
				"legalPersonEmail", NotifiLegalInfo::getLegalPersonEmail);
			attributeGetterFunctions.put(
				"practiceNature", NotifiLegalInfo::getPracticeNature);
			attributeGetterFunctions.put(
				"hsraApplicationId", NotifiLegalInfo::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<NotifiLegalInfo, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<NotifiLegalInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<NotifiLegalInfo, ?>>();

			attributeSetterBiConsumers.put(
				"notifiLegalInfoId",
				(BiConsumer<NotifiLegalInfo, Long>)
					NotifiLegalInfo::setNotifiLegalInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<NotifiLegalInfo, Long>)NotifiLegalInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<NotifiLegalInfo, Long>)
					NotifiLegalInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<NotifiLegalInfo, Long>)NotifiLegalInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<NotifiLegalInfo, String>)
					NotifiLegalInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<NotifiLegalInfo, Date>)
					NotifiLegalInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<NotifiLegalInfo, Date>)
					NotifiLegalInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"legalPersonName",
				(BiConsumer<NotifiLegalInfo, String>)
					NotifiLegalInfo::setLegalPersonName);
			attributeSetterBiConsumers.put(
				"legalPersonAddress",
				(BiConsumer<NotifiLegalInfo, String>)
					NotifiLegalInfo::setLegalPersonAddress);
			attributeSetterBiConsumers.put(
				"organizationName",
				(BiConsumer<NotifiLegalInfo, String>)
					NotifiLegalInfo::setOrganizationName);
			attributeSetterBiConsumers.put(
				"organizationAddress",
				(BiConsumer<NotifiLegalInfo, String>)
					NotifiLegalInfo::setOrganizationAddress);
			attributeSetterBiConsumers.put(
				"contactNumber",
				(BiConsumer<NotifiLegalInfo, String>)
					NotifiLegalInfo::setContactNumber);
			attributeSetterBiConsumers.put(
				"legalPersonEmail",
				(BiConsumer<NotifiLegalInfo, String>)
					NotifiLegalInfo::setLegalPersonEmail);
			attributeSetterBiConsumers.put(
				"practiceNature",
				(BiConsumer<NotifiLegalInfo, String>)
					NotifiLegalInfo::setPracticeNature);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<NotifiLegalInfo, Long>)
					NotifiLegalInfo::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getNotifiLegalInfoId() {
		return _notifiLegalInfoId;
	}

	@Override
	public void setNotifiLegalInfoId(long notifiLegalInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notifiLegalInfoId = notifiLegalInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLegalPersonName() {
		if (_legalPersonName == null) {
			return "";
		}
		else {
			return _legalPersonName;
		}
	}

	@Override
	public void setLegalPersonName(String legalPersonName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_legalPersonName = legalPersonName;
	}

	@JSON
	@Override
	public String getLegalPersonAddress() {
		if (_legalPersonAddress == null) {
			return "";
		}
		else {
			return _legalPersonAddress;
		}
	}

	@Override
	public void setLegalPersonAddress(String legalPersonAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_legalPersonAddress = legalPersonAddress;
	}

	@JSON
	@Override
	public String getOrganizationName() {
		if (_organizationName == null) {
			return "";
		}
		else {
			return _organizationName;
		}
	}

	@Override
	public void setOrganizationName(String organizationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationName = organizationName;
	}

	@JSON
	@Override
	public String getOrganizationAddress() {
		if (_organizationAddress == null) {
			return "";
		}
		else {
			return _organizationAddress;
		}
	}

	@Override
	public void setOrganizationAddress(String organizationAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationAddress = organizationAddress;
	}

	@JSON
	@Override
	public String getContactNumber() {
		if (_contactNumber == null) {
			return "";
		}
		else {
			return _contactNumber;
		}
	}

	@Override
	public void setContactNumber(String contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	@JSON
	@Override
	public String getLegalPersonEmail() {
		if (_legalPersonEmail == null) {
			return "";
		}
		else {
			return _legalPersonEmail;
		}
	}

	@Override
	public void setLegalPersonEmail(String legalPersonEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_legalPersonEmail = legalPersonEmail;
	}

	@JSON
	@Override
	public String getPracticeNature() {
		if (_practiceNature == null) {
			return "";
		}
		else {
			return _practiceNature;
		}
	}

	@Override
	public void setPracticeNature(String practiceNature) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_practiceNature = practiceNature;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NotifiLegalInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NotifiLegalInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NotifiLegalInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotifiLegalInfoImpl notifiLegalInfoImpl = new NotifiLegalInfoImpl();

		notifiLegalInfoImpl.setNotifiLegalInfoId(getNotifiLegalInfoId());
		notifiLegalInfoImpl.setGroupId(getGroupId());
		notifiLegalInfoImpl.setCompanyId(getCompanyId());
		notifiLegalInfoImpl.setUserId(getUserId());
		notifiLegalInfoImpl.setUserName(getUserName());
		notifiLegalInfoImpl.setCreateDate(getCreateDate());
		notifiLegalInfoImpl.setModifiedDate(getModifiedDate());
		notifiLegalInfoImpl.setLegalPersonName(getLegalPersonName());
		notifiLegalInfoImpl.setLegalPersonAddress(getLegalPersonAddress());
		notifiLegalInfoImpl.setOrganizationName(getOrganizationName());
		notifiLegalInfoImpl.setOrganizationAddress(getOrganizationAddress());
		notifiLegalInfoImpl.setContactNumber(getContactNumber());
		notifiLegalInfoImpl.setLegalPersonEmail(getLegalPersonEmail());
		notifiLegalInfoImpl.setPracticeNature(getPracticeNature());
		notifiLegalInfoImpl.setHsraApplicationId(getHsraApplicationId());

		notifiLegalInfoImpl.resetOriginalValues();

		return notifiLegalInfoImpl;
	}

	@Override
	public NotifiLegalInfo cloneWithOriginalValues() {
		NotifiLegalInfoImpl notifiLegalInfoImpl = new NotifiLegalInfoImpl();

		notifiLegalInfoImpl.setNotifiLegalInfoId(
			this.<Long>getColumnOriginalValue("notifiLegalInfoId"));
		notifiLegalInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		notifiLegalInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		notifiLegalInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		notifiLegalInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		notifiLegalInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		notifiLegalInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		notifiLegalInfoImpl.setLegalPersonName(
			this.<String>getColumnOriginalValue("legalPersonName"));
		notifiLegalInfoImpl.setLegalPersonAddress(
			this.<String>getColumnOriginalValue("legalPersonAddress"));
		notifiLegalInfoImpl.setOrganizationName(
			this.<String>getColumnOriginalValue("organizationName"));
		notifiLegalInfoImpl.setOrganizationAddress(
			this.<String>getColumnOriginalValue("organizationAddress"));
		notifiLegalInfoImpl.setContactNumber(
			this.<String>getColumnOriginalValue("contactNumber"));
		notifiLegalInfoImpl.setLegalPersonEmail(
			this.<String>getColumnOriginalValue("legalPersonEmail"));
		notifiLegalInfoImpl.setPracticeNature(
			this.<String>getColumnOriginalValue("practiceNature"));
		notifiLegalInfoImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return notifiLegalInfoImpl;
	}

	@Override
	public int compareTo(NotifiLegalInfo notifiLegalInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), notifiLegalInfo.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NotifiLegalInfo)) {
			return false;
		}

		NotifiLegalInfo notifiLegalInfo = (NotifiLegalInfo)object;

		long primaryKey = notifiLegalInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NotifiLegalInfo> toCacheModel() {
		NotifiLegalInfoCacheModel notifiLegalInfoCacheModel =
			new NotifiLegalInfoCacheModel();

		notifiLegalInfoCacheModel.notifiLegalInfoId = getNotifiLegalInfoId();

		notifiLegalInfoCacheModel.groupId = getGroupId();

		notifiLegalInfoCacheModel.companyId = getCompanyId();

		notifiLegalInfoCacheModel.userId = getUserId();

		notifiLegalInfoCacheModel.userName = getUserName();

		String userName = notifiLegalInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			notifiLegalInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			notifiLegalInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			notifiLegalInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notifiLegalInfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notifiLegalInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notifiLegalInfoCacheModel.legalPersonName = getLegalPersonName();

		String legalPersonName = notifiLegalInfoCacheModel.legalPersonName;

		if ((legalPersonName != null) && (legalPersonName.length() == 0)) {
			notifiLegalInfoCacheModel.legalPersonName = null;
		}

		notifiLegalInfoCacheModel.legalPersonAddress = getLegalPersonAddress();

		String legalPersonAddress =
			notifiLegalInfoCacheModel.legalPersonAddress;

		if ((legalPersonAddress != null) &&
			(legalPersonAddress.length() == 0)) {

			notifiLegalInfoCacheModel.legalPersonAddress = null;
		}

		notifiLegalInfoCacheModel.organizationName = getOrganizationName();

		String organizationName = notifiLegalInfoCacheModel.organizationName;

		if ((organizationName != null) && (organizationName.length() == 0)) {
			notifiLegalInfoCacheModel.organizationName = null;
		}

		notifiLegalInfoCacheModel.organizationAddress =
			getOrganizationAddress();

		String organizationAddress =
			notifiLegalInfoCacheModel.organizationAddress;

		if ((organizationAddress != null) &&
			(organizationAddress.length() == 0)) {

			notifiLegalInfoCacheModel.organizationAddress = null;
		}

		notifiLegalInfoCacheModel.contactNumber = getContactNumber();

		String contactNumber = notifiLegalInfoCacheModel.contactNumber;

		if ((contactNumber != null) && (contactNumber.length() == 0)) {
			notifiLegalInfoCacheModel.contactNumber = null;
		}

		notifiLegalInfoCacheModel.legalPersonEmail = getLegalPersonEmail();

		String legalPersonEmail = notifiLegalInfoCacheModel.legalPersonEmail;

		if ((legalPersonEmail != null) && (legalPersonEmail.length() == 0)) {
			notifiLegalInfoCacheModel.legalPersonEmail = null;
		}

		notifiLegalInfoCacheModel.practiceNature = getPracticeNature();

		String practiceNature = notifiLegalInfoCacheModel.practiceNature;

		if ((practiceNature != null) && (practiceNature.length() == 0)) {
			notifiLegalInfoCacheModel.practiceNature = null;
		}

		notifiLegalInfoCacheModel.hsraApplicationId = getHsraApplicationId();

		return notifiLegalInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NotifiLegalInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NotifiLegalInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NotifiLegalInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((NotifiLegalInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NotifiLegalInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					NotifiLegalInfo.class, ModelWrapper.class);

	}

	private long _notifiLegalInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _legalPersonName;
	private String _legalPersonAddress;
	private String _organizationName;
	private String _organizationAddress;
	private String _contactNumber;
	private String _legalPersonEmail;
	private String _practiceNature;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<NotifiLegalInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NotifiLegalInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("notifiLegalInfoId", _notifiLegalInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("legalPersonName", _legalPersonName);
		_columnOriginalValues.put("legalPersonAddress", _legalPersonAddress);
		_columnOriginalValues.put("organizationName", _organizationName);
		_columnOriginalValues.put("organizationAddress", _organizationAddress);
		_columnOriginalValues.put("contactNumber", _contactNumber);
		_columnOriginalValues.put("legalPersonEmail", _legalPersonEmail);
		_columnOriginalValues.put("practiceNature", _practiceNature);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("notifiLegalInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("legalPersonName", 128L);

		columnBitmasks.put("legalPersonAddress", 256L);

		columnBitmasks.put("organizationName", 512L);

		columnBitmasks.put("organizationAddress", 1024L);

		columnBitmasks.put("contactNumber", 2048L);

		columnBitmasks.put("legalPersonEmail", 4096L);

		columnBitmasks.put("practiceNature", 8192L);

		columnBitmasks.put("hsraApplicationId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NotifiLegalInfo _escapedModel;

}