/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.HsraApplication;
import com.nbp.hsra.application.service.model.HsraApplicationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HsraApplication service. Represents a row in the &quot;nbp_hsra_application&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HsraApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HsraApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HsraApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class HsraApplicationModelImpl
	extends BaseModelImpl<HsraApplication> implements HsraApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hsra application model instance should use the <code>HsraApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_application";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"hsraApplicationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"typeOfApplicant", Types.VARCHAR}, {"typeOfActivities", Types.VARCHAR},
		{"categoryOfSources", Types.VARCHAR}, {"highOne", Types.VARCHAR},
		{"highTwo", Types.VARCHAR}, {"medium", Types.VARCHAR},
		{"lowOne", Types.VARCHAR}, {"lowTwo", Types.VARCHAR},
		{"typeOfTransaction", Types.VARCHAR}, {"riskLevel", Types.VARCHAR},
		{"typeOfApplication", Types.VARCHAR},
		{"brokerTransactionType", Types.VARCHAR},
		{"specificApplicable", Types.VARCHAR}, {"status", Types.INTEGER},
		{"applicationNumber", Types.VARCHAR},
		{"expiredLicenseAppNumber", Types.VARCHAR}, {"caseId", Types.VARCHAR},
		{"icmDocumentsPath", Types.VARCHAR}, {"entityId", Types.VARCHAR},
		{"pdfFileEntryId", Types.BIGINT},
		{"appCurrentStageName", Types.VARCHAR},
		{"qualifiedArea", Types.VARCHAR}, {"expiredDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeOfApplicant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfActivities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryOfSources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("highOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("highTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medium", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lowOne", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lowTwo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfTransaction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("riskLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfApplication", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brokerTransactionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificApplicable", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredLicenseAppNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icmDocumentsPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pdfFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appCurrentStageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualifiedArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_application (uuid_ VARCHAR(75) null,hsraApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,typeOfApplicant VARCHAR(75) null,typeOfActivities VARCHAR(75) null,categoryOfSources VARCHAR(75) null,highOne VARCHAR(500) null,highTwo VARCHAR(500) null,medium VARCHAR(500) null,lowOne VARCHAR(500) null,lowTwo VARCHAR(500) null,typeOfTransaction VARCHAR(75) null,riskLevel VARCHAR(75) null,typeOfApplication VARCHAR(75) null,brokerTransactionType VARCHAR(75) null,specificApplicable VARCHAR(500) null,status INTEGER,applicationNumber VARCHAR(75) null,expiredLicenseAppNumber VARCHAR(75) null,caseId VARCHAR(500) null,icmDocumentsPath VARCHAR(500) null,entityId VARCHAR(75) null,pdfFileEntryId LONG,appCurrentStageName VARCHAR(75) null,qualifiedArea VARCHAR(1000) null,expiredDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_application";

	public static final String ORDER_BY_JPQL =
		" ORDER BY hsraApplication.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_application.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENTITYID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPIREDLICENSEAPPNUMBER_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPEOFAPPLICANT_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HsraApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _hsraApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHsraApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _hsraApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HsraApplication.class;
	}

	@Override
	public String getModelClassName() {
		return HsraApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HsraApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HsraApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HsraApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((HsraApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HsraApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HsraApplication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HsraApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HsraApplication, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HsraApplication, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<HsraApplication, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<HsraApplication, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<HsraApplication, Object>>();

			attributeGetterFunctions.put("uuid", HsraApplication::getUuid);
			attributeGetterFunctions.put(
				"hsraApplicationId", HsraApplication::getHsraApplicationId);
			attributeGetterFunctions.put(
				"groupId", HsraApplication::getGroupId);
			attributeGetterFunctions.put(
				"companyId", HsraApplication::getCompanyId);
			attributeGetterFunctions.put("userId", HsraApplication::getUserId);
			attributeGetterFunctions.put(
				"userName", HsraApplication::getUserName);
			attributeGetterFunctions.put(
				"createDate", HsraApplication::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", HsraApplication::getModifiedDate);
			attributeGetterFunctions.put(
				"typeOfApplicant", HsraApplication::getTypeOfApplicant);
			attributeGetterFunctions.put(
				"typeOfActivities", HsraApplication::getTypeOfActivities);
			attributeGetterFunctions.put(
				"categoryOfSources", HsraApplication::getCategoryOfSources);
			attributeGetterFunctions.put(
				"highOne", HsraApplication::getHighOne);
			attributeGetterFunctions.put(
				"highTwo", HsraApplication::getHighTwo);
			attributeGetterFunctions.put("medium", HsraApplication::getMedium);
			attributeGetterFunctions.put("lowOne", HsraApplication::getLowOne);
			attributeGetterFunctions.put("lowTwo", HsraApplication::getLowTwo);
			attributeGetterFunctions.put(
				"typeOfTransaction", HsraApplication::getTypeOfTransaction);
			attributeGetterFunctions.put(
				"riskLevel", HsraApplication::getRiskLevel);
			attributeGetterFunctions.put(
				"typeOfApplication", HsraApplication::getTypeOfApplication);
			attributeGetterFunctions.put(
				"brokerTransactionType",
				HsraApplication::getBrokerTransactionType);
			attributeGetterFunctions.put(
				"specificApplicable", HsraApplication::getSpecificApplicable);
			attributeGetterFunctions.put("status", HsraApplication::getStatus);
			attributeGetterFunctions.put(
				"applicationNumber", HsraApplication::getApplicationNumber);
			attributeGetterFunctions.put(
				"expiredLicenseAppNumber",
				HsraApplication::getExpiredLicenseAppNumber);
			attributeGetterFunctions.put("caseId", HsraApplication::getCaseId);
			attributeGetterFunctions.put(
				"icmDocumentsPath", HsraApplication::getIcmDocumentsPath);
			attributeGetterFunctions.put(
				"entityId", HsraApplication::getEntityId);
			attributeGetterFunctions.put(
				"pdfFileEntryId", HsraApplication::getPdfFileEntryId);
			attributeGetterFunctions.put(
				"appCurrentStageName", HsraApplication::getAppCurrentStageName);
			attributeGetterFunctions.put(
				"qualifiedArea", HsraApplication::getQualifiedArea);
			attributeGetterFunctions.put(
				"expiredDate", HsraApplication::getExpiredDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<HsraApplication, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<HsraApplication, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<HsraApplication, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<HsraApplication, String>)HsraApplication::setUuid);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<HsraApplication, Long>)
					HsraApplication::setHsraApplicationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<HsraApplication, Long>)HsraApplication::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<HsraApplication, Long>)
					HsraApplication::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<HsraApplication, Long>)HsraApplication::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<HsraApplication, Date>)
					HsraApplication::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<HsraApplication, Date>)
					HsraApplication::setModifiedDate);
			attributeSetterBiConsumers.put(
				"typeOfApplicant",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setTypeOfApplicant);
			attributeSetterBiConsumers.put(
				"typeOfActivities",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setTypeOfActivities);
			attributeSetterBiConsumers.put(
				"categoryOfSources",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setCategoryOfSources);
			attributeSetterBiConsumers.put(
				"highOne",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setHighOne);
			attributeSetterBiConsumers.put(
				"highTwo",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setHighTwo);
			attributeSetterBiConsumers.put(
				"medium",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setMedium);
			attributeSetterBiConsumers.put(
				"lowOne",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setLowOne);
			attributeSetterBiConsumers.put(
				"lowTwo",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setLowTwo);
			attributeSetterBiConsumers.put(
				"typeOfTransaction",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setTypeOfTransaction);
			attributeSetterBiConsumers.put(
				"riskLevel",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setRiskLevel);
			attributeSetterBiConsumers.put(
				"typeOfApplication",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setTypeOfApplication);
			attributeSetterBiConsumers.put(
				"brokerTransactionType",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setBrokerTransactionType);
			attributeSetterBiConsumers.put(
				"specificApplicable",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setSpecificApplicable);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<HsraApplication, Integer>)
					HsraApplication::setStatus);
			attributeSetterBiConsumers.put(
				"applicationNumber",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setApplicationNumber);
			attributeSetterBiConsumers.put(
				"expiredLicenseAppNumber",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setExpiredLicenseAppNumber);
			attributeSetterBiConsumers.put(
				"caseId",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setCaseId);
			attributeSetterBiConsumers.put(
				"icmDocumentsPath",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setIcmDocumentsPath);
			attributeSetterBiConsumers.put(
				"entityId",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setEntityId);
			attributeSetterBiConsumers.put(
				"pdfFileEntryId",
				(BiConsumer<HsraApplication, Long>)
					HsraApplication::setPdfFileEntryId);
			attributeSetterBiConsumers.put(
				"appCurrentStageName",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setAppCurrentStageName);
			attributeSetterBiConsumers.put(
				"qualifiedArea",
				(BiConsumer<HsraApplication, String>)
					HsraApplication::setQualifiedArea);
			attributeSetterBiConsumers.put(
				"expiredDate",
				(BiConsumer<HsraApplication, Date>)
					HsraApplication::setExpiredDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTypeOfApplicant() {
		if (_typeOfApplicant == null) {
			return "";
		}
		else {
			return _typeOfApplicant;
		}
	}

	@Override
	public void setTypeOfApplicant(String typeOfApplicant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfApplicant = typeOfApplicant;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTypeOfApplicant() {
		return getColumnOriginalValue("typeOfApplicant");
	}

	@JSON
	@Override
	public String getTypeOfActivities() {
		if (_typeOfActivities == null) {
			return "";
		}
		else {
			return _typeOfActivities;
		}
	}

	@Override
	public void setTypeOfActivities(String typeOfActivities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfActivities = typeOfActivities;
	}

	@JSON
	@Override
	public String getCategoryOfSources() {
		if (_categoryOfSources == null) {
			return "";
		}
		else {
			return _categoryOfSources;
		}
	}

	@Override
	public void setCategoryOfSources(String categoryOfSources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryOfSources = categoryOfSources;
	}

	@JSON
	@Override
	public String getHighOne() {
		if (_highOne == null) {
			return "";
		}
		else {
			return _highOne;
		}
	}

	@Override
	public void setHighOne(String highOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_highOne = highOne;
	}

	@JSON
	@Override
	public String getHighTwo() {
		if (_highTwo == null) {
			return "";
		}
		else {
			return _highTwo;
		}
	}

	@Override
	public void setHighTwo(String highTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_highTwo = highTwo;
	}

	@JSON
	@Override
	public String getMedium() {
		if (_medium == null) {
			return "";
		}
		else {
			return _medium;
		}
	}

	@Override
	public void setMedium(String medium) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_medium = medium;
	}

	@JSON
	@Override
	public String getLowOne() {
		if (_lowOne == null) {
			return "";
		}
		else {
			return _lowOne;
		}
	}

	@Override
	public void setLowOne(String lowOne) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lowOne = lowOne;
	}

	@JSON
	@Override
	public String getLowTwo() {
		if (_lowTwo == null) {
			return "";
		}
		else {
			return _lowTwo;
		}
	}

	@Override
	public void setLowTwo(String lowTwo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lowTwo = lowTwo;
	}

	@JSON
	@Override
	public String getTypeOfTransaction() {
		if (_typeOfTransaction == null) {
			return "";
		}
		else {
			return _typeOfTransaction;
		}
	}

	@Override
	public void setTypeOfTransaction(String typeOfTransaction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfTransaction = typeOfTransaction;
	}

	@JSON
	@Override
	public String getRiskLevel() {
		if (_riskLevel == null) {
			return "";
		}
		else {
			return _riskLevel;
		}
	}

	@Override
	public void setRiskLevel(String riskLevel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_riskLevel = riskLevel;
	}

	@JSON
	@Override
	public String getTypeOfApplication() {
		if (_typeOfApplication == null) {
			return "";
		}
		else {
			return _typeOfApplication;
		}
	}

	@Override
	public void setTypeOfApplication(String typeOfApplication) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfApplication = typeOfApplication;
	}

	@JSON
	@Override
	public String getBrokerTransactionType() {
		if (_brokerTransactionType == null) {
			return "";
		}
		else {
			return _brokerTransactionType;
		}
	}

	@Override
	public void setBrokerTransactionType(String brokerTransactionType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brokerTransactionType = brokerTransactionType;
	}

	@JSON
	@Override
	public String getSpecificApplicable() {
		if (_specificApplicable == null) {
			return "";
		}
		else {
			return _specificApplicable;
		}
	}

	@Override
	public void setSpecificApplicable(String specificApplicable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificApplicable = specificApplicable;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getExpiredLicenseAppNumber() {
		if (_expiredLicenseAppNumber == null) {
			return "";
		}
		else {
			return _expiredLicenseAppNumber;
		}
	}

	@Override
	public void setExpiredLicenseAppNumber(String expiredLicenseAppNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredLicenseAppNumber = expiredLicenseAppNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExpiredLicenseAppNumber() {
		return getColumnOriginalValue("expiredLicenseAppNumber");
	}

	@JSON
	@Override
	public String getCaseId() {
		if (_caseId == null) {
			return "";
		}
		else {
			return _caseId;
		}
	}

	@Override
	public void setCaseId(String caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseId() {
		return getColumnOriginalValue("caseId");
	}

	@JSON
	@Override
	public String getIcmDocumentsPath() {
		if (_icmDocumentsPath == null) {
			return "";
		}
		else {
			return _icmDocumentsPath;
		}
	}

	@Override
	public void setIcmDocumentsPath(String icmDocumentsPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_icmDocumentsPath = icmDocumentsPath;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEntityId() {
		return getColumnOriginalValue("entityId");
	}

	@JSON
	@Override
	public long getPdfFileEntryId() {
		return _pdfFileEntryId;
	}

	@Override
	public void setPdfFileEntryId(long pdfFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pdfFileEntryId = pdfFileEntryId;
	}

	@JSON
	@Override
	public String getAppCurrentStageName() {
		if (_appCurrentStageName == null) {
			return "";
		}
		else {
			return _appCurrentStageName;
		}
	}

	@Override
	public void setAppCurrentStageName(String appCurrentStageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appCurrentStageName = appCurrentStageName;
	}

	@JSON
	@Override
	public String getQualifiedArea() {
		if (_qualifiedArea == null) {
			return "";
		}
		else {
			return _qualifiedArea;
		}
	}

	@Override
	public void setQualifiedArea(String qualifiedArea) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualifiedArea = qualifiedArea;
	}

	@JSON
	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiredDate = expiredDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(HsraApplication.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), HsraApplication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HsraApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, HsraApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HsraApplicationImpl hsraApplicationImpl = new HsraApplicationImpl();

		hsraApplicationImpl.setUuid(getUuid());
		hsraApplicationImpl.setHsraApplicationId(getHsraApplicationId());
		hsraApplicationImpl.setGroupId(getGroupId());
		hsraApplicationImpl.setCompanyId(getCompanyId());
		hsraApplicationImpl.setUserId(getUserId());
		hsraApplicationImpl.setUserName(getUserName());
		hsraApplicationImpl.setCreateDate(getCreateDate());
		hsraApplicationImpl.setModifiedDate(getModifiedDate());
		hsraApplicationImpl.setTypeOfApplicant(getTypeOfApplicant());
		hsraApplicationImpl.setTypeOfActivities(getTypeOfActivities());
		hsraApplicationImpl.setCategoryOfSources(getCategoryOfSources());
		hsraApplicationImpl.setHighOne(getHighOne());
		hsraApplicationImpl.setHighTwo(getHighTwo());
		hsraApplicationImpl.setMedium(getMedium());
		hsraApplicationImpl.setLowOne(getLowOne());
		hsraApplicationImpl.setLowTwo(getLowTwo());
		hsraApplicationImpl.setTypeOfTransaction(getTypeOfTransaction());
		hsraApplicationImpl.setRiskLevel(getRiskLevel());
		hsraApplicationImpl.setTypeOfApplication(getTypeOfApplication());
		hsraApplicationImpl.setBrokerTransactionType(
			getBrokerTransactionType());
		hsraApplicationImpl.setSpecificApplicable(getSpecificApplicable());
		hsraApplicationImpl.setStatus(getStatus());
		hsraApplicationImpl.setApplicationNumber(getApplicationNumber());
		hsraApplicationImpl.setExpiredLicenseAppNumber(
			getExpiredLicenseAppNumber());
		hsraApplicationImpl.setCaseId(getCaseId());
		hsraApplicationImpl.setIcmDocumentsPath(getIcmDocumentsPath());
		hsraApplicationImpl.setEntityId(getEntityId());
		hsraApplicationImpl.setPdfFileEntryId(getPdfFileEntryId());
		hsraApplicationImpl.setAppCurrentStageName(getAppCurrentStageName());
		hsraApplicationImpl.setQualifiedArea(getQualifiedArea());
		hsraApplicationImpl.setExpiredDate(getExpiredDate());

		hsraApplicationImpl.resetOriginalValues();

		return hsraApplicationImpl;
	}

	@Override
	public HsraApplication cloneWithOriginalValues() {
		HsraApplicationImpl hsraApplicationImpl = new HsraApplicationImpl();

		hsraApplicationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		hsraApplicationImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
		hsraApplicationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		hsraApplicationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		hsraApplicationImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		hsraApplicationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		hsraApplicationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		hsraApplicationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		hsraApplicationImpl.setTypeOfApplicant(
			this.<String>getColumnOriginalValue("typeOfApplicant"));
		hsraApplicationImpl.setTypeOfActivities(
			this.<String>getColumnOriginalValue("typeOfActivities"));
		hsraApplicationImpl.setCategoryOfSources(
			this.<String>getColumnOriginalValue("categoryOfSources"));
		hsraApplicationImpl.setHighOne(
			this.<String>getColumnOriginalValue("highOne"));
		hsraApplicationImpl.setHighTwo(
			this.<String>getColumnOriginalValue("highTwo"));
		hsraApplicationImpl.setMedium(
			this.<String>getColumnOriginalValue("medium"));
		hsraApplicationImpl.setLowOne(
			this.<String>getColumnOriginalValue("lowOne"));
		hsraApplicationImpl.setLowTwo(
			this.<String>getColumnOriginalValue("lowTwo"));
		hsraApplicationImpl.setTypeOfTransaction(
			this.<String>getColumnOriginalValue("typeOfTransaction"));
		hsraApplicationImpl.setRiskLevel(
			this.<String>getColumnOriginalValue("riskLevel"));
		hsraApplicationImpl.setTypeOfApplication(
			this.<String>getColumnOriginalValue("typeOfApplication"));
		hsraApplicationImpl.setBrokerTransactionType(
			this.<String>getColumnOriginalValue("brokerTransactionType"));
		hsraApplicationImpl.setSpecificApplicable(
			this.<String>getColumnOriginalValue("specificApplicable"));
		hsraApplicationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		hsraApplicationImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		hsraApplicationImpl.setExpiredLicenseAppNumber(
			this.<String>getColumnOriginalValue("expiredLicenseAppNumber"));
		hsraApplicationImpl.setCaseId(
			this.<String>getColumnOriginalValue("caseId"));
		hsraApplicationImpl.setIcmDocumentsPath(
			this.<String>getColumnOriginalValue("icmDocumentsPath"));
		hsraApplicationImpl.setEntityId(
			this.<String>getColumnOriginalValue("entityId"));
		hsraApplicationImpl.setPdfFileEntryId(
			this.<Long>getColumnOriginalValue("pdfFileEntryId"));
		hsraApplicationImpl.setAppCurrentStageName(
			this.<String>getColumnOriginalValue("appCurrentStageName"));
		hsraApplicationImpl.setQualifiedArea(
			this.<String>getColumnOriginalValue("qualifiedArea"));
		hsraApplicationImpl.setExpiredDate(
			this.<Date>getColumnOriginalValue("expiredDate"));

		return hsraApplicationImpl;
	}

	@Override
	public int compareTo(HsraApplication hsraApplication) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), hsraApplication.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof HsraApplication)) {
			return false;
		}

		HsraApplication hsraApplication = (HsraApplication)object;

		long primaryKey = hsraApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<HsraApplication> toCacheModel() {
		HsraApplicationCacheModel hsraApplicationCacheModel =
			new HsraApplicationCacheModel();

		hsraApplicationCacheModel.uuid = getUuid();

		String uuid = hsraApplicationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			hsraApplicationCacheModel.uuid = null;
		}

		hsraApplicationCacheModel.hsraApplicationId = getHsraApplicationId();

		hsraApplicationCacheModel.groupId = getGroupId();

		hsraApplicationCacheModel.companyId = getCompanyId();

		hsraApplicationCacheModel.userId = getUserId();

		hsraApplicationCacheModel.userName = getUserName();

		String userName = hsraApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			hsraApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			hsraApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			hsraApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			hsraApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			hsraApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		hsraApplicationCacheModel.typeOfApplicant = getTypeOfApplicant();

		String typeOfApplicant = hsraApplicationCacheModel.typeOfApplicant;

		if ((typeOfApplicant != null) && (typeOfApplicant.length() == 0)) {
			hsraApplicationCacheModel.typeOfApplicant = null;
		}

		hsraApplicationCacheModel.typeOfActivities = getTypeOfActivities();

		String typeOfActivities = hsraApplicationCacheModel.typeOfActivities;

		if ((typeOfActivities != null) && (typeOfActivities.length() == 0)) {
			hsraApplicationCacheModel.typeOfActivities = null;
		}

		hsraApplicationCacheModel.categoryOfSources = getCategoryOfSources();

		String categoryOfSources = hsraApplicationCacheModel.categoryOfSources;

		if ((categoryOfSources != null) && (categoryOfSources.length() == 0)) {
			hsraApplicationCacheModel.categoryOfSources = null;
		}

		hsraApplicationCacheModel.highOne = getHighOne();

		String highOne = hsraApplicationCacheModel.highOne;

		if ((highOne != null) && (highOne.length() == 0)) {
			hsraApplicationCacheModel.highOne = null;
		}

		hsraApplicationCacheModel.highTwo = getHighTwo();

		String highTwo = hsraApplicationCacheModel.highTwo;

		if ((highTwo != null) && (highTwo.length() == 0)) {
			hsraApplicationCacheModel.highTwo = null;
		}

		hsraApplicationCacheModel.medium = getMedium();

		String medium = hsraApplicationCacheModel.medium;

		if ((medium != null) && (medium.length() == 0)) {
			hsraApplicationCacheModel.medium = null;
		}

		hsraApplicationCacheModel.lowOne = getLowOne();

		String lowOne = hsraApplicationCacheModel.lowOne;

		if ((lowOne != null) && (lowOne.length() == 0)) {
			hsraApplicationCacheModel.lowOne = null;
		}

		hsraApplicationCacheModel.lowTwo = getLowTwo();

		String lowTwo = hsraApplicationCacheModel.lowTwo;

		if ((lowTwo != null) && (lowTwo.length() == 0)) {
			hsraApplicationCacheModel.lowTwo = null;
		}

		hsraApplicationCacheModel.typeOfTransaction = getTypeOfTransaction();

		String typeOfTransaction = hsraApplicationCacheModel.typeOfTransaction;

		if ((typeOfTransaction != null) && (typeOfTransaction.length() == 0)) {
			hsraApplicationCacheModel.typeOfTransaction = null;
		}

		hsraApplicationCacheModel.riskLevel = getRiskLevel();

		String riskLevel = hsraApplicationCacheModel.riskLevel;

		if ((riskLevel != null) && (riskLevel.length() == 0)) {
			hsraApplicationCacheModel.riskLevel = null;
		}

		hsraApplicationCacheModel.typeOfApplication = getTypeOfApplication();

		String typeOfApplication = hsraApplicationCacheModel.typeOfApplication;

		if ((typeOfApplication != null) && (typeOfApplication.length() == 0)) {
			hsraApplicationCacheModel.typeOfApplication = null;
		}

		hsraApplicationCacheModel.brokerTransactionType =
			getBrokerTransactionType();

		String brokerTransactionType =
			hsraApplicationCacheModel.brokerTransactionType;

		if ((brokerTransactionType != null) &&
			(brokerTransactionType.length() == 0)) {

			hsraApplicationCacheModel.brokerTransactionType = null;
		}

		hsraApplicationCacheModel.specificApplicable = getSpecificApplicable();

		String specificApplicable =
			hsraApplicationCacheModel.specificApplicable;

		if ((specificApplicable != null) &&
			(specificApplicable.length() == 0)) {

			hsraApplicationCacheModel.specificApplicable = null;
		}

		hsraApplicationCacheModel.status = getStatus();

		hsraApplicationCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber = hsraApplicationCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			hsraApplicationCacheModel.applicationNumber = null;
		}

		hsraApplicationCacheModel.expiredLicenseAppNumber =
			getExpiredLicenseAppNumber();

		String expiredLicenseAppNumber =
			hsraApplicationCacheModel.expiredLicenseAppNumber;

		if ((expiredLicenseAppNumber != null) &&
			(expiredLicenseAppNumber.length() == 0)) {

			hsraApplicationCacheModel.expiredLicenseAppNumber = null;
		}

		hsraApplicationCacheModel.caseId = getCaseId();

		String caseId = hsraApplicationCacheModel.caseId;

		if ((caseId != null) && (caseId.length() == 0)) {
			hsraApplicationCacheModel.caseId = null;
		}

		hsraApplicationCacheModel.icmDocumentsPath = getIcmDocumentsPath();

		String icmDocumentsPath = hsraApplicationCacheModel.icmDocumentsPath;

		if ((icmDocumentsPath != null) && (icmDocumentsPath.length() == 0)) {
			hsraApplicationCacheModel.icmDocumentsPath = null;
		}

		hsraApplicationCacheModel.entityId = getEntityId();

		String entityId = hsraApplicationCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			hsraApplicationCacheModel.entityId = null;
		}

		hsraApplicationCacheModel.pdfFileEntryId = getPdfFileEntryId();

		hsraApplicationCacheModel.appCurrentStageName =
			getAppCurrentStageName();

		String appCurrentStageName =
			hsraApplicationCacheModel.appCurrentStageName;

		if ((appCurrentStageName != null) &&
			(appCurrentStageName.length() == 0)) {

			hsraApplicationCacheModel.appCurrentStageName = null;
		}

		hsraApplicationCacheModel.qualifiedArea = getQualifiedArea();

		String qualifiedArea = hsraApplicationCacheModel.qualifiedArea;

		if ((qualifiedArea != null) && (qualifiedArea.length() == 0)) {
			hsraApplicationCacheModel.qualifiedArea = null;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			hsraApplicationCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			hsraApplicationCacheModel.expiredDate = Long.MIN_VALUE;
		}

		return hsraApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HsraApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HsraApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HsraApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((HsraApplication)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, HsraApplication>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					HsraApplication.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _hsraApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _typeOfApplicant;
	private String _typeOfActivities;
	private String _categoryOfSources;
	private String _highOne;
	private String _highTwo;
	private String _medium;
	private String _lowOne;
	private String _lowTwo;
	private String _typeOfTransaction;
	private String _riskLevel;
	private String _typeOfApplication;
	private String _brokerTransactionType;
	private String _specificApplicable;
	private int _status;
	private String _applicationNumber;
	private String _expiredLicenseAppNumber;
	private String _caseId;
	private String _icmDocumentsPath;
	private String _entityId;
	private long _pdfFileEntryId;
	private String _appCurrentStageName;
	private String _qualifiedArea;
	private Date _expiredDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<HsraApplication, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((HsraApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("typeOfApplicant", _typeOfApplicant);
		_columnOriginalValues.put("typeOfActivities", _typeOfActivities);
		_columnOriginalValues.put("categoryOfSources", _categoryOfSources);
		_columnOriginalValues.put("highOne", _highOne);
		_columnOriginalValues.put("highTwo", _highTwo);
		_columnOriginalValues.put("medium", _medium);
		_columnOriginalValues.put("lowOne", _lowOne);
		_columnOriginalValues.put("lowTwo", _lowTwo);
		_columnOriginalValues.put("typeOfTransaction", _typeOfTransaction);
		_columnOriginalValues.put("riskLevel", _riskLevel);
		_columnOriginalValues.put("typeOfApplication", _typeOfApplication);
		_columnOriginalValues.put(
			"brokerTransactionType", _brokerTransactionType);
		_columnOriginalValues.put("specificApplicable", _specificApplicable);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"expiredLicenseAppNumber", _expiredLicenseAppNumber);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("icmDocumentsPath", _icmDocumentsPath);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("pdfFileEntryId", _pdfFileEntryId);
		_columnOriginalValues.put("appCurrentStageName", _appCurrentStageName);
		_columnOriginalValues.put("qualifiedArea", _qualifiedArea);
		_columnOriginalValues.put("expiredDate", _expiredDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("hsraApplicationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("typeOfApplicant", 256L);

		columnBitmasks.put("typeOfActivities", 512L);

		columnBitmasks.put("categoryOfSources", 1024L);

		columnBitmasks.put("highOne", 2048L);

		columnBitmasks.put("highTwo", 4096L);

		columnBitmasks.put("medium", 8192L);

		columnBitmasks.put("lowOne", 16384L);

		columnBitmasks.put("lowTwo", 32768L);

		columnBitmasks.put("typeOfTransaction", 65536L);

		columnBitmasks.put("riskLevel", 131072L);

		columnBitmasks.put("typeOfApplication", 262144L);

		columnBitmasks.put("brokerTransactionType", 524288L);

		columnBitmasks.put("specificApplicable", 1048576L);

		columnBitmasks.put("status", 2097152L);

		columnBitmasks.put("applicationNumber", 4194304L);

		columnBitmasks.put("expiredLicenseAppNumber", 8388608L);

		columnBitmasks.put("caseId", 16777216L);

		columnBitmasks.put("icmDocumentsPath", 33554432L);

		columnBitmasks.put("entityId", 67108864L);

		columnBitmasks.put("pdfFileEntryId", 134217728L);

		columnBitmasks.put("appCurrentStageName", 268435456L);

		columnBitmasks.put("qualifiedArea", 536870912L);

		columnBitmasks.put("expiredDate", 1073741824L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private HsraApplication _escapedModel;

}