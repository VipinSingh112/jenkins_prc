/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.RadionuclideInfo;
import com.nbp.hsra.application.service.model.RadionuclideInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RadionuclideInfo service. Represents a row in the &quot;nbp_hsra_noti_radionuclide&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RadionuclideInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RadionuclideInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RadionuclideInfoImpl
 * @generated
 */
@JSON(strict = true)
public class RadionuclideInfoModelImpl
	extends BaseModelImpl<RadionuclideInfo> implements RadionuclideInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a radionuclide info model instance should use the <code>RadionuclideInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_noti_radionuclide";

	public static final Object[][] TABLE_COLUMNS = {
		{"radionuclideInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"radionuclideDetails", Types.VARCHAR},
		{"activityDetails", Types.VARCHAR}, {"activityDetailBq", Types.VARCHAR},
		{"activityDate", Types.TIMESTAMP},
		{"chemicalDetailsForm", Types.VARCHAR}, {"serialNo", Types.VARCHAR},
		{"sealedSource", Types.VARCHAR}, {"manufacturerDetails", Types.VARCHAR},
		{"modelNo", Types.VARCHAR}, {"identificationNo", Types.VARCHAR},
		{"statusDetails", Types.VARCHAR}, {"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("radionuclideInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("radionuclideDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityDetailBq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("chemicalDetailsForm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serialNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sealedSource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modelNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("identificationNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_noti_radionuclide (radionuclideInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,radionuclideDetails VARCHAR(75) null,activityDetails VARCHAR(75) null,activityDetailBq VARCHAR(75) null,activityDate DATE null,chemicalDetailsForm VARCHAR(75) null,serialNo VARCHAR(75) null,sealedSource VARCHAR(75) null,manufacturerDetails VARCHAR(75) null,modelNo VARCHAR(75) null,identificationNo VARCHAR(75) null,statusDetails VARCHAR(75) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_noti_radionuclide";

	public static final String ORDER_BY_JPQL =
		" ORDER BY radionuclideInfo.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_noti_radionuclide.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RadionuclideInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _radionuclideInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRadionuclideInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _radionuclideInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RadionuclideInfo.class;
	}

	@Override
	public String getModelClassName() {
		return RadionuclideInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RadionuclideInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RadionuclideInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RadionuclideInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RadionuclideInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RadionuclideInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RadionuclideInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RadionuclideInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RadionuclideInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RadionuclideInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<RadionuclideInfo, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<RadionuclideInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<RadionuclideInfo, Object>>();

			attributeGetterFunctions.put(
				"radionuclideInfoId", RadionuclideInfo::getRadionuclideInfoId);
			attributeGetterFunctions.put(
				"groupId", RadionuclideInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", RadionuclideInfo::getCompanyId);
			attributeGetterFunctions.put("userId", RadionuclideInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", RadionuclideInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", RadionuclideInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", RadionuclideInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"radionuclideDetails",
				RadionuclideInfo::getRadionuclideDetails);
			attributeGetterFunctions.put(
				"activityDetails", RadionuclideInfo::getActivityDetails);
			attributeGetterFunctions.put(
				"activityDetailBq", RadionuclideInfo::getActivityDetailBq);
			attributeGetterFunctions.put(
				"activityDate", RadionuclideInfo::getActivityDate);
			attributeGetterFunctions.put(
				"chemicalDetailsForm",
				RadionuclideInfo::getChemicalDetailsForm);
			attributeGetterFunctions.put(
				"serialNo", RadionuclideInfo::getSerialNo);
			attributeGetterFunctions.put(
				"sealedSource", RadionuclideInfo::getSealedSource);
			attributeGetterFunctions.put(
				"manufacturerDetails",
				RadionuclideInfo::getManufacturerDetails);
			attributeGetterFunctions.put(
				"modelNo", RadionuclideInfo::getModelNo);
			attributeGetterFunctions.put(
				"identificationNo", RadionuclideInfo::getIdentificationNo);
			attributeGetterFunctions.put(
				"statusDetails", RadionuclideInfo::getStatusDetails);
			attributeGetterFunctions.put(
				"hsraApplicationId", RadionuclideInfo::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<RadionuclideInfo, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<RadionuclideInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<RadionuclideInfo, ?>>();

			attributeSetterBiConsumers.put(
				"radionuclideInfoId",
				(BiConsumer<RadionuclideInfo, Long>)
					RadionuclideInfo::setRadionuclideInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<RadionuclideInfo, Long>)
					RadionuclideInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<RadionuclideInfo, Long>)
					RadionuclideInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<RadionuclideInfo, Long>)
					RadionuclideInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<RadionuclideInfo, Date>)
					RadionuclideInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<RadionuclideInfo, Date>)
					RadionuclideInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"radionuclideDetails",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setRadionuclideDetails);
			attributeSetterBiConsumers.put(
				"activityDetails",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setActivityDetails);
			attributeSetterBiConsumers.put(
				"activityDetailBq",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setActivityDetailBq);
			attributeSetterBiConsumers.put(
				"activityDate",
				(BiConsumer<RadionuclideInfo, Date>)
					RadionuclideInfo::setActivityDate);
			attributeSetterBiConsumers.put(
				"chemicalDetailsForm",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setChemicalDetailsForm);
			attributeSetterBiConsumers.put(
				"serialNo",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setSerialNo);
			attributeSetterBiConsumers.put(
				"sealedSource",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setSealedSource);
			attributeSetterBiConsumers.put(
				"manufacturerDetails",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setManufacturerDetails);
			attributeSetterBiConsumers.put(
				"modelNo",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setModelNo);
			attributeSetterBiConsumers.put(
				"identificationNo",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setIdentificationNo);
			attributeSetterBiConsumers.put(
				"statusDetails",
				(BiConsumer<RadionuclideInfo, String>)
					RadionuclideInfo::setStatusDetails);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<RadionuclideInfo, Long>)
					RadionuclideInfo::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getRadionuclideInfoId() {
		return _radionuclideInfoId;
	}

	@Override
	public void setRadionuclideInfoId(long radionuclideInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radionuclideInfoId = radionuclideInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRadionuclideDetails() {
		if (_radionuclideDetails == null) {
			return "";
		}
		else {
			return _radionuclideDetails;
		}
	}

	@Override
	public void setRadionuclideDetails(String radionuclideDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radionuclideDetails = radionuclideDetails;
	}

	@JSON
	@Override
	public String getActivityDetails() {
		if (_activityDetails == null) {
			return "";
		}
		else {
			return _activityDetails;
		}
	}

	@Override
	public void setActivityDetails(String activityDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activityDetails = activityDetails;
	}

	@JSON
	@Override
	public String getActivityDetailBq() {
		if (_activityDetailBq == null) {
			return "";
		}
		else {
			return _activityDetailBq;
		}
	}

	@Override
	public void setActivityDetailBq(String activityDetailBq) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activityDetailBq = activityDetailBq;
	}

	@JSON
	@Override
	public Date getActivityDate() {
		return _activityDate;
	}

	@Override
	public void setActivityDate(Date activityDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activityDate = activityDate;
	}

	@JSON
	@Override
	public String getChemicalDetailsForm() {
		if (_chemicalDetailsForm == null) {
			return "";
		}
		else {
			return _chemicalDetailsForm;
		}
	}

	@Override
	public void setChemicalDetailsForm(String chemicalDetailsForm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_chemicalDetailsForm = chemicalDetailsForm;
	}

	@JSON
	@Override
	public String getSerialNo() {
		if (_serialNo == null) {
			return "";
		}
		else {
			return _serialNo;
		}
	}

	@Override
	public void setSerialNo(String serialNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serialNo = serialNo;
	}

	@JSON
	@Override
	public String getSealedSource() {
		if (_sealedSource == null) {
			return "";
		}
		else {
			return _sealedSource;
		}
	}

	@Override
	public void setSealedSource(String sealedSource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sealedSource = sealedSource;
	}

	@JSON
	@Override
	public String getManufacturerDetails() {
		if (_manufacturerDetails == null) {
			return "";
		}
		else {
			return _manufacturerDetails;
		}
	}

	@Override
	public void setManufacturerDetails(String manufacturerDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturerDetails = manufacturerDetails;
	}

	@JSON
	@Override
	public String getModelNo() {
		if (_modelNo == null) {
			return "";
		}
		else {
			return _modelNo;
		}
	}

	@Override
	public void setModelNo(String modelNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modelNo = modelNo;
	}

	@JSON
	@Override
	public String getIdentificationNo() {
		if (_identificationNo == null) {
			return "";
		}
		else {
			return _identificationNo;
		}
	}

	@Override
	public void setIdentificationNo(String identificationNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_identificationNo = identificationNo;
	}

	@JSON
	@Override
	public String getStatusDetails() {
		if (_statusDetails == null) {
			return "";
		}
		else {
			return _statusDetails;
		}
	}

	@Override
	public void setStatusDetails(String statusDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDetails = statusDetails;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RadionuclideInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RadionuclideInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RadionuclideInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RadionuclideInfoImpl radionuclideInfoImpl = new RadionuclideInfoImpl();

		radionuclideInfoImpl.setRadionuclideInfoId(getRadionuclideInfoId());
		radionuclideInfoImpl.setGroupId(getGroupId());
		radionuclideInfoImpl.setCompanyId(getCompanyId());
		radionuclideInfoImpl.setUserId(getUserId());
		radionuclideInfoImpl.setUserName(getUserName());
		radionuclideInfoImpl.setCreateDate(getCreateDate());
		radionuclideInfoImpl.setModifiedDate(getModifiedDate());
		radionuclideInfoImpl.setRadionuclideDetails(getRadionuclideDetails());
		radionuclideInfoImpl.setActivityDetails(getActivityDetails());
		radionuclideInfoImpl.setActivityDetailBq(getActivityDetailBq());
		radionuclideInfoImpl.setActivityDate(getActivityDate());
		radionuclideInfoImpl.setChemicalDetailsForm(getChemicalDetailsForm());
		radionuclideInfoImpl.setSerialNo(getSerialNo());
		radionuclideInfoImpl.setSealedSource(getSealedSource());
		radionuclideInfoImpl.setManufacturerDetails(getManufacturerDetails());
		radionuclideInfoImpl.setModelNo(getModelNo());
		radionuclideInfoImpl.setIdentificationNo(getIdentificationNo());
		radionuclideInfoImpl.setStatusDetails(getStatusDetails());
		radionuclideInfoImpl.setHsraApplicationId(getHsraApplicationId());

		radionuclideInfoImpl.resetOriginalValues();

		return radionuclideInfoImpl;
	}

	@Override
	public RadionuclideInfo cloneWithOriginalValues() {
		RadionuclideInfoImpl radionuclideInfoImpl = new RadionuclideInfoImpl();

		radionuclideInfoImpl.setRadionuclideInfoId(
			this.<Long>getColumnOriginalValue("radionuclideInfoId"));
		radionuclideInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		radionuclideInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		radionuclideInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		radionuclideInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		radionuclideInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		radionuclideInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		radionuclideInfoImpl.setRadionuclideDetails(
			this.<String>getColumnOriginalValue("radionuclideDetails"));
		radionuclideInfoImpl.setActivityDetails(
			this.<String>getColumnOriginalValue("activityDetails"));
		radionuclideInfoImpl.setActivityDetailBq(
			this.<String>getColumnOriginalValue("activityDetailBq"));
		radionuclideInfoImpl.setActivityDate(
			this.<Date>getColumnOriginalValue("activityDate"));
		radionuclideInfoImpl.setChemicalDetailsForm(
			this.<String>getColumnOriginalValue("chemicalDetailsForm"));
		radionuclideInfoImpl.setSerialNo(
			this.<String>getColumnOriginalValue("serialNo"));
		radionuclideInfoImpl.setSealedSource(
			this.<String>getColumnOriginalValue("sealedSource"));
		radionuclideInfoImpl.setManufacturerDetails(
			this.<String>getColumnOriginalValue("manufacturerDetails"));
		radionuclideInfoImpl.setModelNo(
			this.<String>getColumnOriginalValue("modelNo"));
		radionuclideInfoImpl.setIdentificationNo(
			this.<String>getColumnOriginalValue("identificationNo"));
		radionuclideInfoImpl.setStatusDetails(
			this.<String>getColumnOriginalValue("statusDetails"));
		radionuclideInfoImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return radionuclideInfoImpl;
	}

	@Override
	public int compareTo(RadionuclideInfo radionuclideInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), radionuclideInfo.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RadionuclideInfo)) {
			return false;
		}

		RadionuclideInfo radionuclideInfo = (RadionuclideInfo)object;

		long primaryKey = radionuclideInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RadionuclideInfo> toCacheModel() {
		RadionuclideInfoCacheModel radionuclideInfoCacheModel =
			new RadionuclideInfoCacheModel();

		radionuclideInfoCacheModel.radionuclideInfoId = getRadionuclideInfoId();

		radionuclideInfoCacheModel.groupId = getGroupId();

		radionuclideInfoCacheModel.companyId = getCompanyId();

		radionuclideInfoCacheModel.userId = getUserId();

		radionuclideInfoCacheModel.userName = getUserName();

		String userName = radionuclideInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			radionuclideInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			radionuclideInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			radionuclideInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			radionuclideInfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			radionuclideInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		radionuclideInfoCacheModel.radionuclideDetails =
			getRadionuclideDetails();

		String radionuclideDetails =
			radionuclideInfoCacheModel.radionuclideDetails;

		if ((radionuclideDetails != null) &&
			(radionuclideDetails.length() == 0)) {

			radionuclideInfoCacheModel.radionuclideDetails = null;
		}

		radionuclideInfoCacheModel.activityDetails = getActivityDetails();

		String activityDetails = radionuclideInfoCacheModel.activityDetails;

		if ((activityDetails != null) && (activityDetails.length() == 0)) {
			radionuclideInfoCacheModel.activityDetails = null;
		}

		radionuclideInfoCacheModel.activityDetailBq = getActivityDetailBq();

		String activityDetailBq = radionuclideInfoCacheModel.activityDetailBq;

		if ((activityDetailBq != null) && (activityDetailBq.length() == 0)) {
			radionuclideInfoCacheModel.activityDetailBq = null;
		}

		Date activityDate = getActivityDate();

		if (activityDate != null) {
			radionuclideInfoCacheModel.activityDate = activityDate.getTime();
		}
		else {
			radionuclideInfoCacheModel.activityDate = Long.MIN_VALUE;
		}

		radionuclideInfoCacheModel.chemicalDetailsForm =
			getChemicalDetailsForm();

		String chemicalDetailsForm =
			radionuclideInfoCacheModel.chemicalDetailsForm;

		if ((chemicalDetailsForm != null) &&
			(chemicalDetailsForm.length() == 0)) {

			radionuclideInfoCacheModel.chemicalDetailsForm = null;
		}

		radionuclideInfoCacheModel.serialNo = getSerialNo();

		String serialNo = radionuclideInfoCacheModel.serialNo;

		if ((serialNo != null) && (serialNo.length() == 0)) {
			radionuclideInfoCacheModel.serialNo = null;
		}

		radionuclideInfoCacheModel.sealedSource = getSealedSource();

		String sealedSource = radionuclideInfoCacheModel.sealedSource;

		if ((sealedSource != null) && (sealedSource.length() == 0)) {
			radionuclideInfoCacheModel.sealedSource = null;
		}

		radionuclideInfoCacheModel.manufacturerDetails =
			getManufacturerDetails();

		String manufacturerDetails =
			radionuclideInfoCacheModel.manufacturerDetails;

		if ((manufacturerDetails != null) &&
			(manufacturerDetails.length() == 0)) {

			radionuclideInfoCacheModel.manufacturerDetails = null;
		}

		radionuclideInfoCacheModel.modelNo = getModelNo();

		String modelNo = radionuclideInfoCacheModel.modelNo;

		if ((modelNo != null) && (modelNo.length() == 0)) {
			radionuclideInfoCacheModel.modelNo = null;
		}

		radionuclideInfoCacheModel.identificationNo = getIdentificationNo();

		String identificationNo = radionuclideInfoCacheModel.identificationNo;

		if ((identificationNo != null) && (identificationNo.length() == 0)) {
			radionuclideInfoCacheModel.identificationNo = null;
		}

		radionuclideInfoCacheModel.statusDetails = getStatusDetails();

		String statusDetails = radionuclideInfoCacheModel.statusDetails;

		if ((statusDetails != null) && (statusDetails.length() == 0)) {
			radionuclideInfoCacheModel.statusDetails = null;
		}

		radionuclideInfoCacheModel.hsraApplicationId = getHsraApplicationId();

		return radionuclideInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RadionuclideInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RadionuclideInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RadionuclideInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RadionuclideInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RadionuclideInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					RadionuclideInfo.class, ModelWrapper.class);

	}

	private long _radionuclideInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _radionuclideDetails;
	private String _activityDetails;
	private String _activityDetailBq;
	private Date _activityDate;
	private String _chemicalDetailsForm;
	private String _serialNo;
	private String _sealedSource;
	private String _manufacturerDetails;
	private String _modelNo;
	private String _identificationNo;
	private String _statusDetails;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<RadionuclideInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RadionuclideInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("radionuclideInfoId", _radionuclideInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("radionuclideDetails", _radionuclideDetails);
		_columnOriginalValues.put("activityDetails", _activityDetails);
		_columnOriginalValues.put("activityDetailBq", _activityDetailBq);
		_columnOriginalValues.put("activityDate", _activityDate);
		_columnOriginalValues.put("chemicalDetailsForm", _chemicalDetailsForm);
		_columnOriginalValues.put("serialNo", _serialNo);
		_columnOriginalValues.put("sealedSource", _sealedSource);
		_columnOriginalValues.put("manufacturerDetails", _manufacturerDetails);
		_columnOriginalValues.put("modelNo", _modelNo);
		_columnOriginalValues.put("identificationNo", _identificationNo);
		_columnOriginalValues.put("statusDetails", _statusDetails);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("radionuclideInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("radionuclideDetails", 128L);

		columnBitmasks.put("activityDetails", 256L);

		columnBitmasks.put("activityDetailBq", 512L);

		columnBitmasks.put("activityDate", 1024L);

		columnBitmasks.put("chemicalDetailsForm", 2048L);

		columnBitmasks.put("serialNo", 4096L);

		columnBitmasks.put("sealedSource", 8192L);

		columnBitmasks.put("manufacturerDetails", 16384L);

		columnBitmasks.put("modelNo", 32768L);

		columnBitmasks.put("identificationNo", 65536L);

		columnBitmasks.put("statusDetails", 131072L);

		columnBitmasks.put("hsraApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RadionuclideInfo _escapedModel;

}