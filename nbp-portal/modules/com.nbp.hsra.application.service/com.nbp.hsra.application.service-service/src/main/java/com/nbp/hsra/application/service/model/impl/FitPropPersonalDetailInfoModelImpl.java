/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.FitPropPersonalDetailInfo;
import com.nbp.hsra.application.service.model.FitPropPersonalDetailInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FitPropPersonalDetailInfo service. Represents a row in the &quot;nbp_hsra_fitprop_personal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FitPropPersonalDetailInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FitPropPersonalDetailInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FitPropPersonalDetailInfoImpl
 * @generated
 */
@JSON(strict = true)
public class FitPropPersonalDetailInfoModelImpl
	extends BaseModelImpl<FitPropPersonalDetailInfo>
	implements FitPropPersonalDetailInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fit prop personal detail info model instance should use the <code>FitPropPersonalDetailInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_fitprop_personal";

	public static final Object[][] TABLE_COLUMNS = {
		{"fitPropPersonalDetailInfoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"applicantFirstName", Types.VARCHAR},
		{"applicantMiddleName", Types.VARCHAR},
		{"applicantSurname", Types.VARCHAR},
		{"applicantFormerName", Types.VARCHAR},
		{"applicantAlias", Types.VARCHAR},
		{"applicantStreetName", Types.VARCHAR},
		{"applicantStreetNo", Types.VARCHAR},
		{"applicantPostalCode", Types.VARCHAR},
		{"applicantCountry", Types.VARCHAR},
		{"applicantTownName", Types.VARCHAR}, {"applicantCity", Types.VARCHAR},
		{"applicantParish", Types.VARCHAR},
		{"applicantTelephoneNum", Types.VARCHAR},
		{"applicantEmailAdd", Types.VARCHAR},
		{"applicantDateBirth", Types.TIMESTAMP},
		{"applicantPlaceOfBirthTown", Types.VARCHAR},
		{"applicantPlaceOfBirthParish", Types.VARCHAR},
		{"applicantPlaceOfBirthCountry", Types.VARCHAR},
		{"applicantNationality", Types.VARCHAR},
		{"applicantNisNum", Types.VARCHAR},
		{"applicantSocialNum", Types.VARCHAR},
		{"applicantNationalNum", Types.VARCHAR},
		{"applicantRegistrationNum", Types.VARCHAR},
		{"maritalStatusDetails", Types.VARCHAR},
		{"applicantRelationship", Types.VARCHAR},
		{"applicantSecTelephone", Types.VARCHAR},
		{"applicantSecMail", Types.VARCHAR},
		{"applicantSecAddress", Types.VARCHAR},
		{"applicantSecAddressParish", Types.VARCHAR},
		{"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fitPropPersonalDetailInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantMiddleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantSurname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantFormerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAlias", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantStreetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantStreetNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPostalCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTownName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTelephoneNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantEmailAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantDateBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicantPlaceOfBirthTown", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPlaceOfBirthParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantPlaceOfBirthCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantNationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantNisNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantSocialNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantNationalNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRegistrationNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maritalStatusDetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRelationship", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantSecTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantSecMail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantSecAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantSecAddressParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_fitprop_personal (fitPropPersonalDetailInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicantFirstName VARCHAR(75) null,applicantMiddleName VARCHAR(75) null,applicantSurname VARCHAR(75) null,applicantFormerName VARCHAR(75) null,applicantAlias VARCHAR(75) null,applicantStreetName VARCHAR(75) null,applicantStreetNo VARCHAR(75) null,applicantPostalCode VARCHAR(75) null,applicantCountry VARCHAR(75) null,applicantTownName VARCHAR(75) null,applicantCity VARCHAR(75) null,applicantParish VARCHAR(75) null,applicantTelephoneNum VARCHAR(75) null,applicantEmailAdd VARCHAR(75) null,applicantDateBirth DATE null,applicantPlaceOfBirthTown VARCHAR(75) null,applicantPlaceOfBirthParish VARCHAR(75) null,applicantPlaceOfBirthCountry VARCHAR(75) null,applicantNationality VARCHAR(75) null,applicantNisNum VARCHAR(75) null,applicantSocialNum VARCHAR(75) null,applicantNationalNum VARCHAR(75) null,applicantRegistrationNum VARCHAR(75) null,maritalStatusDetails VARCHAR(75) null,applicantRelationship VARCHAR(75) null,applicantSecTelephone VARCHAR(75) null,applicantSecMail VARCHAR(75) null,applicantSecAddress VARCHAR(75) null,applicantSecAddressParish VARCHAR(75) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_fitprop_personal";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fitPropPersonalDetailInfo.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_fitprop_personal.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FitPropPersonalDetailInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fitPropPersonalDetailInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFitPropPersonalDetailInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fitPropPersonalDetailInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FitPropPersonalDetailInfo.class;
	}

	@Override
	public String getModelClassName() {
		return FitPropPersonalDetailInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FitPropPersonalDetailInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FitPropPersonalDetailInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FitPropPersonalDetailInfo, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FitPropPersonalDetailInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FitPropPersonalDetailInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FitPropPersonalDetailInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FitPropPersonalDetailInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FitPropPersonalDetailInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FitPropPersonalDetailInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<FitPropPersonalDetailInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<FitPropPersonalDetailInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FitPropPersonalDetailInfo, Object>>();

			attributeGetterFunctions.put(
				"fitPropPersonalDetailInfoId",
				FitPropPersonalDetailInfo::getFitPropPersonalDetailInfoId);
			attributeGetterFunctions.put(
				"groupId", FitPropPersonalDetailInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FitPropPersonalDetailInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FitPropPersonalDetailInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", FitPropPersonalDetailInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", FitPropPersonalDetailInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FitPropPersonalDetailInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"applicantFirstName",
				FitPropPersonalDetailInfo::getApplicantFirstName);
			attributeGetterFunctions.put(
				"applicantMiddleName",
				FitPropPersonalDetailInfo::getApplicantMiddleName);
			attributeGetterFunctions.put(
				"applicantSurname",
				FitPropPersonalDetailInfo::getApplicantSurname);
			attributeGetterFunctions.put(
				"applicantFormerName",
				FitPropPersonalDetailInfo::getApplicantFormerName);
			attributeGetterFunctions.put(
				"applicantAlias", FitPropPersonalDetailInfo::getApplicantAlias);
			attributeGetterFunctions.put(
				"applicantStreetName",
				FitPropPersonalDetailInfo::getApplicantStreetName);
			attributeGetterFunctions.put(
				"applicantStreetNo",
				FitPropPersonalDetailInfo::getApplicantStreetNo);
			attributeGetterFunctions.put(
				"applicantPostalCode",
				FitPropPersonalDetailInfo::getApplicantPostalCode);
			attributeGetterFunctions.put(
				"applicantCountry",
				FitPropPersonalDetailInfo::getApplicantCountry);
			attributeGetterFunctions.put(
				"applicantTownName",
				FitPropPersonalDetailInfo::getApplicantTownName);
			attributeGetterFunctions.put(
				"applicantCity", FitPropPersonalDetailInfo::getApplicantCity);
			attributeGetterFunctions.put(
				"applicantParish",
				FitPropPersonalDetailInfo::getApplicantParish);
			attributeGetterFunctions.put(
				"applicantTelephoneNum",
				FitPropPersonalDetailInfo::getApplicantTelephoneNum);
			attributeGetterFunctions.put(
				"applicantEmailAdd",
				FitPropPersonalDetailInfo::getApplicantEmailAdd);
			attributeGetterFunctions.put(
				"applicantDateBirth",
				FitPropPersonalDetailInfo::getApplicantDateBirth);
			attributeGetterFunctions.put(
				"applicantPlaceOfBirthTown",
				FitPropPersonalDetailInfo::getApplicantPlaceOfBirthTown);
			attributeGetterFunctions.put(
				"applicantPlaceOfBirthParish",
				FitPropPersonalDetailInfo::getApplicantPlaceOfBirthParish);
			attributeGetterFunctions.put(
				"applicantPlaceOfBirthCountry",
				FitPropPersonalDetailInfo::getApplicantPlaceOfBirthCountry);
			attributeGetterFunctions.put(
				"applicantNationality",
				FitPropPersonalDetailInfo::getApplicantNationality);
			attributeGetterFunctions.put(
				"applicantNisNum",
				FitPropPersonalDetailInfo::getApplicantNisNum);
			attributeGetterFunctions.put(
				"applicantSocialNum",
				FitPropPersonalDetailInfo::getApplicantSocialNum);
			attributeGetterFunctions.put(
				"applicantNationalNum",
				FitPropPersonalDetailInfo::getApplicantNationalNum);
			attributeGetterFunctions.put(
				"applicantRegistrationNum",
				FitPropPersonalDetailInfo::getApplicantRegistrationNum);
			attributeGetterFunctions.put(
				"maritalStatusDetails",
				FitPropPersonalDetailInfo::getMaritalStatusDetails);
			attributeGetterFunctions.put(
				"applicantRelationship",
				FitPropPersonalDetailInfo::getApplicantRelationship);
			attributeGetterFunctions.put(
				"applicantSecTelephone",
				FitPropPersonalDetailInfo::getApplicantSecTelephone);
			attributeGetterFunctions.put(
				"applicantSecMail",
				FitPropPersonalDetailInfo::getApplicantSecMail);
			attributeGetterFunctions.put(
				"applicantSecAddress",
				FitPropPersonalDetailInfo::getApplicantSecAddress);
			attributeGetterFunctions.put(
				"applicantSecAddressParish",
				FitPropPersonalDetailInfo::getApplicantSecAddressParish);
			attributeGetterFunctions.put(
				"hsraApplicationId",
				FitPropPersonalDetailInfo::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FitPropPersonalDetailInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FitPropPersonalDetailInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FitPropPersonalDetailInfo, ?>>();

			attributeSetterBiConsumers.put(
				"fitPropPersonalDetailInfoId",
				(BiConsumer<FitPropPersonalDetailInfo, Long>)
					FitPropPersonalDetailInfo::setFitPropPersonalDetailInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FitPropPersonalDetailInfo, Long>)
					FitPropPersonalDetailInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FitPropPersonalDetailInfo, Long>)
					FitPropPersonalDetailInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FitPropPersonalDetailInfo, Long>)
					FitPropPersonalDetailInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FitPropPersonalDetailInfo, Date>)
					FitPropPersonalDetailInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FitPropPersonalDetailInfo, Date>)
					FitPropPersonalDetailInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicantFirstName",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantFirstName);
			attributeSetterBiConsumers.put(
				"applicantMiddleName",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantMiddleName);
			attributeSetterBiConsumers.put(
				"applicantSurname",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantSurname);
			attributeSetterBiConsumers.put(
				"applicantFormerName",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantFormerName);
			attributeSetterBiConsumers.put(
				"applicantAlias",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantAlias);
			attributeSetterBiConsumers.put(
				"applicantStreetName",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantStreetName);
			attributeSetterBiConsumers.put(
				"applicantStreetNo",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantStreetNo);
			attributeSetterBiConsumers.put(
				"applicantPostalCode",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantPostalCode);
			attributeSetterBiConsumers.put(
				"applicantCountry",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantCountry);
			attributeSetterBiConsumers.put(
				"applicantTownName",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantTownName);
			attributeSetterBiConsumers.put(
				"applicantCity",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantCity);
			attributeSetterBiConsumers.put(
				"applicantParish",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantParish);
			attributeSetterBiConsumers.put(
				"applicantTelephoneNum",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantTelephoneNum);
			attributeSetterBiConsumers.put(
				"applicantEmailAdd",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantEmailAdd);
			attributeSetterBiConsumers.put(
				"applicantDateBirth",
				(BiConsumer<FitPropPersonalDetailInfo, Date>)
					FitPropPersonalDetailInfo::setApplicantDateBirth);
			attributeSetterBiConsumers.put(
				"applicantPlaceOfBirthTown",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantPlaceOfBirthTown);
			attributeSetterBiConsumers.put(
				"applicantPlaceOfBirthParish",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantPlaceOfBirthParish);
			attributeSetterBiConsumers.put(
				"applicantPlaceOfBirthCountry",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantPlaceOfBirthCountry);
			attributeSetterBiConsumers.put(
				"applicantNationality",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantNationality);
			attributeSetterBiConsumers.put(
				"applicantNisNum",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantNisNum);
			attributeSetterBiConsumers.put(
				"applicantSocialNum",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantSocialNum);
			attributeSetterBiConsumers.put(
				"applicantNationalNum",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantNationalNum);
			attributeSetterBiConsumers.put(
				"applicantRegistrationNum",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantRegistrationNum);
			attributeSetterBiConsumers.put(
				"maritalStatusDetails",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setMaritalStatusDetails);
			attributeSetterBiConsumers.put(
				"applicantRelationship",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantRelationship);
			attributeSetterBiConsumers.put(
				"applicantSecTelephone",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantSecTelephone);
			attributeSetterBiConsumers.put(
				"applicantSecMail",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantSecMail);
			attributeSetterBiConsumers.put(
				"applicantSecAddress",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantSecAddress);
			attributeSetterBiConsumers.put(
				"applicantSecAddressParish",
				(BiConsumer<FitPropPersonalDetailInfo, String>)
					FitPropPersonalDetailInfo::setApplicantSecAddressParish);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<FitPropPersonalDetailInfo, Long>)
					FitPropPersonalDetailInfo::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFitPropPersonalDetailInfoId() {
		return _fitPropPersonalDetailInfoId;
	}

	@Override
	public void setFitPropPersonalDetailInfoId(
		long fitPropPersonalDetailInfoId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fitPropPersonalDetailInfoId = fitPropPersonalDetailInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicantFirstName() {
		if (_applicantFirstName == null) {
			return "";
		}
		else {
			return _applicantFirstName;
		}
	}

	@Override
	public void setApplicantFirstName(String applicantFirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantFirstName = applicantFirstName;
	}

	@JSON
	@Override
	public String getApplicantMiddleName() {
		if (_applicantMiddleName == null) {
			return "";
		}
		else {
			return _applicantMiddleName;
		}
	}

	@Override
	public void setApplicantMiddleName(String applicantMiddleName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantMiddleName = applicantMiddleName;
	}

	@JSON
	@Override
	public String getApplicantSurname() {
		if (_applicantSurname == null) {
			return "";
		}
		else {
			return _applicantSurname;
		}
	}

	@Override
	public void setApplicantSurname(String applicantSurname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantSurname = applicantSurname;
	}

	@JSON
	@Override
	public String getApplicantFormerName() {
		if (_applicantFormerName == null) {
			return "";
		}
		else {
			return _applicantFormerName;
		}
	}

	@Override
	public void setApplicantFormerName(String applicantFormerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantFormerName = applicantFormerName;
	}

	@JSON
	@Override
	public String getApplicantAlias() {
		if (_applicantAlias == null) {
			return "";
		}
		else {
			return _applicantAlias;
		}
	}

	@Override
	public void setApplicantAlias(String applicantAlias) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantAlias = applicantAlias;
	}

	@JSON
	@Override
	public String getApplicantStreetName() {
		if (_applicantStreetName == null) {
			return "";
		}
		else {
			return _applicantStreetName;
		}
	}

	@Override
	public void setApplicantStreetName(String applicantStreetName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantStreetName = applicantStreetName;
	}

	@JSON
	@Override
	public String getApplicantStreetNo() {
		if (_applicantStreetNo == null) {
			return "";
		}
		else {
			return _applicantStreetNo;
		}
	}

	@Override
	public void setApplicantStreetNo(String applicantStreetNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantStreetNo = applicantStreetNo;
	}

	@JSON
	@Override
	public String getApplicantPostalCode() {
		if (_applicantPostalCode == null) {
			return "";
		}
		else {
			return _applicantPostalCode;
		}
	}

	@Override
	public void setApplicantPostalCode(String applicantPostalCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantPostalCode = applicantPostalCode;
	}

	@JSON
	@Override
	public String getApplicantCountry() {
		if (_applicantCountry == null) {
			return "";
		}
		else {
			return _applicantCountry;
		}
	}

	@Override
	public void setApplicantCountry(String applicantCountry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantCountry = applicantCountry;
	}

	@JSON
	@Override
	public String getApplicantTownName() {
		if (_applicantTownName == null) {
			return "";
		}
		else {
			return _applicantTownName;
		}
	}

	@Override
	public void setApplicantTownName(String applicantTownName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantTownName = applicantTownName;
	}

	@JSON
	@Override
	public String getApplicantCity() {
		if (_applicantCity == null) {
			return "";
		}
		else {
			return _applicantCity;
		}
	}

	@Override
	public void setApplicantCity(String applicantCity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantCity = applicantCity;
	}

	@JSON
	@Override
	public String getApplicantParish() {
		if (_applicantParish == null) {
			return "";
		}
		else {
			return _applicantParish;
		}
	}

	@Override
	public void setApplicantParish(String applicantParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantParish = applicantParish;
	}

	@JSON
	@Override
	public String getApplicantTelephoneNum() {
		if (_applicantTelephoneNum == null) {
			return "";
		}
		else {
			return _applicantTelephoneNum;
		}
	}

	@Override
	public void setApplicantTelephoneNum(String applicantTelephoneNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantTelephoneNum = applicantTelephoneNum;
	}

	@JSON
	@Override
	public String getApplicantEmailAdd() {
		if (_applicantEmailAdd == null) {
			return "";
		}
		else {
			return _applicantEmailAdd;
		}
	}

	@Override
	public void setApplicantEmailAdd(String applicantEmailAdd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantEmailAdd = applicantEmailAdd;
	}

	@JSON
	@Override
	public Date getApplicantDateBirth() {
		return _applicantDateBirth;
	}

	@Override
	public void setApplicantDateBirth(Date applicantDateBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantDateBirth = applicantDateBirth;
	}

	@JSON
	@Override
	public String getApplicantPlaceOfBirthTown() {
		if (_applicantPlaceOfBirthTown == null) {
			return "";
		}
		else {
			return _applicantPlaceOfBirthTown;
		}
	}

	@Override
	public void setApplicantPlaceOfBirthTown(String applicantPlaceOfBirthTown) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantPlaceOfBirthTown = applicantPlaceOfBirthTown;
	}

	@JSON
	@Override
	public String getApplicantPlaceOfBirthParish() {
		if (_applicantPlaceOfBirthParish == null) {
			return "";
		}
		else {
			return _applicantPlaceOfBirthParish;
		}
	}

	@Override
	public void setApplicantPlaceOfBirthParish(
		String applicantPlaceOfBirthParish) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantPlaceOfBirthParish = applicantPlaceOfBirthParish;
	}

	@JSON
	@Override
	public String getApplicantPlaceOfBirthCountry() {
		if (_applicantPlaceOfBirthCountry == null) {
			return "";
		}
		else {
			return _applicantPlaceOfBirthCountry;
		}
	}

	@Override
	public void setApplicantPlaceOfBirthCountry(
		String applicantPlaceOfBirthCountry) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantPlaceOfBirthCountry = applicantPlaceOfBirthCountry;
	}

	@JSON
	@Override
	public String getApplicantNationality() {
		if (_applicantNationality == null) {
			return "";
		}
		else {
			return _applicantNationality;
		}
	}

	@Override
	public void setApplicantNationality(String applicantNationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantNationality = applicantNationality;
	}

	@JSON
	@Override
	public String getApplicantNisNum() {
		if (_applicantNisNum == null) {
			return "";
		}
		else {
			return _applicantNisNum;
		}
	}

	@Override
	public void setApplicantNisNum(String applicantNisNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantNisNum = applicantNisNum;
	}

	@JSON
	@Override
	public String getApplicantSocialNum() {
		if (_applicantSocialNum == null) {
			return "";
		}
		else {
			return _applicantSocialNum;
		}
	}

	@Override
	public void setApplicantSocialNum(String applicantSocialNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantSocialNum = applicantSocialNum;
	}

	@JSON
	@Override
	public String getApplicantNationalNum() {
		if (_applicantNationalNum == null) {
			return "";
		}
		else {
			return _applicantNationalNum;
		}
	}

	@Override
	public void setApplicantNationalNum(String applicantNationalNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantNationalNum = applicantNationalNum;
	}

	@JSON
	@Override
	public String getApplicantRegistrationNum() {
		if (_applicantRegistrationNum == null) {
			return "";
		}
		else {
			return _applicantRegistrationNum;
		}
	}

	@Override
	public void setApplicantRegistrationNum(String applicantRegistrationNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantRegistrationNum = applicantRegistrationNum;
	}

	@JSON
	@Override
	public String getMaritalStatusDetails() {
		if (_maritalStatusDetails == null) {
			return "";
		}
		else {
			return _maritalStatusDetails;
		}
	}

	@Override
	public void setMaritalStatusDetails(String maritalStatusDetails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatusDetails = maritalStatusDetails;
	}

	@JSON
	@Override
	public String getApplicantRelationship() {
		if (_applicantRelationship == null) {
			return "";
		}
		else {
			return _applicantRelationship;
		}
	}

	@Override
	public void setApplicantRelationship(String applicantRelationship) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantRelationship = applicantRelationship;
	}

	@JSON
	@Override
	public String getApplicantSecTelephone() {
		if (_applicantSecTelephone == null) {
			return "";
		}
		else {
			return _applicantSecTelephone;
		}
	}

	@Override
	public void setApplicantSecTelephone(String applicantSecTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantSecTelephone = applicantSecTelephone;
	}

	@JSON
	@Override
	public String getApplicantSecMail() {
		if (_applicantSecMail == null) {
			return "";
		}
		else {
			return _applicantSecMail;
		}
	}

	@Override
	public void setApplicantSecMail(String applicantSecMail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantSecMail = applicantSecMail;
	}

	@JSON
	@Override
	public String getApplicantSecAddress() {
		if (_applicantSecAddress == null) {
			return "";
		}
		else {
			return _applicantSecAddress;
		}
	}

	@Override
	public void setApplicantSecAddress(String applicantSecAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantSecAddress = applicantSecAddress;
	}

	@JSON
	@Override
	public String getApplicantSecAddressParish() {
		if (_applicantSecAddressParish == null) {
			return "";
		}
		else {
			return _applicantSecAddressParish;
		}
	}

	@Override
	public void setApplicantSecAddressParish(String applicantSecAddressParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantSecAddressParish = applicantSecAddressParish;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FitPropPersonalDetailInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FitPropPersonalDetailInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FitPropPersonalDetailInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FitPropPersonalDetailInfoImpl fitPropPersonalDetailInfoImpl =
			new FitPropPersonalDetailInfoImpl();

		fitPropPersonalDetailInfoImpl.setFitPropPersonalDetailInfoId(
			getFitPropPersonalDetailInfoId());
		fitPropPersonalDetailInfoImpl.setGroupId(getGroupId());
		fitPropPersonalDetailInfoImpl.setCompanyId(getCompanyId());
		fitPropPersonalDetailInfoImpl.setUserId(getUserId());
		fitPropPersonalDetailInfoImpl.setUserName(getUserName());
		fitPropPersonalDetailInfoImpl.setCreateDate(getCreateDate());
		fitPropPersonalDetailInfoImpl.setModifiedDate(getModifiedDate());
		fitPropPersonalDetailInfoImpl.setApplicantFirstName(
			getApplicantFirstName());
		fitPropPersonalDetailInfoImpl.setApplicantMiddleName(
			getApplicantMiddleName());
		fitPropPersonalDetailInfoImpl.setApplicantSurname(
			getApplicantSurname());
		fitPropPersonalDetailInfoImpl.setApplicantFormerName(
			getApplicantFormerName());
		fitPropPersonalDetailInfoImpl.setApplicantAlias(getApplicantAlias());
		fitPropPersonalDetailInfoImpl.setApplicantStreetName(
			getApplicantStreetName());
		fitPropPersonalDetailInfoImpl.setApplicantStreetNo(
			getApplicantStreetNo());
		fitPropPersonalDetailInfoImpl.setApplicantPostalCode(
			getApplicantPostalCode());
		fitPropPersonalDetailInfoImpl.setApplicantCountry(
			getApplicantCountry());
		fitPropPersonalDetailInfoImpl.setApplicantTownName(
			getApplicantTownName());
		fitPropPersonalDetailInfoImpl.setApplicantCity(getApplicantCity());
		fitPropPersonalDetailInfoImpl.setApplicantParish(getApplicantParish());
		fitPropPersonalDetailInfoImpl.setApplicantTelephoneNum(
			getApplicantTelephoneNum());
		fitPropPersonalDetailInfoImpl.setApplicantEmailAdd(
			getApplicantEmailAdd());
		fitPropPersonalDetailInfoImpl.setApplicantDateBirth(
			getApplicantDateBirth());
		fitPropPersonalDetailInfoImpl.setApplicantPlaceOfBirthTown(
			getApplicantPlaceOfBirthTown());
		fitPropPersonalDetailInfoImpl.setApplicantPlaceOfBirthParish(
			getApplicantPlaceOfBirthParish());
		fitPropPersonalDetailInfoImpl.setApplicantPlaceOfBirthCountry(
			getApplicantPlaceOfBirthCountry());
		fitPropPersonalDetailInfoImpl.setApplicantNationality(
			getApplicantNationality());
		fitPropPersonalDetailInfoImpl.setApplicantNisNum(getApplicantNisNum());
		fitPropPersonalDetailInfoImpl.setApplicantSocialNum(
			getApplicantSocialNum());
		fitPropPersonalDetailInfoImpl.setApplicantNationalNum(
			getApplicantNationalNum());
		fitPropPersonalDetailInfoImpl.setApplicantRegistrationNum(
			getApplicantRegistrationNum());
		fitPropPersonalDetailInfoImpl.setMaritalStatusDetails(
			getMaritalStatusDetails());
		fitPropPersonalDetailInfoImpl.setApplicantRelationship(
			getApplicantRelationship());
		fitPropPersonalDetailInfoImpl.setApplicantSecTelephone(
			getApplicantSecTelephone());
		fitPropPersonalDetailInfoImpl.setApplicantSecMail(
			getApplicantSecMail());
		fitPropPersonalDetailInfoImpl.setApplicantSecAddress(
			getApplicantSecAddress());
		fitPropPersonalDetailInfoImpl.setApplicantSecAddressParish(
			getApplicantSecAddressParish());
		fitPropPersonalDetailInfoImpl.setHsraApplicationId(
			getHsraApplicationId());

		fitPropPersonalDetailInfoImpl.resetOriginalValues();

		return fitPropPersonalDetailInfoImpl;
	}

	@Override
	public FitPropPersonalDetailInfo cloneWithOriginalValues() {
		FitPropPersonalDetailInfoImpl fitPropPersonalDetailInfoImpl =
			new FitPropPersonalDetailInfoImpl();

		fitPropPersonalDetailInfoImpl.setFitPropPersonalDetailInfoId(
			this.<Long>getColumnOriginalValue("fitPropPersonalDetailInfoId"));
		fitPropPersonalDetailInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		fitPropPersonalDetailInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		fitPropPersonalDetailInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		fitPropPersonalDetailInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		fitPropPersonalDetailInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		fitPropPersonalDetailInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		fitPropPersonalDetailInfoImpl.setApplicantFirstName(
			this.<String>getColumnOriginalValue("applicantFirstName"));
		fitPropPersonalDetailInfoImpl.setApplicantMiddleName(
			this.<String>getColumnOriginalValue("applicantMiddleName"));
		fitPropPersonalDetailInfoImpl.setApplicantSurname(
			this.<String>getColumnOriginalValue("applicantSurname"));
		fitPropPersonalDetailInfoImpl.setApplicantFormerName(
			this.<String>getColumnOriginalValue("applicantFormerName"));
		fitPropPersonalDetailInfoImpl.setApplicantAlias(
			this.<String>getColumnOriginalValue("applicantAlias"));
		fitPropPersonalDetailInfoImpl.setApplicantStreetName(
			this.<String>getColumnOriginalValue("applicantStreetName"));
		fitPropPersonalDetailInfoImpl.setApplicantStreetNo(
			this.<String>getColumnOriginalValue("applicantStreetNo"));
		fitPropPersonalDetailInfoImpl.setApplicantPostalCode(
			this.<String>getColumnOriginalValue("applicantPostalCode"));
		fitPropPersonalDetailInfoImpl.setApplicantCountry(
			this.<String>getColumnOriginalValue("applicantCountry"));
		fitPropPersonalDetailInfoImpl.setApplicantTownName(
			this.<String>getColumnOriginalValue("applicantTownName"));
		fitPropPersonalDetailInfoImpl.setApplicantCity(
			this.<String>getColumnOriginalValue("applicantCity"));
		fitPropPersonalDetailInfoImpl.setApplicantParish(
			this.<String>getColumnOriginalValue("applicantParish"));
		fitPropPersonalDetailInfoImpl.setApplicantTelephoneNum(
			this.<String>getColumnOriginalValue("applicantTelephoneNum"));
		fitPropPersonalDetailInfoImpl.setApplicantEmailAdd(
			this.<String>getColumnOriginalValue("applicantEmailAdd"));
		fitPropPersonalDetailInfoImpl.setApplicantDateBirth(
			this.<Date>getColumnOriginalValue("applicantDateBirth"));
		fitPropPersonalDetailInfoImpl.setApplicantPlaceOfBirthTown(
			this.<String>getColumnOriginalValue("applicantPlaceOfBirthTown"));
		fitPropPersonalDetailInfoImpl.setApplicantPlaceOfBirthParish(
			this.<String>getColumnOriginalValue("applicantPlaceOfBirthParish"));
		fitPropPersonalDetailInfoImpl.setApplicantPlaceOfBirthCountry(
			this.<String>getColumnOriginalValue(
				"applicantPlaceOfBirthCountry"));
		fitPropPersonalDetailInfoImpl.setApplicantNationality(
			this.<String>getColumnOriginalValue("applicantNationality"));
		fitPropPersonalDetailInfoImpl.setApplicantNisNum(
			this.<String>getColumnOriginalValue("applicantNisNum"));
		fitPropPersonalDetailInfoImpl.setApplicantSocialNum(
			this.<String>getColumnOriginalValue("applicantSocialNum"));
		fitPropPersonalDetailInfoImpl.setApplicantNationalNum(
			this.<String>getColumnOriginalValue("applicantNationalNum"));
		fitPropPersonalDetailInfoImpl.setApplicantRegistrationNum(
			this.<String>getColumnOriginalValue("applicantRegistrationNum"));
		fitPropPersonalDetailInfoImpl.setMaritalStatusDetails(
			this.<String>getColumnOriginalValue("maritalStatusDetails"));
		fitPropPersonalDetailInfoImpl.setApplicantRelationship(
			this.<String>getColumnOriginalValue("applicantRelationship"));
		fitPropPersonalDetailInfoImpl.setApplicantSecTelephone(
			this.<String>getColumnOriginalValue("applicantSecTelephone"));
		fitPropPersonalDetailInfoImpl.setApplicantSecMail(
			this.<String>getColumnOriginalValue("applicantSecMail"));
		fitPropPersonalDetailInfoImpl.setApplicantSecAddress(
			this.<String>getColumnOriginalValue("applicantSecAddress"));
		fitPropPersonalDetailInfoImpl.setApplicantSecAddressParish(
			this.<String>getColumnOriginalValue("applicantSecAddressParish"));
		fitPropPersonalDetailInfoImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return fitPropPersonalDetailInfoImpl;
	}

	@Override
	public int compareTo(FitPropPersonalDetailInfo fitPropPersonalDetailInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), fitPropPersonalDetailInfo.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FitPropPersonalDetailInfo)) {
			return false;
		}

		FitPropPersonalDetailInfo fitPropPersonalDetailInfo =
			(FitPropPersonalDetailInfo)object;

		long primaryKey = fitPropPersonalDetailInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FitPropPersonalDetailInfo> toCacheModel() {
		FitPropPersonalDetailInfoCacheModel
			fitPropPersonalDetailInfoCacheModel =
				new FitPropPersonalDetailInfoCacheModel();

		fitPropPersonalDetailInfoCacheModel.fitPropPersonalDetailInfoId =
			getFitPropPersonalDetailInfoId();

		fitPropPersonalDetailInfoCacheModel.groupId = getGroupId();

		fitPropPersonalDetailInfoCacheModel.companyId = getCompanyId();

		fitPropPersonalDetailInfoCacheModel.userId = getUserId();

		fitPropPersonalDetailInfoCacheModel.userName = getUserName();

		String userName = fitPropPersonalDetailInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fitPropPersonalDetailInfoCacheModel.createDate =
				createDate.getTime();
		}
		else {
			fitPropPersonalDetailInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fitPropPersonalDetailInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			fitPropPersonalDetailInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fitPropPersonalDetailInfoCacheModel.applicantFirstName =
			getApplicantFirstName();

		String applicantFirstName =
			fitPropPersonalDetailInfoCacheModel.applicantFirstName;

		if ((applicantFirstName != null) &&
			(applicantFirstName.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantFirstName = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantMiddleName =
			getApplicantMiddleName();

		String applicantMiddleName =
			fitPropPersonalDetailInfoCacheModel.applicantMiddleName;

		if ((applicantMiddleName != null) &&
			(applicantMiddleName.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantMiddleName = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantSurname =
			getApplicantSurname();

		String applicantSurname =
			fitPropPersonalDetailInfoCacheModel.applicantSurname;

		if ((applicantSurname != null) && (applicantSurname.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantSurname = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantFormerName =
			getApplicantFormerName();

		String applicantFormerName =
			fitPropPersonalDetailInfoCacheModel.applicantFormerName;

		if ((applicantFormerName != null) &&
			(applicantFormerName.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantFormerName = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantAlias =
			getApplicantAlias();

		String applicantAlias =
			fitPropPersonalDetailInfoCacheModel.applicantAlias;

		if ((applicantAlias != null) && (applicantAlias.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantAlias = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantStreetName =
			getApplicantStreetName();

		String applicantStreetName =
			fitPropPersonalDetailInfoCacheModel.applicantStreetName;

		if ((applicantStreetName != null) &&
			(applicantStreetName.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantStreetName = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantStreetNo =
			getApplicantStreetNo();

		String applicantStreetNo =
			fitPropPersonalDetailInfoCacheModel.applicantStreetNo;

		if ((applicantStreetNo != null) && (applicantStreetNo.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantStreetNo = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantPostalCode =
			getApplicantPostalCode();

		String applicantPostalCode =
			fitPropPersonalDetailInfoCacheModel.applicantPostalCode;

		if ((applicantPostalCode != null) &&
			(applicantPostalCode.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantPostalCode = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantCountry =
			getApplicantCountry();

		String applicantCountry =
			fitPropPersonalDetailInfoCacheModel.applicantCountry;

		if ((applicantCountry != null) && (applicantCountry.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantCountry = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantTownName =
			getApplicantTownName();

		String applicantTownName =
			fitPropPersonalDetailInfoCacheModel.applicantTownName;

		if ((applicantTownName != null) && (applicantTownName.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantTownName = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantCity = getApplicantCity();

		String applicantCity =
			fitPropPersonalDetailInfoCacheModel.applicantCity;

		if ((applicantCity != null) && (applicantCity.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantCity = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantParish =
			getApplicantParish();

		String applicantParish =
			fitPropPersonalDetailInfoCacheModel.applicantParish;

		if ((applicantParish != null) && (applicantParish.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantParish = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantTelephoneNum =
			getApplicantTelephoneNum();

		String applicantTelephoneNum =
			fitPropPersonalDetailInfoCacheModel.applicantTelephoneNum;

		if ((applicantTelephoneNum != null) &&
			(applicantTelephoneNum.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantTelephoneNum = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantEmailAdd =
			getApplicantEmailAdd();

		String applicantEmailAdd =
			fitPropPersonalDetailInfoCacheModel.applicantEmailAdd;

		if ((applicantEmailAdd != null) && (applicantEmailAdd.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantEmailAdd = null;
		}

		Date applicantDateBirth = getApplicantDateBirth();

		if (applicantDateBirth != null) {
			fitPropPersonalDetailInfoCacheModel.applicantDateBirth =
				applicantDateBirth.getTime();
		}
		else {
			fitPropPersonalDetailInfoCacheModel.applicantDateBirth =
				Long.MIN_VALUE;
		}

		fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthTown =
			getApplicantPlaceOfBirthTown();

		String applicantPlaceOfBirthTown =
			fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthTown;

		if ((applicantPlaceOfBirthTown != null) &&
			(applicantPlaceOfBirthTown.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthTown =
				null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthParish =
			getApplicantPlaceOfBirthParish();

		String applicantPlaceOfBirthParish =
			fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthParish;

		if ((applicantPlaceOfBirthParish != null) &&
			(applicantPlaceOfBirthParish.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthParish =
				null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthCountry =
			getApplicantPlaceOfBirthCountry();

		String applicantPlaceOfBirthCountry =
			fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthCountry;

		if ((applicantPlaceOfBirthCountry != null) &&
			(applicantPlaceOfBirthCountry.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantPlaceOfBirthCountry =
				null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantNationality =
			getApplicantNationality();

		String applicantNationality =
			fitPropPersonalDetailInfoCacheModel.applicantNationality;

		if ((applicantNationality != null) &&
			(applicantNationality.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantNationality = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantNisNum =
			getApplicantNisNum();

		String applicantNisNum =
			fitPropPersonalDetailInfoCacheModel.applicantNisNum;

		if ((applicantNisNum != null) && (applicantNisNum.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantNisNum = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantSocialNum =
			getApplicantSocialNum();

		String applicantSocialNum =
			fitPropPersonalDetailInfoCacheModel.applicantSocialNum;

		if ((applicantSocialNum != null) &&
			(applicantSocialNum.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantSocialNum = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantNationalNum =
			getApplicantNationalNum();

		String applicantNationalNum =
			fitPropPersonalDetailInfoCacheModel.applicantNationalNum;

		if ((applicantNationalNum != null) &&
			(applicantNationalNum.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantNationalNum = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantRegistrationNum =
			getApplicantRegistrationNum();

		String applicantRegistrationNum =
			fitPropPersonalDetailInfoCacheModel.applicantRegistrationNum;

		if ((applicantRegistrationNum != null) &&
			(applicantRegistrationNum.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantRegistrationNum = null;
		}

		fitPropPersonalDetailInfoCacheModel.maritalStatusDetails =
			getMaritalStatusDetails();

		String maritalStatusDetails =
			fitPropPersonalDetailInfoCacheModel.maritalStatusDetails;

		if ((maritalStatusDetails != null) &&
			(maritalStatusDetails.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.maritalStatusDetails = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantRelationship =
			getApplicantRelationship();

		String applicantRelationship =
			fitPropPersonalDetailInfoCacheModel.applicantRelationship;

		if ((applicantRelationship != null) &&
			(applicantRelationship.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantRelationship = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantSecTelephone =
			getApplicantSecTelephone();

		String applicantSecTelephone =
			fitPropPersonalDetailInfoCacheModel.applicantSecTelephone;

		if ((applicantSecTelephone != null) &&
			(applicantSecTelephone.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantSecTelephone = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantSecMail =
			getApplicantSecMail();

		String applicantSecMail =
			fitPropPersonalDetailInfoCacheModel.applicantSecMail;

		if ((applicantSecMail != null) && (applicantSecMail.length() == 0)) {
			fitPropPersonalDetailInfoCacheModel.applicantSecMail = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantSecAddress =
			getApplicantSecAddress();

		String applicantSecAddress =
			fitPropPersonalDetailInfoCacheModel.applicantSecAddress;

		if ((applicantSecAddress != null) &&
			(applicantSecAddress.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantSecAddress = null;
		}

		fitPropPersonalDetailInfoCacheModel.applicantSecAddressParish =
			getApplicantSecAddressParish();

		String applicantSecAddressParish =
			fitPropPersonalDetailInfoCacheModel.applicantSecAddressParish;

		if ((applicantSecAddressParish != null) &&
			(applicantSecAddressParish.length() == 0)) {

			fitPropPersonalDetailInfoCacheModel.applicantSecAddressParish =
				null;
		}

		fitPropPersonalDetailInfoCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return fitPropPersonalDetailInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FitPropPersonalDetailInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FitPropPersonalDetailInfo, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FitPropPersonalDetailInfo, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FitPropPersonalDetailInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FitPropPersonalDetailInfo>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						FitPropPersonalDetailInfo.class, ModelWrapper.class);

	}

	private long _fitPropPersonalDetailInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicantFirstName;
	private String _applicantMiddleName;
	private String _applicantSurname;
	private String _applicantFormerName;
	private String _applicantAlias;
	private String _applicantStreetName;
	private String _applicantStreetNo;
	private String _applicantPostalCode;
	private String _applicantCountry;
	private String _applicantTownName;
	private String _applicantCity;
	private String _applicantParish;
	private String _applicantTelephoneNum;
	private String _applicantEmailAdd;
	private Date _applicantDateBirth;
	private String _applicantPlaceOfBirthTown;
	private String _applicantPlaceOfBirthParish;
	private String _applicantPlaceOfBirthCountry;
	private String _applicantNationality;
	private String _applicantNisNum;
	private String _applicantSocialNum;
	private String _applicantNationalNum;
	private String _applicantRegistrationNum;
	private String _maritalStatusDetails;
	private String _applicantRelationship;
	private String _applicantSecTelephone;
	private String _applicantSecMail;
	private String _applicantSecAddress;
	private String _applicantSecAddressParish;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FitPropPersonalDetailInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FitPropPersonalDetailInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"fitPropPersonalDetailInfoId", _fitPropPersonalDetailInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("applicantFirstName", _applicantFirstName);
		_columnOriginalValues.put("applicantMiddleName", _applicantMiddleName);
		_columnOriginalValues.put("applicantSurname", _applicantSurname);
		_columnOriginalValues.put("applicantFormerName", _applicantFormerName);
		_columnOriginalValues.put("applicantAlias", _applicantAlias);
		_columnOriginalValues.put("applicantStreetName", _applicantStreetName);
		_columnOriginalValues.put("applicantStreetNo", _applicantStreetNo);
		_columnOriginalValues.put("applicantPostalCode", _applicantPostalCode);
		_columnOriginalValues.put("applicantCountry", _applicantCountry);
		_columnOriginalValues.put("applicantTownName", _applicantTownName);
		_columnOriginalValues.put("applicantCity", _applicantCity);
		_columnOriginalValues.put("applicantParish", _applicantParish);
		_columnOriginalValues.put(
			"applicantTelephoneNum", _applicantTelephoneNum);
		_columnOriginalValues.put("applicantEmailAdd", _applicantEmailAdd);
		_columnOriginalValues.put("applicantDateBirth", _applicantDateBirth);
		_columnOriginalValues.put(
			"applicantPlaceOfBirthTown", _applicantPlaceOfBirthTown);
		_columnOriginalValues.put(
			"applicantPlaceOfBirthParish", _applicantPlaceOfBirthParish);
		_columnOriginalValues.put(
			"applicantPlaceOfBirthCountry", _applicantPlaceOfBirthCountry);
		_columnOriginalValues.put(
			"applicantNationality", _applicantNationality);
		_columnOriginalValues.put("applicantNisNum", _applicantNisNum);
		_columnOriginalValues.put("applicantSocialNum", _applicantSocialNum);
		_columnOriginalValues.put(
			"applicantNationalNum", _applicantNationalNum);
		_columnOriginalValues.put(
			"applicantRegistrationNum", _applicantRegistrationNum);
		_columnOriginalValues.put(
			"maritalStatusDetails", _maritalStatusDetails);
		_columnOriginalValues.put(
			"applicantRelationship", _applicantRelationship);
		_columnOriginalValues.put(
			"applicantSecTelephone", _applicantSecTelephone);
		_columnOriginalValues.put("applicantSecMail", _applicantSecMail);
		_columnOriginalValues.put("applicantSecAddress", _applicantSecAddress);
		_columnOriginalValues.put(
			"applicantSecAddressParish", _applicantSecAddressParish);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fitPropPersonalDetailInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("applicantFirstName", 128L);

		columnBitmasks.put("applicantMiddleName", 256L);

		columnBitmasks.put("applicantSurname", 512L);

		columnBitmasks.put("applicantFormerName", 1024L);

		columnBitmasks.put("applicantAlias", 2048L);

		columnBitmasks.put("applicantStreetName", 4096L);

		columnBitmasks.put("applicantStreetNo", 8192L);

		columnBitmasks.put("applicantPostalCode", 16384L);

		columnBitmasks.put("applicantCountry", 32768L);

		columnBitmasks.put("applicantTownName", 65536L);

		columnBitmasks.put("applicantCity", 131072L);

		columnBitmasks.put("applicantParish", 262144L);

		columnBitmasks.put("applicantTelephoneNum", 524288L);

		columnBitmasks.put("applicantEmailAdd", 1048576L);

		columnBitmasks.put("applicantDateBirth", 2097152L);

		columnBitmasks.put("applicantPlaceOfBirthTown", 4194304L);

		columnBitmasks.put("applicantPlaceOfBirthParish", 8388608L);

		columnBitmasks.put("applicantPlaceOfBirthCountry", 16777216L);

		columnBitmasks.put("applicantNationality", 33554432L);

		columnBitmasks.put("applicantNisNum", 67108864L);

		columnBitmasks.put("applicantSocialNum", 134217728L);

		columnBitmasks.put("applicantNationalNum", 268435456L);

		columnBitmasks.put("applicantRegistrationNum", 536870912L);

		columnBitmasks.put("maritalStatusDetails", 1073741824L);

		columnBitmasks.put("applicantRelationship", 2147483648L);

		columnBitmasks.put("applicantSecTelephone", 4294967296L);

		columnBitmasks.put("applicantSecMail", 8589934592L);

		columnBitmasks.put("applicantSecAddress", 17179869184L);

		columnBitmasks.put("applicantSecAddressParish", 34359738368L);

		columnBitmasks.put("hsraApplicationId", 68719476736L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FitPropPersonalDetailInfo _escapedModel;

}