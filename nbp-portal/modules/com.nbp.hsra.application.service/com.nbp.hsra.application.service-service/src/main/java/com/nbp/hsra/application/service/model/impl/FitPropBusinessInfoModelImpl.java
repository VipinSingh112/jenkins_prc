/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.FitPropBusinessInfo;
import com.nbp.hsra.application.service.model.FitPropBusinessInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FitPropBusinessInfo service. Represents a row in the &quot;nbp_hsra_fitprop_business&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FitPropBusinessInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FitPropBusinessInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FitPropBusinessInfoImpl
 * @generated
 */
@JSON(strict = true)
public class FitPropBusinessInfoModelImpl
	extends BaseModelImpl<FitPropBusinessInfo>
	implements FitPropBusinessInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fit prop business info model instance should use the <code>FitPropBusinessInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_fitprop_business";

	public static final Object[][] TABLE_COLUMNS = {
		{"fitPropBusinessInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"companyType", Types.VARCHAR},
		{"applicantBusinessName", Types.VARCHAR},
		{"applicantcomName", Types.VARCHAR},
		{"applicantComAddress", Types.VARCHAR},
		{"applicantComAddressParish", Types.VARCHAR},
		{"applicantComNo", Types.VARCHAR}, {"applicantComEmail", Types.VARCHAR},
		{"applicantComTelephone", Types.VARCHAR},
		{"applicantComTitle", Types.VARCHAR},
		{"materialTechnology", Types.VARCHAR}, {"relevantBox", Types.VARCHAR},
		{"corporateDirector", Types.VARCHAR},
		{"facilitySources", Types.VARCHAR}, {"criminalFraud", Types.VARCHAR},
		{"professionalSubject", Types.VARCHAR},
		{"employmentResign", Types.VARCHAR}, {"mentallyIll", Types.VARCHAR},
		{"bankruptAuthority", Types.VARCHAR},
		{"circumstancesEvent", Types.VARCHAR},
		{"partnershipHsra", Types.VARCHAR},
		{"facilityAssociated", Types.VARCHAR},
		{"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fitPropBusinessInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("companyType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantBusinessName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantcomName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantComAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantComAddressParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantComNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantComEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantComTelephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantComTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("materialTechnology", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("relevantBox", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("corporateDirector", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facilitySources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("criminalFraud", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("professionalSubject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employmentResign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mentallyIll", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankruptAuthority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("circumstancesEvent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partnershipHsra", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facilityAssociated", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_fitprop_business (fitPropBusinessInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyType VARCHAR(75) null,applicantBusinessName VARCHAR(75) null,applicantcomName VARCHAR(75) null,applicantComAddress VARCHAR(75) null,applicantComAddressParish VARCHAR(75) null,applicantComNo VARCHAR(75) null,applicantComEmail VARCHAR(75) null,applicantComTelephone VARCHAR(75) null,applicantComTitle VARCHAR(75) null,materialTechnology VARCHAR(75) null,relevantBox VARCHAR(75) null,corporateDirector VARCHAR(75) null,facilitySources VARCHAR(75) null,criminalFraud VARCHAR(75) null,professionalSubject VARCHAR(75) null,employmentResign VARCHAR(75) null,mentallyIll VARCHAR(75) null,bankruptAuthority VARCHAR(75) null,circumstancesEvent VARCHAR(75) null,partnershipHsra VARCHAR(75) null,facilityAssociated VARCHAR(75) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_fitprop_business";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fitPropBusinessInfo.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_fitprop_business.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FitPropBusinessInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fitPropBusinessInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFitPropBusinessInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fitPropBusinessInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FitPropBusinessInfo.class;
	}

	@Override
	public String getModelClassName() {
		return FitPropBusinessInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FitPropBusinessInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FitPropBusinessInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FitPropBusinessInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FitPropBusinessInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FitPropBusinessInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FitPropBusinessInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FitPropBusinessInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FitPropBusinessInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FitPropBusinessInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FitPropBusinessInfo, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FitPropBusinessInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FitPropBusinessInfo, Object>>();

			attributeGetterFunctions.put(
				"fitPropBusinessInfoId",
				FitPropBusinessInfo::getFitPropBusinessInfoId);
			attributeGetterFunctions.put(
				"groupId", FitPropBusinessInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FitPropBusinessInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FitPropBusinessInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", FitPropBusinessInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", FitPropBusinessInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FitPropBusinessInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"companyType", FitPropBusinessInfo::getCompanyType);
			attributeGetterFunctions.put(
				"applicantBusinessName",
				FitPropBusinessInfo::getApplicantBusinessName);
			attributeGetterFunctions.put(
				"applicantcomName", FitPropBusinessInfo::getApplicantcomName);
			attributeGetterFunctions.put(
				"applicantComAddress",
				FitPropBusinessInfo::getApplicantComAddress);
			attributeGetterFunctions.put(
				"applicantComAddressParish",
				FitPropBusinessInfo::getApplicantComAddressParish);
			attributeGetterFunctions.put(
				"applicantComNo", FitPropBusinessInfo::getApplicantComNo);
			attributeGetterFunctions.put(
				"applicantComEmail", FitPropBusinessInfo::getApplicantComEmail);
			attributeGetterFunctions.put(
				"applicantComTelephone",
				FitPropBusinessInfo::getApplicantComTelephone);
			attributeGetterFunctions.put(
				"applicantComTitle", FitPropBusinessInfo::getApplicantComTitle);
			attributeGetterFunctions.put(
				"materialTechnology",
				FitPropBusinessInfo::getMaterialTechnology);
			attributeGetterFunctions.put(
				"relevantBox", FitPropBusinessInfo::getRelevantBox);
			attributeGetterFunctions.put(
				"corporateDirector", FitPropBusinessInfo::getCorporateDirector);
			attributeGetterFunctions.put(
				"facilitySources", FitPropBusinessInfo::getFacilitySources);
			attributeGetterFunctions.put(
				"criminalFraud", FitPropBusinessInfo::getCriminalFraud);
			attributeGetterFunctions.put(
				"professionalSubject",
				FitPropBusinessInfo::getProfessionalSubject);
			attributeGetterFunctions.put(
				"employmentResign", FitPropBusinessInfo::getEmploymentResign);
			attributeGetterFunctions.put(
				"mentallyIll", FitPropBusinessInfo::getMentallyIll);
			attributeGetterFunctions.put(
				"bankruptAuthority", FitPropBusinessInfo::getBankruptAuthority);
			attributeGetterFunctions.put(
				"circumstancesEvent",
				FitPropBusinessInfo::getCircumstancesEvent);
			attributeGetterFunctions.put(
				"partnershipHsra", FitPropBusinessInfo::getPartnershipHsra);
			attributeGetterFunctions.put(
				"facilityAssociated",
				FitPropBusinessInfo::getFacilityAssociated);
			attributeGetterFunctions.put(
				"hsraApplicationId", FitPropBusinessInfo::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FitPropBusinessInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FitPropBusinessInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FitPropBusinessInfo, ?>>();

			attributeSetterBiConsumers.put(
				"fitPropBusinessInfoId",
				(BiConsumer<FitPropBusinessInfo, Long>)
					FitPropBusinessInfo::setFitPropBusinessInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FitPropBusinessInfo, Long>)
					FitPropBusinessInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FitPropBusinessInfo, Long>)
					FitPropBusinessInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FitPropBusinessInfo, Long>)
					FitPropBusinessInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FitPropBusinessInfo, Date>)
					FitPropBusinessInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FitPropBusinessInfo, Date>)
					FitPropBusinessInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"companyType",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setCompanyType);
			attributeSetterBiConsumers.put(
				"applicantBusinessName",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setApplicantBusinessName);
			attributeSetterBiConsumers.put(
				"applicantcomName",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setApplicantcomName);
			attributeSetterBiConsumers.put(
				"applicantComAddress",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setApplicantComAddress);
			attributeSetterBiConsumers.put(
				"applicantComAddressParish",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setApplicantComAddressParish);
			attributeSetterBiConsumers.put(
				"applicantComNo",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setApplicantComNo);
			attributeSetterBiConsumers.put(
				"applicantComEmail",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setApplicantComEmail);
			attributeSetterBiConsumers.put(
				"applicantComTelephone",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setApplicantComTelephone);
			attributeSetterBiConsumers.put(
				"applicantComTitle",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setApplicantComTitle);
			attributeSetterBiConsumers.put(
				"materialTechnology",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setMaterialTechnology);
			attributeSetterBiConsumers.put(
				"relevantBox",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setRelevantBox);
			attributeSetterBiConsumers.put(
				"corporateDirector",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setCorporateDirector);
			attributeSetterBiConsumers.put(
				"facilitySources",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setFacilitySources);
			attributeSetterBiConsumers.put(
				"criminalFraud",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setCriminalFraud);
			attributeSetterBiConsumers.put(
				"professionalSubject",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setProfessionalSubject);
			attributeSetterBiConsumers.put(
				"employmentResign",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setEmploymentResign);
			attributeSetterBiConsumers.put(
				"mentallyIll",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setMentallyIll);
			attributeSetterBiConsumers.put(
				"bankruptAuthority",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setBankruptAuthority);
			attributeSetterBiConsumers.put(
				"circumstancesEvent",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setCircumstancesEvent);
			attributeSetterBiConsumers.put(
				"partnershipHsra",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setPartnershipHsra);
			attributeSetterBiConsumers.put(
				"facilityAssociated",
				(BiConsumer<FitPropBusinessInfo, String>)
					FitPropBusinessInfo::setFacilityAssociated);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<FitPropBusinessInfo, Long>)
					FitPropBusinessInfo::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getFitPropBusinessInfoId() {
		return _fitPropBusinessInfoId;
	}

	@Override
	public void setFitPropBusinessInfoId(long fitPropBusinessInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fitPropBusinessInfoId = fitPropBusinessInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCompanyType() {
		if (_companyType == null) {
			return "";
		}
		else {
			return _companyType;
		}
	}

	@Override
	public void setCompanyType(String companyType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyType = companyType;
	}

	@JSON
	@Override
	public String getApplicantBusinessName() {
		if (_applicantBusinessName == null) {
			return "";
		}
		else {
			return _applicantBusinessName;
		}
	}

	@Override
	public void setApplicantBusinessName(String applicantBusinessName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantBusinessName = applicantBusinessName;
	}

	@JSON
	@Override
	public String getApplicantcomName() {
		if (_applicantcomName == null) {
			return "";
		}
		else {
			return _applicantcomName;
		}
	}

	@Override
	public void setApplicantcomName(String applicantcomName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantcomName = applicantcomName;
	}

	@JSON
	@Override
	public String getApplicantComAddress() {
		if (_applicantComAddress == null) {
			return "";
		}
		else {
			return _applicantComAddress;
		}
	}

	@Override
	public void setApplicantComAddress(String applicantComAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantComAddress = applicantComAddress;
	}

	@JSON
	@Override
	public String getApplicantComAddressParish() {
		if (_applicantComAddressParish == null) {
			return "";
		}
		else {
			return _applicantComAddressParish;
		}
	}

	@Override
	public void setApplicantComAddressParish(String applicantComAddressParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantComAddressParish = applicantComAddressParish;
	}

	@JSON
	@Override
	public String getApplicantComNo() {
		if (_applicantComNo == null) {
			return "";
		}
		else {
			return _applicantComNo;
		}
	}

	@Override
	public void setApplicantComNo(String applicantComNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantComNo = applicantComNo;
	}

	@JSON
	@Override
	public String getApplicantComEmail() {
		if (_applicantComEmail == null) {
			return "";
		}
		else {
			return _applicantComEmail;
		}
	}

	@Override
	public void setApplicantComEmail(String applicantComEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantComEmail = applicantComEmail;
	}

	@JSON
	@Override
	public String getApplicantComTelephone() {
		if (_applicantComTelephone == null) {
			return "";
		}
		else {
			return _applicantComTelephone;
		}
	}

	@Override
	public void setApplicantComTelephone(String applicantComTelephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantComTelephone = applicantComTelephone;
	}

	@JSON
	@Override
	public String getApplicantComTitle() {
		if (_applicantComTitle == null) {
			return "";
		}
		else {
			return _applicantComTitle;
		}
	}

	@Override
	public void setApplicantComTitle(String applicantComTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantComTitle = applicantComTitle;
	}

	@JSON
	@Override
	public String getMaterialTechnology() {
		if (_materialTechnology == null) {
			return "";
		}
		else {
			return _materialTechnology;
		}
	}

	@Override
	public void setMaterialTechnology(String materialTechnology) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_materialTechnology = materialTechnology;
	}

	@JSON
	@Override
	public String getRelevantBox() {
		if (_relevantBox == null) {
			return "";
		}
		else {
			return _relevantBox;
		}
	}

	@Override
	public void setRelevantBox(String relevantBox) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_relevantBox = relevantBox;
	}

	@JSON
	@Override
	public String getCorporateDirector() {
		if (_corporateDirector == null) {
			return "";
		}
		else {
			return _corporateDirector;
		}
	}

	@Override
	public void setCorporateDirector(String corporateDirector) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_corporateDirector = corporateDirector;
	}

	@JSON
	@Override
	public String getFacilitySources() {
		if (_facilitySources == null) {
			return "";
		}
		else {
			return _facilitySources;
		}
	}

	@Override
	public void setFacilitySources(String facilitySources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_facilitySources = facilitySources;
	}

	@JSON
	@Override
	public String getCriminalFraud() {
		if (_criminalFraud == null) {
			return "";
		}
		else {
			return _criminalFraud;
		}
	}

	@Override
	public void setCriminalFraud(String criminalFraud) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_criminalFraud = criminalFraud;
	}

	@JSON
	@Override
	public String getProfessionalSubject() {
		if (_professionalSubject == null) {
			return "";
		}
		else {
			return _professionalSubject;
		}
	}

	@Override
	public void setProfessionalSubject(String professionalSubject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_professionalSubject = professionalSubject;
	}

	@JSON
	@Override
	public String getEmploymentResign() {
		if (_employmentResign == null) {
			return "";
		}
		else {
			return _employmentResign;
		}
	}

	@Override
	public void setEmploymentResign(String employmentResign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employmentResign = employmentResign;
	}

	@JSON
	@Override
	public String getMentallyIll() {
		if (_mentallyIll == null) {
			return "";
		}
		else {
			return _mentallyIll;
		}
	}

	@Override
	public void setMentallyIll(String mentallyIll) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mentallyIll = mentallyIll;
	}

	@JSON
	@Override
	public String getBankruptAuthority() {
		if (_bankruptAuthority == null) {
			return "";
		}
		else {
			return _bankruptAuthority;
		}
	}

	@Override
	public void setBankruptAuthority(String bankruptAuthority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankruptAuthority = bankruptAuthority;
	}

	@JSON
	@Override
	public String getCircumstancesEvent() {
		if (_circumstancesEvent == null) {
			return "";
		}
		else {
			return _circumstancesEvent;
		}
	}

	@Override
	public void setCircumstancesEvent(String circumstancesEvent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_circumstancesEvent = circumstancesEvent;
	}

	@JSON
	@Override
	public String getPartnershipHsra() {
		if (_partnershipHsra == null) {
			return "";
		}
		else {
			return _partnershipHsra;
		}
	}

	@Override
	public void setPartnershipHsra(String partnershipHsra) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_partnershipHsra = partnershipHsra;
	}

	@JSON
	@Override
	public String getFacilityAssociated() {
		if (_facilityAssociated == null) {
			return "";
		}
		else {
			return _facilityAssociated;
		}
	}

	@Override
	public void setFacilityAssociated(String facilityAssociated) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_facilityAssociated = facilityAssociated;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FitPropBusinessInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FitPropBusinessInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FitPropBusinessInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FitPropBusinessInfoImpl fitPropBusinessInfoImpl =
			new FitPropBusinessInfoImpl();

		fitPropBusinessInfoImpl.setFitPropBusinessInfoId(
			getFitPropBusinessInfoId());
		fitPropBusinessInfoImpl.setGroupId(getGroupId());
		fitPropBusinessInfoImpl.setCompanyId(getCompanyId());
		fitPropBusinessInfoImpl.setUserId(getUserId());
		fitPropBusinessInfoImpl.setUserName(getUserName());
		fitPropBusinessInfoImpl.setCreateDate(getCreateDate());
		fitPropBusinessInfoImpl.setModifiedDate(getModifiedDate());
		fitPropBusinessInfoImpl.setCompanyType(getCompanyType());
		fitPropBusinessInfoImpl.setApplicantBusinessName(
			getApplicantBusinessName());
		fitPropBusinessInfoImpl.setApplicantcomName(getApplicantcomName());
		fitPropBusinessInfoImpl.setApplicantComAddress(
			getApplicantComAddress());
		fitPropBusinessInfoImpl.setApplicantComAddressParish(
			getApplicantComAddressParish());
		fitPropBusinessInfoImpl.setApplicantComNo(getApplicantComNo());
		fitPropBusinessInfoImpl.setApplicantComEmail(getApplicantComEmail());
		fitPropBusinessInfoImpl.setApplicantComTelephone(
			getApplicantComTelephone());
		fitPropBusinessInfoImpl.setApplicantComTitle(getApplicantComTitle());
		fitPropBusinessInfoImpl.setMaterialTechnology(getMaterialTechnology());
		fitPropBusinessInfoImpl.setRelevantBox(getRelevantBox());
		fitPropBusinessInfoImpl.setCorporateDirector(getCorporateDirector());
		fitPropBusinessInfoImpl.setFacilitySources(getFacilitySources());
		fitPropBusinessInfoImpl.setCriminalFraud(getCriminalFraud());
		fitPropBusinessInfoImpl.setProfessionalSubject(
			getProfessionalSubject());
		fitPropBusinessInfoImpl.setEmploymentResign(getEmploymentResign());
		fitPropBusinessInfoImpl.setMentallyIll(getMentallyIll());
		fitPropBusinessInfoImpl.setBankruptAuthority(getBankruptAuthority());
		fitPropBusinessInfoImpl.setCircumstancesEvent(getCircumstancesEvent());
		fitPropBusinessInfoImpl.setPartnershipHsra(getPartnershipHsra());
		fitPropBusinessInfoImpl.setFacilityAssociated(getFacilityAssociated());
		fitPropBusinessInfoImpl.setHsraApplicationId(getHsraApplicationId());

		fitPropBusinessInfoImpl.resetOriginalValues();

		return fitPropBusinessInfoImpl;
	}

	@Override
	public FitPropBusinessInfo cloneWithOriginalValues() {
		FitPropBusinessInfoImpl fitPropBusinessInfoImpl =
			new FitPropBusinessInfoImpl();

		fitPropBusinessInfoImpl.setFitPropBusinessInfoId(
			this.<Long>getColumnOriginalValue("fitPropBusinessInfoId"));
		fitPropBusinessInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		fitPropBusinessInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		fitPropBusinessInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		fitPropBusinessInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		fitPropBusinessInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		fitPropBusinessInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		fitPropBusinessInfoImpl.setCompanyType(
			this.<String>getColumnOriginalValue("companyType"));
		fitPropBusinessInfoImpl.setApplicantBusinessName(
			this.<String>getColumnOriginalValue("applicantBusinessName"));
		fitPropBusinessInfoImpl.setApplicantcomName(
			this.<String>getColumnOriginalValue("applicantcomName"));
		fitPropBusinessInfoImpl.setApplicantComAddress(
			this.<String>getColumnOriginalValue("applicantComAddress"));
		fitPropBusinessInfoImpl.setApplicantComAddressParish(
			this.<String>getColumnOriginalValue("applicantComAddressParish"));
		fitPropBusinessInfoImpl.setApplicantComNo(
			this.<String>getColumnOriginalValue("applicantComNo"));
		fitPropBusinessInfoImpl.setApplicantComEmail(
			this.<String>getColumnOriginalValue("applicantComEmail"));
		fitPropBusinessInfoImpl.setApplicantComTelephone(
			this.<String>getColumnOriginalValue("applicantComTelephone"));
		fitPropBusinessInfoImpl.setApplicantComTitle(
			this.<String>getColumnOriginalValue("applicantComTitle"));
		fitPropBusinessInfoImpl.setMaterialTechnology(
			this.<String>getColumnOriginalValue("materialTechnology"));
		fitPropBusinessInfoImpl.setRelevantBox(
			this.<String>getColumnOriginalValue("relevantBox"));
		fitPropBusinessInfoImpl.setCorporateDirector(
			this.<String>getColumnOriginalValue("corporateDirector"));
		fitPropBusinessInfoImpl.setFacilitySources(
			this.<String>getColumnOriginalValue("facilitySources"));
		fitPropBusinessInfoImpl.setCriminalFraud(
			this.<String>getColumnOriginalValue("criminalFraud"));
		fitPropBusinessInfoImpl.setProfessionalSubject(
			this.<String>getColumnOriginalValue("professionalSubject"));
		fitPropBusinessInfoImpl.setEmploymentResign(
			this.<String>getColumnOriginalValue("employmentResign"));
		fitPropBusinessInfoImpl.setMentallyIll(
			this.<String>getColumnOriginalValue("mentallyIll"));
		fitPropBusinessInfoImpl.setBankruptAuthority(
			this.<String>getColumnOriginalValue("bankruptAuthority"));
		fitPropBusinessInfoImpl.setCircumstancesEvent(
			this.<String>getColumnOriginalValue("circumstancesEvent"));
		fitPropBusinessInfoImpl.setPartnershipHsra(
			this.<String>getColumnOriginalValue("partnershipHsra"));
		fitPropBusinessInfoImpl.setFacilityAssociated(
			this.<String>getColumnOriginalValue("facilityAssociated"));
		fitPropBusinessInfoImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return fitPropBusinessInfoImpl;
	}

	@Override
	public int compareTo(FitPropBusinessInfo fitPropBusinessInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), fitPropBusinessInfo.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FitPropBusinessInfo)) {
			return false;
		}

		FitPropBusinessInfo fitPropBusinessInfo = (FitPropBusinessInfo)object;

		long primaryKey = fitPropBusinessInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FitPropBusinessInfo> toCacheModel() {
		FitPropBusinessInfoCacheModel fitPropBusinessInfoCacheModel =
			new FitPropBusinessInfoCacheModel();

		fitPropBusinessInfoCacheModel.fitPropBusinessInfoId =
			getFitPropBusinessInfoId();

		fitPropBusinessInfoCacheModel.groupId = getGroupId();

		fitPropBusinessInfoCacheModel.companyId = getCompanyId();

		fitPropBusinessInfoCacheModel.userId = getUserId();

		fitPropBusinessInfoCacheModel.userName = getUserName();

		String userName = fitPropBusinessInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fitPropBusinessInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fitPropBusinessInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			fitPropBusinessInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fitPropBusinessInfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fitPropBusinessInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fitPropBusinessInfoCacheModel.companyType = getCompanyType();

		String companyType = fitPropBusinessInfoCacheModel.companyType;

		if ((companyType != null) && (companyType.length() == 0)) {
			fitPropBusinessInfoCacheModel.companyType = null;
		}

		fitPropBusinessInfoCacheModel.applicantBusinessName =
			getApplicantBusinessName();

		String applicantBusinessName =
			fitPropBusinessInfoCacheModel.applicantBusinessName;

		if ((applicantBusinessName != null) &&
			(applicantBusinessName.length() == 0)) {

			fitPropBusinessInfoCacheModel.applicantBusinessName = null;
		}

		fitPropBusinessInfoCacheModel.applicantcomName = getApplicantcomName();

		String applicantcomName =
			fitPropBusinessInfoCacheModel.applicantcomName;

		if ((applicantcomName != null) && (applicantcomName.length() == 0)) {
			fitPropBusinessInfoCacheModel.applicantcomName = null;
		}

		fitPropBusinessInfoCacheModel.applicantComAddress =
			getApplicantComAddress();

		String applicantComAddress =
			fitPropBusinessInfoCacheModel.applicantComAddress;

		if ((applicantComAddress != null) &&
			(applicantComAddress.length() == 0)) {

			fitPropBusinessInfoCacheModel.applicantComAddress = null;
		}

		fitPropBusinessInfoCacheModel.applicantComAddressParish =
			getApplicantComAddressParish();

		String applicantComAddressParish =
			fitPropBusinessInfoCacheModel.applicantComAddressParish;

		if ((applicantComAddressParish != null) &&
			(applicantComAddressParish.length() == 0)) {

			fitPropBusinessInfoCacheModel.applicantComAddressParish = null;
		}

		fitPropBusinessInfoCacheModel.applicantComNo = getApplicantComNo();

		String applicantComNo = fitPropBusinessInfoCacheModel.applicantComNo;

		if ((applicantComNo != null) && (applicantComNo.length() == 0)) {
			fitPropBusinessInfoCacheModel.applicantComNo = null;
		}

		fitPropBusinessInfoCacheModel.applicantComEmail =
			getApplicantComEmail();

		String applicantComEmail =
			fitPropBusinessInfoCacheModel.applicantComEmail;

		if ((applicantComEmail != null) && (applicantComEmail.length() == 0)) {
			fitPropBusinessInfoCacheModel.applicantComEmail = null;
		}

		fitPropBusinessInfoCacheModel.applicantComTelephone =
			getApplicantComTelephone();

		String applicantComTelephone =
			fitPropBusinessInfoCacheModel.applicantComTelephone;

		if ((applicantComTelephone != null) &&
			(applicantComTelephone.length() == 0)) {

			fitPropBusinessInfoCacheModel.applicantComTelephone = null;
		}

		fitPropBusinessInfoCacheModel.applicantComTitle =
			getApplicantComTitle();

		String applicantComTitle =
			fitPropBusinessInfoCacheModel.applicantComTitle;

		if ((applicantComTitle != null) && (applicantComTitle.length() == 0)) {
			fitPropBusinessInfoCacheModel.applicantComTitle = null;
		}

		fitPropBusinessInfoCacheModel.materialTechnology =
			getMaterialTechnology();

		String materialTechnology =
			fitPropBusinessInfoCacheModel.materialTechnology;

		if ((materialTechnology != null) &&
			(materialTechnology.length() == 0)) {

			fitPropBusinessInfoCacheModel.materialTechnology = null;
		}

		fitPropBusinessInfoCacheModel.relevantBox = getRelevantBox();

		String relevantBox = fitPropBusinessInfoCacheModel.relevantBox;

		if ((relevantBox != null) && (relevantBox.length() == 0)) {
			fitPropBusinessInfoCacheModel.relevantBox = null;
		}

		fitPropBusinessInfoCacheModel.corporateDirector =
			getCorporateDirector();

		String corporateDirector =
			fitPropBusinessInfoCacheModel.corporateDirector;

		if ((corporateDirector != null) && (corporateDirector.length() == 0)) {
			fitPropBusinessInfoCacheModel.corporateDirector = null;
		}

		fitPropBusinessInfoCacheModel.facilitySources = getFacilitySources();

		String facilitySources = fitPropBusinessInfoCacheModel.facilitySources;

		if ((facilitySources != null) && (facilitySources.length() == 0)) {
			fitPropBusinessInfoCacheModel.facilitySources = null;
		}

		fitPropBusinessInfoCacheModel.criminalFraud = getCriminalFraud();

		String criminalFraud = fitPropBusinessInfoCacheModel.criminalFraud;

		if ((criminalFraud != null) && (criminalFraud.length() == 0)) {
			fitPropBusinessInfoCacheModel.criminalFraud = null;
		}

		fitPropBusinessInfoCacheModel.professionalSubject =
			getProfessionalSubject();

		String professionalSubject =
			fitPropBusinessInfoCacheModel.professionalSubject;

		if ((professionalSubject != null) &&
			(professionalSubject.length() == 0)) {

			fitPropBusinessInfoCacheModel.professionalSubject = null;
		}

		fitPropBusinessInfoCacheModel.employmentResign = getEmploymentResign();

		String employmentResign =
			fitPropBusinessInfoCacheModel.employmentResign;

		if ((employmentResign != null) && (employmentResign.length() == 0)) {
			fitPropBusinessInfoCacheModel.employmentResign = null;
		}

		fitPropBusinessInfoCacheModel.mentallyIll = getMentallyIll();

		String mentallyIll = fitPropBusinessInfoCacheModel.mentallyIll;

		if ((mentallyIll != null) && (mentallyIll.length() == 0)) {
			fitPropBusinessInfoCacheModel.mentallyIll = null;
		}

		fitPropBusinessInfoCacheModel.bankruptAuthority =
			getBankruptAuthority();

		String bankruptAuthority =
			fitPropBusinessInfoCacheModel.bankruptAuthority;

		if ((bankruptAuthority != null) && (bankruptAuthority.length() == 0)) {
			fitPropBusinessInfoCacheModel.bankruptAuthority = null;
		}

		fitPropBusinessInfoCacheModel.circumstancesEvent =
			getCircumstancesEvent();

		String circumstancesEvent =
			fitPropBusinessInfoCacheModel.circumstancesEvent;

		if ((circumstancesEvent != null) &&
			(circumstancesEvent.length() == 0)) {

			fitPropBusinessInfoCacheModel.circumstancesEvent = null;
		}

		fitPropBusinessInfoCacheModel.partnershipHsra = getPartnershipHsra();

		String partnershipHsra = fitPropBusinessInfoCacheModel.partnershipHsra;

		if ((partnershipHsra != null) && (partnershipHsra.length() == 0)) {
			fitPropBusinessInfoCacheModel.partnershipHsra = null;
		}

		fitPropBusinessInfoCacheModel.facilityAssociated =
			getFacilityAssociated();

		String facilityAssociated =
			fitPropBusinessInfoCacheModel.facilityAssociated;

		if ((facilityAssociated != null) &&
			(facilityAssociated.length() == 0)) {

			fitPropBusinessInfoCacheModel.facilityAssociated = null;
		}

		fitPropBusinessInfoCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return fitPropBusinessInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FitPropBusinessInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FitPropBusinessInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FitPropBusinessInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FitPropBusinessInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FitPropBusinessInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FitPropBusinessInfo.class, ModelWrapper.class);

	}

	private long _fitPropBusinessInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _companyType;
	private String _applicantBusinessName;
	private String _applicantcomName;
	private String _applicantComAddress;
	private String _applicantComAddressParish;
	private String _applicantComNo;
	private String _applicantComEmail;
	private String _applicantComTelephone;
	private String _applicantComTitle;
	private String _materialTechnology;
	private String _relevantBox;
	private String _corporateDirector;
	private String _facilitySources;
	private String _criminalFraud;
	private String _professionalSubject;
	private String _employmentResign;
	private String _mentallyIll;
	private String _bankruptAuthority;
	private String _circumstancesEvent;
	private String _partnershipHsra;
	private String _facilityAssociated;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<FitPropBusinessInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FitPropBusinessInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"fitPropBusinessInfoId", _fitPropBusinessInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("companyType", _companyType);
		_columnOriginalValues.put(
			"applicantBusinessName", _applicantBusinessName);
		_columnOriginalValues.put("applicantcomName", _applicantcomName);
		_columnOriginalValues.put("applicantComAddress", _applicantComAddress);
		_columnOriginalValues.put(
			"applicantComAddressParish", _applicantComAddressParish);
		_columnOriginalValues.put("applicantComNo", _applicantComNo);
		_columnOriginalValues.put("applicantComEmail", _applicantComEmail);
		_columnOriginalValues.put(
			"applicantComTelephone", _applicantComTelephone);
		_columnOriginalValues.put("applicantComTitle", _applicantComTitle);
		_columnOriginalValues.put("materialTechnology", _materialTechnology);
		_columnOriginalValues.put("relevantBox", _relevantBox);
		_columnOriginalValues.put("corporateDirector", _corporateDirector);
		_columnOriginalValues.put("facilitySources", _facilitySources);
		_columnOriginalValues.put("criminalFraud", _criminalFraud);
		_columnOriginalValues.put("professionalSubject", _professionalSubject);
		_columnOriginalValues.put("employmentResign", _employmentResign);
		_columnOriginalValues.put("mentallyIll", _mentallyIll);
		_columnOriginalValues.put("bankruptAuthority", _bankruptAuthority);
		_columnOriginalValues.put("circumstancesEvent", _circumstancesEvent);
		_columnOriginalValues.put("partnershipHsra", _partnershipHsra);
		_columnOriginalValues.put("facilityAssociated", _facilityAssociated);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fitPropBusinessInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("companyType", 128L);

		columnBitmasks.put("applicantBusinessName", 256L);

		columnBitmasks.put("applicantcomName", 512L);

		columnBitmasks.put("applicantComAddress", 1024L);

		columnBitmasks.put("applicantComAddressParish", 2048L);

		columnBitmasks.put("applicantComNo", 4096L);

		columnBitmasks.put("applicantComEmail", 8192L);

		columnBitmasks.put("applicantComTelephone", 16384L);

		columnBitmasks.put("applicantComTitle", 32768L);

		columnBitmasks.put("materialTechnology", 65536L);

		columnBitmasks.put("relevantBox", 131072L);

		columnBitmasks.put("corporateDirector", 262144L);

		columnBitmasks.put("facilitySources", 524288L);

		columnBitmasks.put("criminalFraud", 1048576L);

		columnBitmasks.put("professionalSubject", 2097152L);

		columnBitmasks.put("employmentResign", 4194304L);

		columnBitmasks.put("mentallyIll", 8388608L);

		columnBitmasks.put("bankruptAuthority", 16777216L);

		columnBitmasks.put("circumstancesEvent", 33554432L);

		columnBitmasks.put("partnershipHsra", 67108864L);

		columnBitmasks.put("facilityAssociated", 134217728L);

		columnBitmasks.put("hsraApplicationId", 268435456L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FitPropBusinessInfo _escapedModel;

}