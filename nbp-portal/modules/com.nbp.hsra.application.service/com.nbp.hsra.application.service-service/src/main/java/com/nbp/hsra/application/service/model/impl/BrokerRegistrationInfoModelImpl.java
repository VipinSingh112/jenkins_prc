/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.BrokerRegistrationInfo;
import com.nbp.hsra.application.service.model.BrokerRegistrationInfoModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BrokerRegistrationInfo service. Represents a row in the &quot;nbp_hsra_broker_regst&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BrokerRegistrationInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BrokerRegistrationInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BrokerRegistrationInfoImpl
 * @generated
 */
@JSON(strict = true)
public class BrokerRegistrationInfoModelImpl
	extends BaseModelImpl<BrokerRegistrationInfo>
	implements BrokerRegistrationInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a broker registration info model instance should use the <code>BrokerRegistrationInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_broker_regst";

	public static final Object[][] TABLE_COLUMNS = {
		{"brokerRegstInfoId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"applicationTypes", Types.VARCHAR},
		{"organizationNameD", Types.VARCHAR}, {"businessPlace", Types.VARCHAR},
		{"organizationTrn", Types.VARCHAR},
		{"organizationTeleNum", Types.VARCHAR},
		{"organizationFaxNum", Types.VARCHAR},
		{"organizationEmailAdd", Types.VARCHAR},
		{"businessTypeBroker", Types.VARCHAR},
		{"businessNumberBroker", Types.VARCHAR},
		{"corporationNumberBroker", Types.VARCHAR},
		{"publicActBroker", Types.VARCHAR},
		{"licenceNumberBroker", Types.VARCHAR},
		{"expirationDateBroker", Types.TIMESTAMP},
		{"radioactiveMaterial", Types.VARCHAR},
		{"nuclearMaterial", Types.VARCHAR},
		{"nuclearTechnology", Types.VARCHAR},
		{"ionizingApparatus", Types.VARCHAR},
		{"radiationSource", Types.VARCHAR},
		{"organizationTransfer", Types.VARCHAR},
		{"nuclearProtection", Types.VARCHAR},
		{"storageFacility", Types.VARCHAR},
		{"additionalInformation", Types.VARCHAR},
		{"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("brokerRegstInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("applicationTypes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationNameD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationTrn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationTeleNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationFaxNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationEmailAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessTypeBroker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessNumberBroker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("corporationNumberBroker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicActBroker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenceNumberBroker", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expirationDateBroker", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("radioactiveMaterial", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearMaterial", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearTechnology", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ionizingApparatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radiationSource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationTransfer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearProtection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("storageFacility", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalInformation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_broker_regst (brokerRegstInfoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,applicationTypes VARCHAR(75) null,organizationNameD VARCHAR(75) null,businessPlace VARCHAR(75) null,organizationTrn VARCHAR(75) null,organizationTeleNum VARCHAR(75) null,organizationFaxNum VARCHAR(75) null,organizationEmailAdd VARCHAR(75) null,businessTypeBroker VARCHAR(75) null,businessNumberBroker VARCHAR(75) null,corporationNumberBroker VARCHAR(75) null,publicActBroker VARCHAR(75) null,licenceNumberBroker VARCHAR(75) null,expirationDateBroker DATE null,radioactiveMaterial VARCHAR(75) null,nuclearMaterial VARCHAR(75) null,nuclearTechnology VARCHAR(75) null,ionizingApparatus VARCHAR(75) null,radiationSource VARCHAR(75) null,organizationTransfer VARCHAR(75) null,nuclearProtection VARCHAR(75) null,storageFacility VARCHAR(75) null,additionalInformation VARCHAR(75) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_broker_regst";

	public static final String ORDER_BY_JPQL =
		" ORDER BY brokerRegistrationInfo.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_broker_regst.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BrokerRegistrationInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _brokerRegstInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBrokerRegstInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _brokerRegstInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BrokerRegistrationInfo.class;
	}

	@Override
	public String getModelClassName() {
		return BrokerRegistrationInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BrokerRegistrationInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BrokerRegistrationInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BrokerRegistrationInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BrokerRegistrationInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BrokerRegistrationInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BrokerRegistrationInfo, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BrokerRegistrationInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BrokerRegistrationInfo, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BrokerRegistrationInfo, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<BrokerRegistrationInfo, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<BrokerRegistrationInfo, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<BrokerRegistrationInfo, Object>>();

			attributeGetterFunctions.put(
				"brokerRegstInfoId",
				BrokerRegistrationInfo::getBrokerRegstInfoId);
			attributeGetterFunctions.put(
				"groupId", BrokerRegistrationInfo::getGroupId);
			attributeGetterFunctions.put(
				"companyId", BrokerRegistrationInfo::getCompanyId);
			attributeGetterFunctions.put(
				"userId", BrokerRegistrationInfo::getUserId);
			attributeGetterFunctions.put(
				"userName", BrokerRegistrationInfo::getUserName);
			attributeGetterFunctions.put(
				"createDate", BrokerRegistrationInfo::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", BrokerRegistrationInfo::getModifiedDate);
			attributeGetterFunctions.put(
				"applicationTypes",
				BrokerRegistrationInfo::getApplicationTypes);
			attributeGetterFunctions.put(
				"organizationNameD",
				BrokerRegistrationInfo::getOrganizationNameD);
			attributeGetterFunctions.put(
				"businessPlace", BrokerRegistrationInfo::getBusinessPlace);
			attributeGetterFunctions.put(
				"organizationTrn", BrokerRegistrationInfo::getOrganizationTrn);
			attributeGetterFunctions.put(
				"organizationTeleNum",
				BrokerRegistrationInfo::getOrganizationTeleNum);
			attributeGetterFunctions.put(
				"organizationFaxNum",
				BrokerRegistrationInfo::getOrganizationFaxNum);
			attributeGetterFunctions.put(
				"organizationEmailAdd",
				BrokerRegistrationInfo::getOrganizationEmailAdd);
			attributeGetterFunctions.put(
				"businessTypeBroker",
				BrokerRegistrationInfo::getBusinessTypeBroker);
			attributeGetterFunctions.put(
				"businessNumberBroker",
				BrokerRegistrationInfo::getBusinessNumberBroker);
			attributeGetterFunctions.put(
				"corporationNumberBroker",
				BrokerRegistrationInfo::getCorporationNumberBroker);
			attributeGetterFunctions.put(
				"publicActBroker", BrokerRegistrationInfo::getPublicActBroker);
			attributeGetterFunctions.put(
				"licenceNumberBroker",
				BrokerRegistrationInfo::getLicenceNumberBroker);
			attributeGetterFunctions.put(
				"expirationDateBroker",
				BrokerRegistrationInfo::getExpirationDateBroker);
			attributeGetterFunctions.put(
				"radioactiveMaterial",
				BrokerRegistrationInfo::getRadioactiveMaterial);
			attributeGetterFunctions.put(
				"nuclearMaterial", BrokerRegistrationInfo::getNuclearMaterial);
			attributeGetterFunctions.put(
				"nuclearTechnology",
				BrokerRegistrationInfo::getNuclearTechnology);
			attributeGetterFunctions.put(
				"ionizingApparatus",
				BrokerRegistrationInfo::getIonizingApparatus);
			attributeGetterFunctions.put(
				"radiationSource", BrokerRegistrationInfo::getRadiationSource);
			attributeGetterFunctions.put(
				"organizationTransfer",
				BrokerRegistrationInfo::getOrganizationTransfer);
			attributeGetterFunctions.put(
				"nuclearProtection",
				BrokerRegistrationInfo::getNuclearProtection);
			attributeGetterFunctions.put(
				"storageFacility", BrokerRegistrationInfo::getStorageFacility);
			attributeGetterFunctions.put(
				"additionalInformation",
				BrokerRegistrationInfo::getAdditionalInformation);
			attributeGetterFunctions.put(
				"hsraApplicationId",
				BrokerRegistrationInfo::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<BrokerRegistrationInfo, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<BrokerRegistrationInfo, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<BrokerRegistrationInfo, ?>>();

			attributeSetterBiConsumers.put(
				"brokerRegstInfoId",
				(BiConsumer<BrokerRegistrationInfo, Long>)
					BrokerRegistrationInfo::setBrokerRegstInfoId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<BrokerRegistrationInfo, Long>)
					BrokerRegistrationInfo::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<BrokerRegistrationInfo, Long>)
					BrokerRegistrationInfo::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<BrokerRegistrationInfo, Long>)
					BrokerRegistrationInfo::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<BrokerRegistrationInfo, Date>)
					BrokerRegistrationInfo::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<BrokerRegistrationInfo, Date>)
					BrokerRegistrationInfo::setModifiedDate);
			attributeSetterBiConsumers.put(
				"applicationTypes",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setApplicationTypes);
			attributeSetterBiConsumers.put(
				"organizationNameD",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setOrganizationNameD);
			attributeSetterBiConsumers.put(
				"businessPlace",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setBusinessPlace);
			attributeSetterBiConsumers.put(
				"organizationTrn",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setOrganizationTrn);
			attributeSetterBiConsumers.put(
				"organizationTeleNum",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setOrganizationTeleNum);
			attributeSetterBiConsumers.put(
				"organizationFaxNum",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setOrganizationFaxNum);
			attributeSetterBiConsumers.put(
				"organizationEmailAdd",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setOrganizationEmailAdd);
			attributeSetterBiConsumers.put(
				"businessTypeBroker",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setBusinessTypeBroker);
			attributeSetterBiConsumers.put(
				"businessNumberBroker",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setBusinessNumberBroker);
			attributeSetterBiConsumers.put(
				"corporationNumberBroker",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setCorporationNumberBroker);
			attributeSetterBiConsumers.put(
				"publicActBroker",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setPublicActBroker);
			attributeSetterBiConsumers.put(
				"licenceNumberBroker",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setLicenceNumberBroker);
			attributeSetterBiConsumers.put(
				"expirationDateBroker",
				(BiConsumer<BrokerRegistrationInfo, Date>)
					BrokerRegistrationInfo::setExpirationDateBroker);
			attributeSetterBiConsumers.put(
				"radioactiveMaterial",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setRadioactiveMaterial);
			attributeSetterBiConsumers.put(
				"nuclearMaterial",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setNuclearMaterial);
			attributeSetterBiConsumers.put(
				"nuclearTechnology",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setNuclearTechnology);
			attributeSetterBiConsumers.put(
				"ionizingApparatus",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setIonizingApparatus);
			attributeSetterBiConsumers.put(
				"radiationSource",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setRadiationSource);
			attributeSetterBiConsumers.put(
				"organizationTransfer",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setOrganizationTransfer);
			attributeSetterBiConsumers.put(
				"nuclearProtection",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setNuclearProtection);
			attributeSetterBiConsumers.put(
				"storageFacility",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setStorageFacility);
			attributeSetterBiConsumers.put(
				"additionalInformation",
				(BiConsumer<BrokerRegistrationInfo, String>)
					BrokerRegistrationInfo::setAdditionalInformation);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<BrokerRegistrationInfo, Long>)
					BrokerRegistrationInfo::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getBrokerRegstInfoId() {
		return _brokerRegstInfoId;
	}

	@Override
	public void setBrokerRegstInfoId(long brokerRegstInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brokerRegstInfoId = brokerRegstInfoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getApplicationTypes() {
		if (_applicationTypes == null) {
			return "";
		}
		else {
			return _applicationTypes;
		}
	}

	@Override
	public void setApplicationTypes(String applicationTypes) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationTypes = applicationTypes;
	}

	@JSON
	@Override
	public String getOrganizationNameD() {
		if (_organizationNameD == null) {
			return "";
		}
		else {
			return _organizationNameD;
		}
	}

	@Override
	public void setOrganizationNameD(String organizationNameD) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationNameD = organizationNameD;
	}

	@JSON
	@Override
	public String getBusinessPlace() {
		if (_businessPlace == null) {
			return "";
		}
		else {
			return _businessPlace;
		}
	}

	@Override
	public void setBusinessPlace(String businessPlace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessPlace = businessPlace;
	}

	@JSON
	@Override
	public String getOrganizationTrn() {
		if (_organizationTrn == null) {
			return "";
		}
		else {
			return _organizationTrn;
		}
	}

	@Override
	public void setOrganizationTrn(String organizationTrn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationTrn = organizationTrn;
	}

	@JSON
	@Override
	public String getOrganizationTeleNum() {
		if (_organizationTeleNum == null) {
			return "";
		}
		else {
			return _organizationTeleNum;
		}
	}

	@Override
	public void setOrganizationTeleNum(String organizationTeleNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationTeleNum = organizationTeleNum;
	}

	@JSON
	@Override
	public String getOrganizationFaxNum() {
		if (_organizationFaxNum == null) {
			return "";
		}
		else {
			return _organizationFaxNum;
		}
	}

	@Override
	public void setOrganizationFaxNum(String organizationFaxNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationFaxNum = organizationFaxNum;
	}

	@JSON
	@Override
	public String getOrganizationEmailAdd() {
		if (_organizationEmailAdd == null) {
			return "";
		}
		else {
			return _organizationEmailAdd;
		}
	}

	@Override
	public void setOrganizationEmailAdd(String organizationEmailAdd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationEmailAdd = organizationEmailAdd;
	}

	@JSON
	@Override
	public String getBusinessTypeBroker() {
		if (_businessTypeBroker == null) {
			return "";
		}
		else {
			return _businessTypeBroker;
		}
	}

	@Override
	public void setBusinessTypeBroker(String businessTypeBroker) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessTypeBroker = businessTypeBroker;
	}

	@JSON
	@Override
	public String getBusinessNumberBroker() {
		if (_businessNumberBroker == null) {
			return "";
		}
		else {
			return _businessNumberBroker;
		}
	}

	@Override
	public void setBusinessNumberBroker(String businessNumberBroker) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessNumberBroker = businessNumberBroker;
	}

	@JSON
	@Override
	public String getCorporationNumberBroker() {
		if (_corporationNumberBroker == null) {
			return "";
		}
		else {
			return _corporationNumberBroker;
		}
	}

	@Override
	public void setCorporationNumberBroker(String corporationNumberBroker) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_corporationNumberBroker = corporationNumberBroker;
	}

	@JSON
	@Override
	public String getPublicActBroker() {
		if (_publicActBroker == null) {
			return "";
		}
		else {
			return _publicActBroker;
		}
	}

	@Override
	public void setPublicActBroker(String publicActBroker) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publicActBroker = publicActBroker;
	}

	@JSON
	@Override
	public String getLicenceNumberBroker() {
		if (_licenceNumberBroker == null) {
			return "";
		}
		else {
			return _licenceNumberBroker;
		}
	}

	@Override
	public void setLicenceNumberBroker(String licenceNumberBroker) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenceNumberBroker = licenceNumberBroker;
	}

	@JSON
	@Override
	public Date getExpirationDateBroker() {
		return _expirationDateBroker;
	}

	@Override
	public void setExpirationDateBroker(Date expirationDateBroker) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expirationDateBroker = expirationDateBroker;
	}

	@JSON
	@Override
	public String getRadioactiveMaterial() {
		if (_radioactiveMaterial == null) {
			return "";
		}
		else {
			return _radioactiveMaterial;
		}
	}

	@Override
	public void setRadioactiveMaterial(String radioactiveMaterial) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radioactiveMaterial = radioactiveMaterial;
	}

	@JSON
	@Override
	public String getNuclearMaterial() {
		if (_nuclearMaterial == null) {
			return "";
		}
		else {
			return _nuclearMaterial;
		}
	}

	@Override
	public void setNuclearMaterial(String nuclearMaterial) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearMaterial = nuclearMaterial;
	}

	@JSON
	@Override
	public String getNuclearTechnology() {
		if (_nuclearTechnology == null) {
			return "";
		}
		else {
			return _nuclearTechnology;
		}
	}

	@Override
	public void setNuclearTechnology(String nuclearTechnology) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearTechnology = nuclearTechnology;
	}

	@JSON
	@Override
	public String getIonizingApparatus() {
		if (_ionizingApparatus == null) {
			return "";
		}
		else {
			return _ionizingApparatus;
		}
	}

	@Override
	public void setIonizingApparatus(String ionizingApparatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ionizingApparatus = ionizingApparatus;
	}

	@JSON
	@Override
	public String getRadiationSource() {
		if (_radiationSource == null) {
			return "";
		}
		else {
			return _radiationSource;
		}
	}

	@Override
	public void setRadiationSource(String radiationSource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationSource = radiationSource;
	}

	@JSON
	@Override
	public String getOrganizationTransfer() {
		if (_organizationTransfer == null) {
			return "";
		}
		else {
			return _organizationTransfer;
		}
	}

	@Override
	public void setOrganizationTransfer(String organizationTransfer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationTransfer = organizationTransfer;
	}

	@JSON
	@Override
	public String getNuclearProtection() {
		if (_nuclearProtection == null) {
			return "";
		}
		else {
			return _nuclearProtection;
		}
	}

	@Override
	public void setNuclearProtection(String nuclearProtection) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearProtection = nuclearProtection;
	}

	@JSON
	@Override
	public String getStorageFacility() {
		if (_storageFacility == null) {
			return "";
		}
		else {
			return _storageFacility;
		}
	}

	@Override
	public void setStorageFacility(String storageFacility) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_storageFacility = storageFacility;
	}

	@JSON
	@Override
	public String getAdditionalInformation() {
		if (_additionalInformation == null) {
			return "";
		}
		else {
			return _additionalInformation;
		}
	}

	@Override
	public void setAdditionalInformation(String additionalInformation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_additionalInformation = additionalInformation;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BrokerRegistrationInfo.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BrokerRegistrationInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BrokerRegistrationInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BrokerRegistrationInfoImpl brokerRegistrationInfoImpl =
			new BrokerRegistrationInfoImpl();

		brokerRegistrationInfoImpl.setBrokerRegstInfoId(getBrokerRegstInfoId());
		brokerRegistrationInfoImpl.setGroupId(getGroupId());
		brokerRegistrationInfoImpl.setCompanyId(getCompanyId());
		brokerRegistrationInfoImpl.setUserId(getUserId());
		brokerRegistrationInfoImpl.setUserName(getUserName());
		brokerRegistrationInfoImpl.setCreateDate(getCreateDate());
		brokerRegistrationInfoImpl.setModifiedDate(getModifiedDate());
		brokerRegistrationInfoImpl.setApplicationTypes(getApplicationTypes());
		brokerRegistrationInfoImpl.setOrganizationNameD(getOrganizationNameD());
		brokerRegistrationInfoImpl.setBusinessPlace(getBusinessPlace());
		brokerRegistrationInfoImpl.setOrganizationTrn(getOrganizationTrn());
		brokerRegistrationInfoImpl.setOrganizationTeleNum(
			getOrganizationTeleNum());
		brokerRegistrationInfoImpl.setOrganizationFaxNum(
			getOrganizationFaxNum());
		brokerRegistrationInfoImpl.setOrganizationEmailAdd(
			getOrganizationEmailAdd());
		brokerRegistrationInfoImpl.setBusinessTypeBroker(
			getBusinessTypeBroker());
		brokerRegistrationInfoImpl.setBusinessNumberBroker(
			getBusinessNumberBroker());
		brokerRegistrationInfoImpl.setCorporationNumberBroker(
			getCorporationNumberBroker());
		brokerRegistrationInfoImpl.setPublicActBroker(getPublicActBroker());
		brokerRegistrationInfoImpl.setLicenceNumberBroker(
			getLicenceNumberBroker());
		brokerRegistrationInfoImpl.setExpirationDateBroker(
			getExpirationDateBroker());
		brokerRegistrationInfoImpl.setRadioactiveMaterial(
			getRadioactiveMaterial());
		brokerRegistrationInfoImpl.setNuclearMaterial(getNuclearMaterial());
		brokerRegistrationInfoImpl.setNuclearTechnology(getNuclearTechnology());
		brokerRegistrationInfoImpl.setIonizingApparatus(getIonizingApparatus());
		brokerRegistrationInfoImpl.setRadiationSource(getRadiationSource());
		brokerRegistrationInfoImpl.setOrganizationTransfer(
			getOrganizationTransfer());
		brokerRegistrationInfoImpl.setNuclearProtection(getNuclearProtection());
		brokerRegistrationInfoImpl.setStorageFacility(getStorageFacility());
		brokerRegistrationInfoImpl.setAdditionalInformation(
			getAdditionalInformation());
		brokerRegistrationInfoImpl.setHsraApplicationId(getHsraApplicationId());

		brokerRegistrationInfoImpl.resetOriginalValues();

		return brokerRegistrationInfoImpl;
	}

	@Override
	public BrokerRegistrationInfo cloneWithOriginalValues() {
		BrokerRegistrationInfoImpl brokerRegistrationInfoImpl =
			new BrokerRegistrationInfoImpl();

		brokerRegistrationInfoImpl.setBrokerRegstInfoId(
			this.<Long>getColumnOriginalValue("brokerRegstInfoId"));
		brokerRegistrationInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		brokerRegistrationInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		brokerRegistrationInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		brokerRegistrationInfoImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		brokerRegistrationInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		brokerRegistrationInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		brokerRegistrationInfoImpl.setApplicationTypes(
			this.<String>getColumnOriginalValue("applicationTypes"));
		brokerRegistrationInfoImpl.setOrganizationNameD(
			this.<String>getColumnOriginalValue("organizationNameD"));
		brokerRegistrationInfoImpl.setBusinessPlace(
			this.<String>getColumnOriginalValue("businessPlace"));
		brokerRegistrationInfoImpl.setOrganizationTrn(
			this.<String>getColumnOriginalValue("organizationTrn"));
		brokerRegistrationInfoImpl.setOrganizationTeleNum(
			this.<String>getColumnOriginalValue("organizationTeleNum"));
		brokerRegistrationInfoImpl.setOrganizationFaxNum(
			this.<String>getColumnOriginalValue("organizationFaxNum"));
		brokerRegistrationInfoImpl.setOrganizationEmailAdd(
			this.<String>getColumnOriginalValue("organizationEmailAdd"));
		brokerRegistrationInfoImpl.setBusinessTypeBroker(
			this.<String>getColumnOriginalValue("businessTypeBroker"));
		brokerRegistrationInfoImpl.setBusinessNumberBroker(
			this.<String>getColumnOriginalValue("businessNumberBroker"));
		brokerRegistrationInfoImpl.setCorporationNumberBroker(
			this.<String>getColumnOriginalValue("corporationNumberBroker"));
		brokerRegistrationInfoImpl.setPublicActBroker(
			this.<String>getColumnOriginalValue("publicActBroker"));
		brokerRegistrationInfoImpl.setLicenceNumberBroker(
			this.<String>getColumnOriginalValue("licenceNumberBroker"));
		brokerRegistrationInfoImpl.setExpirationDateBroker(
			this.<Date>getColumnOriginalValue("expirationDateBroker"));
		brokerRegistrationInfoImpl.setRadioactiveMaterial(
			this.<String>getColumnOriginalValue("radioactiveMaterial"));
		brokerRegistrationInfoImpl.setNuclearMaterial(
			this.<String>getColumnOriginalValue("nuclearMaterial"));
		brokerRegistrationInfoImpl.setNuclearTechnology(
			this.<String>getColumnOriginalValue("nuclearTechnology"));
		brokerRegistrationInfoImpl.setIonizingApparatus(
			this.<String>getColumnOriginalValue("ionizingApparatus"));
		brokerRegistrationInfoImpl.setRadiationSource(
			this.<String>getColumnOriginalValue("radiationSource"));
		brokerRegistrationInfoImpl.setOrganizationTransfer(
			this.<String>getColumnOriginalValue("organizationTransfer"));
		brokerRegistrationInfoImpl.setNuclearProtection(
			this.<String>getColumnOriginalValue("nuclearProtection"));
		brokerRegistrationInfoImpl.setStorageFacility(
			this.<String>getColumnOriginalValue("storageFacility"));
		brokerRegistrationInfoImpl.setAdditionalInformation(
			this.<String>getColumnOriginalValue("additionalInformation"));
		brokerRegistrationInfoImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return brokerRegistrationInfoImpl;
	}

	@Override
	public int compareTo(BrokerRegistrationInfo brokerRegistrationInfo) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), brokerRegistrationInfo.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BrokerRegistrationInfo)) {
			return false;
		}

		BrokerRegistrationInfo brokerRegistrationInfo =
			(BrokerRegistrationInfo)object;

		long primaryKey = brokerRegistrationInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BrokerRegistrationInfo> toCacheModel() {
		BrokerRegistrationInfoCacheModel brokerRegistrationInfoCacheModel =
			new BrokerRegistrationInfoCacheModel();

		brokerRegistrationInfoCacheModel.brokerRegstInfoId =
			getBrokerRegstInfoId();

		brokerRegistrationInfoCacheModel.groupId = getGroupId();

		brokerRegistrationInfoCacheModel.companyId = getCompanyId();

		brokerRegistrationInfoCacheModel.userId = getUserId();

		brokerRegistrationInfoCacheModel.userName = getUserName();

		String userName = brokerRegistrationInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			brokerRegistrationInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			brokerRegistrationInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			brokerRegistrationInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			brokerRegistrationInfoCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			brokerRegistrationInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		brokerRegistrationInfoCacheModel.applicationTypes =
			getApplicationTypes();

		String applicationTypes =
			brokerRegistrationInfoCacheModel.applicationTypes;

		if ((applicationTypes != null) && (applicationTypes.length() == 0)) {
			brokerRegistrationInfoCacheModel.applicationTypes = null;
		}

		brokerRegistrationInfoCacheModel.organizationNameD =
			getOrganizationNameD();

		String organizationNameD =
			brokerRegistrationInfoCacheModel.organizationNameD;

		if ((organizationNameD != null) && (organizationNameD.length() == 0)) {
			brokerRegistrationInfoCacheModel.organizationNameD = null;
		}

		brokerRegistrationInfoCacheModel.businessPlace = getBusinessPlace();

		String businessPlace = brokerRegistrationInfoCacheModel.businessPlace;

		if ((businessPlace != null) && (businessPlace.length() == 0)) {
			brokerRegistrationInfoCacheModel.businessPlace = null;
		}

		brokerRegistrationInfoCacheModel.organizationTrn = getOrganizationTrn();

		String organizationTrn =
			brokerRegistrationInfoCacheModel.organizationTrn;

		if ((organizationTrn != null) && (organizationTrn.length() == 0)) {
			brokerRegistrationInfoCacheModel.organizationTrn = null;
		}

		brokerRegistrationInfoCacheModel.organizationTeleNum =
			getOrganizationTeleNum();

		String organizationTeleNum =
			brokerRegistrationInfoCacheModel.organizationTeleNum;

		if ((organizationTeleNum != null) &&
			(organizationTeleNum.length() == 0)) {

			brokerRegistrationInfoCacheModel.organizationTeleNum = null;
		}

		brokerRegistrationInfoCacheModel.organizationFaxNum =
			getOrganizationFaxNum();

		String organizationFaxNum =
			brokerRegistrationInfoCacheModel.organizationFaxNum;

		if ((organizationFaxNum != null) &&
			(organizationFaxNum.length() == 0)) {

			brokerRegistrationInfoCacheModel.organizationFaxNum = null;
		}

		brokerRegistrationInfoCacheModel.organizationEmailAdd =
			getOrganizationEmailAdd();

		String organizationEmailAdd =
			brokerRegistrationInfoCacheModel.organizationEmailAdd;

		if ((organizationEmailAdd != null) &&
			(organizationEmailAdd.length() == 0)) {

			brokerRegistrationInfoCacheModel.organizationEmailAdd = null;
		}

		brokerRegistrationInfoCacheModel.businessTypeBroker =
			getBusinessTypeBroker();

		String businessTypeBroker =
			brokerRegistrationInfoCacheModel.businessTypeBroker;

		if ((businessTypeBroker != null) &&
			(businessTypeBroker.length() == 0)) {

			brokerRegistrationInfoCacheModel.businessTypeBroker = null;
		}

		brokerRegistrationInfoCacheModel.businessNumberBroker =
			getBusinessNumberBroker();

		String businessNumberBroker =
			brokerRegistrationInfoCacheModel.businessNumberBroker;

		if ((businessNumberBroker != null) &&
			(businessNumberBroker.length() == 0)) {

			brokerRegistrationInfoCacheModel.businessNumberBroker = null;
		}

		brokerRegistrationInfoCacheModel.corporationNumberBroker =
			getCorporationNumberBroker();

		String corporationNumberBroker =
			brokerRegistrationInfoCacheModel.corporationNumberBroker;

		if ((corporationNumberBroker != null) &&
			(corporationNumberBroker.length() == 0)) {

			brokerRegistrationInfoCacheModel.corporationNumberBroker = null;
		}

		brokerRegistrationInfoCacheModel.publicActBroker = getPublicActBroker();

		String publicActBroker =
			brokerRegistrationInfoCacheModel.publicActBroker;

		if ((publicActBroker != null) && (publicActBroker.length() == 0)) {
			brokerRegistrationInfoCacheModel.publicActBroker = null;
		}

		brokerRegistrationInfoCacheModel.licenceNumberBroker =
			getLicenceNumberBroker();

		String licenceNumberBroker =
			brokerRegistrationInfoCacheModel.licenceNumberBroker;

		if ((licenceNumberBroker != null) &&
			(licenceNumberBroker.length() == 0)) {

			brokerRegistrationInfoCacheModel.licenceNumberBroker = null;
		}

		Date expirationDateBroker = getExpirationDateBroker();

		if (expirationDateBroker != null) {
			brokerRegistrationInfoCacheModel.expirationDateBroker =
				expirationDateBroker.getTime();
		}
		else {
			brokerRegistrationInfoCacheModel.expirationDateBroker =
				Long.MIN_VALUE;
		}

		brokerRegistrationInfoCacheModel.radioactiveMaterial =
			getRadioactiveMaterial();

		String radioactiveMaterial =
			brokerRegistrationInfoCacheModel.radioactiveMaterial;

		if ((radioactiveMaterial != null) &&
			(radioactiveMaterial.length() == 0)) {

			brokerRegistrationInfoCacheModel.radioactiveMaterial = null;
		}

		brokerRegistrationInfoCacheModel.nuclearMaterial = getNuclearMaterial();

		String nuclearMaterial =
			brokerRegistrationInfoCacheModel.nuclearMaterial;

		if ((nuclearMaterial != null) && (nuclearMaterial.length() == 0)) {
			brokerRegistrationInfoCacheModel.nuclearMaterial = null;
		}

		brokerRegistrationInfoCacheModel.nuclearTechnology =
			getNuclearTechnology();

		String nuclearTechnology =
			brokerRegistrationInfoCacheModel.nuclearTechnology;

		if ((nuclearTechnology != null) && (nuclearTechnology.length() == 0)) {
			brokerRegistrationInfoCacheModel.nuclearTechnology = null;
		}

		brokerRegistrationInfoCacheModel.ionizingApparatus =
			getIonizingApparatus();

		String ionizingApparatus =
			brokerRegistrationInfoCacheModel.ionizingApparatus;

		if ((ionizingApparatus != null) && (ionizingApparatus.length() == 0)) {
			brokerRegistrationInfoCacheModel.ionizingApparatus = null;
		}

		brokerRegistrationInfoCacheModel.radiationSource = getRadiationSource();

		String radiationSource =
			brokerRegistrationInfoCacheModel.radiationSource;

		if ((radiationSource != null) && (radiationSource.length() == 0)) {
			brokerRegistrationInfoCacheModel.radiationSource = null;
		}

		brokerRegistrationInfoCacheModel.organizationTransfer =
			getOrganizationTransfer();

		String organizationTransfer =
			brokerRegistrationInfoCacheModel.organizationTransfer;

		if ((organizationTransfer != null) &&
			(organizationTransfer.length() == 0)) {

			brokerRegistrationInfoCacheModel.organizationTransfer = null;
		}

		brokerRegistrationInfoCacheModel.nuclearProtection =
			getNuclearProtection();

		String nuclearProtection =
			brokerRegistrationInfoCacheModel.nuclearProtection;

		if ((nuclearProtection != null) && (nuclearProtection.length() == 0)) {
			brokerRegistrationInfoCacheModel.nuclearProtection = null;
		}

		brokerRegistrationInfoCacheModel.storageFacility = getStorageFacility();

		String storageFacility =
			brokerRegistrationInfoCacheModel.storageFacility;

		if ((storageFacility != null) && (storageFacility.length() == 0)) {
			brokerRegistrationInfoCacheModel.storageFacility = null;
		}

		brokerRegistrationInfoCacheModel.additionalInformation =
			getAdditionalInformation();

		String additionalInformation =
			brokerRegistrationInfoCacheModel.additionalInformation;

		if ((additionalInformation != null) &&
			(additionalInformation.length() == 0)) {

			brokerRegistrationInfoCacheModel.additionalInformation = null;
		}

		brokerRegistrationInfoCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return brokerRegistrationInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BrokerRegistrationInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BrokerRegistrationInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BrokerRegistrationInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(BrokerRegistrationInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BrokerRegistrationInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BrokerRegistrationInfo.class, ModelWrapper.class);

	}

	private long _brokerRegstInfoId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _applicationTypes;
	private String _organizationNameD;
	private String _businessPlace;
	private String _organizationTrn;
	private String _organizationTeleNum;
	private String _organizationFaxNum;
	private String _organizationEmailAdd;
	private String _businessTypeBroker;
	private String _businessNumberBroker;
	private String _corporationNumberBroker;
	private String _publicActBroker;
	private String _licenceNumberBroker;
	private Date _expirationDateBroker;
	private String _radioactiveMaterial;
	private String _nuclearMaterial;
	private String _nuclearTechnology;
	private String _ionizingApparatus;
	private String _radiationSource;
	private String _organizationTransfer;
	private String _nuclearProtection;
	private String _storageFacility;
	private String _additionalInformation;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<BrokerRegistrationInfo, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BrokerRegistrationInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("brokerRegstInfoId", _brokerRegstInfoId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("applicationTypes", _applicationTypes);
		_columnOriginalValues.put("organizationNameD", _organizationNameD);
		_columnOriginalValues.put("businessPlace", _businessPlace);
		_columnOriginalValues.put("organizationTrn", _organizationTrn);
		_columnOriginalValues.put("organizationTeleNum", _organizationTeleNum);
		_columnOriginalValues.put("organizationFaxNum", _organizationFaxNum);
		_columnOriginalValues.put(
			"organizationEmailAdd", _organizationEmailAdd);
		_columnOriginalValues.put("businessTypeBroker", _businessTypeBroker);
		_columnOriginalValues.put(
			"businessNumberBroker", _businessNumberBroker);
		_columnOriginalValues.put(
			"corporationNumberBroker", _corporationNumberBroker);
		_columnOriginalValues.put("publicActBroker", _publicActBroker);
		_columnOriginalValues.put("licenceNumberBroker", _licenceNumberBroker);
		_columnOriginalValues.put(
			"expirationDateBroker", _expirationDateBroker);
		_columnOriginalValues.put("radioactiveMaterial", _radioactiveMaterial);
		_columnOriginalValues.put("nuclearMaterial", _nuclearMaterial);
		_columnOriginalValues.put("nuclearTechnology", _nuclearTechnology);
		_columnOriginalValues.put("ionizingApparatus", _ionizingApparatus);
		_columnOriginalValues.put("radiationSource", _radiationSource);
		_columnOriginalValues.put(
			"organizationTransfer", _organizationTransfer);
		_columnOriginalValues.put("nuclearProtection", _nuclearProtection);
		_columnOriginalValues.put("storageFacility", _storageFacility);
		_columnOriginalValues.put(
			"additionalInformation", _additionalInformation);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("brokerRegstInfoId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("applicationTypes", 128L);

		columnBitmasks.put("organizationNameD", 256L);

		columnBitmasks.put("businessPlace", 512L);

		columnBitmasks.put("organizationTrn", 1024L);

		columnBitmasks.put("organizationTeleNum", 2048L);

		columnBitmasks.put("organizationFaxNum", 4096L);

		columnBitmasks.put("organizationEmailAdd", 8192L);

		columnBitmasks.put("businessTypeBroker", 16384L);

		columnBitmasks.put("businessNumberBroker", 32768L);

		columnBitmasks.put("corporationNumberBroker", 65536L);

		columnBitmasks.put("publicActBroker", 131072L);

		columnBitmasks.put("licenceNumberBroker", 262144L);

		columnBitmasks.put("expirationDateBroker", 524288L);

		columnBitmasks.put("radioactiveMaterial", 1048576L);

		columnBitmasks.put("nuclearMaterial", 2097152L);

		columnBitmasks.put("nuclearTechnology", 4194304L);

		columnBitmasks.put("ionizingApparatus", 8388608L);

		columnBitmasks.put("radiationSource", 16777216L);

		columnBitmasks.put("organizationTransfer", 33554432L);

		columnBitmasks.put("nuclearProtection", 67108864L);

		columnBitmasks.put("storageFacility", 134217728L);

		columnBitmasks.put("additionalInformation", 268435456L);

		columnBitmasks.put("hsraApplicationId", 536870912L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BrokerRegistrationInfo _escapedModel;

}