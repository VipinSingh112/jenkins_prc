/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.RadiationProtectionSecOne;
import com.nbp.hsra.application.service.model.RadiationProtectionSecOneModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RadiationProtectionSecOne service. Represents a row in the &quot;nbp_hsra_rad_section_one&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RadiationProtectionSecOneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RadiationProtectionSecOneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RadiationProtectionSecOneImpl
 * @generated
 */
@JSON(strict = true)
public class RadiationProtectionSecOneModelImpl
	extends BaseModelImpl<RadiationProtectionSecOne>
	implements RadiationProtectionSecOneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a radiation protection sec one model instance should use the <code>RadiationProtectionSecOne</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_rad_section_one";

	public static final Object[][] TABLE_COLUMNS = {
		{"radiationProtectSecOneId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"currentAuthNum", Types.VARCHAR},
		{"reasonForAmendment", Types.VARCHAR},
		{"typeOfApplication", Types.VARCHAR},
		{"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("radiationProtectSecOneId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("currentAuthNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonForAmendment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeOfApplication", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_rad_section_one (radiationProtectSecOneId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,currentAuthNum VARCHAR(75) null,reasonForAmendment VARCHAR(500) null,typeOfApplication VARCHAR(75) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_rad_section_one";

	public static final String ORDER_BY_JPQL =
		" ORDER BY radiationProtectionSecOne.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_rad_section_one.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RadiationProtectionSecOneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _radiationProtectSecOneId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRadiationProtectSecOneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _radiationProtectSecOneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RadiationProtectionSecOne.class;
	}

	@Override
	public String getModelClassName() {
		return RadiationProtectionSecOne.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RadiationProtectionSecOne, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RadiationProtectionSecOne, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RadiationProtectionSecOne, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RadiationProtectionSecOne)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RadiationProtectionSecOne, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RadiationProtectionSecOne, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RadiationProtectionSecOne)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RadiationProtectionSecOne, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RadiationProtectionSecOne, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<RadiationProtectionSecOne, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<RadiationProtectionSecOne, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<RadiationProtectionSecOne, Object>>();

			attributeGetterFunctions.put(
				"radiationProtectSecOneId",
				RadiationProtectionSecOne::getRadiationProtectSecOneId);
			attributeGetterFunctions.put(
				"groupId", RadiationProtectionSecOne::getGroupId);
			attributeGetterFunctions.put(
				"companyId", RadiationProtectionSecOne::getCompanyId);
			attributeGetterFunctions.put(
				"userId", RadiationProtectionSecOne::getUserId);
			attributeGetterFunctions.put(
				"userName", RadiationProtectionSecOne::getUserName);
			attributeGetterFunctions.put(
				"createDate", RadiationProtectionSecOne::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", RadiationProtectionSecOne::getModifiedDate);
			attributeGetterFunctions.put(
				"currentAuthNum", RadiationProtectionSecOne::getCurrentAuthNum);
			attributeGetterFunctions.put(
				"reasonForAmendment",
				RadiationProtectionSecOne::getReasonForAmendment);
			attributeGetterFunctions.put(
				"typeOfApplication",
				RadiationProtectionSecOne::getTypeOfApplication);
			attributeGetterFunctions.put(
				"hsraApplicationId",
				RadiationProtectionSecOne::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<RadiationProtectionSecOne, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<RadiationProtectionSecOne, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<RadiationProtectionSecOne, ?>>();

			attributeSetterBiConsumers.put(
				"radiationProtectSecOneId",
				(BiConsumer<RadiationProtectionSecOne, Long>)
					RadiationProtectionSecOne::setRadiationProtectSecOneId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<RadiationProtectionSecOne, Long>)
					RadiationProtectionSecOne::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<RadiationProtectionSecOne, Long>)
					RadiationProtectionSecOne::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<RadiationProtectionSecOne, Long>)
					RadiationProtectionSecOne::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<RadiationProtectionSecOne, String>)
					RadiationProtectionSecOne::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<RadiationProtectionSecOne, Date>)
					RadiationProtectionSecOne::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<RadiationProtectionSecOne, Date>)
					RadiationProtectionSecOne::setModifiedDate);
			attributeSetterBiConsumers.put(
				"currentAuthNum",
				(BiConsumer<RadiationProtectionSecOne, String>)
					RadiationProtectionSecOne::setCurrentAuthNum);
			attributeSetterBiConsumers.put(
				"reasonForAmendment",
				(BiConsumer<RadiationProtectionSecOne, String>)
					RadiationProtectionSecOne::setReasonForAmendment);
			attributeSetterBiConsumers.put(
				"typeOfApplication",
				(BiConsumer<RadiationProtectionSecOne, String>)
					RadiationProtectionSecOne::setTypeOfApplication);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<RadiationProtectionSecOne, Long>)
					RadiationProtectionSecOne::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getRadiationProtectSecOneId() {
		return _radiationProtectSecOneId;
	}

	@Override
	public void setRadiationProtectSecOneId(long radiationProtectSecOneId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationProtectSecOneId = radiationProtectSecOneId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCurrentAuthNum() {
		if (_currentAuthNum == null) {
			return "";
		}
		else {
			return _currentAuthNum;
		}
	}

	@Override
	public void setCurrentAuthNum(String currentAuthNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentAuthNum = currentAuthNum;
	}

	@JSON
	@Override
	public String getReasonForAmendment() {
		if (_reasonForAmendment == null) {
			return "";
		}
		else {
			return _reasonForAmendment;
		}
	}

	@Override
	public void setReasonForAmendment(String reasonForAmendment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForAmendment = reasonForAmendment;
	}

	@JSON
	@Override
	public String getTypeOfApplication() {
		if (_typeOfApplication == null) {
			return "";
		}
		else {
			return _typeOfApplication;
		}
	}

	@Override
	public void setTypeOfApplication(String typeOfApplication) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfApplication = typeOfApplication;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RadiationProtectionSecOne.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RadiationProtectionSecOne toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RadiationProtectionSecOne>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RadiationProtectionSecOneImpl radiationProtectionSecOneImpl =
			new RadiationProtectionSecOneImpl();

		radiationProtectionSecOneImpl.setRadiationProtectSecOneId(
			getRadiationProtectSecOneId());
		radiationProtectionSecOneImpl.setGroupId(getGroupId());
		radiationProtectionSecOneImpl.setCompanyId(getCompanyId());
		radiationProtectionSecOneImpl.setUserId(getUserId());
		radiationProtectionSecOneImpl.setUserName(getUserName());
		radiationProtectionSecOneImpl.setCreateDate(getCreateDate());
		radiationProtectionSecOneImpl.setModifiedDate(getModifiedDate());
		radiationProtectionSecOneImpl.setCurrentAuthNum(getCurrentAuthNum());
		radiationProtectionSecOneImpl.setReasonForAmendment(
			getReasonForAmendment());
		radiationProtectionSecOneImpl.setTypeOfApplication(
			getTypeOfApplication());
		radiationProtectionSecOneImpl.setHsraApplicationId(
			getHsraApplicationId());

		radiationProtectionSecOneImpl.resetOriginalValues();

		return radiationProtectionSecOneImpl;
	}

	@Override
	public RadiationProtectionSecOne cloneWithOriginalValues() {
		RadiationProtectionSecOneImpl radiationProtectionSecOneImpl =
			new RadiationProtectionSecOneImpl();

		radiationProtectionSecOneImpl.setRadiationProtectSecOneId(
			this.<Long>getColumnOriginalValue("radiationProtectSecOneId"));
		radiationProtectionSecOneImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		radiationProtectionSecOneImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		radiationProtectionSecOneImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		radiationProtectionSecOneImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		radiationProtectionSecOneImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		radiationProtectionSecOneImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		radiationProtectionSecOneImpl.setCurrentAuthNum(
			this.<String>getColumnOriginalValue("currentAuthNum"));
		radiationProtectionSecOneImpl.setReasonForAmendment(
			this.<String>getColumnOriginalValue("reasonForAmendment"));
		radiationProtectionSecOneImpl.setTypeOfApplication(
			this.<String>getColumnOriginalValue("typeOfApplication"));
		radiationProtectionSecOneImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return radiationProtectionSecOneImpl;
	}

	@Override
	public int compareTo(RadiationProtectionSecOne radiationProtectionSecOne) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), radiationProtectionSecOne.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RadiationProtectionSecOne)) {
			return false;
		}

		RadiationProtectionSecOne radiationProtectionSecOne =
			(RadiationProtectionSecOne)object;

		long primaryKey = radiationProtectionSecOne.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RadiationProtectionSecOne> toCacheModel() {
		RadiationProtectionSecOneCacheModel
			radiationProtectionSecOneCacheModel =
				new RadiationProtectionSecOneCacheModel();

		radiationProtectionSecOneCacheModel.radiationProtectSecOneId =
			getRadiationProtectSecOneId();

		radiationProtectionSecOneCacheModel.groupId = getGroupId();

		radiationProtectionSecOneCacheModel.companyId = getCompanyId();

		radiationProtectionSecOneCacheModel.userId = getUserId();

		radiationProtectionSecOneCacheModel.userName = getUserName();

		String userName = radiationProtectionSecOneCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			radiationProtectionSecOneCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			radiationProtectionSecOneCacheModel.createDate =
				createDate.getTime();
		}
		else {
			radiationProtectionSecOneCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			radiationProtectionSecOneCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			radiationProtectionSecOneCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		radiationProtectionSecOneCacheModel.currentAuthNum =
			getCurrentAuthNum();

		String currentAuthNum =
			radiationProtectionSecOneCacheModel.currentAuthNum;

		if ((currentAuthNum != null) && (currentAuthNum.length() == 0)) {
			radiationProtectionSecOneCacheModel.currentAuthNum = null;
		}

		radiationProtectionSecOneCacheModel.reasonForAmendment =
			getReasonForAmendment();

		String reasonForAmendment =
			radiationProtectionSecOneCacheModel.reasonForAmendment;

		if ((reasonForAmendment != null) &&
			(reasonForAmendment.length() == 0)) {

			radiationProtectionSecOneCacheModel.reasonForAmendment = null;
		}

		radiationProtectionSecOneCacheModel.typeOfApplication =
			getTypeOfApplication();

		String typeOfApplication =
			radiationProtectionSecOneCacheModel.typeOfApplication;

		if ((typeOfApplication != null) && (typeOfApplication.length() == 0)) {
			radiationProtectionSecOneCacheModel.typeOfApplication = null;
		}

		radiationProtectionSecOneCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return radiationProtectionSecOneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RadiationProtectionSecOne, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RadiationProtectionSecOne, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RadiationProtectionSecOne, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RadiationProtectionSecOne)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, RadiationProtectionSecOne>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						RadiationProtectionSecOne.class, ModelWrapper.class);

	}

	private long _radiationProtectSecOneId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _currentAuthNum;
	private String _reasonForAmendment;
	private String _typeOfApplication;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<RadiationProtectionSecOne, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RadiationProtectionSecOne)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"radiationProtectSecOneId", _radiationProtectSecOneId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("currentAuthNum", _currentAuthNum);
		_columnOriginalValues.put("reasonForAmendment", _reasonForAmendment);
		_columnOriginalValues.put("typeOfApplication", _typeOfApplication);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("radiationProtectSecOneId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("currentAuthNum", 128L);

		columnBitmasks.put("reasonForAmendment", 256L);

		columnBitmasks.put("typeOfApplication", 512L);

		columnBitmasks.put("hsraApplicationId", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RadiationProtectionSecOne _escapedModel;

}