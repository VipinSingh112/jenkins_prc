/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.DetailOfBusinessSecThree;
import com.nbp.hsra.application.service.model.DetailOfBusinessSecThreeModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DetailOfBusinessSecThree service. Represents a row in the &quot;nbp_hsra_det_business&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DetailOfBusinessSecThreeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DetailOfBusinessSecThreeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DetailOfBusinessSecThreeImpl
 * @generated
 */
@JSON(strict = true)
public class DetailOfBusinessSecThreeModelImpl
	extends BaseModelImpl<DetailOfBusinessSecThree>
	implements DetailOfBusinessSecThreeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a detail of business sec three model instance should use the <code>DetailOfBusinessSecThree</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_det_business";

	public static final Object[][] TABLE_COLUMNS = {
		{"detailOfBusinessSecThreeId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"businessType", Types.VARCHAR},
		{"nuclearBusinessNumber", Types.VARCHAR},
		{"nuclearCorporationNum", Types.VARCHAR},
		{"nuclearPublicAct", Types.VARCHAR}, {"nuclearName", Types.VARCHAR},
		{"nuclearAddressThird", Types.VARCHAR},
		{"nuclearThirdParish", Types.VARCHAR},
		{"nuclearTelephoneNum", Types.VARCHAR},
		{"nuclearfaxNumber", Types.VARCHAR}, {"nuclearEmailAdd", Types.VARCHAR},
		{"nuclearFinancial", Types.VARCHAR}, {"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("detailOfBusinessSecThreeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("businessType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearBusinessNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearCorporationNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearPublicAct", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearAddressThird", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearThirdParish", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearTelephoneNum", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearfaxNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearEmailAdd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearFinancial", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_det_business (detailOfBusinessSecThreeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,businessType VARCHAR(75) null,nuclearBusinessNumber VARCHAR(75) null,nuclearCorporationNum VARCHAR(75) null,nuclearPublicAct VARCHAR(500) null,nuclearName VARCHAR(75) null,nuclearAddressThird VARCHAR(500) null,nuclearThirdParish VARCHAR(75) null,nuclearTelephoneNum VARCHAR(75) null,nuclearfaxNumber VARCHAR(75) null,nuclearEmailAdd VARCHAR(75) null,nuclearFinancial VARCHAR(500) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_det_business";

	public static final String ORDER_BY_JPQL =
		" ORDER BY detailOfBusinessSecThree.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_det_business.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DetailOfBusinessSecThreeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _detailOfBusinessSecThreeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDetailOfBusinessSecThreeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _detailOfBusinessSecThreeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DetailOfBusinessSecThree.class;
	}

	@Override
	public String getModelClassName() {
		return DetailOfBusinessSecThree.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DetailOfBusinessSecThree, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DetailOfBusinessSecThree, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DetailOfBusinessSecThree, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DetailOfBusinessSecThree)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DetailOfBusinessSecThree, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DetailOfBusinessSecThree, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DetailOfBusinessSecThree)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DetailOfBusinessSecThree, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DetailOfBusinessSecThree, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<DetailOfBusinessSecThree, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<DetailOfBusinessSecThree, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<DetailOfBusinessSecThree, Object>>();

			attributeGetterFunctions.put(
				"detailOfBusinessSecThreeId",
				DetailOfBusinessSecThree::getDetailOfBusinessSecThreeId);
			attributeGetterFunctions.put(
				"groupId", DetailOfBusinessSecThree::getGroupId);
			attributeGetterFunctions.put(
				"companyId", DetailOfBusinessSecThree::getCompanyId);
			attributeGetterFunctions.put(
				"userId", DetailOfBusinessSecThree::getUserId);
			attributeGetterFunctions.put(
				"userName", DetailOfBusinessSecThree::getUserName);
			attributeGetterFunctions.put(
				"createDate", DetailOfBusinessSecThree::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", DetailOfBusinessSecThree::getModifiedDate);
			attributeGetterFunctions.put(
				"businessType", DetailOfBusinessSecThree::getBusinessType);
			attributeGetterFunctions.put(
				"nuclearBusinessNumber",
				DetailOfBusinessSecThree::getNuclearBusinessNumber);
			attributeGetterFunctions.put(
				"nuclearCorporationNum",
				DetailOfBusinessSecThree::getNuclearCorporationNum);
			attributeGetterFunctions.put(
				"nuclearPublicAct",
				DetailOfBusinessSecThree::getNuclearPublicAct);
			attributeGetterFunctions.put(
				"nuclearName", DetailOfBusinessSecThree::getNuclearName);
			attributeGetterFunctions.put(
				"nuclearAddressThird",
				DetailOfBusinessSecThree::getNuclearAddressThird);
			attributeGetterFunctions.put(
				"nuclearThirdParish",
				DetailOfBusinessSecThree::getNuclearThirdParish);
			attributeGetterFunctions.put(
				"nuclearTelephoneNum",
				DetailOfBusinessSecThree::getNuclearTelephoneNum);
			attributeGetterFunctions.put(
				"nuclearfaxNumber",
				DetailOfBusinessSecThree::getNuclearfaxNumber);
			attributeGetterFunctions.put(
				"nuclearEmailAdd",
				DetailOfBusinessSecThree::getNuclearEmailAdd);
			attributeGetterFunctions.put(
				"nuclearFinancial",
				DetailOfBusinessSecThree::getNuclearFinancial);
			attributeGetterFunctions.put(
				"hsraApplicationId",
				DetailOfBusinessSecThree::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<DetailOfBusinessSecThree, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<DetailOfBusinessSecThree, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<DetailOfBusinessSecThree, ?>>();

			attributeSetterBiConsumers.put(
				"detailOfBusinessSecThreeId",
				(BiConsumer<DetailOfBusinessSecThree, Long>)
					DetailOfBusinessSecThree::setDetailOfBusinessSecThreeId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<DetailOfBusinessSecThree, Long>)
					DetailOfBusinessSecThree::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<DetailOfBusinessSecThree, Long>)
					DetailOfBusinessSecThree::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<DetailOfBusinessSecThree, Long>)
					DetailOfBusinessSecThree::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<DetailOfBusinessSecThree, Date>)
					DetailOfBusinessSecThree::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<DetailOfBusinessSecThree, Date>)
					DetailOfBusinessSecThree::setModifiedDate);
			attributeSetterBiConsumers.put(
				"businessType",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setBusinessType);
			attributeSetterBiConsumers.put(
				"nuclearBusinessNumber",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearBusinessNumber);
			attributeSetterBiConsumers.put(
				"nuclearCorporationNum",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearCorporationNum);
			attributeSetterBiConsumers.put(
				"nuclearPublicAct",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearPublicAct);
			attributeSetterBiConsumers.put(
				"nuclearName",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearName);
			attributeSetterBiConsumers.put(
				"nuclearAddressThird",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearAddressThird);
			attributeSetterBiConsumers.put(
				"nuclearThirdParish",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearThirdParish);
			attributeSetterBiConsumers.put(
				"nuclearTelephoneNum",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearTelephoneNum);
			attributeSetterBiConsumers.put(
				"nuclearfaxNumber",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearfaxNumber);
			attributeSetterBiConsumers.put(
				"nuclearEmailAdd",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearEmailAdd);
			attributeSetterBiConsumers.put(
				"nuclearFinancial",
				(BiConsumer<DetailOfBusinessSecThree, String>)
					DetailOfBusinessSecThree::setNuclearFinancial);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<DetailOfBusinessSecThree, Long>)
					DetailOfBusinessSecThree::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getDetailOfBusinessSecThreeId() {
		return _detailOfBusinessSecThreeId;
	}

	@Override
	public void setDetailOfBusinessSecThreeId(long detailOfBusinessSecThreeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_detailOfBusinessSecThreeId = detailOfBusinessSecThreeId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBusinessType() {
		if (_businessType == null) {
			return "";
		}
		else {
			return _businessType;
		}
	}

	@Override
	public void setBusinessType(String businessType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessType = businessType;
	}

	@JSON
	@Override
	public String getNuclearBusinessNumber() {
		if (_nuclearBusinessNumber == null) {
			return "";
		}
		else {
			return _nuclearBusinessNumber;
		}
	}

	@Override
	public void setNuclearBusinessNumber(String nuclearBusinessNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearBusinessNumber = nuclearBusinessNumber;
	}

	@JSON
	@Override
	public String getNuclearCorporationNum() {
		if (_nuclearCorporationNum == null) {
			return "";
		}
		else {
			return _nuclearCorporationNum;
		}
	}

	@Override
	public void setNuclearCorporationNum(String nuclearCorporationNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearCorporationNum = nuclearCorporationNum;
	}

	@JSON
	@Override
	public String getNuclearPublicAct() {
		if (_nuclearPublicAct == null) {
			return "";
		}
		else {
			return _nuclearPublicAct;
		}
	}

	@Override
	public void setNuclearPublicAct(String nuclearPublicAct) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearPublicAct = nuclearPublicAct;
	}

	@JSON
	@Override
	public String getNuclearName() {
		if (_nuclearName == null) {
			return "";
		}
		else {
			return _nuclearName;
		}
	}

	@Override
	public void setNuclearName(String nuclearName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearName = nuclearName;
	}

	@JSON
	@Override
	public String getNuclearAddressThird() {
		if (_nuclearAddressThird == null) {
			return "";
		}
		else {
			return _nuclearAddressThird;
		}
	}

	@Override
	public void setNuclearAddressThird(String nuclearAddressThird) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearAddressThird = nuclearAddressThird;
	}

	@JSON
	@Override
	public String getNuclearThirdParish() {
		if (_nuclearThirdParish == null) {
			return "";
		}
		else {
			return _nuclearThirdParish;
		}
	}

	@Override
	public void setNuclearThirdParish(String nuclearThirdParish) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearThirdParish = nuclearThirdParish;
	}

	@JSON
	@Override
	public String getNuclearTelephoneNum() {
		if (_nuclearTelephoneNum == null) {
			return "";
		}
		else {
			return _nuclearTelephoneNum;
		}
	}

	@Override
	public void setNuclearTelephoneNum(String nuclearTelephoneNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearTelephoneNum = nuclearTelephoneNum;
	}

	@JSON
	@Override
	public String getNuclearfaxNumber() {
		if (_nuclearfaxNumber == null) {
			return "";
		}
		else {
			return _nuclearfaxNumber;
		}
	}

	@Override
	public void setNuclearfaxNumber(String nuclearfaxNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearfaxNumber = nuclearfaxNumber;
	}

	@JSON
	@Override
	public String getNuclearEmailAdd() {
		if (_nuclearEmailAdd == null) {
			return "";
		}
		else {
			return _nuclearEmailAdd;
		}
	}

	@Override
	public void setNuclearEmailAdd(String nuclearEmailAdd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearEmailAdd = nuclearEmailAdd;
	}

	@JSON
	@Override
	public String getNuclearFinancial() {
		if (_nuclearFinancial == null) {
			return "";
		}
		else {
			return _nuclearFinancial;
		}
	}

	@Override
	public void setNuclearFinancial(String nuclearFinancial) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearFinancial = nuclearFinancial;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DetailOfBusinessSecThree.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DetailOfBusinessSecThree toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DetailOfBusinessSecThree>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DetailOfBusinessSecThreeImpl detailOfBusinessSecThreeImpl =
			new DetailOfBusinessSecThreeImpl();

		detailOfBusinessSecThreeImpl.setDetailOfBusinessSecThreeId(
			getDetailOfBusinessSecThreeId());
		detailOfBusinessSecThreeImpl.setGroupId(getGroupId());
		detailOfBusinessSecThreeImpl.setCompanyId(getCompanyId());
		detailOfBusinessSecThreeImpl.setUserId(getUserId());
		detailOfBusinessSecThreeImpl.setUserName(getUserName());
		detailOfBusinessSecThreeImpl.setCreateDate(getCreateDate());
		detailOfBusinessSecThreeImpl.setModifiedDate(getModifiedDate());
		detailOfBusinessSecThreeImpl.setBusinessType(getBusinessType());
		detailOfBusinessSecThreeImpl.setNuclearBusinessNumber(
			getNuclearBusinessNumber());
		detailOfBusinessSecThreeImpl.setNuclearCorporationNum(
			getNuclearCorporationNum());
		detailOfBusinessSecThreeImpl.setNuclearPublicAct(getNuclearPublicAct());
		detailOfBusinessSecThreeImpl.setNuclearName(getNuclearName());
		detailOfBusinessSecThreeImpl.setNuclearAddressThird(
			getNuclearAddressThird());
		detailOfBusinessSecThreeImpl.setNuclearThirdParish(
			getNuclearThirdParish());
		detailOfBusinessSecThreeImpl.setNuclearTelephoneNum(
			getNuclearTelephoneNum());
		detailOfBusinessSecThreeImpl.setNuclearfaxNumber(getNuclearfaxNumber());
		detailOfBusinessSecThreeImpl.setNuclearEmailAdd(getNuclearEmailAdd());
		detailOfBusinessSecThreeImpl.setNuclearFinancial(getNuclearFinancial());
		detailOfBusinessSecThreeImpl.setHsraApplicationId(
			getHsraApplicationId());

		detailOfBusinessSecThreeImpl.resetOriginalValues();

		return detailOfBusinessSecThreeImpl;
	}

	@Override
	public DetailOfBusinessSecThree cloneWithOriginalValues() {
		DetailOfBusinessSecThreeImpl detailOfBusinessSecThreeImpl =
			new DetailOfBusinessSecThreeImpl();

		detailOfBusinessSecThreeImpl.setDetailOfBusinessSecThreeId(
			this.<Long>getColumnOriginalValue("detailOfBusinessSecThreeId"));
		detailOfBusinessSecThreeImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		detailOfBusinessSecThreeImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		detailOfBusinessSecThreeImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		detailOfBusinessSecThreeImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		detailOfBusinessSecThreeImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		detailOfBusinessSecThreeImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		detailOfBusinessSecThreeImpl.setBusinessType(
			this.<String>getColumnOriginalValue("businessType"));
		detailOfBusinessSecThreeImpl.setNuclearBusinessNumber(
			this.<String>getColumnOriginalValue("nuclearBusinessNumber"));
		detailOfBusinessSecThreeImpl.setNuclearCorporationNum(
			this.<String>getColumnOriginalValue("nuclearCorporationNum"));
		detailOfBusinessSecThreeImpl.setNuclearPublicAct(
			this.<String>getColumnOriginalValue("nuclearPublicAct"));
		detailOfBusinessSecThreeImpl.setNuclearName(
			this.<String>getColumnOriginalValue("nuclearName"));
		detailOfBusinessSecThreeImpl.setNuclearAddressThird(
			this.<String>getColumnOriginalValue("nuclearAddressThird"));
		detailOfBusinessSecThreeImpl.setNuclearThirdParish(
			this.<String>getColumnOriginalValue("nuclearThirdParish"));
		detailOfBusinessSecThreeImpl.setNuclearTelephoneNum(
			this.<String>getColumnOriginalValue("nuclearTelephoneNum"));
		detailOfBusinessSecThreeImpl.setNuclearfaxNumber(
			this.<String>getColumnOriginalValue("nuclearfaxNumber"));
		detailOfBusinessSecThreeImpl.setNuclearEmailAdd(
			this.<String>getColumnOriginalValue("nuclearEmailAdd"));
		detailOfBusinessSecThreeImpl.setNuclearFinancial(
			this.<String>getColumnOriginalValue("nuclearFinancial"));
		detailOfBusinessSecThreeImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return detailOfBusinessSecThreeImpl;
	}

	@Override
	public int compareTo(DetailOfBusinessSecThree detailOfBusinessSecThree) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), detailOfBusinessSecThree.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DetailOfBusinessSecThree)) {
			return false;
		}

		DetailOfBusinessSecThree detailOfBusinessSecThree =
			(DetailOfBusinessSecThree)object;

		long primaryKey = detailOfBusinessSecThree.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DetailOfBusinessSecThree> toCacheModel() {
		DetailOfBusinessSecThreeCacheModel detailOfBusinessSecThreeCacheModel =
			new DetailOfBusinessSecThreeCacheModel();

		detailOfBusinessSecThreeCacheModel.detailOfBusinessSecThreeId =
			getDetailOfBusinessSecThreeId();

		detailOfBusinessSecThreeCacheModel.groupId = getGroupId();

		detailOfBusinessSecThreeCacheModel.companyId = getCompanyId();

		detailOfBusinessSecThreeCacheModel.userId = getUserId();

		detailOfBusinessSecThreeCacheModel.userName = getUserName();

		String userName = detailOfBusinessSecThreeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			detailOfBusinessSecThreeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			detailOfBusinessSecThreeCacheModel.createDate =
				createDate.getTime();
		}
		else {
			detailOfBusinessSecThreeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			detailOfBusinessSecThreeCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			detailOfBusinessSecThreeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		detailOfBusinessSecThreeCacheModel.businessType = getBusinessType();

		String businessType = detailOfBusinessSecThreeCacheModel.businessType;

		if ((businessType != null) && (businessType.length() == 0)) {
			detailOfBusinessSecThreeCacheModel.businessType = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearBusinessNumber =
			getNuclearBusinessNumber();

		String nuclearBusinessNumber =
			detailOfBusinessSecThreeCacheModel.nuclearBusinessNumber;

		if ((nuclearBusinessNumber != null) &&
			(nuclearBusinessNumber.length() == 0)) {

			detailOfBusinessSecThreeCacheModel.nuclearBusinessNumber = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearCorporationNum =
			getNuclearCorporationNum();

		String nuclearCorporationNum =
			detailOfBusinessSecThreeCacheModel.nuclearCorporationNum;

		if ((nuclearCorporationNum != null) &&
			(nuclearCorporationNum.length() == 0)) {

			detailOfBusinessSecThreeCacheModel.nuclearCorporationNum = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearPublicAct =
			getNuclearPublicAct();

		String nuclearPublicAct =
			detailOfBusinessSecThreeCacheModel.nuclearPublicAct;

		if ((nuclearPublicAct != null) && (nuclearPublicAct.length() == 0)) {
			detailOfBusinessSecThreeCacheModel.nuclearPublicAct = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearName = getNuclearName();

		String nuclearName = detailOfBusinessSecThreeCacheModel.nuclearName;

		if ((nuclearName != null) && (nuclearName.length() == 0)) {
			detailOfBusinessSecThreeCacheModel.nuclearName = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearAddressThird =
			getNuclearAddressThird();

		String nuclearAddressThird =
			detailOfBusinessSecThreeCacheModel.nuclearAddressThird;

		if ((nuclearAddressThird != null) &&
			(nuclearAddressThird.length() == 0)) {

			detailOfBusinessSecThreeCacheModel.nuclearAddressThird = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearThirdParish =
			getNuclearThirdParish();

		String nuclearThirdParish =
			detailOfBusinessSecThreeCacheModel.nuclearThirdParish;

		if ((nuclearThirdParish != null) &&
			(nuclearThirdParish.length() == 0)) {

			detailOfBusinessSecThreeCacheModel.nuclearThirdParish = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearTelephoneNum =
			getNuclearTelephoneNum();

		String nuclearTelephoneNum =
			detailOfBusinessSecThreeCacheModel.nuclearTelephoneNum;

		if ((nuclearTelephoneNum != null) &&
			(nuclearTelephoneNum.length() == 0)) {

			detailOfBusinessSecThreeCacheModel.nuclearTelephoneNum = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearfaxNumber =
			getNuclearfaxNumber();

		String nuclearfaxNumber =
			detailOfBusinessSecThreeCacheModel.nuclearfaxNumber;

		if ((nuclearfaxNumber != null) && (nuclearfaxNumber.length() == 0)) {
			detailOfBusinessSecThreeCacheModel.nuclearfaxNumber = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearEmailAdd =
			getNuclearEmailAdd();

		String nuclearEmailAdd =
			detailOfBusinessSecThreeCacheModel.nuclearEmailAdd;

		if ((nuclearEmailAdd != null) && (nuclearEmailAdd.length() == 0)) {
			detailOfBusinessSecThreeCacheModel.nuclearEmailAdd = null;
		}

		detailOfBusinessSecThreeCacheModel.nuclearFinancial =
			getNuclearFinancial();

		String nuclearFinancial =
			detailOfBusinessSecThreeCacheModel.nuclearFinancial;

		if ((nuclearFinancial != null) && (nuclearFinancial.length() == 0)) {
			detailOfBusinessSecThreeCacheModel.nuclearFinancial = null;
		}

		detailOfBusinessSecThreeCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return detailOfBusinessSecThreeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DetailOfBusinessSecThree, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DetailOfBusinessSecThree, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DetailOfBusinessSecThree, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DetailOfBusinessSecThree)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, DetailOfBusinessSecThree>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						DetailOfBusinessSecThree.class, ModelWrapper.class);

	}

	private long _detailOfBusinessSecThreeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _businessType;
	private String _nuclearBusinessNumber;
	private String _nuclearCorporationNum;
	private String _nuclearPublicAct;
	private String _nuclearName;
	private String _nuclearAddressThird;
	private String _nuclearThirdParish;
	private String _nuclearTelephoneNum;
	private String _nuclearfaxNumber;
	private String _nuclearEmailAdd;
	private String _nuclearFinancial;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<DetailOfBusinessSecThree, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DetailOfBusinessSecThree)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"detailOfBusinessSecThreeId", _detailOfBusinessSecThreeId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("businessType", _businessType);
		_columnOriginalValues.put(
			"nuclearBusinessNumber", _nuclearBusinessNumber);
		_columnOriginalValues.put(
			"nuclearCorporationNum", _nuclearCorporationNum);
		_columnOriginalValues.put("nuclearPublicAct", _nuclearPublicAct);
		_columnOriginalValues.put("nuclearName", _nuclearName);
		_columnOriginalValues.put("nuclearAddressThird", _nuclearAddressThird);
		_columnOriginalValues.put("nuclearThirdParish", _nuclearThirdParish);
		_columnOriginalValues.put("nuclearTelephoneNum", _nuclearTelephoneNum);
		_columnOriginalValues.put("nuclearfaxNumber", _nuclearfaxNumber);
		_columnOriginalValues.put("nuclearEmailAdd", _nuclearEmailAdd);
		_columnOriginalValues.put("nuclearFinancial", _nuclearFinancial);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("detailOfBusinessSecThreeId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("businessType", 128L);

		columnBitmasks.put("nuclearBusinessNumber", 256L);

		columnBitmasks.put("nuclearCorporationNum", 512L);

		columnBitmasks.put("nuclearPublicAct", 1024L);

		columnBitmasks.put("nuclearName", 2048L);

		columnBitmasks.put("nuclearAddressThird", 4096L);

		columnBitmasks.put("nuclearThirdParish", 8192L);

		columnBitmasks.put("nuclearTelephoneNum", 16384L);

		columnBitmasks.put("nuclearfaxNumber", 32768L);

		columnBitmasks.put("nuclearEmailAdd", 65536L);

		columnBitmasks.put("nuclearFinancial", 131072L);

		columnBitmasks.put("hsraApplicationId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DetailOfBusinessSecThree _escapedModel;

}