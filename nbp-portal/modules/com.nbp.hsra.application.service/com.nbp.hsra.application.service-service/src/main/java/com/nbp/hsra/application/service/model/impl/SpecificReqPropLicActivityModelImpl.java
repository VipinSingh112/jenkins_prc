/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.SpecificReqPropLicActivity;
import com.nbp.hsra.application.service.model.SpecificReqPropLicActivityModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SpecificReqPropLicActivity service. Represents a row in the &quot;nbp_hsra_specific_require&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SpecificReqPropLicActivityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpecificReqPropLicActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SpecificReqPropLicActivityImpl
 * @generated
 */
@JSON(strict = true)
public class SpecificReqPropLicActivityModelImpl
	extends BaseModelImpl<SpecificReqPropLicActivity>
	implements SpecificReqPropLicActivityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a specific req prop lic activity model instance should use the <code>SpecificReqPropLicActivity</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_specific_require";

	public static final Object[][] TABLE_COLUMNS = {
		{"specificReqPropLicActivityId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"adminTreatment", Types.VARCHAR}, {"qualityProgramme", Types.VARCHAR},
		{"instructionsCaregivers", Types.VARCHAR},
		{"instructionsPatients", Types.VARCHAR},
		{"patientsRelease", Types.VARCHAR}, {"treatmentRooms", Types.VARCHAR},
		{"medicalEmergencies", Types.VARCHAR},
		{"nuclearMedicine", Types.VARCHAR},
		{"diagnosticStudies", Types.VARCHAR},
		{"biomedicalResearch", Types.VARCHAR},
		{"researchReview", Types.VARCHAR},
		{"emergencyOperating", Types.VARCHAR},
		{"certificatePackages", Types.VARCHAR},
		{"exposureDevices", Types.VARCHAR}, {"equipmentSafety", Types.VARCHAR},
		{"transportPlan", Types.VARCHAR}, {"animalsTreatment", Types.VARCHAR},
		{"animalHousing", Types.VARCHAR}, {"disposalWaste", Types.VARCHAR},
		{"monitoringAnimalHousing", Types.VARCHAR},
		{"releaseAnimals", Types.VARCHAR}, {"proceduresApp", Types.VARCHAR},
		{"disposalsApp", Types.VARCHAR},
		{"monitoringMaterialNu", Types.VARCHAR},
		{"handlingProcedures", Types.VARCHAR}, {"hoppersEntry", Types.VARCHAR},
		{"operatingConditions", Types.VARCHAR},
		{"insertionType", Types.VARCHAR}, {"installationFixed", Types.VARCHAR},
		{"transportPlanGauge", Types.VARCHAR},
		{"emergencyAddition", Types.VARCHAR},
		{"nuclearEnviroment", Types.VARCHAR}, {"fishingTool", Types.VARCHAR},
		{"sealedSources", Types.VARCHAR}, {"abandonmentZone", Types.VARCHAR},
		{"servicingCopy", Types.VARCHAR},
		{"manufacturingDevelopment", Types.VARCHAR},
		{"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("specificReqPropLicActivityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("adminTreatment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualityProgramme", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instructionsCaregivers", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instructionsPatients", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("patientsRelease", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("treatmentRooms", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medicalEmergencies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearMedicine", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("diagnosticStudies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("biomedicalResearch", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("researchReview", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyOperating", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificatePackages", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exposureDevices", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equipmentSafety", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transportPlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("animalsTreatment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("animalHousing", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("disposalWaste", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("monitoringAnimalHousing", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("releaseAnimals", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proceduresApp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("disposalsApp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("monitoringMaterialNu", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("handlingProcedures", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hoppersEntry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operatingConditions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insertionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("installationFixed", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transportPlanGauge", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyAddition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nuclearEnviroment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fishingTool", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sealedSources", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("abandonmentZone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("servicingCopy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturingDevelopment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_specific_require (specificReqPropLicActivityId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,adminTreatment VARCHAR(1000) null,qualityProgramme VARCHAR(1000) null,instructionsCaregivers VARCHAR(1000) null,instructionsPatients VARCHAR(1000) null,patientsRelease VARCHAR(1000) null,treatmentRooms VARCHAR(1000) null,medicalEmergencies VARCHAR(1000) null,nuclearMedicine VARCHAR(1000) null,diagnosticStudies VARCHAR(1000) null,biomedicalResearch VARCHAR(1000) null,researchReview VARCHAR(1000) null,emergencyOperating VARCHAR(1000) null,certificatePackages VARCHAR(1000) null,exposureDevices VARCHAR(1000) null,equipmentSafety VARCHAR(1000) null,transportPlan VARCHAR(1000) null,animalsTreatment VARCHAR(1000) null,animalHousing VARCHAR(1000) null,disposalWaste VARCHAR(1000) null,monitoringAnimalHousing VARCHAR(1000) null,releaseAnimals VARCHAR(1000) null,proceduresApp VARCHAR(1000) null,disposalsApp VARCHAR(1000) null,monitoringMaterialNu VARCHAR(1000) null,handlingProcedures VARCHAR(1000) null,hoppersEntry VARCHAR(1000) null,operatingConditions VARCHAR(1000) null,insertionType VARCHAR(1000) null,installationFixed VARCHAR(1000) null,transportPlanGauge VARCHAR(1000) null,emergencyAddition VARCHAR(1000) null,nuclearEnviroment VARCHAR(1000) null,fishingTool VARCHAR(1000) null,sealedSources VARCHAR(1000) null,abandonmentZone VARCHAR(1000) null,servicingCopy VARCHAR(1000) null,manufacturingDevelopment VARCHAR(1000) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_specific_require";

	public static final String ORDER_BY_JPQL =
		" ORDER BY specificReqPropLicActivity.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_specific_require.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SpecificReqPropLicActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _specificReqPropLicActivityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpecificReqPropLicActivityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _specificReqPropLicActivityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpecificReqPropLicActivity.class;
	}

	@Override
	public String getModelClassName() {
		return SpecificReqPropLicActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SpecificReqPropLicActivity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SpecificReqPropLicActivity, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SpecificReqPropLicActivity, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(SpecificReqPropLicActivity)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SpecificReqPropLicActivity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SpecificReqPropLicActivity, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SpecificReqPropLicActivity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SpecificReqPropLicActivity, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SpecificReqPropLicActivity, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<SpecificReqPropLicActivity, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<SpecificReqPropLicActivity, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<SpecificReqPropLicActivity, Object>>();

			attributeGetterFunctions.put(
				"specificReqPropLicActivityId",
				SpecificReqPropLicActivity::getSpecificReqPropLicActivityId);
			attributeGetterFunctions.put(
				"groupId", SpecificReqPropLicActivity::getGroupId);
			attributeGetterFunctions.put(
				"companyId", SpecificReqPropLicActivity::getCompanyId);
			attributeGetterFunctions.put(
				"userId", SpecificReqPropLicActivity::getUserId);
			attributeGetterFunctions.put(
				"userName", SpecificReqPropLicActivity::getUserName);
			attributeGetterFunctions.put(
				"createDate", SpecificReqPropLicActivity::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", SpecificReqPropLicActivity::getModifiedDate);
			attributeGetterFunctions.put(
				"adminTreatment",
				SpecificReqPropLicActivity::getAdminTreatment);
			attributeGetterFunctions.put(
				"qualityProgramme",
				SpecificReqPropLicActivity::getQualityProgramme);
			attributeGetterFunctions.put(
				"instructionsCaregivers",
				SpecificReqPropLicActivity::getInstructionsCaregivers);
			attributeGetterFunctions.put(
				"instructionsPatients",
				SpecificReqPropLicActivity::getInstructionsPatients);
			attributeGetterFunctions.put(
				"patientsRelease",
				SpecificReqPropLicActivity::getPatientsRelease);
			attributeGetterFunctions.put(
				"treatmentRooms",
				SpecificReqPropLicActivity::getTreatmentRooms);
			attributeGetterFunctions.put(
				"medicalEmergencies",
				SpecificReqPropLicActivity::getMedicalEmergencies);
			attributeGetterFunctions.put(
				"nuclearMedicine",
				SpecificReqPropLicActivity::getNuclearMedicine);
			attributeGetterFunctions.put(
				"diagnosticStudies",
				SpecificReqPropLicActivity::getDiagnosticStudies);
			attributeGetterFunctions.put(
				"biomedicalResearch",
				SpecificReqPropLicActivity::getBiomedicalResearch);
			attributeGetterFunctions.put(
				"researchReview",
				SpecificReqPropLicActivity::getResearchReview);
			attributeGetterFunctions.put(
				"emergencyOperating",
				SpecificReqPropLicActivity::getEmergencyOperating);
			attributeGetterFunctions.put(
				"certificatePackages",
				SpecificReqPropLicActivity::getCertificatePackages);
			attributeGetterFunctions.put(
				"exposureDevices",
				SpecificReqPropLicActivity::getExposureDevices);
			attributeGetterFunctions.put(
				"equipmentSafety",
				SpecificReqPropLicActivity::getEquipmentSafety);
			attributeGetterFunctions.put(
				"transportPlan", SpecificReqPropLicActivity::getTransportPlan);
			attributeGetterFunctions.put(
				"animalsTreatment",
				SpecificReqPropLicActivity::getAnimalsTreatment);
			attributeGetterFunctions.put(
				"animalHousing", SpecificReqPropLicActivity::getAnimalHousing);
			attributeGetterFunctions.put(
				"disposalWaste", SpecificReqPropLicActivity::getDisposalWaste);
			attributeGetterFunctions.put(
				"monitoringAnimalHousing",
				SpecificReqPropLicActivity::getMonitoringAnimalHousing);
			attributeGetterFunctions.put(
				"releaseAnimals",
				SpecificReqPropLicActivity::getReleaseAnimals);
			attributeGetterFunctions.put(
				"proceduresApp", SpecificReqPropLicActivity::getProceduresApp);
			attributeGetterFunctions.put(
				"disposalsApp", SpecificReqPropLicActivity::getDisposalsApp);
			attributeGetterFunctions.put(
				"monitoringMaterialNu",
				SpecificReqPropLicActivity::getMonitoringMaterialNu);
			attributeGetterFunctions.put(
				"handlingProcedures",
				SpecificReqPropLicActivity::getHandlingProcedures);
			attributeGetterFunctions.put(
				"hoppersEntry", SpecificReqPropLicActivity::getHoppersEntry);
			attributeGetterFunctions.put(
				"operatingConditions",
				SpecificReqPropLicActivity::getOperatingConditions);
			attributeGetterFunctions.put(
				"insertionType", SpecificReqPropLicActivity::getInsertionType);
			attributeGetterFunctions.put(
				"installationFixed",
				SpecificReqPropLicActivity::getInstallationFixed);
			attributeGetterFunctions.put(
				"transportPlanGauge",
				SpecificReqPropLicActivity::getTransportPlanGauge);
			attributeGetterFunctions.put(
				"emergencyAddition",
				SpecificReqPropLicActivity::getEmergencyAddition);
			attributeGetterFunctions.put(
				"nuclearEnviroment",
				SpecificReqPropLicActivity::getNuclearEnviroment);
			attributeGetterFunctions.put(
				"fishingTool", SpecificReqPropLicActivity::getFishingTool);
			attributeGetterFunctions.put(
				"sealedSources", SpecificReqPropLicActivity::getSealedSources);
			attributeGetterFunctions.put(
				"abandonmentZone",
				SpecificReqPropLicActivity::getAbandonmentZone);
			attributeGetterFunctions.put(
				"servicingCopy", SpecificReqPropLicActivity::getServicingCopy);
			attributeGetterFunctions.put(
				"manufacturingDevelopment",
				SpecificReqPropLicActivity::getManufacturingDevelopment);
			attributeGetterFunctions.put(
				"hsraApplicationId",
				SpecificReqPropLicActivity::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<SpecificReqPropLicActivity, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<SpecificReqPropLicActivity, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<SpecificReqPropLicActivity, ?>>();

			attributeSetterBiConsumers.put(
				"specificReqPropLicActivityId",
				(BiConsumer<SpecificReqPropLicActivity, Long>)
					SpecificReqPropLicActivity::
						setSpecificReqPropLicActivityId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<SpecificReqPropLicActivity, Long>)
					SpecificReqPropLicActivity::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<SpecificReqPropLicActivity, Long>)
					SpecificReqPropLicActivity::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<SpecificReqPropLicActivity, Long>)
					SpecificReqPropLicActivity::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<SpecificReqPropLicActivity, Date>)
					SpecificReqPropLicActivity::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<SpecificReqPropLicActivity, Date>)
					SpecificReqPropLicActivity::setModifiedDate);
			attributeSetterBiConsumers.put(
				"adminTreatment",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setAdminTreatment);
			attributeSetterBiConsumers.put(
				"qualityProgramme",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setQualityProgramme);
			attributeSetterBiConsumers.put(
				"instructionsCaregivers",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setInstructionsCaregivers);
			attributeSetterBiConsumers.put(
				"instructionsPatients",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setInstructionsPatients);
			attributeSetterBiConsumers.put(
				"patientsRelease",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setPatientsRelease);
			attributeSetterBiConsumers.put(
				"treatmentRooms",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setTreatmentRooms);
			attributeSetterBiConsumers.put(
				"medicalEmergencies",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setMedicalEmergencies);
			attributeSetterBiConsumers.put(
				"nuclearMedicine",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setNuclearMedicine);
			attributeSetterBiConsumers.put(
				"diagnosticStudies",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setDiagnosticStudies);
			attributeSetterBiConsumers.put(
				"biomedicalResearch",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setBiomedicalResearch);
			attributeSetterBiConsumers.put(
				"researchReview",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setResearchReview);
			attributeSetterBiConsumers.put(
				"emergencyOperating",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setEmergencyOperating);
			attributeSetterBiConsumers.put(
				"certificatePackages",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setCertificatePackages);
			attributeSetterBiConsumers.put(
				"exposureDevices",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setExposureDevices);
			attributeSetterBiConsumers.put(
				"equipmentSafety",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setEquipmentSafety);
			attributeSetterBiConsumers.put(
				"transportPlan",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setTransportPlan);
			attributeSetterBiConsumers.put(
				"animalsTreatment",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setAnimalsTreatment);
			attributeSetterBiConsumers.put(
				"animalHousing",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setAnimalHousing);
			attributeSetterBiConsumers.put(
				"disposalWaste",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setDisposalWaste);
			attributeSetterBiConsumers.put(
				"monitoringAnimalHousing",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setMonitoringAnimalHousing);
			attributeSetterBiConsumers.put(
				"releaseAnimals",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setReleaseAnimals);
			attributeSetterBiConsumers.put(
				"proceduresApp",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setProceduresApp);
			attributeSetterBiConsumers.put(
				"disposalsApp",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setDisposalsApp);
			attributeSetterBiConsumers.put(
				"monitoringMaterialNu",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setMonitoringMaterialNu);
			attributeSetterBiConsumers.put(
				"handlingProcedures",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setHandlingProcedures);
			attributeSetterBiConsumers.put(
				"hoppersEntry",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setHoppersEntry);
			attributeSetterBiConsumers.put(
				"operatingConditions",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setOperatingConditions);
			attributeSetterBiConsumers.put(
				"insertionType",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setInsertionType);
			attributeSetterBiConsumers.put(
				"installationFixed",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setInstallationFixed);
			attributeSetterBiConsumers.put(
				"transportPlanGauge",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setTransportPlanGauge);
			attributeSetterBiConsumers.put(
				"emergencyAddition",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setEmergencyAddition);
			attributeSetterBiConsumers.put(
				"nuclearEnviroment",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setNuclearEnviroment);
			attributeSetterBiConsumers.put(
				"fishingTool",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setFishingTool);
			attributeSetterBiConsumers.put(
				"sealedSources",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setSealedSources);
			attributeSetterBiConsumers.put(
				"abandonmentZone",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setAbandonmentZone);
			attributeSetterBiConsumers.put(
				"servicingCopy",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setServicingCopy);
			attributeSetterBiConsumers.put(
				"manufacturingDevelopment",
				(BiConsumer<SpecificReqPropLicActivity, String>)
					SpecificReqPropLicActivity::setManufacturingDevelopment);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<SpecificReqPropLicActivity, Long>)
					SpecificReqPropLicActivity::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getSpecificReqPropLicActivityId() {
		return _specificReqPropLicActivityId;
	}

	@Override
	public void setSpecificReqPropLicActivityId(
		long specificReqPropLicActivityId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificReqPropLicActivityId = specificReqPropLicActivityId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAdminTreatment() {
		if (_adminTreatment == null) {
			return "";
		}
		else {
			return _adminTreatment;
		}
	}

	@Override
	public void setAdminTreatment(String adminTreatment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_adminTreatment = adminTreatment;
	}

	@JSON
	@Override
	public String getQualityProgramme() {
		if (_qualityProgramme == null) {
			return "";
		}
		else {
			return _qualityProgramme;
		}
	}

	@Override
	public void setQualityProgramme(String qualityProgramme) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_qualityProgramme = qualityProgramme;
	}

	@JSON
	@Override
	public String getInstructionsCaregivers() {
		if (_instructionsCaregivers == null) {
			return "";
		}
		else {
			return _instructionsCaregivers;
		}
	}

	@Override
	public void setInstructionsCaregivers(String instructionsCaregivers) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_instructionsCaregivers = instructionsCaregivers;
	}

	@JSON
	@Override
	public String getInstructionsPatients() {
		if (_instructionsPatients == null) {
			return "";
		}
		else {
			return _instructionsPatients;
		}
	}

	@Override
	public void setInstructionsPatients(String instructionsPatients) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_instructionsPatients = instructionsPatients;
	}

	@JSON
	@Override
	public String getPatientsRelease() {
		if (_patientsRelease == null) {
			return "";
		}
		else {
			return _patientsRelease;
		}
	}

	@Override
	public void setPatientsRelease(String patientsRelease) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientsRelease = patientsRelease;
	}

	@JSON
	@Override
	public String getTreatmentRooms() {
		if (_treatmentRooms == null) {
			return "";
		}
		else {
			return _treatmentRooms;
		}
	}

	@Override
	public void setTreatmentRooms(String treatmentRooms) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_treatmentRooms = treatmentRooms;
	}

	@JSON
	@Override
	public String getMedicalEmergencies() {
		if (_medicalEmergencies == null) {
			return "";
		}
		else {
			return _medicalEmergencies;
		}
	}

	@Override
	public void setMedicalEmergencies(String medicalEmergencies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_medicalEmergencies = medicalEmergencies;
	}

	@JSON
	@Override
	public String getNuclearMedicine() {
		if (_nuclearMedicine == null) {
			return "";
		}
		else {
			return _nuclearMedicine;
		}
	}

	@Override
	public void setNuclearMedicine(String nuclearMedicine) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearMedicine = nuclearMedicine;
	}

	@JSON
	@Override
	public String getDiagnosticStudies() {
		if (_diagnosticStudies == null) {
			return "";
		}
		else {
			return _diagnosticStudies;
		}
	}

	@Override
	public void setDiagnosticStudies(String diagnosticStudies) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_diagnosticStudies = diagnosticStudies;
	}

	@JSON
	@Override
	public String getBiomedicalResearch() {
		if (_biomedicalResearch == null) {
			return "";
		}
		else {
			return _biomedicalResearch;
		}
	}

	@Override
	public void setBiomedicalResearch(String biomedicalResearch) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_biomedicalResearch = biomedicalResearch;
	}

	@JSON
	@Override
	public String getResearchReview() {
		if (_researchReview == null) {
			return "";
		}
		else {
			return _researchReview;
		}
	}

	@Override
	public void setResearchReview(String researchReview) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_researchReview = researchReview;
	}

	@JSON
	@Override
	public String getEmergencyOperating() {
		if (_emergencyOperating == null) {
			return "";
		}
		else {
			return _emergencyOperating;
		}
	}

	@Override
	public void setEmergencyOperating(String emergencyOperating) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyOperating = emergencyOperating;
	}

	@JSON
	@Override
	public String getCertificatePackages() {
		if (_certificatePackages == null) {
			return "";
		}
		else {
			return _certificatePackages;
		}
	}

	@Override
	public void setCertificatePackages(String certificatePackages) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_certificatePackages = certificatePackages;
	}

	@JSON
	@Override
	public String getExposureDevices() {
		if (_exposureDevices == null) {
			return "";
		}
		else {
			return _exposureDevices;
		}
	}

	@Override
	public void setExposureDevices(String exposureDevices) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exposureDevices = exposureDevices;
	}

	@JSON
	@Override
	public String getEquipmentSafety() {
		if (_equipmentSafety == null) {
			return "";
		}
		else {
			return _equipmentSafety;
		}
	}

	@Override
	public void setEquipmentSafety(String equipmentSafety) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_equipmentSafety = equipmentSafety;
	}

	@JSON
	@Override
	public String getTransportPlan() {
		if (_transportPlan == null) {
			return "";
		}
		else {
			return _transportPlan;
		}
	}

	@Override
	public void setTransportPlan(String transportPlan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transportPlan = transportPlan;
	}

	@JSON
	@Override
	public String getAnimalsTreatment() {
		if (_animalsTreatment == null) {
			return "";
		}
		else {
			return _animalsTreatment;
		}
	}

	@Override
	public void setAnimalsTreatment(String animalsTreatment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_animalsTreatment = animalsTreatment;
	}

	@JSON
	@Override
	public String getAnimalHousing() {
		if (_animalHousing == null) {
			return "";
		}
		else {
			return _animalHousing;
		}
	}

	@Override
	public void setAnimalHousing(String animalHousing) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_animalHousing = animalHousing;
	}

	@JSON
	@Override
	public String getDisposalWaste() {
		if (_disposalWaste == null) {
			return "";
		}
		else {
			return _disposalWaste;
		}
	}

	@Override
	public void setDisposalWaste(String disposalWaste) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_disposalWaste = disposalWaste;
	}

	@JSON
	@Override
	public String getMonitoringAnimalHousing() {
		if (_monitoringAnimalHousing == null) {
			return "";
		}
		else {
			return _monitoringAnimalHousing;
		}
	}

	@Override
	public void setMonitoringAnimalHousing(String monitoringAnimalHousing) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monitoringAnimalHousing = monitoringAnimalHousing;
	}

	@JSON
	@Override
	public String getReleaseAnimals() {
		if (_releaseAnimals == null) {
			return "";
		}
		else {
			return _releaseAnimals;
		}
	}

	@Override
	public void setReleaseAnimals(String releaseAnimals) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_releaseAnimals = releaseAnimals;
	}

	@JSON
	@Override
	public String getProceduresApp() {
		if (_proceduresApp == null) {
			return "";
		}
		else {
			return _proceduresApp;
		}
	}

	@Override
	public void setProceduresApp(String proceduresApp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_proceduresApp = proceduresApp;
	}

	@JSON
	@Override
	public String getDisposalsApp() {
		if (_disposalsApp == null) {
			return "";
		}
		else {
			return _disposalsApp;
		}
	}

	@Override
	public void setDisposalsApp(String disposalsApp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_disposalsApp = disposalsApp;
	}

	@JSON
	@Override
	public String getMonitoringMaterialNu() {
		if (_monitoringMaterialNu == null) {
			return "";
		}
		else {
			return _monitoringMaterialNu;
		}
	}

	@Override
	public void setMonitoringMaterialNu(String monitoringMaterialNu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monitoringMaterialNu = monitoringMaterialNu;
	}

	@JSON
	@Override
	public String getHandlingProcedures() {
		if (_handlingProcedures == null) {
			return "";
		}
		else {
			return _handlingProcedures;
		}
	}

	@Override
	public void setHandlingProcedures(String handlingProcedures) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_handlingProcedures = handlingProcedures;
	}

	@JSON
	@Override
	public String getHoppersEntry() {
		if (_hoppersEntry == null) {
			return "";
		}
		else {
			return _hoppersEntry;
		}
	}

	@Override
	public void setHoppersEntry(String hoppersEntry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hoppersEntry = hoppersEntry;
	}

	@JSON
	@Override
	public String getOperatingConditions() {
		if (_operatingConditions == null) {
			return "";
		}
		else {
			return _operatingConditions;
		}
	}

	@Override
	public void setOperatingConditions(String operatingConditions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_operatingConditions = operatingConditions;
	}

	@JSON
	@Override
	public String getInsertionType() {
		if (_insertionType == null) {
			return "";
		}
		else {
			return _insertionType;
		}
	}

	@Override
	public void setInsertionType(String insertionType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insertionType = insertionType;
	}

	@JSON
	@Override
	public String getInstallationFixed() {
		if (_installationFixed == null) {
			return "";
		}
		else {
			return _installationFixed;
		}
	}

	@Override
	public void setInstallationFixed(String installationFixed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_installationFixed = installationFixed;
	}

	@JSON
	@Override
	public String getTransportPlanGauge() {
		if (_transportPlanGauge == null) {
			return "";
		}
		else {
			return _transportPlanGauge;
		}
	}

	@Override
	public void setTransportPlanGauge(String transportPlanGauge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transportPlanGauge = transportPlanGauge;
	}

	@JSON
	@Override
	public String getEmergencyAddition() {
		if (_emergencyAddition == null) {
			return "";
		}
		else {
			return _emergencyAddition;
		}
	}

	@Override
	public void setEmergencyAddition(String emergencyAddition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emergencyAddition = emergencyAddition;
	}

	@JSON
	@Override
	public String getNuclearEnviroment() {
		if (_nuclearEnviroment == null) {
			return "";
		}
		else {
			return _nuclearEnviroment;
		}
	}

	@Override
	public void setNuclearEnviroment(String nuclearEnviroment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nuclearEnviroment = nuclearEnviroment;
	}

	@JSON
	@Override
	public String getFishingTool() {
		if (_fishingTool == null) {
			return "";
		}
		else {
			return _fishingTool;
		}
	}

	@Override
	public void setFishingTool(String fishingTool) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fishingTool = fishingTool;
	}

	@JSON
	@Override
	public String getSealedSources() {
		if (_sealedSources == null) {
			return "";
		}
		else {
			return _sealedSources;
		}
	}

	@Override
	public void setSealedSources(String sealedSources) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sealedSources = sealedSources;
	}

	@JSON
	@Override
	public String getAbandonmentZone() {
		if (_abandonmentZone == null) {
			return "";
		}
		else {
			return _abandonmentZone;
		}
	}

	@Override
	public void setAbandonmentZone(String abandonmentZone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_abandonmentZone = abandonmentZone;
	}

	@JSON
	@Override
	public String getServicingCopy() {
		if (_servicingCopy == null) {
			return "";
		}
		else {
			return _servicingCopy;
		}
	}

	@Override
	public void setServicingCopy(String servicingCopy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_servicingCopy = servicingCopy;
	}

	@JSON
	@Override
	public String getManufacturingDevelopment() {
		if (_manufacturingDevelopment == null) {
			return "";
		}
		else {
			return _manufacturingDevelopment;
		}
	}

	@Override
	public void setManufacturingDevelopment(String manufacturingDevelopment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_manufacturingDevelopment = manufacturingDevelopment;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SpecificReqPropLicActivity.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SpecificReqPropLicActivity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SpecificReqPropLicActivity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpecificReqPropLicActivityImpl specificReqPropLicActivityImpl =
			new SpecificReqPropLicActivityImpl();

		specificReqPropLicActivityImpl.setSpecificReqPropLicActivityId(
			getSpecificReqPropLicActivityId());
		specificReqPropLicActivityImpl.setGroupId(getGroupId());
		specificReqPropLicActivityImpl.setCompanyId(getCompanyId());
		specificReqPropLicActivityImpl.setUserId(getUserId());
		specificReqPropLicActivityImpl.setUserName(getUserName());
		specificReqPropLicActivityImpl.setCreateDate(getCreateDate());
		specificReqPropLicActivityImpl.setModifiedDate(getModifiedDate());
		specificReqPropLicActivityImpl.setAdminTreatment(getAdminTreatment());
		specificReqPropLicActivityImpl.setQualityProgramme(
			getQualityProgramme());
		specificReqPropLicActivityImpl.setInstructionsCaregivers(
			getInstructionsCaregivers());
		specificReqPropLicActivityImpl.setInstructionsPatients(
			getInstructionsPatients());
		specificReqPropLicActivityImpl.setPatientsRelease(getPatientsRelease());
		specificReqPropLicActivityImpl.setTreatmentRooms(getTreatmentRooms());
		specificReqPropLicActivityImpl.setMedicalEmergencies(
			getMedicalEmergencies());
		specificReqPropLicActivityImpl.setNuclearMedicine(getNuclearMedicine());
		specificReqPropLicActivityImpl.setDiagnosticStudies(
			getDiagnosticStudies());
		specificReqPropLicActivityImpl.setBiomedicalResearch(
			getBiomedicalResearch());
		specificReqPropLicActivityImpl.setResearchReview(getResearchReview());
		specificReqPropLicActivityImpl.setEmergencyOperating(
			getEmergencyOperating());
		specificReqPropLicActivityImpl.setCertificatePackages(
			getCertificatePackages());
		specificReqPropLicActivityImpl.setExposureDevices(getExposureDevices());
		specificReqPropLicActivityImpl.setEquipmentSafety(getEquipmentSafety());
		specificReqPropLicActivityImpl.setTransportPlan(getTransportPlan());
		specificReqPropLicActivityImpl.setAnimalsTreatment(
			getAnimalsTreatment());
		specificReqPropLicActivityImpl.setAnimalHousing(getAnimalHousing());
		specificReqPropLicActivityImpl.setDisposalWaste(getDisposalWaste());
		specificReqPropLicActivityImpl.setMonitoringAnimalHousing(
			getMonitoringAnimalHousing());
		specificReqPropLicActivityImpl.setReleaseAnimals(getReleaseAnimals());
		specificReqPropLicActivityImpl.setProceduresApp(getProceduresApp());
		specificReqPropLicActivityImpl.setDisposalsApp(getDisposalsApp());
		specificReqPropLicActivityImpl.setMonitoringMaterialNu(
			getMonitoringMaterialNu());
		specificReqPropLicActivityImpl.setHandlingProcedures(
			getHandlingProcedures());
		specificReqPropLicActivityImpl.setHoppersEntry(getHoppersEntry());
		specificReqPropLicActivityImpl.setOperatingConditions(
			getOperatingConditions());
		specificReqPropLicActivityImpl.setInsertionType(getInsertionType());
		specificReqPropLicActivityImpl.setInstallationFixed(
			getInstallationFixed());
		specificReqPropLicActivityImpl.setTransportPlanGauge(
			getTransportPlanGauge());
		specificReqPropLicActivityImpl.setEmergencyAddition(
			getEmergencyAddition());
		specificReqPropLicActivityImpl.setNuclearEnviroment(
			getNuclearEnviroment());
		specificReqPropLicActivityImpl.setFishingTool(getFishingTool());
		specificReqPropLicActivityImpl.setSealedSources(getSealedSources());
		specificReqPropLicActivityImpl.setAbandonmentZone(getAbandonmentZone());
		specificReqPropLicActivityImpl.setServicingCopy(getServicingCopy());
		specificReqPropLicActivityImpl.setManufacturingDevelopment(
			getManufacturingDevelopment());
		specificReqPropLicActivityImpl.setHsraApplicationId(
			getHsraApplicationId());

		specificReqPropLicActivityImpl.resetOriginalValues();

		return specificReqPropLicActivityImpl;
	}

	@Override
	public SpecificReqPropLicActivity cloneWithOriginalValues() {
		SpecificReqPropLicActivityImpl specificReqPropLicActivityImpl =
			new SpecificReqPropLicActivityImpl();

		specificReqPropLicActivityImpl.setSpecificReqPropLicActivityId(
			this.<Long>getColumnOriginalValue("specificReqPropLicActivityId"));
		specificReqPropLicActivityImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		specificReqPropLicActivityImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		specificReqPropLicActivityImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		specificReqPropLicActivityImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		specificReqPropLicActivityImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		specificReqPropLicActivityImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		specificReqPropLicActivityImpl.setAdminTreatment(
			this.<String>getColumnOriginalValue("adminTreatment"));
		specificReqPropLicActivityImpl.setQualityProgramme(
			this.<String>getColumnOriginalValue("qualityProgramme"));
		specificReqPropLicActivityImpl.setInstructionsCaregivers(
			this.<String>getColumnOriginalValue("instructionsCaregivers"));
		specificReqPropLicActivityImpl.setInstructionsPatients(
			this.<String>getColumnOriginalValue("instructionsPatients"));
		specificReqPropLicActivityImpl.setPatientsRelease(
			this.<String>getColumnOriginalValue("patientsRelease"));
		specificReqPropLicActivityImpl.setTreatmentRooms(
			this.<String>getColumnOriginalValue("treatmentRooms"));
		specificReqPropLicActivityImpl.setMedicalEmergencies(
			this.<String>getColumnOriginalValue("medicalEmergencies"));
		specificReqPropLicActivityImpl.setNuclearMedicine(
			this.<String>getColumnOriginalValue("nuclearMedicine"));
		specificReqPropLicActivityImpl.setDiagnosticStudies(
			this.<String>getColumnOriginalValue("diagnosticStudies"));
		specificReqPropLicActivityImpl.setBiomedicalResearch(
			this.<String>getColumnOriginalValue("biomedicalResearch"));
		specificReqPropLicActivityImpl.setResearchReview(
			this.<String>getColumnOriginalValue("researchReview"));
		specificReqPropLicActivityImpl.setEmergencyOperating(
			this.<String>getColumnOriginalValue("emergencyOperating"));
		specificReqPropLicActivityImpl.setCertificatePackages(
			this.<String>getColumnOriginalValue("certificatePackages"));
		specificReqPropLicActivityImpl.setExposureDevices(
			this.<String>getColumnOriginalValue("exposureDevices"));
		specificReqPropLicActivityImpl.setEquipmentSafety(
			this.<String>getColumnOriginalValue("equipmentSafety"));
		specificReqPropLicActivityImpl.setTransportPlan(
			this.<String>getColumnOriginalValue("transportPlan"));
		specificReqPropLicActivityImpl.setAnimalsTreatment(
			this.<String>getColumnOriginalValue("animalsTreatment"));
		specificReqPropLicActivityImpl.setAnimalHousing(
			this.<String>getColumnOriginalValue("animalHousing"));
		specificReqPropLicActivityImpl.setDisposalWaste(
			this.<String>getColumnOriginalValue("disposalWaste"));
		specificReqPropLicActivityImpl.setMonitoringAnimalHousing(
			this.<String>getColumnOriginalValue("monitoringAnimalHousing"));
		specificReqPropLicActivityImpl.setReleaseAnimals(
			this.<String>getColumnOriginalValue("releaseAnimals"));
		specificReqPropLicActivityImpl.setProceduresApp(
			this.<String>getColumnOriginalValue("proceduresApp"));
		specificReqPropLicActivityImpl.setDisposalsApp(
			this.<String>getColumnOriginalValue("disposalsApp"));
		specificReqPropLicActivityImpl.setMonitoringMaterialNu(
			this.<String>getColumnOriginalValue("monitoringMaterialNu"));
		specificReqPropLicActivityImpl.setHandlingProcedures(
			this.<String>getColumnOriginalValue("handlingProcedures"));
		specificReqPropLicActivityImpl.setHoppersEntry(
			this.<String>getColumnOriginalValue("hoppersEntry"));
		specificReqPropLicActivityImpl.setOperatingConditions(
			this.<String>getColumnOriginalValue("operatingConditions"));
		specificReqPropLicActivityImpl.setInsertionType(
			this.<String>getColumnOriginalValue("insertionType"));
		specificReqPropLicActivityImpl.setInstallationFixed(
			this.<String>getColumnOriginalValue("installationFixed"));
		specificReqPropLicActivityImpl.setTransportPlanGauge(
			this.<String>getColumnOriginalValue("transportPlanGauge"));
		specificReqPropLicActivityImpl.setEmergencyAddition(
			this.<String>getColumnOriginalValue("emergencyAddition"));
		specificReqPropLicActivityImpl.setNuclearEnviroment(
			this.<String>getColumnOriginalValue("nuclearEnviroment"));
		specificReqPropLicActivityImpl.setFishingTool(
			this.<String>getColumnOriginalValue("fishingTool"));
		specificReqPropLicActivityImpl.setSealedSources(
			this.<String>getColumnOriginalValue("sealedSources"));
		specificReqPropLicActivityImpl.setAbandonmentZone(
			this.<String>getColumnOriginalValue("abandonmentZone"));
		specificReqPropLicActivityImpl.setServicingCopy(
			this.<String>getColumnOriginalValue("servicingCopy"));
		specificReqPropLicActivityImpl.setManufacturingDevelopment(
			this.<String>getColumnOriginalValue("manufacturingDevelopment"));
		specificReqPropLicActivityImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return specificReqPropLicActivityImpl;
	}

	@Override
	public int compareTo(
		SpecificReqPropLicActivity specificReqPropLicActivity) {

		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), specificReqPropLicActivity.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SpecificReqPropLicActivity)) {
			return false;
		}

		SpecificReqPropLicActivity specificReqPropLicActivity =
			(SpecificReqPropLicActivity)object;

		long primaryKey = specificReqPropLicActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SpecificReqPropLicActivity> toCacheModel() {
		SpecificReqPropLicActivityCacheModel
			specificReqPropLicActivityCacheModel =
				new SpecificReqPropLicActivityCacheModel();

		specificReqPropLicActivityCacheModel.specificReqPropLicActivityId =
			getSpecificReqPropLicActivityId();

		specificReqPropLicActivityCacheModel.groupId = getGroupId();

		specificReqPropLicActivityCacheModel.companyId = getCompanyId();

		specificReqPropLicActivityCacheModel.userId = getUserId();

		specificReqPropLicActivityCacheModel.userName = getUserName();

		String userName = specificReqPropLicActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			specificReqPropLicActivityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			specificReqPropLicActivityCacheModel.createDate =
				createDate.getTime();
		}
		else {
			specificReqPropLicActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			specificReqPropLicActivityCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			specificReqPropLicActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		specificReqPropLicActivityCacheModel.adminTreatment =
			getAdminTreatment();

		String adminTreatment =
			specificReqPropLicActivityCacheModel.adminTreatment;

		if ((adminTreatment != null) && (adminTreatment.length() == 0)) {
			specificReqPropLicActivityCacheModel.adminTreatment = null;
		}

		specificReqPropLicActivityCacheModel.qualityProgramme =
			getQualityProgramme();

		String qualityProgramme =
			specificReqPropLicActivityCacheModel.qualityProgramme;

		if ((qualityProgramme != null) && (qualityProgramme.length() == 0)) {
			specificReqPropLicActivityCacheModel.qualityProgramme = null;
		}

		specificReqPropLicActivityCacheModel.instructionsCaregivers =
			getInstructionsCaregivers();

		String instructionsCaregivers =
			specificReqPropLicActivityCacheModel.instructionsCaregivers;

		if ((instructionsCaregivers != null) &&
			(instructionsCaregivers.length() == 0)) {

			specificReqPropLicActivityCacheModel.instructionsCaregivers = null;
		}

		specificReqPropLicActivityCacheModel.instructionsPatients =
			getInstructionsPatients();

		String instructionsPatients =
			specificReqPropLicActivityCacheModel.instructionsPatients;

		if ((instructionsPatients != null) &&
			(instructionsPatients.length() == 0)) {

			specificReqPropLicActivityCacheModel.instructionsPatients = null;
		}

		specificReqPropLicActivityCacheModel.patientsRelease =
			getPatientsRelease();

		String patientsRelease =
			specificReqPropLicActivityCacheModel.patientsRelease;

		if ((patientsRelease != null) && (patientsRelease.length() == 0)) {
			specificReqPropLicActivityCacheModel.patientsRelease = null;
		}

		specificReqPropLicActivityCacheModel.treatmentRooms =
			getTreatmentRooms();

		String treatmentRooms =
			specificReqPropLicActivityCacheModel.treatmentRooms;

		if ((treatmentRooms != null) && (treatmentRooms.length() == 0)) {
			specificReqPropLicActivityCacheModel.treatmentRooms = null;
		}

		specificReqPropLicActivityCacheModel.medicalEmergencies =
			getMedicalEmergencies();

		String medicalEmergencies =
			specificReqPropLicActivityCacheModel.medicalEmergencies;

		if ((medicalEmergencies != null) &&
			(medicalEmergencies.length() == 0)) {

			specificReqPropLicActivityCacheModel.medicalEmergencies = null;
		}

		specificReqPropLicActivityCacheModel.nuclearMedicine =
			getNuclearMedicine();

		String nuclearMedicine =
			specificReqPropLicActivityCacheModel.nuclearMedicine;

		if ((nuclearMedicine != null) && (nuclearMedicine.length() == 0)) {
			specificReqPropLicActivityCacheModel.nuclearMedicine = null;
		}

		specificReqPropLicActivityCacheModel.diagnosticStudies =
			getDiagnosticStudies();

		String diagnosticStudies =
			specificReqPropLicActivityCacheModel.diagnosticStudies;

		if ((diagnosticStudies != null) && (diagnosticStudies.length() == 0)) {
			specificReqPropLicActivityCacheModel.diagnosticStudies = null;
		}

		specificReqPropLicActivityCacheModel.biomedicalResearch =
			getBiomedicalResearch();

		String biomedicalResearch =
			specificReqPropLicActivityCacheModel.biomedicalResearch;

		if ((biomedicalResearch != null) &&
			(biomedicalResearch.length() == 0)) {

			specificReqPropLicActivityCacheModel.biomedicalResearch = null;
		}

		specificReqPropLicActivityCacheModel.researchReview =
			getResearchReview();

		String researchReview =
			specificReqPropLicActivityCacheModel.researchReview;

		if ((researchReview != null) && (researchReview.length() == 0)) {
			specificReqPropLicActivityCacheModel.researchReview = null;
		}

		specificReqPropLicActivityCacheModel.emergencyOperating =
			getEmergencyOperating();

		String emergencyOperating =
			specificReqPropLicActivityCacheModel.emergencyOperating;

		if ((emergencyOperating != null) &&
			(emergencyOperating.length() == 0)) {

			specificReqPropLicActivityCacheModel.emergencyOperating = null;
		}

		specificReqPropLicActivityCacheModel.certificatePackages =
			getCertificatePackages();

		String certificatePackages =
			specificReqPropLicActivityCacheModel.certificatePackages;

		if ((certificatePackages != null) &&
			(certificatePackages.length() == 0)) {

			specificReqPropLicActivityCacheModel.certificatePackages = null;
		}

		specificReqPropLicActivityCacheModel.exposureDevices =
			getExposureDevices();

		String exposureDevices =
			specificReqPropLicActivityCacheModel.exposureDevices;

		if ((exposureDevices != null) && (exposureDevices.length() == 0)) {
			specificReqPropLicActivityCacheModel.exposureDevices = null;
		}

		specificReqPropLicActivityCacheModel.equipmentSafety =
			getEquipmentSafety();

		String equipmentSafety =
			specificReqPropLicActivityCacheModel.equipmentSafety;

		if ((equipmentSafety != null) && (equipmentSafety.length() == 0)) {
			specificReqPropLicActivityCacheModel.equipmentSafety = null;
		}

		specificReqPropLicActivityCacheModel.transportPlan = getTransportPlan();

		String transportPlan =
			specificReqPropLicActivityCacheModel.transportPlan;

		if ((transportPlan != null) && (transportPlan.length() == 0)) {
			specificReqPropLicActivityCacheModel.transportPlan = null;
		}

		specificReqPropLicActivityCacheModel.animalsTreatment =
			getAnimalsTreatment();

		String animalsTreatment =
			specificReqPropLicActivityCacheModel.animalsTreatment;

		if ((animalsTreatment != null) && (animalsTreatment.length() == 0)) {
			specificReqPropLicActivityCacheModel.animalsTreatment = null;
		}

		specificReqPropLicActivityCacheModel.animalHousing = getAnimalHousing();

		String animalHousing =
			specificReqPropLicActivityCacheModel.animalHousing;

		if ((animalHousing != null) && (animalHousing.length() == 0)) {
			specificReqPropLicActivityCacheModel.animalHousing = null;
		}

		specificReqPropLicActivityCacheModel.disposalWaste = getDisposalWaste();

		String disposalWaste =
			specificReqPropLicActivityCacheModel.disposalWaste;

		if ((disposalWaste != null) && (disposalWaste.length() == 0)) {
			specificReqPropLicActivityCacheModel.disposalWaste = null;
		}

		specificReqPropLicActivityCacheModel.monitoringAnimalHousing =
			getMonitoringAnimalHousing();

		String monitoringAnimalHousing =
			specificReqPropLicActivityCacheModel.monitoringAnimalHousing;

		if ((monitoringAnimalHousing != null) &&
			(monitoringAnimalHousing.length() == 0)) {

			specificReqPropLicActivityCacheModel.monitoringAnimalHousing = null;
		}

		specificReqPropLicActivityCacheModel.releaseAnimals =
			getReleaseAnimals();

		String releaseAnimals =
			specificReqPropLicActivityCacheModel.releaseAnimals;

		if ((releaseAnimals != null) && (releaseAnimals.length() == 0)) {
			specificReqPropLicActivityCacheModel.releaseAnimals = null;
		}

		specificReqPropLicActivityCacheModel.proceduresApp = getProceduresApp();

		String proceduresApp =
			specificReqPropLicActivityCacheModel.proceduresApp;

		if ((proceduresApp != null) && (proceduresApp.length() == 0)) {
			specificReqPropLicActivityCacheModel.proceduresApp = null;
		}

		specificReqPropLicActivityCacheModel.disposalsApp = getDisposalsApp();

		String disposalsApp = specificReqPropLicActivityCacheModel.disposalsApp;

		if ((disposalsApp != null) && (disposalsApp.length() == 0)) {
			specificReqPropLicActivityCacheModel.disposalsApp = null;
		}

		specificReqPropLicActivityCacheModel.monitoringMaterialNu =
			getMonitoringMaterialNu();

		String monitoringMaterialNu =
			specificReqPropLicActivityCacheModel.monitoringMaterialNu;

		if ((monitoringMaterialNu != null) &&
			(monitoringMaterialNu.length() == 0)) {

			specificReqPropLicActivityCacheModel.monitoringMaterialNu = null;
		}

		specificReqPropLicActivityCacheModel.handlingProcedures =
			getHandlingProcedures();

		String handlingProcedures =
			specificReqPropLicActivityCacheModel.handlingProcedures;

		if ((handlingProcedures != null) &&
			(handlingProcedures.length() == 0)) {

			specificReqPropLicActivityCacheModel.handlingProcedures = null;
		}

		specificReqPropLicActivityCacheModel.hoppersEntry = getHoppersEntry();

		String hoppersEntry = specificReqPropLicActivityCacheModel.hoppersEntry;

		if ((hoppersEntry != null) && (hoppersEntry.length() == 0)) {
			specificReqPropLicActivityCacheModel.hoppersEntry = null;
		}

		specificReqPropLicActivityCacheModel.operatingConditions =
			getOperatingConditions();

		String operatingConditions =
			specificReqPropLicActivityCacheModel.operatingConditions;

		if ((operatingConditions != null) &&
			(operatingConditions.length() == 0)) {

			specificReqPropLicActivityCacheModel.operatingConditions = null;
		}

		specificReqPropLicActivityCacheModel.insertionType = getInsertionType();

		String insertionType =
			specificReqPropLicActivityCacheModel.insertionType;

		if ((insertionType != null) && (insertionType.length() == 0)) {
			specificReqPropLicActivityCacheModel.insertionType = null;
		}

		specificReqPropLicActivityCacheModel.installationFixed =
			getInstallationFixed();

		String installationFixed =
			specificReqPropLicActivityCacheModel.installationFixed;

		if ((installationFixed != null) && (installationFixed.length() == 0)) {
			specificReqPropLicActivityCacheModel.installationFixed = null;
		}

		specificReqPropLicActivityCacheModel.transportPlanGauge =
			getTransportPlanGauge();

		String transportPlanGauge =
			specificReqPropLicActivityCacheModel.transportPlanGauge;

		if ((transportPlanGauge != null) &&
			(transportPlanGauge.length() == 0)) {

			specificReqPropLicActivityCacheModel.transportPlanGauge = null;
		}

		specificReqPropLicActivityCacheModel.emergencyAddition =
			getEmergencyAddition();

		String emergencyAddition =
			specificReqPropLicActivityCacheModel.emergencyAddition;

		if ((emergencyAddition != null) && (emergencyAddition.length() == 0)) {
			specificReqPropLicActivityCacheModel.emergencyAddition = null;
		}

		specificReqPropLicActivityCacheModel.nuclearEnviroment =
			getNuclearEnviroment();

		String nuclearEnviroment =
			specificReqPropLicActivityCacheModel.nuclearEnviroment;

		if ((nuclearEnviroment != null) && (nuclearEnviroment.length() == 0)) {
			specificReqPropLicActivityCacheModel.nuclearEnviroment = null;
		}

		specificReqPropLicActivityCacheModel.fishingTool = getFishingTool();

		String fishingTool = specificReqPropLicActivityCacheModel.fishingTool;

		if ((fishingTool != null) && (fishingTool.length() == 0)) {
			specificReqPropLicActivityCacheModel.fishingTool = null;
		}

		specificReqPropLicActivityCacheModel.sealedSources = getSealedSources();

		String sealedSources =
			specificReqPropLicActivityCacheModel.sealedSources;

		if ((sealedSources != null) && (sealedSources.length() == 0)) {
			specificReqPropLicActivityCacheModel.sealedSources = null;
		}

		specificReqPropLicActivityCacheModel.abandonmentZone =
			getAbandonmentZone();

		String abandonmentZone =
			specificReqPropLicActivityCacheModel.abandonmentZone;

		if ((abandonmentZone != null) && (abandonmentZone.length() == 0)) {
			specificReqPropLicActivityCacheModel.abandonmentZone = null;
		}

		specificReqPropLicActivityCacheModel.servicingCopy = getServicingCopy();

		String servicingCopy =
			specificReqPropLicActivityCacheModel.servicingCopy;

		if ((servicingCopy != null) && (servicingCopy.length() == 0)) {
			specificReqPropLicActivityCacheModel.servicingCopy = null;
		}

		specificReqPropLicActivityCacheModel.manufacturingDevelopment =
			getManufacturingDevelopment();

		String manufacturingDevelopment =
			specificReqPropLicActivityCacheModel.manufacturingDevelopment;

		if ((manufacturingDevelopment != null) &&
			(manufacturingDevelopment.length() == 0)) {

			specificReqPropLicActivityCacheModel.manufacturingDevelopment =
				null;
		}

		specificReqPropLicActivityCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return specificReqPropLicActivityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SpecificReqPropLicActivity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SpecificReqPropLicActivity, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SpecificReqPropLicActivity, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SpecificReqPropLicActivity)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SpecificReqPropLicActivity>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SpecificReqPropLicActivity.class, ModelWrapper.class);

	}

	private long _specificReqPropLicActivityId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _adminTreatment;
	private String _qualityProgramme;
	private String _instructionsCaregivers;
	private String _instructionsPatients;
	private String _patientsRelease;
	private String _treatmentRooms;
	private String _medicalEmergencies;
	private String _nuclearMedicine;
	private String _diagnosticStudies;
	private String _biomedicalResearch;
	private String _researchReview;
	private String _emergencyOperating;
	private String _certificatePackages;
	private String _exposureDevices;
	private String _equipmentSafety;
	private String _transportPlan;
	private String _animalsTreatment;
	private String _animalHousing;
	private String _disposalWaste;
	private String _monitoringAnimalHousing;
	private String _releaseAnimals;
	private String _proceduresApp;
	private String _disposalsApp;
	private String _monitoringMaterialNu;
	private String _handlingProcedures;
	private String _hoppersEntry;
	private String _operatingConditions;
	private String _insertionType;
	private String _installationFixed;
	private String _transportPlanGauge;
	private String _emergencyAddition;
	private String _nuclearEnviroment;
	private String _fishingTool;
	private String _sealedSources;
	private String _abandonmentZone;
	private String _servicingCopy;
	private String _manufacturingDevelopment;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<SpecificReqPropLicActivity, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SpecificReqPropLicActivity)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"specificReqPropLicActivityId", _specificReqPropLicActivityId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("adminTreatment", _adminTreatment);
		_columnOriginalValues.put("qualityProgramme", _qualityProgramme);
		_columnOriginalValues.put(
			"instructionsCaregivers", _instructionsCaregivers);
		_columnOriginalValues.put(
			"instructionsPatients", _instructionsPatients);
		_columnOriginalValues.put("patientsRelease", _patientsRelease);
		_columnOriginalValues.put("treatmentRooms", _treatmentRooms);
		_columnOriginalValues.put("medicalEmergencies", _medicalEmergencies);
		_columnOriginalValues.put("nuclearMedicine", _nuclearMedicine);
		_columnOriginalValues.put("diagnosticStudies", _diagnosticStudies);
		_columnOriginalValues.put("biomedicalResearch", _biomedicalResearch);
		_columnOriginalValues.put("researchReview", _researchReview);
		_columnOriginalValues.put("emergencyOperating", _emergencyOperating);
		_columnOriginalValues.put("certificatePackages", _certificatePackages);
		_columnOriginalValues.put("exposureDevices", _exposureDevices);
		_columnOriginalValues.put("equipmentSafety", _equipmentSafety);
		_columnOriginalValues.put("transportPlan", _transportPlan);
		_columnOriginalValues.put("animalsTreatment", _animalsTreatment);
		_columnOriginalValues.put("animalHousing", _animalHousing);
		_columnOriginalValues.put("disposalWaste", _disposalWaste);
		_columnOriginalValues.put(
			"monitoringAnimalHousing", _monitoringAnimalHousing);
		_columnOriginalValues.put("releaseAnimals", _releaseAnimals);
		_columnOriginalValues.put("proceduresApp", _proceduresApp);
		_columnOriginalValues.put("disposalsApp", _disposalsApp);
		_columnOriginalValues.put(
			"monitoringMaterialNu", _monitoringMaterialNu);
		_columnOriginalValues.put("handlingProcedures", _handlingProcedures);
		_columnOriginalValues.put("hoppersEntry", _hoppersEntry);
		_columnOriginalValues.put("operatingConditions", _operatingConditions);
		_columnOriginalValues.put("insertionType", _insertionType);
		_columnOriginalValues.put("installationFixed", _installationFixed);
		_columnOriginalValues.put("transportPlanGauge", _transportPlanGauge);
		_columnOriginalValues.put("emergencyAddition", _emergencyAddition);
		_columnOriginalValues.put("nuclearEnviroment", _nuclearEnviroment);
		_columnOriginalValues.put("fishingTool", _fishingTool);
		_columnOriginalValues.put("sealedSources", _sealedSources);
		_columnOriginalValues.put("abandonmentZone", _abandonmentZone);
		_columnOriginalValues.put("servicingCopy", _servicingCopy);
		_columnOriginalValues.put(
			"manufacturingDevelopment", _manufacturingDevelopment);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("specificReqPropLicActivityId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("adminTreatment", 128L);

		columnBitmasks.put("qualityProgramme", 256L);

		columnBitmasks.put("instructionsCaregivers", 512L);

		columnBitmasks.put("instructionsPatients", 1024L);

		columnBitmasks.put("patientsRelease", 2048L);

		columnBitmasks.put("treatmentRooms", 4096L);

		columnBitmasks.put("medicalEmergencies", 8192L);

		columnBitmasks.put("nuclearMedicine", 16384L);

		columnBitmasks.put("diagnosticStudies", 32768L);

		columnBitmasks.put("biomedicalResearch", 65536L);

		columnBitmasks.put("researchReview", 131072L);

		columnBitmasks.put("emergencyOperating", 262144L);

		columnBitmasks.put("certificatePackages", 524288L);

		columnBitmasks.put("exposureDevices", 1048576L);

		columnBitmasks.put("equipmentSafety", 2097152L);

		columnBitmasks.put("transportPlan", 4194304L);

		columnBitmasks.put("animalsTreatment", 8388608L);

		columnBitmasks.put("animalHousing", 16777216L);

		columnBitmasks.put("disposalWaste", 33554432L);

		columnBitmasks.put("monitoringAnimalHousing", 67108864L);

		columnBitmasks.put("releaseAnimals", 134217728L);

		columnBitmasks.put("proceduresApp", 268435456L);

		columnBitmasks.put("disposalsApp", 536870912L);

		columnBitmasks.put("monitoringMaterialNu", 1073741824L);

		columnBitmasks.put("handlingProcedures", 2147483648L);

		columnBitmasks.put("hoppersEntry", 4294967296L);

		columnBitmasks.put("operatingConditions", 8589934592L);

		columnBitmasks.put("insertionType", 17179869184L);

		columnBitmasks.put("installationFixed", 34359738368L);

		columnBitmasks.put("transportPlanGauge", 68719476736L);

		columnBitmasks.put("emergencyAddition", 137438953472L);

		columnBitmasks.put("nuclearEnviroment", 274877906944L);

		columnBitmasks.put("fishingTool", 549755813888L);

		columnBitmasks.put("sealedSources", 1099511627776L);

		columnBitmasks.put("abandonmentZone", 2199023255552L);

		columnBitmasks.put("servicingCopy", 4398046511104L);

		columnBitmasks.put("manufacturingDevelopment", 8796093022208L);

		columnBitmasks.put("hsraApplicationId", 17592186044416L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SpecificReqPropLicActivity _escapedModel;

}