/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.nbp.hsra.application.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.nbp.hsra.application.service.model.RadiationDevicesDetailAdd;
import com.nbp.hsra.application.service.model.RadiationDevicesDetailAddModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RadiationDevicesDetailAdd service. Represents a row in the &quot;nbp_hsra_radiation_device_add&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RadiationDevicesDetailAddModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RadiationDevicesDetailAddImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RadiationDevicesDetailAddImpl
 * @generated
 */
@JSON(strict = true)
public class RadiationDevicesDetailAddModelImpl
	extends BaseModelImpl<RadiationDevicesDetailAdd>
	implements RadiationDevicesDetailAddModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a radiation devices detail add model instance should use the <code>RadiationDevicesDetailAdd</code> interface instead.
	 */
	public static final String TABLE_NAME = "nbp_hsra_radiation_device_add";

	public static final Object[][] TABLE_COLUMNS = {
		{"radiationDevicesDetailAddId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"radiationDevicesRadio", Types.VARCHAR},
		{"radiationDevicesMaxActivity", Types.VARCHAR},
		{"radiationDevicesManufacturer", Types.VARCHAR},
		{"radiationDevicesName", Types.VARCHAR},
		{"radiationDevicesModelNo", Types.VARCHAR},
		{"radiationDevicesNumber", Types.VARCHAR},
		{"radiationDevicesUse", Types.VARCHAR}, {"counter", Types.VARCHAR},
		{"hsraApplicationId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("radiationDevicesDetailAddId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("radiationDevicesRadio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radiationDevicesMaxActivity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radiationDevicesManufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radiationDevicesName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radiationDevicesModelNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radiationDevicesNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("radiationDevicesUse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("counter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hsraApplicationId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nbp_hsra_radiation_device_add (radiationDevicesDetailAddId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,radiationDevicesRadio VARCHAR(75) null,radiationDevicesMaxActivity VARCHAR(75) null,radiationDevicesManufacturer VARCHAR(75) null,radiationDevicesName VARCHAR(75) null,radiationDevicesModelNo VARCHAR(75) null,radiationDevicesNumber VARCHAR(75) null,radiationDevicesUse VARCHAR(75) null,counter VARCHAR(75) null,hsraApplicationId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table nbp_hsra_radiation_device_add";

	public static final String ORDER_BY_JPQL =
		" ORDER BY radiationDevicesDetailAdd.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nbp_hsra_radiation_device_add.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HSRAAPPLICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RadiationDevicesDetailAddModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _radiationDevicesDetailAddId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRadiationDevicesDetailAddId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _radiationDevicesDetailAddId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RadiationDevicesDetailAdd.class;
	}

	@Override
	public String getModelClassName() {
		return RadiationDevicesDetailAdd.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RadiationDevicesDetailAdd, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RadiationDevicesDetailAdd, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RadiationDevicesDetailAdd, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RadiationDevicesDetailAdd)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RadiationDevicesDetailAdd, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RadiationDevicesDetailAdd, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RadiationDevicesDetailAdd)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RadiationDevicesDetailAdd, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RadiationDevicesDetailAdd, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<RadiationDevicesDetailAdd, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<RadiationDevicesDetailAdd, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<RadiationDevicesDetailAdd, Object>>();

			attributeGetterFunctions.put(
				"radiationDevicesDetailAddId",
				RadiationDevicesDetailAdd::getRadiationDevicesDetailAddId);
			attributeGetterFunctions.put(
				"groupId", RadiationDevicesDetailAdd::getGroupId);
			attributeGetterFunctions.put(
				"companyId", RadiationDevicesDetailAdd::getCompanyId);
			attributeGetterFunctions.put(
				"userId", RadiationDevicesDetailAdd::getUserId);
			attributeGetterFunctions.put(
				"userName", RadiationDevicesDetailAdd::getUserName);
			attributeGetterFunctions.put(
				"createDate", RadiationDevicesDetailAdd::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", RadiationDevicesDetailAdd::getModifiedDate);
			attributeGetterFunctions.put(
				"radiationDevicesRadio",
				RadiationDevicesDetailAdd::getRadiationDevicesRadio);
			attributeGetterFunctions.put(
				"radiationDevicesMaxActivity",
				RadiationDevicesDetailAdd::getRadiationDevicesMaxActivity);
			attributeGetterFunctions.put(
				"radiationDevicesManufacturer",
				RadiationDevicesDetailAdd::getRadiationDevicesManufacturer);
			attributeGetterFunctions.put(
				"radiationDevicesName",
				RadiationDevicesDetailAdd::getRadiationDevicesName);
			attributeGetterFunctions.put(
				"radiationDevicesModelNo",
				RadiationDevicesDetailAdd::getRadiationDevicesModelNo);
			attributeGetterFunctions.put(
				"radiationDevicesNumber",
				RadiationDevicesDetailAdd::getRadiationDevicesNumber);
			attributeGetterFunctions.put(
				"radiationDevicesUse",
				RadiationDevicesDetailAdd::getRadiationDevicesUse);
			attributeGetterFunctions.put(
				"counter", RadiationDevicesDetailAdd::getCounter);
			attributeGetterFunctions.put(
				"hsraApplicationId",
				RadiationDevicesDetailAdd::getHsraApplicationId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<RadiationDevicesDetailAdd, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<RadiationDevicesDetailAdd, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<RadiationDevicesDetailAdd, ?>>();

			attributeSetterBiConsumers.put(
				"radiationDevicesDetailAddId",
				(BiConsumer<RadiationDevicesDetailAdd, Long>)
					RadiationDevicesDetailAdd::setRadiationDevicesDetailAddId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<RadiationDevicesDetailAdd, Long>)
					RadiationDevicesDetailAdd::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<RadiationDevicesDetailAdd, Long>)
					RadiationDevicesDetailAdd::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<RadiationDevicesDetailAdd, Long>)
					RadiationDevicesDetailAdd::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<RadiationDevicesDetailAdd, Date>)
					RadiationDevicesDetailAdd::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<RadiationDevicesDetailAdd, Date>)
					RadiationDevicesDetailAdd::setModifiedDate);
			attributeSetterBiConsumers.put(
				"radiationDevicesRadio",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setRadiationDevicesRadio);
			attributeSetterBiConsumers.put(
				"radiationDevicesMaxActivity",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setRadiationDevicesMaxActivity);
			attributeSetterBiConsumers.put(
				"radiationDevicesManufacturer",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setRadiationDevicesManufacturer);
			attributeSetterBiConsumers.put(
				"radiationDevicesName",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setRadiationDevicesName);
			attributeSetterBiConsumers.put(
				"radiationDevicesModelNo",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setRadiationDevicesModelNo);
			attributeSetterBiConsumers.put(
				"radiationDevicesNumber",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setRadiationDevicesNumber);
			attributeSetterBiConsumers.put(
				"radiationDevicesUse",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setRadiationDevicesUse);
			attributeSetterBiConsumers.put(
				"counter",
				(BiConsumer<RadiationDevicesDetailAdd, String>)
					RadiationDevicesDetailAdd::setCounter);
			attributeSetterBiConsumers.put(
				"hsraApplicationId",
				(BiConsumer<RadiationDevicesDetailAdd, Long>)
					RadiationDevicesDetailAdd::setHsraApplicationId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getRadiationDevicesDetailAddId() {
		return _radiationDevicesDetailAddId;
	}

	@Override
	public void setRadiationDevicesDetailAddId(
		long radiationDevicesDetailAddId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationDevicesDetailAddId = radiationDevicesDetailAddId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRadiationDevicesRadio() {
		if (_radiationDevicesRadio == null) {
			return "";
		}
		else {
			return _radiationDevicesRadio;
		}
	}

	@Override
	public void setRadiationDevicesRadio(String radiationDevicesRadio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationDevicesRadio = radiationDevicesRadio;
	}

	@JSON
	@Override
	public String getRadiationDevicesMaxActivity() {
		if (_radiationDevicesMaxActivity == null) {
			return "";
		}
		else {
			return _radiationDevicesMaxActivity;
		}
	}

	@Override
	public void setRadiationDevicesMaxActivity(
		String radiationDevicesMaxActivity) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationDevicesMaxActivity = radiationDevicesMaxActivity;
	}

	@JSON
	@Override
	public String getRadiationDevicesManufacturer() {
		if (_radiationDevicesManufacturer == null) {
			return "";
		}
		else {
			return _radiationDevicesManufacturer;
		}
	}

	@Override
	public void setRadiationDevicesManufacturer(
		String radiationDevicesManufacturer) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationDevicesManufacturer = radiationDevicesManufacturer;
	}

	@JSON
	@Override
	public String getRadiationDevicesName() {
		if (_radiationDevicesName == null) {
			return "";
		}
		else {
			return _radiationDevicesName;
		}
	}

	@Override
	public void setRadiationDevicesName(String radiationDevicesName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationDevicesName = radiationDevicesName;
	}

	@JSON
	@Override
	public String getRadiationDevicesModelNo() {
		if (_radiationDevicesModelNo == null) {
			return "";
		}
		else {
			return _radiationDevicesModelNo;
		}
	}

	@Override
	public void setRadiationDevicesModelNo(String radiationDevicesModelNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationDevicesModelNo = radiationDevicesModelNo;
	}

	@JSON
	@Override
	public String getRadiationDevicesNumber() {
		if (_radiationDevicesNumber == null) {
			return "";
		}
		else {
			return _radiationDevicesNumber;
		}
	}

	@Override
	public void setRadiationDevicesNumber(String radiationDevicesNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationDevicesNumber = radiationDevicesNumber;
	}

	@JSON
	@Override
	public String getRadiationDevicesUse() {
		if (_radiationDevicesUse == null) {
			return "";
		}
		else {
			return _radiationDevicesUse;
		}
	}

	@Override
	public void setRadiationDevicesUse(String radiationDevicesUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_radiationDevicesUse = radiationDevicesUse;
	}

	@JSON
	@Override
	public String getCounter() {
		if (_counter == null) {
			return "";
		}
		else {
			return _counter;
		}
	}

	@Override
	public void setCounter(String counter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_counter = counter;
	}

	@JSON
	@Override
	public long getHsraApplicationId() {
		return _hsraApplicationId;
	}

	@Override
	public void setHsraApplicationId(long hsraApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hsraApplicationId = hsraApplicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHsraApplicationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RadiationDevicesDetailAdd.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RadiationDevicesDetailAdd toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RadiationDevicesDetailAdd>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RadiationDevicesDetailAddImpl radiationDevicesDetailAddImpl =
			new RadiationDevicesDetailAddImpl();

		radiationDevicesDetailAddImpl.setRadiationDevicesDetailAddId(
			getRadiationDevicesDetailAddId());
		radiationDevicesDetailAddImpl.setGroupId(getGroupId());
		radiationDevicesDetailAddImpl.setCompanyId(getCompanyId());
		radiationDevicesDetailAddImpl.setUserId(getUserId());
		radiationDevicesDetailAddImpl.setUserName(getUserName());
		radiationDevicesDetailAddImpl.setCreateDate(getCreateDate());
		radiationDevicesDetailAddImpl.setModifiedDate(getModifiedDate());
		radiationDevicesDetailAddImpl.setRadiationDevicesRadio(
			getRadiationDevicesRadio());
		radiationDevicesDetailAddImpl.setRadiationDevicesMaxActivity(
			getRadiationDevicesMaxActivity());
		radiationDevicesDetailAddImpl.setRadiationDevicesManufacturer(
			getRadiationDevicesManufacturer());
		radiationDevicesDetailAddImpl.setRadiationDevicesName(
			getRadiationDevicesName());
		radiationDevicesDetailAddImpl.setRadiationDevicesModelNo(
			getRadiationDevicesModelNo());
		radiationDevicesDetailAddImpl.setRadiationDevicesNumber(
			getRadiationDevicesNumber());
		radiationDevicesDetailAddImpl.setRadiationDevicesUse(
			getRadiationDevicesUse());
		radiationDevicesDetailAddImpl.setCounter(getCounter());
		radiationDevicesDetailAddImpl.setHsraApplicationId(
			getHsraApplicationId());

		radiationDevicesDetailAddImpl.resetOriginalValues();

		return radiationDevicesDetailAddImpl;
	}

	@Override
	public RadiationDevicesDetailAdd cloneWithOriginalValues() {
		RadiationDevicesDetailAddImpl radiationDevicesDetailAddImpl =
			new RadiationDevicesDetailAddImpl();

		radiationDevicesDetailAddImpl.setRadiationDevicesDetailAddId(
			this.<Long>getColumnOriginalValue("radiationDevicesDetailAddId"));
		radiationDevicesDetailAddImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		radiationDevicesDetailAddImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		radiationDevicesDetailAddImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		radiationDevicesDetailAddImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		radiationDevicesDetailAddImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		radiationDevicesDetailAddImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		radiationDevicesDetailAddImpl.setRadiationDevicesRadio(
			this.<String>getColumnOriginalValue("radiationDevicesRadio"));
		radiationDevicesDetailAddImpl.setRadiationDevicesMaxActivity(
			this.<String>getColumnOriginalValue("radiationDevicesMaxActivity"));
		radiationDevicesDetailAddImpl.setRadiationDevicesManufacturer(
			this.<String>getColumnOriginalValue(
				"radiationDevicesManufacturer"));
		radiationDevicesDetailAddImpl.setRadiationDevicesName(
			this.<String>getColumnOriginalValue("radiationDevicesName"));
		radiationDevicesDetailAddImpl.setRadiationDevicesModelNo(
			this.<String>getColumnOriginalValue("radiationDevicesModelNo"));
		radiationDevicesDetailAddImpl.setRadiationDevicesNumber(
			this.<String>getColumnOriginalValue("radiationDevicesNumber"));
		radiationDevicesDetailAddImpl.setRadiationDevicesUse(
			this.<String>getColumnOriginalValue("radiationDevicesUse"));
		radiationDevicesDetailAddImpl.setCounter(
			this.<String>getColumnOriginalValue("counter"));
		radiationDevicesDetailAddImpl.setHsraApplicationId(
			this.<Long>getColumnOriginalValue("hsraApplicationId"));

		return radiationDevicesDetailAddImpl;
	}

	@Override
	public int compareTo(RadiationDevicesDetailAdd radiationDevicesDetailAdd) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), radiationDevicesDetailAdd.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RadiationDevicesDetailAdd)) {
			return false;
		}

		RadiationDevicesDetailAdd radiationDevicesDetailAdd =
			(RadiationDevicesDetailAdd)object;

		long primaryKey = radiationDevicesDetailAdd.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RadiationDevicesDetailAdd> toCacheModel() {
		RadiationDevicesDetailAddCacheModel
			radiationDevicesDetailAddCacheModel =
				new RadiationDevicesDetailAddCacheModel();

		radiationDevicesDetailAddCacheModel.radiationDevicesDetailAddId =
			getRadiationDevicesDetailAddId();

		radiationDevicesDetailAddCacheModel.groupId = getGroupId();

		radiationDevicesDetailAddCacheModel.companyId = getCompanyId();

		radiationDevicesDetailAddCacheModel.userId = getUserId();

		radiationDevicesDetailAddCacheModel.userName = getUserName();

		String userName = radiationDevicesDetailAddCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			radiationDevicesDetailAddCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			radiationDevicesDetailAddCacheModel.createDate =
				createDate.getTime();
		}
		else {
			radiationDevicesDetailAddCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			radiationDevicesDetailAddCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			radiationDevicesDetailAddCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		radiationDevicesDetailAddCacheModel.radiationDevicesRadio =
			getRadiationDevicesRadio();

		String radiationDevicesRadio =
			radiationDevicesDetailAddCacheModel.radiationDevicesRadio;

		if ((radiationDevicesRadio != null) &&
			(radiationDevicesRadio.length() == 0)) {

			radiationDevicesDetailAddCacheModel.radiationDevicesRadio = null;
		}

		radiationDevicesDetailAddCacheModel.radiationDevicesMaxActivity =
			getRadiationDevicesMaxActivity();

		String radiationDevicesMaxActivity =
			radiationDevicesDetailAddCacheModel.radiationDevicesMaxActivity;

		if ((radiationDevicesMaxActivity != null) &&
			(radiationDevicesMaxActivity.length() == 0)) {

			radiationDevicesDetailAddCacheModel.radiationDevicesMaxActivity =
				null;
		}

		radiationDevicesDetailAddCacheModel.radiationDevicesManufacturer =
			getRadiationDevicesManufacturer();

		String radiationDevicesManufacturer =
			radiationDevicesDetailAddCacheModel.radiationDevicesManufacturer;

		if ((radiationDevicesManufacturer != null) &&
			(radiationDevicesManufacturer.length() == 0)) {

			radiationDevicesDetailAddCacheModel.radiationDevicesManufacturer =
				null;
		}

		radiationDevicesDetailAddCacheModel.radiationDevicesName =
			getRadiationDevicesName();

		String radiationDevicesName =
			radiationDevicesDetailAddCacheModel.radiationDevicesName;

		if ((radiationDevicesName != null) &&
			(radiationDevicesName.length() == 0)) {

			radiationDevicesDetailAddCacheModel.radiationDevicesName = null;
		}

		radiationDevicesDetailAddCacheModel.radiationDevicesModelNo =
			getRadiationDevicesModelNo();

		String radiationDevicesModelNo =
			radiationDevicesDetailAddCacheModel.radiationDevicesModelNo;

		if ((radiationDevicesModelNo != null) &&
			(radiationDevicesModelNo.length() == 0)) {

			radiationDevicesDetailAddCacheModel.radiationDevicesModelNo = null;
		}

		radiationDevicesDetailAddCacheModel.radiationDevicesNumber =
			getRadiationDevicesNumber();

		String radiationDevicesNumber =
			radiationDevicesDetailAddCacheModel.radiationDevicesNumber;

		if ((radiationDevicesNumber != null) &&
			(radiationDevicesNumber.length() == 0)) {

			radiationDevicesDetailAddCacheModel.radiationDevicesNumber = null;
		}

		radiationDevicesDetailAddCacheModel.radiationDevicesUse =
			getRadiationDevicesUse();

		String radiationDevicesUse =
			radiationDevicesDetailAddCacheModel.radiationDevicesUse;

		if ((radiationDevicesUse != null) &&
			(radiationDevicesUse.length() == 0)) {

			radiationDevicesDetailAddCacheModel.radiationDevicesUse = null;
		}

		radiationDevicesDetailAddCacheModel.counter = getCounter();

		String counter = radiationDevicesDetailAddCacheModel.counter;

		if ((counter != null) && (counter.length() == 0)) {
			radiationDevicesDetailAddCacheModel.counter = null;
		}

		radiationDevicesDetailAddCacheModel.hsraApplicationId =
			getHsraApplicationId();

		return radiationDevicesDetailAddCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RadiationDevicesDetailAdd, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RadiationDevicesDetailAdd, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RadiationDevicesDetailAdd, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(RadiationDevicesDetailAdd)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, RadiationDevicesDetailAdd>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						RadiationDevicesDetailAdd.class, ModelWrapper.class);

	}

	private long _radiationDevicesDetailAddId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _radiationDevicesRadio;
	private String _radiationDevicesMaxActivity;
	private String _radiationDevicesManufacturer;
	private String _radiationDevicesName;
	private String _radiationDevicesModelNo;
	private String _radiationDevicesNumber;
	private String _radiationDevicesUse;
	private String _counter;
	private long _hsraApplicationId;

	public <T> T getColumnValue(String columnName) {
		Function<RadiationDevicesDetailAdd, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RadiationDevicesDetailAdd)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"radiationDevicesDetailAddId", _radiationDevicesDetailAddId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"radiationDevicesRadio", _radiationDevicesRadio);
		_columnOriginalValues.put(
			"radiationDevicesMaxActivity", _radiationDevicesMaxActivity);
		_columnOriginalValues.put(
			"radiationDevicesManufacturer", _radiationDevicesManufacturer);
		_columnOriginalValues.put(
			"radiationDevicesName", _radiationDevicesName);
		_columnOriginalValues.put(
			"radiationDevicesModelNo", _radiationDevicesModelNo);
		_columnOriginalValues.put(
			"radiationDevicesNumber", _radiationDevicesNumber);
		_columnOriginalValues.put("radiationDevicesUse", _radiationDevicesUse);
		_columnOriginalValues.put("counter", _counter);
		_columnOriginalValues.put("hsraApplicationId", _hsraApplicationId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("radiationDevicesDetailAddId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("radiationDevicesRadio", 128L);

		columnBitmasks.put("radiationDevicesMaxActivity", 256L);

		columnBitmasks.put("radiationDevicesManufacturer", 512L);

		columnBitmasks.put("radiationDevicesName", 1024L);

		columnBitmasks.put("radiationDevicesModelNo", 2048L);

		columnBitmasks.put("radiationDevicesNumber", 4096L);

		columnBitmasks.put("radiationDevicesUse", 8192L);

		columnBitmasks.put("counter", 16384L);

		columnBitmasks.put("hsraApplicationId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RadiationDevicesDetailAdd _escapedModel;

}